// Copyright (c) 2025, the Dart project authors. Please see the AUTHORS file
// for details. All rights reserved. Use of this source code is governed by a
// BSD-style license that can be found in the LICENSE file.

// This file is generated, do not edit.
// File generated by pkgs/pub_formats/tool/generate.dart.
// Must be rerun when pkgs/pub_formats/doc/schema/ is modified.

// ignore_for_file: unused_element, public_member_api_docs

import 'dart:io';

class DependencyTypeSyntax {
  final String name;

  const DependencyTypeSyntax._(this.name);

  static const directMain = DependencyTypeSyntax._('direct main');

  static const transitive = DependencyTypeSyntax._('transitive');

  static const List<DependencyTypeSyntax> values = [directMain, transitive];

  static final Map<String, DependencyTypeSyntax> _byName = {
    for (final value in values) value.name: value,
  };

  DependencyTypeSyntax.unknown(this.name)
    : assert(!_byName.keys.contains(name));

  factory DependencyTypeSyntax.fromJson(String name) {
    final knownValue = _byName[name];
    if (knownValue != null) {
      return knownValue;
    }
    return DependencyTypeSyntax.unknown(name);
  }

  bool get isKnown => _byName[name] != null;

  @override
  String toString() => name;
}

class GitPackageDescriptionSyntax extends PackageDescriptionSyntax {
  GitPackageDescriptionSyntax.fromJson(super.json, {super.path})
    : super.fromJson();

  GitPackageDescriptionSyntax({
    required String path$,
    required String ref,
    required String resolvedRef,
    required String url,
  }) : super() {
    _path$ = path$;
    _ref = ref;
    _resolvedRef = resolvedRef;
    _url = url;
    json.sortOnKey();
  }

  /// Setup all fields for [GitPackageDescriptionSyntax] that are not in
  /// [PackageDescriptionSyntax].
  void setup({
    required String path$,
    required String ref,
    required String resolvedRef,
    required String url,
  }) {
    _path$ = path$;
    _ref = ref;
    _resolvedRef = resolvedRef;
    _url = url;
    json.sortOnKey();
  }

  String get path$ => _reader.get<String>('path');

  set _path$(String value) {
    json.setOrRemove('path', value);
  }

  List<String> _validatePath$() => _reader.validate<String>('path');

  String get ref => _reader.get<String>('ref');

  set _ref(String value) {
    json.setOrRemove('ref', value);
  }

  List<String> _validateRef() => _reader.validate<String>('ref');

  String get resolvedRef => _reader.get<String>('resolved-ref');

  set _resolvedRef(String value) {
    json.setOrRemove('resolved-ref', value);
  }

  List<String> _validateResolvedRef() =>
      _reader.validate<String>('resolved-ref');

  String get url => _reader.get<String>('url');

  set _url(String value) {
    json.setOrRemove('url', value);
  }

  List<String> _validateUrl() => _reader.validate<String>('url');

  @override
  List<String> validate() => [
    ...super.validate(),
    ..._validatePath$(),
    ..._validateRef(),
    ..._validateResolvedRef(),
    ..._validateUrl(),
  ];

  @override
  String toString() => 'GitPackageDescriptionSyntax($json)';
}

class HostedPackageDescriptionSyntax extends PackageDescriptionSyntax {
  HostedPackageDescriptionSyntax.fromJson(super.json, {super.path})
    : super.fromJson();

  HostedPackageDescriptionSyntax({
    required String name,
    required String sha256,
    required String url,
  }) : super() {
    _name = name;
    _sha256 = sha256;
    _url = url;
    json.sortOnKey();
  }

  /// Setup all fields for [HostedPackageDescriptionSyntax] that are not in
  /// [PackageDescriptionSyntax].
  void setup({
    required String name,
    required String sha256,
    required String url,
  }) {
    _name = name;
    _sha256 = sha256;
    _url = url;
    json.sortOnKey();
  }

  String get name => _reader.get<String>('name');

  set _name(String value) {
    json.setOrRemove('name', value);
  }

  List<String> _validateName() => _reader.validate<String>('name');

  String get sha256 => _reader.get<String>('sha256');

  set _sha256(String value) {
    json.setOrRemove('sha256', value);
  }

  List<String> _validateSha256() => _reader.validate<String>('sha256');

  String get url => _reader.get<String>('url');

  set _url(String value) {
    json.setOrRemove('url', value);
  }

  List<String> _validateUrl() => _reader.validate<String>('url');

  @override
  List<String> validate() => [
    ...super.validate(),
    ..._validateName(),
    ..._validateSha256(),
    ..._validateUrl(),
  ];

  @override
  String toString() => 'HostedPackageDescriptionSyntax($json)';
}

class PackageSyntax extends JsonObjectSyntax {
  PackageSyntax.fromJson(super.json, {super.path = const []})
    : super.fromJson();

  PackageSyntax({
    required DependencyTypeSyntax dependency,
    required PackageDescriptionSyntax description,
    required PackageSourceSyntax source,
    required String version,
  }) : super() {
    _dependency = dependency;
    _description = description;
    _source = source;
    _version = version;
    json.sortOnKey();
  }

  DependencyTypeSyntax get dependency {
    final jsonValue = _reader.get<String>('dependency');
    return DependencyTypeSyntax.fromJson(jsonValue);
  }

  set _dependency(DependencyTypeSyntax value) {
    json['dependency'] = value.name;
  }

  List<String> _validateDependency() => _reader.validate<String>('dependency');

  PackageDescriptionSyntax get description {
    final jsonValue = _reader.map$('description');
    return PackageDescriptionSyntax.fromJson(
      jsonValue,
      path: [...path, 'description'],
    );
  }

  set _description(PackageDescriptionSyntax value) {
    json['description'] = value.json;
  }

  List<String> _validateDescription() {
    final mapErrors = _reader.validate<Map<String, Object?>>('description');
    if (mapErrors.isNotEmpty) {
      return mapErrors;
    }
    return description.validate();
  }

  PackageSourceSyntax get source {
    final jsonValue = _reader.get<String>('source');
    return PackageSourceSyntax.fromJson(jsonValue);
  }

  set _source(PackageSourceSyntax value) {
    json['source'] = value.name;
  }

  List<String> _validateSource() => _reader.validate<String>('source');

  String get version => _reader.get<String>('version');

  set _version(String value) {
    json.setOrRemove('version', value);
  }

  List<String> _validateVersion() => _reader.validate<String>('version');

  @override
  List<String> validate() => [
    ...super.validate(),
    ..._validateDependency(),
    ..._validateDescription(),
    ..._validateSource(),
    ..._validateVersion(),
  ];

  @override
  String toString() => 'PackageSyntax($json)';
}

class PackageDescriptionSyntax extends JsonObjectSyntax {
  PackageDescriptionSyntax.fromJson(super.json, {super.path = const []})
    : super.fromJson();

  PackageDescriptionSyntax() : super();

  @override
  List<String> validate() => [...super.validate()];

  @override
  String toString() => 'PackageDescriptionSyntax($json)';
}

class PackageSourceSyntax {
  final String name;

  const PackageSourceSyntax._(this.name);

  static const git = PackageSourceSyntax._('git');

  static const hosted = PackageSourceSyntax._('hosted');

  static const path$ = PackageSourceSyntax._('path');

  static const List<PackageSourceSyntax> values = [git, hosted, path$];

  static final Map<String, PackageSourceSyntax> _byName = {
    for (final value in values) value.name: value,
  };

  PackageSourceSyntax.unknown(this.name) : assert(!_byName.keys.contains(name));

  factory PackageSourceSyntax.fromJson(String name) {
    final knownValue = _byName[name];
    if (knownValue != null) {
      return knownValue;
    }
    return PackageSourceSyntax.unknown(name);
  }

  bool get isKnown => _byName[name] != null;

  @override
  String toString() => name;
}

class PathPackageDescriptionSyntax extends PackageDescriptionSyntax {
  PathPackageDescriptionSyntax.fromJson(super.json, {super.path})
    : super.fromJson();

  PathPackageDescriptionSyntax({required String path$, required bool relative})
    : super() {
    _path$ = path$;
    _relative = relative;
    json.sortOnKey();
  }

  /// Setup all fields for [PathPackageDescriptionSyntax] that are not in
  /// [PackageDescriptionSyntax].
  void setup({required String path$, required bool relative}) {
    _path$ = path$;
    _relative = relative;
    json.sortOnKey();
  }

  String get path$ => _reader.get<String>('path');

  set _path$(String value) {
    json.setOrRemove('path', value);
  }

  List<String> _validatePath$() => _reader.validate<String>('path');

  bool get relative => _reader.get<bool>('relative');

  set _relative(bool value) {
    json.setOrRemove('relative', value);
  }

  List<String> _validateRelative() => _reader.validate<bool>('relative');

  @override
  List<String> validate() => [
    ...super.validate(),
    ..._validatePath$(),
    ..._validateRelative(),
  ];

  @override
  String toString() => 'PathPackageDescriptionSyntax($json)';
}

class PubspecLockFileSyntax extends JsonObjectSyntax {
  PubspecLockFileSyntax.fromJson(super.json, {super.path = const []})
    : super.fromJson();

  PubspecLockFileSyntax({
    required Map<String, PackageSyntax>? packages,
    required SDKsSyntax sdks,
  }) : super() {
    _packages = packages;
    _sdks = sdks;
    json.sortOnKey();
  }

  Map<String, PackageSyntax>? get packages {
    final jsonValue = _reader.optionalMap('packages');
    if (jsonValue == null) {
      return null;
    }
    return {
      for (final MapEntry(:key, :value) in jsonValue.entries)
        key: PackageSyntax.fromJson(
          value as Map<String, Object?>,
          path: [...path, key],
        ),
    };
  }

  set _packages(Map<String, PackageSyntax>? value) {
    if (value == null) {
      json.remove('packages');
    } else {
      json['packages'] = {
        for (final MapEntry(:key, :value) in value.entries) key: value.json,
      };
    }
  }

  List<String> _validatePackages() {
    final mapErrors = _reader.validateOptionalMap('packages');
    if (mapErrors.isNotEmpty) {
      return mapErrors;
    }
    final jsonValue = _reader.optionalMap('packages');
    if (jsonValue == null) {
      return [];
    }
    final result = <String>[];
    for (final value in packages!.values) {
      result.addAll(value.validate());
    }
    return result;
  }

  SDKsSyntax get sdks {
    final jsonValue = _reader.map$('sdks');
    return SDKsSyntax.fromJson(jsonValue, path: [...path, 'sdks']);
  }

  set _sdks(SDKsSyntax value) {
    json['sdks'] = value.json;
  }

  List<String> _validateSdks() {
    final mapErrors = _reader.validate<Map<String, Object?>>('sdks');
    if (mapErrors.isNotEmpty) {
      return mapErrors;
    }
    return sdks.validate();
  }

  @override
  List<String> validate() => [
    ...super.validate(),
    ..._validatePackages(),
    ..._validateSdks(),
  ];

  @override
  String toString() => 'PubspecLockFileSyntax($json)';
}

class SDKsSyntax extends JsonObjectSyntax {
  SDKsSyntax.fromJson(super.json, {super.path = const []}) : super.fromJson();

  SDKsSyntax({required String dart}) : super() {
    _dart = dart;
    json.sortOnKey();
  }

  String get dart => _reader.get<String>('dart');

  set _dart(String value) {
    json.setOrRemove('dart', value);
  }

  List<String> _validateDart() => _reader.validate<String>('dart');

  @override
  List<String> validate() => [...super.validate(), ..._validateDart()];

  @override
  String toString() => 'SDKsSyntax($json)';
}

class JsonObjectSyntax {
  final Map<String, Object?> json;

  final List<Object> path;

  JsonReader get _reader => JsonReader(json, path);

  JsonObjectSyntax() : json = {}, path = const [];

  JsonObjectSyntax.fromJson(this.json, {this.path = const []});

  List<String> validate() => [];
}

class JsonReader {
  /// The JSON Object this reader is reading.
  final Map<String, Object?> json;

  /// The path traversed by readers of the surrounding JSON.
  ///
  /// Contains [String] property keys and [int] indices.
  ///
  /// This is used to give more precise error messages.
  final List<Object> path;

  JsonReader(this.json, this.path);

  T get<T extends Object?>(String key) {
    final value = json[key];
    if (value is T) return value;
    throwFormatException(value, T, [key]);
  }

  List<String> validate<T extends Object?>(String key) {
    final value = json[key];
    if (value is T) return [];
    return [
      errorString(value, T, [key]),
    ];
  }

  List<T> list<T extends Object?>(String key) =>
      _castList<T>(get<List<Object?>>(key), key);

  List<String> validateList<T extends Object?>(String key) {
    final listErrors = validate<List<Object?>>(key);
    if (listErrors.isNotEmpty) {
      return listErrors;
    }
    return _validateListElements(get<List<Object?>>(key), key);
  }

  List<T>? optionalList<T extends Object?>(String key) =>
      switch (get<List<Object?>?>(key)?.cast<T>()) {
        null => null,
        final l => _castList<T>(l, key),
      };

  List<String> validateOptionalList<T extends Object?>(String key) {
    final listErrors = validate<List<Object?>?>(key);
    if (listErrors.isNotEmpty) {
      return listErrors;
    }
    final list = get<List<Object?>?>(key);
    if (list == null) {
      return [];
    }
    return _validateListElements(list, key);
  }

  /// [List.cast] but with [FormatException]s.
  List<T> _castList<T extends Object?>(List<Object?> list, String key) {
    for (final (index, value) in list.indexed) {
      if (value is! T) {
        throwFormatException(value, T, [key, index]);
      }
    }
    return list.cast();
  }

  List<String> _validateListElements<T extends Object?>(
    List<Object?> list,
    String key,
  ) {
    final result = <String>[];
    for (final (index, value) in list.indexed) {
      if (value is! T) {
        result.add(errorString(value, T, [key, index]));
      }
    }
    return result;
  }

  Map<String, T> map$<T extends Object?>(String key) =>
      _castMap<T>(get<Map<String, Object?>>(key), key);

  List<String> validateMap<T extends Object?>(String key) {
    final mapErrors = validate<Map<String, Object?>>(key);
    if (mapErrors.isNotEmpty) {
      return mapErrors;
    }
    return _validateMapElements<T>(get<Map<String, Object?>>(key), key);
  }

  Map<String, T>? optionalMap<T extends Object?>(String key) =>
      switch (get<Map<String, Object?>?>(key)) {
        null => null,
        final m => _castMap<T>(m, key),
      };

  List<String> validateOptionalMap<T extends Object?>(String key) {
    final mapErrors = validate<Map<String, Object?>?>(key);
    if (mapErrors.isNotEmpty) {
      return mapErrors;
    }
    final map = get<Map<String, Object?>?>(key);
    if (map == null) {
      return [];
    }
    return _validateMapElements<T>(map, key);
  }

  /// [Map.cast] but with [FormatException]s.
  Map<String, T> _castMap<T extends Object?>(
    Map<String, Object?> map_,
    String parentKey,
  ) {
    for (final MapEntry(:key, :value) in map_.entries) {
      if (value is! T) {
        throwFormatException(value, T, [parentKey, key]);
      }
    }
    return map_.cast();
  }

  List<String> _validateMapElements<T extends Object?>(
    Map<String, Object?> map_,
    String parentKey,
  ) {
    final result = <String>[];
    for (final MapEntry(:key, :value) in map_.entries) {
      if (value is! T) {
        result.add(errorString(value, T, [parentKey, key]));
      }
    }
    return result;
  }

  List<String>? optionalStringList(String key) => optionalList<String>(key);

  List<String> validateOptionalStringList(String key) =>
      validateOptionalList<String>(key);

  List<String> stringList(String key) => list<String>(key);

  List<String> validateStringList(String key) => validateList<String>(key);

  Uri path$(String key) => _fileSystemPathToUri(get<String>(key));

  List<String> validatePath(String key) => validate<String>(key);

  Uri? optionalPath(String key) {
    final value = get<String?>(key);
    if (value == null) return null;
    return _fileSystemPathToUri(value);
  }

  List<String> validateOptionalPath(String key) => validate<String?>(key);

  List<Uri>? optionalPathList(String key) {
    final strings = optionalStringList(key);
    if (strings == null) {
      return null;
    }
    return [for (final string in strings) _fileSystemPathToUri(string)];
  }

  List<String> validateOptionalPathList(String key) =>
      validateOptionalStringList(key);

  static Uri _fileSystemPathToUri(String path) {
    if (path.endsWith(Platform.pathSeparator)) {
      return Uri.directory(path);
    }
    return Uri.file(path);
  }

  String _jsonPathToString(List<Object> pathEnding) =>
      [...path, ...pathEnding].join('.');

  Never throwFormatException(
    Object? value,
    Type expectedType,
    List<Object> pathExtension,
  ) {
    throw FormatException(errorString(value, expectedType, pathExtension));
  }

  String errorString(
    Object? value,
    Type expectedType,
    List<Object> pathExtension,
  ) {
    final pathString = _jsonPathToString(pathExtension);
    if (value == null) {
      return "No value was provided for '$pathString'."
          ' Expected a $expectedType.';
    }
    return "Unexpected value '$value' (${value.runtimeType}) for '$pathString'."
        ' Expected a $expectedType.';
  }

  /// Traverses a JSON path, returns `null` if the path cannot be traversed.
  Object? tryTraverse(List<String> path) {
    Object? json = this.json;
    for (final key in path) {
      if (json is! Map<String, Object?>) {
        return null;
      }
      json = json[key];
    }
    return json;
  }
}

extension on Map<String, Object?> {
  void setOrRemove(String key, Object? value) {
    if (value == null) {
      remove(key);
    } else {
      this[key] = value;
    }
  }
}

extension on List<Uri> {
  List<String> toJson() => [for (final uri in this) uri.toFilePath()];
}

extension<K extends Comparable<K>, V extends Object?> on Map<K, V> {
  void sortOnKey() {
    final result = <K, V>{};
    final keysSorted = keys.toList()..sort();
    for (final key in keysSorted) {
      result[key] = this[key] as V;
    }
    clear();
    addAll(result);
  }
}
