// Copyright (c) 2022, the Dart project authors. Please see the AUTHORS file
// for details. All rights reserved. Use of this source code is governed by a
// BSD-style license that can be found in the LICENSE file.

// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: inference_failure_on_untyped_parameter
// ignore_for_file: invalid_internal_annotation
// ignore_for_file: invalid_use_of_internal_member
// ignore_for_file: library_prefixes
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_library_prefixes
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unintended_html_in_doc_comment
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_non_null_assertion
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:core' show Object, String, bool, double, int;
import 'dart:core' as _$core;

import 'package:jni/_internal.dart' as _$jni;
import 'package:jni/jni.dart' as _$jni;

/// from: `com.example.notification_plugin.Notifications`
class Notifications extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<Notifications> $type;

  @_$jni.internal
  Notifications.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class =
      _$jni.JClass.forName(r'com/example/notification_plugin/Notifications');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $Notifications$NullableType();
  static const type = $Notifications$Type();
  static final _id_new$ = _class.constructorId(
    r'()V',
  );

  static final _new$ = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_NewObject')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public void <init>()`
  /// The returned object must be released after use, by calling the [release] method.
  factory Notifications() {
    return Notifications.fromReference(
        _new$(_class.reference.pointer, _id_new$ as _$jni.JMethodIDPtr)
            .reference);
  }

  static final _id_showNotification = _class.staticMethodId(
    r'showNotification',
    r'(Landroid/content/Context;ILjava/lang/String;Ljava/lang/String;)V',
  );

  static final _showNotification = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Int32,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallStaticVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              int,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public void showNotification(android.content.Context context, int notificationID, java.lang.String title, java.lang.String text)`
  static void showNotification(
    _$jni.JObject? context,
    int notificationID,
    _$jni.JString? title,
    _$jni.JString? text,
  ) {
    final _$context = context?.reference ?? _$jni.jNullReference;
    final _$title = title?.reference ?? _$jni.jNullReference;
    final _$text = text?.reference ?? _$jni.jNullReference;
    _showNotification(
            _class.reference.pointer,
            _id_showNotification as _$jni.JMethodIDPtr,
            _$context.pointer,
            notificationID,
            _$title.pointer,
            _$text.pointer)
        .check();
  }
}

final class $Notifications$NullableType extends _$jni.JObjType<Notifications?> {
  @_$jni.internal
  const $Notifications$NullableType();

  @_$jni.internal
  @_$core.override
  String get signature => r'Lcom/example/notification_plugin/Notifications;';

  @_$jni.internal
  @_$core.override
  Notifications? fromReference(_$jni.JReference reference) => reference.isNull
      ? null
      : Notifications.fromReference(
          reference,
        );
  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectNullableType();

  @_$jni.internal
  @_$core.override
  _$jni.JObjType<Notifications?> get nullableType => this;

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($Notifications$NullableType).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($Notifications$NullableType) &&
        other is $Notifications$NullableType;
  }
}

final class $Notifications$Type extends _$jni.JObjType<Notifications> {
  @_$jni.internal
  const $Notifications$Type();

  @_$jni.internal
  @_$core.override
  String get signature => r'Lcom/example/notification_plugin/Notifications;';

  @_$jni.internal
  @_$core.override
  Notifications fromReference(_$jni.JReference reference) =>
      Notifications.fromReference(
        reference,
      );
  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectNullableType();

  @_$jni.internal
  @_$core.override
  _$jni.JObjType<Notifications?> get nullableType =>
      const $Notifications$NullableType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($Notifications$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($Notifications$Type) &&
        other is $Notifications$Type;
  }
}
