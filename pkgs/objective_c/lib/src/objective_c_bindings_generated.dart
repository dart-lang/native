// Copyright (c) 2024, the Dart project authors. Please see the AUTHORS file
// for details. All rights reserved. Use of this source code is governed by a
// BSD-style license that can be found in the LICENSE file.

// Bindings for `src/foundation.h`.
// Regenerate bindings with `dart run tool/generate_code.dart`.

// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names
// coverage:ignore-file

import 'package:ffi/ffi.dart' as pkg_ffi;

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;
import '../objective_c.dart' as objc;

class NSObject extends objc.ObjCObjectBase {
  NSObject._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super(pointer, retain: retain, release: release);

  /// Constructs a [NSObject] that points to the same underlying object as [other].
  NSObject.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSObject] that wraps the given raw object pointer.
  NSObject.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSObject].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(obj.pointer, _sel_isKindOfClass_, _class_NSObject);
  }

  static void load() {
    _objc_msgSend_1(_class_NSObject, _sel_load);
  }

  static void initialize() {
    _objc_msgSend_1(_class_NSObject, _sel_initialize);
  }

  NSObject init() {
    final _ret = _objc_msgSend_2(this.pointer, _sel_init);
    return NSObject.castFromPointer(_ret, retain: true, release: true);
  }

  static NSObject new1() {
    final _ret = _objc_msgSend_2(_class_NSObject, _sel_new);
    return NSObject.castFromPointer(_ret, retain: false, release: true);
  }

  static NSObject allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_3(_class_NSObject, _sel_allocWithZone_, zone);
    return NSObject.castFromPointer(_ret, retain: false, release: true);
  }

  static NSObject alloc() {
    final _ret = _objc_msgSend_2(_class_NSObject, _sel_alloc);
    return NSObject.castFromPointer(_ret, retain: false, release: true);
  }

  void dealloc() {
    _objc_msgSend_1(this.pointer, _sel_dealloc);
  }

  void finalize() {
    _objc_msgSend_1(this.pointer, _sel_finalize);
  }

  objc.ObjCObjectBase copy() {
    final _ret = _objc_msgSend_2(this.pointer, _sel_copy);
    return objc.ObjCObjectBase(_ret, retain: false, release: true);
  }

  objc.ObjCObjectBase mutableCopy() {
    final _ret = _objc_msgSend_2(this.pointer, _sel_mutableCopy);
    return objc.ObjCObjectBase(_ret, retain: false, release: true);
  }

  static objc.ObjCObjectBase copyWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_3(_class_NSObject, _sel_copyWithZone_, zone);
    return objc.ObjCObjectBase(_ret, retain: false, release: true);
  }

  static objc.ObjCObjectBase mutableCopyWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_3(_class_NSObject, _sel_mutableCopyWithZone_, zone);
    return objc.ObjCObjectBase(_ret, retain: false, release: true);
  }

  static bool instancesRespondToSelector_(
      ffi.Pointer<objc.ObjCSelector> aSelector) {
    return _objc_msgSend_4(
        _class_NSObject, _sel_instancesRespondToSelector_, aSelector);
  }

  static bool conformsToProtocol_(Protocol protocol) {
    return _objc_msgSend_5(
        _class_NSObject, _sel_conformsToProtocol_, protocol.pointer);
  }

  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> methodForSelector_(
      ffi.Pointer<objc.ObjCSelector> aSelector) {
    return _objc_msgSend_6(this.pointer, _sel_methodForSelector_, aSelector);
  }

  static ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>
      instanceMethodForSelector_(ffi.Pointer<objc.ObjCSelector> aSelector) {
    return _objc_msgSend_6(
        _class_NSObject, _sel_instanceMethodForSelector_, aSelector);
  }

  void doesNotRecognizeSelector_(ffi.Pointer<objc.ObjCSelector> aSelector) {
    _objc_msgSend_7(this.pointer, _sel_doesNotRecognizeSelector_, aSelector);
  }

  objc.ObjCObjectBase forwardingTargetForSelector_(
      ffi.Pointer<objc.ObjCSelector> aSelector) {
    final _ret = _objc_msgSend_8(
        this.pointer, _sel_forwardingTargetForSelector_, aSelector);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  void forwardInvocation_(NSInvocation anInvocation) {
    _objc_msgSend_9(
        this.pointer, _sel_forwardInvocation_, anInvocation.pointer);
  }

  NSMethodSignature methodSignatureForSelector_(
      ffi.Pointer<objc.ObjCSelector> aSelector) {
    final _ret = _objc_msgSend_10(
        this.pointer, _sel_methodSignatureForSelector_, aSelector);
    return NSMethodSignature.castFromPointer(_ret, retain: true, release: true);
  }

  static NSMethodSignature instanceMethodSignatureForSelector_(
      ffi.Pointer<objc.ObjCSelector> aSelector) {
    final _ret = _objc_msgSend_10(
        _class_NSObject, _sel_instanceMethodSignatureForSelector_, aSelector);
    return NSMethodSignature.castFromPointer(_ret, retain: true, release: true);
  }

  bool allowsWeakReference() {
    return _objc_msgSend_11(this.pointer, _sel_allowsWeakReference);
  }

  bool retainWeakReference() {
    return _objc_msgSend_11(this.pointer, _sel_retainWeakReference);
  }

  static bool isSubclassOfClass_(objc.ObjCObjectBase aClass) {
    return _objc_msgSend_0(
        _class_NSObject, _sel_isSubclassOfClass_, aClass.pointer);
  }

  static bool resolveClassMethod_(ffi.Pointer<objc.ObjCSelector> sel) {
    return _objc_msgSend_4(_class_NSObject, _sel_resolveClassMethod_, sel);
  }

  static bool resolveInstanceMethod_(ffi.Pointer<objc.ObjCSelector> sel) {
    return _objc_msgSend_4(_class_NSObject, _sel_resolveInstanceMethod_, sel);
  }

  static int hash() {
    return _objc_msgSend_12(_class_NSObject, _sel_hash);
  }

  static objc.ObjCObjectBase superclass() {
    final _ret = _objc_msgSend_2(_class_NSObject, _sel_superclass);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  static objc.ObjCObjectBase class1() {
    final _ret = _objc_msgSend_2(_class_NSObject, _sel_class);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  static NSString description() {
    final _ret = _objc_msgSend_32(_class_NSObject, _sel_description);
    return NSString.castFromPointer(_ret, retain: true, release: true);
  }

  static NSString debugDescription() {
    final _ret = _objc_msgSend_32(_class_NSObject, _sel_debugDescription);
    return NSString.castFromPointer(_ret, retain: true, release: true);
  }

  static int version() {
    return _objc_msgSend_76(_class_NSObject, _sel_version);
  }

  static void setVersion_(int aVersion) {
    _objc_msgSend_284(_class_NSObject, _sel_setVersion_, aVersion);
  }

  objc.ObjCObjectBase get classForCoder {
    final _ret = _objc_msgSend_2(this.pointer, _sel_classForCoder);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  objc.ObjCObjectBase? replacementObjectForCoder_(NSCoder coder) {
    final _ret = _objc_msgSend_14(
        this.pointer, _sel_replacementObjectForCoder_, coder.pointer);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  objc.ObjCObjectBase? awakeAfterUsingCoder_(NSCoder coder) {
    final _ret = _objc_msgSend_14(
        this.pointer, _sel_awakeAfterUsingCoder_, coder.pointer);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: false, release: true);
  }

  static void poseAsClass_(objc.ObjCObjectBase aClass) {
    _objc_msgSend_198(_class_NSObject, _sel_poseAsClass_, aClass.pointer);
  }

  objc.ObjCObjectBase get autoContentAccessingProxy {
    final _ret = _objc_msgSend_2(this.pointer, _sel_autoContentAccessingProxy);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  void URL_resourceDataDidBecomeAvailable_(NSURL sender, NSData newBytes) {
    _objc_msgSend_285(this.pointer, _sel_URL_resourceDataDidBecomeAvailable_,
        sender.pointer, newBytes.pointer);
  }

  void URLResourceDidFinishLoading_(NSURL sender) {
    _objc_msgSend_286(
        this.pointer, _sel_URLResourceDidFinishLoading_, sender.pointer);
  }

  void URLResourceDidCancelLoading_(NSURL sender) {
    _objc_msgSend_286(
        this.pointer, _sel_URLResourceDidCancelLoading_, sender.pointer);
  }

  void URL_resourceDidFailLoadingWithReason_(NSURL sender, NSString reason) {
    _objc_msgSend_287(this.pointer, _sel_URL_resourceDidFailLoadingWithReason_,
        sender.pointer, reason.pointer);
  }
}

late final _class_NSObject = objc.getClass("NSObject");
late final _sel_load = objc.registerName("load");
final _objc_msgSend_1 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_initialize = objc.registerName("initialize");
typedef instancetype = ffi.Pointer<objc.ObjCObject>;
typedef Dartinstancetype = objc.ObjCObjectBase;
late final _sel_init = objc.registerName("init");
final _objc_msgSend_2 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_new = objc.registerName("new");

final class _NSZone extends ffi.Opaque {}

late final _sel_allocWithZone_ = objc.registerName("allocWithZone:");
final _objc_msgSend_3 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<_NSZone>)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<_NSZone>)>();
late final _sel_alloc = objc.registerName("alloc");
late final _sel_dealloc = objc.registerName("dealloc");
late final _sel_finalize = objc.registerName("finalize");
late final _sel_copy = objc.registerName("copy");
late final _sel_mutableCopy = objc.registerName("mutableCopy");
late final _sel_copyWithZone_ = objc.registerName("copyWithZone:");
late final _sel_mutableCopyWithZone_ =
    objc.registerName("mutableCopyWithZone:");
late final _sel_instancesRespondToSelector_ =
    objc.registerName("instancesRespondToSelector:");
final _objc_msgSend_4 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        bool Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCSelector>)>();

class Protocol extends objc.ObjCObjectBase {
  Protocol._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super(pointer, retain: retain, release: release);

  /// Constructs a [Protocol] that points to the same underlying object as [other].
  Protocol.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [Protocol] that wraps the given raw object pointer.
  Protocol.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [Protocol].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(obj.pointer, _sel_isKindOfClass_, _class_Protocol);
  }
}

late final _class_Protocol = objc.getClass("Protocol");
final _objc_msgSend_0 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        bool Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_isKindOfClass_ = objc.registerName("isKindOfClass:");
late final _sel_conformsToProtocol_ = objc.registerName("conformsToProtocol:");
final _objc_msgSend_5 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        bool Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_methodForSelector_ = objc.registerName("methodForSelector:");
final _objc_msgSend_6 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_instanceMethodForSelector_ =
    objc.registerName("instanceMethodForSelector:");
late final _sel_doesNotRecognizeSelector_ =
    objc.registerName("doesNotRecognizeSelector:");
final _objc_msgSend_7 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_forwardingTargetForSelector_ =
    objc.registerName("forwardingTargetForSelector:");
final _objc_msgSend_8 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCSelector>)>();

class NSInvocation extends objc.ObjCObjectBase {
  NSInvocation._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super(pointer, retain: retain, release: release);

  /// Constructs a [NSInvocation] that points to the same underlying object as [other].
  NSInvocation.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSInvocation] that wraps the given raw object pointer.
  NSInvocation.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSInvocation].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSInvocation);
  }
}

late final _class_NSInvocation = objc.getClass("NSInvocation");
late final _sel_forwardInvocation_ = objc.registerName("forwardInvocation:");
final _objc_msgSend_9 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();

class NSMethodSignature extends objc.ObjCObjectBase {
  NSMethodSignature._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super(pointer, retain: retain, release: release);

  /// Constructs a [NSMethodSignature] that points to the same underlying object as [other].
  NSMethodSignature.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSMethodSignature] that wraps the given raw object pointer.
  NSMethodSignature.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSMethodSignature].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSMethodSignature);
  }
}

late final _class_NSMethodSignature = objc.getClass("NSMethodSignature");
late final _sel_methodSignatureForSelector_ =
    objc.registerName("methodSignatureForSelector:");
final _objc_msgSend_10 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_instanceMethodSignatureForSelector_ =
    objc.registerName("instanceMethodSignatureForSelector:");
late final _sel_allowsWeakReference = objc.registerName("allowsWeakReference");
final _objc_msgSend_11 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_retainWeakReference = objc.registerName("retainWeakReference");
late final _sel_isSubclassOfClass_ = objc.registerName("isSubclassOfClass:");
late final _sel_resolveClassMethod_ = objc.registerName("resolveClassMethod:");
late final _sel_resolveInstanceMethod_ =
    objc.registerName("resolveInstanceMethod:");
late final _sel_hash = objc.registerName("hash");
final _objc_msgSend_12 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_superclass = objc.registerName("superclass");
late final _sel_class = objc.registerName("class");

class NSString extends NSObject {
  factory NSString(String str) {
    final cstr = str.toNativeUtf16();
    final nsstr = stringWithCharacters_length_(cstr.cast(), str.length);
    pkg_ffi.calloc.free(cstr);
    return nsstr;
  }

  @override
  String toString() {
    final data =
        dataUsingEncoding_(0x94000100 /* NSUTF16LittleEndianStringEncoding */);
    return data!.bytes.cast<pkg_ffi.Utf16>().toDartString(length: length);
  }

  NSString._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSString] that points to the same underlying object as [other].
  NSString.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSString] that wraps the given raw object pointer.
  NSString.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSString].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(obj.pointer, _sel_isKindOfClass_, _class_NSString);
  }

  int get length {
    return _objc_msgSend_12(this.pointer, _sel_length);
  }

  int characterAtIndex_(int index) {
    return _objc_msgSend_13(this.pointer, _sel_characterAtIndex_, index);
  }

  @override
  NSString init() {
    final _ret = _objc_msgSend_2(this.pointer, _sel_init);
    return NSString.castFromPointer(_ret, retain: true, release: true);
  }

  NSString? initWithCoder_(NSCoder coder) {
    final _ret =
        _objc_msgSend_14(this.pointer, _sel_initWithCoder_, coder.pointer);
    return _ret.address == 0
        ? null
        : NSString.castFromPointer(_ret, retain: true, release: true);
  }

  NSString substringFromIndex_(int from) {
    final _ret = _objc_msgSend_15(this.pointer, _sel_substringFromIndex_, from);
    return NSString.castFromPointer(_ret, retain: true, release: true);
  }

  NSString substringToIndex_(int to) {
    final _ret = _objc_msgSend_15(this.pointer, _sel_substringToIndex_, to);
    return NSString.castFromPointer(_ret, retain: true, release: true);
  }

  NSString substringWithRange_(_NSRange range) {
    final _ret =
        _objc_msgSend_16(this.pointer, _sel_substringWithRange_, range);
    return NSString.castFromPointer(_ret, retain: true, release: true);
  }

  void getCharacters_range_(
      ffi.Pointer<ffi.UnsignedShort> buffer, _NSRange range) {
    _objc_msgSend_17(this.pointer, _sel_getCharacters_range_, buffer, range);
  }

  int compare_(NSString string) {
    return _objc_msgSend_18(this.pointer, _sel_compare_, string.pointer);
  }

  int compare_options_(NSString string, int mask) {
    return _objc_msgSend_19(
        this.pointer, _sel_compare_options_, string.pointer, mask);
  }

  int compare_options_range_(
      NSString string, int mask, _NSRange rangeOfReceiverToCompare) {
    return _objc_msgSend_20(this.pointer, _sel_compare_options_range_,
        string.pointer, mask, rangeOfReceiverToCompare);
  }

  int compare_options_range_locale_(NSString string, int mask,
      _NSRange rangeOfReceiverToCompare, objc.ObjCObjectBase? locale) {
    return _objc_msgSend_21(
        this.pointer,
        _sel_compare_options_range_locale_,
        string.pointer,
        mask,
        rangeOfReceiverToCompare,
        locale?.pointer ?? ffi.nullptr);
  }

  int caseInsensitiveCompare_(NSString string) {
    return _objc_msgSend_18(
        this.pointer, _sel_caseInsensitiveCompare_, string.pointer);
  }

  int localizedCompare_(NSString string) {
    return _objc_msgSend_18(
        this.pointer, _sel_localizedCompare_, string.pointer);
  }

  int localizedCaseInsensitiveCompare_(NSString string) {
    return _objc_msgSend_18(
        this.pointer, _sel_localizedCaseInsensitiveCompare_, string.pointer);
  }

  int localizedStandardCompare_(NSString string) {
    return _objc_msgSend_18(
        this.pointer, _sel_localizedStandardCompare_, string.pointer);
  }

  bool isEqualToString_(NSString aString) {
    return _objc_msgSend_22(
        this.pointer, _sel_isEqualToString_, aString.pointer);
  }

  bool hasPrefix_(NSString str) {
    return _objc_msgSend_22(this.pointer, _sel_hasPrefix_, str.pointer);
  }

  bool hasSuffix_(NSString str) {
    return _objc_msgSend_22(this.pointer, _sel_hasSuffix_, str.pointer);
  }

  NSString commonPrefixWithString_options_(NSString str, int mask) {
    final _ret = _objc_msgSend_23(
        this.pointer, _sel_commonPrefixWithString_options_, str.pointer, mask);
    return NSString.castFromPointer(_ret, retain: true, release: true);
  }

  bool containsString_(NSString str) {
    return _objc_msgSend_22(this.pointer, _sel_containsString_, str.pointer);
  }

  bool localizedCaseInsensitiveContainsString_(NSString str) {
    return _objc_msgSend_22(this.pointer,
        _sel_localizedCaseInsensitiveContainsString_, str.pointer);
  }

  bool localizedStandardContainsString_(NSString str) {
    return _objc_msgSend_22(
        this.pointer, _sel_localizedStandardContainsString_, str.pointer);
  }

  void localizedStandardRangeOfString_(
      ffi.Pointer<_NSRange> stret, NSString str) {
    objc.useMsgSendVariants
        ? _objc_msgSend_24Stret(stret, this.pointer,
            _sel_localizedStandardRangeOfString_, str.pointer)
        : stret.ref = _objc_msgSend_24(
            this.pointer, _sel_localizedStandardRangeOfString_, str.pointer);
  }

  void rangeOfString_(ffi.Pointer<_NSRange> stret, NSString searchString) {
    objc.useMsgSendVariants
        ? _objc_msgSend_24Stret(
            stret, this.pointer, _sel_rangeOfString_, searchString.pointer)
        : stret.ref = _objc_msgSend_24(
            this.pointer, _sel_rangeOfString_, searchString.pointer);
  }

  void rangeOfString_options_(
      ffi.Pointer<_NSRange> stret, NSString searchString, int mask) {
    objc.useMsgSendVariants
        ? _objc_msgSend_25Stret(stret, this.pointer,
            _sel_rangeOfString_options_, searchString.pointer, mask)
        : stret.ref = _objc_msgSend_25(this.pointer,
            _sel_rangeOfString_options_, searchString.pointer, mask);
  }

  void rangeOfString_options_range_(ffi.Pointer<_NSRange> stret,
      NSString searchString, int mask, _NSRange rangeOfReceiverToSearch) {
    objc.useMsgSendVariants
        ? _objc_msgSend_26Stret(
            stret,
            this.pointer,
            _sel_rangeOfString_options_range_,
            searchString.pointer,
            mask,
            rangeOfReceiverToSearch)
        : stret.ref = _objc_msgSend_26(
            this.pointer,
            _sel_rangeOfString_options_range_,
            searchString.pointer,
            mask,
            rangeOfReceiverToSearch);
  }

  void rangeOfString_options_range_locale_(
      ffi.Pointer<_NSRange> stret,
      NSString searchString,
      int mask,
      _NSRange rangeOfReceiverToSearch,
      NSLocale? locale) {
    objc.useMsgSendVariants
        ? _objc_msgSend_27Stret(
            stret,
            this.pointer,
            _sel_rangeOfString_options_range_locale_,
            searchString.pointer,
            mask,
            rangeOfReceiverToSearch,
            locale?.pointer ?? ffi.nullptr)
        : stret.ref = _objc_msgSend_27(
            this.pointer,
            _sel_rangeOfString_options_range_locale_,
            searchString.pointer,
            mask,
            rangeOfReceiverToSearch,
            locale?.pointer ?? ffi.nullptr);
  }

  void rangeOfCharacterFromSet_(
      ffi.Pointer<_NSRange> stret, NSCharacterSet searchSet) {
    objc.useMsgSendVariants
        ? _objc_msgSend_229Stret(stret, this.pointer,
            _sel_rangeOfCharacterFromSet_, searchSet.pointer)
        : stret.ref = _objc_msgSend_229(
            this.pointer, _sel_rangeOfCharacterFromSet_, searchSet.pointer);
  }

  void rangeOfCharacterFromSet_options_(
      ffi.Pointer<_NSRange> stret, NSCharacterSet searchSet, int mask) {
    objc.useMsgSendVariants
        ? _objc_msgSend_230Stret(stret, this.pointer,
            _sel_rangeOfCharacterFromSet_options_, searchSet.pointer, mask)
        : stret.ref = _objc_msgSend_230(this.pointer,
            _sel_rangeOfCharacterFromSet_options_, searchSet.pointer, mask);
  }

  void rangeOfCharacterFromSet_options_range_(ffi.Pointer<_NSRange> stret,
      NSCharacterSet searchSet, int mask, _NSRange rangeOfReceiverToSearch) {
    objc.useMsgSendVariants
        ? _objc_msgSend_231Stret(
            stret,
            this.pointer,
            _sel_rangeOfCharacterFromSet_options_range_,
            searchSet.pointer,
            mask,
            rangeOfReceiverToSearch)
        : stret.ref = _objc_msgSend_231(
            this.pointer,
            _sel_rangeOfCharacterFromSet_options_range_,
            searchSet.pointer,
            mask,
            rangeOfReceiverToSearch);
  }

  void rangeOfComposedCharacterSequenceAtIndex_(
      ffi.Pointer<_NSRange> stret, int index) {
    objc.useMsgSendVariants
        ? _objc_msgSend_232Stret(stret, this.pointer,
            _sel_rangeOfComposedCharacterSequenceAtIndex_, index)
        : stret.ref = _objc_msgSend_232(
            this.pointer, _sel_rangeOfComposedCharacterSequenceAtIndex_, index);
  }

  void rangeOfComposedCharacterSequencesForRange_(
      ffi.Pointer<_NSRange> stret, _NSRange range) {
    objc.useMsgSendVariants
        ? _objc_msgSend_233Stret(stret, this.pointer,
            _sel_rangeOfComposedCharacterSequencesForRange_, range)
        : stret.ref = _objc_msgSend_233(this.pointer,
            _sel_rangeOfComposedCharacterSequencesForRange_, range);
  }

  NSString stringByAppendingString_(NSString aString) {
    final _ret = _objc_msgSend_101(
        this.pointer, _sel_stringByAppendingString_, aString.pointer);
    return NSString.castFromPointer(_ret, retain: true, release: true);
  }

  NSString stringByAppendingFormat_(NSString format) {
    final _ret = _objc_msgSend_101(
        this.pointer, _sel_stringByAppendingFormat_, format.pointer);
    return NSString.castFromPointer(_ret, retain: true, release: true);
  }

  double get doubleValue {
    return objc.useMsgSendVariants
        ? _objc_msgSend_80Fpret(this.pointer, _sel_doubleValue)
        : _objc_msgSend_80(this.pointer, _sel_doubleValue);
  }

  double get floatValue {
    return objc.useMsgSendVariants
        ? _objc_msgSend_79Fpret(this.pointer, _sel_floatValue)
        : _objc_msgSend_79(this.pointer, _sel_floatValue);
  }

  int get intValue {
    return _objc_msgSend_74(this.pointer, _sel_intValue);
  }

  int get integerValue {
    return _objc_msgSend_76(this.pointer, _sel_integerValue);
  }

  int get longLongValue {
    return _objc_msgSend_77(this.pointer, _sel_longLongValue);
  }

  bool get boolValue {
    return _objc_msgSend_11(this.pointer, _sel_boolValue);
  }

  NSString get uppercaseString {
    final _ret = _objc_msgSend_32(this.pointer, _sel_uppercaseString);
    return NSString.castFromPointer(_ret, retain: true, release: true);
  }

  NSString get lowercaseString {
    final _ret = _objc_msgSend_32(this.pointer, _sel_lowercaseString);
    return NSString.castFromPointer(_ret, retain: true, release: true);
  }

  NSString get capitalizedString {
    final _ret = _objc_msgSend_32(this.pointer, _sel_capitalizedString);
    return NSString.castFromPointer(_ret, retain: true, release: true);
  }

  NSString get localizedUppercaseString {
    final _ret = _objc_msgSend_32(this.pointer, _sel_localizedUppercaseString);
    return NSString.castFromPointer(_ret, retain: true, release: true);
  }

  NSString get localizedLowercaseString {
    final _ret = _objc_msgSend_32(this.pointer, _sel_localizedLowercaseString);
    return NSString.castFromPointer(_ret, retain: true, release: true);
  }

  NSString get localizedCapitalizedString {
    final _ret =
        _objc_msgSend_32(this.pointer, _sel_localizedCapitalizedString);
    return NSString.castFromPointer(_ret, retain: true, release: true);
  }

  NSString uppercaseStringWithLocale_(NSLocale? locale) {
    final _ret = _objc_msgSend_234(this.pointer,
        _sel_uppercaseStringWithLocale_, locale?.pointer ?? ffi.nullptr);
    return NSString.castFromPointer(_ret, retain: true, release: true);
  }

  NSString lowercaseStringWithLocale_(NSLocale? locale) {
    final _ret = _objc_msgSend_234(this.pointer,
        _sel_lowercaseStringWithLocale_, locale?.pointer ?? ffi.nullptr);
    return NSString.castFromPointer(_ret, retain: true, release: true);
  }

  NSString capitalizedStringWithLocale_(NSLocale? locale) {
    final _ret = _objc_msgSend_234(this.pointer,
        _sel_capitalizedStringWithLocale_, locale?.pointer ?? ffi.nullptr);
    return NSString.castFromPointer(_ret, retain: true, release: true);
  }

  void getLineStart_end_contentsEnd_forRange_(
      ffi.Pointer<ffi.UnsignedLong> startPtr,
      ffi.Pointer<ffi.UnsignedLong> lineEndPtr,
      ffi.Pointer<ffi.UnsignedLong> contentsEndPtr,
      _NSRange range) {
    _objc_msgSend_235(this.pointer, _sel_getLineStart_end_contentsEnd_forRange_,
        startPtr, lineEndPtr, contentsEndPtr, range);
  }

  void lineRangeForRange_(ffi.Pointer<_NSRange> stret, _NSRange range) {
    objc.useMsgSendVariants
        ? _objc_msgSend_233Stret(
            stret, this.pointer, _sel_lineRangeForRange_, range)
        : stret.ref =
            _objc_msgSend_233(this.pointer, _sel_lineRangeForRange_, range);
  }

  void getParagraphStart_end_contentsEnd_forRange_(
      ffi.Pointer<ffi.UnsignedLong> startPtr,
      ffi.Pointer<ffi.UnsignedLong> parEndPtr,
      ffi.Pointer<ffi.UnsignedLong> contentsEndPtr,
      _NSRange range) {
    _objc_msgSend_235(
        this.pointer,
        _sel_getParagraphStart_end_contentsEnd_forRange_,
        startPtr,
        parEndPtr,
        contentsEndPtr,
        range);
  }

  void paragraphRangeForRange_(ffi.Pointer<_NSRange> stret, _NSRange range) {
    objc.useMsgSendVariants
        ? _objc_msgSend_233Stret(
            stret, this.pointer, _sel_paragraphRangeForRange_, range)
        : stret.ref = _objc_msgSend_233(
            this.pointer, _sel_paragraphRangeForRange_, range);
  }

  void enumerateSubstringsInRange_options_usingBlock_(_NSRange range, int opts,
      ObjCBlock_ffiVoid_NSString_NSRange_NSRange_bool block) {
    _objc_msgSend_236(
        this.pointer,
        _sel_enumerateSubstringsInRange_options_usingBlock_,
        range,
        opts,
        block.pointer);
  }

  void enumerateLinesUsingBlock_(ObjCBlock_ffiVoid_NSString_bool block) {
    _objc_msgSend_237(
        this.pointer, _sel_enumerateLinesUsingBlock_, block.pointer);
  }

  ffi.Pointer<ffi.Char> get UTF8String {
    return _objc_msgSend_84(this.pointer, _sel_UTF8String);
  }

  int get fastestEncoding {
    return _objc_msgSend_12(this.pointer, _sel_fastestEncoding);
  }

  int get smallestEncoding {
    return _objc_msgSend_12(this.pointer, _sel_smallestEncoding);
  }

  NSData? dataUsingEncoding_allowLossyConversion_(int encoding, bool lossy) {
    final _ret = _objc_msgSend_238(this.pointer,
        _sel_dataUsingEncoding_allowLossyConversion_, encoding, lossy);
    return _ret.address == 0
        ? null
        : NSData.castFromPointer(_ret, retain: true, release: true);
  }

  NSData? dataUsingEncoding_(int encoding) {
    final _ret =
        _objc_msgSend_239(this.pointer, _sel_dataUsingEncoding_, encoding);
    return _ret.address == 0
        ? null
        : NSData.castFromPointer(_ret, retain: true, release: true);
  }

  bool canBeConvertedToEncoding_(int encoding) {
    return _objc_msgSend_121(
        this.pointer, _sel_canBeConvertedToEncoding_, encoding);
  }

  ffi.Pointer<ffi.Char> cStringUsingEncoding_(int encoding) {
    return _objc_msgSend_240(
        this.pointer, _sel_cStringUsingEncoding_, encoding);
  }

  bool getCString_maxLength_encoding_(
      ffi.Pointer<ffi.Char> buffer, int maxBufferCount, int encoding) {
    return _objc_msgSend_241(this.pointer, _sel_getCString_maxLength_encoding_,
        buffer, maxBufferCount, encoding);
  }

  bool getBytes_maxLength_usedLength_encoding_options_range_remainingRange_(
      ffi.Pointer<ffi.Void> buffer,
      int maxBufferCount,
      ffi.Pointer<ffi.UnsignedLong> usedBufferCount,
      int encoding,
      int options,
      _NSRange range,
      ffi.Pointer<_NSRange> leftover) {
    return _objc_msgSend_242(
        this.pointer,
        _sel_getBytes_maxLength_usedLength_encoding_options_range_remainingRange_,
        buffer,
        maxBufferCount,
        usedBufferCount,
        encoding,
        options,
        range,
        leftover);
  }

  int maximumLengthOfBytesUsingEncoding_(int enc) {
    return _objc_msgSend_118(
        this.pointer, _sel_maximumLengthOfBytesUsingEncoding_, enc);
  }

  int lengthOfBytesUsingEncoding_(int enc) {
    return _objc_msgSend_118(
        this.pointer, _sel_lengthOfBytesUsingEncoding_, enc);
  }

  static ffi.Pointer<ffi.UnsignedLong> getAvailableStringEncodings() {
    return _objc_msgSend_243(_class_NSString, _sel_availableStringEncodings);
  }

  static NSString localizedNameOfStringEncoding_(int encoding) {
    final _ret = _objc_msgSend_15(
        _class_NSString, _sel_localizedNameOfStringEncoding_, encoding);
    return NSString.castFromPointer(_ret, retain: true, release: true);
  }

  static int getDefaultCStringEncoding() {
    return _objc_msgSend_12(_class_NSString, _sel_defaultCStringEncoding);
  }

  NSString get decomposedStringWithCanonicalMapping {
    final _ret = _objc_msgSend_32(
        this.pointer, _sel_decomposedStringWithCanonicalMapping);
    return NSString.castFromPointer(_ret, retain: true, release: true);
  }

  NSString get precomposedStringWithCanonicalMapping {
    final _ret = _objc_msgSend_32(
        this.pointer, _sel_precomposedStringWithCanonicalMapping);
    return NSString.castFromPointer(_ret, retain: true, release: true);
  }

  NSString get decomposedStringWithCompatibilityMapping {
    final _ret = _objc_msgSend_32(
        this.pointer, _sel_decomposedStringWithCompatibilityMapping);
    return NSString.castFromPointer(_ret, retain: true, release: true);
  }

  NSString get precomposedStringWithCompatibilityMapping {
    final _ret = _objc_msgSend_32(
        this.pointer, _sel_precomposedStringWithCompatibilityMapping);
    return NSString.castFromPointer(_ret, retain: true, release: true);
  }

  NSArray componentsSeparatedByString_(NSString separator) {
    final _ret = _objc_msgSend_244(
        this.pointer, _sel_componentsSeparatedByString_, separator.pointer);
    return NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  NSArray componentsSeparatedByCharactersInSet_(NSCharacterSet separator) {
    final _ret = _objc_msgSend_245(this.pointer,
        _sel_componentsSeparatedByCharactersInSet_, separator.pointer);
    return NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  NSString stringByTrimmingCharactersInSet_(NSCharacterSet set) {
    final _ret = _objc_msgSend_246(
        this.pointer, _sel_stringByTrimmingCharactersInSet_, set.pointer);
    return NSString.castFromPointer(_ret, retain: true, release: true);
  }

  NSString stringByPaddingToLength_withString_startingAtIndex_(
      int newLength, NSString padString, int padIndex) {
    final _ret = _objc_msgSend_247(
        this.pointer,
        _sel_stringByPaddingToLength_withString_startingAtIndex_,
        newLength,
        padString.pointer,
        padIndex);
    return NSString.castFromPointer(_ret, retain: true, release: true);
  }

  NSString stringByFoldingWithOptions_locale_(int options, NSLocale? locale) {
    final _ret = _objc_msgSend_248(
        this.pointer,
        _sel_stringByFoldingWithOptions_locale_,
        options,
        locale?.pointer ?? ffi.nullptr);
    return NSString.castFromPointer(_ret, retain: true, release: true);
  }

  NSString stringByReplacingOccurrencesOfString_withString_options_range_(
      NSString target,
      NSString replacement,
      int options,
      _NSRange searchRange) {
    final _ret = _objc_msgSend_249(
        this.pointer,
        _sel_stringByReplacingOccurrencesOfString_withString_options_range_,
        target.pointer,
        replacement.pointer,
        options,
        searchRange);
    return NSString.castFromPointer(_ret, retain: true, release: true);
  }

  NSString stringByReplacingOccurrencesOfString_withString_(
      NSString target, NSString replacement) {
    final _ret = _objc_msgSend_250(
        this.pointer,
        _sel_stringByReplacingOccurrencesOfString_withString_,
        target.pointer,
        replacement.pointer);
    return NSString.castFromPointer(_ret, retain: true, release: true);
  }

  NSString stringByReplacingCharactersInRange_withString_(
      _NSRange range, NSString replacement) {
    final _ret = _objc_msgSend_251(
        this.pointer,
        _sel_stringByReplacingCharactersInRange_withString_,
        range,
        replacement.pointer);
    return NSString.castFromPointer(_ret, retain: true, release: true);
  }

  NSString? stringByApplyingTransform_reverse_(
      NSString transform, bool reverse) {
    final _ret = _objc_msgSend_252(this.pointer,
        _sel_stringByApplyingTransform_reverse_, transform.pointer, reverse);
    return _ret.address == 0
        ? null
        : NSString.castFromPointer(_ret, retain: true, release: true);
  }

  bool writeToURL_atomically_encoding_error_(NSURL url, bool useAuxiliaryFile,
      int enc, ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    return _objc_msgSend_253(
        this.pointer,
        _sel_writeToURL_atomically_encoding_error_,
        url.pointer,
        useAuxiliaryFile,
        enc,
        error);
  }

  bool writeToFile_atomically_encoding_error_(
      NSString path,
      bool useAuxiliaryFile,
      int enc,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    return _objc_msgSend_254(
        this.pointer,
        _sel_writeToFile_atomically_encoding_error_,
        path.pointer,
        useAuxiliaryFile,
        enc,
        error);
  }

  NSString get description {
    final _ret = _objc_msgSend_32(this.pointer, _sel_description);
    return NSString.castFromPointer(_ret, retain: true, release: true);
  }

  int get hash {
    return _objc_msgSend_12(this.pointer, _sel_hash);
  }

  NSString initWithCharactersNoCopy_length_freeWhenDone_(
      ffi.Pointer<ffi.UnsignedShort> characters, int length, bool freeBuffer) {
    final _ret = _objc_msgSend_255(
        this.pointer,
        _sel_initWithCharactersNoCopy_length_freeWhenDone_,
        characters,
        length,
        freeBuffer);
    return NSString.castFromPointer(_ret, retain: false, release: true);
  }

  NSString initWithCharactersNoCopy_length_deallocator_(
      ffi.Pointer<ffi.UnsignedShort> chars,
      int len,
      ObjCBlock_ffiVoid_ffiUnsignedShort_ffiUnsignedLong? deallocator) {
    final _ret = _objc_msgSend_256(
        this.pointer,
        _sel_initWithCharactersNoCopy_length_deallocator_,
        chars,
        len,
        deallocator?.pointer ?? ffi.nullptr);
    return NSString.castFromPointer(_ret, retain: false, release: true);
  }

  NSString initWithCharacters_length_(
      ffi.Pointer<ffi.UnsignedShort> characters, int length) {
    final _ret = _objc_msgSend_257(
        this.pointer, _sel_initWithCharacters_length_, characters, length);
    return NSString.castFromPointer(_ret, retain: true, release: true);
  }

  NSString? initWithUTF8String_(ffi.Pointer<ffi.Char> nullTerminatedCString) {
    final _ret = _objc_msgSend_258(
        this.pointer, _sel_initWithUTF8String_, nullTerminatedCString);
    return _ret.address == 0
        ? null
        : NSString.castFromPointer(_ret, retain: true, release: true);
  }

  NSString initWithString_(NSString aString) {
    final _ret =
        _objc_msgSend_42(this.pointer, _sel_initWithString_, aString.pointer);
    return NSString.castFromPointer(_ret, retain: true, release: true);
  }

  NSString initWithFormat_(NSString format) {
    final _ret =
        _objc_msgSend_42(this.pointer, _sel_initWithFormat_, format.pointer);
    return NSString.castFromPointer(_ret, retain: true, release: true);
  }

  NSString initWithFormat_arguments_(
      NSString format, ffi.Pointer<__va_list_tag> argList) {
    final _ret = _objc_msgSend_259(
        this.pointer, _sel_initWithFormat_arguments_, format.pointer, argList);
    return NSString.castFromPointer(_ret, retain: true, release: true);
  }

  NSString initWithFormat_locale_(
      NSString format, objc.ObjCObjectBase? locale) {
    final _ret = _objc_msgSend_260(this.pointer, _sel_initWithFormat_locale_,
        format.pointer, locale?.pointer ?? ffi.nullptr);
    return NSString.castFromPointer(_ret, retain: true, release: true);
  }

  NSString initWithFormat_locale_arguments_(NSString format,
      objc.ObjCObjectBase? locale, ffi.Pointer<__va_list_tag> argList) {
    final _ret = _objc_msgSend_261(
        this.pointer,
        _sel_initWithFormat_locale_arguments_,
        format.pointer,
        locale?.pointer ?? ffi.nullptr,
        argList);
    return NSString.castFromPointer(_ret, retain: true, release: true);
  }

  NSString? initWithValidatedFormat_validFormatSpecifiers_error_(
      NSString format,
      NSString validFormatSpecifiers,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    final _ret = _objc_msgSend_262(
        this.pointer,
        _sel_initWithValidatedFormat_validFormatSpecifiers_error_,
        format.pointer,
        validFormatSpecifiers.pointer,
        error);
    return _ret.address == 0
        ? null
        : NSString.castFromPointer(_ret, retain: true, release: true);
  }

  NSString? initWithValidatedFormat_validFormatSpecifiers_locale_error_(
      NSString format,
      NSString validFormatSpecifiers,
      objc.ObjCObjectBase? locale,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    final _ret = _objc_msgSend_263(
        this.pointer,
        _sel_initWithValidatedFormat_validFormatSpecifiers_locale_error_,
        format.pointer,
        validFormatSpecifiers.pointer,
        locale?.pointer ?? ffi.nullptr,
        error);
    return _ret.address == 0
        ? null
        : NSString.castFromPointer(_ret, retain: true, release: true);
  }

  NSString? initWithValidatedFormat_validFormatSpecifiers_arguments_error_(
      NSString format,
      NSString validFormatSpecifiers,
      ffi.Pointer<__va_list_tag> argList,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    final _ret = _objc_msgSend_264(
        this.pointer,
        _sel_initWithValidatedFormat_validFormatSpecifiers_arguments_error_,
        format.pointer,
        validFormatSpecifiers.pointer,
        argList,
        error);
    return _ret.address == 0
        ? null
        : NSString.castFromPointer(_ret, retain: true, release: true);
  }

  NSString?
      initWithValidatedFormat_validFormatSpecifiers_locale_arguments_error_(
          NSString format,
          NSString validFormatSpecifiers,
          objc.ObjCObjectBase? locale,
          ffi.Pointer<__va_list_tag> argList,
          ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    final _ret = _objc_msgSend_265(
        this.pointer,
        _sel_initWithValidatedFormat_validFormatSpecifiers_locale_arguments_error_,
        format.pointer,
        validFormatSpecifiers.pointer,
        locale?.pointer ?? ffi.nullptr,
        argList,
        error);
    return _ret.address == 0
        ? null
        : NSString.castFromPointer(_ret, retain: true, release: true);
  }

  NSString? initWithData_encoding_(NSData data, int encoding) {
    final _ret = _objc_msgSend_266(
        this.pointer, _sel_initWithData_encoding_, data.pointer, encoding);
    return _ret.address == 0
        ? null
        : NSString.castFromPointer(_ret, retain: true, release: true);
  }

  NSString? initWithBytes_length_encoding_(
      ffi.Pointer<ffi.Void> bytes, int len, int encoding) {
    final _ret = _objc_msgSend_267(this.pointer,
        _sel_initWithBytes_length_encoding_, bytes, len, encoding);
    return _ret.address == 0
        ? null
        : NSString.castFromPointer(_ret, retain: true, release: true);
  }

  NSString? initWithBytesNoCopy_length_encoding_freeWhenDone_(
      ffi.Pointer<ffi.Void> bytes, int len, int encoding, bool freeBuffer) {
    final _ret = _objc_msgSend_268(
        this.pointer,
        _sel_initWithBytesNoCopy_length_encoding_freeWhenDone_,
        bytes,
        len,
        encoding,
        freeBuffer);
    return _ret.address == 0
        ? null
        : NSString.castFromPointer(_ret, retain: false, release: true);
  }

  NSString? initWithBytesNoCopy_length_encoding_deallocator_(
      ffi.Pointer<ffi.Void> bytes,
      int len,
      int encoding,
      ObjCBlock_ffiVoid_ffiVoid_ffiUnsignedLong? deallocator) {
    final _ret = _objc_msgSend_269(
        this.pointer,
        _sel_initWithBytesNoCopy_length_encoding_deallocator_,
        bytes,
        len,
        encoding,
        deallocator?.pointer ?? ffi.nullptr);
    return _ret.address == 0
        ? null
        : NSString.castFromPointer(_ret, retain: false, release: true);
  }

  static NSString string() {
    final _ret = _objc_msgSend_2(_class_NSString, _sel_string);
    return NSString.castFromPointer(_ret, retain: true, release: true);
  }

  static NSString stringWithString_(NSString string) {
    final _ret = _objc_msgSend_42(
        _class_NSString, _sel_stringWithString_, string.pointer);
    return NSString.castFromPointer(_ret, retain: true, release: true);
  }

  static NSString stringWithCharacters_length_(
      ffi.Pointer<ffi.UnsignedShort> characters, int length) {
    final _ret = _objc_msgSend_257(
        _class_NSString, _sel_stringWithCharacters_length_, characters, length);
    return NSString.castFromPointer(_ret, retain: true, release: true);
  }

  static NSString? stringWithUTF8String_(
      ffi.Pointer<ffi.Char> nullTerminatedCString) {
    final _ret = _objc_msgSend_258(
        _class_NSString, _sel_stringWithUTF8String_, nullTerminatedCString);
    return _ret.address == 0
        ? null
        : NSString.castFromPointer(_ret, retain: true, release: true);
  }

  static NSString stringWithFormat_(NSString format) {
    final _ret = _objc_msgSend_42(
        _class_NSString, _sel_stringWithFormat_, format.pointer);
    return NSString.castFromPointer(_ret, retain: true, release: true);
  }

  static NSString localizedStringWithFormat_(NSString format) {
    final _ret = _objc_msgSend_42(
        _class_NSString, _sel_localizedStringWithFormat_, format.pointer);
    return NSString.castFromPointer(_ret, retain: true, release: true);
  }

  static NSString? stringWithValidatedFormat_validFormatSpecifiers_error_(
      NSString format,
      NSString validFormatSpecifiers,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    final _ret = _objc_msgSend_262(
        _class_NSString,
        _sel_stringWithValidatedFormat_validFormatSpecifiers_error_,
        format.pointer,
        validFormatSpecifiers.pointer,
        error);
    return _ret.address == 0
        ? null
        : NSString.castFromPointer(_ret, retain: true, release: true);
  }

  static NSString?
      localizedStringWithValidatedFormat_validFormatSpecifiers_error_(
          NSString format,
          NSString validFormatSpecifiers,
          ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    final _ret = _objc_msgSend_262(
        _class_NSString,
        _sel_localizedStringWithValidatedFormat_validFormatSpecifiers_error_,
        format.pointer,
        validFormatSpecifiers.pointer,
        error);
    return _ret.address == 0
        ? null
        : NSString.castFromPointer(_ret, retain: true, release: true);
  }

  NSString? initWithCString_encoding_(
      ffi.Pointer<ffi.Char> nullTerminatedCString, int encoding) {
    final _ret = _objc_msgSend_270(this.pointer, _sel_initWithCString_encoding_,
        nullTerminatedCString, encoding);
    return _ret.address == 0
        ? null
        : NSString.castFromPointer(_ret, retain: true, release: true);
  }

  static NSString? stringWithCString_encoding_(
      ffi.Pointer<ffi.Char> cString, int enc) {
    final _ret = _objc_msgSend_270(
        _class_NSString, _sel_stringWithCString_encoding_, cString, enc);
    return _ret.address == 0
        ? null
        : NSString.castFromPointer(_ret, retain: true, release: true);
  }

  NSString? initWithContentsOfURL_encoding_error_(
      NSURL url, int enc, ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    final _ret = _objc_msgSend_271(this.pointer,
        _sel_initWithContentsOfURL_encoding_error_, url.pointer, enc, error);
    return _ret.address == 0
        ? null
        : NSString.castFromPointer(_ret, retain: true, release: true);
  }

  NSString? initWithContentsOfFile_encoding_error_(
      NSString path, int enc, ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    final _ret = _objc_msgSend_272(this.pointer,
        _sel_initWithContentsOfFile_encoding_error_, path.pointer, enc, error);
    return _ret.address == 0
        ? null
        : NSString.castFromPointer(_ret, retain: true, release: true);
  }

  static NSString? stringWithContentsOfURL_encoding_error_(
      NSURL url, int enc, ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    final _ret = _objc_msgSend_271(_class_NSString,
        _sel_stringWithContentsOfURL_encoding_error_, url.pointer, enc, error);
    return _ret.address == 0
        ? null
        : NSString.castFromPointer(_ret, retain: true, release: true);
  }

  static NSString? stringWithContentsOfFile_encoding_error_(
      NSString path, int enc, ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    final _ret = _objc_msgSend_272(
        _class_NSString,
        _sel_stringWithContentsOfFile_encoding_error_,
        path.pointer,
        enc,
        error);
    return _ret.address == 0
        ? null
        : NSString.castFromPointer(_ret, retain: true, release: true);
  }

  NSString? initWithContentsOfURL_usedEncoding_error_(
      NSURL url,
      ffi.Pointer<ffi.UnsignedLong> enc,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    final _ret = _objc_msgSend_273(
        this.pointer,
        _sel_initWithContentsOfURL_usedEncoding_error_,
        url.pointer,
        enc,
        error);
    return _ret.address == 0
        ? null
        : NSString.castFromPointer(_ret, retain: true, release: true);
  }

  NSString? initWithContentsOfFile_usedEncoding_error_(
      NSString path,
      ffi.Pointer<ffi.UnsignedLong> enc,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    final _ret = _objc_msgSend_274(
        this.pointer,
        _sel_initWithContentsOfFile_usedEncoding_error_,
        path.pointer,
        enc,
        error);
    return _ret.address == 0
        ? null
        : NSString.castFromPointer(_ret, retain: true, release: true);
  }

  static NSString? stringWithContentsOfURL_usedEncoding_error_(
      NSURL url,
      ffi.Pointer<ffi.UnsignedLong> enc,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    final _ret = _objc_msgSend_273(
        _class_NSString,
        _sel_stringWithContentsOfURL_usedEncoding_error_,
        url.pointer,
        enc,
        error);
    return _ret.address == 0
        ? null
        : NSString.castFromPointer(_ret, retain: true, release: true);
  }

  static NSString? stringWithContentsOfFile_usedEncoding_error_(
      NSString path,
      ffi.Pointer<ffi.UnsignedLong> enc,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    final _ret = _objc_msgSend_274(
        _class_NSString,
        _sel_stringWithContentsOfFile_usedEncoding_error_,
        path.pointer,
        enc,
        error);
    return _ret.address == 0
        ? null
        : NSString.castFromPointer(_ret, retain: true, release: true);
  }

  static int
      stringEncodingForData_encodingOptions_convertedString_usedLossyConversion_(
          NSData data,
          NSDictionary? opts,
          ffi.Pointer<ffi.Pointer<objc.ObjCObject>> string,
          ffi.Pointer<ffi.Bool> usedLossyConversion) {
    return _objc_msgSend_275(
        _class_NSString,
        _sel_stringEncodingForData_encodingOptions_convertedString_usedLossyConversion_,
        data.pointer,
        opts?.pointer ?? ffi.nullptr,
        string,
        usedLossyConversion);
  }

  objc.ObjCObjectBase propertyList() {
    final _ret = _objc_msgSend_2(this.pointer, _sel_propertyList);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  NSDictionary? propertyListFromStringsFileFormat() {
    final _ret =
        _objc_msgSend_276(this.pointer, _sel_propertyListFromStringsFileFormat);
    return _ret.address == 0
        ? null
        : NSDictionary.castFromPointer(_ret, retain: true, release: true);
  }

  ffi.Pointer<ffi.Char> cString() {
    return _objc_msgSend_84(this.pointer, _sel_cString);
  }

  ffi.Pointer<ffi.Char> lossyCString() {
    return _objc_msgSend_84(this.pointer, _sel_lossyCString);
  }

  int cStringLength() {
    return _objc_msgSend_12(this.pointer, _sel_cStringLength);
  }

  void getCString_(ffi.Pointer<ffi.Char> bytes) {
    _objc_msgSend_277(this.pointer, _sel_getCString_, bytes);
  }

  void getCString_maxLength_(ffi.Pointer<ffi.Char> bytes, int maxLength) {
    _objc_msgSend_278(
        this.pointer, _sel_getCString_maxLength_, bytes, maxLength);
  }

  void getCString_maxLength_range_remainingRange_(ffi.Pointer<ffi.Char> bytes,
      int maxLength, _NSRange aRange, ffi.Pointer<_NSRange> leftoverRange) {
    _objc_msgSend_279(
        this.pointer,
        _sel_getCString_maxLength_range_remainingRange_,
        bytes,
        maxLength,
        aRange,
        leftoverRange);
  }

  bool writeToFile_atomically_(NSString path, bool useAuxiliaryFile) {
    return _objc_msgSend_37(this.pointer, _sel_writeToFile_atomically_,
        path.pointer, useAuxiliaryFile);
  }

  bool writeToURL_atomically_(NSURL url, bool atomically) {
    return _objc_msgSend_158(
        this.pointer, _sel_writeToURL_atomically_, url.pointer, atomically);
  }

  objc.ObjCObjectBase? initWithContentsOfFile_(NSString path) {
    final _ret = _objc_msgSend_49(
        this.pointer, _sel_initWithContentsOfFile_, path.pointer);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  objc.ObjCObjectBase? initWithContentsOfURL_(NSURL url) {
    final _ret = _objc_msgSend_214(
        this.pointer, _sel_initWithContentsOfURL_, url.pointer);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  static objc.ObjCObjectBase? stringWithContentsOfFile_(NSString path) {
    final _ret = _objc_msgSend_49(
        _class_NSString, _sel_stringWithContentsOfFile_, path.pointer);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  static objc.ObjCObjectBase? stringWithContentsOfURL_(NSURL url) {
    final _ret = _objc_msgSend_214(
        _class_NSString, _sel_stringWithContentsOfURL_, url.pointer);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  objc.ObjCObjectBase? initWithCStringNoCopy_length_freeWhenDone_(
      ffi.Pointer<ffi.Char> bytes, int length, bool freeBuffer) {
    final _ret = _objc_msgSend_280(
        this.pointer,
        _sel_initWithCStringNoCopy_length_freeWhenDone_,
        bytes,
        length,
        freeBuffer);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: false, release: true);
  }

  objc.ObjCObjectBase? initWithCString_length_(
      ffi.Pointer<ffi.Char> bytes, int length) {
    final _ret = _objc_msgSend_270(
        this.pointer, _sel_initWithCString_length_, bytes, length);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  objc.ObjCObjectBase? initWithCString_(ffi.Pointer<ffi.Char> bytes) {
    final _ret = _objc_msgSend_258(this.pointer, _sel_initWithCString_, bytes);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  static objc.ObjCObjectBase? stringWithCString_length_(
      ffi.Pointer<ffi.Char> bytes, int length) {
    final _ret = _objc_msgSend_270(
        _class_NSString, _sel_stringWithCString_length_, bytes, length);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  static objc.ObjCObjectBase? stringWithCString_(ffi.Pointer<ffi.Char> bytes) {
    final _ret =
        _objc_msgSend_258(_class_NSString, _sel_stringWithCString_, bytes);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  void getCharacters_(ffi.Pointer<ffi.UnsignedShort> buffer) {
    _objc_msgSend_281(this.pointer, _sel_getCharacters_, buffer);
  }

  NSString? stringByAddingPercentEncodingWithAllowedCharacters_(
      NSCharacterSet allowedCharacters) {
    final _ret = _objc_msgSend_282(
        this.pointer,
        _sel_stringByAddingPercentEncodingWithAllowedCharacters_,
        allowedCharacters.pointer);
    return _ret.address == 0
        ? null
        : NSString.castFromPointer(_ret, retain: true, release: true);
  }

  NSString? get stringByRemovingPercentEncoding {
    final _ret =
        _objc_msgSend_55(this.pointer, _sel_stringByRemovingPercentEncoding);
    return _ret.address == 0
        ? null
        : NSString.castFromPointer(_ret, retain: true, release: true);
  }

  NSString? stringByAddingPercentEscapesUsingEncoding_(int enc) {
    final _ret = _objc_msgSend_283(
        this.pointer, _sel_stringByAddingPercentEscapesUsingEncoding_, enc);
    return _ret.address == 0
        ? null
        : NSString.castFromPointer(_ret, retain: true, release: true);
  }

  NSString? stringByReplacingPercentEscapesUsingEncoding_(int enc) {
    final _ret = _objc_msgSend_283(
        this.pointer, _sel_stringByReplacingPercentEscapesUsingEncoding_, enc);
    return _ret.address == 0
        ? null
        : NSString.castFromPointer(_ret, retain: true, release: true);
  }

  static NSString new1() {
    final _ret = _objc_msgSend_2(_class_NSString, _sel_new);
    return NSString.castFromPointer(_ret, retain: false, release: true);
  }

  static NSString allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_3(_class_NSString, _sel_allocWithZone_, zone);
    return NSString.castFromPointer(_ret, retain: false, release: true);
  }

  static NSString alloc() {
    final _ret = _objc_msgSend_2(_class_NSString, _sel_alloc);
    return NSString.castFromPointer(_ret, retain: false, release: true);
  }
}

late final _class_NSString = objc.getClass("NSString");
late final _sel_length = objc.registerName("length");
late final _sel_characterAtIndex_ = objc.registerName("characterAtIndex:");
final _objc_msgSend_13 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedShort Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedLong)>>()
    .asFunction<
        int Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();

class NSCoder extends objc.ObjCObjectBase {
  NSCoder._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super(pointer, retain: retain, release: release);

  /// Constructs a [NSCoder] that points to the same underlying object as [other].
  NSCoder.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSCoder] that wraps the given raw object pointer.
  NSCoder.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSCoder].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(obj.pointer, _sel_isKindOfClass_, _class_NSCoder);
  }
}

late final _class_NSCoder = objc.getClass("NSCoder");
late final _sel_initWithCoder_ = objc.registerName("initWithCoder:");
final _objc_msgSend_14 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_substringFromIndex_ = objc.registerName("substringFromIndex:");
final _objc_msgSend_15 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedLong)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_substringToIndex_ = objc.registerName("substringToIndex:");

final class _NSRange extends ffi.Struct {
  @ffi.UnsignedLong()
  external int location;

  @ffi.UnsignedLong()
  external int length;
}

late final _sel_substringWithRange_ = objc.registerName("substringWithRange:");
final _objc_msgSend_16 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, _NSRange)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, _NSRange)>();
late final _sel_getCharacters_range_ =
    objc.registerName("getCharacters:range:");
final _objc_msgSend_17 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<ffi.UnsignedShort>,
                _NSRange)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<ffi.UnsignedShort>,
            _NSRange)>();

abstract class NSComparisonResult {
  static const int NSOrderedAscending = -1;
  static const int NSOrderedSame = 0;
  static const int NSOrderedDescending = 1;
}

late final _sel_compare_ = objc.registerName("compare:");
final _objc_msgSend_18 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Int32 Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        int Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();

abstract class NSStringCompareOptions {
  static const int NSCaseInsensitiveSearch = 1;
  static const int NSLiteralSearch = 2;
  static const int NSBackwardsSearch = 4;
  static const int NSAnchoredSearch = 8;
  static const int NSNumericSearch = 64;
  static const int NSDiacriticInsensitiveSearch = 128;
  static const int NSWidthInsensitiveSearch = 256;
  static const int NSForcedOrderingSearch = 512;
  static const int NSRegularExpressionSearch = 1024;
}

late final _sel_compare_options_ = objc.registerName("compare:options:");
final _objc_msgSend_19 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Int32 Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Int32)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int)>();
late final _sel_compare_options_range_ =
    objc.registerName("compare:options:range:");
final _objc_msgSend_20 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Int32 Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Int32,
                _NSRange)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            _NSRange)>();
late final _sel_compare_options_range_locale_ =
    objc.registerName("compare:options:range:locale:");
final _objc_msgSend_21 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Int32 Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Int32,
                _NSRange,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            _NSRange,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_caseInsensitiveCompare_ =
    objc.registerName("caseInsensitiveCompare:");
late final _sel_localizedCompare_ = objc.registerName("localizedCompare:");
late final _sel_localizedCaseInsensitiveCompare_ =
    objc.registerName("localizedCaseInsensitiveCompare:");
late final _sel_localizedStandardCompare_ =
    objc.registerName("localizedStandardCompare:");
late final _sel_isEqualToString_ = objc.registerName("isEqualToString:");
final _objc_msgSend_22 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        bool Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_hasPrefix_ = objc.registerName("hasPrefix:");
late final _sel_hasSuffix_ = objc.registerName("hasSuffix:");
late final _sel_commonPrefixWithString_options_ =
    objc.registerName("commonPrefixWithString:options:");
final _objc_msgSend_23 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Int32)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int)>();
late final _sel_containsString_ = objc.registerName("containsString:");
late final _sel_localizedCaseInsensitiveContainsString_ =
    objc.registerName("localizedCaseInsensitiveContainsString:");
late final _sel_localizedStandardContainsString_ =
    objc.registerName("localizedStandardContainsString:");
late final _sel_localizedStandardRangeOfString_ =
    objc.registerName("localizedStandardRangeOfString:");
final _objc_msgSend_24 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            _NSRange Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        _NSRange Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
final _objc_msgSend_24Stret = objc.msgSendStretPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<_NSRange>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<_NSRange>, ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_rangeOfString_ = objc.registerName("rangeOfString:");
late final _sel_rangeOfString_options_ =
    objc.registerName("rangeOfString:options:");
final _objc_msgSend_25 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            _NSRange Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Int32)>>()
    .asFunction<
        _NSRange Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int)>();
final _objc_msgSend_25Stret = objc.msgSendStretPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<_NSRange>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Int32)>>()
    .asFunction<
        void Function(
            ffi.Pointer<_NSRange>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int)>();
late final _sel_rangeOfString_options_range_ =
    objc.registerName("rangeOfString:options:range:");
final _objc_msgSend_26 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            _NSRange Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Int32,
                _NSRange)>>()
    .asFunction<
        _NSRange Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            _NSRange)>();
final _objc_msgSend_26Stret = objc.msgSendStretPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<_NSRange>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Int32,
                _NSRange)>>()
    .asFunction<
        void Function(
            ffi.Pointer<_NSRange>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            _NSRange)>();

class NSLocale extends objc.ObjCObjectBase {
  NSLocale._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super(pointer, retain: retain, release: release);

  /// Constructs a [NSLocale] that points to the same underlying object as [other].
  NSLocale.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSLocale] that wraps the given raw object pointer.
  NSLocale.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSLocale].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(obj.pointer, _sel_isKindOfClass_, _class_NSLocale);
  }
}

late final _class_NSLocale = objc.getClass("NSLocale");
late final _sel_rangeOfString_options_range_locale_ =
    objc.registerName("rangeOfString:options:range:locale:");
final _objc_msgSend_27 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            _NSRange Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Int32,
                _NSRange,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        _NSRange Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            _NSRange,
            ffi.Pointer<objc.ObjCObject>)>();
final _objc_msgSend_27Stret = objc.msgSendStretPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<_NSRange>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Int32,
                _NSRange,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<_NSRange>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            _NSRange,
            ffi.Pointer<objc.ObjCObject>)>();

class NSCharacterSet extends NSObject {
  NSCharacterSet._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSCharacterSet] that points to the same underlying object as [other].
  NSCharacterSet.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSCharacterSet] that wraps the given raw object pointer.
  NSCharacterSet.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSCharacterSet].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSCharacterSet);
  }

  static NSCharacterSet getControlCharacterSet() {
    final _ret =
        _objc_msgSend_28(_class_NSCharacterSet, _sel_controlCharacterSet);
    return NSCharacterSet.castFromPointer(_ret, retain: true, release: true);
  }

  static NSCharacterSet getWhitespaceCharacterSet() {
    final _ret =
        _objc_msgSend_28(_class_NSCharacterSet, _sel_whitespaceCharacterSet);
    return NSCharacterSet.castFromPointer(_ret, retain: true, release: true);
  }

  static NSCharacterSet getWhitespaceAndNewlineCharacterSet() {
    final _ret = _objc_msgSend_28(
        _class_NSCharacterSet, _sel_whitespaceAndNewlineCharacterSet);
    return NSCharacterSet.castFromPointer(_ret, retain: true, release: true);
  }

  static NSCharacterSet getDecimalDigitCharacterSet() {
    final _ret =
        _objc_msgSend_28(_class_NSCharacterSet, _sel_decimalDigitCharacterSet);
    return NSCharacterSet.castFromPointer(_ret, retain: true, release: true);
  }

  static NSCharacterSet getLetterCharacterSet() {
    final _ret =
        _objc_msgSend_28(_class_NSCharacterSet, _sel_letterCharacterSet);
    return NSCharacterSet.castFromPointer(_ret, retain: true, release: true);
  }

  static NSCharacterSet getLowercaseLetterCharacterSet() {
    final _ret = _objc_msgSend_28(
        _class_NSCharacterSet, _sel_lowercaseLetterCharacterSet);
    return NSCharacterSet.castFromPointer(_ret, retain: true, release: true);
  }

  static NSCharacterSet getUppercaseLetterCharacterSet() {
    final _ret = _objc_msgSend_28(
        _class_NSCharacterSet, _sel_uppercaseLetterCharacterSet);
    return NSCharacterSet.castFromPointer(_ret, retain: true, release: true);
  }

  static NSCharacterSet getNonBaseCharacterSet() {
    final _ret =
        _objc_msgSend_28(_class_NSCharacterSet, _sel_nonBaseCharacterSet);
    return NSCharacterSet.castFromPointer(_ret, retain: true, release: true);
  }

  static NSCharacterSet getAlphanumericCharacterSet() {
    final _ret =
        _objc_msgSend_28(_class_NSCharacterSet, _sel_alphanumericCharacterSet);
    return NSCharacterSet.castFromPointer(_ret, retain: true, release: true);
  }

  static NSCharacterSet getDecomposableCharacterSet() {
    final _ret =
        _objc_msgSend_28(_class_NSCharacterSet, _sel_decomposableCharacterSet);
    return NSCharacterSet.castFromPointer(_ret, retain: true, release: true);
  }

  static NSCharacterSet getIllegalCharacterSet() {
    final _ret =
        _objc_msgSend_28(_class_NSCharacterSet, _sel_illegalCharacterSet);
    return NSCharacterSet.castFromPointer(_ret, retain: true, release: true);
  }

  static NSCharacterSet getPunctuationCharacterSet() {
    final _ret =
        _objc_msgSend_28(_class_NSCharacterSet, _sel_punctuationCharacterSet);
    return NSCharacterSet.castFromPointer(_ret, retain: true, release: true);
  }

  static NSCharacterSet getCapitalizedLetterCharacterSet() {
    final _ret = _objc_msgSend_28(
        _class_NSCharacterSet, _sel_capitalizedLetterCharacterSet);
    return NSCharacterSet.castFromPointer(_ret, retain: true, release: true);
  }

  static NSCharacterSet getSymbolCharacterSet() {
    final _ret =
        _objc_msgSend_28(_class_NSCharacterSet, _sel_symbolCharacterSet);
    return NSCharacterSet.castFromPointer(_ret, retain: true, release: true);
  }

  static NSCharacterSet getNewlineCharacterSet() {
    final _ret =
        _objc_msgSend_28(_class_NSCharacterSet, _sel_newlineCharacterSet);
    return NSCharacterSet.castFromPointer(_ret, retain: false, release: true);
  }

  static NSCharacterSet characterSetWithRange_(_NSRange aRange) {
    final _ret = _objc_msgSend_29(
        _class_NSCharacterSet, _sel_characterSetWithRange_, aRange);
    return NSCharacterSet.castFromPointer(_ret, retain: true, release: true);
  }

  static NSCharacterSet characterSetWithCharactersInString_(NSString aString) {
    final _ret = _objc_msgSend_30(_class_NSCharacterSet,
        _sel_characterSetWithCharactersInString_, aString.pointer);
    return NSCharacterSet.castFromPointer(_ret, retain: true, release: true);
  }

  static NSCharacterSet characterSetWithBitmapRepresentation_(NSData data) {
    final _ret = _objc_msgSend_222(_class_NSCharacterSet,
        _sel_characterSetWithBitmapRepresentation_, data.pointer);
    return NSCharacterSet.castFromPointer(_ret, retain: true, release: true);
  }

  static NSCharacterSet? characterSetWithContentsOfFile_(NSString fName) {
    final _ret = _objc_msgSend_223(_class_NSCharacterSet,
        _sel_characterSetWithContentsOfFile_, fName.pointer);
    return _ret.address == 0
        ? null
        : NSCharacterSet.castFromPointer(_ret, retain: true, release: true);
  }

  NSCharacterSet initWithCoder_(NSCoder coder) {
    final _ret =
        _objc_msgSend_224(this.pointer, _sel_initWithCoder_, coder.pointer);
    return NSCharacterSet.castFromPointer(_ret, retain: true, release: true);
  }

  bool characterIsMember_(int aCharacter) {
    return _objc_msgSend_225(this.pointer, _sel_characterIsMember_, aCharacter);
  }

  NSData get bitmapRepresentation {
    final _ret = _objc_msgSend_54(this.pointer, _sel_bitmapRepresentation);
    return NSData.castFromPointer(_ret, retain: true, release: true);
  }

  NSCharacterSet get invertedSet {
    final _ret = _objc_msgSend_28(this.pointer, _sel_invertedSet);
    return NSCharacterSet.castFromPointer(_ret, retain: true, release: true);
  }

  bool longCharacterIsMember_(int theLongChar) {
    return _objc_msgSend_226(
        this.pointer, _sel_longCharacterIsMember_, theLongChar);
  }

  bool isSupersetOfSet_(NSCharacterSet theOtherSet) {
    return _objc_msgSend_227(
        this.pointer, _sel_isSupersetOfSet_, theOtherSet.pointer);
  }

  bool hasMemberInPlane_(int thePlane) {
    return _objc_msgSend_228(this.pointer, _sel_hasMemberInPlane_, thePlane);
  }

  static NSCharacterSet getURLUserAllowedCharacterSet() {
    final _ret = _objc_msgSend_28(
        _class_NSCharacterSet, _sel_URLUserAllowedCharacterSet);
    return NSCharacterSet.castFromPointer(_ret, retain: true, release: true);
  }

  static NSCharacterSet getURLPasswordAllowedCharacterSet() {
    final _ret = _objc_msgSend_28(
        _class_NSCharacterSet, _sel_URLPasswordAllowedCharacterSet);
    return NSCharacterSet.castFromPointer(_ret, retain: true, release: true);
  }

  static NSCharacterSet getURLHostAllowedCharacterSet() {
    final _ret = _objc_msgSend_28(
        _class_NSCharacterSet, _sel_URLHostAllowedCharacterSet);
    return NSCharacterSet.castFromPointer(_ret, retain: true, release: true);
  }

  static NSCharacterSet getURLPathAllowedCharacterSet() {
    final _ret = _objc_msgSend_28(
        _class_NSCharacterSet, _sel_URLPathAllowedCharacterSet);
    return NSCharacterSet.castFromPointer(_ret, retain: true, release: true);
  }

  static NSCharacterSet getURLQueryAllowedCharacterSet() {
    final _ret = _objc_msgSend_28(
        _class_NSCharacterSet, _sel_URLQueryAllowedCharacterSet);
    return NSCharacterSet.castFromPointer(_ret, retain: true, release: true);
  }

  static NSCharacterSet getURLFragmentAllowedCharacterSet() {
    final _ret = _objc_msgSend_28(
        _class_NSCharacterSet, _sel_URLFragmentAllowedCharacterSet);
    return NSCharacterSet.castFromPointer(_ret, retain: true, release: true);
  }

  @override
  NSCharacterSet init() {
    final _ret = _objc_msgSend_2(this.pointer, _sel_init);
    return NSCharacterSet.castFromPointer(_ret, retain: true, release: true);
  }

  static NSCharacterSet new1() {
    final _ret = _objc_msgSend_2(_class_NSCharacterSet, _sel_new);
    return NSCharacterSet.castFromPointer(_ret, retain: false, release: true);
  }

  static NSCharacterSet allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_3(_class_NSCharacterSet, _sel_allocWithZone_, zone);
    return NSCharacterSet.castFromPointer(_ret, retain: false, release: true);
  }

  static NSCharacterSet alloc() {
    final _ret = _objc_msgSend_2(_class_NSCharacterSet, _sel_alloc);
    return NSCharacterSet.castFromPointer(_ret, retain: false, release: true);
  }
}

late final _class_NSCharacterSet = objc.getClass("NSCharacterSet");
late final _sel_controlCharacterSet = objc.registerName("controlCharacterSet");
final _objc_msgSend_28 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_whitespaceCharacterSet =
    objc.registerName("whitespaceCharacterSet");
late final _sel_whitespaceAndNewlineCharacterSet =
    objc.registerName("whitespaceAndNewlineCharacterSet");
late final _sel_decimalDigitCharacterSet =
    objc.registerName("decimalDigitCharacterSet");
late final _sel_letterCharacterSet = objc.registerName("letterCharacterSet");
late final _sel_lowercaseLetterCharacterSet =
    objc.registerName("lowercaseLetterCharacterSet");
late final _sel_uppercaseLetterCharacterSet =
    objc.registerName("uppercaseLetterCharacterSet");
late final _sel_nonBaseCharacterSet = objc.registerName("nonBaseCharacterSet");
late final _sel_alphanumericCharacterSet =
    objc.registerName("alphanumericCharacterSet");
late final _sel_decomposableCharacterSet =
    objc.registerName("decomposableCharacterSet");
late final _sel_illegalCharacterSet = objc.registerName("illegalCharacterSet");
late final _sel_punctuationCharacterSet =
    objc.registerName("punctuationCharacterSet");
late final _sel_capitalizedLetterCharacterSet =
    objc.registerName("capitalizedLetterCharacterSet");
late final _sel_symbolCharacterSet = objc.registerName("symbolCharacterSet");
late final _sel_newlineCharacterSet = objc.registerName("newlineCharacterSet");
late final _sel_characterSetWithRange_ =
    objc.registerName("characterSetWithRange:");
final _objc_msgSend_29 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, _NSRange)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, _NSRange)>();
late final _sel_characterSetWithCharactersInString_ =
    objc.registerName("characterSetWithCharactersInString:");
final _objc_msgSend_30 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();

class NSData extends NSObject {
  NSData._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSData] that points to the same underlying object as [other].
  NSData.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSData] that wraps the given raw object pointer.
  NSData.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSData].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(obj.pointer, _sel_isKindOfClass_, _class_NSData);
  }

  int get length {
    return _objc_msgSend_12(this.pointer, _sel_length);
  }

  ffi.Pointer<ffi.Void> get bytes {
    return _objc_msgSend_31(this.pointer, _sel_bytes);
  }

  NSString get description {
    final _ret = _objc_msgSend_32(this.pointer, _sel_description);
    return NSString.castFromPointer(_ret, retain: true, release: true);
  }

  void getBytes_length_(ffi.Pointer<ffi.Void> buffer, int length) {
    _objc_msgSend_33(this.pointer, _sel_getBytes_length_, buffer, length);
  }

  void getBytes_range_(ffi.Pointer<ffi.Void> buffer, _NSRange range) {
    _objc_msgSend_34(this.pointer, _sel_getBytes_range_, buffer, range);
  }

  bool isEqualToData_(NSData other) {
    return _objc_msgSend_35(this.pointer, _sel_isEqualToData_, other.pointer);
  }

  NSData subdataWithRange_(_NSRange range) {
    final _ret = _objc_msgSend_36(this.pointer, _sel_subdataWithRange_, range);
    return NSData.castFromPointer(_ret, retain: true, release: true);
  }

  bool writeToFile_atomically_(NSString path, bool useAuxiliaryFile) {
    return _objc_msgSend_37(this.pointer, _sel_writeToFile_atomically_,
        path.pointer, useAuxiliaryFile);
  }

  bool writeToURL_atomically_(NSURL url, bool atomically) {
    return _objc_msgSend_158(
        this.pointer, _sel_writeToURL_atomically_, url.pointer, atomically);
  }

  bool writeToFile_options_error_(NSString path, int writeOptionsMask,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> errorPtr) {
    return _objc_msgSend_206(this.pointer, _sel_writeToFile_options_error_,
        path.pointer, writeOptionsMask, errorPtr);
  }

  bool writeToURL_options_error_(NSURL url, int writeOptionsMask,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> errorPtr) {
    return _objc_msgSend_207(this.pointer, _sel_writeToURL_options_error_,
        url.pointer, writeOptionsMask, errorPtr);
  }

  void rangeOfData_options_range_(ffi.Pointer<_NSRange> stret,
      NSData dataToFind, int mask, _NSRange searchRange) {
    objc.useMsgSendVariants
        ? _objc_msgSend_208Stret(
            stret,
            this.pointer,
            _sel_rangeOfData_options_range_,
            dataToFind.pointer,
            mask,
            searchRange)
        : stret.ref = _objc_msgSend_208(
            this.pointer,
            _sel_rangeOfData_options_range_,
            dataToFind.pointer,
            mask,
            searchRange);
  }

  void enumerateByteRangesUsingBlock_(
      ObjCBlock_ffiVoid_ffiVoid_NSRange_bool block) {
    _objc_msgSend_209(
        this.pointer, _sel_enumerateByteRangesUsingBlock_, block.pointer);
  }

  static NSData data() {
    final _ret = _objc_msgSend_2(_class_NSData, _sel_data);
    return NSData.castFromPointer(_ret, retain: true, release: true);
  }

  static NSData dataWithBytes_length_(ffi.Pointer<ffi.Void> bytes, int length) {
    final _ret = _objc_msgSend_210(
        _class_NSData, _sel_dataWithBytes_length_, bytes, length);
    return NSData.castFromPointer(_ret, retain: true, release: true);
  }

  static NSData dataWithBytesNoCopy_length_(
      ffi.Pointer<ffi.Void> bytes, int length) {
    final _ret = _objc_msgSend_210(
        _class_NSData, _sel_dataWithBytesNoCopy_length_, bytes, length);
    return NSData.castFromPointer(_ret, retain: false, release: true);
  }

  static NSData dataWithBytesNoCopy_length_freeWhenDone_(
      ffi.Pointer<ffi.Void> bytes, int length, bool b) {
    final _ret = _objc_msgSend_211(_class_NSData,
        _sel_dataWithBytesNoCopy_length_freeWhenDone_, bytes, length, b);
    return NSData.castFromPointer(_ret, retain: false, release: true);
  }

  static NSData? dataWithContentsOfFile_options_error_(NSString path,
      int readOptionsMask, ffi.Pointer<ffi.Pointer<objc.ObjCObject>> errorPtr) {
    final _ret = _objc_msgSend_212(
        _class_NSData,
        _sel_dataWithContentsOfFile_options_error_,
        path.pointer,
        readOptionsMask,
        errorPtr);
    return _ret.address == 0
        ? null
        : NSData.castFromPointer(_ret, retain: true, release: true);
  }

  static NSData? dataWithContentsOfURL_options_error_(NSURL url,
      int readOptionsMask, ffi.Pointer<ffi.Pointer<objc.ObjCObject>> errorPtr) {
    final _ret = _objc_msgSend_213(
        _class_NSData,
        _sel_dataWithContentsOfURL_options_error_,
        url.pointer,
        readOptionsMask,
        errorPtr);
    return _ret.address == 0
        ? null
        : NSData.castFromPointer(_ret, retain: true, release: true);
  }

  static NSData? dataWithContentsOfFile_(NSString path) {
    final _ret = _objc_msgSend_49(
        _class_NSData, _sel_dataWithContentsOfFile_, path.pointer);
    return _ret.address == 0
        ? null
        : NSData.castFromPointer(_ret, retain: true, release: true);
  }

  static NSData? dataWithContentsOfURL_(NSURL url) {
    final _ret = _objc_msgSend_214(
        _class_NSData, _sel_dataWithContentsOfURL_, url.pointer);
    return _ret.address == 0
        ? null
        : NSData.castFromPointer(_ret, retain: true, release: true);
  }

  NSData initWithBytes_length_(ffi.Pointer<ffi.Void> bytes, int length) {
    final _ret = _objc_msgSend_210(
        this.pointer, _sel_initWithBytes_length_, bytes, length);
    return NSData.castFromPointer(_ret, retain: true, release: true);
  }

  NSData initWithBytesNoCopy_length_(ffi.Pointer<ffi.Void> bytes, int length) {
    final _ret = _objc_msgSend_210(
        this.pointer, _sel_initWithBytesNoCopy_length_, bytes, length);
    return NSData.castFromPointer(_ret, retain: false, release: true);
  }

  NSData initWithBytesNoCopy_length_freeWhenDone_(
      ffi.Pointer<ffi.Void> bytes, int length, bool b) {
    final _ret = _objc_msgSend_211(this.pointer,
        _sel_initWithBytesNoCopy_length_freeWhenDone_, bytes, length, b);
    return NSData.castFromPointer(_ret, retain: false, release: true);
  }

  NSData initWithBytesNoCopy_length_deallocator_(ffi.Pointer<ffi.Void> bytes,
      int length, ObjCBlock_ffiVoid_ffiVoid_ffiUnsignedLong? deallocator) {
    final _ret = _objc_msgSend_215(
        this.pointer,
        _sel_initWithBytesNoCopy_length_deallocator_,
        bytes,
        length,
        deallocator?.pointer ?? ffi.nullptr);
    return NSData.castFromPointer(_ret, retain: false, release: true);
  }

  NSData? initWithContentsOfFile_options_error_(NSString path,
      int readOptionsMask, ffi.Pointer<ffi.Pointer<objc.ObjCObject>> errorPtr) {
    final _ret = _objc_msgSend_212(
        this.pointer,
        _sel_initWithContentsOfFile_options_error_,
        path.pointer,
        readOptionsMask,
        errorPtr);
    return _ret.address == 0
        ? null
        : NSData.castFromPointer(_ret, retain: true, release: true);
  }

  NSData? initWithContentsOfURL_options_error_(NSURL url, int readOptionsMask,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> errorPtr) {
    final _ret = _objc_msgSend_213(
        this.pointer,
        _sel_initWithContentsOfURL_options_error_,
        url.pointer,
        readOptionsMask,
        errorPtr);
    return _ret.address == 0
        ? null
        : NSData.castFromPointer(_ret, retain: true, release: true);
  }

  NSData? initWithContentsOfFile_(NSString path) {
    final _ret = _objc_msgSend_49(
        this.pointer, _sel_initWithContentsOfFile_, path.pointer);
    return _ret.address == 0
        ? null
        : NSData.castFromPointer(_ret, retain: true, release: true);
  }

  NSData? initWithContentsOfURL_(NSURL url) {
    final _ret = _objc_msgSend_214(
        this.pointer, _sel_initWithContentsOfURL_, url.pointer);
    return _ret.address == 0
        ? null
        : NSData.castFromPointer(_ret, retain: true, release: true);
  }

  NSData initWithData_(NSData data) {
    final _ret =
        _objc_msgSend_216(this.pointer, _sel_initWithData_, data.pointer);
    return NSData.castFromPointer(_ret, retain: true, release: true);
  }

  static NSData dataWithData_(NSData data) {
    final _ret =
        _objc_msgSend_216(_class_NSData, _sel_dataWithData_, data.pointer);
    return NSData.castFromPointer(_ret, retain: true, release: true);
  }

  NSData? initWithBase64EncodedString_options_(
      NSString base64String, int options) {
    final _ret = _objc_msgSend_217(
        this.pointer,
        _sel_initWithBase64EncodedString_options_,
        base64String.pointer,
        options);
    return _ret.address == 0
        ? null
        : NSData.castFromPointer(_ret, retain: true, release: true);
  }

  NSString base64EncodedStringWithOptions_(int options) {
    final _ret = _objc_msgSend_218(
        this.pointer, _sel_base64EncodedStringWithOptions_, options);
    return NSString.castFromPointer(_ret, retain: true, release: true);
  }

  NSData? initWithBase64EncodedData_options_(NSData base64Data, int options) {
    final _ret = _objc_msgSend_219(this.pointer,
        _sel_initWithBase64EncodedData_options_, base64Data.pointer, options);
    return _ret.address == 0
        ? null
        : NSData.castFromPointer(_ret, retain: true, release: true);
  }

  NSData base64EncodedDataWithOptions_(int options) {
    final _ret = _objc_msgSend_220(
        this.pointer, _sel_base64EncodedDataWithOptions_, options);
    return NSData.castFromPointer(_ret, retain: true, release: true);
  }

  NSData? decompressedDataUsingAlgorithm_error_(
      int algorithm, ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    final _ret = _objc_msgSend_221(this.pointer,
        _sel_decompressedDataUsingAlgorithm_error_, algorithm, error);
    return _ret.address == 0
        ? null
        : NSData.castFromPointer(_ret, retain: true, release: true);
  }

  NSData? compressedDataUsingAlgorithm_error_(
      int algorithm, ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    final _ret = _objc_msgSend_221(this.pointer,
        _sel_compressedDataUsingAlgorithm_error_, algorithm, error);
    return _ret.address == 0
        ? null
        : NSData.castFromPointer(_ret, retain: true, release: true);
  }

  void getBytes_(ffi.Pointer<ffi.Void> buffer) {
    _objc_msgSend_91(this.pointer, _sel_getBytes_, buffer);
  }

  static objc.ObjCObjectBase? dataWithContentsOfMappedFile_(NSString path) {
    final _ret = _objc_msgSend_49(
        _class_NSData, _sel_dataWithContentsOfMappedFile_, path.pointer);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  objc.ObjCObjectBase? initWithContentsOfMappedFile_(NSString path) {
    final _ret = _objc_msgSend_49(
        this.pointer, _sel_initWithContentsOfMappedFile_, path.pointer);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  objc.ObjCObjectBase? initWithBase64Encoding_(NSString base64String) {
    final _ret = _objc_msgSend_49(
        this.pointer, _sel_initWithBase64Encoding_, base64String.pointer);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  NSString base64Encoding() {
    final _ret = _objc_msgSend_32(this.pointer, _sel_base64Encoding);
    return NSString.castFromPointer(_ret, retain: true, release: true);
  }

  @override
  NSData init() {
    final _ret = _objc_msgSend_2(this.pointer, _sel_init);
    return NSData.castFromPointer(_ret, retain: true, release: true);
  }

  static NSData new1() {
    final _ret = _objc_msgSend_2(_class_NSData, _sel_new);
    return NSData.castFromPointer(_ret, retain: false, release: true);
  }

  static NSData allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_3(_class_NSData, _sel_allocWithZone_, zone);
    return NSData.castFromPointer(_ret, retain: false, release: true);
  }

  static NSData alloc() {
    final _ret = _objc_msgSend_2(_class_NSData, _sel_alloc);
    return NSData.castFromPointer(_ret, retain: false, release: true);
  }
}

late final _class_NSData = objc.getClass("NSData");
late final _sel_bytes = objc.registerName("bytes");
final _objc_msgSend_31 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<ffi.Void> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<ffi.Void> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_description = objc.registerName("description");
final _objc_msgSend_32 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_getBytes_length_ = objc.registerName("getBytes:length:");
final _objc_msgSend_33 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<ffi.Void>,
                ffi.UnsignedLong)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<ffi.Void>, int)>();
late final _sel_getBytes_range_ = objc.registerName("getBytes:range:");
final _objc_msgSend_34 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<ffi.Void>,
                _NSRange)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<ffi.Void>, _NSRange)>();
late final _sel_isEqualToData_ = objc.registerName("isEqualToData:");
final _objc_msgSend_35 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        bool Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_subdataWithRange_ = objc.registerName("subdataWithRange:");
final _objc_msgSend_36 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, _NSRange)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, _NSRange)>();
late final _sel_writeToFile_atomically_ =
    objc.registerName("writeToFile:atomically:");
final _objc_msgSend_37 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Bool)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            bool)>();

class NSURL extends NSObject {
  NSURL._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSURL] that points to the same underlying object as [other].
  NSURL.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSURL] that wraps the given raw object pointer.
  NSURL.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSURL].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(obj.pointer, _sel_isKindOfClass_, _class_NSURL);
  }

  NSURL? initWithScheme_host_path_(
      NSString scheme, NSString? host, NSString path) {
    final _ret = _objc_msgSend_38(this.pointer, _sel_initWithScheme_host_path_,
        scheme.pointer, host?.pointer ?? ffi.nullptr, path.pointer);
    return _ret.address == 0
        ? null
        : NSURL.castFromPointer(_ret, retain: true, release: true);
  }

  NSURL initFileURLWithPath_isDirectory_relativeToURL_(
      NSString path, bool isDir, NSURL? baseURL) {
    final _ret = _objc_msgSend_39(
        this.pointer,
        _sel_initFileURLWithPath_isDirectory_relativeToURL_,
        path.pointer,
        isDir,
        baseURL?.pointer ?? ffi.nullptr);
    return NSURL.castFromPointer(_ret, retain: true, release: true);
  }

  NSURL initFileURLWithPath_relativeToURL_(NSString path, NSURL? baseURL) {
    final _ret = _objc_msgSend_40(
        this.pointer,
        _sel_initFileURLWithPath_relativeToURL_,
        path.pointer,
        baseURL?.pointer ?? ffi.nullptr);
    return NSURL.castFromPointer(_ret, retain: true, release: true);
  }

  NSURL initFileURLWithPath_isDirectory_(NSString path, bool isDir) {
    final _ret = _objc_msgSend_41(this.pointer,
        _sel_initFileURLWithPath_isDirectory_, path.pointer, isDir);
    return NSURL.castFromPointer(_ret, retain: true, release: true);
  }

  NSURL initFileURLWithPath_(NSString path) {
    final _ret =
        _objc_msgSend_42(this.pointer, _sel_initFileURLWithPath_, path.pointer);
    return NSURL.castFromPointer(_ret, retain: true, release: true);
  }

  static NSURL fileURLWithPath_isDirectory_relativeToURL_(
      NSString path, bool isDir, NSURL? baseURL) {
    final _ret = _objc_msgSend_43(
        _class_NSURL,
        _sel_fileURLWithPath_isDirectory_relativeToURL_,
        path.pointer,
        isDir,
        baseURL?.pointer ?? ffi.nullptr);
    return NSURL.castFromPointer(_ret, retain: true, release: true);
  }

  static NSURL fileURLWithPath_relativeToURL_(NSString path, NSURL? baseURL) {
    final _ret = _objc_msgSend_44(
        _class_NSURL,
        _sel_fileURLWithPath_relativeToURL_,
        path.pointer,
        baseURL?.pointer ?? ffi.nullptr);
    return NSURL.castFromPointer(_ret, retain: true, release: true);
  }

  static NSURL fileURLWithPath_isDirectory_(NSString path, bool isDir) {
    final _ret = _objc_msgSend_45(
        _class_NSURL, _sel_fileURLWithPath_isDirectory_, path.pointer, isDir);
    return NSURL.castFromPointer(_ret, retain: true, release: true);
  }

  static NSURL fileURLWithPath_(NSString path) {
    final _ret =
        _objc_msgSend_46(_class_NSURL, _sel_fileURLWithPath_, path.pointer);
    return NSURL.castFromPointer(_ret, retain: true, release: true);
  }

  NSURL initFileURLWithFileSystemRepresentation_isDirectory_relativeToURL_(
      ffi.Pointer<ffi.Char> path, bool isDir, NSURL? baseURL) {
    final _ret = _objc_msgSend_47(
        this.pointer,
        _sel_initFileURLWithFileSystemRepresentation_isDirectory_relativeToURL_,
        path,
        isDir,
        baseURL?.pointer ?? ffi.nullptr);
    return NSURL.castFromPointer(_ret, retain: true, release: true);
  }

  static NSURL fileURLWithFileSystemRepresentation_isDirectory_relativeToURL_(
      ffi.Pointer<ffi.Char> path, bool isDir, NSURL? baseURL) {
    final _ret = _objc_msgSend_48(
        _class_NSURL,
        _sel_fileURLWithFileSystemRepresentation_isDirectory_relativeToURL_,
        path,
        isDir,
        baseURL?.pointer ?? ffi.nullptr);
    return NSURL.castFromPointer(_ret, retain: true, release: true);
  }

  NSURL? initWithString_(NSString URLString) {
    final _ret =
        _objc_msgSend_49(this.pointer, _sel_initWithString_, URLString.pointer);
    return _ret.address == 0
        ? null
        : NSURL.castFromPointer(_ret, retain: true, release: true);
  }

  NSURL? initWithString_relativeToURL_(NSString URLString, NSURL? baseURL) {
    final _ret = _objc_msgSend_50(
        this.pointer,
        _sel_initWithString_relativeToURL_,
        URLString.pointer,
        baseURL?.pointer ?? ffi.nullptr);
    return _ret.address == 0
        ? null
        : NSURL.castFromPointer(_ret, retain: true, release: true);
  }

  static NSURL? URLWithString_(NSString URLString) {
    final _ret =
        _objc_msgSend_49(_class_NSURL, _sel_URLWithString_, URLString.pointer);
    return _ret.address == 0
        ? null
        : NSURL.castFromPointer(_ret, retain: true, release: true);
  }

  static NSURL? URLWithString_relativeToURL_(
      NSString URLString, NSURL? baseURL) {
    final _ret = _objc_msgSend_50(
        _class_NSURL,
        _sel_URLWithString_relativeToURL_,
        URLString.pointer,
        baseURL?.pointer ?? ffi.nullptr);
    return _ret.address == 0
        ? null
        : NSURL.castFromPointer(_ret, retain: true, release: true);
  }

  NSURL? initWithString_encodingInvalidCharacters_(
      NSString URLString, bool encodingInvalidCharacters) {
    final _ret = _objc_msgSend_51(
        this.pointer,
        _sel_initWithString_encodingInvalidCharacters_,
        URLString.pointer,
        encodingInvalidCharacters);
    return _ret.address == 0
        ? null
        : NSURL.castFromPointer(_ret, retain: true, release: true);
  }

  static NSURL? URLWithString_encodingInvalidCharacters_(
      NSString URLString, bool encodingInvalidCharacters) {
    final _ret = _objc_msgSend_51(
        _class_NSURL,
        _sel_URLWithString_encodingInvalidCharacters_,
        URLString.pointer,
        encodingInvalidCharacters);
    return _ret.address == 0
        ? null
        : NSURL.castFromPointer(_ret, retain: true, release: true);
  }

  NSURL initWithDataRepresentation_relativeToURL_(NSData data, NSURL? baseURL) {
    final _ret = _objc_msgSend_52(
        this.pointer,
        _sel_initWithDataRepresentation_relativeToURL_,
        data.pointer,
        baseURL?.pointer ?? ffi.nullptr);
    return NSURL.castFromPointer(_ret, retain: true, release: true);
  }

  static NSURL URLWithDataRepresentation_relativeToURL_(
      NSData data, NSURL? baseURL) {
    final _ret = _objc_msgSend_53(
        _class_NSURL,
        _sel_URLWithDataRepresentation_relativeToURL_,
        data.pointer,
        baseURL?.pointer ?? ffi.nullptr);
    return NSURL.castFromPointer(_ret, retain: true, release: true);
  }

  NSURL initAbsoluteURLWithDataRepresentation_relativeToURL_(
      NSData data, NSURL? baseURL) {
    final _ret = _objc_msgSend_52(
        this.pointer,
        _sel_initAbsoluteURLWithDataRepresentation_relativeToURL_,
        data.pointer,
        baseURL?.pointer ?? ffi.nullptr);
    return NSURL.castFromPointer(_ret, retain: true, release: true);
  }

  static NSURL absoluteURLWithDataRepresentation_relativeToURL_(
      NSData data, NSURL? baseURL) {
    final _ret = _objc_msgSend_53(
        _class_NSURL,
        _sel_absoluteURLWithDataRepresentation_relativeToURL_,
        data.pointer,
        baseURL?.pointer ?? ffi.nullptr);
    return NSURL.castFromPointer(_ret, retain: true, release: true);
  }

  NSData get dataRepresentation {
    final _ret = _objc_msgSend_54(this.pointer, _sel_dataRepresentation);
    return NSData.castFromPointer(_ret, retain: true, release: true);
  }

  NSString? get absoluteString {
    final _ret = _objc_msgSend_55(this.pointer, _sel_absoluteString);
    return _ret.address == 0
        ? null
        : NSString.castFromPointer(_ret, retain: true, release: true);
  }

  NSString get relativeString {
    final _ret = _objc_msgSend_32(this.pointer, _sel_relativeString);
    return NSString.castFromPointer(_ret, retain: true, release: true);
  }

  NSURL? get baseURL {
    final _ret = _objc_msgSend_56(this.pointer, _sel_baseURL);
    return _ret.address == 0
        ? null
        : NSURL.castFromPointer(_ret, retain: true, release: true);
  }

  NSURL? get absoluteURL {
    final _ret = _objc_msgSend_56(this.pointer, _sel_absoluteURL);
    return _ret.address == 0
        ? null
        : NSURL.castFromPointer(_ret, retain: true, release: true);
  }

  NSString? get scheme {
    final _ret = _objc_msgSend_55(this.pointer, _sel_scheme);
    return _ret.address == 0
        ? null
        : NSString.castFromPointer(_ret, retain: true, release: true);
  }

  NSString? get resourceSpecifier {
    final _ret = _objc_msgSend_55(this.pointer, _sel_resourceSpecifier);
    return _ret.address == 0
        ? null
        : NSString.castFromPointer(_ret, retain: true, release: true);
  }

  NSString? get host {
    final _ret = _objc_msgSend_55(this.pointer, _sel_host);
    return _ret.address == 0
        ? null
        : NSString.castFromPointer(_ret, retain: true, release: true);
  }

  NSNumber? get port {
    final _ret = _objc_msgSend_94(this.pointer, _sel_port);
    return _ret.address == 0
        ? null
        : NSNumber.castFromPointer(_ret, retain: true, release: true);
  }

  NSString? get user {
    final _ret = _objc_msgSend_55(this.pointer, _sel_user);
    return _ret.address == 0
        ? null
        : NSString.castFromPointer(_ret, retain: true, release: true);
  }

  NSString? get password {
    final _ret = _objc_msgSend_55(this.pointer, _sel_password);
    return _ret.address == 0
        ? null
        : NSString.castFromPointer(_ret, retain: true, release: true);
  }

  NSString? get path {
    final _ret = _objc_msgSend_55(this.pointer, _sel_path);
    return _ret.address == 0
        ? null
        : NSString.castFromPointer(_ret, retain: true, release: true);
  }

  NSString? get fragment {
    final _ret = _objc_msgSend_55(this.pointer, _sel_fragment);
    return _ret.address == 0
        ? null
        : NSString.castFromPointer(_ret, retain: true, release: true);
  }

  NSString? get parameterString {
    final _ret = _objc_msgSend_55(this.pointer, _sel_parameterString);
    return _ret.address == 0
        ? null
        : NSString.castFromPointer(_ret, retain: true, release: true);
  }

  NSString? get query {
    final _ret = _objc_msgSend_55(this.pointer, _sel_query);
    return _ret.address == 0
        ? null
        : NSString.castFromPointer(_ret, retain: true, release: true);
  }

  NSString? get relativePath {
    final _ret = _objc_msgSend_55(this.pointer, _sel_relativePath);
    return _ret.address == 0
        ? null
        : NSString.castFromPointer(_ret, retain: true, release: true);
  }

  bool get hasDirectoryPath {
    return _objc_msgSend_11(this.pointer, _sel_hasDirectoryPath);
  }

  bool getFileSystemRepresentation_maxLength_(
      ffi.Pointer<ffi.Char> buffer, int maxBufferLength) {
    return _objc_msgSend_95(this.pointer,
        _sel_getFileSystemRepresentation_maxLength_, buffer, maxBufferLength);
  }

  ffi.Pointer<ffi.Char> get fileSystemRepresentation {
    return _objc_msgSend_84(this.pointer, _sel_fileSystemRepresentation);
  }

  bool get fileURL {
    return _objc_msgSend_11(this.pointer, _sel_isFileURL);
  }

  NSURL? get standardizedURL {
    final _ret = _objc_msgSend_56(this.pointer, _sel_standardizedURL);
    return _ret.address == 0
        ? null
        : NSURL.castFromPointer(_ret, retain: true, release: true);
  }

  bool isFileReferenceURL() {
    return _objc_msgSend_11(this.pointer, _sel_isFileReferenceURL);
  }

  NSURL? fileReferenceURL() {
    final _ret = _objc_msgSend_56(this.pointer, _sel_fileReferenceURL);
    return _ret.address == 0
        ? null
        : NSURL.castFromPointer(_ret, retain: true, release: true);
  }

  NSURL? get filePathURL {
    final _ret = _objc_msgSend_56(this.pointer, _sel_filePathURL);
    return _ret.address == 0
        ? null
        : NSURL.castFromPointer(_ret, retain: true, release: true);
  }

  bool getResourceValue_forKey_error_(
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> value,
      NSString key,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    return _objc_msgSend_96(this.pointer, _sel_getResourceValue_forKey_error_,
        value, key.pointer, error);
  }

  objc.ObjCObjectBase? resourceValuesForKeys_error_(
      NSArray keys, ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    final _ret = _objc_msgSend_159(
        this.pointer, _sel_resourceValuesForKeys_error_, keys.pointer, error);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  bool setResourceValue_forKey_error_(objc.ObjCObjectBase? value, NSString key,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    return _objc_msgSend_160(this.pointer, _sel_setResourceValue_forKey_error_,
        value?.pointer ?? ffi.nullptr, key.pointer, error);
  }

  bool setResourceValues_error_(objc.ObjCObjectBase keyedValues,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    return _objc_msgSend_161(this.pointer, _sel_setResourceValues_error_,
        keyedValues.pointer, error);
  }

  void removeCachedResourceValueForKey_(NSString key) {
    _objc_msgSend_162(
        this.pointer, _sel_removeCachedResourceValueForKey_, key.pointer);
  }

  void removeAllCachedResourceValues() {
    _objc_msgSend_1(this.pointer, _sel_removeAllCachedResourceValues);
  }

  void setTemporaryResourceValue_forKey_(
      objc.ObjCObjectBase? value, NSString key) {
    _objc_msgSend_163(this.pointer, _sel_setTemporaryResourceValue_forKey_,
        value?.pointer ?? ffi.nullptr, key.pointer);
  }

  NSData?
      bookmarkDataWithOptions_includingResourceValuesForKeys_relativeToURL_error_(
          int options,
          NSArray? keys,
          NSURL? relativeURL,
          ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    final _ret = _objc_msgSend_164(
        this.pointer,
        _sel_bookmarkDataWithOptions_includingResourceValuesForKeys_relativeToURL_error_,
        options,
        keys?.pointer ?? ffi.nullptr,
        relativeURL?.pointer ?? ffi.nullptr,
        error);
    return _ret.address == 0
        ? null
        : NSData.castFromPointer(_ret, retain: true, release: true);
  }

  NSURL?
      initByResolvingBookmarkData_options_relativeToURL_bookmarkDataIsStale_error_(
          NSData bookmarkData,
          int options,
          NSURL? relativeURL,
          ffi.Pointer<ffi.Bool> isStale,
          ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    final _ret = _objc_msgSend_165(
        this.pointer,
        _sel_initByResolvingBookmarkData_options_relativeToURL_bookmarkDataIsStale_error_,
        bookmarkData.pointer,
        options,
        relativeURL?.pointer ?? ffi.nullptr,
        isStale,
        error);
    return _ret.address == 0
        ? null
        : NSURL.castFromPointer(_ret, retain: true, release: true);
  }

  static NSURL?
      URLByResolvingBookmarkData_options_relativeToURL_bookmarkDataIsStale_error_(
          NSData bookmarkData,
          int options,
          NSURL? relativeURL,
          ffi.Pointer<ffi.Bool> isStale,
          ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    final _ret = _objc_msgSend_165(
        _class_NSURL,
        _sel_URLByResolvingBookmarkData_options_relativeToURL_bookmarkDataIsStale_error_,
        bookmarkData.pointer,
        options,
        relativeURL?.pointer ?? ffi.nullptr,
        isStale,
        error);
    return _ret.address == 0
        ? null
        : NSURL.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.ObjCObjectBase? resourceValuesForKeys_fromBookmarkData_(
      NSArray keys, NSData bookmarkData) {
    final _ret = _objc_msgSend_166(
        _class_NSURL,
        _sel_resourceValuesForKeys_fromBookmarkData_,
        keys.pointer,
        bookmarkData.pointer);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  static bool writeBookmarkData_toURL_options_error_(
      NSData bookmarkData,
      NSURL bookmarkFileURL,
      int options,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    return _objc_msgSend_167(
        _class_NSURL,
        _sel_writeBookmarkData_toURL_options_error_,
        bookmarkData.pointer,
        bookmarkFileURL.pointer,
        options,
        error);
  }

  static NSData? bookmarkDataWithContentsOfURL_error_(
      NSURL bookmarkFileURL, ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    final _ret = _objc_msgSend_168(
        _class_NSURL,
        _sel_bookmarkDataWithContentsOfURL_error_,
        bookmarkFileURL.pointer,
        error);
    return _ret.address == 0
        ? null
        : NSData.castFromPointer(_ret, retain: true, release: true);
  }

  static NSURL? URLByResolvingAliasFileAtURL_options_error_(
      NSURL url, int options, ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    final _ret = _objc_msgSend_169(
        _class_NSURL,
        _sel_URLByResolvingAliasFileAtURL_options_error_,
        url.pointer,
        options,
        error);
    return _ret.address == 0
        ? null
        : NSURL.castFromPointer(_ret, retain: true, release: true);
  }

  bool startAccessingSecurityScopedResource() {
    return _objc_msgSend_11(
        this.pointer, _sel_startAccessingSecurityScopedResource);
  }

  void stopAccessingSecurityScopedResource() {
    _objc_msgSend_1(this.pointer, _sel_stopAccessingSecurityScopedResource);
  }

  bool getPromisedItemResourceValue_forKey_error_(
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> value,
      NSString key,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    return _objc_msgSend_96(
        this.pointer,
        _sel_getPromisedItemResourceValue_forKey_error_,
        value,
        key.pointer,
        error);
  }

  NSDictionary? promisedItemResourceValuesForKeys_error_(
      NSArray keys, ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    final _ret = _objc_msgSend_189(this.pointer,
        _sel_promisedItemResourceValuesForKeys_error_, keys.pointer, error);
    return _ret.address == 0
        ? null
        : NSDictionary.castFromPointer(_ret, retain: true, release: true);
  }

  bool checkPromisedItemIsReachableAndReturnError_(
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    return _objc_msgSend_190(
        this.pointer, _sel_checkPromisedItemIsReachableAndReturnError_, error);
  }

  static NSURL? fileURLWithPathComponents_(NSArray components) {
    final _ret = _objc_msgSend_191(
        _class_NSURL, _sel_fileURLWithPathComponents_, components.pointer);
    return _ret.address == 0
        ? null
        : NSURL.castFromPointer(_ret, retain: true, release: true);
  }

  NSArray? get pathComponents {
    final _ret = _objc_msgSend_192(this.pointer, _sel_pathComponents);
    return _ret.address == 0
        ? null
        : NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  NSString? get lastPathComponent {
    final _ret = _objc_msgSend_55(this.pointer, _sel_lastPathComponent);
    return _ret.address == 0
        ? null
        : NSString.castFromPointer(_ret, retain: true, release: true);
  }

  NSString? get pathExtension {
    final _ret = _objc_msgSend_55(this.pointer, _sel_pathExtension);
    return _ret.address == 0
        ? null
        : NSString.castFromPointer(_ret, retain: true, release: true);
  }

  NSURL? URLByAppendingPathComponent_(NSString pathComponent) {
    final _ret = _objc_msgSend_193(
        this.pointer, _sel_URLByAppendingPathComponent_, pathComponent.pointer);
    return _ret.address == 0
        ? null
        : NSURL.castFromPointer(_ret, retain: true, release: true);
  }

  NSURL? URLByAppendingPathComponent_isDirectory_(
      NSString pathComponent, bool isDirectory) {
    final _ret = _objc_msgSend_194(
        this.pointer,
        _sel_URLByAppendingPathComponent_isDirectory_,
        pathComponent.pointer,
        isDirectory);
    return _ret.address == 0
        ? null
        : NSURL.castFromPointer(_ret, retain: true, release: true);
  }

  NSURL? get URLByDeletingLastPathComponent {
    final _ret =
        _objc_msgSend_56(this.pointer, _sel_URLByDeletingLastPathComponent);
    return _ret.address == 0
        ? null
        : NSURL.castFromPointer(_ret, retain: true, release: true);
  }

  NSURL? URLByAppendingPathExtension_(NSString pathExtension) {
    final _ret = _objc_msgSend_193(
        this.pointer, _sel_URLByAppendingPathExtension_, pathExtension.pointer);
    return _ret.address == 0
        ? null
        : NSURL.castFromPointer(_ret, retain: true, release: true);
  }

  NSURL? get URLByDeletingPathExtension {
    final _ret =
        _objc_msgSend_56(this.pointer, _sel_URLByDeletingPathExtension);
    return _ret.address == 0
        ? null
        : NSURL.castFromPointer(_ret, retain: true, release: true);
  }

  bool checkResourceIsReachableAndReturnError_(
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    return _objc_msgSend_190(
        this.pointer, _sel_checkResourceIsReachableAndReturnError_, error);
  }

  NSURL? get URLByStandardizingPath {
    final _ret = _objc_msgSend_56(this.pointer, _sel_URLByStandardizingPath);
    return _ret.address == 0
        ? null
        : NSURL.castFromPointer(_ret, retain: true, release: true);
  }

  NSURL? get URLByResolvingSymlinksInPath {
    final _ret =
        _objc_msgSend_56(this.pointer, _sel_URLByResolvingSymlinksInPath);
    return _ret.address == 0
        ? null
        : NSURL.castFromPointer(_ret, retain: true, release: true);
  }

  NSData? resourceDataUsingCache_(bool shouldUseCache) {
    final _ret = _objc_msgSend_195(
        this.pointer, _sel_resourceDataUsingCache_, shouldUseCache);
    return _ret.address == 0
        ? null
        : NSData.castFromPointer(_ret, retain: true, release: true);
  }

  void loadResourceDataNotifyingClient_usingCache_(
      objc.ObjCObjectBase client, bool shouldUseCache) {
    _objc_msgSend_196(
        this.pointer,
        _sel_loadResourceDataNotifyingClient_usingCache_,
        client.pointer,
        shouldUseCache);
  }

  objc.ObjCObjectBase? propertyForKey_(NSString propertyKey) {
    final _ret = _objc_msgSend_49(
        this.pointer, _sel_propertyForKey_, propertyKey.pointer);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  bool setResourceData_(NSData data) {
    return _objc_msgSend_35(this.pointer, _sel_setResourceData_, data.pointer);
  }

  bool setProperty_forKey_(objc.ObjCObjectBase property, NSString propertyKey) {
    return _objc_msgSend_197(this.pointer, _sel_setProperty_forKey_,
        property.pointer, propertyKey.pointer);
  }

  NSURLHandle? URLHandleUsingCache_(bool shouldUseCache) {
    final _ret = _objc_msgSend_205(
        this.pointer, _sel_URLHandleUsingCache_, shouldUseCache);
    return _ret.address == 0
        ? null
        : NSURLHandle.castFromPointer(_ret, retain: true, release: true);
  }

  @override
  NSURL init() {
    final _ret = _objc_msgSend_2(this.pointer, _sel_init);
    return NSURL.castFromPointer(_ret, retain: true, release: true);
  }

  static NSURL new1() {
    final _ret = _objc_msgSend_2(_class_NSURL, _sel_new);
    return NSURL.castFromPointer(_ret, retain: false, release: true);
  }

  static NSURL allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_3(_class_NSURL, _sel_allocWithZone_, zone);
    return NSURL.castFromPointer(_ret, retain: false, release: true);
  }

  static NSURL alloc() {
    final _ret = _objc_msgSend_2(_class_NSURL, _sel_alloc);
    return NSURL.castFromPointer(_ret, retain: false, release: true);
  }
}

late final _class_NSURL = objc.getClass("NSURL");
late final _sel_initWithScheme_host_path_ =
    objc.registerName("initWithScheme:host:path:");
final _objc_msgSend_38 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_initFileURLWithPath_isDirectory_relativeToURL_ =
    objc.registerName("initFileURLWithPath:isDirectory:relativeToURL:");
final _objc_msgSend_39 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Bool,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            bool,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_initFileURLWithPath_relativeToURL_ =
    objc.registerName("initFileURLWithPath:relativeToURL:");
final _objc_msgSend_40 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_initFileURLWithPath_isDirectory_ =
    objc.registerName("initFileURLWithPath:isDirectory:");
final _objc_msgSend_41 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Bool)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            bool)>();
late final _sel_initFileURLWithPath_ =
    objc.registerName("initFileURLWithPath:");
final _objc_msgSend_42 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_fileURLWithPath_isDirectory_relativeToURL_ =
    objc.registerName("fileURLWithPath:isDirectory:relativeToURL:");
final _objc_msgSend_43 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Bool,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            bool,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_fileURLWithPath_relativeToURL_ =
    objc.registerName("fileURLWithPath:relativeToURL:");
final _objc_msgSend_44 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_fileURLWithPath_isDirectory_ =
    objc.registerName("fileURLWithPath:isDirectory:");
final _objc_msgSend_45 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Bool)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            bool)>();
late final _sel_fileURLWithPath_ = objc.registerName("fileURLWithPath:");
final _objc_msgSend_46 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_initFileURLWithFileSystemRepresentation_isDirectory_relativeToURL_ =
    objc.registerName(
        "initFileURLWithFileSystemRepresentation:isDirectory:relativeToURL:");
final _objc_msgSend_47 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<ffi.Char>,
                ffi.Bool,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<ffi.Char>,
            bool,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_fileURLWithFileSystemRepresentation_isDirectory_relativeToURL_ =
    objc.registerName(
        "fileURLWithFileSystemRepresentation:isDirectory:relativeToURL:");
final _objc_msgSend_48 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<ffi.Char>,
                ffi.Bool,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<ffi.Char>,
            bool,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_initWithString_ = objc.registerName("initWithString:");
final _objc_msgSend_49 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_initWithString_relativeToURL_ =
    objc.registerName("initWithString:relativeToURL:");
final _objc_msgSend_50 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_URLWithString_ = objc.registerName("URLWithString:");
late final _sel_URLWithString_relativeToURL_ =
    objc.registerName("URLWithString:relativeToURL:");
late final _sel_initWithString_encodingInvalidCharacters_ =
    objc.registerName("initWithString:encodingInvalidCharacters:");
final _objc_msgSend_51 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Bool)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            bool)>();
late final _sel_URLWithString_encodingInvalidCharacters_ =
    objc.registerName("URLWithString:encodingInvalidCharacters:");
late final _sel_initWithDataRepresentation_relativeToURL_ =
    objc.registerName("initWithDataRepresentation:relativeToURL:");
final _objc_msgSend_52 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_URLWithDataRepresentation_relativeToURL_ =
    objc.registerName("URLWithDataRepresentation:relativeToURL:");
final _objc_msgSend_53 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_initAbsoluteURLWithDataRepresentation_relativeToURL_ =
    objc.registerName("initAbsoluteURLWithDataRepresentation:relativeToURL:");
late final _sel_absoluteURLWithDataRepresentation_relativeToURL_ =
    objc.registerName("absoluteURLWithDataRepresentation:relativeToURL:");
late final _sel_dataRepresentation = objc.registerName("dataRepresentation");
final _objc_msgSend_54 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_absoluteString = objc.registerName("absoluteString");
final _objc_msgSend_55 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_relativeString = objc.registerName("relativeString");
late final _sel_baseURL = objc.registerName("baseURL");
final _objc_msgSend_56 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_absoluteURL = objc.registerName("absoluteURL");
late final _sel_scheme = objc.registerName("scheme");
late final _sel_resourceSpecifier = objc.registerName("resourceSpecifier");
late final _sel_host = objc.registerName("host");

class NSNumber extends NSValue {
  NSNumber._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSNumber] that points to the same underlying object as [other].
  NSNumber.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSNumber] that wraps the given raw object pointer.
  NSNumber.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSNumber].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(obj.pointer, _sel_isKindOfClass_, _class_NSNumber);
  }

  @override
  NSNumber? initWithCoder_(NSCoder coder) {
    final _ret =
        _objc_msgSend_14(this.pointer, _sel_initWithCoder_, coder.pointer);
    return _ret.address == 0
        ? null
        : NSNumber.castFromPointer(_ret, retain: true, release: true);
  }

  NSNumber initWithChar_(int value) {
    final _ret = _objc_msgSend_57(this.pointer, _sel_initWithChar_, value);
    return NSNumber.castFromPointer(_ret, retain: true, release: true);
  }

  NSNumber initWithUnsignedChar_(int value) {
    final _ret =
        _objc_msgSend_58(this.pointer, _sel_initWithUnsignedChar_, value);
    return NSNumber.castFromPointer(_ret, retain: true, release: true);
  }

  NSNumber initWithShort_(int value) {
    final _ret = _objc_msgSend_59(this.pointer, _sel_initWithShort_, value);
    return NSNumber.castFromPointer(_ret, retain: true, release: true);
  }

  NSNumber initWithUnsignedShort_(int value) {
    final _ret =
        _objc_msgSend_60(this.pointer, _sel_initWithUnsignedShort_, value);
    return NSNumber.castFromPointer(_ret, retain: true, release: true);
  }

  NSNumber initWithInt_(int value) {
    final _ret = _objc_msgSend_61(this.pointer, _sel_initWithInt_, value);
    return NSNumber.castFromPointer(_ret, retain: true, release: true);
  }

  NSNumber initWithUnsignedInt_(int value) {
    final _ret =
        _objc_msgSend_62(this.pointer, _sel_initWithUnsignedInt_, value);
    return NSNumber.castFromPointer(_ret, retain: true, release: true);
  }

  NSNumber initWithLong_(int value) {
    final _ret = _objc_msgSend_63(this.pointer, _sel_initWithLong_, value);
    return NSNumber.castFromPointer(_ret, retain: true, release: true);
  }

  NSNumber initWithUnsignedLong_(int value) {
    final _ret =
        _objc_msgSend_64(this.pointer, _sel_initWithUnsignedLong_, value);
    return NSNumber.castFromPointer(_ret, retain: true, release: true);
  }

  NSNumber initWithLongLong_(int value) {
    final _ret = _objc_msgSend_65(this.pointer, _sel_initWithLongLong_, value);
    return NSNumber.castFromPointer(_ret, retain: true, release: true);
  }

  NSNumber initWithUnsignedLongLong_(int value) {
    final _ret =
        _objc_msgSend_66(this.pointer, _sel_initWithUnsignedLongLong_, value);
    return NSNumber.castFromPointer(_ret, retain: true, release: true);
  }

  NSNumber initWithFloat_(double value) {
    final _ret = _objc_msgSend_67(this.pointer, _sel_initWithFloat_, value);
    return NSNumber.castFromPointer(_ret, retain: true, release: true);
  }

  NSNumber initWithDouble_(double value) {
    final _ret = _objc_msgSend_68(this.pointer, _sel_initWithDouble_, value);
    return NSNumber.castFromPointer(_ret, retain: true, release: true);
  }

  NSNumber initWithBool_(bool value) {
    final _ret = _objc_msgSend_69(this.pointer, _sel_initWithBool_, value);
    return NSNumber.castFromPointer(_ret, retain: true, release: true);
  }

  NSNumber initWithInteger_(int value) {
    final _ret = _objc_msgSend_63(this.pointer, _sel_initWithInteger_, value);
    return NSNumber.castFromPointer(_ret, retain: true, release: true);
  }

  NSNumber initWithUnsignedInteger_(int value) {
    final _ret =
        _objc_msgSend_64(this.pointer, _sel_initWithUnsignedInteger_, value);
    return NSNumber.castFromPointer(_ret, retain: true, release: true);
  }

  int get charValue {
    return _objc_msgSend_70(this.pointer, _sel_charValue);
  }

  int get unsignedCharValue {
    return _objc_msgSend_71(this.pointer, _sel_unsignedCharValue);
  }

  int get shortValue {
    return _objc_msgSend_72(this.pointer, _sel_shortValue);
  }

  int get unsignedShortValue {
    return _objc_msgSend_73(this.pointer, _sel_unsignedShortValue);
  }

  int get intValue {
    return _objc_msgSend_74(this.pointer, _sel_intValue);
  }

  int get unsignedIntValue {
    return _objc_msgSend_75(this.pointer, _sel_unsignedIntValue);
  }

  int get longValue {
    return _objc_msgSend_76(this.pointer, _sel_longValue);
  }

  int get unsignedLongValue {
    return _objc_msgSend_12(this.pointer, _sel_unsignedLongValue);
  }

  int get longLongValue {
    return _objc_msgSend_77(this.pointer, _sel_longLongValue);
  }

  int get unsignedLongLongValue {
    return _objc_msgSend_78(this.pointer, _sel_unsignedLongLongValue);
  }

  double get floatValue {
    return objc.useMsgSendVariants
        ? _objc_msgSend_79Fpret(this.pointer, _sel_floatValue)
        : _objc_msgSend_79(this.pointer, _sel_floatValue);
  }

  double get doubleValue {
    return objc.useMsgSendVariants
        ? _objc_msgSend_80Fpret(this.pointer, _sel_doubleValue)
        : _objc_msgSend_80(this.pointer, _sel_doubleValue);
  }

  bool get boolValue {
    return _objc_msgSend_11(this.pointer, _sel_boolValue);
  }

  int get integerValue {
    return _objc_msgSend_76(this.pointer, _sel_integerValue);
  }

  int get unsignedIntegerValue {
    return _objc_msgSend_12(this.pointer, _sel_unsignedIntegerValue);
  }

  NSString get stringValue {
    final _ret = _objc_msgSend_32(this.pointer, _sel_stringValue);
    return NSString.castFromPointer(_ret, retain: true, release: true);
  }

  int compare_(NSNumber otherNumber) {
    return _objc_msgSend_81(this.pointer, _sel_compare_, otherNumber.pointer);
  }

  bool isEqualToNumber_(NSNumber number) {
    return _objc_msgSend_82(
        this.pointer, _sel_isEqualToNumber_, number.pointer);
  }

  NSString descriptionWithLocale_(objc.ObjCObjectBase? locale) {
    final _ret = _objc_msgSend_83(this.pointer, _sel_descriptionWithLocale_,
        locale?.pointer ?? ffi.nullptr);
    return NSString.castFromPointer(_ret, retain: true, release: true);
  }

  static NSNumber numberWithChar_(int value) {
    final _ret = _objc_msgSend_57(_class_NSNumber, _sel_numberWithChar_, value);
    return NSNumber.castFromPointer(_ret, retain: true, release: true);
  }

  static NSNumber numberWithUnsignedChar_(int value) {
    final _ret =
        _objc_msgSend_58(_class_NSNumber, _sel_numberWithUnsignedChar_, value);
    return NSNumber.castFromPointer(_ret, retain: true, release: true);
  }

  static NSNumber numberWithShort_(int value) {
    final _ret =
        _objc_msgSend_59(_class_NSNumber, _sel_numberWithShort_, value);
    return NSNumber.castFromPointer(_ret, retain: true, release: true);
  }

  static NSNumber numberWithUnsignedShort_(int value) {
    final _ret =
        _objc_msgSend_60(_class_NSNumber, _sel_numberWithUnsignedShort_, value);
    return NSNumber.castFromPointer(_ret, retain: true, release: true);
  }

  static NSNumber numberWithInt_(int value) {
    final _ret = _objc_msgSend_61(_class_NSNumber, _sel_numberWithInt_, value);
    return NSNumber.castFromPointer(_ret, retain: true, release: true);
  }

  static NSNumber numberWithUnsignedInt_(int value) {
    final _ret =
        _objc_msgSend_62(_class_NSNumber, _sel_numberWithUnsignedInt_, value);
    return NSNumber.castFromPointer(_ret, retain: true, release: true);
  }

  static NSNumber numberWithLong_(int value) {
    final _ret = _objc_msgSend_63(_class_NSNumber, _sel_numberWithLong_, value);
    return NSNumber.castFromPointer(_ret, retain: true, release: true);
  }

  static NSNumber numberWithUnsignedLong_(int value) {
    final _ret =
        _objc_msgSend_64(_class_NSNumber, _sel_numberWithUnsignedLong_, value);
    return NSNumber.castFromPointer(_ret, retain: true, release: true);
  }

  static NSNumber numberWithLongLong_(int value) {
    final _ret =
        _objc_msgSend_65(_class_NSNumber, _sel_numberWithLongLong_, value);
    return NSNumber.castFromPointer(_ret, retain: true, release: true);
  }

  static NSNumber numberWithUnsignedLongLong_(int value) {
    final _ret = _objc_msgSend_66(
        _class_NSNumber, _sel_numberWithUnsignedLongLong_, value);
    return NSNumber.castFromPointer(_ret, retain: true, release: true);
  }

  static NSNumber numberWithFloat_(double value) {
    final _ret =
        _objc_msgSend_67(_class_NSNumber, _sel_numberWithFloat_, value);
    return NSNumber.castFromPointer(_ret, retain: true, release: true);
  }

  static NSNumber numberWithDouble_(double value) {
    final _ret =
        _objc_msgSend_68(_class_NSNumber, _sel_numberWithDouble_, value);
    return NSNumber.castFromPointer(_ret, retain: true, release: true);
  }

  static NSNumber numberWithBool_(bool value) {
    final _ret = _objc_msgSend_69(_class_NSNumber, _sel_numberWithBool_, value);
    return NSNumber.castFromPointer(_ret, retain: true, release: true);
  }

  static NSNumber numberWithInteger_(int value) {
    final _ret =
        _objc_msgSend_63(_class_NSNumber, _sel_numberWithInteger_, value);
    return NSNumber.castFromPointer(_ret, retain: true, release: true);
  }

  static NSNumber numberWithUnsignedInteger_(int value) {
    final _ret = _objc_msgSend_64(
        _class_NSNumber, _sel_numberWithUnsignedInteger_, value);
    return NSNumber.castFromPointer(_ret, retain: true, release: true);
  }

  @override
  NSNumber initWithBytes_objCType_(
      ffi.Pointer<ffi.Void> value, ffi.Pointer<ffi.Char> type) {
    final _ret = _objc_msgSend_85(
        this.pointer, _sel_initWithBytes_objCType_, value, type);
    return NSNumber.castFromPointer(_ret, retain: true, release: true);
  }

  static NSValue valueWithBytes_objCType_(
      ffi.Pointer<ffi.Void> value, ffi.Pointer<ffi.Char> type) {
    final _ret = _objc_msgSend_86(
        _class_NSNumber, _sel_valueWithBytes_objCType_, value, type);
    return NSValue.castFromPointer(_ret, retain: true, release: true);
  }

  static NSValue value_withObjCType_(
      ffi.Pointer<ffi.Void> value, ffi.Pointer<ffi.Char> type) {
    final _ret = _objc_msgSend_86(
        _class_NSNumber, _sel_value_withObjCType_, value, type);
    return NSValue.castFromPointer(_ret, retain: true, release: true);
  }

  static NSValue valueWithNonretainedObject_(objc.ObjCObjectBase? anObject) {
    final _ret = _objc_msgSend_87(_class_NSNumber,
        _sel_valueWithNonretainedObject_, anObject?.pointer ?? ffi.nullptr);
    return NSValue.castFromPointer(_ret, retain: true, release: true);
  }

  static NSValue valueWithPointer_(ffi.Pointer<ffi.Void> pointer) {
    final _ret =
        _objc_msgSend_89(_class_NSNumber, _sel_valueWithPointer_, pointer);
    return NSValue.castFromPointer(_ret, retain: true, release: true);
  }

  static NSValue valueWithRange_(_NSRange range) {
    final _ret = _objc_msgSend_92(_class_NSNumber, _sel_valueWithRange_, range);
    return NSValue.castFromPointer(_ret, retain: true, release: true);
  }

  @override
  NSNumber init() {
    final _ret = _objc_msgSend_2(this.pointer, _sel_init);
    return NSNumber.castFromPointer(_ret, retain: true, release: true);
  }

  static NSNumber new1() {
    final _ret = _objc_msgSend_2(_class_NSNumber, _sel_new);
    return NSNumber.castFromPointer(_ret, retain: false, release: true);
  }

  static NSNumber allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_3(_class_NSNumber, _sel_allocWithZone_, zone);
    return NSNumber.castFromPointer(_ret, retain: false, release: true);
  }

  static NSNumber alloc() {
    final _ret = _objc_msgSend_2(_class_NSNumber, _sel_alloc);
    return NSNumber.castFromPointer(_ret, retain: false, release: true);
  }
}

late final _class_NSNumber = objc.getClass("NSNumber");
late final _sel_initWithChar_ = objc.registerName("initWithChar:");
final _objc_msgSend_57 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Char)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_initWithUnsignedChar_ =
    objc.registerName("initWithUnsignedChar:");
final _objc_msgSend_58 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedChar)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_initWithShort_ = objc.registerName("initWithShort:");
final _objc_msgSend_59 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Short)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_initWithUnsignedShort_ =
    objc.registerName("initWithUnsignedShort:");
final _objc_msgSend_60 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedShort)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_initWithInt_ = objc.registerName("initWithInt:");
final _objc_msgSend_61 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Int)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_initWithUnsignedInt_ =
    objc.registerName("initWithUnsignedInt:");
final _objc_msgSend_62 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedInt)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_initWithLong_ = objc.registerName("initWithLong:");
final _objc_msgSend_63 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Long)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_initWithUnsignedLong_ =
    objc.registerName("initWithUnsignedLong:");
final _objc_msgSend_64 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedLong)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_initWithLongLong_ = objc.registerName("initWithLongLong:");
final _objc_msgSend_65 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.LongLong)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_initWithUnsignedLongLong_ =
    objc.registerName("initWithUnsignedLongLong:");
final _objc_msgSend_66 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedLongLong)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_initWithFloat_ = objc.registerName("initWithFloat:");
final _objc_msgSend_67 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Float)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, double)>();
late final _sel_initWithDouble_ = objc.registerName("initWithDouble:");
final _objc_msgSend_68 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Double)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, double)>();
late final _sel_initWithBool_ = objc.registerName("initWithBool:");
final _objc_msgSend_69 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Bool)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, bool)>();
late final _sel_initWithInteger_ = objc.registerName("initWithInteger:");
late final _sel_initWithUnsignedInteger_ =
    objc.registerName("initWithUnsignedInteger:");
late final _sel_charValue = objc.registerName("charValue");
final _objc_msgSend_70 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Char Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_unsignedCharValue = objc.registerName("unsignedCharValue");
final _objc_msgSend_71 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedChar Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_shortValue = objc.registerName("shortValue");
final _objc_msgSend_72 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Short Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_unsignedShortValue = objc.registerName("unsignedShortValue");
final _objc_msgSend_73 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedShort Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_intValue = objc.registerName("intValue");
final _objc_msgSend_74 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Int Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_unsignedIntValue = objc.registerName("unsignedIntValue");
final _objc_msgSend_75 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedInt Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_longValue = objc.registerName("longValue");
final _objc_msgSend_76 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Long Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_unsignedLongValue = objc.registerName("unsignedLongValue");
late final _sel_longLongValue = objc.registerName("longLongValue");
final _objc_msgSend_77 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.LongLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_unsignedLongLongValue =
    objc.registerName("unsignedLongLongValue");
final _objc_msgSend_78 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLongLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_floatValue = objc.registerName("floatValue");
final _objc_msgSend_79 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Float Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        double Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
final _objc_msgSend_79Fpret = objc.msgSendFpretPointer
    .cast<
        ffi.NativeFunction<
            ffi.Float Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        double Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_doubleValue = objc.registerName("doubleValue");
final _objc_msgSend_80 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Double Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        double Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
final _objc_msgSend_80Fpret = objc.msgSendFpretPointer
    .cast<
        ffi.NativeFunction<
            ffi.Double Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        double Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_boolValue = objc.registerName("boolValue");
late final _sel_integerValue = objc.registerName("integerValue");
late final _sel_unsignedIntegerValue =
    objc.registerName("unsignedIntegerValue");
late final _sel_stringValue = objc.registerName("stringValue");
final _objc_msgSend_81 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Int32 Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        int Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_isEqualToNumber_ = objc.registerName("isEqualToNumber:");
final _objc_msgSend_82 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        bool Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_descriptionWithLocale_ =
    objc.registerName("descriptionWithLocale:");
final _objc_msgSend_83 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_numberWithChar_ = objc.registerName("numberWithChar:");
late final _sel_numberWithUnsignedChar_ =
    objc.registerName("numberWithUnsignedChar:");
late final _sel_numberWithShort_ = objc.registerName("numberWithShort:");
late final _sel_numberWithUnsignedShort_ =
    objc.registerName("numberWithUnsignedShort:");
late final _sel_numberWithInt_ = objc.registerName("numberWithInt:");
late final _sel_numberWithUnsignedInt_ =
    objc.registerName("numberWithUnsignedInt:");
late final _sel_numberWithLong_ = objc.registerName("numberWithLong:");
late final _sel_numberWithUnsignedLong_ =
    objc.registerName("numberWithUnsignedLong:");
late final _sel_numberWithLongLong_ = objc.registerName("numberWithLongLong:");
late final _sel_numberWithUnsignedLongLong_ =
    objc.registerName("numberWithUnsignedLongLong:");
late final _sel_numberWithFloat_ = objc.registerName("numberWithFloat:");
late final _sel_numberWithDouble_ = objc.registerName("numberWithDouble:");
late final _sel_numberWithBool_ = objc.registerName("numberWithBool:");
late final _sel_numberWithInteger_ = objc.registerName("numberWithInteger:");
late final _sel_numberWithUnsignedInteger_ =
    objc.registerName("numberWithUnsignedInteger:");

class NSValue extends NSObject {
  NSValue._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSValue] that points to the same underlying object as [other].
  NSValue.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSValue] that wraps the given raw object pointer.
  NSValue.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSValue].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(obj.pointer, _sel_isKindOfClass_, _class_NSValue);
  }

  void getValue_size_(ffi.Pointer<ffi.Void> value, int size) {
    _objc_msgSend_33(this.pointer, _sel_getValue_size_, value, size);
  }

  ffi.Pointer<ffi.Char> get objCType {
    return _objc_msgSend_84(this.pointer, _sel_objCType);
  }

  NSValue initWithBytes_objCType_(
      ffi.Pointer<ffi.Void> value, ffi.Pointer<ffi.Char> type) {
    final _ret = _objc_msgSend_85(
        this.pointer, _sel_initWithBytes_objCType_, value, type);
    return NSValue.castFromPointer(_ret, retain: true, release: true);
  }

  NSValue? initWithCoder_(NSCoder coder) {
    final _ret =
        _objc_msgSend_14(this.pointer, _sel_initWithCoder_, coder.pointer);
    return _ret.address == 0
        ? null
        : NSValue.castFromPointer(_ret, retain: true, release: true);
  }

  static NSValue valueWithBytes_objCType_(
      ffi.Pointer<ffi.Void> value, ffi.Pointer<ffi.Char> type) {
    final _ret = _objc_msgSend_86(
        _class_NSValue, _sel_valueWithBytes_objCType_, value, type);
    return NSValue.castFromPointer(_ret, retain: true, release: true);
  }

  static NSValue value_withObjCType_(
      ffi.Pointer<ffi.Void> value, ffi.Pointer<ffi.Char> type) {
    final _ret =
        _objc_msgSend_86(_class_NSValue, _sel_value_withObjCType_, value, type);
    return NSValue.castFromPointer(_ret, retain: true, release: true);
  }

  static NSValue valueWithNonretainedObject_(objc.ObjCObjectBase? anObject) {
    final _ret = _objc_msgSend_87(_class_NSValue,
        _sel_valueWithNonretainedObject_, anObject?.pointer ?? ffi.nullptr);
    return NSValue.castFromPointer(_ret, retain: true, release: true);
  }

  objc.ObjCObjectBase? get nonretainedObjectValue {
    final _ret = _objc_msgSend_88(this.pointer, _sel_nonretainedObjectValue);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  static NSValue valueWithPointer_(ffi.Pointer<ffi.Void> pointer) {
    final _ret =
        _objc_msgSend_89(_class_NSValue, _sel_valueWithPointer_, pointer);
    return NSValue.castFromPointer(_ret, retain: true, release: true);
  }

  ffi.Pointer<ffi.Void> get pointerValue {
    return _objc_msgSend_31(this.pointer, _sel_pointerValue);
  }

  bool isEqualToValue_(NSValue value) {
    return _objc_msgSend_90(this.pointer, _sel_isEqualToValue_, value.pointer);
  }

  void getValue_(ffi.Pointer<ffi.Void> value) {
    _objc_msgSend_91(this.pointer, _sel_getValue_, value);
  }

  static NSValue valueWithRange_(_NSRange range) {
    final _ret = _objc_msgSend_92(_class_NSValue, _sel_valueWithRange_, range);
    return NSValue.castFromPointer(_ret, retain: true, release: true);
  }

  void getRangeValue(ffi.Pointer<_NSRange> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_93Stret(stret, this.pointer, _sel_rangeValue)
        : stret.ref = _objc_msgSend_93(this.pointer, _sel_rangeValue);
  }

  @override
  NSValue init() {
    final _ret = _objc_msgSend_2(this.pointer, _sel_init);
    return NSValue.castFromPointer(_ret, retain: true, release: true);
  }

  static NSValue new1() {
    final _ret = _objc_msgSend_2(_class_NSValue, _sel_new);
    return NSValue.castFromPointer(_ret, retain: false, release: true);
  }

  static NSValue allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_3(_class_NSValue, _sel_allocWithZone_, zone);
    return NSValue.castFromPointer(_ret, retain: false, release: true);
  }

  static NSValue alloc() {
    final _ret = _objc_msgSend_2(_class_NSValue, _sel_alloc);
    return NSValue.castFromPointer(_ret, retain: false, release: true);
  }
}

late final _class_NSValue = objc.getClass("NSValue");
late final _sel_getValue_size_ = objc.registerName("getValue:size:");
late final _sel_objCType = objc.registerName("objCType");
final _objc_msgSend_84 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<ffi.Char> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<ffi.Char> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_initWithBytes_objCType_ =
    objc.registerName("initWithBytes:objCType:");
final _objc_msgSend_85 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<ffi.Void>,
                ffi.Pointer<ffi.Char>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<ffi.Void>,
            ffi.Pointer<ffi.Char>)>();
late final _sel_valueWithBytes_objCType_ =
    objc.registerName("valueWithBytes:objCType:");
final _objc_msgSend_86 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<ffi.Void>,
                ffi.Pointer<ffi.Char>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<ffi.Void>,
            ffi.Pointer<ffi.Char>)>();
late final _sel_value_withObjCType_ = objc.registerName("value:withObjCType:");
late final _sel_valueWithNonretainedObject_ =
    objc.registerName("valueWithNonretainedObject:");
final _objc_msgSend_87 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_nonretainedObjectValue =
    objc.registerName("nonretainedObjectValue");
final _objc_msgSend_88 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_valueWithPointer_ = objc.registerName("valueWithPointer:");
final _objc_msgSend_89 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<ffi.Void>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<ffi.Void>)>();
late final _sel_pointerValue = objc.registerName("pointerValue");
late final _sel_isEqualToValue_ = objc.registerName("isEqualToValue:");
final _objc_msgSend_90 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        bool Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_getValue_ = objc.registerName("getValue:");
final _objc_msgSend_91 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<ffi.Void>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<ffi.Void>)>();
late final _sel_valueWithRange_ = objc.registerName("valueWithRange:");
final _objc_msgSend_92 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, _NSRange)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, _NSRange)>();
late final _sel_rangeValue = objc.registerName("rangeValue");
final _objc_msgSend_93 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            _NSRange Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        _NSRange Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
final _objc_msgSend_93Stret = objc.msgSendStretPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<_NSRange>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        void Function(ffi.Pointer<_NSRange>, ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_port = objc.registerName("port");
final _objc_msgSend_94 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_user = objc.registerName("user");
late final _sel_password = objc.registerName("password");
late final _sel_path = objc.registerName("path");
late final _sel_fragment = objc.registerName("fragment");
late final _sel_parameterString = objc.registerName("parameterString");
late final _sel_query = objc.registerName("query");
late final _sel_relativePath = objc.registerName("relativePath");
late final _sel_hasDirectoryPath = objc.registerName("hasDirectoryPath");
late final _sel_getFileSystemRepresentation_maxLength_ =
    objc.registerName("getFileSystemRepresentation:maxLength:");
final _objc_msgSend_95 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<ffi.Char>,
                ffi.UnsignedLong)>>()
    .asFunction<
        bool Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<ffi.Char>, int)>();
late final _sel_fileSystemRepresentation =
    objc.registerName("fileSystemRepresentation");
late final _sel_isFileURL = objc.registerName("isFileURL");
late final _sel_standardizedURL = objc.registerName("standardizedURL");
late final _sel_isFileReferenceURL = objc.registerName("isFileReferenceURL");
late final _sel_fileReferenceURL = objc.registerName("fileReferenceURL");
late final _sel_filePathURL = objc.registerName("filePathURL");

class NSError extends objc.ObjCObjectBase {
  NSError._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super(pointer, retain: retain, release: release);

  /// Constructs a [NSError] that points to the same underlying object as [other].
  NSError.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSError] that wraps the given raw object pointer.
  NSError.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSError].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(obj.pointer, _sel_isKindOfClass_, _class_NSError);
  }
}

late final _class_NSError = objc.getClass("NSError");
late final _sel_getResourceValue_forKey_error_ =
    objc.registerName("getResourceValue:forKey:error:");
final _objc_msgSend_96 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();

class NSArray extends NSObject {
  NSArray._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSArray] that points to the same underlying object as [other].
  NSArray.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSArray] that wraps the given raw object pointer.
  NSArray.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSArray].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(obj.pointer, _sel_isKindOfClass_, _class_NSArray);
  }

  int get count {
    return _objc_msgSend_12(this.pointer, _sel_count);
  }

  objc.ObjCObjectBase objectAtIndex_(int index) {
    final _ret = _objc_msgSend_97(this.pointer, _sel_objectAtIndex_, index);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  @override
  NSArray init() {
    final _ret = _objc_msgSend_2(this.pointer, _sel_init);
    return NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  NSArray initWithObjects_count_(
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> objects, int cnt) {
    final _ret = _objc_msgSend_98(
        this.pointer, _sel_initWithObjects_count_, objects, cnt);
    return NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  NSArray? initWithCoder_(NSCoder coder) {
    final _ret =
        _objc_msgSend_14(this.pointer, _sel_initWithCoder_, coder.pointer);
    return _ret.address == 0
        ? null
        : NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  NSArray arrayByAddingObject_(objc.ObjCObjectBase anObject) {
    final _ret = _objc_msgSend_99(
        this.pointer, _sel_arrayByAddingObject_, anObject.pointer);
    return NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  NSArray arrayByAddingObjectsFromArray_(NSArray otherArray) {
    final _ret = _objc_msgSend_100(
        this.pointer, _sel_arrayByAddingObjectsFromArray_, otherArray.pointer);
    return NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  NSString componentsJoinedByString_(NSString separator) {
    final _ret = _objc_msgSend_101(
        this.pointer, _sel_componentsJoinedByString_, separator.pointer);
    return NSString.castFromPointer(_ret, retain: true, release: true);
  }

  bool containsObject_(objc.ObjCObjectBase anObject) {
    return _objc_msgSend_0(
        this.pointer, _sel_containsObject_, anObject.pointer);
  }

  NSString get description {
    final _ret = _objc_msgSend_32(this.pointer, _sel_description);
    return NSString.castFromPointer(_ret, retain: true, release: true);
  }

  NSString descriptionWithLocale_(objc.ObjCObjectBase? locale) {
    final _ret = _objc_msgSend_83(this.pointer, _sel_descriptionWithLocale_,
        locale?.pointer ?? ffi.nullptr);
    return NSString.castFromPointer(_ret, retain: true, release: true);
  }

  NSString descriptionWithLocale_indent_(
      objc.ObjCObjectBase? locale, int level) {
    final _ret = _objc_msgSend_102(
        this.pointer,
        _sel_descriptionWithLocale_indent_,
        locale?.pointer ?? ffi.nullptr,
        level);
    return NSString.castFromPointer(_ret, retain: true, release: true);
  }

  objc.ObjCObjectBase? firstObjectCommonWithArray_(NSArray otherArray) {
    final _ret = _objc_msgSend_103(
        this.pointer, _sel_firstObjectCommonWithArray_, otherArray.pointer);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  void getObjects_range_(
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> objects, _NSRange range) {
    _objc_msgSend_104(this.pointer, _sel_getObjects_range_, objects, range);
  }

  int indexOfObject_(objc.ObjCObjectBase anObject) {
    return _objc_msgSend_105(
        this.pointer, _sel_indexOfObject_, anObject.pointer);
  }

  int indexOfObject_inRange_(objc.ObjCObjectBase anObject, _NSRange range) {
    return _objc_msgSend_106(
        this.pointer, _sel_indexOfObject_inRange_, anObject.pointer, range);
  }

  int indexOfObjectIdenticalTo_(objc.ObjCObjectBase anObject) {
    return _objc_msgSend_105(
        this.pointer, _sel_indexOfObjectIdenticalTo_, anObject.pointer);
  }

  int indexOfObjectIdenticalTo_inRange_(
      objc.ObjCObjectBase anObject, _NSRange range) {
    return _objc_msgSend_106(this.pointer,
        _sel_indexOfObjectIdenticalTo_inRange_, anObject.pointer, range);
  }

  bool isEqualToArray_(NSArray otherArray) {
    return _objc_msgSend_107(
        this.pointer, _sel_isEqualToArray_, otherArray.pointer);
  }

  objc.ObjCObjectBase? get firstObject {
    final _ret = _objc_msgSend_88(this.pointer, _sel_firstObject);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  objc.ObjCObjectBase? get lastObject {
    final _ret = _objc_msgSend_88(this.pointer, _sel_lastObject);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  NSEnumerator objectEnumerator() {
    final _ret = _objc_msgSend_108(this.pointer, _sel_objectEnumerator);
    return NSEnumerator.castFromPointer(_ret, retain: true, release: true);
  }

  NSEnumerator reverseObjectEnumerator() {
    final _ret = _objc_msgSend_108(this.pointer, _sel_reverseObjectEnumerator);
    return NSEnumerator.castFromPointer(_ret, retain: true, release: true);
  }

  NSData get sortedArrayHint {
    final _ret = _objc_msgSend_54(this.pointer, _sel_sortedArrayHint);
    return NSData.castFromPointer(_ret, retain: true, release: true);
  }

  NSArray sortedArrayUsingFunction_context_(
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Long Function(ffi.Pointer<objc.ObjCObject>,
                      ffi.Pointer<objc.ObjCObject>, ffi.Pointer<ffi.Void>)>>
          comparator,
      ffi.Pointer<ffi.Void> context) {
    final _ret = _objc_msgSend_109(this.pointer,
        _sel_sortedArrayUsingFunction_context_, comparator, context);
    return NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  NSArray sortedArrayUsingFunction_context_hint_(
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Long Function(ffi.Pointer<objc.ObjCObject>,
                      ffi.Pointer<objc.ObjCObject>, ffi.Pointer<ffi.Void>)>>
          comparator,
      ffi.Pointer<ffi.Void> context,
      NSData? hint) {
    final _ret = _objc_msgSend_110(
        this.pointer,
        _sel_sortedArrayUsingFunction_context_hint_,
        comparator,
        context,
        hint?.pointer ?? ffi.nullptr);
    return NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  NSArray sortedArrayUsingSelector_(ffi.Pointer<objc.ObjCSelector> comparator) {
    final _ret = _objc_msgSend_111(
        this.pointer, _sel_sortedArrayUsingSelector_, comparator);
    return NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  NSArray subarrayWithRange_(_NSRange range) {
    final _ret =
        _objc_msgSend_112(this.pointer, _sel_subarrayWithRange_, range);
    return NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  bool writeToURL_error_(
      NSURL url, ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    return _objc_msgSend_113(
        this.pointer, _sel_writeToURL_error_, url.pointer, error);
  }

  void makeObjectsPerformSelector_(ffi.Pointer<objc.ObjCSelector> aSelector) {
    _objc_msgSend_7(this.pointer, _sel_makeObjectsPerformSelector_, aSelector);
  }

  void makeObjectsPerformSelector_withObject_(
      ffi.Pointer<objc.ObjCSelector> aSelector, objc.ObjCObjectBase? argument) {
    _objc_msgSend_114(this.pointer, _sel_makeObjectsPerformSelector_withObject_,
        aSelector, argument?.pointer ?? ffi.nullptr);
  }

  NSArray objectsAtIndexes_(NSIndexSet indexes) {
    final _ret = _objc_msgSend_135(
        this.pointer, _sel_objectsAtIndexes_, indexes.pointer);
    return NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  objc.ObjCObjectBase objectAtIndexedSubscript_(int idx) {
    final _ret =
        _objc_msgSend_97(this.pointer, _sel_objectAtIndexedSubscript_, idx);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  void enumerateObjectsUsingBlock_(
      ObjCBlock_ffiVoid_objcObjCObject_ffiUnsignedLong_bool block) {
    _objc_msgSend_136(
        this.pointer, _sel_enumerateObjectsUsingBlock_, block.pointer);
  }

  void enumerateObjectsWithOptions_usingBlock_(
      int opts, ObjCBlock_ffiVoid_objcObjCObject_ffiUnsignedLong_bool block) {
    _objc_msgSend_137(this.pointer,
        _sel_enumerateObjectsWithOptions_usingBlock_, opts, block.pointer);
  }

  void enumerateObjectsAtIndexes_options_usingBlock_(NSIndexSet s, int opts,
      ObjCBlock_ffiVoid_objcObjCObject_ffiUnsignedLong_bool block) {
    _objc_msgSend_138(
        this.pointer,
        _sel_enumerateObjectsAtIndexes_options_usingBlock_,
        s.pointer,
        opts,
        block.pointer);
  }

  int indexOfObjectPassingTest_(
      ObjCBlock_bool_objcObjCObject_ffiUnsignedLong_bool predicate) {
    return _objc_msgSend_139(
        this.pointer, _sel_indexOfObjectPassingTest_, predicate.pointer);
  }

  int indexOfObjectWithOptions_passingTest_(
      int opts, ObjCBlock_bool_objcObjCObject_ffiUnsignedLong_bool predicate) {
    return _objc_msgSend_140(this.pointer,
        _sel_indexOfObjectWithOptions_passingTest_, opts, predicate.pointer);
  }

  int indexOfObjectAtIndexes_options_passingTest_(NSIndexSet s, int opts,
      ObjCBlock_bool_objcObjCObject_ffiUnsignedLong_bool predicate) {
    return _objc_msgSend_141(
        this.pointer,
        _sel_indexOfObjectAtIndexes_options_passingTest_,
        s.pointer,
        opts,
        predicate.pointer);
  }

  NSIndexSet indexesOfObjectsPassingTest_(
      ObjCBlock_bool_objcObjCObject_ffiUnsignedLong_bool predicate) {
    final _ret = _objc_msgSend_142(
        this.pointer, _sel_indexesOfObjectsPassingTest_, predicate.pointer);
    return NSIndexSet.castFromPointer(_ret, retain: true, release: true);
  }

  NSIndexSet indexesOfObjectsWithOptions_passingTest_(
      int opts, ObjCBlock_bool_objcObjCObject_ffiUnsignedLong_bool predicate) {
    final _ret = _objc_msgSend_143(this.pointer,
        _sel_indexesOfObjectsWithOptions_passingTest_, opts, predicate.pointer);
    return NSIndexSet.castFromPointer(_ret, retain: true, release: true);
  }

  NSIndexSet indexesOfObjectsAtIndexes_options_passingTest_(NSIndexSet s,
      int opts, ObjCBlock_bool_objcObjCObject_ffiUnsignedLong_bool predicate) {
    final _ret = _objc_msgSend_144(
        this.pointer,
        _sel_indexesOfObjectsAtIndexes_options_passingTest_,
        s.pointer,
        opts,
        predicate.pointer);
    return NSIndexSet.castFromPointer(_ret, retain: true, release: true);
  }

  NSArray sortedArrayUsingComparator_(
      ObjCBlock_NSComparisonResult_objcObjCObject_objcObjCObject cmptr) {
    final _ret = _objc_msgSend_145(
        this.pointer, _sel_sortedArrayUsingComparator_, cmptr.pointer);
    return NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  NSArray sortedArrayWithOptions_usingComparator_(int opts,
      ObjCBlock_NSComparisonResult_objcObjCObject_objcObjCObject cmptr) {
    final _ret = _objc_msgSend_146(this.pointer,
        _sel_sortedArrayWithOptions_usingComparator_, opts, cmptr.pointer);
    return NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  int indexOfObject_inSortedRange_options_usingComparator_(
      objc.ObjCObjectBase obj,
      _NSRange r,
      int opts,
      ObjCBlock_NSComparisonResult_objcObjCObject_objcObjCObject cmp) {
    return _objc_msgSend_147(
        this.pointer,
        _sel_indexOfObject_inSortedRange_options_usingComparator_,
        obj.pointer,
        r,
        opts,
        cmp.pointer);
  }

  static NSArray array() {
    final _ret = _objc_msgSend_2(_class_NSArray, _sel_array);
    return NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  static NSArray arrayWithObject_(objc.ObjCObjectBase anObject) {
    final _ret = _objc_msgSend_148(
        _class_NSArray, _sel_arrayWithObject_, anObject.pointer);
    return NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  static NSArray arrayWithObjects_count_(
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> objects, int cnt) {
    final _ret = _objc_msgSend_98(
        _class_NSArray, _sel_arrayWithObjects_count_, objects, cnt);
    return NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  static NSArray arrayWithObjects_(objc.ObjCObjectBase firstObj) {
    final _ret = _objc_msgSend_148(
        _class_NSArray, _sel_arrayWithObjects_, firstObj.pointer);
    return NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  static NSArray arrayWithArray_(NSArray array) {
    final _ret =
        _objc_msgSend_149(_class_NSArray, _sel_arrayWithArray_, array.pointer);
    return NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  NSArray initWithObjects_(objc.ObjCObjectBase firstObj) {
    final _ret = _objc_msgSend_148(
        this.pointer, _sel_initWithObjects_, firstObj.pointer);
    return NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  NSArray initWithArray_(NSArray array) {
    final _ret =
        _objc_msgSend_149(this.pointer, _sel_initWithArray_, array.pointer);
    return NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  NSArray initWithArray_copyItems_(NSArray array, bool flag) {
    final _ret = _objc_msgSend_150(
        this.pointer, _sel_initWithArray_copyItems_, array.pointer, flag);
    return NSArray.castFromPointer(_ret, retain: false, release: true);
  }

  NSArray? initWithContentsOfURL_error_(
      NSURL url, ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    final _ret = _objc_msgSend_151(
        this.pointer, _sel_initWithContentsOfURL_error_, url.pointer, error);
    return _ret.address == 0
        ? null
        : NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  static NSArray? arrayWithContentsOfURL_error_(
      NSURL url, ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    final _ret = _objc_msgSend_151(
        _class_NSArray, _sel_arrayWithContentsOfURL_error_, url.pointer, error);
    return _ret.address == 0
        ? null
        : NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  objc.ObjCObjectBase differenceFromArray_withOptions_usingEquivalenceTest_(
      NSArray other,
      int options,
      ObjCBlock_bool_objcObjCObject_objcObjCObject block) {
    final _ret = _objc_msgSend_152(
        this.pointer,
        _sel_differenceFromArray_withOptions_usingEquivalenceTest_,
        other.pointer,
        options,
        block.pointer);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  objc.ObjCObjectBase differenceFromArray_withOptions_(
      NSArray other, int options) {
    final _ret = _objc_msgSend_153(this.pointer,
        _sel_differenceFromArray_withOptions_, other.pointer, options);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  objc.ObjCObjectBase differenceFromArray_(NSArray other) {
    final _ret = _objc_msgSend_149(
        this.pointer, _sel_differenceFromArray_, other.pointer);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  NSArray? arrayByApplyingDifference_(objc.ObjCObjectBase difference) {
    final _ret = _objc_msgSend_154(
        this.pointer, _sel_arrayByApplyingDifference_, difference.pointer);
    return _ret.address == 0
        ? null
        : NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  void getObjects_(ffi.Pointer<ffi.Pointer<objc.ObjCObject>> objects) {
    _objc_msgSend_155(this.pointer, _sel_getObjects_, objects);
  }

  static NSArray? arrayWithContentsOfFile_(NSString path) {
    final _ret = _objc_msgSend_156(
        _class_NSArray, _sel_arrayWithContentsOfFile_, path.pointer);
    return _ret.address == 0
        ? null
        : NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  static NSArray? arrayWithContentsOfURL_(NSURL url) {
    final _ret = _objc_msgSend_157(
        _class_NSArray, _sel_arrayWithContentsOfURL_, url.pointer);
    return _ret.address == 0
        ? null
        : NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  NSArray? initWithContentsOfFile_(NSString path) {
    final _ret = _objc_msgSend_156(
        this.pointer, _sel_initWithContentsOfFile_, path.pointer);
    return _ret.address == 0
        ? null
        : NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  NSArray? initWithContentsOfURL_(NSURL url) {
    final _ret = _objc_msgSend_157(
        this.pointer, _sel_initWithContentsOfURL_, url.pointer);
    return _ret.address == 0
        ? null
        : NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  bool writeToFile_atomically_(NSString path, bool useAuxiliaryFile) {
    return _objc_msgSend_37(this.pointer, _sel_writeToFile_atomically_,
        path.pointer, useAuxiliaryFile);
  }

  bool writeToURL_atomically_(NSURL url, bool atomically) {
    return _objc_msgSend_158(
        this.pointer, _sel_writeToURL_atomically_, url.pointer, atomically);
  }

  static NSArray new1() {
    final _ret = _objc_msgSend_2(_class_NSArray, _sel_new);
    return NSArray.castFromPointer(_ret, retain: false, release: true);
  }

  static NSArray allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_3(_class_NSArray, _sel_allocWithZone_, zone);
    return NSArray.castFromPointer(_ret, retain: false, release: true);
  }

  static NSArray alloc() {
    final _ret = _objc_msgSend_2(_class_NSArray, _sel_alloc);
    return NSArray.castFromPointer(_ret, retain: false, release: true);
  }
}

late final _class_NSArray = objc.getClass("NSArray");
late final _sel_count = objc.registerName("count");
late final _sel_objectAtIndex_ = objc.registerName("objectAtIndex:");
final _objc_msgSend_97 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedLong)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_initWithObjects_count_ =
    objc.registerName("initWithObjects:count:");
final _objc_msgSend_98 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
                ffi.UnsignedLong)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
            int)>();
late final _sel_arrayByAddingObject_ =
    objc.registerName("arrayByAddingObject:");
final _objc_msgSend_99 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_arrayByAddingObjectsFromArray_ =
    objc.registerName("arrayByAddingObjectsFromArray:");
final _objc_msgSend_100 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_componentsJoinedByString_ =
    objc.registerName("componentsJoinedByString:");
final _objc_msgSend_101 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_containsObject_ = objc.registerName("containsObject:");
late final _sel_descriptionWithLocale_indent_ =
    objc.registerName("descriptionWithLocale:indent:");
final _objc_msgSend_102 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.UnsignedLong)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int)>();
late final _sel_firstObjectCommonWithArray_ =
    objc.registerName("firstObjectCommonWithArray:");
final _objc_msgSend_103 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_getObjects_range_ = objc.registerName("getObjects:range:");
final _objc_msgSend_104 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
                _NSRange)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
            _NSRange)>();
late final _sel_indexOfObject_ = objc.registerName("indexOfObject:");
final _objc_msgSend_105 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        int Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_indexOfObject_inRange_ =
    objc.registerName("indexOfObject:inRange:");
final _objc_msgSend_106 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                _NSRange)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            _NSRange)>();
late final _sel_indexOfObjectIdenticalTo_ =
    objc.registerName("indexOfObjectIdenticalTo:");
late final _sel_indexOfObjectIdenticalTo_inRange_ =
    objc.registerName("indexOfObjectIdenticalTo:inRange:");
late final _sel_isEqualToArray_ = objc.registerName("isEqualToArray:");
final _objc_msgSend_107 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        bool Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_firstObject = objc.registerName("firstObject");
late final _sel_lastObject = objc.registerName("lastObject");

class NSEnumerator extends NSObject {
  NSEnumerator._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSEnumerator] that points to the same underlying object as [other].
  NSEnumerator.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSEnumerator] that wraps the given raw object pointer.
  NSEnumerator.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSEnumerator].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSEnumerator);
  }

  objc.ObjCObjectBase? nextObject() {
    final _ret = _objc_msgSend_88(this.pointer, _sel_nextObject);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  objc.ObjCObjectBase get allObjects {
    final _ret = _objc_msgSend_2(this.pointer, _sel_allObjects);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  @override
  NSEnumerator init() {
    final _ret = _objc_msgSend_2(this.pointer, _sel_init);
    return NSEnumerator.castFromPointer(_ret, retain: true, release: true);
  }

  static NSEnumerator new1() {
    final _ret = _objc_msgSend_2(_class_NSEnumerator, _sel_new);
    return NSEnumerator.castFromPointer(_ret, retain: false, release: true);
  }

  static NSEnumerator allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_3(_class_NSEnumerator, _sel_allocWithZone_, zone);
    return NSEnumerator.castFromPointer(_ret, retain: false, release: true);
  }

  static NSEnumerator alloc() {
    final _ret = _objc_msgSend_2(_class_NSEnumerator, _sel_alloc);
    return NSEnumerator.castFromPointer(_ret, retain: false, release: true);
  }
}

late final _class_NSEnumerator = objc.getClass("NSEnumerator");
late final _sel_nextObject = objc.registerName("nextObject");
late final _sel_allObjects = objc.registerName("allObjects");
late final _sel_objectEnumerator = objc.registerName("objectEnumerator");
final _objc_msgSend_108 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_reverseObjectEnumerator =
    objc.registerName("reverseObjectEnumerator");
late final _sel_sortedArrayHint = objc.registerName("sortedArrayHint");
late final _sel_sortedArrayUsingFunction_context_ =
    objc.registerName("sortedArrayUsingFunction:context:");
final _objc_msgSend_109 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<
                    ffi.NativeFunction<
                        ffi.Long Function(
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<ffi.Void>)>>,
                ffi.Pointer<ffi.Void>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Long Function(ffi.Pointer<objc.ObjCObject>,
                        ffi.Pointer<objc.ObjCObject>, ffi.Pointer<ffi.Void>)>>,
            ffi.Pointer<ffi.Void>)>();
late final _sel_sortedArrayUsingFunction_context_hint_ =
    objc.registerName("sortedArrayUsingFunction:context:hint:");
final _objc_msgSend_110 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<
                    ffi.NativeFunction<
                        ffi.Long Function(
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<ffi.Void>)>>,
                ffi.Pointer<ffi.Void>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Long Function(ffi.Pointer<objc.ObjCObject>,
                        ffi.Pointer<objc.ObjCObject>, ffi.Pointer<ffi.Void>)>>,
            ffi.Pointer<ffi.Void>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_sortedArrayUsingSelector_ =
    objc.registerName("sortedArrayUsingSelector:");
final _objc_msgSend_111 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_subarrayWithRange_ = objc.registerName("subarrayWithRange:");
final _objc_msgSend_112 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, _NSRange)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, _NSRange)>();
late final _sel_writeToURL_error_ = objc.registerName("writeToURL:error:");
final _objc_msgSend_113 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_makeObjectsPerformSelector_ =
    objc.registerName("makeObjectsPerformSelector:");
late final _sel_makeObjectsPerformSelector_withObject_ =
    objc.registerName("makeObjectsPerformSelector:withObject:");
final _objc_msgSend_114 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>)>();

class NSIndexSet extends NSObject {
  NSIndexSet._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSIndexSet] that points to the same underlying object as [other].
  NSIndexSet.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSIndexSet] that wraps the given raw object pointer.
  NSIndexSet.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSIndexSet].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(obj.pointer, _sel_isKindOfClass_, _class_NSIndexSet);
  }

  static NSIndexSet indexSet() {
    final _ret = _objc_msgSend_2(_class_NSIndexSet, _sel_indexSet);
    return NSIndexSet.castFromPointer(_ret, retain: true, release: true);
  }

  static NSIndexSet indexSetWithIndex_(int value) {
    final _ret =
        _objc_msgSend_97(_class_NSIndexSet, _sel_indexSetWithIndex_, value);
    return NSIndexSet.castFromPointer(_ret, retain: true, release: true);
  }

  static NSIndexSet indexSetWithIndexesInRange_(_NSRange range) {
    final _ret = _objc_msgSend_115(
        _class_NSIndexSet, _sel_indexSetWithIndexesInRange_, range);
    return NSIndexSet.castFromPointer(_ret, retain: true, release: true);
  }

  NSIndexSet initWithIndexesInRange_(_NSRange range) {
    final _ret =
        _objc_msgSend_115(this.pointer, _sel_initWithIndexesInRange_, range);
    return NSIndexSet.castFromPointer(_ret, retain: true, release: true);
  }

  NSIndexSet initWithIndexSet_(NSIndexSet indexSet) {
    final _ret = _objc_msgSend_116(
        this.pointer, _sel_initWithIndexSet_, indexSet.pointer);
    return NSIndexSet.castFromPointer(_ret, retain: true, release: true);
  }

  NSIndexSet initWithIndex_(int value) {
    final _ret = _objc_msgSend_97(this.pointer, _sel_initWithIndex_, value);
    return NSIndexSet.castFromPointer(_ret, retain: true, release: true);
  }

  bool isEqualToIndexSet_(NSIndexSet indexSet) {
    return _objc_msgSend_117(
        this.pointer, _sel_isEqualToIndexSet_, indexSet.pointer);
  }

  int get count {
    return _objc_msgSend_12(this.pointer, _sel_count);
  }

  int get firstIndex {
    return _objc_msgSend_12(this.pointer, _sel_firstIndex);
  }

  int get lastIndex {
    return _objc_msgSend_12(this.pointer, _sel_lastIndex);
  }

  int indexGreaterThanIndex_(int value) {
    return _objc_msgSend_118(this.pointer, _sel_indexGreaterThanIndex_, value);
  }

  int indexLessThanIndex_(int value) {
    return _objc_msgSend_118(this.pointer, _sel_indexLessThanIndex_, value);
  }

  int indexGreaterThanOrEqualToIndex_(int value) {
    return _objc_msgSend_118(
        this.pointer, _sel_indexGreaterThanOrEqualToIndex_, value);
  }

  int indexLessThanOrEqualToIndex_(int value) {
    return _objc_msgSend_118(
        this.pointer, _sel_indexLessThanOrEqualToIndex_, value);
  }

  int getIndexes_maxCount_inIndexRange_(
      ffi.Pointer<ffi.UnsignedLong> indexBuffer,
      int bufferSize,
      ffi.Pointer<_NSRange> range) {
    return _objc_msgSend_119(this.pointer,
        _sel_getIndexes_maxCount_inIndexRange_, indexBuffer, bufferSize, range);
  }

  int countOfIndexesInRange_(_NSRange range) {
    return _objc_msgSend_120(this.pointer, _sel_countOfIndexesInRange_, range);
  }

  bool containsIndex_(int value) {
    return _objc_msgSend_121(this.pointer, _sel_containsIndex_, value);
  }

  bool containsIndexesInRange_(_NSRange range) {
    return _objc_msgSend_122(this.pointer, _sel_containsIndexesInRange_, range);
  }

  bool containsIndexes_(NSIndexSet indexSet) {
    return _objc_msgSend_117(
        this.pointer, _sel_containsIndexes_, indexSet.pointer);
  }

  bool intersectsIndexesInRange_(_NSRange range) {
    return _objc_msgSend_122(
        this.pointer, _sel_intersectsIndexesInRange_, range);
  }

  void enumerateIndexesUsingBlock_(
      ObjCBlock_ffiVoid_ffiUnsignedLong_bool block) {
    _objc_msgSend_123(
        this.pointer, _sel_enumerateIndexesUsingBlock_, block.pointer);
  }

  void enumerateIndexesWithOptions_usingBlock_(
      int opts, ObjCBlock_ffiVoid_ffiUnsignedLong_bool block) {
    _objc_msgSend_124(this.pointer,
        _sel_enumerateIndexesWithOptions_usingBlock_, opts, block.pointer);
  }

  void enumerateIndexesInRange_options_usingBlock_(
      _NSRange range, int opts, ObjCBlock_ffiVoid_ffiUnsignedLong_bool block) {
    _objc_msgSend_125(
        this.pointer,
        _sel_enumerateIndexesInRange_options_usingBlock_,
        range,
        opts,
        block.pointer);
  }

  int indexPassingTest_(ObjCBlock_bool_ffiUnsignedLong_bool predicate) {
    return _objc_msgSend_126(
        this.pointer, _sel_indexPassingTest_, predicate.pointer);
  }

  int indexWithOptions_passingTest_(
      int opts, ObjCBlock_bool_ffiUnsignedLong_bool predicate) {
    return _objc_msgSend_127(this.pointer, _sel_indexWithOptions_passingTest_,
        opts, predicate.pointer);
  }

  int indexInRange_options_passingTest_(
      _NSRange range, int opts, ObjCBlock_bool_ffiUnsignedLong_bool predicate) {
    return _objc_msgSend_128(this.pointer,
        _sel_indexInRange_options_passingTest_, range, opts, predicate.pointer);
  }

  NSIndexSet indexesPassingTest_(
      ObjCBlock_bool_ffiUnsignedLong_bool predicate) {
    final _ret = _objc_msgSend_129(
        this.pointer, _sel_indexesPassingTest_, predicate.pointer);
    return NSIndexSet.castFromPointer(_ret, retain: true, release: true);
  }

  NSIndexSet indexesWithOptions_passingTest_(
      int opts, ObjCBlock_bool_ffiUnsignedLong_bool predicate) {
    final _ret = _objc_msgSend_130(this.pointer,
        _sel_indexesWithOptions_passingTest_, opts, predicate.pointer);
    return NSIndexSet.castFromPointer(_ret, retain: true, release: true);
  }

  NSIndexSet indexesInRange_options_passingTest_(
      _NSRange range, int opts, ObjCBlock_bool_ffiUnsignedLong_bool predicate) {
    final _ret = _objc_msgSend_131(
        this.pointer,
        _sel_indexesInRange_options_passingTest_,
        range,
        opts,
        predicate.pointer);
    return NSIndexSet.castFromPointer(_ret, retain: true, release: true);
  }

  void enumerateRangesUsingBlock_(ObjCBlock_ffiVoid_NSRange_bool block) {
    _objc_msgSend_132(
        this.pointer, _sel_enumerateRangesUsingBlock_, block.pointer);
  }

  void enumerateRangesWithOptions_usingBlock_(
      int opts, ObjCBlock_ffiVoid_NSRange_bool block) {
    _objc_msgSend_133(this.pointer, _sel_enumerateRangesWithOptions_usingBlock_,
        opts, block.pointer);
  }

  void enumerateRangesInRange_options_usingBlock_(
      _NSRange range, int opts, ObjCBlock_ffiVoid_NSRange_bool block) {
    _objc_msgSend_134(
        this.pointer,
        _sel_enumerateRangesInRange_options_usingBlock_,
        range,
        opts,
        block.pointer);
  }

  @override
  NSIndexSet init() {
    final _ret = _objc_msgSend_2(this.pointer, _sel_init);
    return NSIndexSet.castFromPointer(_ret, retain: true, release: true);
  }

  static NSIndexSet new1() {
    final _ret = _objc_msgSend_2(_class_NSIndexSet, _sel_new);
    return NSIndexSet.castFromPointer(_ret, retain: false, release: true);
  }

  static NSIndexSet allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_3(_class_NSIndexSet, _sel_allocWithZone_, zone);
    return NSIndexSet.castFromPointer(_ret, retain: false, release: true);
  }

  static NSIndexSet alloc() {
    final _ret = _objc_msgSend_2(_class_NSIndexSet, _sel_alloc);
    return NSIndexSet.castFromPointer(_ret, retain: false, release: true);
  }
}

late final _class_NSIndexSet = objc.getClass("NSIndexSet");
late final _sel_indexSet = objc.registerName("indexSet");
late final _sel_indexSetWithIndex_ = objc.registerName("indexSetWithIndex:");
late final _sel_indexSetWithIndexesInRange_ =
    objc.registerName("indexSetWithIndexesInRange:");
final _objc_msgSend_115 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, _NSRange)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, _NSRange)>();
late final _sel_initWithIndexesInRange_ =
    objc.registerName("initWithIndexesInRange:");
late final _sel_initWithIndexSet_ = objc.registerName("initWithIndexSet:");
final _objc_msgSend_116 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_initWithIndex_ = objc.registerName("initWithIndex:");
late final _sel_isEqualToIndexSet_ = objc.registerName("isEqualToIndexSet:");
final _objc_msgSend_117 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        bool Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_firstIndex = objc.registerName("firstIndex");
late final _sel_lastIndex = objc.registerName("lastIndex");
late final _sel_indexGreaterThanIndex_ =
    objc.registerName("indexGreaterThanIndex:");
final _objc_msgSend_118 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedLong)>>()
    .asFunction<
        int Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_indexLessThanIndex_ = objc.registerName("indexLessThanIndex:");
late final _sel_indexGreaterThanOrEqualToIndex_ =
    objc.registerName("indexGreaterThanOrEqualToIndex:");
late final _sel_indexLessThanOrEqualToIndex_ =
    objc.registerName("indexLessThanOrEqualToIndex:");
late final _sel_getIndexes_maxCount_inIndexRange_ =
    objc.registerName("getIndexes:maxCount:inIndexRange:");
final _objc_msgSend_119 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<ffi.UnsignedLong>,
                ffi.UnsignedLong,
                ffi.Pointer<_NSRange>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<ffi.UnsignedLong>,
            int,
            ffi.Pointer<_NSRange>)>();
late final _sel_countOfIndexesInRange_ =
    objc.registerName("countOfIndexesInRange:");
final _objc_msgSend_120 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, _NSRange)>>()
    .asFunction<
        int Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, _NSRange)>();
late final _sel_containsIndex_ = objc.registerName("containsIndex:");
final _objc_msgSend_121 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedLong)>>()
    .asFunction<
        bool Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_containsIndexesInRange_ =
    objc.registerName("containsIndexesInRange:");
final _objc_msgSend_122 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, _NSRange)>>()
    .asFunction<
        bool Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, _NSRange)>();
late final _sel_containsIndexes_ = objc.registerName("containsIndexes:");
late final _sel_intersectsIndexesInRange_ =
    objc.registerName("intersectsIndexesInRange:");
void _ObjCBlock_ffiVoid_ffiUnsignedLong_bool_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlock> block,
        int arg0,
        ffi.Pointer<ffi.Bool> arg1) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(
                    ffi.UnsignedLong arg0, ffi.Pointer<ffi.Bool> arg1)>>()
        .asFunction<void Function(int, ffi.Pointer<ffi.Bool>)>()(arg0, arg1);
void _ObjCBlock_ffiVoid_ffiUnsignedLong_bool_closureTrampoline(
        ffi.Pointer<objc.ObjCBlock> block,
        int arg0,
        ffi.Pointer<ffi.Bool> arg1) =>
    (objc.getBlockClosure(block) as void Function(int, ffi.Pointer<ffi.Bool>))(
        arg0, arg1);

class ObjCBlock_ffiVoid_ffiUnsignedLong_bool extends objc.ObjCBlockBase {
  ObjCBlock_ffiVoid_ffiUnsignedLong_bool._(ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false, bool release = true})
      : super(pointer, retain: retain, release: release);

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_ffiVoid_ffiUnsignedLong_bool castFromPointer(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = false}) {
    return ObjCBlock_ffiVoid_ffiUnsignedLong_bool._(pointer,
        retain: retain, release: release);
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_ffiUnsignedLong_bool.fromFunctionPointer(
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.UnsignedLong arg0, ffi.Pointer<ffi.Bool> arg1)>>
          ptr)
      : this._(objc.newPointerBlock(
            _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(ffi.Pointer<objc.ObjCBlock>,
                            ffi.UnsignedLong, ffi.Pointer<ffi.Bool>)>(
                    _ObjCBlock_ffiVoid_ffiUnsignedLong_bool_fnPtrTrampoline)
                .cast(),
            ptr.cast()));
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_ffiUnsignedLong_bool.fromFunction(
      void Function(int, ffi.Pointer<ffi.Bool>) fn)
      : this._(objc.newClosureBlock(
            _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(ffi.Pointer<objc.ObjCBlock>,
                            ffi.UnsignedLong, ffi.Pointer<ffi.Bool>)>(
                    _ObjCBlock_ffiVoid_ffiUnsignedLong_bool_closureTrampoline)
                .cast(),
            (int arg0, ffi.Pointer<ffi.Bool> arg1) => fn(arg0, arg1)));
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_ffiUnsignedLong_bool.listener(
      void Function(int, ffi.Pointer<ffi.Bool>) fn)
      : this._(objc.newClosureBlock(
            (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                        ffi.Void Function(ffi.Pointer<objc.ObjCBlock>,
                            ffi.UnsignedLong, ffi.Pointer<ffi.Bool>)>.listener(
                    _ObjCBlock_ffiVoid_ffiUnsignedLong_bool_closureTrampoline)
                  ..keepIsolateAlive = false)
                .nativeFunction
                .cast(),
            (int arg0, ffi.Pointer<ffi.Bool> arg1) => fn(arg0, arg1)));
  static ffi.NativeCallable<
      ffi.Void Function(ffi.Pointer<objc.ObjCBlock>, ffi.UnsignedLong,
          ffi.Pointer<ffi.Bool>)>? _dartFuncListenerTrampoline;

  void call(int arg0, ffi.Pointer<ffi.Bool> arg1) => pointer.ref.invoke
      .cast<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<objc.ObjCBlock> block,
                  ffi.UnsignedLong arg0, ffi.Pointer<ffi.Bool> arg1)>>()
      .asFunction<
          void Function(ffi.Pointer<objc.ObjCBlock>, int,
              ffi.Pointer<ffi.Bool>)>()(pointer, arg0, arg1);
}

late final _sel_enumerateIndexesUsingBlock_ =
    objc.registerName("enumerateIndexesUsingBlock:");
final _objc_msgSend_123 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCBlock>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCBlock>)>();

abstract class NSEnumerationOptions {
  static const int NSEnumerationConcurrent = 1;
  static const int NSEnumerationReverse = 2;
}

late final _sel_enumerateIndexesWithOptions_usingBlock_ =
    objc.registerName("enumerateIndexesWithOptions:usingBlock:");
final _objc_msgSend_124 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Int32,
                ffi.Pointer<objc.ObjCBlock>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int,
            ffi.Pointer<objc.ObjCBlock>)>();
late final _sel_enumerateIndexesInRange_options_usingBlock_ =
    objc.registerName("enumerateIndexesInRange:options:usingBlock:");
final _objc_msgSend_125 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                _NSRange,
                ffi.Int32,
                ffi.Pointer<objc.ObjCBlock>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            _NSRange,
            int,
            ffi.Pointer<objc.ObjCBlock>)>();
bool _ObjCBlock_bool_ffiUnsignedLong_bool_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlock> block,
        int arg0,
        ffi.Pointer<ffi.Bool> arg1) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Bool Function(
                    ffi.UnsignedLong arg0, ffi.Pointer<ffi.Bool> arg1)>>()
        .asFunction<bool Function(int, ffi.Pointer<ffi.Bool>)>()(arg0, arg1);
bool _ObjCBlock_bool_ffiUnsignedLong_bool_closureTrampoline(
        ffi.Pointer<objc.ObjCBlock> block,
        int arg0,
        ffi.Pointer<ffi.Bool> arg1) =>
    (objc.getBlockClosure(block) as bool Function(int, ffi.Pointer<ffi.Bool>))(
        arg0, arg1);

class ObjCBlock_bool_ffiUnsignedLong_bool extends objc.ObjCBlockBase {
  ObjCBlock_bool_ffiUnsignedLong_bool._(ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false, bool release = true})
      : super(pointer, retain: retain, release: release);

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_bool_ffiUnsignedLong_bool castFromPointer(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = false}) {
    return ObjCBlock_bool_ffiUnsignedLong_bool._(pointer,
        retain: retain, release: release);
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_bool_ffiUnsignedLong_bool.fromFunctionPointer(
      ffi.Pointer<
              ffi
              .NativeFunction<
                  ffi.Bool Function(
                      ffi.UnsignedLong arg0, ffi.Pointer<ffi.Bool> arg1)>>
          ptr)
      : this._(objc.newPointerBlock(
            _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Bool Function(ffi.Pointer<objc.ObjCBlock>,
                            ffi.UnsignedLong, ffi.Pointer<ffi.Bool>)>(
                    _ObjCBlock_bool_ffiUnsignedLong_bool_fnPtrTrampoline, false)
                .cast(),
            ptr.cast()));
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_bool_ffiUnsignedLong_bool.fromFunction(
      bool Function(int, ffi.Pointer<ffi.Bool>) fn)
      : this._(objc.newClosureBlock(
            _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Bool Function(ffi.Pointer<objc.ObjCBlock>,
                            ffi.UnsignedLong, ffi.Pointer<ffi.Bool>)>(
                    _ObjCBlock_bool_ffiUnsignedLong_bool_closureTrampoline,
                    false)
                .cast(),
            (int arg0, ffi.Pointer<ffi.Bool> arg1) => fn(arg0, arg1)));
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  bool call(int arg0, ffi.Pointer<ffi.Bool> arg1) => pointer.ref.invoke
      .cast<
          ffi.NativeFunction<
              ffi.Bool Function(ffi.Pointer<objc.ObjCBlock> block,
                  ffi.UnsignedLong arg0, ffi.Pointer<ffi.Bool> arg1)>>()
      .asFunction<
          bool Function(ffi.Pointer<objc.ObjCBlock>, int,
              ffi.Pointer<ffi.Bool>)>()(pointer, arg0, arg1);
}

late final _sel_indexPassingTest_ = objc.registerName("indexPassingTest:");
final _objc_msgSend_126 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCBlock>)>>()
    .asFunction<
        int Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCBlock>)>();
late final _sel_indexWithOptions_passingTest_ =
    objc.registerName("indexWithOptions:passingTest:");
final _objc_msgSend_127 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Int32,
                ffi.Pointer<objc.ObjCBlock>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int,
            ffi.Pointer<objc.ObjCBlock>)>();
late final _sel_indexInRange_options_passingTest_ =
    objc.registerName("indexInRange:options:passingTest:");
final _objc_msgSend_128 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                _NSRange,
                ffi.Int32,
                ffi.Pointer<objc.ObjCBlock>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            _NSRange,
            int,
            ffi.Pointer<objc.ObjCBlock>)>();
late final _sel_indexesPassingTest_ = objc.registerName("indexesPassingTest:");
final _objc_msgSend_129 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCBlock>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCBlock>)>();
late final _sel_indexesWithOptions_passingTest_ =
    objc.registerName("indexesWithOptions:passingTest:");
final _objc_msgSend_130 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Int32,
                ffi.Pointer<objc.ObjCBlock>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int,
            ffi.Pointer<objc.ObjCBlock>)>();
late final _sel_indexesInRange_options_passingTest_ =
    objc.registerName("indexesInRange:options:passingTest:");
final _objc_msgSend_131 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                _NSRange,
                ffi.Int32,
                ffi.Pointer<objc.ObjCBlock>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            _NSRange,
            int,
            ffi.Pointer<objc.ObjCBlock>)>();
void _ObjCBlock_ffiVoid_NSRange_bool_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlock> block,
        _NSRange arg0,
        ffi.Pointer<ffi.Bool> arg1) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(_NSRange arg0, ffi.Pointer<ffi.Bool> arg1)>>()
        .asFunction<
            void Function(_NSRange, ffi.Pointer<ffi.Bool>)>()(arg0, arg1);
void _ObjCBlock_ffiVoid_NSRange_bool_closureTrampoline(
        ffi.Pointer<objc.ObjCBlock> block,
        _NSRange arg0,
        ffi.Pointer<ffi.Bool> arg1) =>
    (objc.getBlockClosure(block) as void Function(
        _NSRange, ffi.Pointer<ffi.Bool>))(arg0, arg1);

class ObjCBlock_ffiVoid_NSRange_bool extends objc.ObjCBlockBase {
  ObjCBlock_ffiVoid_NSRange_bool._(ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false, bool release = true})
      : super(pointer, retain: retain, release: release);

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_ffiVoid_NSRange_bool castFromPointer(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = false}) {
    return ObjCBlock_ffiVoid_NSRange_bool._(pointer,
        retain: retain, release: release);
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSRange_bool.fromFunctionPointer(
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(_NSRange arg0, ffi.Pointer<ffi.Bool> arg1)>>
          ptr)
      : this._(objc.newPointerBlock(
            _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(ffi.Pointer<objc.ObjCBlock>, _NSRange,
                            ffi.Pointer<ffi.Bool>)>(
                    _ObjCBlock_ffiVoid_NSRange_bool_fnPtrTrampoline)
                .cast(),
            ptr.cast()));
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSRange_bool.fromFunction(
      void Function(_NSRange, ffi.Pointer<ffi.Bool>) fn)
      : this._(objc.newClosureBlock(
            _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(ffi.Pointer<objc.ObjCBlock>, _NSRange,
                            ffi.Pointer<ffi.Bool>)>(
                    _ObjCBlock_ffiVoid_NSRange_bool_closureTrampoline)
                .cast(),
            (_NSRange arg0, ffi.Pointer<ffi.Bool> arg1) => fn(arg0, arg1)));
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_NSRange_bool.listener(
      void Function(_NSRange, ffi.Pointer<ffi.Bool>) fn)
      : this._(objc.newClosureBlock(
            (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                        ffi.Void Function(ffi.Pointer<objc.ObjCBlock>, _NSRange,
                            ffi.Pointer<ffi.Bool>)>.listener(
                    _ObjCBlock_ffiVoid_NSRange_bool_closureTrampoline)
                  ..keepIsolateAlive = false)
                .nativeFunction
                .cast(),
            (_NSRange arg0, ffi.Pointer<ffi.Bool> arg1) => fn(arg0, arg1)));
  static ffi.NativeCallable<
          ffi.Void Function(
              ffi.Pointer<objc.ObjCBlock>, _NSRange, ffi.Pointer<ffi.Bool>)>?
      _dartFuncListenerTrampoline;

  void call(_NSRange arg0, ffi.Pointer<ffi.Bool> arg1) => pointer.ref.invoke
      .cast<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<objc.ObjCBlock> block,
                  _NSRange arg0, ffi.Pointer<ffi.Bool> arg1)>>()
      .asFunction<
          void Function(ffi.Pointer<objc.ObjCBlock>, _NSRange,
              ffi.Pointer<ffi.Bool>)>()(pointer, arg0, arg1);
}

late final _sel_enumerateRangesUsingBlock_ =
    objc.registerName("enumerateRangesUsingBlock:");
final _objc_msgSend_132 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCBlock>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCBlock>)>();
late final _sel_enumerateRangesWithOptions_usingBlock_ =
    objc.registerName("enumerateRangesWithOptions:usingBlock:");
final _objc_msgSend_133 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Int32,
                ffi.Pointer<objc.ObjCBlock>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int,
            ffi.Pointer<objc.ObjCBlock>)>();
late final _sel_enumerateRangesInRange_options_usingBlock_ =
    objc.registerName("enumerateRangesInRange:options:usingBlock:");
final _objc_msgSend_134 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                _NSRange,
                ffi.Int32,
                ffi.Pointer<objc.ObjCBlock>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            _NSRange,
            int,
            ffi.Pointer<objc.ObjCBlock>)>();
late final _sel_objectsAtIndexes_ = objc.registerName("objectsAtIndexes:");
final _objc_msgSend_135 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_objectAtIndexedSubscript_ =
    objc.registerName("objectAtIndexedSubscript:");
void _ObjCBlock_ffiVoid_objcObjCObject_ffiUnsignedLong_bool_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlock> block,
        ffi.Pointer<objc.ObjCObject> arg0,
        int arg1,
        ffi.Pointer<ffi.Bool> arg2) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0,
                    ffi.UnsignedLong arg1, ffi.Pointer<ffi.Bool> arg2)>>()
        .asFunction<
            void Function(ffi.Pointer<objc.ObjCObject>, int,
                ffi.Pointer<ffi.Bool>)>()(arg0, arg1, arg2);
void _ObjCBlock_ffiVoid_objcObjCObject_ffiUnsignedLong_bool_closureTrampoline(
        ffi.Pointer<objc.ObjCBlock> block,
        ffi.Pointer<objc.ObjCObject> arg0,
        int arg1,
        ffi.Pointer<ffi.Bool> arg2) =>
    (objc.getBlockClosure(block) as void Function(ffi.Pointer<objc.ObjCObject>,
        int, ffi.Pointer<ffi.Bool>))(arg0, arg1, arg2);

class ObjCBlock_ffiVoid_objcObjCObject_ffiUnsignedLong_bool
    extends objc.ObjCBlockBase {
  ObjCBlock_ffiVoid_objcObjCObject_ffiUnsignedLong_bool._(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = true})
      : super(pointer, retain: retain, release: release);

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_ffiVoid_objcObjCObject_ffiUnsignedLong_bool castFromPointer(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = false}) {
    return ObjCBlock_ffiVoid_objcObjCObject_ffiUnsignedLong_bool._(pointer,
        retain: retain, release: release);
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_objcObjCObject_ffiUnsignedLong_bool.fromFunctionPointer(
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0,
                      ffi.UnsignedLong arg1, ffi.Pointer<ffi.Bool> arg2)>>
          ptr)
      : this._(objc.newPointerBlock(
            _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.UnsignedLong,
                            ffi.Pointer<ffi.Bool>)>(
                    _ObjCBlock_ffiVoid_objcObjCObject_ffiUnsignedLong_bool_fnPtrTrampoline)
                .cast(),
            ptr.cast()));
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_objcObjCObject_ffiUnsignedLong_bool.fromFunction(
      void Function(objc.ObjCObjectBase, int, ffi.Pointer<ffi.Bool>) fn)
      : this._(objc.newClosureBlock(
            _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.UnsignedLong,
                            ffi.Pointer<ffi.Bool>)>(
                    _ObjCBlock_ffiVoid_objcObjCObject_ffiUnsignedLong_bool_closureTrampoline)
                .cast(),
            (ffi.Pointer<objc.ObjCObject> arg0, int arg1, ffi.Pointer<ffi.Bool> arg2) =>
                fn(objc.ObjCObjectBase(arg0, retain: true, release: true), arg1,
                    arg2)));
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_objcObjCObject_ffiUnsignedLong_bool.listener(
      void Function(objc.ObjCObjectBase, int, ffi.Pointer<ffi.Bool>) fn)
      : this._(objc.newClosureBlock(
            (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                        ffi.Void Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.UnsignedLong,
                            ffi.Pointer<ffi.Bool>)>.listener(
                    _ObjCBlock_ffiVoid_objcObjCObject_ffiUnsignedLong_bool_closureTrampoline)
                  ..keepIsolateAlive = false)
                .nativeFunction
                .cast(),
            (ffi.Pointer<objc.ObjCObject> arg0, int arg1,
                    ffi.Pointer<ffi.Bool> arg2) =>
                fn(objc.ObjCObjectBase(arg0, retain: true, release: true), arg1,
                    arg2)));
  static ffi.NativeCallable<
      ffi.Void Function(
          ffi.Pointer<objc.ObjCBlock>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.UnsignedLong,
          ffi.Pointer<ffi.Bool>)>? _dartFuncListenerTrampoline;

  void call(objc.ObjCObjectBase arg0, int arg1, ffi.Pointer<ffi.Bool> arg2) =>
      pointer.ref.invoke
          .cast<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<objc.ObjCBlock> block,
                      ffi.Pointer<objc.ObjCObject> arg0,
                      ffi.UnsignedLong arg1,
                      ffi.Pointer<ffi.Bool> arg2)>>()
          .asFunction<
              void Function(
                  ffi.Pointer<objc.ObjCBlock>,
                  ffi.Pointer<objc.ObjCObject>,
                  int,
                  ffi.Pointer<ffi.Bool>)>()(pointer, arg0.pointer, arg1, arg2);
}

late final _sel_enumerateObjectsUsingBlock_ =
    objc.registerName("enumerateObjectsUsingBlock:");
final _objc_msgSend_136 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCBlock>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCBlock>)>();
late final _sel_enumerateObjectsWithOptions_usingBlock_ =
    objc.registerName("enumerateObjectsWithOptions:usingBlock:");
final _objc_msgSend_137 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Int32,
                ffi.Pointer<objc.ObjCBlock>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int,
            ffi.Pointer<objc.ObjCBlock>)>();
late final _sel_enumerateObjectsAtIndexes_options_usingBlock_ =
    objc.registerName("enumerateObjectsAtIndexes:options:usingBlock:");
final _objc_msgSend_138 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Int32,
                ffi.Pointer<objc.ObjCBlock>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            ffi.Pointer<objc.ObjCBlock>)>();
bool _ObjCBlock_bool_objcObjCObject_ffiUnsignedLong_bool_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlock> block,
        ffi.Pointer<objc.ObjCObject> arg0,
        int arg1,
        ffi.Pointer<ffi.Bool> arg2) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Bool Function(ffi.Pointer<objc.ObjCObject> arg0,
                    ffi.UnsignedLong arg1, ffi.Pointer<ffi.Bool> arg2)>>()
        .asFunction<
            bool Function(ffi.Pointer<objc.ObjCObject>, int,
                ffi.Pointer<ffi.Bool>)>()(arg0, arg1, arg2);
bool _ObjCBlock_bool_objcObjCObject_ffiUnsignedLong_bool_closureTrampoline(
        ffi.Pointer<objc.ObjCBlock> block,
        ffi.Pointer<objc.ObjCObject> arg0,
        int arg1,
        ffi.Pointer<ffi.Bool> arg2) =>
    (objc.getBlockClosure(block) as bool Function(ffi.Pointer<objc.ObjCObject>,
        int, ffi.Pointer<ffi.Bool>))(arg0, arg1, arg2);

class ObjCBlock_bool_objcObjCObject_ffiUnsignedLong_bool
    extends objc.ObjCBlockBase {
  ObjCBlock_bool_objcObjCObject_ffiUnsignedLong_bool._(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = true})
      : super(pointer, retain: retain, release: release);

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_bool_objcObjCObject_ffiUnsignedLong_bool castFromPointer(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = false}) {
    return ObjCBlock_bool_objcObjCObject_ffiUnsignedLong_bool._(pointer,
        retain: retain, release: release);
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_bool_objcObjCObject_ffiUnsignedLong_bool.fromFunctionPointer(
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Bool Function(ffi.Pointer<objc.ObjCObject> arg0,
                      ffi.UnsignedLong arg1, ffi.Pointer<ffi.Bool> arg2)>>
          ptr)
      : this._(objc.newPointerBlock(
            _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Bool Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.UnsignedLong,
                            ffi.Pointer<ffi.Bool>)>(
                    _ObjCBlock_bool_objcObjCObject_ffiUnsignedLong_bool_fnPtrTrampoline,
                    false)
                .cast(),
            ptr.cast()));
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_bool_objcObjCObject_ffiUnsignedLong_bool.fromFunction(
      bool Function(objc.ObjCObjectBase, int, ffi.Pointer<ffi.Bool>) fn)
      : this._(objc.newClosureBlock(
            _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Bool Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.UnsignedLong,
                            ffi.Pointer<ffi.Bool>)>(
                    _ObjCBlock_bool_objcObjCObject_ffiUnsignedLong_bool_closureTrampoline,
                    false)
                .cast(),
            (ffi.Pointer<objc.ObjCObject> arg0, int arg1,
                    ffi.Pointer<ffi.Bool> arg2) =>
                fn(objc.ObjCObjectBase(arg0, retain: true, release: true), arg1, arg2)));
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  bool call(objc.ObjCObjectBase arg0, int arg1, ffi.Pointer<ffi.Bool> arg2) =>
      pointer.ref.invoke
          .cast<
              ffi.NativeFunction<
                  ffi.Bool Function(
                      ffi.Pointer<objc.ObjCBlock> block,
                      ffi.Pointer<objc.ObjCObject> arg0,
                      ffi.UnsignedLong arg1,
                      ffi.Pointer<ffi.Bool> arg2)>>()
          .asFunction<
              bool Function(
                  ffi.Pointer<objc.ObjCBlock>,
                  ffi.Pointer<objc.ObjCObject>,
                  int,
                  ffi.Pointer<ffi.Bool>)>()(pointer, arg0.pointer, arg1, arg2);
}

late final _sel_indexOfObjectPassingTest_ =
    objc.registerName("indexOfObjectPassingTest:");
final _objc_msgSend_139 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCBlock>)>>()
    .asFunction<
        int Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCBlock>)>();
late final _sel_indexOfObjectWithOptions_passingTest_ =
    objc.registerName("indexOfObjectWithOptions:passingTest:");
final _objc_msgSend_140 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Int32,
                ffi.Pointer<objc.ObjCBlock>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int,
            ffi.Pointer<objc.ObjCBlock>)>();
late final _sel_indexOfObjectAtIndexes_options_passingTest_ =
    objc.registerName("indexOfObjectAtIndexes:options:passingTest:");
final _objc_msgSend_141 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Int32,
                ffi.Pointer<objc.ObjCBlock>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            ffi.Pointer<objc.ObjCBlock>)>();
late final _sel_indexesOfObjectsPassingTest_ =
    objc.registerName("indexesOfObjectsPassingTest:");
final _objc_msgSend_142 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCBlock>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCBlock>)>();
late final _sel_indexesOfObjectsWithOptions_passingTest_ =
    objc.registerName("indexesOfObjectsWithOptions:passingTest:");
final _objc_msgSend_143 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Int32,
                ffi.Pointer<objc.ObjCBlock>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int,
            ffi.Pointer<objc.ObjCBlock>)>();
late final _sel_indexesOfObjectsAtIndexes_options_passingTest_ =
    objc.registerName("indexesOfObjectsAtIndexes:options:passingTest:");
final _objc_msgSend_144 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Int32,
                ffi.Pointer<objc.ObjCBlock>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            ffi.Pointer<objc.ObjCBlock>)>();
int _ObjCBlock_NSComparisonResult_objcObjCObject_objcObjCObject_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlock> block,
        ffi.Pointer<objc.ObjCObject> arg0,
        ffi.Pointer<objc.ObjCObject> arg1) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Int32 Function(ffi.Pointer<objc.ObjCObject> arg0,
                    ffi.Pointer<objc.ObjCObject> arg1)>>()
        .asFunction<
            int Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>()(arg0, arg1);
int _ObjCBlock_NSComparisonResult_objcObjCObject_objcObjCObject_closureTrampoline(
        ffi.Pointer<objc.ObjCBlock> block,
        ffi.Pointer<objc.ObjCObject> arg0,
        ffi.Pointer<objc.ObjCObject> arg1) =>
    (objc.getBlockClosure(block) as int Function(ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>))(arg0, arg1);

class ObjCBlock_NSComparisonResult_objcObjCObject_objcObjCObject
    extends objc.ObjCBlockBase {
  ObjCBlock_NSComparisonResult_objcObjCObject_objcObjCObject._(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = true})
      : super(pointer, retain: retain, release: release);

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_NSComparisonResult_objcObjCObject_objcObjCObject
      castFromPointer(ffi.Pointer<objc.ObjCBlock> pointer,
          {bool retain = false, bool release = false}) {
    return ObjCBlock_NSComparisonResult_objcObjCObject_objcObjCObject._(pointer,
        retain: retain, release: release);
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_NSComparisonResult_objcObjCObject_objcObjCObject.fromFunctionPointer(
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int32 Function(ffi.Pointer<objc.ObjCObject> arg0,
                      ffi.Pointer<objc.ObjCObject> arg1)>>
          ptr)
      : this._(objc.newPointerBlock(
            _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Int32 Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<objc.ObjCObject>)>(
                    _ObjCBlock_NSComparisonResult_objcObjCObject_objcObjCObject_fnPtrTrampoline,
                    0)
                .cast(),
            ptr.cast()));
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_NSComparisonResult_objcObjCObject_objcObjCObject.fromFunction(
      int Function(objc.ObjCObjectBase, objc.ObjCObjectBase) fn)
      : this._(objc.newClosureBlock(
            _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Int32 Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<objc.ObjCObject>)>(
                    _ObjCBlock_NSComparisonResult_objcObjCObject_objcObjCObject_closureTrampoline, 0)
                .cast(),
            (ffi.Pointer<objc.ObjCObject> arg0, ffi.Pointer<objc.ObjCObject> arg1) => fn(
                objc.ObjCObjectBase(arg0, retain: true, release: true),
                objc.ObjCObjectBase(arg1, retain: true, release: true))));
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  int call(objc.ObjCObjectBase arg0, objc.ObjCObjectBase arg1) => pointer
          .ref.invoke
          .cast<
              ffi.NativeFunction<
                  ffi.Int32 Function(
                      ffi.Pointer<objc.ObjCBlock> block,
                      ffi.Pointer<objc.ObjCObject> arg0,
                      ffi.Pointer<objc.ObjCObject> arg1)>>()
          .asFunction<
              int Function(
                  ffi.Pointer<objc.ObjCBlock>,
                  ffi.Pointer<objc.ObjCObject>,
                  ffi.Pointer<objc.ObjCObject>)>()(
      pointer, arg0.pointer, arg1.pointer);
}

late final _sel_sortedArrayUsingComparator_ =
    objc.registerName("sortedArrayUsingComparator:");
final _objc_msgSend_145 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCBlock>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCBlock>)>();

abstract class NSSortOptions {
  static const int NSSortConcurrent = 1;
  static const int NSSortStable = 16;
}

late final _sel_sortedArrayWithOptions_usingComparator_ =
    objc.registerName("sortedArrayWithOptions:usingComparator:");
final _objc_msgSend_146 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Int32,
                ffi.Pointer<objc.ObjCBlock>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int,
            ffi.Pointer<objc.ObjCBlock>)>();

abstract class NSBinarySearchingOptions {
  static const int NSBinarySearchingFirstEqual = 256;
  static const int NSBinarySearchingLastEqual = 512;
  static const int NSBinarySearchingInsertionIndex = 1024;
}

late final _sel_indexOfObject_inSortedRange_options_usingComparator_ =
    objc.registerName("indexOfObject:inSortedRange:options:usingComparator:");
final _objc_msgSend_147 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                _NSRange,
                ffi.Int32,
                ffi.Pointer<objc.ObjCBlock>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            _NSRange,
            int,
            ffi.Pointer<objc.ObjCBlock>)>();
late final _sel_array = objc.registerName("array");
late final _sel_arrayWithObject_ = objc.registerName("arrayWithObject:");
final _objc_msgSend_148 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_arrayWithObjects_count_ =
    objc.registerName("arrayWithObjects:count:");
late final _sel_arrayWithObjects_ = objc.registerName("arrayWithObjects:");
late final _sel_arrayWithArray_ = objc.registerName("arrayWithArray:");
final _objc_msgSend_149 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_initWithObjects_ = objc.registerName("initWithObjects:");
late final _sel_initWithArray_ = objc.registerName("initWithArray:");
late final _sel_initWithArray_copyItems_ =
    objc.registerName("initWithArray:copyItems:");
final _objc_msgSend_150 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Bool)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            bool)>();
late final _sel_initWithContentsOfURL_error_ =
    objc.registerName("initWithContentsOfURL:error:");
final _objc_msgSend_151 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_arrayWithContentsOfURL_error_ =
    objc.registerName("arrayWithContentsOfURL:error:");

abstract class NSOrderedCollectionDifferenceCalculationOptions {
  static const int NSOrderedCollectionDifferenceCalculationOmitInsertedObjects =
      1;
  static const int NSOrderedCollectionDifferenceCalculationOmitRemovedObjects =
      2;
  static const int NSOrderedCollectionDifferenceCalculationInferMoves = 4;
}

bool _ObjCBlock_bool_objcObjCObject_objcObjCObject_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlock> block,
        ffi.Pointer<objc.ObjCObject> arg0,
        ffi.Pointer<objc.ObjCObject> arg1) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Bool Function(ffi.Pointer<objc.ObjCObject> arg0,
                    ffi.Pointer<objc.ObjCObject> arg1)>>()
        .asFunction<
            bool Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>()(arg0, arg1);
bool _ObjCBlock_bool_objcObjCObject_objcObjCObject_closureTrampoline(
        ffi.Pointer<objc.ObjCBlock> block,
        ffi.Pointer<objc.ObjCObject> arg0,
        ffi.Pointer<objc.ObjCObject> arg1) =>
    (objc.getBlockClosure(block) as bool Function(ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>))(arg0, arg1);

class ObjCBlock_bool_objcObjCObject_objcObjCObject extends objc.ObjCBlockBase {
  ObjCBlock_bool_objcObjCObject_objcObjCObject._(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = true})
      : super(pointer, retain: retain, release: release);

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_bool_objcObjCObject_objcObjCObject castFromPointer(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = false}) {
    return ObjCBlock_bool_objcObjCObject_objcObjCObject._(pointer,
        retain: retain, release: release);
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_bool_objcObjCObject_objcObjCObject.fromFunctionPointer(
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Bool Function(ffi.Pointer<objc.ObjCObject> arg0,
                      ffi.Pointer<objc.ObjCObject> arg1)>>
          ptr)
      : this._(objc.newPointerBlock(
            _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Bool Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<objc.ObjCObject>)>(
                    _ObjCBlock_bool_objcObjCObject_objcObjCObject_fnPtrTrampoline,
                    false)
                .cast(),
            ptr.cast()));
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_bool_objcObjCObject_objcObjCObject.fromFunction(
      bool Function(objc.ObjCObjectBase, objc.ObjCObjectBase) fn)
      : this._(objc.newClosureBlock(
            _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Bool Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<objc.ObjCObject>)>(
                    _ObjCBlock_bool_objcObjCObject_objcObjCObject_closureTrampoline, false)
                .cast(),
            (ffi.Pointer<objc.ObjCObject> arg0, ffi.Pointer<objc.ObjCObject> arg1) => fn(
                objc.ObjCObjectBase(arg0, retain: true, release: true),
                objc.ObjCObjectBase(arg1, retain: true, release: true))));
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  bool call(objc.ObjCObjectBase arg0, objc.ObjCObjectBase arg1) =>
      pointer.ref.invoke
              .cast<
                  ffi.NativeFunction<
                      ffi.Bool Function(
                          ffi.Pointer<objc.ObjCBlock> block,
                          ffi.Pointer<objc.ObjCObject> arg0,
                          ffi.Pointer<objc.ObjCObject> arg1)>>()
              .asFunction<
                  bool Function(
                      ffi.Pointer<objc.ObjCBlock>,
                      ffi.Pointer<objc.ObjCObject>,
                      ffi.Pointer<objc.ObjCObject>)>()(
          pointer, arg0.pointer, arg1.pointer);
}

late final _sel_differenceFromArray_withOptions_usingEquivalenceTest_ =
    objc.registerName("differenceFromArray:withOptions:usingEquivalenceTest:");
final _objc_msgSend_152 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Int32,
                ffi.Pointer<objc.ObjCBlock>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            ffi.Pointer<objc.ObjCBlock>)>();
late final _sel_differenceFromArray_withOptions_ =
    objc.registerName("differenceFromArray:withOptions:");
final _objc_msgSend_153 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Int32)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int)>();
late final _sel_differenceFromArray_ =
    objc.registerName("differenceFromArray:");
late final _sel_arrayByApplyingDifference_ =
    objc.registerName("arrayByApplyingDifference:");
final _objc_msgSend_154 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_getObjects_ = objc.registerName("getObjects:");
final _objc_msgSend_155 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_arrayWithContentsOfFile_ =
    objc.registerName("arrayWithContentsOfFile:");
final _objc_msgSend_156 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_arrayWithContentsOfURL_ =
    objc.registerName("arrayWithContentsOfURL:");
final _objc_msgSend_157 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_initWithContentsOfFile_ =
    objc.registerName("initWithContentsOfFile:");
late final _sel_initWithContentsOfURL_ =
    objc.registerName("initWithContentsOfURL:");
late final _sel_writeToURL_atomically_ =
    objc.registerName("writeToURL:atomically:");
final _objc_msgSend_158 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Bool)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            bool)>();
late final _sel_resourceValuesForKeys_error_ =
    objc.registerName("resourceValuesForKeys:error:");
final _objc_msgSend_159 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_setResourceValue_forKey_error_ =
    objc.registerName("setResourceValue:forKey:error:");
final _objc_msgSend_160 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_setResourceValues_error_ =
    objc.registerName("setResourceValues:error:");
final _objc_msgSend_161 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_removeCachedResourceValueForKey_ =
    objc.registerName("removeCachedResourceValueForKey:");
final _objc_msgSend_162 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_removeAllCachedResourceValues =
    objc.registerName("removeAllCachedResourceValues");
late final _sel_setTemporaryResourceValue_forKey_ =
    objc.registerName("setTemporaryResourceValue:forKey:");
final _objc_msgSend_163 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();

abstract class NSURLBookmarkCreationOptions {
  static const int NSURLBookmarkCreationPreferFileIDResolution = 256;
  static const int NSURLBookmarkCreationMinimalBookmark = 512;
  static const int NSURLBookmarkCreationSuitableForBookmarkFile = 1024;
  static const int NSURLBookmarkCreationWithSecurityScope = 2048;
  static const int NSURLBookmarkCreationSecurityScopeAllowOnlyReadAccess = 4096;
  static const int NSURLBookmarkCreationWithoutImplicitSecurityScope =
      536870912;
}

late final _sel_bookmarkDataWithOptions_includingResourceValuesForKeys_relativeToURL_error_ =
    objc.registerName(
        "bookmarkDataWithOptions:includingResourceValuesForKeys:relativeToURL:error:");
final _objc_msgSend_164 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Int32,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();

abstract class NSURLBookmarkResolutionOptions {
  static const int NSURLBookmarkResolutionWithoutUI = 256;
  static const int NSURLBookmarkResolutionWithoutMounting = 512;
  static const int NSURLBookmarkResolutionWithSecurityScope = 1024;
  static const int NSURLBookmarkResolutionWithoutImplicitStartAccessing = 32768;
}

late final _sel_initByResolvingBookmarkData_options_relativeToURL_bookmarkDataIsStale_error_ =
    objc.registerName(
        "initByResolvingBookmarkData:options:relativeToURL:bookmarkDataIsStale:error:");
final _objc_msgSend_165 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Int32,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<ffi.Bool>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<ffi.Bool>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_URLByResolvingBookmarkData_options_relativeToURL_bookmarkDataIsStale_error_ =
    objc.registerName(
        "URLByResolvingBookmarkData:options:relativeToURL:bookmarkDataIsStale:error:");
late final _sel_resourceValuesForKeys_fromBookmarkData_ =
    objc.registerName("resourceValuesForKeys:fromBookmarkData:");
final _objc_msgSend_166 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_writeBookmarkData_toURL_options_error_ =
    objc.registerName("writeBookmarkData:toURL:options:error:");
final _objc_msgSend_167 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.UnsignedLong,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_bookmarkDataWithContentsOfURL_error_ =
    objc.registerName("bookmarkDataWithContentsOfURL:error:");
final _objc_msgSend_168 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_URLByResolvingAliasFileAtURL_options_error_ =
    objc.registerName("URLByResolvingAliasFileAtURL:options:error:");
final _objc_msgSend_169 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Int32,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_startAccessingSecurityScopedResource =
    objc.registerName("startAccessingSecurityScopedResource");
late final _sel_stopAccessingSecurityScopedResource =
    objc.registerName("stopAccessingSecurityScopedResource");
late final _sel_getPromisedItemResourceValue_forKey_error_ =
    objc.registerName("getPromisedItemResourceValue:forKey:error:");

class NSDictionary extends NSObject {
  NSDictionary._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSDictionary] that points to the same underlying object as [other].
  NSDictionary.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSDictionary] that wraps the given raw object pointer.
  NSDictionary.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSDictionary].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSDictionary);
  }

  int get count {
    return _objc_msgSend_12(this.pointer, _sel_count);
  }

  objc.ObjCObjectBase? objectForKey_(objc.ObjCObjectBase aKey) {
    final _ret =
        _objc_msgSend_170(this.pointer, _sel_objectForKey_, aKey.pointer);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  NSEnumerator keyEnumerator() {
    final _ret = _objc_msgSend_108(this.pointer, _sel_keyEnumerator);
    return NSEnumerator.castFromPointer(_ret, retain: true, release: true);
  }

  @override
  NSDictionary init() {
    final _ret = _objc_msgSend_2(this.pointer, _sel_init);
    return NSDictionary.castFromPointer(_ret, retain: true, release: true);
  }

  NSDictionary initWithObjects_forKeys_count_(
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> objects,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> keys,
      int cnt) {
    final _ret = _objc_msgSend_171(
        this.pointer, _sel_initWithObjects_forKeys_count_, objects, keys, cnt);
    return NSDictionary.castFromPointer(_ret, retain: true, release: true);
  }

  NSDictionary? initWithCoder_(NSCoder coder) {
    final _ret =
        _objc_msgSend_14(this.pointer, _sel_initWithCoder_, coder.pointer);
    return _ret.address == 0
        ? null
        : NSDictionary.castFromPointer(_ret, retain: true, release: true);
  }

  NSArray get allKeys {
    final _ret = _objc_msgSend_172(this.pointer, _sel_allKeys);
    return NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  NSArray allKeysForObject_(objc.ObjCObjectBase anObject) {
    final _ret = _objc_msgSend_99(
        this.pointer, _sel_allKeysForObject_, anObject.pointer);
    return NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  NSArray get allValues {
    final _ret = _objc_msgSend_172(this.pointer, _sel_allValues);
    return NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  NSString get description {
    final _ret = _objc_msgSend_32(this.pointer, _sel_description);
    return NSString.castFromPointer(_ret, retain: true, release: true);
  }

  NSString get descriptionInStringsFileFormat {
    final _ret =
        _objc_msgSend_32(this.pointer, _sel_descriptionInStringsFileFormat);
    return NSString.castFromPointer(_ret, retain: true, release: true);
  }

  NSString descriptionWithLocale_(objc.ObjCObjectBase? locale) {
    final _ret = _objc_msgSend_83(this.pointer, _sel_descriptionWithLocale_,
        locale?.pointer ?? ffi.nullptr);
    return NSString.castFromPointer(_ret, retain: true, release: true);
  }

  NSString descriptionWithLocale_indent_(
      objc.ObjCObjectBase? locale, int level) {
    final _ret = _objc_msgSend_102(
        this.pointer,
        _sel_descriptionWithLocale_indent_,
        locale?.pointer ?? ffi.nullptr,
        level);
    return NSString.castFromPointer(_ret, retain: true, release: true);
  }

  bool isEqualToDictionary_(NSDictionary otherDictionary) {
    return _objc_msgSend_173(
        this.pointer, _sel_isEqualToDictionary_, otherDictionary.pointer);
  }

  NSEnumerator objectEnumerator() {
    final _ret = _objc_msgSend_108(this.pointer, _sel_objectEnumerator);
    return NSEnumerator.castFromPointer(_ret, retain: true, release: true);
  }

  NSArray objectsForKeys_notFoundMarker_(
      NSArray keys, objc.ObjCObjectBase marker) {
    final _ret = _objc_msgSend_174(this.pointer,
        _sel_objectsForKeys_notFoundMarker_, keys.pointer, marker.pointer);
    return NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  bool writeToURL_error_(
      NSURL url, ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    return _objc_msgSend_113(
        this.pointer, _sel_writeToURL_error_, url.pointer, error);
  }

  NSArray keysSortedByValueUsingSelector_(
      ffi.Pointer<objc.ObjCSelector> comparator) {
    final _ret = _objc_msgSend_111(
        this.pointer, _sel_keysSortedByValueUsingSelector_, comparator);
    return NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  void getObjects_andKeys_count_(
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> objects,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> keys,
      int count) {
    _objc_msgSend_175(
        this.pointer, _sel_getObjects_andKeys_count_, objects, keys, count);
  }

  objc.ObjCObjectBase? objectForKeyedSubscript_(objc.ObjCObjectBase key) {
    final _ret = _objc_msgSend_170(
        this.pointer, _sel_objectForKeyedSubscript_, key.pointer);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  void enumerateKeysAndObjectsUsingBlock_(
      ObjCBlock_ffiVoid_objcObjCObject_objcObjCObject_bool block) {
    _objc_msgSend_176(
        this.pointer, _sel_enumerateKeysAndObjectsUsingBlock_, block.pointer);
  }

  void enumerateKeysAndObjectsWithOptions_usingBlock_(
      int opts, ObjCBlock_ffiVoid_objcObjCObject_objcObjCObject_bool block) {
    _objc_msgSend_177(
        this.pointer,
        _sel_enumerateKeysAndObjectsWithOptions_usingBlock_,
        opts,
        block.pointer);
  }

  NSArray keysSortedByValueUsingComparator_(
      ObjCBlock_NSComparisonResult_objcObjCObject_objcObjCObject cmptr) {
    final _ret = _objc_msgSend_145(
        this.pointer, _sel_keysSortedByValueUsingComparator_, cmptr.pointer);
    return NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  NSArray keysSortedByValueWithOptions_usingComparator_(int opts,
      ObjCBlock_NSComparisonResult_objcObjCObject_objcObjCObject cmptr) {
    final _ret = _objc_msgSend_146(
        this.pointer,
        _sel_keysSortedByValueWithOptions_usingComparator_,
        opts,
        cmptr.pointer);
    return NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  objc.ObjCObjectBase keysOfEntriesPassingTest_(
      ObjCBlock_bool_objcObjCObject_objcObjCObject_bool predicate) {
    final _ret = _objc_msgSend_178(
        this.pointer, _sel_keysOfEntriesPassingTest_, predicate.pointer);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  objc.ObjCObjectBase keysOfEntriesWithOptions_passingTest_(
      int opts, ObjCBlock_bool_objcObjCObject_objcObjCObject_bool predicate) {
    final _ret = _objc_msgSend_179(this.pointer,
        _sel_keysOfEntriesWithOptions_passingTest_, opts, predicate.pointer);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  void getObjects_andKeys_(ffi.Pointer<ffi.Pointer<objc.ObjCObject>> objects,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> keys) {
    _objc_msgSend_180(this.pointer, _sel_getObjects_andKeys_, objects, keys);
  }

  static NSDictionary? dictionaryWithContentsOfFile_(NSString path) {
    final _ret = _objc_msgSend_181(
        _class_NSDictionary, _sel_dictionaryWithContentsOfFile_, path.pointer);
    return _ret.address == 0
        ? null
        : NSDictionary.castFromPointer(_ret, retain: true, release: true);
  }

  static NSDictionary? dictionaryWithContentsOfURL_(NSURL url) {
    final _ret = _objc_msgSend_182(
        _class_NSDictionary, _sel_dictionaryWithContentsOfURL_, url.pointer);
    return _ret.address == 0
        ? null
        : NSDictionary.castFromPointer(_ret, retain: true, release: true);
  }

  NSDictionary? initWithContentsOfFile_(NSString path) {
    final _ret = _objc_msgSend_181(
        this.pointer, _sel_initWithContentsOfFile_, path.pointer);
    return _ret.address == 0
        ? null
        : NSDictionary.castFromPointer(_ret, retain: true, release: true);
  }

  NSDictionary? initWithContentsOfURL_(NSURL url) {
    final _ret = _objc_msgSend_182(
        this.pointer, _sel_initWithContentsOfURL_, url.pointer);
    return _ret.address == 0
        ? null
        : NSDictionary.castFromPointer(_ret, retain: true, release: true);
  }

  bool writeToFile_atomically_(NSString path, bool useAuxiliaryFile) {
    return _objc_msgSend_37(this.pointer, _sel_writeToFile_atomically_,
        path.pointer, useAuxiliaryFile);
  }

  bool writeToURL_atomically_(NSURL url, bool atomically) {
    return _objc_msgSend_158(
        this.pointer, _sel_writeToURL_atomically_, url.pointer, atomically);
  }

  static NSDictionary dictionary() {
    final _ret = _objc_msgSend_2(_class_NSDictionary, _sel_dictionary);
    return NSDictionary.castFromPointer(_ret, retain: true, release: true);
  }

  static NSDictionary dictionaryWithObject_forKey_(
      objc.ObjCObjectBase object, objc.ObjCObjectBase key) {
    final _ret = _objc_msgSend_183(_class_NSDictionary,
        _sel_dictionaryWithObject_forKey_, object.pointer, key.pointer);
    return NSDictionary.castFromPointer(_ret, retain: true, release: true);
  }

  static NSDictionary dictionaryWithObjects_forKeys_count_(
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> objects,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> keys,
      int cnt) {
    final _ret = _objc_msgSend_171(_class_NSDictionary,
        _sel_dictionaryWithObjects_forKeys_count_, objects, keys, cnt);
    return NSDictionary.castFromPointer(_ret, retain: true, release: true);
  }

  static NSDictionary dictionaryWithObjectsAndKeys_(
      objc.ObjCObjectBase firstObject) {
    final _ret = _objc_msgSend_148(_class_NSDictionary,
        _sel_dictionaryWithObjectsAndKeys_, firstObject.pointer);
    return NSDictionary.castFromPointer(_ret, retain: true, release: true);
  }

  static NSDictionary dictionaryWithDictionary_(NSDictionary dict) {
    final _ret = _objc_msgSend_184(
        _class_NSDictionary, _sel_dictionaryWithDictionary_, dict.pointer);
    return NSDictionary.castFromPointer(_ret, retain: true, release: true);
  }

  static NSDictionary dictionaryWithObjects_forKeys_(
      NSArray objects, NSArray keys) {
    final _ret = _objc_msgSend_185(_class_NSDictionary,
        _sel_dictionaryWithObjects_forKeys_, objects.pointer, keys.pointer);
    return NSDictionary.castFromPointer(_ret, retain: true, release: true);
  }

  NSDictionary initWithObjectsAndKeys_(objc.ObjCObjectBase firstObject) {
    final _ret = _objc_msgSend_148(
        this.pointer, _sel_initWithObjectsAndKeys_, firstObject.pointer);
    return NSDictionary.castFromPointer(_ret, retain: true, release: true);
  }

  NSDictionary initWithDictionary_(NSDictionary otherDictionary) {
    final _ret = _objc_msgSend_184(
        this.pointer, _sel_initWithDictionary_, otherDictionary.pointer);
    return NSDictionary.castFromPointer(_ret, retain: true, release: true);
  }

  NSDictionary initWithDictionary_copyItems_(
      NSDictionary otherDictionary, bool flag) {
    final _ret = _objc_msgSend_186(this.pointer,
        _sel_initWithDictionary_copyItems_, otherDictionary.pointer, flag);
    return NSDictionary.castFromPointer(_ret, retain: false, release: true);
  }

  NSDictionary initWithObjects_forKeys_(NSArray objects, NSArray keys) {
    final _ret = _objc_msgSend_185(this.pointer, _sel_initWithObjects_forKeys_,
        objects.pointer, keys.pointer);
    return NSDictionary.castFromPointer(_ret, retain: true, release: true);
  }

  NSDictionary? initWithContentsOfURL_error_(
      NSURL url, ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    final _ret = _objc_msgSend_187(
        this.pointer, _sel_initWithContentsOfURL_error_, url.pointer, error);
    return _ret.address == 0
        ? null
        : NSDictionary.castFromPointer(_ret, retain: true, release: true);
  }

  static NSDictionary? dictionaryWithContentsOfURL_error_(
      NSURL url, ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    final _ret = _objc_msgSend_187(_class_NSDictionary,
        _sel_dictionaryWithContentsOfURL_error_, url.pointer, error);
    return _ret.address == 0
        ? null
        : NSDictionary.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.ObjCObjectBase sharedKeySetForKeys_(NSArray keys) {
    final _ret = _objc_msgSend_149(
        _class_NSDictionary, _sel_sharedKeySetForKeys_, keys.pointer);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  int countByEnumeratingWithState_objects_count_(
      ffi.Pointer<NSFastEnumerationState> state,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> buffer,
      int len) {
    return _objc_msgSend_188(this.pointer,
        _sel_countByEnumeratingWithState_objects_count_, state, buffer, len);
  }

  static NSDictionary new1() {
    final _ret = _objc_msgSend_2(_class_NSDictionary, _sel_new);
    return NSDictionary.castFromPointer(_ret, retain: false, release: true);
  }

  static NSDictionary allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_3(_class_NSDictionary, _sel_allocWithZone_, zone);
    return NSDictionary.castFromPointer(_ret, retain: false, release: true);
  }

  static NSDictionary alloc() {
    final _ret = _objc_msgSend_2(_class_NSDictionary, _sel_alloc);
    return NSDictionary.castFromPointer(_ret, retain: false, release: true);
  }
}

late final _class_NSDictionary = objc.getClass("NSDictionary");
late final _sel_objectForKey_ = objc.registerName("objectForKey:");
final _objc_msgSend_170 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_keyEnumerator = objc.registerName("keyEnumerator");
late final _sel_initWithObjects_forKeys_count_ =
    objc.registerName("initWithObjects:forKeys:count:");
final _objc_msgSend_171 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
                ffi.UnsignedLong)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
            int)>();
late final _sel_allKeys = objc.registerName("allKeys");
final _objc_msgSend_172 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_allKeysForObject_ = objc.registerName("allKeysForObject:");
late final _sel_allValues = objc.registerName("allValues");
late final _sel_descriptionInStringsFileFormat =
    objc.registerName("descriptionInStringsFileFormat");
late final _sel_isEqualToDictionary_ =
    objc.registerName("isEqualToDictionary:");
final _objc_msgSend_173 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        bool Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_objectsForKeys_notFoundMarker_ =
    objc.registerName("objectsForKeys:notFoundMarker:");
final _objc_msgSend_174 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_keysSortedByValueUsingSelector_ =
    objc.registerName("keysSortedByValueUsingSelector:");
late final _sel_getObjects_andKeys_count_ =
    objc.registerName("getObjects:andKeys:count:");
final _objc_msgSend_175 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
                ffi.UnsignedLong)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
            int)>();
late final _sel_objectForKeyedSubscript_ =
    objc.registerName("objectForKeyedSubscript:");
void _ObjCBlock_ffiVoid_objcObjCObject_objcObjCObject_bool_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlock> block,
        ffi.Pointer<objc.ObjCObject> arg0,
        ffi.Pointer<objc.ObjCObject> arg1,
        ffi.Pointer<ffi.Bool> arg2) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(
                    ffi.Pointer<objc.ObjCObject> arg0,
                    ffi.Pointer<objc.ObjCObject> arg1,
                    ffi.Pointer<ffi.Bool> arg2)>>()
        .asFunction<
            void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<ffi.Bool>)>()(arg0, arg1, arg2);
void _ObjCBlock_ffiVoid_objcObjCObject_objcObjCObject_bool_closureTrampoline(
        ffi.Pointer<objc.ObjCBlock> block,
        ffi.Pointer<objc.ObjCObject> arg0,
        ffi.Pointer<objc.ObjCObject> arg1,
        ffi.Pointer<ffi.Bool> arg2) =>
    (objc.getBlockClosure(block) as void Function(ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>, ffi.Pointer<ffi.Bool>))(arg0, arg1, arg2);

class ObjCBlock_ffiVoid_objcObjCObject_objcObjCObject_bool
    extends objc.ObjCBlockBase {
  ObjCBlock_ffiVoid_objcObjCObject_objcObjCObject_bool._(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = true})
      : super(pointer, retain: retain, release: release);

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_ffiVoid_objcObjCObject_objcObjCObject_bool castFromPointer(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = false}) {
    return ObjCBlock_ffiVoid_objcObjCObject_objcObjCObject_bool._(pointer,
        retain: retain, release: release);
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_objcObjCObject_objcObjCObject_bool.fromFunctionPointer(
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<objc.ObjCObject> arg0,
                      ffi.Pointer<objc.ObjCObject> arg1,
                      ffi.Pointer<ffi.Bool> arg2)>>
          ptr)
      : this._(objc.newPointerBlock(
            _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<ffi.Bool>)>(
                    _ObjCBlock_ffiVoid_objcObjCObject_objcObjCObject_bool_fnPtrTrampoline)
                .cast(),
            ptr.cast()));
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_objcObjCObject_objcObjCObject_bool.fromFunction(
      void Function(objc.ObjCObjectBase, objc.ObjCObjectBase, ffi.Pointer<ffi.Bool>)
          fn)
      : this._(objc.newClosureBlock(
            _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<ffi.Bool>)>(
                    _ObjCBlock_ffiVoid_objcObjCObject_objcObjCObject_bool_closureTrampoline)
                .cast(),
            (ffi.Pointer<objc.ObjCObject> arg0,
                    ffi.Pointer<objc.ObjCObject> arg1,
                    ffi.Pointer<ffi.Bool> arg2) =>
                fn(objc.ObjCObjectBase(arg0, retain: true, release: true), objc.ObjCObjectBase(arg1, retain: true, release: true), arg2)));
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_objcObjCObject_objcObjCObject_bool.listener(
      void Function(objc.ObjCObjectBase, objc.ObjCObjectBase, ffi.Pointer<ffi.Bool>)
          fn)
      : this._(objc.newClosureBlock(
            (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                        ffi.Void Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<ffi.Bool>)>.listener(
                    _ObjCBlock_ffiVoid_objcObjCObject_objcObjCObject_bool_closureTrampoline)
                  ..keepIsolateAlive = false)
                .nativeFunction
                .cast(),
            (ffi.Pointer<objc.ObjCObject> arg0,
                    ffi.Pointer<objc.ObjCObject> arg1,
                    ffi.Pointer<ffi.Bool> arg2) =>
                fn(objc.ObjCObjectBase(arg0, retain: true, release: true), objc.ObjCObjectBase(arg1, retain: true, release: true), arg2)));
  static ffi.NativeCallable<
      ffi.Void Function(
          ffi.Pointer<objc.ObjCBlock>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<ffi.Bool>)>? _dartFuncListenerTrampoline;

  void call(objc.ObjCObjectBase arg0, objc.ObjCObjectBase arg1,
          ffi.Pointer<ffi.Bool> arg2) =>
      pointer.ref.invoke
              .cast<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<objc.ObjCBlock> block,
                          ffi.Pointer<objc.ObjCObject> arg0,
                          ffi.Pointer<objc.ObjCObject> arg1,
                          ffi.Pointer<ffi.Bool> arg2)>>()
              .asFunction<
                  void Function(
                      ffi.Pointer<objc.ObjCBlock>,
                      ffi.Pointer<objc.ObjCObject>,
                      ffi.Pointer<objc.ObjCObject>,
                      ffi.Pointer<ffi.Bool>)>()(
          pointer, arg0.pointer, arg1.pointer, arg2);
}

late final _sel_enumerateKeysAndObjectsUsingBlock_ =
    objc.registerName("enumerateKeysAndObjectsUsingBlock:");
final _objc_msgSend_176 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCBlock>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCBlock>)>();
late final _sel_enumerateKeysAndObjectsWithOptions_usingBlock_ =
    objc.registerName("enumerateKeysAndObjectsWithOptions:usingBlock:");
final _objc_msgSend_177 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Int32,
                ffi.Pointer<objc.ObjCBlock>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int,
            ffi.Pointer<objc.ObjCBlock>)>();
late final _sel_keysSortedByValueUsingComparator_ =
    objc.registerName("keysSortedByValueUsingComparator:");
late final _sel_keysSortedByValueWithOptions_usingComparator_ =
    objc.registerName("keysSortedByValueWithOptions:usingComparator:");
bool _ObjCBlock_bool_objcObjCObject_objcObjCObject_bool_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlock> block,
        ffi.Pointer<objc.ObjCObject> arg0,
        ffi.Pointer<objc.ObjCObject> arg1,
        ffi.Pointer<ffi.Bool> arg2) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Bool Function(
                    ffi.Pointer<objc.ObjCObject> arg0,
                    ffi.Pointer<objc.ObjCObject> arg1,
                    ffi.Pointer<ffi.Bool> arg2)>>()
        .asFunction<
            bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<ffi.Bool>)>()(arg0, arg1, arg2);
bool _ObjCBlock_bool_objcObjCObject_objcObjCObject_bool_closureTrampoline(
        ffi.Pointer<objc.ObjCBlock> block,
        ffi.Pointer<objc.ObjCObject> arg0,
        ffi.Pointer<objc.ObjCObject> arg1,
        ffi.Pointer<ffi.Bool> arg2) =>
    (objc.getBlockClosure(block) as bool Function(ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>, ffi.Pointer<ffi.Bool>))(arg0, arg1, arg2);

class ObjCBlock_bool_objcObjCObject_objcObjCObject_bool
    extends objc.ObjCBlockBase {
  ObjCBlock_bool_objcObjCObject_objcObjCObject_bool._(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = true})
      : super(pointer, retain: retain, release: release);

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_bool_objcObjCObject_objcObjCObject_bool castFromPointer(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = false}) {
    return ObjCBlock_bool_objcObjCObject_objcObjCObject_bool._(pointer,
        retain: retain, release: release);
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_bool_objcObjCObject_objcObjCObject_bool.fromFunctionPointer(
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Bool Function(
                      ffi.Pointer<objc.ObjCObject> arg0,
                      ffi.Pointer<objc.ObjCObject> arg1,
                      ffi.Pointer<ffi.Bool> arg2)>>
          ptr)
      : this._(objc.newPointerBlock(
            _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Bool Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<ffi.Bool>)>(
                    _ObjCBlock_bool_objcObjCObject_objcObjCObject_bool_fnPtrTrampoline,
                    false)
                .cast(),
            ptr.cast()));
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_bool_objcObjCObject_objcObjCObject_bool.fromFunction(
      bool Function(
              objc.ObjCObjectBase, objc.ObjCObjectBase, ffi.Pointer<ffi.Bool>)
          fn)
      : this._(objc.newClosureBlock(
            _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Bool Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<ffi.Bool>)>(
                    _ObjCBlock_bool_objcObjCObject_objcObjCObject_bool_closureTrampoline, false)
                .cast(),
            (ffi.Pointer<objc.ObjCObject> arg0, ffi.Pointer<objc.ObjCObject> arg1, ffi.Pointer<ffi.Bool> arg2) =>
                fn(objc.ObjCObjectBase(arg0, retain: true, release: true), objc.ObjCObjectBase(arg1, retain: true, release: true), arg2)));
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  bool call(objc.ObjCObjectBase arg0, objc.ObjCObjectBase arg1,
          ffi.Pointer<ffi.Bool> arg2) =>
      pointer.ref.invoke
              .cast<
                  ffi.NativeFunction<
                      ffi.Bool Function(
                          ffi.Pointer<objc.ObjCBlock> block,
                          ffi.Pointer<objc.ObjCObject> arg0,
                          ffi.Pointer<objc.ObjCObject> arg1,
                          ffi.Pointer<ffi.Bool> arg2)>>()
              .asFunction<
                  bool Function(
                      ffi.Pointer<objc.ObjCBlock>,
                      ffi.Pointer<objc.ObjCObject>,
                      ffi.Pointer<objc.ObjCObject>,
                      ffi.Pointer<ffi.Bool>)>()(
          pointer, arg0.pointer, arg1.pointer, arg2);
}

late final _sel_keysOfEntriesPassingTest_ =
    objc.registerName("keysOfEntriesPassingTest:");
final _objc_msgSend_178 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCBlock>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCBlock>)>();
late final _sel_keysOfEntriesWithOptions_passingTest_ =
    objc.registerName("keysOfEntriesWithOptions:passingTest:");
final _objc_msgSend_179 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Int32,
                ffi.Pointer<objc.ObjCBlock>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int,
            ffi.Pointer<objc.ObjCBlock>)>();
late final _sel_getObjects_andKeys_ = objc.registerName("getObjects:andKeys:");
final _objc_msgSend_180 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_dictionaryWithContentsOfFile_ =
    objc.registerName("dictionaryWithContentsOfFile:");
final _objc_msgSend_181 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_dictionaryWithContentsOfURL_ =
    objc.registerName("dictionaryWithContentsOfURL:");
final _objc_msgSend_182 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_dictionary = objc.registerName("dictionary");
late final _sel_dictionaryWithObject_forKey_ =
    objc.registerName("dictionaryWithObject:forKey:");
final _objc_msgSend_183 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_dictionaryWithObjects_forKeys_count_ =
    objc.registerName("dictionaryWithObjects:forKeys:count:");
late final _sel_dictionaryWithObjectsAndKeys_ =
    objc.registerName("dictionaryWithObjectsAndKeys:");
late final _sel_dictionaryWithDictionary_ =
    objc.registerName("dictionaryWithDictionary:");
final _objc_msgSend_184 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_dictionaryWithObjects_forKeys_ =
    objc.registerName("dictionaryWithObjects:forKeys:");
final _objc_msgSend_185 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_initWithObjectsAndKeys_ =
    objc.registerName("initWithObjectsAndKeys:");
late final _sel_initWithDictionary_ = objc.registerName("initWithDictionary:");
late final _sel_initWithDictionary_copyItems_ =
    objc.registerName("initWithDictionary:copyItems:");
final _objc_msgSend_186 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Bool)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            bool)>();
late final _sel_initWithObjects_forKeys_ =
    objc.registerName("initWithObjects:forKeys:");
final _objc_msgSend_187 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_dictionaryWithContentsOfURL_error_ =
    objc.registerName("dictionaryWithContentsOfURL:error:");
late final _sel_sharedKeySetForKeys_ =
    objc.registerName("sharedKeySetForKeys:");

final class NSFastEnumerationState extends ffi.Struct {
  @ffi.UnsignedLong()
  external int state;

  external ffi.Pointer<ffi.Pointer<objc.ObjCObject>> itemsPtr;

  external ffi.Pointer<ffi.UnsignedLong> mutationsPtr;

  @ffi.Array.multi([5])
  external ffi.Array<ffi.UnsignedLong> extra;
}

late final _sel_countByEnumeratingWithState_objects_count_ =
    objc.registerName("countByEnumeratingWithState:objects:count:");
final _objc_msgSend_188 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<NSFastEnumerationState>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
                ffi.UnsignedLong)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<NSFastEnumerationState>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
            int)>();
late final _sel_promisedItemResourceValuesForKeys_error_ =
    objc.registerName("promisedItemResourceValuesForKeys:error:");
final _objc_msgSend_189 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_checkPromisedItemIsReachableAndReturnError_ =
    objc.registerName("checkPromisedItemIsReachableAndReturnError:");
final _objc_msgSend_190 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_fileURLWithPathComponents_ =
    objc.registerName("fileURLWithPathComponents:");
final _objc_msgSend_191 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_pathComponents = objc.registerName("pathComponents");
final _objc_msgSend_192 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_lastPathComponent = objc.registerName("lastPathComponent");
late final _sel_pathExtension = objc.registerName("pathExtension");
late final _sel_URLByAppendingPathComponent_ =
    objc.registerName("URLByAppendingPathComponent:");
final _objc_msgSend_193 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_URLByAppendingPathComponent_isDirectory_ =
    objc.registerName("URLByAppendingPathComponent:isDirectory:");
final _objc_msgSend_194 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Bool)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            bool)>();
late final _sel_URLByDeletingLastPathComponent =
    objc.registerName("URLByDeletingLastPathComponent");
late final _sel_URLByAppendingPathExtension_ =
    objc.registerName("URLByAppendingPathExtension:");
late final _sel_URLByDeletingPathExtension =
    objc.registerName("URLByDeletingPathExtension");
late final _sel_checkResourceIsReachableAndReturnError_ =
    objc.registerName("checkResourceIsReachableAndReturnError:");
late final _sel_URLByStandardizingPath =
    objc.registerName("URLByStandardizingPath");
late final _sel_URLByResolvingSymlinksInPath =
    objc.registerName("URLByResolvingSymlinksInPath");
late final _sel_resourceDataUsingCache_ =
    objc.registerName("resourceDataUsingCache:");
final _objc_msgSend_195 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Bool)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, bool)>();
late final _sel_loadResourceDataNotifyingClient_usingCache_ =
    objc.registerName("loadResourceDataNotifyingClient:usingCache:");
final _objc_msgSend_196 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Bool)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            bool)>();
late final _sel_propertyForKey_ = objc.registerName("propertyForKey:");
late final _sel_setResourceData_ = objc.registerName("setResourceData:");
late final _sel_setProperty_forKey_ = objc.registerName("setProperty:forKey:");
final _objc_msgSend_197 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();

class NSURLHandle extends NSObject {
  NSURLHandle._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSURLHandle] that points to the same underlying object as [other].
  NSURLHandle.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSURLHandle] that wraps the given raw object pointer.
  NSURLHandle.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSURLHandle].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSURLHandle);
  }

  static void registerURLHandleClass_(objc.ObjCObjectBase anURLHandleSubclass) {
    _objc_msgSend_198(_class_NSURLHandle, _sel_registerURLHandleClass_,
        anURLHandleSubclass.pointer);
  }

  static objc.ObjCObjectBase URLHandleClassForURL_(NSURL anURL) {
    final _ret = _objc_msgSend_199(
        _class_NSURLHandle, _sel_URLHandleClassForURL_, anURL.pointer);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  int status() {
    return _objc_msgSend_200(this.pointer, _sel_status);
  }

  NSString failureReason() {
    final _ret = _objc_msgSend_32(this.pointer, _sel_failureReason);
    return NSString.castFromPointer(_ret, retain: true, release: true);
  }

  void addClient_(objc.ObjCObjectBase client) {
    _objc_msgSend_198(this.pointer, _sel_addClient_, client.pointer);
  }

  void removeClient_(objc.ObjCObjectBase client) {
    _objc_msgSend_198(this.pointer, _sel_removeClient_, client.pointer);
  }

  void loadInBackground() {
    _objc_msgSend_1(this.pointer, _sel_loadInBackground);
  }

  void cancelLoadInBackground() {
    _objc_msgSend_1(this.pointer, _sel_cancelLoadInBackground);
  }

  NSData resourceData() {
    final _ret = _objc_msgSend_54(this.pointer, _sel_resourceData);
    return NSData.castFromPointer(_ret, retain: true, release: true);
  }

  NSData availableResourceData() {
    final _ret = _objc_msgSend_54(this.pointer, _sel_availableResourceData);
    return NSData.castFromPointer(_ret, retain: true, release: true);
  }

  int expectedResourceDataSize() {
    return _objc_msgSend_77(this.pointer, _sel_expectedResourceDataSize);
  }

  void flushCachedData() {
    _objc_msgSend_1(this.pointer, _sel_flushCachedData);
  }

  void backgroundLoadDidFailWithReason_(NSString reason) {
    _objc_msgSend_162(
        this.pointer, _sel_backgroundLoadDidFailWithReason_, reason.pointer);
  }

  void didLoadBytes_loadComplete_(NSData newBytes, bool yorn) {
    _objc_msgSend_201(
        this.pointer, _sel_didLoadBytes_loadComplete_, newBytes.pointer, yorn);
  }

  static bool canInitWithURL_(NSURL anURL) {
    return _objc_msgSend_202(
        _class_NSURLHandle, _sel_canInitWithURL_, anURL.pointer);
  }

  static NSURLHandle cachedHandleForURL_(NSURL anURL) {
    final _ret = _objc_msgSend_203(
        _class_NSURLHandle, _sel_cachedHandleForURL_, anURL.pointer);
    return NSURLHandle.castFromPointer(_ret, retain: true, release: true);
  }

  objc.ObjCObjectBase initWithURL_cached_(NSURL anURL, bool willCache) {
    final _ret = _objc_msgSend_204(
        this.pointer, _sel_initWithURL_cached_, anURL.pointer, willCache);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  objc.ObjCObjectBase propertyForKey_(NSString propertyKey) {
    final _ret = _objc_msgSend_42(
        this.pointer, _sel_propertyForKey_, propertyKey.pointer);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  objc.ObjCObjectBase propertyForKeyIfAvailable_(NSString propertyKey) {
    final _ret = _objc_msgSend_42(
        this.pointer, _sel_propertyForKeyIfAvailable_, propertyKey.pointer);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  bool writeProperty_forKey_(
      objc.ObjCObjectBase propertyValue, NSString propertyKey) {
    return _objc_msgSend_197(this.pointer, _sel_writeProperty_forKey_,
        propertyValue.pointer, propertyKey.pointer);
  }

  bool writeData_(NSData data) {
    return _objc_msgSend_35(this.pointer, _sel_writeData_, data.pointer);
  }

  NSData loadInForeground() {
    final _ret = _objc_msgSend_54(this.pointer, _sel_loadInForeground);
    return NSData.castFromPointer(_ret, retain: true, release: true);
  }

  void beginLoadInBackground() {
    _objc_msgSend_1(this.pointer, _sel_beginLoadInBackground);
  }

  void endLoadInBackground() {
    _objc_msgSend_1(this.pointer, _sel_endLoadInBackground);
  }

  @override
  NSURLHandle init() {
    final _ret = _objc_msgSend_2(this.pointer, _sel_init);
    return NSURLHandle.castFromPointer(_ret, retain: true, release: true);
  }

  static NSURLHandle new1() {
    final _ret = _objc_msgSend_2(_class_NSURLHandle, _sel_new);
    return NSURLHandle.castFromPointer(_ret, retain: false, release: true);
  }

  static NSURLHandle allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_3(_class_NSURLHandle, _sel_allocWithZone_, zone);
    return NSURLHandle.castFromPointer(_ret, retain: false, release: true);
  }

  static NSURLHandle alloc() {
    final _ret = _objc_msgSend_2(_class_NSURLHandle, _sel_alloc);
    return NSURLHandle.castFromPointer(_ret, retain: false, release: true);
  }
}

late final _class_NSURLHandle = objc.getClass("NSURLHandle");
late final _sel_registerURLHandleClass_ =
    objc.registerName("registerURLHandleClass:");
final _objc_msgSend_198 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_URLHandleClassForURL_ =
    objc.registerName("URLHandleClassForURL:");
final _objc_msgSend_199 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();

abstract class NSURLHandleStatus {
  static const int NSURLHandleNotLoaded = 0;
  static const int NSURLHandleLoadSucceeded = 1;
  static const int NSURLHandleLoadInProgress = 2;
  static const int NSURLHandleLoadFailed = 3;
}

late final _sel_status = objc.registerName("status");
final _objc_msgSend_200 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Int32 Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_failureReason = objc.registerName("failureReason");
late final _sel_addClient_ = objc.registerName("addClient:");
late final _sel_removeClient_ = objc.registerName("removeClient:");
late final _sel_loadInBackground = objc.registerName("loadInBackground");
late final _sel_cancelLoadInBackground =
    objc.registerName("cancelLoadInBackground");
late final _sel_resourceData = objc.registerName("resourceData");
late final _sel_availableResourceData =
    objc.registerName("availableResourceData");
late final _sel_expectedResourceDataSize =
    objc.registerName("expectedResourceDataSize");
late final _sel_flushCachedData = objc.registerName("flushCachedData");
late final _sel_backgroundLoadDidFailWithReason_ =
    objc.registerName("backgroundLoadDidFailWithReason:");
late final _sel_didLoadBytes_loadComplete_ =
    objc.registerName("didLoadBytes:loadComplete:");
final _objc_msgSend_201 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Bool)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            bool)>();
late final _sel_canInitWithURL_ = objc.registerName("canInitWithURL:");
final _objc_msgSend_202 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        bool Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_cachedHandleForURL_ = objc.registerName("cachedHandleForURL:");
final _objc_msgSend_203 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_initWithURL_cached_ = objc.registerName("initWithURL:cached:");
final _objc_msgSend_204 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Bool)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            bool)>();
late final _sel_propertyForKeyIfAvailable_ =
    objc.registerName("propertyForKeyIfAvailable:");
late final _sel_writeProperty_forKey_ =
    objc.registerName("writeProperty:forKey:");
late final _sel_writeData_ = objc.registerName("writeData:");
late final _sel_loadInForeground = objc.registerName("loadInForeground");
late final _sel_beginLoadInBackground =
    objc.registerName("beginLoadInBackground");
late final _sel_endLoadInBackground = objc.registerName("endLoadInBackground");
late final _sel_URLHandleUsingCache_ =
    objc.registerName("URLHandleUsingCache:");
final _objc_msgSend_205 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Bool)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, bool)>();

abstract class NSDataWritingOptions {
  static const int NSDataWritingAtomic = 1;
  static const int NSDataWritingWithoutOverwriting = 2;
  static const int NSDataWritingFileProtectionNone = 268435456;
  static const int NSDataWritingFileProtectionComplete = 536870912;
  static const int NSDataWritingFileProtectionCompleteUnlessOpen = 805306368;
  static const int
      NSDataWritingFileProtectionCompleteUntilFirstUserAuthentication =
      1073741824;
  static const int NSDataWritingFileProtectionCompleteWhenUserInactive =
      1342177280;
  static const int NSDataWritingFileProtectionMask = 4026531840;
  static const int NSAtomicWrite = 1;
}

late final _sel_writeToFile_options_error_ =
    objc.registerName("writeToFile:options:error:");
final _objc_msgSend_206 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Int32,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_writeToURL_options_error_ =
    objc.registerName("writeToURL:options:error:");
final _objc_msgSend_207 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Int32,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();

abstract class NSDataSearchOptions {
  static const int NSDataSearchBackwards = 1;
  static const int NSDataSearchAnchored = 2;
}

late final _sel_rangeOfData_options_range_ =
    objc.registerName("rangeOfData:options:range:");
final _objc_msgSend_208 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            _NSRange Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Int32,
                _NSRange)>>()
    .asFunction<
        _NSRange Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            _NSRange)>();
final _objc_msgSend_208Stret = objc.msgSendStretPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<_NSRange>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Int32,
                _NSRange)>>()
    .asFunction<
        void Function(
            ffi.Pointer<_NSRange>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            _NSRange)>();
void _ObjCBlock_ffiVoid_ffiVoid_NSRange_bool_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlock> block,
        ffi.Pointer<ffi.Void> arg0,
        _NSRange arg1,
        ffi.Pointer<ffi.Bool> arg2) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<ffi.Void> arg0, _NSRange arg1,
                    ffi.Pointer<ffi.Bool> arg2)>>()
        .asFunction<
            void Function(ffi.Pointer<ffi.Void>, _NSRange,
                ffi.Pointer<ffi.Bool>)>()(arg0, arg1, arg2);
void _ObjCBlock_ffiVoid_ffiVoid_NSRange_bool_closureTrampoline(
        ffi.Pointer<objc.ObjCBlock> block,
        ffi.Pointer<ffi.Void> arg0,
        _NSRange arg1,
        ffi.Pointer<ffi.Bool> arg2) =>
    (objc.getBlockClosure(block) as void Function(ffi.Pointer<ffi.Void>,
        _NSRange, ffi.Pointer<ffi.Bool>))(arg0, arg1, arg2);

class ObjCBlock_ffiVoid_ffiVoid_NSRange_bool extends objc.ObjCBlockBase {
  ObjCBlock_ffiVoid_ffiVoid_NSRange_bool._(ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false, bool release = true})
      : super(pointer, retain: retain, release: release);

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_ffiVoid_ffiVoid_NSRange_bool castFromPointer(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = false}) {
    return ObjCBlock_ffiVoid_ffiVoid_NSRange_bool._(pointer,
        retain: retain, release: release);
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_ffiVoid_NSRange_bool.fromFunctionPointer(
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ffi.Void> arg0, _NSRange arg1,
                      ffi.Pointer<ffi.Bool> arg2)>>
          ptr)
      : this._(objc.newPointerBlock(
            _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<ffi.Void>,
                            _NSRange,
                            ffi.Pointer<ffi.Bool>)>(
                    _ObjCBlock_ffiVoid_ffiVoid_NSRange_bool_fnPtrTrampoline)
                .cast(),
            ptr.cast()));
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_ffiVoid_NSRange_bool.fromFunction(
      void Function(ffi.Pointer<ffi.Void>, _NSRange, ffi.Pointer<ffi.Bool>) fn)
      : this._(objc.newClosureBlock(
            _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<ffi.Void>,
                            _NSRange,
                            ffi.Pointer<ffi.Bool>)>(
                    _ObjCBlock_ffiVoid_ffiVoid_NSRange_bool_closureTrampoline)
                .cast(),
            (ffi.Pointer<ffi.Void> arg0, _NSRange arg1,
                    ffi.Pointer<ffi.Bool> arg2) =>
                fn(arg0, arg1, arg2)));
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_ffiVoid_NSRange_bool.listener(
      void Function(ffi.Pointer<ffi.Void>, _NSRange, ffi.Pointer<ffi.Bool>) fn)
      : this._(objc.newClosureBlock(
            (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                        ffi.Void Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<ffi.Void>,
                            _NSRange,
                            ffi.Pointer<ffi.Bool>)>.listener(
                    _ObjCBlock_ffiVoid_ffiVoid_NSRange_bool_closureTrampoline)
                  ..keepIsolateAlive = false)
                .nativeFunction
                .cast(),
            (ffi.Pointer<ffi.Void> arg0, _NSRange arg1,
                    ffi.Pointer<ffi.Bool> arg2) =>
                fn(arg0, arg1, arg2)));
  static ffi.NativeCallable<
      ffi.Void Function(ffi.Pointer<objc.ObjCBlock>, ffi.Pointer<ffi.Void>,
          _NSRange, ffi.Pointer<ffi.Bool>)>? _dartFuncListenerTrampoline;

  void call(ffi.Pointer<ffi.Void> arg0, _NSRange arg1,
          ffi.Pointer<ffi.Bool> arg2) =>
      pointer.ref.invoke
          .cast<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<objc.ObjCBlock> block,
                      ffi.Pointer<ffi.Void> arg0,
                      _NSRange arg1,
                      ffi.Pointer<ffi.Bool> arg2)>>()
          .asFunction<
              void Function(
                  ffi.Pointer<objc.ObjCBlock>,
                  ffi.Pointer<ffi.Void>,
                  _NSRange,
                  ffi.Pointer<ffi.Bool>)>()(pointer, arg0, arg1, arg2);
}

late final _sel_enumerateByteRangesUsingBlock_ =
    objc.registerName("enumerateByteRangesUsingBlock:");
final _objc_msgSend_209 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCBlock>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCBlock>)>();
late final _sel_data = objc.registerName("data");
late final _sel_dataWithBytes_length_ =
    objc.registerName("dataWithBytes:length:");
final _objc_msgSend_210 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<ffi.Void>,
                ffi.UnsignedLong)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<ffi.Void>, int)>();
late final _sel_dataWithBytesNoCopy_length_ =
    objc.registerName("dataWithBytesNoCopy:length:");
late final _sel_dataWithBytesNoCopy_length_freeWhenDone_ =
    objc.registerName("dataWithBytesNoCopy:length:freeWhenDone:");
final _objc_msgSend_211 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<ffi.Void>,
                ffi.UnsignedLong,
                ffi.Bool)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<ffi.Void>,
            int,
            bool)>();

abstract class NSDataReadingOptions {
  static const int NSDataReadingMappedIfSafe = 1;
  static const int NSDataReadingUncached = 2;
  static const int NSDataReadingMappedAlways = 8;
  static const int NSDataReadingMapped = 1;
  static const int NSMappedRead = 1;
  static const int NSUncachedRead = 2;
}

late final _sel_dataWithContentsOfFile_options_error_ =
    objc.registerName("dataWithContentsOfFile:options:error:");
final _objc_msgSend_212 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Int32,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_dataWithContentsOfURL_options_error_ =
    objc.registerName("dataWithContentsOfURL:options:error:");
final _objc_msgSend_213 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Int32,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_dataWithContentsOfFile_ =
    objc.registerName("dataWithContentsOfFile:");
late final _sel_dataWithContentsOfURL_ =
    objc.registerName("dataWithContentsOfURL:");
final _objc_msgSend_214 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_initWithBytes_length_ =
    objc.registerName("initWithBytes:length:");
late final _sel_initWithBytesNoCopy_length_ =
    objc.registerName("initWithBytesNoCopy:length:");
late final _sel_initWithBytesNoCopy_length_freeWhenDone_ =
    objc.registerName("initWithBytesNoCopy:length:freeWhenDone:");
void _ObjCBlock_ffiVoid_ffiVoid_ffiUnsignedLong_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlock> block,
        ffi.Pointer<ffi.Void> arg0,
        int arg1) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(
                    ffi.Pointer<ffi.Void> arg0, ffi.UnsignedLong arg1)>>()
        .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>()(arg0, arg1);
void _ObjCBlock_ffiVoid_ffiVoid_ffiUnsignedLong_closureTrampoline(
        ffi.Pointer<objc.ObjCBlock> block,
        ffi.Pointer<ffi.Void> arg0,
        int arg1) =>
    (objc.getBlockClosure(block) as void Function(ffi.Pointer<ffi.Void>, int))(
        arg0, arg1);

class ObjCBlock_ffiVoid_ffiVoid_ffiUnsignedLong extends objc.ObjCBlockBase {
  ObjCBlock_ffiVoid_ffiVoid_ffiUnsignedLong._(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = true})
      : super(pointer, retain: retain, release: release);

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_ffiVoid_ffiVoid_ffiUnsignedLong castFromPointer(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = false}) {
    return ObjCBlock_ffiVoid_ffiVoid_ffiUnsignedLong._(pointer,
        retain: retain, release: release);
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_ffiVoid_ffiUnsignedLong.fromFunctionPointer(
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<ffi.Void> arg0, ffi.UnsignedLong arg1)>>
          ptr)
      : this._(objc.newPointerBlock(
            _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<ffi.Void>, ffi.UnsignedLong)>(
                    _ObjCBlock_ffiVoid_ffiVoid_ffiUnsignedLong_fnPtrTrampoline)
                .cast(),
            ptr.cast()));
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_ffiVoid_ffiUnsignedLong.fromFunction(
      void Function(ffi.Pointer<ffi.Void>, int) fn)
      : this._(objc.newClosureBlock(
            _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<ffi.Void>, ffi.UnsignedLong)>(
                    _ObjCBlock_ffiVoid_ffiVoid_ffiUnsignedLong_closureTrampoline)
                .cast(),
            (ffi.Pointer<ffi.Void> arg0, int arg1) => fn(arg0, arg1)));
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_ffiVoid_ffiUnsignedLong.listener(
      void Function(ffi.Pointer<ffi.Void>, int) fn)
      : this._(objc.newClosureBlock(
            (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                        ffi.Void Function(ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<ffi.Void>, ffi.UnsignedLong)>.listener(
                    _ObjCBlock_ffiVoid_ffiVoid_ffiUnsignedLong_closureTrampoline)
                  ..keepIsolateAlive = false)
                .nativeFunction
                .cast(),
            (ffi.Pointer<ffi.Void> arg0, int arg1) => fn(arg0, arg1)));
  static ffi.NativeCallable<
      ffi.Void Function(ffi.Pointer<objc.ObjCBlock>, ffi.Pointer<ffi.Void>,
          ffi.UnsignedLong)>? _dartFuncListenerTrampoline;

  void call(ffi.Pointer<ffi.Void> arg0, int arg1) => pointer.ref.invoke
      .cast<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<objc.ObjCBlock> block,
                  ffi.Pointer<ffi.Void> arg0, ffi.UnsignedLong arg1)>>()
      .asFunction<
          void Function(ffi.Pointer<objc.ObjCBlock>, ffi.Pointer<ffi.Void>,
              int)>()(pointer, arg0, arg1);
}

late final _sel_initWithBytesNoCopy_length_deallocator_ =
    objc.registerName("initWithBytesNoCopy:length:deallocator:");
final _objc_msgSend_215 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<ffi.Void>,
                ffi.UnsignedLong,
                ffi.Pointer<objc.ObjCBlock>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<ffi.Void>,
            int,
            ffi.Pointer<objc.ObjCBlock>)>();
late final _sel_initWithContentsOfFile_options_error_ =
    objc.registerName("initWithContentsOfFile:options:error:");
late final _sel_initWithContentsOfURL_options_error_ =
    objc.registerName("initWithContentsOfURL:options:error:");
late final _sel_initWithData_ = objc.registerName("initWithData:");
final _objc_msgSend_216 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_dataWithData_ = objc.registerName("dataWithData:");

abstract class NSDataBase64DecodingOptions {
  static const int NSDataBase64DecodingIgnoreUnknownCharacters = 1;
}

late final _sel_initWithBase64EncodedString_options_ =
    objc.registerName("initWithBase64EncodedString:options:");
final _objc_msgSend_217 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Int32)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int)>();

abstract class NSDataBase64EncodingOptions {
  static const int NSDataBase64Encoding64CharacterLineLength = 1;
  static const int NSDataBase64Encoding76CharacterLineLength = 2;
  static const int NSDataBase64EncodingEndLineWithCarriageReturn = 16;
  static const int NSDataBase64EncodingEndLineWithLineFeed = 32;
}

late final _sel_base64EncodedStringWithOptions_ =
    objc.registerName("base64EncodedStringWithOptions:");
final _objc_msgSend_218 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Int32)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_initWithBase64EncodedData_options_ =
    objc.registerName("initWithBase64EncodedData:options:");
final _objc_msgSend_219 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Int32)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int)>();
late final _sel_base64EncodedDataWithOptions_ =
    objc.registerName("base64EncodedDataWithOptions:");
final _objc_msgSend_220 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Int32)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();

abstract class NSDataCompressionAlgorithm {
  static const int NSDataCompressionAlgorithmLZFSE = 0;
  static const int NSDataCompressionAlgorithmLZ4 = 1;
  static const int NSDataCompressionAlgorithmLZMA = 2;
  static const int NSDataCompressionAlgorithmZlib = 3;
}

late final _sel_decompressedDataUsingAlgorithm_error_ =
    objc.registerName("decompressedDataUsingAlgorithm:error:");
final _objc_msgSend_221 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Int32,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_compressedDataUsingAlgorithm_error_ =
    objc.registerName("compressedDataUsingAlgorithm:error:");
late final _sel_getBytes_ = objc.registerName("getBytes:");
late final _sel_dataWithContentsOfMappedFile_ =
    objc.registerName("dataWithContentsOfMappedFile:");
late final _sel_initWithContentsOfMappedFile_ =
    objc.registerName("initWithContentsOfMappedFile:");
late final _sel_initWithBase64Encoding_ =
    objc.registerName("initWithBase64Encoding:");
late final _sel_base64Encoding = objc.registerName("base64Encoding");
late final _sel_characterSetWithBitmapRepresentation_ =
    objc.registerName("characterSetWithBitmapRepresentation:");
final _objc_msgSend_222 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_characterSetWithContentsOfFile_ =
    objc.registerName("characterSetWithContentsOfFile:");
final _objc_msgSend_223 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
final _objc_msgSend_224 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_characterIsMember_ = objc.registerName("characterIsMember:");
final _objc_msgSend_225 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedShort)>>()
    .asFunction<
        bool Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_bitmapRepresentation =
    objc.registerName("bitmapRepresentation");
late final _sel_invertedSet = objc.registerName("invertedSet");
late final _sel_longCharacterIsMember_ =
    objc.registerName("longCharacterIsMember:");
final _objc_msgSend_226 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedInt)>>()
    .asFunction<
        bool Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_isSupersetOfSet_ = objc.registerName("isSupersetOfSet:");
final _objc_msgSend_227 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        bool Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_hasMemberInPlane_ = objc.registerName("hasMemberInPlane:");
final _objc_msgSend_228 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Uint8)>>()
    .asFunction<
        bool Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_URLUserAllowedCharacterSet =
    objc.registerName("URLUserAllowedCharacterSet");
late final _sel_URLPasswordAllowedCharacterSet =
    objc.registerName("URLPasswordAllowedCharacterSet");
late final _sel_URLHostAllowedCharacterSet =
    objc.registerName("URLHostAllowedCharacterSet");
late final _sel_URLPathAllowedCharacterSet =
    objc.registerName("URLPathAllowedCharacterSet");
late final _sel_URLQueryAllowedCharacterSet =
    objc.registerName("URLQueryAllowedCharacterSet");
late final _sel_URLFragmentAllowedCharacterSet =
    objc.registerName("URLFragmentAllowedCharacterSet");
late final _sel_rangeOfCharacterFromSet_ =
    objc.registerName("rangeOfCharacterFromSet:");
final _objc_msgSend_229 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            _NSRange Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        _NSRange Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
final _objc_msgSend_229Stret = objc.msgSendStretPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<_NSRange>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<_NSRange>, ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_rangeOfCharacterFromSet_options_ =
    objc.registerName("rangeOfCharacterFromSet:options:");
final _objc_msgSend_230 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            _NSRange Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Int32)>>()
    .asFunction<
        _NSRange Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int)>();
final _objc_msgSend_230Stret = objc.msgSendStretPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<_NSRange>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Int32)>>()
    .asFunction<
        void Function(
            ffi.Pointer<_NSRange>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int)>();
late final _sel_rangeOfCharacterFromSet_options_range_ =
    objc.registerName("rangeOfCharacterFromSet:options:range:");
final _objc_msgSend_231 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            _NSRange Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Int32,
                _NSRange)>>()
    .asFunction<
        _NSRange Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            _NSRange)>();
final _objc_msgSend_231Stret = objc.msgSendStretPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<_NSRange>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Int32,
                _NSRange)>>()
    .asFunction<
        void Function(
            ffi.Pointer<_NSRange>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            _NSRange)>();
late final _sel_rangeOfComposedCharacterSequenceAtIndex_ =
    objc.registerName("rangeOfComposedCharacterSequenceAtIndex:");
final _objc_msgSend_232 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            _NSRange Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedLong)>>()
    .asFunction<
        _NSRange Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
final _objc_msgSend_232Stret = objc.msgSendStretPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<_NSRange>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.UnsignedLong)>>()
    .asFunction<
        void Function(ffi.Pointer<_NSRange>, ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_rangeOfComposedCharacterSequencesForRange_ =
    objc.registerName("rangeOfComposedCharacterSequencesForRange:");
final _objc_msgSend_233 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            _NSRange Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, _NSRange)>>()
    .asFunction<
        _NSRange Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, _NSRange)>();
final _objc_msgSend_233Stret = objc.msgSendStretPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<_NSRange>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                _NSRange)>>()
    .asFunction<
        void Function(ffi.Pointer<_NSRange>, ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, _NSRange)>();
late final _sel_stringByAppendingString_ =
    objc.registerName("stringByAppendingString:");
late final _sel_stringByAppendingFormat_ =
    objc.registerName("stringByAppendingFormat:");
late final _sel_uppercaseString = objc.registerName("uppercaseString");
late final _sel_lowercaseString = objc.registerName("lowercaseString");
late final _sel_capitalizedString = objc.registerName("capitalizedString");
late final _sel_localizedUppercaseString =
    objc.registerName("localizedUppercaseString");
late final _sel_localizedLowercaseString =
    objc.registerName("localizedLowercaseString");
late final _sel_localizedCapitalizedString =
    objc.registerName("localizedCapitalizedString");
late final _sel_uppercaseStringWithLocale_ =
    objc.registerName("uppercaseStringWithLocale:");
final _objc_msgSend_234 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_lowercaseStringWithLocale_ =
    objc.registerName("lowercaseStringWithLocale:");
late final _sel_capitalizedStringWithLocale_ =
    objc.registerName("capitalizedStringWithLocale:");
late final _sel_getLineStart_end_contentsEnd_forRange_ =
    objc.registerName("getLineStart:end:contentsEnd:forRange:");
final _objc_msgSend_235 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<ffi.UnsignedLong>,
                ffi.Pointer<ffi.UnsignedLong>,
                ffi.Pointer<ffi.UnsignedLong>,
                _NSRange)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<ffi.UnsignedLong>,
            ffi.Pointer<ffi.UnsignedLong>,
            ffi.Pointer<ffi.UnsignedLong>,
            _NSRange)>();
late final _sel_lineRangeForRange_ = objc.registerName("lineRangeForRange:");
late final _sel_getParagraphStart_end_contentsEnd_forRange_ =
    objc.registerName("getParagraphStart:end:contentsEnd:forRange:");
late final _sel_paragraphRangeForRange_ =
    objc.registerName("paragraphRangeForRange:");

abstract class NSStringEnumerationOptions {
  static const int NSStringEnumerationByLines = 0;
  static const int NSStringEnumerationByParagraphs = 1;
  static const int NSStringEnumerationByComposedCharacterSequences = 2;
  static const int NSStringEnumerationByWords = 3;
  static const int NSStringEnumerationBySentences = 4;
  static const int NSStringEnumerationByCaretPositions = 5;
  static const int NSStringEnumerationByDeletionClusters = 6;
  static const int NSStringEnumerationReverse = 256;
  static const int NSStringEnumerationSubstringNotRequired = 512;
  static const int NSStringEnumerationLocalized = 1024;
}

void _ObjCBlock_ffiVoid_NSString_NSRange_NSRange_bool_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlock> block,
        ffi.Pointer<objc.ObjCObject> arg0,
        _NSRange arg1,
        _NSRange arg2,
        ffi.Pointer<ffi.Bool> arg3) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(
                    ffi.Pointer<objc.ObjCObject> arg0,
                    _NSRange arg1,
                    _NSRange arg2,
                    ffi.Pointer<ffi.Bool> arg3)>>()
        .asFunction<
            void Function(ffi.Pointer<objc.ObjCObject>, _NSRange, _NSRange,
                ffi.Pointer<ffi.Bool>)>()(arg0, arg1, arg2, arg3);
void _ObjCBlock_ffiVoid_NSString_NSRange_NSRange_bool_closureTrampoline(
        ffi.Pointer<objc.ObjCBlock> block,
        ffi.Pointer<objc.ObjCObject> arg0,
        _NSRange arg1,
        _NSRange arg2,
        ffi.Pointer<ffi.Bool> arg3) =>
    (objc.getBlockClosure(block) as void Function(ffi.Pointer<objc.ObjCObject>,
        _NSRange, _NSRange, ffi.Pointer<ffi.Bool>))(arg0, arg1, arg2, arg3);

class ObjCBlock_ffiVoid_NSString_NSRange_NSRange_bool
    extends objc.ObjCBlockBase {
  ObjCBlock_ffiVoid_NSString_NSRange_NSRange_bool._(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = true})
      : super(pointer, retain: retain, release: release);

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_ffiVoid_NSString_NSRange_NSRange_bool castFromPointer(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = false}) {
    return ObjCBlock_ffiVoid_NSString_NSRange_NSRange_bool._(pointer,
        retain: retain, release: release);
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSString_NSRange_NSRange_bool.fromFunctionPointer(
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<objc.ObjCObject> arg0,
                      _NSRange arg1,
                      _NSRange arg2,
                      ffi.Pointer<ffi.Bool> arg3)>>
          ptr)
      : this._(objc.newPointerBlock(
            _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<objc.ObjCObject>,
                            _NSRange,
                            _NSRange,
                            ffi.Pointer<ffi.Bool>)>(
                    _ObjCBlock_ffiVoid_NSString_NSRange_NSRange_bool_fnPtrTrampoline)
                .cast(),
            ptr.cast()));
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSString_NSRange_NSRange_bool.fromFunction(
      void Function(NSString?, _NSRange, _NSRange, ffi.Pointer<ffi.Bool>) fn)
      : this._(objc.newClosureBlock(
            _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<objc.ObjCObject>,
                            _NSRange,
                            _NSRange,
                            ffi.Pointer<ffi.Bool>)>(
                    _ObjCBlock_ffiVoid_NSString_NSRange_NSRange_bool_closureTrampoline)
                .cast(),
            (ffi.Pointer<objc.ObjCObject> arg0, _NSRange arg1, _NSRange arg2,
                    ffi.Pointer<ffi.Bool> arg3) =>
                fn(arg0.address == 0 ? null : NSString.castFromPointer(arg0, retain: true, release: true), arg1, arg2, arg3)));
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_NSString_NSRange_NSRange_bool.listener(
      void Function(NSString?, _NSRange, _NSRange, ffi.Pointer<ffi.Bool>) fn)
      : this._(objc.newClosureBlock(
            (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                        ffi.Void Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<objc.ObjCObject>,
                            _NSRange,
                            _NSRange,
                            ffi.Pointer<ffi.Bool>)>.listener(
                    _ObjCBlock_ffiVoid_NSString_NSRange_NSRange_bool_closureTrampoline)
                  ..keepIsolateAlive = false)
                .nativeFunction
                .cast(),
            (ffi.Pointer<objc.ObjCObject> arg0, _NSRange arg1, _NSRange arg2,
                    ffi.Pointer<ffi.Bool> arg3) =>
                fn(arg0.address == 0 ? null : NSString.castFromPointer(arg0, retain: true, release: true), arg1, arg2, arg3)));
  static ffi.NativeCallable<
      ffi.Void Function(
          ffi.Pointer<objc.ObjCBlock>,
          ffi.Pointer<objc.ObjCObject>,
          _NSRange,
          _NSRange,
          ffi.Pointer<ffi.Bool>)>? _dartFuncListenerTrampoline;

  void call(NSString? arg0, _NSRange arg1, _NSRange arg2,
          ffi.Pointer<ffi.Bool> arg3) =>
      pointer.ref.invoke
              .cast<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<objc.ObjCBlock> block,
                          ffi.Pointer<objc.ObjCObject> arg0,
                          _NSRange arg1,
                          _NSRange arg2,
                          ffi.Pointer<ffi.Bool> arg3)>>()
              .asFunction<
                  void Function(
                      ffi.Pointer<objc.ObjCBlock>,
                      ffi.Pointer<objc.ObjCObject>,
                      _NSRange,
                      _NSRange,
                      ffi.Pointer<ffi.Bool>)>()(
          pointer, arg0?.pointer ?? ffi.nullptr, arg1, arg2, arg3);
}

late final _sel_enumerateSubstringsInRange_options_usingBlock_ =
    objc.registerName("enumerateSubstringsInRange:options:usingBlock:");
final _objc_msgSend_236 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                _NSRange,
                ffi.Int32,
                ffi.Pointer<objc.ObjCBlock>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            _NSRange,
            int,
            ffi.Pointer<objc.ObjCBlock>)>();
void _ObjCBlock_ffiVoid_NSString_bool_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlock> block,
        ffi.Pointer<objc.ObjCObject> arg0,
        ffi.Pointer<ffi.Bool> arg1) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0,
                    ffi.Pointer<ffi.Bool> arg1)>>()
        .asFunction<
            void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<ffi.Bool>)>()(arg0, arg1);
void _ObjCBlock_ffiVoid_NSString_bool_closureTrampoline(
        ffi.Pointer<objc.ObjCBlock> block,
        ffi.Pointer<objc.ObjCObject> arg0,
        ffi.Pointer<ffi.Bool> arg1) =>
    (objc.getBlockClosure(block) as void Function(
        ffi.Pointer<objc.ObjCObject>, ffi.Pointer<ffi.Bool>))(arg0, arg1);

class ObjCBlock_ffiVoid_NSString_bool extends objc.ObjCBlockBase {
  ObjCBlock_ffiVoid_NSString_bool._(ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false, bool release = true})
      : super(pointer, retain: retain, release: release);

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_ffiVoid_NSString_bool castFromPointer(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = false}) {
    return ObjCBlock_ffiVoid_NSString_bool._(pointer,
        retain: retain, release: release);
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSString_bool.fromFunctionPointer(
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0,
                      ffi.Pointer<ffi.Bool> arg1)>>
          ptr)
      : this._(
            objc
                .newPointerBlock(
                    _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                                ffi.Void Function(
                                    ffi.Pointer<objc.ObjCBlock>,
                                    ffi.Pointer<objc.ObjCObject>,
                                    ffi.Pointer<ffi.Bool>)>(
                            _ObjCBlock_ffiVoid_NSString_bool_fnPtrTrampoline)
                        .cast(),
                    ptr.cast()));
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSString_bool.fromFunction(
      void Function(NSString, ffi.Pointer<ffi.Bool>) fn)
      : this._(objc.newClosureBlock(
            _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<ffi.Bool>)>(
                    _ObjCBlock_ffiVoid_NSString_bool_closureTrampoline)
                .cast(),
            (ffi.Pointer<objc.ObjCObject> arg0, ffi.Pointer<ffi.Bool> arg1) =>
                fn(NSString.castFromPointer(arg0, retain: true, release: true),
                    arg1)));
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_NSString_bool.listener(
      void Function(NSString, ffi.Pointer<ffi.Bool>) fn)
      : this._(objc.newClosureBlock(
            (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                        ffi.Void Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<ffi.Bool>)>.listener(
                    _ObjCBlock_ffiVoid_NSString_bool_closureTrampoline)
                  ..keepIsolateAlive = false)
                .nativeFunction
                .cast(),
            (ffi.Pointer<objc.ObjCObject> arg0, ffi.Pointer<ffi.Bool> arg1) =>
                fn(NSString.castFromPointer(arg0, retain: true, release: true),
                    arg1)));
  static ffi.NativeCallable<
      ffi.Void Function(
          ffi.Pointer<objc.ObjCBlock>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<ffi.Bool>)>? _dartFuncListenerTrampoline;

  void call(NSString arg0, ffi.Pointer<ffi.Bool> arg1) => pointer.ref.invoke
      .cast<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<objc.ObjCBlock> block,
                  ffi.Pointer<objc.ObjCObject> arg0,
                  ffi.Pointer<ffi.Bool> arg1)>>()
      .asFunction<
          void Function(
              ffi.Pointer<objc.ObjCBlock>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<ffi.Bool>)>()(pointer, arg0.pointer, arg1);
}

late final _sel_enumerateLinesUsingBlock_ =
    objc.registerName("enumerateLinesUsingBlock:");
final _objc_msgSend_237 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCBlock>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCBlock>)>();
late final _sel_UTF8String = objc.registerName("UTF8String");
late final _sel_fastestEncoding = objc.registerName("fastestEncoding");
late final _sel_smallestEncoding = objc.registerName("smallestEncoding");
late final _sel_dataUsingEncoding_allowLossyConversion_ =
    objc.registerName("dataUsingEncoding:allowLossyConversion:");
final _objc_msgSend_238 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedLong, ffi.Bool)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int, bool)>();
late final _sel_dataUsingEncoding_ = objc.registerName("dataUsingEncoding:");
final _objc_msgSend_239 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedLong)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_canBeConvertedToEncoding_ =
    objc.registerName("canBeConvertedToEncoding:");
late final _sel_cStringUsingEncoding_ =
    objc.registerName("cStringUsingEncoding:");
final _objc_msgSend_240 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<ffi.Char> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedLong)>>()
    .asFunction<
        ffi.Pointer<ffi.Char> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_getCString_maxLength_encoding_ =
    objc.registerName("getCString:maxLength:encoding:");
final _objc_msgSend_241 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<ffi.Char>,
                ffi.UnsignedLong,
                ffi.UnsignedLong)>>()
    .asFunction<
        bool Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<ffi.Char>, int, int)>();

abstract class NSStringEncodingConversionOptions {
  static const int NSStringEncodingConversionAllowLossy = 1;
  static const int NSStringEncodingConversionExternalRepresentation = 2;
}

late final _sel_getBytes_maxLength_usedLength_encoding_options_range_remainingRange_ =
    objc.registerName(
        "getBytes:maxLength:usedLength:encoding:options:range:remainingRange:");
final _objc_msgSend_242 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<ffi.Void>,
                ffi.UnsignedLong,
                ffi.Pointer<ffi.UnsignedLong>,
                ffi.UnsignedLong,
                ffi.Int32,
                _NSRange,
                ffi.Pointer<_NSRange>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<ffi.Void>,
            int,
            ffi.Pointer<ffi.UnsignedLong>,
            int,
            int,
            _NSRange,
            ffi.Pointer<_NSRange>)>();
late final _sel_maximumLengthOfBytesUsingEncoding_ =
    objc.registerName("maximumLengthOfBytesUsingEncoding:");
late final _sel_lengthOfBytesUsingEncoding_ =
    objc.registerName("lengthOfBytesUsingEncoding:");
late final _sel_availableStringEncodings =
    objc.registerName("availableStringEncodings");
final _objc_msgSend_243 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<ffi.UnsignedLong> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<ffi.UnsignedLong> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_localizedNameOfStringEncoding_ =
    objc.registerName("localizedNameOfStringEncoding:");
late final _sel_defaultCStringEncoding =
    objc.registerName("defaultCStringEncoding");
late final _sel_decomposedStringWithCanonicalMapping =
    objc.registerName("decomposedStringWithCanonicalMapping");
late final _sel_precomposedStringWithCanonicalMapping =
    objc.registerName("precomposedStringWithCanonicalMapping");
late final _sel_decomposedStringWithCompatibilityMapping =
    objc.registerName("decomposedStringWithCompatibilityMapping");
late final _sel_precomposedStringWithCompatibilityMapping =
    objc.registerName("precomposedStringWithCompatibilityMapping");
late final _sel_componentsSeparatedByString_ =
    objc.registerName("componentsSeparatedByString:");
final _objc_msgSend_244 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_componentsSeparatedByCharactersInSet_ =
    objc.registerName("componentsSeparatedByCharactersInSet:");
final _objc_msgSend_245 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_stringByTrimmingCharactersInSet_ =
    objc.registerName("stringByTrimmingCharactersInSet:");
final _objc_msgSend_246 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_stringByPaddingToLength_withString_startingAtIndex_ =
    objc.registerName("stringByPaddingToLength:withString:startingAtIndex:");
final _objc_msgSend_247 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.UnsignedLong,
                ffi.Pointer<objc.ObjCObject>,
                ffi.UnsignedLong)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int,
            ffi.Pointer<objc.ObjCObject>,
            int)>();
late final _sel_stringByFoldingWithOptions_locale_ =
    objc.registerName("stringByFoldingWithOptions:locale:");
final _objc_msgSend_248 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Int32,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_stringByReplacingOccurrencesOfString_withString_options_range_ =
    objc.registerName(
        "stringByReplacingOccurrencesOfString:withString:options:range:");
final _objc_msgSend_249 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Int32,
                _NSRange)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            _NSRange)>();
late final _sel_stringByReplacingOccurrencesOfString_withString_ =
    objc.registerName("stringByReplacingOccurrencesOfString:withString:");
final _objc_msgSend_250 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_stringByReplacingCharactersInRange_withString_ =
    objc.registerName("stringByReplacingCharactersInRange:withString:");
final _objc_msgSend_251 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                _NSRange,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            _NSRange,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_stringByApplyingTransform_reverse_ =
    objc.registerName("stringByApplyingTransform:reverse:");
final _objc_msgSend_252 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Bool)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            bool)>();
late final _sel_writeToURL_atomically_encoding_error_ =
    objc.registerName("writeToURL:atomically:encoding:error:");
final _objc_msgSend_253 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Bool,
                ffi.UnsignedLong,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            bool,
            int,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_writeToFile_atomically_encoding_error_ =
    objc.registerName("writeToFile:atomically:encoding:error:");
final _objc_msgSend_254 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Bool,
                ffi.UnsignedLong,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            bool,
            int,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_initWithCharactersNoCopy_length_freeWhenDone_ =
    objc.registerName("initWithCharactersNoCopy:length:freeWhenDone:");
final _objc_msgSend_255 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<ffi.UnsignedShort>,
                ffi.UnsignedLong,
                ffi.Bool)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<ffi.UnsignedShort>,
            int,
            bool)>();
void _ObjCBlock_ffiVoid_ffiUnsignedShort_ffiUnsignedLong_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlock> block,
        ffi.Pointer<ffi.UnsignedShort> arg0,
        int arg1) =>
    block.ref.target
            .cast<
                ffi.NativeFunction<
                    ffi.Void Function(ffi.Pointer<ffi.UnsignedShort> arg0,
                        ffi.UnsignedLong arg1)>>()
            .asFunction<void Function(ffi.Pointer<ffi.UnsignedShort>, int)>()(
        arg0, arg1);
void _ObjCBlock_ffiVoid_ffiUnsignedShort_ffiUnsignedLong_closureTrampoline(
        ffi.Pointer<objc.ObjCBlock> block,
        ffi.Pointer<ffi.UnsignedShort> arg0,
        int arg1) =>
    (objc.getBlockClosure(block) as void Function(
        ffi.Pointer<ffi.UnsignedShort>, int))(arg0, arg1);

class ObjCBlock_ffiVoid_ffiUnsignedShort_ffiUnsignedLong
    extends objc.ObjCBlockBase {
  ObjCBlock_ffiVoid_ffiUnsignedShort_ffiUnsignedLong._(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = true})
      : super(pointer, retain: retain, release: release);

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_ffiVoid_ffiUnsignedShort_ffiUnsignedLong castFromPointer(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = false}) {
    return ObjCBlock_ffiVoid_ffiUnsignedShort_ffiUnsignedLong._(pointer,
        retain: retain, release: release);
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_ffiUnsignedShort_ffiUnsignedLong.fromFunctionPointer(
      ffi
          .Pointer<
              ffi
              .NativeFunction<
                  ffi.Void Function(ffi.Pointer<ffi.UnsignedShort> arg0,
                      ffi.UnsignedLong arg1)>>
          ptr)
      : this._(objc.newPointerBlock(
            _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<ffi.UnsignedShort>, ffi.UnsignedLong)>(
                    _ObjCBlock_ffiVoid_ffiUnsignedShort_ffiUnsignedLong_fnPtrTrampoline)
                .cast(),
            ptr.cast()));
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_ffiUnsignedShort_ffiUnsignedLong.fromFunction(
      void Function(ffi.Pointer<ffi.UnsignedShort>, int) fn)
      : this._(objc.newClosureBlock(
            _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<ffi.UnsignedShort>, ffi.UnsignedLong)>(
                    _ObjCBlock_ffiVoid_ffiUnsignedShort_ffiUnsignedLong_closureTrampoline)
                .cast(),
            (ffi.Pointer<ffi.UnsignedShort> arg0, int arg1) => fn(arg0, arg1)));
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_ffiUnsignedShort_ffiUnsignedLong.listener(
      void Function(ffi.Pointer<ffi.UnsignedShort>, int) fn)
      : this._(objc.newClosureBlock(
            (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                        ffi.Void Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<ffi.UnsignedShort>,
                            ffi.UnsignedLong)>.listener(
                    _ObjCBlock_ffiVoid_ffiUnsignedShort_ffiUnsignedLong_closureTrampoline)
                  ..keepIsolateAlive = false)
                .nativeFunction
                .cast(),
            (ffi.Pointer<ffi.UnsignedShort> arg0, int arg1) => fn(arg0, arg1)));
  static ffi.NativeCallable<
      ffi.Void Function(
          ffi.Pointer<objc.ObjCBlock>,
          ffi.Pointer<ffi.UnsignedShort>,
          ffi.UnsignedLong)>? _dartFuncListenerTrampoline;

  void call(ffi.Pointer<ffi.UnsignedShort> arg0, int arg1) => pointer.ref.invoke
      .cast<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<objc.ObjCBlock> block,
                  ffi.Pointer<ffi.UnsignedShort> arg0,
                  ffi.UnsignedLong arg1)>>()
      .asFunction<
          void Function(ffi.Pointer<objc.ObjCBlock>,
              ffi.Pointer<ffi.UnsignedShort>, int)>()(pointer, arg0, arg1);
}

late final _sel_initWithCharactersNoCopy_length_deallocator_ =
    objc.registerName("initWithCharactersNoCopy:length:deallocator:");
final _objc_msgSend_256 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<ffi.UnsignedShort>,
                ffi.UnsignedLong,
                ffi.Pointer<objc.ObjCBlock>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<ffi.UnsignedShort>,
            int,
            ffi.Pointer<objc.ObjCBlock>)>();
late final _sel_initWithCharacters_length_ =
    objc.registerName("initWithCharacters:length:");
final _objc_msgSend_257 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<ffi.UnsignedShort>,
                ffi.UnsignedLong)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<ffi.UnsignedShort>,
            int)>();
late final _sel_initWithUTF8String_ = objc.registerName("initWithUTF8String:");
final _objc_msgSend_258 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<ffi.Char>)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<ffi.Char>)>();
late final _sel_initWithFormat_ = objc.registerName("initWithFormat:");

final class __va_list_tag extends ffi.Struct {
  @ffi.UnsignedInt()
  external int gp_offset;

  @ffi.UnsignedInt()
  external int fp_offset;

  external ffi.Pointer<ffi.Void> overflow_arg_area;

  external ffi.Pointer<ffi.Void> reg_save_area;
}

late final _sel_initWithFormat_arguments_ =
    objc.registerName("initWithFormat:arguments:");
final _objc_msgSend_259 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<__va_list_tag>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<__va_list_tag>)>();
late final _sel_initWithFormat_locale_ =
    objc.registerName("initWithFormat:locale:");
final _objc_msgSend_260 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_initWithFormat_locale_arguments_ =
    objc.registerName("initWithFormat:locale:arguments:");
final _objc_msgSend_261 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<__va_list_tag>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<__va_list_tag>)>();
late final _sel_initWithValidatedFormat_validFormatSpecifiers_error_ =
    objc.registerName("initWithValidatedFormat:validFormatSpecifiers:error:");
final _objc_msgSend_262 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_initWithValidatedFormat_validFormatSpecifiers_locale_error_ =
    objc.registerName(
        "initWithValidatedFormat:validFormatSpecifiers:locale:error:");
final _objc_msgSend_263 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_initWithValidatedFormat_validFormatSpecifiers_arguments_error_ =
    objc.registerName(
        "initWithValidatedFormat:validFormatSpecifiers:arguments:error:");
final _objc_msgSend_264 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<__va_list_tag>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<__va_list_tag>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_initWithValidatedFormat_validFormatSpecifiers_locale_arguments_error_ =
    objc.registerName(
        "initWithValidatedFormat:validFormatSpecifiers:locale:arguments:error:");
final _objc_msgSend_265 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<__va_list_tag>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<__va_list_tag>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_initWithData_encoding_ =
    objc.registerName("initWithData:encoding:");
final _objc_msgSend_266 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.UnsignedLong)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int)>();
late final _sel_initWithBytes_length_encoding_ =
    objc.registerName("initWithBytes:length:encoding:");
final _objc_msgSend_267 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<ffi.Void>,
                ffi.UnsignedLong,
                ffi.UnsignedLong)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<ffi.Void>, int, int)>();
late final _sel_initWithBytesNoCopy_length_encoding_freeWhenDone_ =
    objc.registerName("initWithBytesNoCopy:length:encoding:freeWhenDone:");
final _objc_msgSend_268 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<ffi.Void>,
                ffi.UnsignedLong,
                ffi.UnsignedLong,
                ffi.Bool)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<ffi.Void>,
            int,
            int,
            bool)>();
late final _sel_initWithBytesNoCopy_length_encoding_deallocator_ =
    objc.registerName("initWithBytesNoCopy:length:encoding:deallocator:");
final _objc_msgSend_269 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<ffi.Void>,
                ffi.UnsignedLong,
                ffi.UnsignedLong,
                ffi.Pointer<objc.ObjCBlock>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<ffi.Void>,
            int,
            int,
            ffi.Pointer<objc.ObjCBlock>)>();
late final _sel_string = objc.registerName("string");
late final _sel_stringWithString_ = objc.registerName("stringWithString:");
late final _sel_stringWithCharacters_length_ =
    objc.registerName("stringWithCharacters:length:");
late final _sel_stringWithUTF8String_ =
    objc.registerName("stringWithUTF8String:");
late final _sel_stringWithFormat_ = objc.registerName("stringWithFormat:");
late final _sel_localizedStringWithFormat_ =
    objc.registerName("localizedStringWithFormat:");
late final _sel_stringWithValidatedFormat_validFormatSpecifiers_error_ =
    objc.registerName("stringWithValidatedFormat:validFormatSpecifiers:error:");
late final _sel_localizedStringWithValidatedFormat_validFormatSpecifiers_error_ =
    objc.registerName(
        "localizedStringWithValidatedFormat:validFormatSpecifiers:error:");
late final _sel_initWithCString_encoding_ =
    objc.registerName("initWithCString:encoding:");
final _objc_msgSend_270 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<ffi.Char>,
                ffi.UnsignedLong)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<ffi.Char>, int)>();
late final _sel_stringWithCString_encoding_ =
    objc.registerName("stringWithCString:encoding:");
late final _sel_initWithContentsOfURL_encoding_error_ =
    objc.registerName("initWithContentsOfURL:encoding:error:");
final _objc_msgSend_271 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.UnsignedLong,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_initWithContentsOfFile_encoding_error_ =
    objc.registerName("initWithContentsOfFile:encoding:error:");
final _objc_msgSend_272 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.UnsignedLong,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_stringWithContentsOfURL_encoding_error_ =
    objc.registerName("stringWithContentsOfURL:encoding:error:");
late final _sel_stringWithContentsOfFile_encoding_error_ =
    objc.registerName("stringWithContentsOfFile:encoding:error:");
late final _sel_initWithContentsOfURL_usedEncoding_error_ =
    objc.registerName("initWithContentsOfURL:usedEncoding:error:");
final _objc_msgSend_273 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<ffi.UnsignedLong>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<ffi.UnsignedLong>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_initWithContentsOfFile_usedEncoding_error_ =
    objc.registerName("initWithContentsOfFile:usedEncoding:error:");
final _objc_msgSend_274 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<ffi.UnsignedLong>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<ffi.UnsignedLong>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_stringWithContentsOfURL_usedEncoding_error_ =
    objc.registerName("stringWithContentsOfURL:usedEncoding:error:");
late final _sel_stringWithContentsOfFile_usedEncoding_error_ =
    objc.registerName("stringWithContentsOfFile:usedEncoding:error:");
late final _sel_stringEncodingForData_encodingOptions_convertedString_usedLossyConversion_ =
    objc.registerName(
        "stringEncodingForData:encodingOptions:convertedString:usedLossyConversion:");
final _objc_msgSend_275 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
                ffi.Pointer<ffi.Bool>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
            ffi.Pointer<ffi.Bool>)>();
late final _sel_propertyList = objc.registerName("propertyList");
late final _sel_propertyListFromStringsFileFormat =
    objc.registerName("propertyListFromStringsFileFormat");
final _objc_msgSend_276 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_cString = objc.registerName("cString");
late final _sel_lossyCString = objc.registerName("lossyCString");
late final _sel_cStringLength = objc.registerName("cStringLength");
late final _sel_getCString_ = objc.registerName("getCString:");
final _objc_msgSend_277 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<ffi.Char>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<ffi.Char>)>();
late final _sel_getCString_maxLength_ =
    objc.registerName("getCString:maxLength:");
final _objc_msgSend_278 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<ffi.Char>,
                ffi.UnsignedLong)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<ffi.Char>, int)>();
late final _sel_getCString_maxLength_range_remainingRange_ =
    objc.registerName("getCString:maxLength:range:remainingRange:");
final _objc_msgSend_279 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<ffi.Char>,
                ffi.UnsignedLong,
                _NSRange,
                ffi.Pointer<_NSRange>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<ffi.Char>,
            int,
            _NSRange,
            ffi.Pointer<_NSRange>)>();
late final _sel_stringWithContentsOfFile_ =
    objc.registerName("stringWithContentsOfFile:");
late final _sel_stringWithContentsOfURL_ =
    objc.registerName("stringWithContentsOfURL:");
late final _sel_initWithCStringNoCopy_length_freeWhenDone_ =
    objc.registerName("initWithCStringNoCopy:length:freeWhenDone:");
final _objc_msgSend_280 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<ffi.Char>,
                ffi.UnsignedLong,
                ffi.Bool)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<ffi.Char>,
            int,
            bool)>();
late final _sel_initWithCString_length_ =
    objc.registerName("initWithCString:length:");
late final _sel_initWithCString_ = objc.registerName("initWithCString:");
late final _sel_stringWithCString_length_ =
    objc.registerName("stringWithCString:length:");
late final _sel_stringWithCString_ = objc.registerName("stringWithCString:");
late final _sel_getCharacters_ = objc.registerName("getCharacters:");
final _objc_msgSend_281 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<ffi.UnsignedShort>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<ffi.UnsignedShort>)>();
late final _sel_stringByAddingPercentEncodingWithAllowedCharacters_ =
    objc.registerName("stringByAddingPercentEncodingWithAllowedCharacters:");
final _objc_msgSend_282 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_stringByRemovingPercentEncoding =
    objc.registerName("stringByRemovingPercentEncoding");
late final _sel_stringByAddingPercentEscapesUsingEncoding_ =
    objc.registerName("stringByAddingPercentEscapesUsingEncoding:");
final _objc_msgSend_283 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedLong)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_stringByReplacingPercentEscapesUsingEncoding_ =
    objc.registerName("stringByReplacingPercentEscapesUsingEncoding:");
late final _sel_debugDescription = objc.registerName("debugDescription");
late final _sel_version = objc.registerName("version");
late final _sel_setVersion_ = objc.registerName("setVersion:");
final _objc_msgSend_284 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Long)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_classForCoder = objc.registerName("classForCoder");
late final _sel_replacementObjectForCoder_ =
    objc.registerName("replacementObjectForCoder:");
late final _sel_awakeAfterUsingCoder_ =
    objc.registerName("awakeAfterUsingCoder:");
late final _sel_poseAsClass_ = objc.registerName("poseAsClass:");
late final _sel_autoContentAccessingProxy =
    objc.registerName("autoContentAccessingProxy");
late final _sel_URL_resourceDataDidBecomeAvailable_ =
    objc.registerName("URL:resourceDataDidBecomeAvailable:");
final _objc_msgSend_285 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_URLResourceDidFinishLoading_ =
    objc.registerName("URLResourceDidFinishLoading:");
final _objc_msgSend_286 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_URLResourceDidCancelLoading_ =
    objc.registerName("URLResourceDidCancelLoading:");
late final _sel_URL_resourceDidFailLoadingWithReason_ =
    objc.registerName("URL:resourceDidFailLoadingWithReason:");
final _objc_msgSend_287 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();

class NSMutableArray extends NSArray {
  NSMutableArray._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSMutableArray] that points to the same underlying object as [other].
  NSMutableArray.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSMutableArray] that wraps the given raw object pointer.
  NSMutableArray.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSMutableArray].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSMutableArray);
  }

  void addObject_(objc.ObjCObjectBase anObject) {
    _objc_msgSend_198(this.pointer, _sel_addObject_, anObject.pointer);
  }

  void insertObject_atIndex_(objc.ObjCObjectBase anObject, int index) {
    _objc_msgSend_288(
        this.pointer, _sel_insertObject_atIndex_, anObject.pointer, index);
  }

  void removeLastObject() {
    _objc_msgSend_1(this.pointer, _sel_removeLastObject);
  }

  void removeObjectAtIndex_(int index) {
    _objc_msgSend_289(this.pointer, _sel_removeObjectAtIndex_, index);
  }

  void replaceObjectAtIndex_withObject_(
      int index, objc.ObjCObjectBase anObject) {
    _objc_msgSend_290(this.pointer, _sel_replaceObjectAtIndex_withObject_,
        index, anObject.pointer);
  }

  @override
  NSMutableArray init() {
    final _ret = _objc_msgSend_2(this.pointer, _sel_init);
    return NSMutableArray.castFromPointer(_ret, retain: true, release: true);
  }

  NSMutableArray initWithCapacity_(int numItems) {
    final _ret =
        _objc_msgSend_97(this.pointer, _sel_initWithCapacity_, numItems);
    return NSMutableArray.castFromPointer(_ret, retain: true, release: true);
  }

  @override
  NSMutableArray? initWithCoder_(NSCoder coder) {
    final _ret =
        _objc_msgSend_14(this.pointer, _sel_initWithCoder_, coder.pointer);
    return _ret.address == 0
        ? null
        : NSMutableArray.castFromPointer(_ret, retain: true, release: true);
  }

  void addObjectsFromArray_(NSArray otherArray) {
    _objc_msgSend_291(
        this.pointer, _sel_addObjectsFromArray_, otherArray.pointer);
  }

  void exchangeObjectAtIndex_withObjectAtIndex_(int idx1, int idx2) {
    _objc_msgSend_292(this.pointer,
        _sel_exchangeObjectAtIndex_withObjectAtIndex_, idx1, idx2);
  }

  void removeAllObjects() {
    _objc_msgSend_1(this.pointer, _sel_removeAllObjects);
  }

  void removeObject_inRange_(objc.ObjCObjectBase anObject, _NSRange range) {
    _objc_msgSend_293(
        this.pointer, _sel_removeObject_inRange_, anObject.pointer, range);
  }

  void removeObject_(objc.ObjCObjectBase anObject) {
    _objc_msgSend_198(this.pointer, _sel_removeObject_, anObject.pointer);
  }

  void removeObjectIdenticalTo_inRange_(
      objc.ObjCObjectBase anObject, _NSRange range) {
    _objc_msgSend_293(this.pointer, _sel_removeObjectIdenticalTo_inRange_,
        anObject.pointer, range);
  }

  void removeObjectIdenticalTo_(objc.ObjCObjectBase anObject) {
    _objc_msgSend_198(
        this.pointer, _sel_removeObjectIdenticalTo_, anObject.pointer);
  }

  void removeObjectsFromIndices_numIndices_(
      ffi.Pointer<ffi.UnsignedLong> indices, int cnt) {
    _objc_msgSend_294(
        this.pointer, _sel_removeObjectsFromIndices_numIndices_, indices, cnt);
  }

  void removeObjectsInArray_(NSArray otherArray) {
    _objc_msgSend_291(
        this.pointer, _sel_removeObjectsInArray_, otherArray.pointer);
  }

  void removeObjectsInRange_(_NSRange range) {
    _objc_msgSend_295(this.pointer, _sel_removeObjectsInRange_, range);
  }

  void replaceObjectsInRange_withObjectsFromArray_range_(
      _NSRange range, NSArray otherArray, _NSRange otherRange) {
    _objc_msgSend_296(
        this.pointer,
        _sel_replaceObjectsInRange_withObjectsFromArray_range_,
        range,
        otherArray.pointer,
        otherRange);
  }

  void replaceObjectsInRange_withObjectsFromArray_(
      _NSRange range, NSArray otherArray) {
    _objc_msgSend_297(
        this.pointer,
        _sel_replaceObjectsInRange_withObjectsFromArray_,
        range,
        otherArray.pointer);
  }

  void setArray_(NSArray otherArray) {
    _objc_msgSend_291(this.pointer, _sel_setArray_, otherArray.pointer);
  }

  void sortUsingFunction_context_(
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Long Function(ffi.Pointer<objc.ObjCObject>,
                      ffi.Pointer<objc.ObjCObject>, ffi.Pointer<ffi.Void>)>>
          compare,
      ffi.Pointer<ffi.Void> context) {
    _objc_msgSend_298(
        this.pointer, _sel_sortUsingFunction_context_, compare, context);
  }

  void sortUsingSelector_(ffi.Pointer<objc.ObjCSelector> comparator) {
    _objc_msgSend_7(this.pointer, _sel_sortUsingSelector_, comparator);
  }

  void insertObjects_atIndexes_(NSArray objects, NSIndexSet indexes) {
    _objc_msgSend_299(this.pointer, _sel_insertObjects_atIndexes_,
        objects.pointer, indexes.pointer);
  }

  void removeObjectsAtIndexes_(NSIndexSet indexes) {
    _objc_msgSend_300(
        this.pointer, _sel_removeObjectsAtIndexes_, indexes.pointer);
  }

  void replaceObjectsAtIndexes_withObjects_(
      NSIndexSet indexes, NSArray objects) {
    _objc_msgSend_301(this.pointer, _sel_replaceObjectsAtIndexes_withObjects_,
        indexes.pointer, objects.pointer);
  }

  void setObject_atIndexedSubscript_(objc.ObjCObjectBase obj, int idx) {
    _objc_msgSend_288(
        this.pointer, _sel_setObject_atIndexedSubscript_, obj.pointer, idx);
  }

  void sortUsingComparator_(
      ObjCBlock_NSComparisonResult_objcObjCObject_objcObjCObject cmptr) {
    _objc_msgSend_302(this.pointer, _sel_sortUsingComparator_, cmptr.pointer);
  }

  void sortWithOptions_usingComparator_(int opts,
      ObjCBlock_NSComparisonResult_objcObjCObject_objcObjCObject cmptr) {
    _objc_msgSend_303(this.pointer, _sel_sortWithOptions_usingComparator_, opts,
        cmptr.pointer);
  }

  static NSMutableArray arrayWithCapacity_(int numItems) {
    final _ret = _objc_msgSend_97(
        _class_NSMutableArray, _sel_arrayWithCapacity_, numItems);
    return NSMutableArray.castFromPointer(_ret, retain: true, release: true);
  }

  static NSArray? arrayWithContentsOfFile_(NSString path) {
    final _ret = _objc_msgSend_156(
        _class_NSMutableArray, _sel_arrayWithContentsOfFile_, path.pointer);
    return _ret.address == 0
        ? null
        : NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  static NSArray? arrayWithContentsOfURL_(NSURL url) {
    final _ret = _objc_msgSend_157(
        _class_NSMutableArray, _sel_arrayWithContentsOfURL_, url.pointer);
    return _ret.address == 0
        ? null
        : NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  NSMutableArray? initWithContentsOfFile_(NSString path) {
    final _ret = _objc_msgSend_304(
        this.pointer, _sel_initWithContentsOfFile_, path.pointer);
    return _ret.address == 0
        ? null
        : NSMutableArray.castFromPointer(_ret, retain: true, release: true);
  }

  NSMutableArray? initWithContentsOfURL_(NSURL url) {
    final _ret = _objc_msgSend_305(
        this.pointer, _sel_initWithContentsOfURL_, url.pointer);
    return _ret.address == 0
        ? null
        : NSMutableArray.castFromPointer(_ret, retain: true, release: true);
  }

  void applyDifference_(objc.ObjCObjectBase difference) {
    _objc_msgSend_198(this.pointer, _sel_applyDifference_, difference.pointer);
  }

  @override
  NSMutableArray initWithObjects_count_(
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> objects, int cnt) {
    final _ret = _objc_msgSend_98(
        this.pointer, _sel_initWithObjects_count_, objects, cnt);
    return NSMutableArray.castFromPointer(_ret, retain: true, release: true);
  }

  static NSMutableArray array() {
    final _ret = _objc_msgSend_2(_class_NSMutableArray, _sel_array);
    return NSMutableArray.castFromPointer(_ret, retain: true, release: true);
  }

  static NSMutableArray arrayWithObject_(objc.ObjCObjectBase anObject) {
    final _ret = _objc_msgSend_148(
        _class_NSMutableArray, _sel_arrayWithObject_, anObject.pointer);
    return NSMutableArray.castFromPointer(_ret, retain: true, release: true);
  }

  static NSMutableArray arrayWithObjects_count_(
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> objects, int cnt) {
    final _ret = _objc_msgSend_98(
        _class_NSMutableArray, _sel_arrayWithObjects_count_, objects, cnt);
    return NSMutableArray.castFromPointer(_ret, retain: true, release: true);
  }

  static NSMutableArray arrayWithObjects_(objc.ObjCObjectBase firstObj) {
    final _ret = _objc_msgSend_148(
        _class_NSMutableArray, _sel_arrayWithObjects_, firstObj.pointer);
    return NSMutableArray.castFromPointer(_ret, retain: true, release: true);
  }

  static NSMutableArray arrayWithArray_(NSArray array) {
    final _ret = _objc_msgSend_149(
        _class_NSMutableArray, _sel_arrayWithArray_, array.pointer);
    return NSMutableArray.castFromPointer(_ret, retain: true, release: true);
  }

  @override
  NSMutableArray initWithObjects_(objc.ObjCObjectBase firstObj) {
    final _ret = _objc_msgSend_148(
        this.pointer, _sel_initWithObjects_, firstObj.pointer);
    return NSMutableArray.castFromPointer(_ret, retain: true, release: true);
  }

  @override
  NSMutableArray initWithArray_(NSArray array) {
    final _ret =
        _objc_msgSend_149(this.pointer, _sel_initWithArray_, array.pointer);
    return NSMutableArray.castFromPointer(_ret, retain: true, release: true);
  }

  @override
  NSMutableArray initWithArray_copyItems_(NSArray array, bool flag) {
    final _ret = _objc_msgSend_150(
        this.pointer, _sel_initWithArray_copyItems_, array.pointer, flag);
    return NSMutableArray.castFromPointer(_ret, retain: false, release: true);
  }

  static NSArray? arrayWithContentsOfURL_error_(
      NSURL url, ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    final _ret = _objc_msgSend_151(_class_NSMutableArray,
        _sel_arrayWithContentsOfURL_error_, url.pointer, error);
    return _ret.address == 0
        ? null
        : NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  static NSMutableArray new1() {
    final _ret = _objc_msgSend_2(_class_NSMutableArray, _sel_new);
    return NSMutableArray.castFromPointer(_ret, retain: false, release: true);
  }

  static NSMutableArray allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_3(_class_NSMutableArray, _sel_allocWithZone_, zone);
    return NSMutableArray.castFromPointer(_ret, retain: false, release: true);
  }

  static NSMutableArray alloc() {
    final _ret = _objc_msgSend_2(_class_NSMutableArray, _sel_alloc);
    return NSMutableArray.castFromPointer(_ret, retain: false, release: true);
  }
}

late final _class_NSMutableArray = objc.getClass("NSMutableArray");
late final _sel_addObject_ = objc.registerName("addObject:");
late final _sel_insertObject_atIndex_ =
    objc.registerName("insertObject:atIndex:");
final _objc_msgSend_288 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.UnsignedLong)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int)>();
late final _sel_removeLastObject = objc.registerName("removeLastObject");
late final _sel_removeObjectAtIndex_ =
    objc.registerName("removeObjectAtIndex:");
final _objc_msgSend_289 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedLong)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_replaceObjectAtIndex_withObject_ =
    objc.registerName("replaceObjectAtIndex:withObject:");
final _objc_msgSend_290 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.UnsignedLong,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_initWithCapacity_ = objc.registerName("initWithCapacity:");
late final _sel_addObjectsFromArray_ =
    objc.registerName("addObjectsFromArray:");
final _objc_msgSend_291 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_exchangeObjectAtIndex_withObjectAtIndex_ =
    objc.registerName("exchangeObjectAtIndex:withObjectAtIndex:");
final _objc_msgSend_292 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.UnsignedLong,
                ffi.UnsignedLong)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int, int)>();
late final _sel_removeAllObjects = objc.registerName("removeAllObjects");
late final _sel_removeObject_inRange_ =
    objc.registerName("removeObject:inRange:");
final _objc_msgSend_293 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                _NSRange)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            _NSRange)>();
late final _sel_removeObject_ = objc.registerName("removeObject:");
late final _sel_removeObjectIdenticalTo_inRange_ =
    objc.registerName("removeObjectIdenticalTo:inRange:");
late final _sel_removeObjectIdenticalTo_ =
    objc.registerName("removeObjectIdenticalTo:");
late final _sel_removeObjectsFromIndices_numIndices_ =
    objc.registerName("removeObjectsFromIndices:numIndices:");
final _objc_msgSend_294 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<ffi.UnsignedLong>,
                ffi.UnsignedLong)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<ffi.UnsignedLong>,
            int)>();
late final _sel_removeObjectsInArray_ =
    objc.registerName("removeObjectsInArray:");
late final _sel_removeObjectsInRange_ =
    objc.registerName("removeObjectsInRange:");
final _objc_msgSend_295 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, _NSRange)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, _NSRange)>();
late final _sel_replaceObjectsInRange_withObjectsFromArray_range_ =
    objc.registerName("replaceObjectsInRange:withObjectsFromArray:range:");
final _objc_msgSend_296 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                _NSRange,
                ffi.Pointer<objc.ObjCObject>,
                _NSRange)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            _NSRange,
            ffi.Pointer<objc.ObjCObject>,
            _NSRange)>();
late final _sel_replaceObjectsInRange_withObjectsFromArray_ =
    objc.registerName("replaceObjectsInRange:withObjectsFromArray:");
final _objc_msgSend_297 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                _NSRange,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            _NSRange,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_setArray_ = objc.registerName("setArray:");
late final _sel_sortUsingFunction_context_ =
    objc.registerName("sortUsingFunction:context:");
final _objc_msgSend_298 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<
                    ffi.NativeFunction<
                        ffi.Long Function(
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<ffi.Void>)>>,
                ffi.Pointer<ffi.Void>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Long Function(ffi.Pointer<objc.ObjCObject>,
                        ffi.Pointer<objc.ObjCObject>, ffi.Pointer<ffi.Void>)>>,
            ffi.Pointer<ffi.Void>)>();
late final _sel_sortUsingSelector_ = objc.registerName("sortUsingSelector:");
late final _sel_insertObjects_atIndexes_ =
    objc.registerName("insertObjects:atIndexes:");
final _objc_msgSend_299 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_removeObjectsAtIndexes_ =
    objc.registerName("removeObjectsAtIndexes:");
final _objc_msgSend_300 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_replaceObjectsAtIndexes_withObjects_ =
    objc.registerName("replaceObjectsAtIndexes:withObjects:");
final _objc_msgSend_301 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_setObject_atIndexedSubscript_ =
    objc.registerName("setObject:atIndexedSubscript:");
late final _sel_sortUsingComparator_ =
    objc.registerName("sortUsingComparator:");
final _objc_msgSend_302 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCBlock>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCBlock>)>();
late final _sel_sortWithOptions_usingComparator_ =
    objc.registerName("sortWithOptions:usingComparator:");
final _objc_msgSend_303 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Int32,
                ffi.Pointer<objc.ObjCBlock>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int,
            ffi.Pointer<objc.ObjCBlock>)>();
late final _sel_arrayWithCapacity_ = objc.registerName("arrayWithCapacity:");
final _objc_msgSend_304 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
final _objc_msgSend_305 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_applyDifference_ = objc.registerName("applyDifference:");

class NSMutableData extends NSData {
  NSMutableData._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSMutableData] that points to the same underlying object as [other].
  NSMutableData.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSMutableData] that wraps the given raw object pointer.
  NSMutableData.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSMutableData].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSMutableData);
  }

  ffi.Pointer<ffi.Void> get mutableBytes {
    return _objc_msgSend_31(this.pointer, _sel_mutableBytes);
  }

  @override
  int get length {
    return _objc_msgSend_12(this.pointer, _sel_length);
  }

  set length(int value) {
    return _objc_msgSend_306(this.pointer, _sel_setLength_, value);
  }

  void appendBytes_length_(ffi.Pointer<ffi.Void> bytes, int length) {
    _objc_msgSend_33(this.pointer, _sel_appendBytes_length_, bytes, length);
  }

  void appendData_(NSData other) {
    _objc_msgSend_307(this.pointer, _sel_appendData_, other.pointer);
  }

  void increaseLengthBy_(int extraLength) {
    _objc_msgSend_289(this.pointer, _sel_increaseLengthBy_, extraLength);
  }

  void replaceBytesInRange_withBytes_(
      _NSRange range, ffi.Pointer<ffi.Void> bytes) {
    _objc_msgSend_308(
        this.pointer, _sel_replaceBytesInRange_withBytes_, range, bytes);
  }

  void resetBytesInRange_(_NSRange range) {
    _objc_msgSend_295(this.pointer, _sel_resetBytesInRange_, range);
  }

  void setData_(NSData data) {
    _objc_msgSend_307(this.pointer, _sel_setData_, data.pointer);
  }

  void replaceBytesInRange_withBytes_length_(_NSRange range,
      ffi.Pointer<ffi.Void> replacementBytes, int replacementLength) {
    _objc_msgSend_309(this.pointer, _sel_replaceBytesInRange_withBytes_length_,
        range, replacementBytes, replacementLength);
  }

  static NSMutableData? dataWithCapacity_(int aNumItems) {
    final _ret = _objc_msgSend_310(
        _class_NSMutableData, _sel_dataWithCapacity_, aNumItems);
    return _ret.address == 0
        ? null
        : NSMutableData.castFromPointer(_ret, retain: true, release: true);
  }

  static NSMutableData? dataWithLength_(int length) {
    final _ret =
        _objc_msgSend_310(_class_NSMutableData, _sel_dataWithLength_, length);
    return _ret.address == 0
        ? null
        : NSMutableData.castFromPointer(_ret, retain: true, release: true);
  }

  NSMutableData? initWithCapacity_(int capacity) {
    final _ret =
        _objc_msgSend_310(this.pointer, _sel_initWithCapacity_, capacity);
    return _ret.address == 0
        ? null
        : NSMutableData.castFromPointer(_ret, retain: true, release: true);
  }

  NSMutableData? initWithLength_(int length) {
    final _ret = _objc_msgSend_310(this.pointer, _sel_initWithLength_, length);
    return _ret.address == 0
        ? null
        : NSMutableData.castFromPointer(_ret, retain: true, release: true);
  }

  bool decompressUsingAlgorithm_error_(
      int algorithm, ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    return _objc_msgSend_311(
        this.pointer, _sel_decompressUsingAlgorithm_error_, algorithm, error);
  }

  bool compressUsingAlgorithm_error_(
      int algorithm, ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    return _objc_msgSend_311(
        this.pointer, _sel_compressUsingAlgorithm_error_, algorithm, error);
  }

  static NSMutableData data() {
    final _ret = _objc_msgSend_2(_class_NSMutableData, _sel_data);
    return NSMutableData.castFromPointer(_ret, retain: true, release: true);
  }

  static NSMutableData dataWithBytes_length_(
      ffi.Pointer<ffi.Void> bytes, int length) {
    final _ret = _objc_msgSend_210(
        _class_NSMutableData, _sel_dataWithBytes_length_, bytes, length);
    return NSMutableData.castFromPointer(_ret, retain: true, release: true);
  }

  static NSMutableData dataWithBytesNoCopy_length_(
      ffi.Pointer<ffi.Void> bytes, int length) {
    final _ret = _objc_msgSend_210(
        _class_NSMutableData, _sel_dataWithBytesNoCopy_length_, bytes, length);
    return NSMutableData.castFromPointer(_ret, retain: false, release: true);
  }

  static NSMutableData dataWithBytesNoCopy_length_freeWhenDone_(
      ffi.Pointer<ffi.Void> bytes, int length, bool b) {
    final _ret = _objc_msgSend_211(_class_NSMutableData,
        _sel_dataWithBytesNoCopy_length_freeWhenDone_, bytes, length, b);
    return NSMutableData.castFromPointer(_ret, retain: false, release: true);
  }

  static NSMutableData? dataWithContentsOfFile_options_error_(NSString path,
      int readOptionsMask, ffi.Pointer<ffi.Pointer<objc.ObjCObject>> errorPtr) {
    final _ret = _objc_msgSend_212(
        _class_NSMutableData,
        _sel_dataWithContentsOfFile_options_error_,
        path.pointer,
        readOptionsMask,
        errorPtr);
    return _ret.address == 0
        ? null
        : NSMutableData.castFromPointer(_ret, retain: true, release: true);
  }

  static NSMutableData? dataWithContentsOfURL_options_error_(NSURL url,
      int readOptionsMask, ffi.Pointer<ffi.Pointer<objc.ObjCObject>> errorPtr) {
    final _ret = _objc_msgSend_213(
        _class_NSMutableData,
        _sel_dataWithContentsOfURL_options_error_,
        url.pointer,
        readOptionsMask,
        errorPtr);
    return _ret.address == 0
        ? null
        : NSMutableData.castFromPointer(_ret, retain: true, release: true);
  }

  static NSMutableData? dataWithContentsOfFile_(NSString path) {
    final _ret = _objc_msgSend_49(
        _class_NSMutableData, _sel_dataWithContentsOfFile_, path.pointer);
    return _ret.address == 0
        ? null
        : NSMutableData.castFromPointer(_ret, retain: true, release: true);
  }

  static NSMutableData? dataWithContentsOfURL_(NSURL url) {
    final _ret = _objc_msgSend_214(
        _class_NSMutableData, _sel_dataWithContentsOfURL_, url.pointer);
    return _ret.address == 0
        ? null
        : NSMutableData.castFromPointer(_ret, retain: true, release: true);
  }

  @override
  NSMutableData initWithBytes_length_(ffi.Pointer<ffi.Void> bytes, int length) {
    final _ret = _objc_msgSend_210(
        this.pointer, _sel_initWithBytes_length_, bytes, length);
    return NSMutableData.castFromPointer(_ret, retain: true, release: true);
  }

  @override
  NSMutableData initWithBytesNoCopy_length_(
      ffi.Pointer<ffi.Void> bytes, int length) {
    final _ret = _objc_msgSend_210(
        this.pointer, _sel_initWithBytesNoCopy_length_, bytes, length);
    return NSMutableData.castFromPointer(_ret, retain: false, release: true);
  }

  @override
  NSMutableData initWithBytesNoCopy_length_freeWhenDone_(
      ffi.Pointer<ffi.Void> bytes, int length, bool b) {
    final _ret = _objc_msgSend_211(this.pointer,
        _sel_initWithBytesNoCopy_length_freeWhenDone_, bytes, length, b);
    return NSMutableData.castFromPointer(_ret, retain: false, release: true);
  }

  @override
  NSMutableData initWithBytesNoCopy_length_deallocator_(
      ffi.Pointer<ffi.Void> bytes,
      int length,
      ObjCBlock_ffiVoid_ffiVoid_ffiUnsignedLong? deallocator) {
    final _ret = _objc_msgSend_215(
        this.pointer,
        _sel_initWithBytesNoCopy_length_deallocator_,
        bytes,
        length,
        deallocator?.pointer ?? ffi.nullptr);
    return NSMutableData.castFromPointer(_ret, retain: false, release: true);
  }

  @override
  NSMutableData? initWithContentsOfFile_options_error_(NSString path,
      int readOptionsMask, ffi.Pointer<ffi.Pointer<objc.ObjCObject>> errorPtr) {
    final _ret = _objc_msgSend_212(
        this.pointer,
        _sel_initWithContentsOfFile_options_error_,
        path.pointer,
        readOptionsMask,
        errorPtr);
    return _ret.address == 0
        ? null
        : NSMutableData.castFromPointer(_ret, retain: true, release: true);
  }

  @override
  NSMutableData? initWithContentsOfURL_options_error_(NSURL url,
      int readOptionsMask, ffi.Pointer<ffi.Pointer<objc.ObjCObject>> errorPtr) {
    final _ret = _objc_msgSend_213(
        this.pointer,
        _sel_initWithContentsOfURL_options_error_,
        url.pointer,
        readOptionsMask,
        errorPtr);
    return _ret.address == 0
        ? null
        : NSMutableData.castFromPointer(_ret, retain: true, release: true);
  }

  @override
  NSMutableData? initWithContentsOfFile_(NSString path) {
    final _ret = _objc_msgSend_49(
        this.pointer, _sel_initWithContentsOfFile_, path.pointer);
    return _ret.address == 0
        ? null
        : NSMutableData.castFromPointer(_ret, retain: true, release: true);
  }

  @override
  NSMutableData? initWithContentsOfURL_(NSURL url) {
    final _ret = _objc_msgSend_214(
        this.pointer, _sel_initWithContentsOfURL_, url.pointer);
    return _ret.address == 0
        ? null
        : NSMutableData.castFromPointer(_ret, retain: true, release: true);
  }

  @override
  NSMutableData initWithData_(NSData data) {
    final _ret =
        _objc_msgSend_216(this.pointer, _sel_initWithData_, data.pointer);
    return NSMutableData.castFromPointer(_ret, retain: true, release: true);
  }

  static NSMutableData dataWithData_(NSData data) {
    final _ret = _objc_msgSend_216(
        _class_NSMutableData, _sel_dataWithData_, data.pointer);
    return NSMutableData.castFromPointer(_ret, retain: true, release: true);
  }

  @override
  NSMutableData? initWithBase64EncodedString_options_(
      NSString base64String, int options) {
    final _ret = _objc_msgSend_217(
        this.pointer,
        _sel_initWithBase64EncodedString_options_,
        base64String.pointer,
        options);
    return _ret.address == 0
        ? null
        : NSMutableData.castFromPointer(_ret, retain: true, release: true);
  }

  @override
  NSMutableData? initWithBase64EncodedData_options_(
      NSData base64Data, int options) {
    final _ret = _objc_msgSend_219(this.pointer,
        _sel_initWithBase64EncodedData_options_, base64Data.pointer, options);
    return _ret.address == 0
        ? null
        : NSMutableData.castFromPointer(_ret, retain: true, release: true);
  }

  @override
  NSMutableData? decompressedDataUsingAlgorithm_error_(
      int algorithm, ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    final _ret = _objc_msgSend_221(this.pointer,
        _sel_decompressedDataUsingAlgorithm_error_, algorithm, error);
    return _ret.address == 0
        ? null
        : NSMutableData.castFromPointer(_ret, retain: true, release: true);
  }

  @override
  NSMutableData? compressedDataUsingAlgorithm_error_(
      int algorithm, ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    final _ret = _objc_msgSend_221(this.pointer,
        _sel_compressedDataUsingAlgorithm_error_, algorithm, error);
    return _ret.address == 0
        ? null
        : NSMutableData.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.ObjCObjectBase? dataWithContentsOfMappedFile_(NSString path) {
    final _ret = _objc_msgSend_49(
        _class_NSMutableData, _sel_dataWithContentsOfMappedFile_, path.pointer);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  @override
  NSMutableData init() {
    final _ret = _objc_msgSend_2(this.pointer, _sel_init);
    return NSMutableData.castFromPointer(_ret, retain: true, release: true);
  }

  static NSMutableData new1() {
    final _ret = _objc_msgSend_2(_class_NSMutableData, _sel_new);
    return NSMutableData.castFromPointer(_ret, retain: false, release: true);
  }

  static NSMutableData allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_3(_class_NSMutableData, _sel_allocWithZone_, zone);
    return NSMutableData.castFromPointer(_ret, retain: false, release: true);
  }

  static NSMutableData alloc() {
    final _ret = _objc_msgSend_2(_class_NSMutableData, _sel_alloc);
    return NSMutableData.castFromPointer(_ret, retain: false, release: true);
  }
}

late final _class_NSMutableData = objc.getClass("NSMutableData");
late final _sel_mutableBytes = objc.registerName("mutableBytes");
late final _sel_setLength_ = objc.registerName("setLength:");
final _objc_msgSend_306 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedLong)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_appendBytes_length_ = objc.registerName("appendBytes:length:");
late final _sel_appendData_ = objc.registerName("appendData:");
final _objc_msgSend_307 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_increaseLengthBy_ = objc.registerName("increaseLengthBy:");
late final _sel_replaceBytesInRange_withBytes_ =
    objc.registerName("replaceBytesInRange:withBytes:");
final _objc_msgSend_308 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                _NSRange,
                ffi.Pointer<ffi.Void>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, _NSRange, ffi.Pointer<ffi.Void>)>();
late final _sel_resetBytesInRange_ = objc.registerName("resetBytesInRange:");
late final _sel_setData_ = objc.registerName("setData:");
late final _sel_replaceBytesInRange_withBytes_length_ =
    objc.registerName("replaceBytesInRange:withBytes:length:");
final _objc_msgSend_309 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                _NSRange,
                ffi.Pointer<ffi.Void>,
                ffi.UnsignedLong)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            _NSRange,
            ffi.Pointer<ffi.Void>,
            int)>();
late final _sel_dataWithCapacity_ = objc.registerName("dataWithCapacity:");
final _objc_msgSend_310 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedLong)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_dataWithLength_ = objc.registerName("dataWithLength:");
late final _sel_initWithLength_ = objc.registerName("initWithLength:");
late final _sel_decompressUsingAlgorithm_error_ =
    objc.registerName("decompressUsingAlgorithm:error:");
final _objc_msgSend_311 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Int32,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_compressUsingAlgorithm_error_ =
    objc.registerName("compressUsingAlgorithm:error:");

class NSNotification extends NSObject {
  NSNotification._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSNotification] that points to the same underlying object as [other].
  NSNotification.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSNotification] that wraps the given raw object pointer.
  NSNotification.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSNotification].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSNotification);
  }

  NSString get name {
    final _ret = _objc_msgSend_32(this.pointer, _sel_name);
    return NSString.castFromPointer(_ret, retain: true, release: true);
  }

  objc.ObjCObjectBase? get object {
    final _ret = _objc_msgSend_88(this.pointer, _sel_object);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  NSDictionary? get userInfo {
    final _ret = _objc_msgSend_276(this.pointer, _sel_userInfo);
    return _ret.address == 0
        ? null
        : NSDictionary.castFromPointer(_ret, retain: true, release: true);
  }

  NSNotification initWithName_object_userInfo_(
      NSString name, objc.ObjCObjectBase? object, NSDictionary? userInfo) {
    final _ret = _objc_msgSend_312(
        this.pointer,
        _sel_initWithName_object_userInfo_,
        name.pointer,
        object?.pointer ?? ffi.nullptr,
        userInfo?.pointer ?? ffi.nullptr);
    return NSNotification.castFromPointer(_ret, retain: true, release: true);
  }

  NSNotification? initWithCoder_(NSCoder coder) {
    final _ret =
        _objc_msgSend_14(this.pointer, _sel_initWithCoder_, coder.pointer);
    return _ret.address == 0
        ? null
        : NSNotification.castFromPointer(_ret, retain: true, release: true);
  }

  static NSNotification notificationWithName_object_(
      NSString aName, objc.ObjCObjectBase? anObject) {
    final _ret = _objc_msgSend_260(
        _class_NSNotification,
        _sel_notificationWithName_object_,
        aName.pointer,
        anObject?.pointer ?? ffi.nullptr);
    return NSNotification.castFromPointer(_ret, retain: true, release: true);
  }

  static NSNotification notificationWithName_object_userInfo_(
      NSString aName, objc.ObjCObjectBase? anObject, NSDictionary? aUserInfo) {
    final _ret = _objc_msgSend_312(
        _class_NSNotification,
        _sel_notificationWithName_object_userInfo_,
        aName.pointer,
        anObject?.pointer ?? ffi.nullptr,
        aUserInfo?.pointer ?? ffi.nullptr);
    return NSNotification.castFromPointer(_ret, retain: true, release: true);
  }

  @override
  NSNotification init() {
    final _ret = _objc_msgSend_2(this.pointer, _sel_init);
    return NSNotification.castFromPointer(_ret, retain: true, release: true);
  }

  static NSNotification new1() {
    final _ret = _objc_msgSend_2(_class_NSNotification, _sel_new);
    return NSNotification.castFromPointer(_ret, retain: false, release: true);
  }

  static NSNotification allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_3(_class_NSNotification, _sel_allocWithZone_, zone);
    return NSNotification.castFromPointer(_ret, retain: false, release: true);
  }

  static NSNotification alloc() {
    final _ret = _objc_msgSend_2(_class_NSNotification, _sel_alloc);
    return NSNotification.castFromPointer(_ret, retain: false, release: true);
  }
}

late final _class_NSNotification = objc.getClass("NSNotification");
late final _sel_name = objc.registerName("name");
late final _sel_object = objc.registerName("object");
late final _sel_userInfo = objc.registerName("userInfo");
late final _sel_initWithName_object_userInfo_ =
    objc.registerName("initWithName:object:userInfo:");
final _objc_msgSend_312 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_notificationWithName_object_ =
    objc.registerName("notificationWithName:object:");
late final _sel_notificationWithName_object_userInfo_ =
    objc.registerName("notificationWithName:object:userInfo:");

class NSDate extends NSObject {
  NSDate._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSDate] that points to the same underlying object as [other].
  NSDate.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSDate] that wraps the given raw object pointer.
  NSDate.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSDate].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(obj.pointer, _sel_isKindOfClass_, _class_NSDate);
  }

  static double getTimeIntervalSinceReferenceDate() {
    return objc.useMsgSendVariants
        ? _objc_msgSend_80Fpret(
            _class_NSDate, _sel_timeIntervalSinceReferenceDate)
        : _objc_msgSend_80(_class_NSDate, _sel_timeIntervalSinceReferenceDate);
  }

  @override
  NSDate init() {
    final _ret = _objc_msgSend_2(this.pointer, _sel_init);
    return NSDate.castFromPointer(_ret, retain: true, release: true);
  }

  NSDate initWithTimeIntervalSinceReferenceDate_(double ti) {
    final _ret = _objc_msgSend_313(
        this.pointer, _sel_initWithTimeIntervalSinceReferenceDate_, ti);
    return NSDate.castFromPointer(_ret, retain: true, release: true);
  }

  NSDate? initWithCoder_(NSCoder coder) {
    final _ret =
        _objc_msgSend_14(this.pointer, _sel_initWithCoder_, coder.pointer);
    return _ret.address == 0
        ? null
        : NSDate.castFromPointer(_ret, retain: true, release: true);
  }

  double timeIntervalSinceDate_(NSDate anotherDate) {
    return objc.useMsgSendVariants
        ? _objc_msgSend_314Fpret(
            this.pointer, _sel_timeIntervalSinceDate_, anotherDate.pointer)
        : _objc_msgSend_314(
            this.pointer, _sel_timeIntervalSinceDate_, anotherDate.pointer);
  }

  double get timeIntervalSinceNow {
    return objc.useMsgSendVariants
        ? _objc_msgSend_80Fpret(this.pointer, _sel_timeIntervalSinceNow)
        : _objc_msgSend_80(this.pointer, _sel_timeIntervalSinceNow);
  }

  double get timeIntervalSince1970 {
    return objc.useMsgSendVariants
        ? _objc_msgSend_80Fpret(this.pointer, _sel_timeIntervalSince1970)
        : _objc_msgSend_80(this.pointer, _sel_timeIntervalSince1970);
  }

  objc.ObjCObjectBase addTimeInterval_(double seconds) {
    final _ret =
        _objc_msgSend_313(this.pointer, _sel_addTimeInterval_, seconds);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  NSDate dateByAddingTimeInterval_(double ti) {
    final _ret =
        _objc_msgSend_313(this.pointer, _sel_dateByAddingTimeInterval_, ti);
    return NSDate.castFromPointer(_ret, retain: true, release: true);
  }

  NSDate earlierDate_(NSDate anotherDate) {
    final _ret =
        _objc_msgSend_315(this.pointer, _sel_earlierDate_, anotherDate.pointer);
    return NSDate.castFromPointer(_ret, retain: true, release: true);
  }

  NSDate laterDate_(NSDate anotherDate) {
    final _ret =
        _objc_msgSend_315(this.pointer, _sel_laterDate_, anotherDate.pointer);
    return NSDate.castFromPointer(_ret, retain: true, release: true);
  }

  int compare_(NSDate other) {
    return _objc_msgSend_316(this.pointer, _sel_compare_, other.pointer);
  }

  bool isEqualToDate_(NSDate otherDate) {
    return _objc_msgSend_317(
        this.pointer, _sel_isEqualToDate_, otherDate.pointer);
  }

  NSString get description {
    final _ret = _objc_msgSend_32(this.pointer, _sel_description);
    return NSString.castFromPointer(_ret, retain: true, release: true);
  }

  NSString descriptionWithLocale_(objc.ObjCObjectBase? locale) {
    final _ret = _objc_msgSend_83(this.pointer, _sel_descriptionWithLocale_,
        locale?.pointer ?? ffi.nullptr);
    return NSString.castFromPointer(_ret, retain: true, release: true);
  }

  static NSDate date() {
    final _ret = _objc_msgSend_2(_class_NSDate, _sel_date);
    return NSDate.castFromPointer(_ret, retain: true, release: true);
  }

  static NSDate dateWithTimeIntervalSinceNow_(double secs) {
    final _ret = _objc_msgSend_313(
        _class_NSDate, _sel_dateWithTimeIntervalSinceNow_, secs);
    return NSDate.castFromPointer(_ret, retain: true, release: true);
  }

  static NSDate dateWithTimeIntervalSinceReferenceDate_(double ti) {
    final _ret = _objc_msgSend_313(
        _class_NSDate, _sel_dateWithTimeIntervalSinceReferenceDate_, ti);
    return NSDate.castFromPointer(_ret, retain: true, release: true);
  }

  static NSDate dateWithTimeIntervalSince1970_(double secs) {
    final _ret = _objc_msgSend_313(
        _class_NSDate, _sel_dateWithTimeIntervalSince1970_, secs);
    return NSDate.castFromPointer(_ret, retain: true, release: true);
  }

  static NSDate dateWithTimeInterval_sinceDate_(
      double secsToBeAdded, NSDate date) {
    final _ret = _objc_msgSend_318(_class_NSDate,
        _sel_dateWithTimeInterval_sinceDate_, secsToBeAdded, date.pointer);
    return NSDate.castFromPointer(_ret, retain: true, release: true);
  }

  static NSDate getDistantFuture() {
    final _ret = _objc_msgSend_319(_class_NSDate, _sel_distantFuture);
    return NSDate.castFromPointer(_ret, retain: true, release: true);
  }

  static NSDate getDistantPast() {
    final _ret = _objc_msgSend_319(_class_NSDate, _sel_distantPast);
    return NSDate.castFromPointer(_ret, retain: true, release: true);
  }

  static NSDate getNow() {
    final _ret = _objc_msgSend_319(_class_NSDate, _sel_now);
    return NSDate.castFromPointer(_ret, retain: true, release: true);
  }

  NSDate initWithTimeIntervalSinceNow_(double secs) {
    final _ret = _objc_msgSend_313(
        this.pointer, _sel_initWithTimeIntervalSinceNow_, secs);
    return NSDate.castFromPointer(_ret, retain: true, release: true);
  }

  NSDate initWithTimeIntervalSince1970_(double secs) {
    final _ret = _objc_msgSend_313(
        this.pointer, _sel_initWithTimeIntervalSince1970_, secs);
    return NSDate.castFromPointer(_ret, retain: true, release: true);
  }

  NSDate initWithTimeInterval_sinceDate_(double secsToBeAdded, NSDate date) {
    final _ret = _objc_msgSend_318(this.pointer,
        _sel_initWithTimeInterval_sinceDate_, secsToBeAdded, date.pointer);
    return NSDate.castFromPointer(_ret, retain: true, release: true);
  }

  static NSDate new1() {
    final _ret = _objc_msgSend_2(_class_NSDate, _sel_new);
    return NSDate.castFromPointer(_ret, retain: false, release: true);
  }

  static NSDate allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_3(_class_NSDate, _sel_allocWithZone_, zone);
    return NSDate.castFromPointer(_ret, retain: false, release: true);
  }

  static NSDate alloc() {
    final _ret = _objc_msgSend_2(_class_NSDate, _sel_alloc);
    return NSDate.castFromPointer(_ret, retain: false, release: true);
  }
}

late final _class_NSDate = objc.getClass("NSDate");
late final _sel_timeIntervalSinceReferenceDate =
    objc.registerName("timeIntervalSinceReferenceDate");
late final _sel_initWithTimeIntervalSinceReferenceDate_ =
    objc.registerName("initWithTimeIntervalSinceReferenceDate:");
final _objc_msgSend_313 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Double)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, double)>();
late final _sel_timeIntervalSinceDate_ =
    objc.registerName("timeIntervalSinceDate:");
final _objc_msgSend_314 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Double Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        double Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
final _objc_msgSend_314Fpret = objc.msgSendFpretPointer
    .cast<
        ffi.NativeFunction<
            ffi.Double Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        double Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_timeIntervalSinceNow =
    objc.registerName("timeIntervalSinceNow");
late final _sel_timeIntervalSince1970 =
    objc.registerName("timeIntervalSince1970");
late final _sel_addTimeInterval_ = objc.registerName("addTimeInterval:");
late final _sel_dateByAddingTimeInterval_ =
    objc.registerName("dateByAddingTimeInterval:");
late final _sel_earlierDate_ = objc.registerName("earlierDate:");
final _objc_msgSend_315 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_laterDate_ = objc.registerName("laterDate:");
final _objc_msgSend_316 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Int32 Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        int Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_isEqualToDate_ = objc.registerName("isEqualToDate:");
final _objc_msgSend_317 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        bool Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_date = objc.registerName("date");
late final _sel_dateWithTimeIntervalSinceNow_ =
    objc.registerName("dateWithTimeIntervalSinceNow:");
late final _sel_dateWithTimeIntervalSinceReferenceDate_ =
    objc.registerName("dateWithTimeIntervalSinceReferenceDate:");
late final _sel_dateWithTimeIntervalSince1970_ =
    objc.registerName("dateWithTimeIntervalSince1970:");
late final _sel_dateWithTimeInterval_sinceDate_ =
    objc.registerName("dateWithTimeInterval:sinceDate:");
final _objc_msgSend_318 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Double,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            double,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_distantFuture = objc.registerName("distantFuture");
final _objc_msgSend_319 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_distantPast = objc.registerName("distantPast");
late final _sel_now = objc.registerName("now");
late final _sel_initWithTimeIntervalSinceNow_ =
    objc.registerName("initWithTimeIntervalSinceNow:");
late final _sel_initWithTimeIntervalSince1970_ =
    objc.registerName("initWithTimeIntervalSince1970:");
late final _sel_initWithTimeInterval_sinceDate_ =
    objc.registerName("initWithTimeInterval:sinceDate:");

class NSMutableDictionary extends NSDictionary {
  NSMutableDictionary._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSMutableDictionary] that points to the same underlying object as [other].
  NSMutableDictionary.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSMutableDictionary] that wraps the given raw object pointer.
  NSMutableDictionary.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSMutableDictionary].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSMutableDictionary);
  }

  void removeObjectForKey_(objc.ObjCObjectBase aKey) {
    _objc_msgSend_198(this.pointer, _sel_removeObjectForKey_, aKey.pointer);
  }

  void setObject_forKey_(
      objc.ObjCObjectBase anObject, objc.ObjCObjectBase aKey) {
    _objc_msgSend_320(
        this.pointer, _sel_setObject_forKey_, anObject.pointer, aKey.pointer);
  }

  @override
  NSMutableDictionary init() {
    final _ret = _objc_msgSend_2(this.pointer, _sel_init);
    return NSMutableDictionary.castFromPointer(_ret,
        retain: true, release: true);
  }

  NSMutableDictionary initWithCapacity_(int numItems) {
    final _ret =
        _objc_msgSend_97(this.pointer, _sel_initWithCapacity_, numItems);
    return NSMutableDictionary.castFromPointer(_ret,
        retain: true, release: true);
  }

  @override
  NSMutableDictionary? initWithCoder_(NSCoder coder) {
    final _ret =
        _objc_msgSend_14(this.pointer, _sel_initWithCoder_, coder.pointer);
    return _ret.address == 0
        ? null
        : NSMutableDictionary.castFromPointer(_ret,
            retain: true, release: true);
  }

  void addEntriesFromDictionary_(NSDictionary otherDictionary) {
    _objc_msgSend_321(
        this.pointer, _sel_addEntriesFromDictionary_, otherDictionary.pointer);
  }

  void removeAllObjects() {
    _objc_msgSend_1(this.pointer, _sel_removeAllObjects);
  }

  void removeObjectsForKeys_(NSArray keyArray) {
    _objc_msgSend_291(
        this.pointer, _sel_removeObjectsForKeys_, keyArray.pointer);
  }

  void setDictionary_(NSDictionary otherDictionary) {
    _objc_msgSend_321(
        this.pointer, _sel_setDictionary_, otherDictionary.pointer);
  }

  void setObject_forKeyedSubscript_(
      objc.ObjCObjectBase? obj, objc.ObjCObjectBase key) {
    _objc_msgSend_322(this.pointer, _sel_setObject_forKeyedSubscript_,
        obj?.pointer ?? ffi.nullptr, key.pointer);
  }

  static NSMutableDictionary dictionaryWithCapacity_(int numItems) {
    final _ret = _objc_msgSend_97(
        _class_NSMutableDictionary, _sel_dictionaryWithCapacity_, numItems);
    return NSMutableDictionary.castFromPointer(_ret,
        retain: true, release: true);
  }

  static NSDictionary? dictionaryWithContentsOfFile_(NSString path) {
    final _ret = _objc_msgSend_181(_class_NSMutableDictionary,
        _sel_dictionaryWithContentsOfFile_, path.pointer);
    return _ret.address == 0
        ? null
        : NSDictionary.castFromPointer(_ret, retain: true, release: true);
  }

  static NSDictionary? dictionaryWithContentsOfURL_(NSURL url) {
    final _ret = _objc_msgSend_182(_class_NSMutableDictionary,
        _sel_dictionaryWithContentsOfURL_, url.pointer);
    return _ret.address == 0
        ? null
        : NSDictionary.castFromPointer(_ret, retain: true, release: true);
  }

  NSMutableDictionary? initWithContentsOfFile_(NSString path) {
    final _ret = _objc_msgSend_323(
        this.pointer, _sel_initWithContentsOfFile_, path.pointer);
    return _ret.address == 0
        ? null
        : NSMutableDictionary.castFromPointer(_ret,
            retain: true, release: true);
  }

  NSMutableDictionary? initWithContentsOfURL_(NSURL url) {
    final _ret = _objc_msgSend_324(
        this.pointer, _sel_initWithContentsOfURL_, url.pointer);
    return _ret.address == 0
        ? null
        : NSMutableDictionary.castFromPointer(_ret,
            retain: true, release: true);
  }

  static NSMutableDictionary dictionaryWithSharedKeySet_(
      objc.ObjCObjectBase keyset) {
    final _ret = _objc_msgSend_325(_class_NSMutableDictionary,
        _sel_dictionaryWithSharedKeySet_, keyset.pointer);
    return NSMutableDictionary.castFromPointer(_ret,
        retain: true, release: true);
  }

  @override
  NSMutableDictionary initWithObjects_forKeys_count_(
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> objects,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> keys,
      int cnt) {
    final _ret = _objc_msgSend_171(
        this.pointer, _sel_initWithObjects_forKeys_count_, objects, keys, cnt);
    return NSMutableDictionary.castFromPointer(_ret,
        retain: true, release: true);
  }

  static NSMutableDictionary dictionary() {
    final _ret = _objc_msgSend_2(_class_NSMutableDictionary, _sel_dictionary);
    return NSMutableDictionary.castFromPointer(_ret,
        retain: true, release: true);
  }

  static NSMutableDictionary dictionaryWithObject_forKey_(
      objc.ObjCObjectBase object, objc.ObjCObjectBase key) {
    final _ret = _objc_msgSend_183(_class_NSMutableDictionary,
        _sel_dictionaryWithObject_forKey_, object.pointer, key.pointer);
    return NSMutableDictionary.castFromPointer(_ret,
        retain: true, release: true);
  }

  static NSMutableDictionary dictionaryWithObjects_forKeys_count_(
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> objects,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> keys,
      int cnt) {
    final _ret = _objc_msgSend_171(_class_NSMutableDictionary,
        _sel_dictionaryWithObjects_forKeys_count_, objects, keys, cnt);
    return NSMutableDictionary.castFromPointer(_ret,
        retain: true, release: true);
  }

  static NSMutableDictionary dictionaryWithObjectsAndKeys_(
      objc.ObjCObjectBase firstObject) {
    final _ret = _objc_msgSend_148(_class_NSMutableDictionary,
        _sel_dictionaryWithObjectsAndKeys_, firstObject.pointer);
    return NSMutableDictionary.castFromPointer(_ret,
        retain: true, release: true);
  }

  static NSMutableDictionary dictionaryWithDictionary_(NSDictionary dict) {
    final _ret = _objc_msgSend_184(_class_NSMutableDictionary,
        _sel_dictionaryWithDictionary_, dict.pointer);
    return NSMutableDictionary.castFromPointer(_ret,
        retain: true, release: true);
  }

  static NSMutableDictionary dictionaryWithObjects_forKeys_(
      NSArray objects, NSArray keys) {
    final _ret = _objc_msgSend_185(_class_NSMutableDictionary,
        _sel_dictionaryWithObjects_forKeys_, objects.pointer, keys.pointer);
    return NSMutableDictionary.castFromPointer(_ret,
        retain: true, release: true);
  }

  @override
  NSMutableDictionary initWithObjectsAndKeys_(objc.ObjCObjectBase firstObject) {
    final _ret = _objc_msgSend_148(
        this.pointer, _sel_initWithObjectsAndKeys_, firstObject.pointer);
    return NSMutableDictionary.castFromPointer(_ret,
        retain: true, release: true);
  }

  @override
  NSMutableDictionary initWithDictionary_(NSDictionary otherDictionary) {
    final _ret = _objc_msgSend_184(
        this.pointer, _sel_initWithDictionary_, otherDictionary.pointer);
    return NSMutableDictionary.castFromPointer(_ret,
        retain: true, release: true);
  }

  @override
  NSMutableDictionary initWithDictionary_copyItems_(
      NSDictionary otherDictionary, bool flag) {
    final _ret = _objc_msgSend_186(this.pointer,
        _sel_initWithDictionary_copyItems_, otherDictionary.pointer, flag);
    return NSMutableDictionary.castFromPointer(_ret,
        retain: false, release: true);
  }

  @override
  NSMutableDictionary initWithObjects_forKeys_(NSArray objects, NSArray keys) {
    final _ret = _objc_msgSend_185(this.pointer, _sel_initWithObjects_forKeys_,
        objects.pointer, keys.pointer);
    return NSMutableDictionary.castFromPointer(_ret,
        retain: true, release: true);
  }

  static NSDictionary? dictionaryWithContentsOfURL_error_(
      NSURL url, ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    final _ret = _objc_msgSend_187(_class_NSMutableDictionary,
        _sel_dictionaryWithContentsOfURL_error_, url.pointer, error);
    return _ret.address == 0
        ? null
        : NSDictionary.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.ObjCObjectBase sharedKeySetForKeys_(NSArray keys) {
    final _ret = _objc_msgSend_149(
        _class_NSMutableDictionary, _sel_sharedKeySetForKeys_, keys.pointer);
    return objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  static NSMutableDictionary new1() {
    final _ret = _objc_msgSend_2(_class_NSMutableDictionary, _sel_new);
    return NSMutableDictionary.castFromPointer(_ret,
        retain: false, release: true);
  }

  static NSMutableDictionary allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_3(_class_NSMutableDictionary, _sel_allocWithZone_, zone);
    return NSMutableDictionary.castFromPointer(_ret,
        retain: false, release: true);
  }

  static NSMutableDictionary alloc() {
    final _ret = _objc_msgSend_2(_class_NSMutableDictionary, _sel_alloc);
    return NSMutableDictionary.castFromPointer(_ret,
        retain: false, release: true);
  }
}

late final _class_NSMutableDictionary = objc.getClass("NSMutableDictionary");
late final _sel_removeObjectForKey_ = objc.registerName("removeObjectForKey:");
late final _sel_setObject_forKey_ = objc.registerName("setObject:forKey:");
final _objc_msgSend_320 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_addEntriesFromDictionary_ =
    objc.registerName("addEntriesFromDictionary:");
final _objc_msgSend_321 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_removeObjectsForKeys_ =
    objc.registerName("removeObjectsForKeys:");
late final _sel_setDictionary_ = objc.registerName("setDictionary:");
late final _sel_setObject_forKeyedSubscript_ =
    objc.registerName("setObject:forKeyedSubscript:");
final _objc_msgSend_322 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_dictionaryWithCapacity_ =
    objc.registerName("dictionaryWithCapacity:");
final _objc_msgSend_323 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
final _objc_msgSend_324 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_dictionaryWithSharedKeySet_ =
    objc.registerName("dictionaryWithSharedKeySet:");
final _objc_msgSend_325 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();

class NSSet extends NSObject {
  NSSet._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSSet] that points to the same underlying object as [other].
  NSSet.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSSet] that wraps the given raw object pointer.
  NSSet.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSSet].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(obj.pointer, _sel_isKindOfClass_, _class_NSSet);
  }

  int get count {
    return _objc_msgSend_12(this.pointer, _sel_count);
  }

  objc.ObjCObjectBase? member_(objc.ObjCObjectBase object) {
    final _ret = _objc_msgSend_170(this.pointer, _sel_member_, object.pointer);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  NSEnumerator objectEnumerator() {
    final _ret = _objc_msgSend_108(this.pointer, _sel_objectEnumerator);
    return NSEnumerator.castFromPointer(_ret, retain: true, release: true);
  }

  @override
  NSSet init() {
    final _ret = _objc_msgSend_2(this.pointer, _sel_init);
    return NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  NSSet initWithObjects_count_(
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> objects, int cnt) {
    final _ret = _objc_msgSend_98(
        this.pointer, _sel_initWithObjects_count_, objects, cnt);
    return NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  NSSet? initWithCoder_(NSCoder coder) {
    final _ret =
        _objc_msgSend_14(this.pointer, _sel_initWithCoder_, coder.pointer);
    return _ret.address == 0
        ? null
        : NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  NSArray get allObjects {
    final _ret = _objc_msgSend_172(this.pointer, _sel_allObjects);
    return NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  objc.ObjCObjectBase? anyObject() {
    final _ret = _objc_msgSend_88(this.pointer, _sel_anyObject);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  bool containsObject_(objc.ObjCObjectBase anObject) {
    return _objc_msgSend_0(
        this.pointer, _sel_containsObject_, anObject.pointer);
  }

  NSString get description {
    final _ret = _objc_msgSend_32(this.pointer, _sel_description);
    return NSString.castFromPointer(_ret, retain: true, release: true);
  }

  NSString descriptionWithLocale_(objc.ObjCObjectBase? locale) {
    final _ret = _objc_msgSend_83(this.pointer, _sel_descriptionWithLocale_,
        locale?.pointer ?? ffi.nullptr);
    return NSString.castFromPointer(_ret, retain: true, release: true);
  }

  bool intersectsSet_(NSSet otherSet) {
    return _objc_msgSend_326(
        this.pointer, _sel_intersectsSet_, otherSet.pointer);
  }

  bool isEqualToSet_(NSSet otherSet) {
    return _objc_msgSend_326(
        this.pointer, _sel_isEqualToSet_, otherSet.pointer);
  }

  bool isSubsetOfSet_(NSSet otherSet) {
    return _objc_msgSend_326(
        this.pointer, _sel_isSubsetOfSet_, otherSet.pointer);
  }

  void makeObjectsPerformSelector_(ffi.Pointer<objc.ObjCSelector> aSelector) {
    _objc_msgSend_7(this.pointer, _sel_makeObjectsPerformSelector_, aSelector);
  }

  void makeObjectsPerformSelector_withObject_(
      ffi.Pointer<objc.ObjCSelector> aSelector, objc.ObjCObjectBase? argument) {
    _objc_msgSend_114(this.pointer, _sel_makeObjectsPerformSelector_withObject_,
        aSelector, argument?.pointer ?? ffi.nullptr);
  }

  NSSet setByAddingObject_(objc.ObjCObjectBase anObject) {
    final _ret = _objc_msgSend_327(
        this.pointer, _sel_setByAddingObject_, anObject.pointer);
    return NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  NSSet setByAddingObjectsFromSet_(NSSet other) {
    final _ret = _objc_msgSend_328(
        this.pointer, _sel_setByAddingObjectsFromSet_, other.pointer);
    return NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  NSSet setByAddingObjectsFromArray_(NSArray other) {
    final _ret = _objc_msgSend_329(
        this.pointer, _sel_setByAddingObjectsFromArray_, other.pointer);
    return NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  void enumerateObjectsUsingBlock_(
      ObjCBlock_ffiVoid_objcObjCObject_bool block) {
    _objc_msgSend_330(
        this.pointer, _sel_enumerateObjectsUsingBlock_, block.pointer);
  }

  void enumerateObjectsWithOptions_usingBlock_(
      int opts, ObjCBlock_ffiVoid_objcObjCObject_bool block) {
    _objc_msgSend_331(this.pointer,
        _sel_enumerateObjectsWithOptions_usingBlock_, opts, block.pointer);
  }

  NSSet objectsPassingTest_(ObjCBlock_bool_objcObjCObject_bool predicate) {
    final _ret = _objc_msgSend_332(
        this.pointer, _sel_objectsPassingTest_, predicate.pointer);
    return NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  NSSet objectsWithOptions_passingTest_(
      int opts, ObjCBlock_bool_objcObjCObject_bool predicate) {
    final _ret = _objc_msgSend_333(this.pointer,
        _sel_objectsWithOptions_passingTest_, opts, predicate.pointer);
    return NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  static NSSet set1() {
    final _ret = _objc_msgSend_2(_class_NSSet, _sel_set);
    return NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  static NSSet setWithObject_(objc.ObjCObjectBase object) {
    final _ret =
        _objc_msgSend_148(_class_NSSet, _sel_setWithObject_, object.pointer);
    return NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  static NSSet setWithObjects_count_(
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> objects, int cnt) {
    final _ret = _objc_msgSend_98(
        _class_NSSet, _sel_setWithObjects_count_, objects, cnt);
    return NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  static NSSet setWithObjects_(objc.ObjCObjectBase firstObj) {
    final _ret =
        _objc_msgSend_148(_class_NSSet, _sel_setWithObjects_, firstObj.pointer);
    return NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  static NSSet setWithSet_(NSSet set) {
    final _ret = _objc_msgSend_334(_class_NSSet, _sel_setWithSet_, set.pointer);
    return NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  static NSSet setWithArray_(NSArray array) {
    final _ret =
        _objc_msgSend_149(_class_NSSet, _sel_setWithArray_, array.pointer);
    return NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  NSSet initWithObjects_(objc.ObjCObjectBase firstObj) {
    final _ret = _objc_msgSend_148(
        this.pointer, _sel_initWithObjects_, firstObj.pointer);
    return NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  NSSet initWithSet_(NSSet set) {
    final _ret =
        _objc_msgSend_334(this.pointer, _sel_initWithSet_, set.pointer);
    return NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  NSSet initWithSet_copyItems_(NSSet set, bool flag) {
    final _ret = _objc_msgSend_335(
        this.pointer, _sel_initWithSet_copyItems_, set.pointer, flag);
    return NSSet.castFromPointer(_ret, retain: false, release: true);
  }

  NSSet initWithArray_(NSArray array) {
    final _ret =
        _objc_msgSend_149(this.pointer, _sel_initWithArray_, array.pointer);
    return NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  static NSSet new1() {
    final _ret = _objc_msgSend_2(_class_NSSet, _sel_new);
    return NSSet.castFromPointer(_ret, retain: false, release: true);
  }

  static NSSet allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_3(_class_NSSet, _sel_allocWithZone_, zone);
    return NSSet.castFromPointer(_ret, retain: false, release: true);
  }

  static NSSet alloc() {
    final _ret = _objc_msgSend_2(_class_NSSet, _sel_alloc);
    return NSSet.castFromPointer(_ret, retain: false, release: true);
  }
}

late final _class_NSSet = objc.getClass("NSSet");
late final _sel_member_ = objc.registerName("member:");
late final _sel_anyObject = objc.registerName("anyObject");
late final _sel_intersectsSet_ = objc.registerName("intersectsSet:");
final _objc_msgSend_326 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        bool Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_isEqualToSet_ = objc.registerName("isEqualToSet:");
late final _sel_isSubsetOfSet_ = objc.registerName("isSubsetOfSet:");
late final _sel_setByAddingObject_ = objc.registerName("setByAddingObject:");
final _objc_msgSend_327 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_setByAddingObjectsFromSet_ =
    objc.registerName("setByAddingObjectsFromSet:");
final _objc_msgSend_328 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_setByAddingObjectsFromArray_ =
    objc.registerName("setByAddingObjectsFromArray:");
final _objc_msgSend_329 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
void _ObjCBlock_ffiVoid_objcObjCObject_bool_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlock> block,
        ffi.Pointer<objc.ObjCObject> arg0,
        ffi.Pointer<ffi.Bool> arg1) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0,
                    ffi.Pointer<ffi.Bool> arg1)>>()
        .asFunction<
            void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<ffi.Bool>)>()(arg0, arg1);
void _ObjCBlock_ffiVoid_objcObjCObject_bool_closureTrampoline(
        ffi.Pointer<objc.ObjCBlock> block,
        ffi.Pointer<objc.ObjCObject> arg0,
        ffi.Pointer<ffi.Bool> arg1) =>
    (objc.getBlockClosure(block) as void Function(
        ffi.Pointer<objc.ObjCObject>, ffi.Pointer<ffi.Bool>))(arg0, arg1);

class ObjCBlock_ffiVoid_objcObjCObject_bool extends objc.ObjCBlockBase {
  ObjCBlock_ffiVoid_objcObjCObject_bool._(ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false, bool release = true})
      : super(pointer, retain: retain, release: release);

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_ffiVoid_objcObjCObject_bool castFromPointer(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = false}) {
    return ObjCBlock_ffiVoid_objcObjCObject_bool._(pointer,
        retain: retain, release: release);
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_objcObjCObject_bool.fromFunctionPointer(
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0,
                      ffi.Pointer<ffi.Bool> arg1)>>
          ptr)
      : this._(
            objc.newPointerBlock(
                _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                            ffi.Void Function(
                                ffi.Pointer<objc.ObjCBlock>,
                                ffi.Pointer<objc.ObjCObject>,
                                ffi.Pointer<ffi.Bool>)>(
                        _ObjCBlock_ffiVoid_objcObjCObject_bool_fnPtrTrampoline)
                    .cast(),
                ptr.cast()));
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_objcObjCObject_bool.fromFunction(
      void Function(objc.ObjCObjectBase, ffi.Pointer<ffi.Bool>) fn)
      : this._(objc.newClosureBlock(
            _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<ffi.Bool>)>(
                    _ObjCBlock_ffiVoid_objcObjCObject_bool_closureTrampoline)
                .cast(),
            (ffi.Pointer<objc.ObjCObject> arg0, ffi.Pointer<ffi.Bool> arg1) =>
                fn(objc.ObjCObjectBase(arg0, retain: true, release: true),
                    arg1)));
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_objcObjCObject_bool.listener(
      void Function(objc.ObjCObjectBase, ffi.Pointer<ffi.Bool>) fn)
      : this._(objc.newClosureBlock(
            (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                        ffi.Void Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<ffi.Bool>)>.listener(
                    _ObjCBlock_ffiVoid_objcObjCObject_bool_closureTrampoline)
                  ..keepIsolateAlive = false)
                .nativeFunction
                .cast(),
            (ffi.Pointer<objc.ObjCObject> arg0, ffi.Pointer<ffi.Bool> arg1) =>
                fn(objc.ObjCObjectBase(arg0, retain: true, release: true),
                    arg1)));
  static ffi.NativeCallable<
      ffi.Void Function(
          ffi.Pointer<objc.ObjCBlock>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<ffi.Bool>)>? _dartFuncListenerTrampoline;

  void call(objc.ObjCObjectBase arg0, ffi.Pointer<ffi.Bool> arg1) =>
      pointer.ref.invoke
          .cast<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<objc.ObjCBlock> block,
                      ffi.Pointer<objc.ObjCObject> arg0,
                      ffi.Pointer<ffi.Bool> arg1)>>()
          .asFunction<
              void Function(
                  ffi.Pointer<objc.ObjCBlock>,
                  ffi.Pointer<objc.ObjCObject>,
                  ffi.Pointer<ffi.Bool>)>()(pointer, arg0.pointer, arg1);
}

final _objc_msgSend_330 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCBlock>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCBlock>)>();
final _objc_msgSend_331 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Int32,
                ffi.Pointer<objc.ObjCBlock>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int,
            ffi.Pointer<objc.ObjCBlock>)>();
bool _ObjCBlock_bool_objcObjCObject_bool_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlock> block,
        ffi.Pointer<objc.ObjCObject> arg0,
        ffi.Pointer<ffi.Bool> arg1) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Bool Function(ffi.Pointer<objc.ObjCObject> arg0,
                    ffi.Pointer<ffi.Bool> arg1)>>()
        .asFunction<
            bool Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<ffi.Bool>)>()(arg0, arg1);
bool _ObjCBlock_bool_objcObjCObject_bool_closureTrampoline(
        ffi.Pointer<objc.ObjCBlock> block,
        ffi.Pointer<objc.ObjCObject> arg0,
        ffi.Pointer<ffi.Bool> arg1) =>
    (objc.getBlockClosure(block) as bool Function(
        ffi.Pointer<objc.ObjCObject>, ffi.Pointer<ffi.Bool>))(arg0, arg1);

class ObjCBlock_bool_objcObjCObject_bool extends objc.ObjCBlockBase {
  ObjCBlock_bool_objcObjCObject_bool._(ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false, bool release = true})
      : super(pointer, retain: retain, release: release);

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_bool_objcObjCObject_bool castFromPointer(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = false}) {
    return ObjCBlock_bool_objcObjCObject_bool._(pointer,
        retain: retain, release: release);
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_bool_objcObjCObject_bool.fromFunctionPointer(
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Bool Function(ffi.Pointer<objc.ObjCObject> arg0,
                      ffi.Pointer<ffi.Bool> arg1)>>
          ptr)
      : this._(objc.newPointerBlock(
            _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Bool Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<ffi.Bool>)>(
                    _ObjCBlock_bool_objcObjCObject_bool_fnPtrTrampoline, false)
                .cast(),
            ptr.cast()));
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_bool_objcObjCObject_bool.fromFunction(
      bool Function(objc.ObjCObjectBase, ffi.Pointer<ffi.Bool>) fn)
      : this._(objc.newClosureBlock(
            _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Bool Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<ffi.Bool>)>(
                    _ObjCBlock_bool_objcObjCObject_bool_closureTrampoline, false)
                .cast(),
            (ffi.Pointer<objc.ObjCObject> arg0, ffi.Pointer<ffi.Bool> arg1) =>
                fn(objc.ObjCObjectBase(arg0, retain: true, release: true),
                    arg1)));
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  bool call(objc.ObjCObjectBase arg0, ffi.Pointer<ffi.Bool> arg1) =>
      pointer.ref.invoke
          .cast<
              ffi.NativeFunction<
                  ffi.Bool Function(
                      ffi.Pointer<objc.ObjCBlock> block,
                      ffi.Pointer<objc.ObjCObject> arg0,
                      ffi.Pointer<ffi.Bool> arg1)>>()
          .asFunction<
              bool Function(
                  ffi.Pointer<objc.ObjCBlock>,
                  ffi.Pointer<objc.ObjCObject>,
                  ffi.Pointer<ffi.Bool>)>()(pointer, arg0.pointer, arg1);
}

late final _sel_objectsPassingTest_ = objc.registerName("objectsPassingTest:");
final _objc_msgSend_332 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCBlock>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCBlock>)>();
late final _sel_objectsWithOptions_passingTest_ =
    objc.registerName("objectsWithOptions:passingTest:");
final _objc_msgSend_333 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Int32,
                ffi.Pointer<objc.ObjCBlock>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int,
            ffi.Pointer<objc.ObjCBlock>)>();
late final _sel_set = objc.registerName("set");
late final _sel_setWithObject_ = objc.registerName("setWithObject:");
late final _sel_setWithObjects_count_ =
    objc.registerName("setWithObjects:count:");
late final _sel_setWithObjects_ = objc.registerName("setWithObjects:");
late final _sel_setWithSet_ = objc.registerName("setWithSet:");
final _objc_msgSend_334 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_setWithArray_ = objc.registerName("setWithArray:");
late final _sel_initWithSet_ = objc.registerName("initWithSet:");
late final _sel_initWithSet_copyItems_ =
    objc.registerName("initWithSet:copyItems:");
final _objc_msgSend_335 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Bool)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            bool)>();

class NSMutableSet extends NSSet {
  NSMutableSet._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSMutableSet] that points to the same underlying object as [other].
  NSMutableSet.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSMutableSet] that wraps the given raw object pointer.
  NSMutableSet.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSMutableSet].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSMutableSet);
  }

  void addObject_(objc.ObjCObjectBase object) {
    _objc_msgSend_198(this.pointer, _sel_addObject_, object.pointer);
  }

  void removeObject_(objc.ObjCObjectBase object) {
    _objc_msgSend_198(this.pointer, _sel_removeObject_, object.pointer);
  }

  @override
  NSMutableSet? initWithCoder_(NSCoder coder) {
    final _ret =
        _objc_msgSend_14(this.pointer, _sel_initWithCoder_, coder.pointer);
    return _ret.address == 0
        ? null
        : NSMutableSet.castFromPointer(_ret, retain: true, release: true);
  }

  @override
  NSMutableSet init() {
    final _ret = _objc_msgSend_2(this.pointer, _sel_init);
    return NSMutableSet.castFromPointer(_ret, retain: true, release: true);
  }

  NSMutableSet initWithCapacity_(int numItems) {
    final _ret =
        _objc_msgSend_97(this.pointer, _sel_initWithCapacity_, numItems);
    return NSMutableSet.castFromPointer(_ret, retain: true, release: true);
  }

  void addObjectsFromArray_(NSArray array) {
    _objc_msgSend_291(this.pointer, _sel_addObjectsFromArray_, array.pointer);
  }

  void intersectSet_(NSSet otherSet) {
    _objc_msgSend_336(this.pointer, _sel_intersectSet_, otherSet.pointer);
  }

  void minusSet_(NSSet otherSet) {
    _objc_msgSend_336(this.pointer, _sel_minusSet_, otherSet.pointer);
  }

  void removeAllObjects() {
    _objc_msgSend_1(this.pointer, _sel_removeAllObjects);
  }

  void unionSet_(NSSet otherSet) {
    _objc_msgSend_336(this.pointer, _sel_unionSet_, otherSet.pointer);
  }

  void setSet_(NSSet otherSet) {
    _objc_msgSend_336(this.pointer, _sel_setSet_, otherSet.pointer);
  }

  static NSMutableSet setWithCapacity_(int numItems) {
    final _ret =
        _objc_msgSend_97(_class_NSMutableSet, _sel_setWithCapacity_, numItems);
    return NSMutableSet.castFromPointer(_ret, retain: true, release: true);
  }

  @override
  NSMutableSet initWithObjects_count_(
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> objects, int cnt) {
    final _ret = _objc_msgSend_98(
        this.pointer, _sel_initWithObjects_count_, objects, cnt);
    return NSMutableSet.castFromPointer(_ret, retain: true, release: true);
  }

  static NSMutableSet set1() {
    final _ret = _objc_msgSend_2(_class_NSMutableSet, _sel_set);
    return NSMutableSet.castFromPointer(_ret, retain: true, release: true);
  }

  static NSMutableSet setWithObject_(objc.ObjCObjectBase object) {
    final _ret = _objc_msgSend_148(
        _class_NSMutableSet, _sel_setWithObject_, object.pointer);
    return NSMutableSet.castFromPointer(_ret, retain: true, release: true);
  }

  static NSMutableSet setWithObjects_count_(
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> objects, int cnt) {
    final _ret = _objc_msgSend_98(
        _class_NSMutableSet, _sel_setWithObjects_count_, objects, cnt);
    return NSMutableSet.castFromPointer(_ret, retain: true, release: true);
  }

  static NSMutableSet setWithObjects_(objc.ObjCObjectBase firstObj) {
    final _ret = _objc_msgSend_148(
        _class_NSMutableSet, _sel_setWithObjects_, firstObj.pointer);
    return NSMutableSet.castFromPointer(_ret, retain: true, release: true);
  }

  static NSMutableSet setWithSet_(NSSet set) {
    final _ret =
        _objc_msgSend_334(_class_NSMutableSet, _sel_setWithSet_, set.pointer);
    return NSMutableSet.castFromPointer(_ret, retain: true, release: true);
  }

  static NSMutableSet setWithArray_(NSArray array) {
    final _ret = _objc_msgSend_149(
        _class_NSMutableSet, _sel_setWithArray_, array.pointer);
    return NSMutableSet.castFromPointer(_ret, retain: true, release: true);
  }

  @override
  NSMutableSet initWithObjects_(objc.ObjCObjectBase firstObj) {
    final _ret = _objc_msgSend_148(
        this.pointer, _sel_initWithObjects_, firstObj.pointer);
    return NSMutableSet.castFromPointer(_ret, retain: true, release: true);
  }

  @override
  NSMutableSet initWithSet_(NSSet set) {
    final _ret =
        _objc_msgSend_334(this.pointer, _sel_initWithSet_, set.pointer);
    return NSMutableSet.castFromPointer(_ret, retain: true, release: true);
  }

  @override
  NSMutableSet initWithSet_copyItems_(NSSet set, bool flag) {
    final _ret = _objc_msgSend_335(
        this.pointer, _sel_initWithSet_copyItems_, set.pointer, flag);
    return NSMutableSet.castFromPointer(_ret, retain: false, release: true);
  }

  @override
  NSMutableSet initWithArray_(NSArray array) {
    final _ret =
        _objc_msgSend_149(this.pointer, _sel_initWithArray_, array.pointer);
    return NSMutableSet.castFromPointer(_ret, retain: true, release: true);
  }

  static NSMutableSet new1() {
    final _ret = _objc_msgSend_2(_class_NSMutableSet, _sel_new);
    return NSMutableSet.castFromPointer(_ret, retain: false, release: true);
  }

  static NSMutableSet allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_3(_class_NSMutableSet, _sel_allocWithZone_, zone);
    return NSMutableSet.castFromPointer(_ret, retain: false, release: true);
  }

  static NSMutableSet alloc() {
    final _ret = _objc_msgSend_2(_class_NSMutableSet, _sel_alloc);
    return NSMutableSet.castFromPointer(_ret, retain: false, release: true);
  }
}

late final _class_NSMutableSet = objc.getClass("NSMutableSet");
late final _sel_intersectSet_ = objc.registerName("intersectSet:");
final _objc_msgSend_336 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_minusSet_ = objc.registerName("minusSet:");
late final _sel_unionSet_ = objc.registerName("unionSet:");
late final _sel_setSet_ = objc.registerName("setSet:");
late final _sel_setWithCapacity_ = objc.registerName("setWithCapacity:");

class NSItemProvider extends NSObject {
  NSItemProvider._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSItemProvider] that points to the same underlying object as [other].
  NSItemProvider.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSItemProvider] that wraps the given raw object pointer.
  NSItemProvider.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSItemProvider].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSItemProvider);
  }

  @override
  NSItemProvider init() {
    final _ret = _objc_msgSend_2(this.pointer, _sel_init);
    return NSItemProvider.castFromPointer(_ret, retain: true, release: true);
  }

  void registerDataRepresentationForTypeIdentifier_visibility_loadHandler_(
      NSString typeIdentifier,
      int visibility,
      ObjCBlock_NSProgress_ffiVoidNSDataNSError loadHandler) {
    _objc_msgSend_337(
        this.pointer,
        _sel_registerDataRepresentationForTypeIdentifier_visibility_loadHandler_,
        typeIdentifier.pointer,
        visibility,
        loadHandler.pointer);
  }

  void
      registerFileRepresentationForTypeIdentifier_fileOptions_visibility_loadHandler_(
          NSString typeIdentifier,
          int fileOptions,
          int visibility,
          ObjCBlock_NSProgress_ffiVoidNSURLboolNSError loadHandler) {
    _objc_msgSend_338(
        this.pointer,
        _sel_registerFileRepresentationForTypeIdentifier_fileOptions_visibility_loadHandler_,
        typeIdentifier.pointer,
        fileOptions,
        visibility,
        loadHandler.pointer);
  }

  NSArray get registeredTypeIdentifiers {
    final _ret =
        _objc_msgSend_172(this.pointer, _sel_registeredTypeIdentifiers);
    return NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  NSArray registeredTypeIdentifiersWithFileOptions_(int fileOptions) {
    final _ret = _objc_msgSend_339(this.pointer,
        _sel_registeredTypeIdentifiersWithFileOptions_, fileOptions);
    return NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  bool hasItemConformingToTypeIdentifier_(NSString typeIdentifier) {
    return _objc_msgSend_22(this.pointer,
        _sel_hasItemConformingToTypeIdentifier_, typeIdentifier.pointer);
  }

  bool hasRepresentationConformingToTypeIdentifier_fileOptions_(
      NSString typeIdentifier, int fileOptions) {
    return _objc_msgSend_340(
        this.pointer,
        _sel_hasRepresentationConformingToTypeIdentifier_fileOptions_,
        typeIdentifier.pointer,
        fileOptions);
  }

  NSProgress loadDataRepresentationForTypeIdentifier_completionHandler_(
      NSString typeIdentifier,
      ObjCBlock_ffiVoid_NSData_NSError completionHandler) {
    final _ret = _objc_msgSend_341(
        this.pointer,
        _sel_loadDataRepresentationForTypeIdentifier_completionHandler_,
        typeIdentifier.pointer,
        completionHandler.pointer);
    return NSProgress.castFromPointer(_ret, retain: true, release: true);
  }

  NSProgress loadFileRepresentationForTypeIdentifier_completionHandler_(
      NSString typeIdentifier,
      ObjCBlock_ffiVoid_NSURL_NSError completionHandler) {
    final _ret = _objc_msgSend_342(
        this.pointer,
        _sel_loadFileRepresentationForTypeIdentifier_completionHandler_,
        typeIdentifier.pointer,
        completionHandler.pointer);
    return NSProgress.castFromPointer(_ret, retain: true, release: true);
  }

  NSProgress loadInPlaceFileRepresentationForTypeIdentifier_completionHandler_(
      NSString typeIdentifier,
      ObjCBlock_ffiVoid_NSURL_bool_NSError completionHandler) {
    final _ret = _objc_msgSend_343(
        this.pointer,
        _sel_loadInPlaceFileRepresentationForTypeIdentifier_completionHandler_,
        typeIdentifier.pointer,
        completionHandler.pointer);
    return NSProgress.castFromPointer(_ret, retain: true, release: true);
  }

  NSString? get suggestedName {
    final _ret = _objc_msgSend_55(this.pointer, _sel_suggestedName);
    return _ret.address == 0
        ? null
        : NSString.castFromPointer(_ret, retain: true, release: true);
  }

  set suggestedName(NSString? value) {
    return _objc_msgSend_344(
        this.pointer, _sel_setSuggestedName_, value?.pointer ?? ffi.nullptr);
  }

  NSItemProvider initWithObject_(objc.ObjCObjectBase object) {
    final _ret =
        _objc_msgSend_148(this.pointer, _sel_initWithObject_, object.pointer);
    return NSItemProvider.castFromPointer(_ret, retain: true, release: true);
  }

  void registerObject_visibility_(objc.ObjCObjectBase object, int visibility) {
    _objc_msgSend_345(this.pointer, _sel_registerObject_visibility_,
        object.pointer, visibility);
  }

  void registerObjectOfClass_visibility_loadHandler_(
      objc.ObjCObjectBase aClass,
      int visibility,
      ObjCBlock_NSProgress_ffiVoidobjcObjCObjectNSError loadHandler) {
    _objc_msgSend_346(
        this.pointer,
        _sel_registerObjectOfClass_visibility_loadHandler_,
        aClass.pointer,
        visibility,
        loadHandler.pointer);
  }

  bool canLoadObjectOfClass_(objc.ObjCObjectBase aClass) {
    return _objc_msgSend_0(
        this.pointer, _sel_canLoadObjectOfClass_, aClass.pointer);
  }

  NSProgress loadObjectOfClass_completionHandler_(objc.ObjCObjectBase aClass,
      ObjCBlock_ffiVoid_objcObjCObject_NSError completionHandler) {
    final _ret = _objc_msgSend_347(
        this.pointer,
        _sel_loadObjectOfClass_completionHandler_,
        aClass.pointer,
        completionHandler.pointer);
    return NSProgress.castFromPointer(_ret, retain: true, release: true);
  }

  NSItemProvider initWithItem_typeIdentifier_(
      objc.ObjCObjectBase? item, NSString? typeIdentifier) {
    final _ret = _objc_msgSend_348(
        this.pointer,
        _sel_initWithItem_typeIdentifier_,
        item?.pointer ?? ffi.nullptr,
        typeIdentifier?.pointer ?? ffi.nullptr);
    return NSItemProvider.castFromPointer(_ret, retain: true, release: true);
  }

  NSItemProvider? initWithContentsOfURL_(NSURL fileURL) {
    final _ret = _objc_msgSend_214(
        this.pointer, _sel_initWithContentsOfURL_, fileURL.pointer);
    return _ret.address == 0
        ? null
        : NSItemProvider.castFromPointer(_ret, retain: true, release: true);
  }

  void registerItemForTypeIdentifier_loadHandler_(
      NSString typeIdentifier,
      ObjCBlock_ffiVoid_ffiVoidobjcObjCObjectNSError_objcObjCObject_NSDictionary
          loadHandler) {
    _objc_msgSend_349(
        this.pointer,
        _sel_registerItemForTypeIdentifier_loadHandler_,
        typeIdentifier.pointer,
        loadHandler.pointer);
  }

  void loadItemForTypeIdentifier_options_completionHandler_(
      NSString typeIdentifier,
      NSDictionary? options,
      ObjCBlock_ffiVoid_objcObjCObject_NSError1? completionHandler) {
    _objc_msgSend_350(
        this.pointer,
        _sel_loadItemForTypeIdentifier_options_completionHandler_,
        typeIdentifier.pointer,
        options?.pointer ?? ffi.nullptr,
        completionHandler?.pointer ?? ffi.nullptr);
  }

  ObjCBlock_ffiVoid_ffiVoidobjcObjCObjectNSError_objcObjCObject_NSDictionary?
      get previewImageHandler {
    final _ret = _objc_msgSend_351(this.pointer, _sel_previewImageHandler);
    return _ret.address == 0
        ? null
        : ObjCBlock_ffiVoid_ffiVoidobjcObjCObjectNSError_objcObjCObject_NSDictionary
            .castFromPointer(_ret, retain: true, release: true);
  }

  set previewImageHandler(
      ObjCBlock_ffiVoid_ffiVoidobjcObjCObjectNSError_objcObjCObject_NSDictionary?
          value) {
    return _objc_msgSend_352(this.pointer, _sel_setPreviewImageHandler_,
        value?.pointer ?? ffi.nullptr);
  }

  void loadPreviewImageWithOptions_completionHandler_(NSDictionary options,
      ObjCBlock_ffiVoid_objcObjCObject_NSError1 completionHandler) {
    _objc_msgSend_353(
        this.pointer,
        _sel_loadPreviewImageWithOptions_completionHandler_,
        options.pointer,
        completionHandler.pointer);
  }

  static NSItemProvider new1() {
    final _ret = _objc_msgSend_2(_class_NSItemProvider, _sel_new);
    return NSItemProvider.castFromPointer(_ret, retain: false, release: true);
  }

  static NSItemProvider allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_3(_class_NSItemProvider, _sel_allocWithZone_, zone);
    return NSItemProvider.castFromPointer(_ret, retain: false, release: true);
  }

  static NSItemProvider alloc() {
    final _ret = _objc_msgSend_2(_class_NSItemProvider, _sel_alloc);
    return NSItemProvider.castFromPointer(_ret, retain: false, release: true);
  }
}

late final _class_NSItemProvider = objc.getClass("NSItemProvider");

abstract class NSItemProviderRepresentationVisibility {
  static const int NSItemProviderRepresentationVisibilityAll = 0;
  static const int NSItemProviderRepresentationVisibilityTeam = 1;
  static const int NSItemProviderRepresentationVisibilityGroup = 2;
  static const int NSItemProviderRepresentationVisibilityOwnProcess = 3;
}

ffi.Pointer<objc.ObjCObject>
    _ObjCBlock_NSProgress_ffiVoidNSDataNSError_fnPtrTrampoline(
            ffi.Pointer<objc.ObjCBlock> block,
            ffi.Pointer<objc.ObjCBlock> arg0) =>
        block.ref.target
            .cast<
                ffi
                .NativeFunction<
                    ffi.Pointer<objc.ObjCObject> Function(
                        ffi.Pointer<objc.ObjCBlock> arg0)>>()
            .asFunction<
                ffi.Pointer<objc.ObjCObject> Function(
                    ffi.Pointer<objc.ObjCBlock>)>()(arg0);
ffi.Pointer<objc.ObjCObject>
    _ObjCBlock_NSProgress_ffiVoidNSDataNSError_closureTrampoline(
            ffi.Pointer<objc.ObjCBlock> block,
            ffi.Pointer<objc.ObjCBlock> arg0) =>
        (objc.getBlockClosure(block) as ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCBlock>))(arg0);

class ObjCBlock_NSProgress_ffiVoidNSDataNSError extends objc.ObjCBlockBase {
  ObjCBlock_NSProgress_ffiVoidNSDataNSError._(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = true})
      : super(pointer, retain: retain, release: release);

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_NSProgress_ffiVoidNSDataNSError castFromPointer(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = false}) {
    return ObjCBlock_NSProgress_ffiVoidNSDataNSError._(pointer,
        retain: retain, release: release);
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_NSProgress_ffiVoidNSDataNSError.fromFunctionPointer(
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Pointer<objc.ObjCObject> Function(
                      ffi.Pointer<objc.ObjCBlock> arg0)>>
          ptr)
      : this._(objc.newPointerBlock(
            _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Pointer<objc.ObjCObject> Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<objc.ObjCBlock>)>(
                    _ObjCBlock_NSProgress_ffiVoidNSDataNSError_fnPtrTrampoline)
                .cast(),
            ptr.cast()));
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_NSProgress_ffiVoidNSDataNSError.fromFunction(
      NSProgress? Function(ObjCBlock_ffiVoid_NSData_NSError) fn)
      : this._(objc.newClosureBlock(
            _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Pointer<objc.ObjCObject> Function(
                            ffi.Pointer<objc.ObjCBlock>, ffi.Pointer<objc.ObjCBlock>)>(
                    _ObjCBlock_NSProgress_ffiVoidNSDataNSError_closureTrampoline)
                .cast(),
            (ffi.Pointer<objc.ObjCBlock> arg0) =>
                fn(ObjCBlock_ffiVoid_NSData_NSError.castFromPointer(arg0,
                        retain: true, release: true))
                    ?.retainAndReturnPointer() ??
                ffi.nullptr));
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  NSProgress? call(ObjCBlock_ffiVoid_NSData_NSError arg0) => pointer.ref.invoke
              .cast<
                  ffi.NativeFunction<
                      ffi.Pointer<objc.ObjCObject> Function(
                          ffi.Pointer<objc.ObjCBlock> block,
                          ffi.Pointer<objc.ObjCBlock> arg0)>>()
              .asFunction<ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCBlock>, ffi.Pointer<objc.ObjCBlock>)>()
              (pointer, arg0.pointer)
              .address ==
          0
      ? null
      : NSProgress.castFromPointer(
          pointer.ref.invoke.cast<ffi.NativeFunction<ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCBlock> block, ffi.Pointer<objc.ObjCBlock> arg0)>>().asFunction<
              ffi.Pointer<objc.ObjCObject> Function(
                  ffi.Pointer<objc.ObjCBlock>, ffi.Pointer<objc.ObjCBlock>)>()(pointer, arg0.pointer),
          retain: false,
          release: true);
}

class NSProgress extends objc.ObjCObjectBase {
  NSProgress._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super(pointer, retain: retain, release: release);

  /// Constructs a [NSProgress] that points to the same underlying object as [other].
  NSProgress.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSProgress] that wraps the given raw object pointer.
  NSProgress.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSProgress].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(obj.pointer, _sel_isKindOfClass_, _class_NSProgress);
  }
}

late final _class_NSProgress = objc.getClass("NSProgress");
void _ObjCBlock_ffiVoid_NSData_NSError_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlock> block,
        ffi.Pointer<objc.ObjCObject> arg0,
        ffi.Pointer<objc.ObjCObject> arg1) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0,
                    ffi.Pointer<objc.ObjCObject> arg1)>>()
        .asFunction<
            void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>()(arg0, arg1);
void _ObjCBlock_ffiVoid_NSData_NSError_closureTrampoline(
        ffi.Pointer<objc.ObjCBlock> block,
        ffi.Pointer<objc.ObjCObject> arg0,
        ffi.Pointer<objc.ObjCObject> arg1) =>
    (objc.getBlockClosure(block) as void Function(ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>))(arg0, arg1);

class ObjCBlock_ffiVoid_NSData_NSError extends objc.ObjCBlockBase {
  ObjCBlock_ffiVoid_NSData_NSError._(ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false, bool release = true})
      : super(pointer, retain: retain, release: release);

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_ffiVoid_NSData_NSError castFromPointer(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = false}) {
    return ObjCBlock_ffiVoid_NSData_NSError._(pointer,
        retain: retain, release: release);
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSData_NSError.fromFunctionPointer(
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0,
                      ffi.Pointer<objc.ObjCObject> arg1)>>
          ptr)
      : this._(objc.newPointerBlock(
            _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<objc.ObjCObject>)>(
                    _ObjCBlock_ffiVoid_NSData_NSError_fnPtrTrampoline)
                .cast(),
            ptr.cast()));
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSData_NSError.fromFunction(void Function(NSData?, NSError?) fn)
      : this._(objc.newClosureBlock(
            _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<objc.ObjCObject>)>(
                    _ObjCBlock_ffiVoid_NSData_NSError_closureTrampoline)
                .cast(),
            (ffi.Pointer<objc.ObjCObject> arg0, ffi.Pointer<objc.ObjCObject> arg1) => fn(
                arg0.address == 0
                    ? null
                    : NSData.castFromPointer(arg0, retain: true, release: true),
                arg1.address == 0
                    ? null
                    : NSError.castFromPointer(arg1, retain: true, release: true))));
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_NSData_NSError.listener(void Function(NSData?, NSError?) fn)
      : this._(objc.newClosureBlock(
            (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                        ffi.Void Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<objc.ObjCObject>)>.listener(
                    _ObjCBlock_ffiVoid_NSData_NSError_closureTrampoline)
                  ..keepIsolateAlive = false)
                .nativeFunction
                .cast(),
            (ffi.Pointer<objc.ObjCObject> arg0, ffi.Pointer<objc.ObjCObject> arg1) => fn(
                arg0.address == 0
                    ? null
                    : NSData.castFromPointer(arg0, retain: true, release: true),
                arg1.address == 0
                    ? null
                    : NSError.castFromPointer(arg1, retain: true, release: true))));
  static ffi.NativeCallable<
      ffi.Void Function(
          ffi.Pointer<objc.ObjCBlock>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCObject>)>? _dartFuncListenerTrampoline;

  void call(NSData? arg0, NSError? arg1) => pointer.ref.invoke
          .cast<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<objc.ObjCBlock> block,
                      ffi.Pointer<objc.ObjCObject> arg0,
                      ffi.Pointer<objc.ObjCObject> arg1)>>()
          .asFunction<
              void Function(
                  ffi.Pointer<objc.ObjCBlock>,
                  ffi.Pointer<objc.ObjCObject>,
                  ffi.Pointer<objc.ObjCObject>)>()(
      pointer, arg0?.pointer ?? ffi.nullptr, arg1?.pointer ?? ffi.nullptr);
}

late final _sel_registerDataRepresentationForTypeIdentifier_visibility_loadHandler_ =
    objc.registerName(
        "registerDataRepresentationForTypeIdentifier:visibility:loadHandler:");
final _objc_msgSend_337 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Int32,
                ffi.Pointer<objc.ObjCBlock>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            ffi.Pointer<objc.ObjCBlock>)>();

abstract class NSItemProviderFileOptions {
  static const int NSItemProviderFileOptionOpenInPlace = 1;
}

ffi.Pointer<objc.ObjCObject>
    _ObjCBlock_NSProgress_ffiVoidNSURLboolNSError_fnPtrTrampoline(
            ffi.Pointer<objc.ObjCBlock> block,
            ffi.Pointer<objc.ObjCBlock> arg0) =>
        block.ref.target
            .cast<
                ffi.NativeFunction<
                    ffi.Pointer<objc.ObjCObject> Function(
                        ffi.Pointer<objc.ObjCBlock> arg0)>>()
            .asFunction<
                ffi.Pointer<objc.ObjCObject> Function(
                    ffi.Pointer<objc.ObjCBlock>)>()(arg0);
ffi.Pointer<objc.ObjCObject>
    _ObjCBlock_NSProgress_ffiVoidNSURLboolNSError_closureTrampoline(
            ffi.Pointer<objc.ObjCBlock> block,
            ffi.Pointer<objc.ObjCBlock> arg0) =>
        (objc.getBlockClosure(block) as ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCBlock>))(arg0);

class ObjCBlock_NSProgress_ffiVoidNSURLboolNSError extends objc.ObjCBlockBase {
  ObjCBlock_NSProgress_ffiVoidNSURLboolNSError._(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = true})
      : super(pointer, retain: retain, release: release);

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_NSProgress_ffiVoidNSURLboolNSError castFromPointer(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = false}) {
    return ObjCBlock_NSProgress_ffiVoidNSURLboolNSError._(pointer,
        retain: retain, release: release);
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_NSProgress_ffiVoidNSURLboolNSError.fromFunctionPointer(
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Pointer<objc.ObjCObject> Function(
                      ffi.Pointer<objc.ObjCBlock> arg0)>>
          ptr)
      : this._(objc.newPointerBlock(
            _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Pointer<objc.ObjCObject> Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<objc.ObjCBlock>)>(
                    _ObjCBlock_NSProgress_ffiVoidNSURLboolNSError_fnPtrTrampoline)
                .cast(),
            ptr.cast()));
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_NSProgress_ffiVoidNSURLboolNSError.fromFunction(
      NSProgress? Function(ObjCBlock_ffiVoid_NSURL_bool_NSError) fn)
      : this._(objc.newClosureBlock(
            _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Pointer<objc.ObjCObject> Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<objc.ObjCBlock>)>(
                    _ObjCBlock_NSProgress_ffiVoidNSURLboolNSError_closureTrampoline)
                .cast(),
            (ffi.Pointer<objc.ObjCBlock> arg0) =>
                fn(ObjCBlock_ffiVoid_NSURL_bool_NSError.castFromPointer(arg0, retain: true, release: true))
                    ?.retainAndReturnPointer() ??
                ffi.nullptr));
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  NSProgress? call(ObjCBlock_ffiVoid_NSURL_bool_NSError arg0) => pointer.ref.invoke
              .cast<
                  ffi.NativeFunction<
                      ffi.Pointer<objc.ObjCObject> Function(
                          ffi.Pointer<objc.ObjCBlock> block,
                          ffi.Pointer<objc.ObjCBlock> arg0)>>()
              .asFunction<ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCBlock>, ffi.Pointer<objc.ObjCBlock>)>()
              (pointer, arg0.pointer)
              .address ==
          0
      ? null
      : NSProgress.castFromPointer(
          pointer.ref.invoke.cast<ffi.NativeFunction<ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCBlock> block, ffi.Pointer<objc.ObjCBlock> arg0)>>().asFunction<
              ffi.Pointer<objc.ObjCObject> Function(
                  ffi.Pointer<objc.ObjCBlock>, ffi.Pointer<objc.ObjCBlock>)>()(pointer, arg0.pointer),
          retain: false,
          release: true);
}

void _ObjCBlock_ffiVoid_NSURL_bool_NSError_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlock> block,
        ffi.Pointer<objc.ObjCObject> arg0,
        bool arg1,
        ffi.Pointer<objc.ObjCObject> arg2) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0,
                    ffi.Bool arg1, ffi.Pointer<objc.ObjCObject> arg2)>>()
        .asFunction<
            void Function(ffi.Pointer<objc.ObjCObject>, bool,
                ffi.Pointer<objc.ObjCObject>)>()(arg0, arg1, arg2);
void _ObjCBlock_ffiVoid_NSURL_bool_NSError_closureTrampoline(
        ffi.Pointer<objc.ObjCBlock> block,
        ffi.Pointer<objc.ObjCObject> arg0,
        bool arg1,
        ffi.Pointer<objc.ObjCObject> arg2) =>
    (objc.getBlockClosure(block) as void Function(ffi.Pointer<objc.ObjCObject>,
        bool, ffi.Pointer<objc.ObjCObject>))(arg0, arg1, arg2);

class ObjCBlock_ffiVoid_NSURL_bool_NSError extends objc.ObjCBlockBase {
  ObjCBlock_ffiVoid_NSURL_bool_NSError._(ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false, bool release = true})
      : super(pointer, retain: retain, release: release);

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_ffiVoid_NSURL_bool_NSError castFromPointer(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = false}) {
    return ObjCBlock_ffiVoid_NSURL_bool_NSError._(pointer,
        retain: retain, release: release);
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSURL_bool_NSError.fromFunctionPointer(
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0,
                      ffi.Bool arg1, ffi.Pointer<objc.ObjCObject> arg2)>>
          ptr)
      : this._(
            objc.newPointerBlock(
                _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                            ffi.Void Function(
                                ffi.Pointer<objc.ObjCBlock>,
                                ffi.Pointer<objc.ObjCObject>,
                                ffi.Bool,
                                ffi.Pointer<objc.ObjCObject>)>(
                        _ObjCBlock_ffiVoid_NSURL_bool_NSError_fnPtrTrampoline)
                    .cast(),
                ptr.cast()));
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSURL_bool_NSError.fromFunction(void Function(NSURL?, bool, NSError?) fn)
      : this._(objc.newClosureBlock(
            _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Bool,
                            ffi.Pointer<objc.ObjCObject>)>(
                    _ObjCBlock_ffiVoid_NSURL_bool_NSError_closureTrampoline)
                .cast(),
            (ffi.Pointer<objc.ObjCObject> arg0, bool arg1, ffi.Pointer<objc.ObjCObject> arg2) => fn(
                arg0.address == 0
                    ? null
                    : NSURL.castFromPointer(arg0, retain: true, release: true),
                arg1,
                arg2.address == 0 ? null : NSError.castFromPointer(arg2, retain: true, release: true))));
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_NSURL_bool_NSError.listener(
      void Function(NSURL?, bool, NSError?) fn)
      : this._(objc.newClosureBlock(
            (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                        ffi.Void Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Bool,
                            ffi.Pointer<objc.ObjCObject>)>.listener(
                    _ObjCBlock_ffiVoid_NSURL_bool_NSError_closureTrampoline)
                  ..keepIsolateAlive = false)
                .nativeFunction
                .cast(),
            (ffi.Pointer<objc.ObjCObject> arg0, bool arg1, ffi.Pointer<objc.ObjCObject> arg2) => fn(
                arg0.address == 0 ? null : NSURL.castFromPointer(arg0, retain: true, release: true),
                arg1,
                arg2.address == 0 ? null : NSError.castFromPointer(arg2, retain: true, release: true))));
  static ffi.NativeCallable<
      ffi.Void Function(
          ffi.Pointer<objc.ObjCBlock>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Bool,
          ffi.Pointer<objc.ObjCObject>)>? _dartFuncListenerTrampoline;

  void call(NSURL? arg0, bool arg1, NSError? arg2) => pointer.ref.invoke
          .cast<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<objc.ObjCBlock> block,
                      ffi.Pointer<objc.ObjCObject> arg0,
                      ffi.Bool arg1,
                      ffi.Pointer<objc.ObjCObject> arg2)>>()
          .asFunction<
              void Function(
                  ffi.Pointer<objc.ObjCBlock>,
                  ffi.Pointer<objc.ObjCObject>,
                  bool,
                  ffi.Pointer<objc.ObjCObject>)>()(pointer,
      arg0?.pointer ?? ffi.nullptr, arg1, arg2?.pointer ?? ffi.nullptr);
}

late final _sel_registerFileRepresentationForTypeIdentifier_fileOptions_visibility_loadHandler_ =
    objc.registerName(
        "registerFileRepresentationForTypeIdentifier:fileOptions:visibility:loadHandler:");
final _objc_msgSend_338 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Int32,
                ffi.Int32,
                ffi.Pointer<objc.ObjCBlock>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            int,
            ffi.Pointer<objc.ObjCBlock>)>();
late final _sel_registeredTypeIdentifiers =
    objc.registerName("registeredTypeIdentifiers");
late final _sel_registeredTypeIdentifiersWithFileOptions_ =
    objc.registerName("registeredTypeIdentifiersWithFileOptions:");
final _objc_msgSend_339 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Int32)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_hasItemConformingToTypeIdentifier_ =
    objc.registerName("hasItemConformingToTypeIdentifier:");
late final _sel_hasRepresentationConformingToTypeIdentifier_fileOptions_ = objc
    .registerName("hasRepresentationConformingToTypeIdentifier:fileOptions:");
final _objc_msgSend_340 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Int32)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int)>();
late final _sel_loadDataRepresentationForTypeIdentifier_completionHandler_ =
    objc.registerName(
        "loadDataRepresentationForTypeIdentifier:completionHandler:");
final _objc_msgSend_341 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCBlock>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCBlock>)>();
void _ObjCBlock_ffiVoid_NSURL_NSError_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlock> block,
        ffi.Pointer<objc.ObjCObject> arg0,
        ffi.Pointer<objc.ObjCObject> arg1) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0,
                    ffi.Pointer<objc.ObjCObject> arg1)>>()
        .asFunction<
            void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>()(arg0, arg1);
void _ObjCBlock_ffiVoid_NSURL_NSError_closureTrampoline(
        ffi.Pointer<objc.ObjCBlock> block,
        ffi.Pointer<objc.ObjCObject> arg0,
        ffi.Pointer<objc.ObjCObject> arg1) =>
    (objc.getBlockClosure(block) as void Function(ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>))(arg0, arg1);

class ObjCBlock_ffiVoid_NSURL_NSError extends objc.ObjCBlockBase {
  ObjCBlock_ffiVoid_NSURL_NSError._(ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false, bool release = true})
      : super(pointer, retain: retain, release: release);

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_ffiVoid_NSURL_NSError castFromPointer(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = false}) {
    return ObjCBlock_ffiVoid_NSURL_NSError._(pointer,
        retain: retain, release: release);
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSURL_NSError.fromFunctionPointer(
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0,
                      ffi.Pointer<objc.ObjCObject> arg1)>>
          ptr)
      : this._(objc.newPointerBlock(
            _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<objc.ObjCObject>)>(
                    _ObjCBlock_ffiVoid_NSURL_NSError_fnPtrTrampoline)
                .cast(),
            ptr.cast()));
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSURL_NSError.fromFunction(
      void Function(NSURL?, NSError?) fn)
      : this._(objc.newClosureBlock(
            _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<objc.ObjCObject>)>(
                    _ObjCBlock_ffiVoid_NSURL_NSError_closureTrampoline)
                .cast(),
            (ffi.Pointer<objc.ObjCObject> arg0, ffi.Pointer<objc.ObjCObject> arg1) => fn(
                arg0.address == 0
                    ? null
                    : NSURL.castFromPointer(arg0, retain: true, release: true),
                arg1.address == 0 ? null : NSError.castFromPointer(arg1, retain: true, release: true))));
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_NSURL_NSError.listener(void Function(NSURL?, NSError?) fn)
      : this._(objc.newClosureBlock(
            (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                        ffi.Void Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<objc.ObjCObject>)>.listener(
                    _ObjCBlock_ffiVoid_NSURL_NSError_closureTrampoline)
                  ..keepIsolateAlive = false)
                .nativeFunction
                .cast(),
            (ffi.Pointer<objc.ObjCObject> arg0, ffi.Pointer<objc.ObjCObject> arg1) => fn(
                arg0.address == 0
                    ? null
                    : NSURL.castFromPointer(arg0, retain: true, release: true),
                arg1.address == 0
                    ? null
                    : NSError.castFromPointer(arg1, retain: true, release: true))));
  static ffi.NativeCallable<
      ffi.Void Function(
          ffi.Pointer<objc.ObjCBlock>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCObject>)>? _dartFuncListenerTrampoline;

  void call(NSURL? arg0, NSError? arg1) => pointer.ref.invoke
          .cast<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<objc.ObjCBlock> block,
                      ffi.Pointer<objc.ObjCObject> arg0,
                      ffi.Pointer<objc.ObjCObject> arg1)>>()
          .asFunction<
              void Function(
                  ffi.Pointer<objc.ObjCBlock>,
                  ffi.Pointer<objc.ObjCObject>,
                  ffi.Pointer<objc.ObjCObject>)>()(
      pointer, arg0?.pointer ?? ffi.nullptr, arg1?.pointer ?? ffi.nullptr);
}

late final _sel_loadFileRepresentationForTypeIdentifier_completionHandler_ =
    objc.registerName(
        "loadFileRepresentationForTypeIdentifier:completionHandler:");
final _objc_msgSend_342 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCBlock>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCBlock>)>();
late final _sel_loadInPlaceFileRepresentationForTypeIdentifier_completionHandler_ =
    objc.registerName(
        "loadInPlaceFileRepresentationForTypeIdentifier:completionHandler:");
final _objc_msgSend_343 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCBlock>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCBlock>)>();
late final _sel_suggestedName = objc.registerName("suggestedName");
late final _sel_setSuggestedName_ = objc.registerName("setSuggestedName:");
final _objc_msgSend_344 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_initWithObject_ = objc.registerName("initWithObject:");
late final _sel_registerObject_visibility_ =
    objc.registerName("registerObject:visibility:");
final _objc_msgSend_345 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Int32)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int)>();
ffi.Pointer<objc.ObjCObject>
    _ObjCBlock_NSProgress_ffiVoidobjcObjCObjectNSError_fnPtrTrampoline(
            ffi.Pointer<objc.ObjCBlock> block,
            ffi.Pointer<objc.ObjCBlock> arg0) =>
        block.ref.target
            .cast<
                ffi.NativeFunction<
                    ffi.Pointer<objc.ObjCObject> Function(
                        ffi.Pointer<objc.ObjCBlock> arg0)>>()
            .asFunction<
                ffi.Pointer<objc.ObjCObject> Function(
                    ffi.Pointer<objc.ObjCBlock>)>()(arg0);
ffi.Pointer<objc.ObjCObject>
    _ObjCBlock_NSProgress_ffiVoidobjcObjCObjectNSError_closureTrampoline(
            ffi.Pointer<objc.ObjCBlock> block,
            ffi.Pointer<objc.ObjCBlock> arg0) =>
        (objc.getBlockClosure(block) as ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCBlock>))(arg0);

class ObjCBlock_NSProgress_ffiVoidobjcObjCObjectNSError
    extends objc.ObjCBlockBase {
  ObjCBlock_NSProgress_ffiVoidobjcObjCObjectNSError._(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = true})
      : super(pointer, retain: retain, release: release);

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_NSProgress_ffiVoidobjcObjCObjectNSError castFromPointer(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = false}) {
    return ObjCBlock_NSProgress_ffiVoidobjcObjCObjectNSError._(pointer,
        retain: retain, release: release);
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_NSProgress_ffiVoidobjcObjCObjectNSError.fromFunctionPointer(
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Pointer<objc.ObjCObject> Function(
                      ffi.Pointer<objc.ObjCBlock> arg0)>>
          ptr)
      : this._(objc.newPointerBlock(
            _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Pointer<objc.ObjCObject> Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<objc.ObjCBlock>)>(
                    _ObjCBlock_NSProgress_ffiVoidobjcObjCObjectNSError_fnPtrTrampoline)
                .cast(),
            ptr.cast()));
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_NSProgress_ffiVoidobjcObjCObjectNSError.fromFunction(
      NSProgress? Function(ObjCBlock_ffiVoid_objcObjCObject_NSError) fn)
      : this._(objc.newClosureBlock(
            _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Pointer<objc.ObjCObject> Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<objc.ObjCBlock>)>(
                    _ObjCBlock_NSProgress_ffiVoidobjcObjCObjectNSError_closureTrampoline)
                .cast(),
            (ffi.Pointer<objc.ObjCBlock> arg0) =>
                fn(ObjCBlock_ffiVoid_objcObjCObject_NSError.castFromPointer(arg0, retain: true, release: true))
                    ?.retainAndReturnPointer() ??
                ffi.nullptr));
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  NSProgress? call(ObjCBlock_ffiVoid_objcObjCObject_NSError arg0) => pointer.ref.invoke
              .cast<
                  ffi.NativeFunction<
                      ffi.Pointer<objc.ObjCObject> Function(
                          ffi.Pointer<objc.ObjCBlock> block,
                          ffi.Pointer<objc.ObjCBlock> arg0)>>()
              .asFunction<ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCBlock>, ffi.Pointer<objc.ObjCBlock>)>()
              (pointer, arg0.pointer)
              .address ==
          0
      ? null
      : NSProgress.castFromPointer(
          pointer.ref.invoke.cast<ffi.NativeFunction<ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCBlock> block, ffi.Pointer<objc.ObjCBlock> arg0)>>().asFunction<
              ffi.Pointer<objc.ObjCObject> Function(
                  ffi.Pointer<objc.ObjCBlock>, ffi.Pointer<objc.ObjCBlock>)>()(pointer, arg0.pointer),
          retain: false,
          release: true);
}

void _ObjCBlock_ffiVoid_objcObjCObject_NSError_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlock> block,
        ffi.Pointer<objc.ObjCObject> arg0,
        ffi.Pointer<objc.ObjCObject> arg1) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0,
                    ffi.Pointer<objc.ObjCObject> arg1)>>()
        .asFunction<
            void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>()(arg0, arg1);
void _ObjCBlock_ffiVoid_objcObjCObject_NSError_closureTrampoline(
        ffi.Pointer<objc.ObjCBlock> block,
        ffi.Pointer<objc.ObjCObject> arg0,
        ffi.Pointer<objc.ObjCObject> arg1) =>
    (objc.getBlockClosure(block) as void Function(ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>))(arg0, arg1);

class ObjCBlock_ffiVoid_objcObjCObject_NSError extends objc.ObjCBlockBase {
  ObjCBlock_ffiVoid_objcObjCObject_NSError._(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = true})
      : super(pointer, retain: retain, release: release);

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_ffiVoid_objcObjCObject_NSError castFromPointer(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = false}) {
    return ObjCBlock_ffiVoid_objcObjCObject_NSError._(pointer,
        retain: retain, release: release);
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_objcObjCObject_NSError.fromFunctionPointer(
      ffi
          .Pointer<
              ffi
              .NativeFunction<
                  ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0,
                      ffi.Pointer<objc.ObjCObject> arg1)>>
          ptr)
      : this._(objc.newPointerBlock(
            _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<objc.ObjCObject>)>(
                    _ObjCBlock_ffiVoid_objcObjCObject_NSError_fnPtrTrampoline)
                .cast(),
            ptr.cast()));
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_objcObjCObject_NSError.fromFunction(
      void Function(objc.ObjCObjectBase?, NSError?) fn)
      : this._(objc.newClosureBlock(
            _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<objc.ObjCObject>)>(
                    _ObjCBlock_ffiVoid_objcObjCObject_NSError_closureTrampoline)
                .cast(),
            (ffi.Pointer<objc.ObjCObject> arg0, ffi.Pointer<objc.ObjCObject> arg1) => fn(
                arg0.address == 0
                    ? null
                    : objc.ObjCObjectBase(arg0, retain: true, release: true),
                arg1.address == 0 ? null : NSError.castFromPointer(arg1, retain: true, release: true))));
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_objcObjCObject_NSError.listener(
      void Function(objc.ObjCObjectBase?, NSError?) fn)
      : this._(objc.newClosureBlock(
            (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                        ffi.Void Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<objc.ObjCObject>)>.listener(
                    _ObjCBlock_ffiVoid_objcObjCObject_NSError_closureTrampoline)
                  ..keepIsolateAlive = false)
                .nativeFunction
                .cast(),
            (ffi.Pointer<objc.ObjCObject> arg0, ffi.Pointer<objc.ObjCObject> arg1) => fn(
                arg0.address == 0 ? null : objc.ObjCObjectBase(arg0, retain: true, release: true),
                arg1.address == 0 ? null : NSError.castFromPointer(arg1, retain: true, release: true))));
  static ffi.NativeCallable<
      ffi.Void Function(
          ffi.Pointer<objc.ObjCBlock>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCObject>)>? _dartFuncListenerTrampoline;

  void call(objc.ObjCObjectBase? arg0, NSError? arg1) => pointer.ref.invoke
          .cast<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<objc.ObjCBlock> block,
                      ffi.Pointer<objc.ObjCObject> arg0,
                      ffi.Pointer<objc.ObjCObject> arg1)>>()
          .asFunction<
              void Function(
                  ffi.Pointer<objc.ObjCBlock>,
                  ffi.Pointer<objc.ObjCObject>,
                  ffi.Pointer<objc.ObjCObject>)>()(
      pointer, arg0?.pointer ?? ffi.nullptr, arg1?.pointer ?? ffi.nullptr);
}

late final _sel_registerObjectOfClass_visibility_loadHandler_ =
    objc.registerName("registerObjectOfClass:visibility:loadHandler:");
final _objc_msgSend_346 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Int32,
                ffi.Pointer<objc.ObjCBlock>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            ffi.Pointer<objc.ObjCBlock>)>();
late final _sel_canLoadObjectOfClass_ =
    objc.registerName("canLoadObjectOfClass:");
late final _sel_loadObjectOfClass_completionHandler_ =
    objc.registerName("loadObjectOfClass:completionHandler:");
final _objc_msgSend_347 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCBlock>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCBlock>)>();
late final _sel_initWithItem_typeIdentifier_ =
    objc.registerName("initWithItem:typeIdentifier:");
final _objc_msgSend_348 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
void
    _ObjCBlock_ffiVoid_ffiVoidobjcObjCObjectNSError_objcObjCObject_NSDictionary_fnPtrTrampoline(
            ffi.Pointer<objc.ObjCBlock> block,
            ffi.Pointer<objc.ObjCBlock> arg0,
            ffi.Pointer<objc.ObjCObject> arg1,
            ffi.Pointer<objc.ObjCObject> arg2) =>
        block.ref.target
            .cast<
                ffi.NativeFunction<
                    ffi.Void Function(
                        ffi.Pointer<objc.ObjCBlock> arg0,
                        ffi.Pointer<objc.ObjCObject> arg1,
                        ffi.Pointer<objc.ObjCObject> arg2)>>()
            .asFunction<
                void Function(
                    ffi.Pointer<objc.ObjCBlock>,
                    ffi.Pointer<objc.ObjCObject>,
                    ffi.Pointer<objc.ObjCObject>)>()(arg0, arg1, arg2);
void
    _ObjCBlock_ffiVoid_ffiVoidobjcObjCObjectNSError_objcObjCObject_NSDictionary_closureTrampoline(
            ffi.Pointer<objc.ObjCBlock> block,
            ffi.Pointer<objc.ObjCBlock> arg0,
            ffi.Pointer<objc.ObjCObject> arg1,
            ffi.Pointer<objc.ObjCObject> arg2) =>
        (objc.getBlockClosure(block) as void Function(
            ffi.Pointer<objc.ObjCBlock>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>))(arg0, arg1, arg2);

class ObjCBlock_ffiVoid_ffiVoidobjcObjCObjectNSError_objcObjCObject_NSDictionary
    extends objc.ObjCBlockBase {
  ObjCBlock_ffiVoid_ffiVoidobjcObjCObjectNSError_objcObjCObject_NSDictionary._(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = true})
      : super(pointer, retain: retain, release: release);

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_ffiVoid_ffiVoidobjcObjCObjectNSError_objcObjCObject_NSDictionary
      castFromPointer(ffi.Pointer<objc.ObjCBlock> pointer,
          {bool retain = false, bool release = false}) {
    return ObjCBlock_ffiVoid_ffiVoidobjcObjCObjectNSError_objcObjCObject_NSDictionary
        ._(pointer, retain: retain, release: release);
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_ffiVoidobjcObjCObjectNSError_objcObjCObject_NSDictionary.fromFunctionPointer(
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<objc.ObjCBlock> arg0,
                      ffi.Pointer<objc.ObjCObject> arg1,
                      ffi.Pointer<objc.ObjCObject> arg2)>>
          ptr)
      : this._(objc.newPointerBlock(
            _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<objc.ObjCObject>)>(
                    _ObjCBlock_ffiVoid_ffiVoidobjcObjCObjectNSError_objcObjCObject_NSDictionary_fnPtrTrampoline)
                .cast(),
            ptr.cast()));
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_ffiVoidobjcObjCObjectNSError_objcObjCObject_NSDictionary.fromFunction(void Function(ObjCBlock_ffiVoid_objcObjCObject_NSError1, objc.ObjCObjectBase, NSDictionary) fn)
      : this._(objc.newClosureBlock(
            _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<objc.ObjCObject>)>(
                    _ObjCBlock_ffiVoid_ffiVoidobjcObjCObjectNSError_objcObjCObject_NSDictionary_closureTrampoline)
                .cast(),
            (ffi.Pointer<objc.ObjCBlock> arg0,
                    ffi.Pointer<objc.ObjCObject> arg1,
                    ffi.Pointer<objc.ObjCObject> arg2) =>
                fn(
                    ObjCBlock_ffiVoid_objcObjCObject_NSError1.castFromPointer(arg0, retain: true, release: true),
                    objc.ObjCObjectBase(arg1, retain: true, release: true),
                    NSDictionary.castFromPointer(arg2, retain: true, release: true))));
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_ffiVoidobjcObjCObjectNSError_objcObjCObject_NSDictionary.listener(
      void Function(ObjCBlock_ffiVoid_objcObjCObject_NSError1,
              objc.ObjCObjectBase, NSDictionary)
          fn)
      : this._(objc.newClosureBlock(
            (_dartFuncListenerTrampoline ??=
                    ffi.NativeCallable<ffi.Void Function(ffi.Pointer<objc.ObjCBlock>, ffi.Pointer<objc.ObjCBlock>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>.listener(
                        _ObjCBlock_ffiVoid_ffiVoidobjcObjCObjectNSError_objcObjCObject_NSDictionary_closureTrampoline)
                      ..keepIsolateAlive = false)
                .nativeFunction
                .cast(),
            (ffi.Pointer<objc.ObjCBlock> arg0,
                    ffi.Pointer<objc.ObjCObject> arg1,
                    ffi.Pointer<objc.ObjCObject> arg2) =>
                fn(
                    ObjCBlock_ffiVoid_objcObjCObject_NSError1.castFromPointer(arg0, retain: true, release: true),
                    objc.ObjCObjectBase(arg1, retain: true, release: true),
                    NSDictionary.castFromPointer(arg2, retain: true, release: true))));
  static ffi.NativeCallable<
      ffi.Void Function(
          ffi.Pointer<objc.ObjCBlock>,
          ffi.Pointer<objc.ObjCBlock>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCObject>)>? _dartFuncListenerTrampoline;

  void call(ObjCBlock_ffiVoid_objcObjCObject_NSError1 arg0,
          objc.ObjCObjectBase arg1, NSDictionary arg2) =>
      pointer.ref.invoke
              .cast<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<objc.ObjCBlock> block,
                          ffi.Pointer<objc.ObjCBlock> arg0,
                          ffi.Pointer<objc.ObjCObject> arg1,
                          ffi.Pointer<objc.ObjCObject> arg2)>>()
              .asFunction<
                  void Function(
                      ffi.Pointer<objc.ObjCBlock>,
                      ffi.Pointer<objc.ObjCBlock>,
                      ffi.Pointer<objc.ObjCObject>,
                      ffi.Pointer<objc.ObjCObject>)>()(
          pointer, arg0.pointer, arg1.pointer, arg2.pointer);
}

void _ObjCBlock_ffiVoid_objcObjCObject_NSError1_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlock> block,
        ffi.Pointer<objc.ObjCObject> arg0,
        ffi.Pointer<objc.ObjCObject> arg1) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0,
                    ffi.Pointer<objc.ObjCObject> arg1)>>()
        .asFunction<
            void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>()(arg0, arg1);
void _ObjCBlock_ffiVoid_objcObjCObject_NSError1_closureTrampoline(
        ffi.Pointer<objc.ObjCBlock> block,
        ffi.Pointer<objc.ObjCObject> arg0,
        ffi.Pointer<objc.ObjCObject> arg1) =>
    (objc.getBlockClosure(block) as void Function(ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>))(arg0, arg1);

class ObjCBlock_ffiVoid_objcObjCObject_NSError1 extends objc.ObjCBlockBase {
  ObjCBlock_ffiVoid_objcObjCObject_NSError1._(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = true})
      : super(pointer, retain: retain, release: release);

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_ffiVoid_objcObjCObject_NSError1 castFromPointer(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = false}) {
    return ObjCBlock_ffiVoid_objcObjCObject_NSError1._(pointer,
        retain: retain, release: release);
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_objcObjCObject_NSError1.fromFunctionPointer(
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0,
                      ffi.Pointer<objc.ObjCObject> arg1)>>
          ptr)
      : this._(objc.newPointerBlock(
            _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<objc.ObjCObject>)>(
                    _ObjCBlock_ffiVoid_objcObjCObject_NSError1_fnPtrTrampoline)
                .cast(),
            ptr.cast()));
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_objcObjCObject_NSError1.fromFunction(
      void Function(objc.ObjCObjectBase?, NSError) fn)
      : this._(objc.newClosureBlock(
            _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<objc.ObjCObject>)>(
                    _ObjCBlock_ffiVoid_objcObjCObject_NSError1_closureTrampoline)
                .cast(),
            (ffi.Pointer<objc.ObjCObject> arg0, ffi.Pointer<objc.ObjCObject> arg1) => fn(
                arg0.address == 0
                    ? null
                    : objc.ObjCObjectBase(arg0, retain: true, release: true),
                NSError.castFromPointer(arg1, retain: true, release: true))));
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_objcObjCObject_NSError1.listener(
      void Function(objc.ObjCObjectBase?, NSError) fn)
      : this._(objc.newClosureBlock(
            (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                        ffi.Void Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<objc.ObjCObject>)>.listener(
                    _ObjCBlock_ffiVoid_objcObjCObject_NSError1_closureTrampoline)
                  ..keepIsolateAlive = false)
                .nativeFunction
                .cast(),
            (ffi.Pointer<objc.ObjCObject> arg0, ffi.Pointer<objc.ObjCObject> arg1) => fn(
                arg0.address == 0
                    ? null
                    : objc.ObjCObjectBase(arg0, retain: true, release: true),
                NSError.castFromPointer(arg1, retain: true, release: true))));
  static ffi.NativeCallable<
      ffi.Void Function(
          ffi.Pointer<objc.ObjCBlock>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCObject>)>? _dartFuncListenerTrampoline;

  void call(objc.ObjCObjectBase? arg0, NSError arg1) => pointer.ref.invoke
          .cast<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<objc.ObjCBlock> block,
                      ffi.Pointer<objc.ObjCObject> arg0,
                      ffi.Pointer<objc.ObjCObject> arg1)>>()
          .asFunction<
              void Function(
                  ffi.Pointer<objc.ObjCBlock>,
                  ffi.Pointer<objc.ObjCObject>,
                  ffi.Pointer<objc.ObjCObject>)>()(
      pointer, arg0?.pointer ?? ffi.nullptr, arg1.pointer);
}

late final _sel_registerItemForTypeIdentifier_loadHandler_ =
    objc.registerName("registerItemForTypeIdentifier:loadHandler:");
final _objc_msgSend_349 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCBlock>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCBlock>)>();
late final _sel_loadItemForTypeIdentifier_options_completionHandler_ =
    objc.registerName("loadItemForTypeIdentifier:options:completionHandler:");
final _objc_msgSend_350 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCBlock>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCBlock>)>();
late final _sel_previewImageHandler = objc.registerName("previewImageHandler");
final _objc_msgSend_351 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCBlock> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCBlock> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setPreviewImageHandler_ =
    objc.registerName("setPreviewImageHandler:");
final _objc_msgSend_352 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCBlock>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCBlock>)>();
late final _sel_loadPreviewImageWithOptions_completionHandler_ =
    objc.registerName("loadPreviewImageWithOptions:completionHandler:");
final _objc_msgSend_353 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCBlock>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCBlock>)>();

class NSMutableString extends NSString {
  NSMutableString._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSMutableString] that points to the same underlying object as [other].
  NSMutableString.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSMutableString] that wraps the given raw object pointer.
  NSMutableString.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSMutableString].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSMutableString);
  }

  void replaceCharactersInRange_withString_(_NSRange range, NSString aString) {
    _objc_msgSend_354(this.pointer, _sel_replaceCharactersInRange_withString_,
        range, aString.pointer);
  }

  void insertString_atIndex_(NSString aString, int loc) {
    _objc_msgSend_355(
        this.pointer, _sel_insertString_atIndex_, aString.pointer, loc);
  }

  void deleteCharactersInRange_(_NSRange range) {
    _objc_msgSend_295(this.pointer, _sel_deleteCharactersInRange_, range);
  }

  void appendString_(NSString aString) {
    _objc_msgSend_162(this.pointer, _sel_appendString_, aString.pointer);
  }

  void appendFormat_(NSString format) {
    _objc_msgSend_162(this.pointer, _sel_appendFormat_, format.pointer);
  }

  void setString_(NSString aString) {
    _objc_msgSend_162(this.pointer, _sel_setString_, aString.pointer);
  }

  int replaceOccurrencesOfString_withString_options_range_(NSString target,
      NSString replacement, int options, _NSRange searchRange) {
    return _objc_msgSend_356(
        this.pointer,
        _sel_replaceOccurrencesOfString_withString_options_range_,
        target.pointer,
        replacement.pointer,
        options,
        searchRange);
  }

  bool applyTransform_reverse_range_updatedRange_(NSString transform,
      bool reverse, _NSRange range, ffi.Pointer<_NSRange> resultingRange) {
    return _objc_msgSend_357(
        this.pointer,
        _sel_applyTransform_reverse_range_updatedRange_,
        transform.pointer,
        reverse,
        range,
        resultingRange);
  }

  NSMutableString initWithCapacity_(int capacity) {
    final _ret =
        _objc_msgSend_358(this.pointer, _sel_initWithCapacity_, capacity);
    return NSMutableString.castFromPointer(_ret, retain: true, release: true);
  }

  static NSMutableString stringWithCapacity_(int capacity) {
    final _ret = _objc_msgSend_358(
        _class_NSMutableString, _sel_stringWithCapacity_, capacity);
    return NSMutableString.castFromPointer(_ret, retain: true, release: true);
  }

  @override
  NSMutableString init() {
    final _ret = _objc_msgSend_2(this.pointer, _sel_init);
    return NSMutableString.castFromPointer(_ret, retain: true, release: true);
  }

  @override
  NSMutableString? initWithCoder_(NSCoder coder) {
    final _ret =
        _objc_msgSend_14(this.pointer, _sel_initWithCoder_, coder.pointer);
    return _ret.address == 0
        ? null
        : NSMutableString.castFromPointer(_ret, retain: true, release: true);
  }

  static ffi.Pointer<ffi.UnsignedLong> getAvailableStringEncodings() {
    return _objc_msgSend_243(
        _class_NSMutableString, _sel_availableStringEncodings);
  }

  static NSString localizedNameOfStringEncoding_(int encoding) {
    final _ret = _objc_msgSend_15(
        _class_NSMutableString, _sel_localizedNameOfStringEncoding_, encoding);
    return NSString.castFromPointer(_ret, retain: true, release: true);
  }

  static int getDefaultCStringEncoding() {
    return _objc_msgSend_12(
        _class_NSMutableString, _sel_defaultCStringEncoding);
  }

  @override
  NSMutableString initWithCharactersNoCopy_length_freeWhenDone_(
      ffi.Pointer<ffi.UnsignedShort> characters, int length, bool freeBuffer) {
    final _ret = _objc_msgSend_255(
        this.pointer,
        _sel_initWithCharactersNoCopy_length_freeWhenDone_,
        characters,
        length,
        freeBuffer);
    return NSMutableString.castFromPointer(_ret, retain: false, release: true);
  }

  @override
  NSMutableString initWithCharactersNoCopy_length_deallocator_(
      ffi.Pointer<ffi.UnsignedShort> chars,
      int len,
      ObjCBlock_ffiVoid_ffiUnsignedShort_ffiUnsignedLong? deallocator) {
    final _ret = _objc_msgSend_256(
        this.pointer,
        _sel_initWithCharactersNoCopy_length_deallocator_,
        chars,
        len,
        deallocator?.pointer ?? ffi.nullptr);
    return NSMutableString.castFromPointer(_ret, retain: false, release: true);
  }

  @override
  NSMutableString initWithCharacters_length_(
      ffi.Pointer<ffi.UnsignedShort> characters, int length) {
    final _ret = _objc_msgSend_257(
        this.pointer, _sel_initWithCharacters_length_, characters, length);
    return NSMutableString.castFromPointer(_ret, retain: true, release: true);
  }

  @override
  NSMutableString? initWithUTF8String_(
      ffi.Pointer<ffi.Char> nullTerminatedCString) {
    final _ret = _objc_msgSend_258(
        this.pointer, _sel_initWithUTF8String_, nullTerminatedCString);
    return _ret.address == 0
        ? null
        : NSMutableString.castFromPointer(_ret, retain: true, release: true);
  }

  @override
  NSMutableString initWithString_(NSString aString) {
    final _ret =
        _objc_msgSend_42(this.pointer, _sel_initWithString_, aString.pointer);
    return NSMutableString.castFromPointer(_ret, retain: true, release: true);
  }

  @override
  NSMutableString initWithFormat_(NSString format) {
    final _ret =
        _objc_msgSend_42(this.pointer, _sel_initWithFormat_, format.pointer);
    return NSMutableString.castFromPointer(_ret, retain: true, release: true);
  }

  @override
  NSMutableString initWithFormat_arguments_(
      NSString format, ffi.Pointer<__va_list_tag> argList) {
    final _ret = _objc_msgSend_259(
        this.pointer, _sel_initWithFormat_arguments_, format.pointer, argList);
    return NSMutableString.castFromPointer(_ret, retain: true, release: true);
  }

  @override
  NSMutableString initWithFormat_locale_(
      NSString format, objc.ObjCObjectBase? locale) {
    final _ret = _objc_msgSend_260(this.pointer, _sel_initWithFormat_locale_,
        format.pointer, locale?.pointer ?? ffi.nullptr);
    return NSMutableString.castFromPointer(_ret, retain: true, release: true);
  }

  @override
  NSMutableString initWithFormat_locale_arguments_(NSString format,
      objc.ObjCObjectBase? locale, ffi.Pointer<__va_list_tag> argList) {
    final _ret = _objc_msgSend_261(
        this.pointer,
        _sel_initWithFormat_locale_arguments_,
        format.pointer,
        locale?.pointer ?? ffi.nullptr,
        argList);
    return NSMutableString.castFromPointer(_ret, retain: true, release: true);
  }

  @override
  NSMutableString? initWithValidatedFormat_validFormatSpecifiers_error_(
      NSString format,
      NSString validFormatSpecifiers,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    final _ret = _objc_msgSend_262(
        this.pointer,
        _sel_initWithValidatedFormat_validFormatSpecifiers_error_,
        format.pointer,
        validFormatSpecifiers.pointer,
        error);
    return _ret.address == 0
        ? null
        : NSMutableString.castFromPointer(_ret, retain: true, release: true);
  }

  @override
  NSMutableString? initWithValidatedFormat_validFormatSpecifiers_locale_error_(
      NSString format,
      NSString validFormatSpecifiers,
      objc.ObjCObjectBase? locale,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    final _ret = _objc_msgSend_263(
        this.pointer,
        _sel_initWithValidatedFormat_validFormatSpecifiers_locale_error_,
        format.pointer,
        validFormatSpecifiers.pointer,
        locale?.pointer ?? ffi.nullptr,
        error);
    return _ret.address == 0
        ? null
        : NSMutableString.castFromPointer(_ret, retain: true, release: true);
  }

  @override
  NSMutableString?
      initWithValidatedFormat_validFormatSpecifiers_arguments_error_(
          NSString format,
          NSString validFormatSpecifiers,
          ffi.Pointer<__va_list_tag> argList,
          ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    final _ret = _objc_msgSend_264(
        this.pointer,
        _sel_initWithValidatedFormat_validFormatSpecifiers_arguments_error_,
        format.pointer,
        validFormatSpecifiers.pointer,
        argList,
        error);
    return _ret.address == 0
        ? null
        : NSMutableString.castFromPointer(_ret, retain: true, release: true);
  }

  @override
  NSMutableString?
      initWithValidatedFormat_validFormatSpecifiers_locale_arguments_error_(
          NSString format,
          NSString validFormatSpecifiers,
          objc.ObjCObjectBase? locale,
          ffi.Pointer<__va_list_tag> argList,
          ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    final _ret = _objc_msgSend_265(
        this.pointer,
        _sel_initWithValidatedFormat_validFormatSpecifiers_locale_arguments_error_,
        format.pointer,
        validFormatSpecifiers.pointer,
        locale?.pointer ?? ffi.nullptr,
        argList,
        error);
    return _ret.address == 0
        ? null
        : NSMutableString.castFromPointer(_ret, retain: true, release: true);
  }

  @override
  NSMutableString? initWithData_encoding_(NSData data, int encoding) {
    final _ret = _objc_msgSend_266(
        this.pointer, _sel_initWithData_encoding_, data.pointer, encoding);
    return _ret.address == 0
        ? null
        : NSMutableString.castFromPointer(_ret, retain: true, release: true);
  }

  @override
  NSMutableString? initWithBytes_length_encoding_(
      ffi.Pointer<ffi.Void> bytes, int len, int encoding) {
    final _ret = _objc_msgSend_267(this.pointer,
        _sel_initWithBytes_length_encoding_, bytes, len, encoding);
    return _ret.address == 0
        ? null
        : NSMutableString.castFromPointer(_ret, retain: true, release: true);
  }

  @override
  NSMutableString? initWithBytesNoCopy_length_encoding_freeWhenDone_(
      ffi.Pointer<ffi.Void> bytes, int len, int encoding, bool freeBuffer) {
    final _ret = _objc_msgSend_268(
        this.pointer,
        _sel_initWithBytesNoCopy_length_encoding_freeWhenDone_,
        bytes,
        len,
        encoding,
        freeBuffer);
    return _ret.address == 0
        ? null
        : NSMutableString.castFromPointer(_ret, retain: false, release: true);
  }

  @override
  NSMutableString? initWithBytesNoCopy_length_encoding_deallocator_(
      ffi.Pointer<ffi.Void> bytes,
      int len,
      int encoding,
      ObjCBlock_ffiVoid_ffiVoid_ffiUnsignedLong? deallocator) {
    final _ret = _objc_msgSend_269(
        this.pointer,
        _sel_initWithBytesNoCopy_length_encoding_deallocator_,
        bytes,
        len,
        encoding,
        deallocator?.pointer ?? ffi.nullptr);
    return _ret.address == 0
        ? null
        : NSMutableString.castFromPointer(_ret, retain: false, release: true);
  }

  static NSMutableString string() {
    final _ret = _objc_msgSend_2(_class_NSMutableString, _sel_string);
    return NSMutableString.castFromPointer(_ret, retain: true, release: true);
  }

  static NSMutableString stringWithString_(NSString string) {
    final _ret = _objc_msgSend_42(
        _class_NSMutableString, _sel_stringWithString_, string.pointer);
    return NSMutableString.castFromPointer(_ret, retain: true, release: true);
  }

  static NSMutableString stringWithCharacters_length_(
      ffi.Pointer<ffi.UnsignedShort> characters, int length) {
    final _ret = _objc_msgSend_257(_class_NSMutableString,
        _sel_stringWithCharacters_length_, characters, length);
    return NSMutableString.castFromPointer(_ret, retain: true, release: true);
  }

  static NSMutableString? stringWithUTF8String_(
      ffi.Pointer<ffi.Char> nullTerminatedCString) {
    final _ret = _objc_msgSend_258(_class_NSMutableString,
        _sel_stringWithUTF8String_, nullTerminatedCString);
    return _ret.address == 0
        ? null
        : NSMutableString.castFromPointer(_ret, retain: true, release: true);
  }

  static NSMutableString stringWithFormat_(NSString format) {
    final _ret = _objc_msgSend_42(
        _class_NSMutableString, _sel_stringWithFormat_, format.pointer);
    return NSMutableString.castFromPointer(_ret, retain: true, release: true);
  }

  static NSMutableString localizedStringWithFormat_(NSString format) {
    final _ret = _objc_msgSend_42(_class_NSMutableString,
        _sel_localizedStringWithFormat_, format.pointer);
    return NSMutableString.castFromPointer(_ret, retain: true, release: true);
  }

  static NSMutableString?
      stringWithValidatedFormat_validFormatSpecifiers_error_(
          NSString format,
          NSString validFormatSpecifiers,
          ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    final _ret = _objc_msgSend_262(
        _class_NSMutableString,
        _sel_stringWithValidatedFormat_validFormatSpecifiers_error_,
        format.pointer,
        validFormatSpecifiers.pointer,
        error);
    return _ret.address == 0
        ? null
        : NSMutableString.castFromPointer(_ret, retain: true, release: true);
  }

  static NSMutableString?
      localizedStringWithValidatedFormat_validFormatSpecifiers_error_(
          NSString format,
          NSString validFormatSpecifiers,
          ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    final _ret = _objc_msgSend_262(
        _class_NSMutableString,
        _sel_localizedStringWithValidatedFormat_validFormatSpecifiers_error_,
        format.pointer,
        validFormatSpecifiers.pointer,
        error);
    return _ret.address == 0
        ? null
        : NSMutableString.castFromPointer(_ret, retain: true, release: true);
  }

  @override
  NSMutableString? initWithCString_encoding_(
      ffi.Pointer<ffi.Char> nullTerminatedCString, int encoding) {
    final _ret = _objc_msgSend_270(this.pointer, _sel_initWithCString_encoding_,
        nullTerminatedCString, encoding);
    return _ret.address == 0
        ? null
        : NSMutableString.castFromPointer(_ret, retain: true, release: true);
  }

  static NSMutableString? stringWithCString_encoding_(
      ffi.Pointer<ffi.Char> cString, int enc) {
    final _ret = _objc_msgSend_270(
        _class_NSMutableString, _sel_stringWithCString_encoding_, cString, enc);
    return _ret.address == 0
        ? null
        : NSMutableString.castFromPointer(_ret, retain: true, release: true);
  }

  @override
  NSMutableString? initWithContentsOfURL_encoding_error_(
      NSURL url, int enc, ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    final _ret = _objc_msgSend_271(this.pointer,
        _sel_initWithContentsOfURL_encoding_error_, url.pointer, enc, error);
    return _ret.address == 0
        ? null
        : NSMutableString.castFromPointer(_ret, retain: true, release: true);
  }

  @override
  NSMutableString? initWithContentsOfFile_encoding_error_(
      NSString path, int enc, ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    final _ret = _objc_msgSend_272(this.pointer,
        _sel_initWithContentsOfFile_encoding_error_, path.pointer, enc, error);
    return _ret.address == 0
        ? null
        : NSMutableString.castFromPointer(_ret, retain: true, release: true);
  }

  static NSMutableString? stringWithContentsOfURL_encoding_error_(
      NSURL url, int enc, ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    final _ret = _objc_msgSend_271(_class_NSMutableString,
        _sel_stringWithContentsOfURL_encoding_error_, url.pointer, enc, error);
    return _ret.address == 0
        ? null
        : NSMutableString.castFromPointer(_ret, retain: true, release: true);
  }

  static NSMutableString? stringWithContentsOfFile_encoding_error_(
      NSString path, int enc, ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    final _ret = _objc_msgSend_272(
        _class_NSMutableString,
        _sel_stringWithContentsOfFile_encoding_error_,
        path.pointer,
        enc,
        error);
    return _ret.address == 0
        ? null
        : NSMutableString.castFromPointer(_ret, retain: true, release: true);
  }

  @override
  NSMutableString? initWithContentsOfURL_usedEncoding_error_(
      NSURL url,
      ffi.Pointer<ffi.UnsignedLong> enc,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    final _ret = _objc_msgSend_273(
        this.pointer,
        _sel_initWithContentsOfURL_usedEncoding_error_,
        url.pointer,
        enc,
        error);
    return _ret.address == 0
        ? null
        : NSMutableString.castFromPointer(_ret, retain: true, release: true);
  }

  @override
  NSMutableString? initWithContentsOfFile_usedEncoding_error_(
      NSString path,
      ffi.Pointer<ffi.UnsignedLong> enc,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    final _ret = _objc_msgSend_274(
        this.pointer,
        _sel_initWithContentsOfFile_usedEncoding_error_,
        path.pointer,
        enc,
        error);
    return _ret.address == 0
        ? null
        : NSMutableString.castFromPointer(_ret, retain: true, release: true);
  }

  static NSMutableString? stringWithContentsOfURL_usedEncoding_error_(
      NSURL url,
      ffi.Pointer<ffi.UnsignedLong> enc,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    final _ret = _objc_msgSend_273(
        _class_NSMutableString,
        _sel_stringWithContentsOfURL_usedEncoding_error_,
        url.pointer,
        enc,
        error);
    return _ret.address == 0
        ? null
        : NSMutableString.castFromPointer(_ret, retain: true, release: true);
  }

  static NSMutableString? stringWithContentsOfFile_usedEncoding_error_(
      NSString path,
      ffi.Pointer<ffi.UnsignedLong> enc,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    final _ret = _objc_msgSend_274(
        _class_NSMutableString,
        _sel_stringWithContentsOfFile_usedEncoding_error_,
        path.pointer,
        enc,
        error);
    return _ret.address == 0
        ? null
        : NSMutableString.castFromPointer(_ret, retain: true, release: true);
  }

  static int
      stringEncodingForData_encodingOptions_convertedString_usedLossyConversion_(
          NSData data,
          NSDictionary? opts,
          ffi.Pointer<ffi.Pointer<objc.ObjCObject>> string,
          ffi.Pointer<ffi.Bool> usedLossyConversion) {
    return _objc_msgSend_275(
        _class_NSMutableString,
        _sel_stringEncodingForData_encodingOptions_convertedString_usedLossyConversion_,
        data.pointer,
        opts?.pointer ?? ffi.nullptr,
        string,
        usedLossyConversion);
  }

  static objc.ObjCObjectBase? stringWithContentsOfFile_(NSString path) {
    final _ret = _objc_msgSend_49(
        _class_NSMutableString, _sel_stringWithContentsOfFile_, path.pointer);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  static objc.ObjCObjectBase? stringWithContentsOfURL_(NSURL url) {
    final _ret = _objc_msgSend_214(
        _class_NSMutableString, _sel_stringWithContentsOfURL_, url.pointer);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  static objc.ObjCObjectBase? stringWithCString_length_(
      ffi.Pointer<ffi.Char> bytes, int length) {
    final _ret = _objc_msgSend_270(
        _class_NSMutableString, _sel_stringWithCString_length_, bytes, length);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  static objc.ObjCObjectBase? stringWithCString_(ffi.Pointer<ffi.Char> bytes) {
    final _ret = _objc_msgSend_258(
        _class_NSMutableString, _sel_stringWithCString_, bytes);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  static NSMutableString new1() {
    final _ret = _objc_msgSend_2(_class_NSMutableString, _sel_new);
    return NSMutableString.castFromPointer(_ret, retain: false, release: true);
  }

  static NSMutableString allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_3(_class_NSMutableString, _sel_allocWithZone_, zone);
    return NSMutableString.castFromPointer(_ret, retain: false, release: true);
  }

  static NSMutableString alloc() {
    final _ret = _objc_msgSend_2(_class_NSMutableString, _sel_alloc);
    return NSMutableString.castFromPointer(_ret, retain: false, release: true);
  }
}

late final _class_NSMutableString = objc.getClass("NSMutableString");
late final _sel_replaceCharactersInRange_withString_ =
    objc.registerName("replaceCharactersInRange:withString:");
final _objc_msgSend_354 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                _NSRange,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            _NSRange,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_insertString_atIndex_ =
    objc.registerName("insertString:atIndex:");
final _objc_msgSend_355 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.UnsignedLong)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int)>();
late final _sel_deleteCharactersInRange_ =
    objc.registerName("deleteCharactersInRange:");
late final _sel_appendString_ = objc.registerName("appendString:");
late final _sel_appendFormat_ = objc.registerName("appendFormat:");
late final _sel_setString_ = objc.registerName("setString:");
late final _sel_replaceOccurrencesOfString_withString_options_range_ =
    objc.registerName("replaceOccurrencesOfString:withString:options:range:");
final _objc_msgSend_356 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Int32,
                _NSRange)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            _NSRange)>();
late final _sel_applyTransform_reverse_range_updatedRange_ =
    objc.registerName("applyTransform:reverse:range:updatedRange:");
final _objc_msgSend_357 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Bool,
                _NSRange,
                ffi.Pointer<_NSRange>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            bool,
            _NSRange,
            ffi.Pointer<_NSRange>)>();
final _objc_msgSend_358 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedLong)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_stringWithCapacity_ = objc.registerName("stringWithCapacity:");
