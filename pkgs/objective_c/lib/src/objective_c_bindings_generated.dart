// Copyright (c) 2024, the Dart project authors. Please see the AUTHORS file
// for details. All rights reserved. Use of this source code is governed by a
// BSD-style license that can be found in the LICENSE file.

// Bindings for package:objective_c's custom ObjC interfaces.
// Regenerate bindings with `dart run tool/generate_code.dart`.

// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unnecessary_non_null_assertion
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// coverage:ignore-file

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;
import 'package:objective_c/objective_c.dart' as objc;

@ffi.Native<
  ffi.Void Function(
    ffi.Pointer<objc.ObjCObject>,
    ffi.Pointer<ffi.Void>,
    ffi.Pointer<objc.ObjCObject>,
    ffi.Pointer<objc.ObjCObject>,
    ffi.Pointer<objc.ObjCObject>,
    ffi.Pointer<ffi.Void>,
  )
>()
external void _ObjectiveCBindings_protocolTrampoline_1sr3ozv(
  ffi.Pointer<objc.ObjCObject> target,
  ffi.Pointer<ffi.Void> arg0,
  ffi.Pointer<objc.ObjCObject> arg1,
  ffi.Pointer<objc.ObjCObject> arg2,
  ffi.Pointer<objc.ObjCObject> arg3,
  ffi.Pointer<ffi.Void> arg4,
);

@ffi.Native<
  ffi.Pointer<objc.ObjCBlockImpl> Function(
    ffi.Pointer<objc.ObjCBlockImpl>,
    ffi.Pointer<objc.ObjCBlockImpl>,
    ffi.Pointer<objc.DOBJC_Context>,
  )
>(isLeaf: true)
external ffi.Pointer<objc.ObjCBlockImpl>
_ObjectiveCBindings_wrapBlockingBlock_1sr3ozv(
  ffi.Pointer<objc.ObjCBlockImpl> block,
  ffi.Pointer<objc.ObjCBlockImpl> listnerBlock,
  ffi.Pointer<objc.DOBJC_Context> context,
);

@ffi.Native<
  ffi.Pointer<objc.ObjCBlockImpl> Function(ffi.Pointer<objc.ObjCBlockImpl>)
>(isLeaf: true)
external ffi.Pointer<objc.ObjCBlockImpl>
_ObjectiveCBindings_wrapListenerBlock_1sr3ozv(
  ffi.Pointer<objc.ObjCBlockImpl> block,
);

typedef CFStringRef = ffi.Pointer<objc.CFString>;

/// NSNumberIsFloat
extension NSNumberIsFloat on objc.NSNumber {
  /// isFloat
  bool get isFloat {
    return _objc_msgSend_91o635(this.ref.pointer, _sel_isFloat);
  }
}

void
_ObjCBlock_ffiVoid_ffiVoid_NSString_objcObjCObject_NSDictionary_ffiVoid_fnPtrTrampoline(
  ffi.Pointer<objc.ObjCBlockImpl> block,
  ffi.Pointer<ffi.Void> arg0,
  ffi.Pointer<objc.ObjCObject> arg1,
  ffi.Pointer<objc.ObjCObject> arg2,
  ffi.Pointer<objc.ObjCObject> arg3,
  ffi.Pointer<ffi.Void> arg4,
) => block.ref.target
    .cast<
      ffi.NativeFunction<
        ffi.Void Function(
          ffi.Pointer<ffi.Void> arg0,
          ffi.Pointer<objc.ObjCObject> arg1,
          ffi.Pointer<objc.ObjCObject> arg2,
          ffi.Pointer<objc.ObjCObject> arg3,
          ffi.Pointer<ffi.Void> arg4,
        )
      >
    >()
    .asFunction<
      void Function(
        ffi.Pointer<ffi.Void>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<ffi.Void>,
      )
    >()(arg0, arg1, arg2, arg3, arg4);
ffi.Pointer<ffi.Void>
_ObjCBlock_ffiVoid_ffiVoid_NSString_objcObjCObject_NSDictionary_ffiVoid_fnPtrCallable =
    ffi.Pointer.fromFunction<
          ffi.Void Function(
            ffi.Pointer<objc.ObjCBlockImpl>,
            ffi.Pointer<ffi.Void>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<ffi.Void>,
          )
        >(
          _ObjCBlock_ffiVoid_ffiVoid_NSString_objcObjCObject_NSDictionary_ffiVoid_fnPtrTrampoline,
        )
        .cast();
void
_ObjCBlock_ffiVoid_ffiVoid_NSString_objcObjCObject_NSDictionary_ffiVoid_closureTrampoline(
  ffi.Pointer<objc.ObjCBlockImpl> block,
  ffi.Pointer<ffi.Void> arg0,
  ffi.Pointer<objc.ObjCObject> arg1,
  ffi.Pointer<objc.ObjCObject> arg2,
  ffi.Pointer<objc.ObjCObject> arg3,
  ffi.Pointer<ffi.Void> arg4,
) =>
    (objc.getBlockClosure(block)
        as void Function(
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<ffi.Void>,
        ))(arg0, arg1, arg2, arg3, arg4);
ffi.Pointer<ffi.Void>
_ObjCBlock_ffiVoid_ffiVoid_NSString_objcObjCObject_NSDictionary_ffiVoid_closureCallable =
    ffi.Pointer.fromFunction<
          ffi.Void Function(
            ffi.Pointer<objc.ObjCBlockImpl>,
            ffi.Pointer<ffi.Void>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<ffi.Void>,
          )
        >(
          _ObjCBlock_ffiVoid_ffiVoid_NSString_objcObjCObject_NSDictionary_ffiVoid_closureTrampoline,
        )
        .cast();
void
_ObjCBlock_ffiVoid_ffiVoid_NSString_objcObjCObject_NSDictionary_ffiVoid_listenerTrampoline(
  ffi.Pointer<objc.ObjCBlockImpl> block,
  ffi.Pointer<ffi.Void> arg0,
  ffi.Pointer<objc.ObjCObject> arg1,
  ffi.Pointer<objc.ObjCObject> arg2,
  ffi.Pointer<objc.ObjCObject> arg3,
  ffi.Pointer<ffi.Void> arg4,
) {
  (objc.getBlockClosure(block)
      as void Function(
        ffi.Pointer<ffi.Void>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<ffi.Void>,
      ))(arg0, arg1, arg2, arg3, arg4);
  objc.objectRelease(block.cast());
}

ffi.NativeCallable<
  ffi.Void Function(
    ffi.Pointer<objc.ObjCBlockImpl>,
    ffi.Pointer<ffi.Void>,
    ffi.Pointer<objc.ObjCObject>,
    ffi.Pointer<objc.ObjCObject>,
    ffi.Pointer<objc.ObjCObject>,
    ffi.Pointer<ffi.Void>,
  )
>
_ObjCBlock_ffiVoid_ffiVoid_NSString_objcObjCObject_NSDictionary_ffiVoid_listenerCallable =
    ffi.NativeCallable<
        ffi.Void Function(
          ffi.Pointer<objc.ObjCBlockImpl>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<ffi.Void>,
        )
      >.listener(
        _ObjCBlock_ffiVoid_ffiVoid_NSString_objcObjCObject_NSDictionary_ffiVoid_listenerTrampoline,
      )
      ..keepIsolateAlive = false;
void
_ObjCBlock_ffiVoid_ffiVoid_NSString_objcObjCObject_NSDictionary_ffiVoid_blockingTrampoline(
  ffi.Pointer<objc.ObjCBlockImpl> block,
  ffi.Pointer<ffi.Void> waiter,
  ffi.Pointer<ffi.Void> arg0,
  ffi.Pointer<objc.ObjCObject> arg1,
  ffi.Pointer<objc.ObjCObject> arg2,
  ffi.Pointer<objc.ObjCObject> arg3,
  ffi.Pointer<ffi.Void> arg4,
) {
  try {
    (objc.getBlockClosure(block)
        as void Function(
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<ffi.Void>,
        ))(arg0, arg1, arg2, arg3, arg4);
  } catch (e) {
  } finally {
    objc.signalWaiter(waiter);
    objc.objectRelease(block.cast());
  }
}

ffi.NativeCallable<
  ffi.Void Function(
    ffi.Pointer<objc.ObjCBlockImpl>,
    ffi.Pointer<ffi.Void>,
    ffi.Pointer<ffi.Void>,
    ffi.Pointer<objc.ObjCObject>,
    ffi.Pointer<objc.ObjCObject>,
    ffi.Pointer<objc.ObjCObject>,
    ffi.Pointer<ffi.Void>,
  )
>
_ObjCBlock_ffiVoid_ffiVoid_NSString_objcObjCObject_NSDictionary_ffiVoid_blockingCallable =
    ffi.NativeCallable<
        ffi.Void Function(
          ffi.Pointer<objc.ObjCBlockImpl>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<ffi.Void>,
        )
      >.isolateLocal(
        _ObjCBlock_ffiVoid_ffiVoid_NSString_objcObjCObject_NSDictionary_ffiVoid_blockingTrampoline,
      )
      ..keepIsolateAlive = false;
ffi.NativeCallable<
  ffi.Void Function(
    ffi.Pointer<objc.ObjCBlockImpl>,
    ffi.Pointer<ffi.Void>,
    ffi.Pointer<ffi.Void>,
    ffi.Pointer<objc.ObjCObject>,
    ffi.Pointer<objc.ObjCObject>,
    ffi.Pointer<objc.ObjCObject>,
    ffi.Pointer<ffi.Void>,
  )
>
_ObjCBlock_ffiVoid_ffiVoid_NSString_objcObjCObject_NSDictionary_ffiVoid_blockingListenerCallable =
    ffi.NativeCallable<
        ffi.Void Function(
          ffi.Pointer<objc.ObjCBlockImpl>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<ffi.Void>,
        )
      >.listener(
        _ObjCBlock_ffiVoid_ffiVoid_NSString_objcObjCObject_NSDictionary_ffiVoid_blockingTrampoline,
      )
      ..keepIsolateAlive = false;

/// Construction methods for `objc.ObjCBlock<ffi.Void Function(ffi.Pointer<ffi.Void>, objc.NSString, ffi.Pointer<objc.ObjCObject>, objc.NSDictionary, ffi.Pointer<ffi.Void>)>`.
abstract final class ObjCBlock_ffiVoid_ffiVoid_NSString_objcObjCObject_NSDictionary_ffiVoid {
  /// Returns a block that wraps the given raw block pointer.
  static objc.ObjCBlock<
    ffi.Void Function(
      ffi.Pointer<ffi.Void>,
      objc.NSString,
      ffi.Pointer<objc.ObjCObject>,
      objc.NSDictionary,
      ffi.Pointer<ffi.Void>,
    )
  >
  castFromPointer(
    ffi.Pointer<objc.ObjCBlockImpl> pointer, {
    bool retain = false,
    bool release = false,
  }) =>
      objc.ObjCBlock<
        ffi.Void Function(
          ffi.Pointer<ffi.Void>,
          objc.NSString,
          ffi.Pointer<objc.ObjCObject>,
          objc.NSDictionary,
          ffi.Pointer<ffi.Void>,
        )
      >(pointer, retain: retain, release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<
    ffi.Void Function(
      ffi.Pointer<ffi.Void>,
      objc.NSString,
      ffi.Pointer<objc.ObjCObject>,
      objc.NSDictionary,
      ffi.Pointer<ffi.Void>,
    )
  >
  fromFunctionPointer(
    ffi.Pointer<
      ffi.NativeFunction<
        ffi.Void Function(
          ffi.Pointer<ffi.Void> arg0,
          ffi.Pointer<objc.ObjCObject> arg1,
          ffi.Pointer<objc.ObjCObject> arg2,
          ffi.Pointer<objc.ObjCObject> arg3,
          ffi.Pointer<ffi.Void> arg4,
        )
      >
    >
    ptr,
  ) =>
      objc.ObjCBlock<
        ffi.Void Function(
          ffi.Pointer<ffi.Void>,
          objc.NSString,
          ffi.Pointer<objc.ObjCObject>,
          objc.NSDictionary,
          ffi.Pointer<ffi.Void>,
        )
      >(
        objc.newPointerBlock(
          _ObjCBlock_ffiVoid_ffiVoid_NSString_objcObjCObject_NSDictionary_ffiVoid_fnPtrCallable,
          ptr.cast(),
        ),
        retain: false,
        release: true,
      );

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ///
  /// If `keepIsolateAlive` is true, this block will keep this isolate alive
  /// until it is garbage collected by both Dart and ObjC.
  static objc.ObjCBlock<
    ffi.Void Function(
      ffi.Pointer<ffi.Void>,
      objc.NSString,
      ffi.Pointer<objc.ObjCObject>,
      objc.NSDictionary,
      ffi.Pointer<ffi.Void>,
    )
  >
  fromFunction(
    void Function(
      ffi.Pointer<ffi.Void>,
      objc.NSString,
      objc.ObjCObjectBase,
      objc.NSDictionary,
      ffi.Pointer<ffi.Void>,
    )
    fn, {
    bool keepIsolateAlive = true,
  }) =>
      objc.ObjCBlock<
        ffi.Void Function(
          ffi.Pointer<ffi.Void>,
          objc.NSString,
          ffi.Pointer<objc.ObjCObject>,
          objc.NSDictionary,
          ffi.Pointer<ffi.Void>,
        )
      >(
        objc.newClosureBlock(
          _ObjCBlock_ffiVoid_ffiVoid_NSString_objcObjCObject_NSDictionary_ffiVoid_closureCallable,
          (
            ffi.Pointer<ffi.Void> arg0,
            ffi.Pointer<objc.ObjCObject> arg1,
            ffi.Pointer<objc.ObjCObject> arg2,
            ffi.Pointer<objc.ObjCObject> arg3,
            ffi.Pointer<ffi.Void> arg4,
          ) => fn(
            arg0,
            objc.NSString.castFromPointer(arg1, retain: true, release: true),
            objc.ObjCObjectBase(arg2, retain: true, release: true),
            objc.NSDictionary.castFromPointer(
              arg3,
              retain: true,
              release: true,
            ),
            arg4,
          ),
          keepIsolateAlive,
        ),
        retain: false,
        release: true,
      );

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// If `keepIsolateAlive` is true, this block will keep this isolate alive
  /// until it is garbage collected by both Dart and ObjC.
  static objc.ObjCBlock<
    ffi.Void Function(
      ffi.Pointer<ffi.Void>,
      objc.NSString,
      ffi.Pointer<objc.ObjCObject>,
      objc.NSDictionary,
      ffi.Pointer<ffi.Void>,
    )
  >
  listener(
    void Function(
      ffi.Pointer<ffi.Void>,
      objc.NSString,
      objc.ObjCObjectBase,
      objc.NSDictionary,
      ffi.Pointer<ffi.Void>,
    )
    fn, {
    bool keepIsolateAlive = true,
  }) {
    final raw = objc.newClosureBlock(
      _ObjCBlock_ffiVoid_ffiVoid_NSString_objcObjCObject_NSDictionary_ffiVoid_listenerCallable
          .nativeFunction
          .cast(),
      (
        ffi.Pointer<ffi.Void> arg0,
        ffi.Pointer<objc.ObjCObject> arg1,
        ffi.Pointer<objc.ObjCObject> arg2,
        ffi.Pointer<objc.ObjCObject> arg3,
        ffi.Pointer<ffi.Void> arg4,
      ) => fn(
        arg0,
        objc.NSString.castFromPointer(arg1, retain: false, release: true),
        objc.ObjCObjectBase(arg2, retain: false, release: true),
        objc.NSDictionary.castFromPointer(arg3, retain: false, release: true),
        arg4,
      ),
      keepIsolateAlive,
    );
    final wrapper = _ObjectiveCBindings_wrapListenerBlock_1sr3ozv(raw);
    objc.objectRelease(raw.cast());
    return objc.ObjCBlock<
      ffi.Void Function(
        ffi.Pointer<ffi.Void>,
        objc.NSString,
        ffi.Pointer<objc.ObjCObject>,
        objc.NSDictionary,
        ffi.Pointer<ffi.Void>,
      )
    >(wrapper, retain: false, release: true);
  }

  /// Creates a blocking block from a Dart function.
  ///
  /// This callback can be invoked from any native thread, and will block the
  /// caller until the callback is handled by the Dart isolate that created
  /// the block. Async functions are not supported.
  ///
  /// If `keepIsolateAlive` is true, this block will keep this isolate alive
  /// until it is garbage collected by both Dart and ObjC. If the owner isolate
  /// has shut down, and the block is invoked by native code, it may block
  /// indefinitely, or have other undefined behavior.
  static objc.ObjCBlock<
    ffi.Void Function(
      ffi.Pointer<ffi.Void>,
      objc.NSString,
      ffi.Pointer<objc.ObjCObject>,
      objc.NSDictionary,
      ffi.Pointer<ffi.Void>,
    )
  >
  blocking(
    void Function(
      ffi.Pointer<ffi.Void>,
      objc.NSString,
      objc.ObjCObjectBase,
      objc.NSDictionary,
      ffi.Pointer<ffi.Void>,
    )
    fn, {
    bool keepIsolateAlive = true,
  }) {
    final raw = objc.newClosureBlock(
      _ObjCBlock_ffiVoid_ffiVoid_NSString_objcObjCObject_NSDictionary_ffiVoid_blockingCallable
          .nativeFunction
          .cast(),
      (
        ffi.Pointer<ffi.Void> arg0,
        ffi.Pointer<objc.ObjCObject> arg1,
        ffi.Pointer<objc.ObjCObject> arg2,
        ffi.Pointer<objc.ObjCObject> arg3,
        ffi.Pointer<ffi.Void> arg4,
      ) => fn(
        arg0,
        objc.NSString.castFromPointer(arg1, retain: false, release: true),
        objc.ObjCObjectBase(arg2, retain: false, release: true),
        objc.NSDictionary.castFromPointer(arg3, retain: false, release: true),
        arg4,
      ),
      keepIsolateAlive,
    );
    final rawListener = objc.newClosureBlock(
      _ObjCBlock_ffiVoid_ffiVoid_NSString_objcObjCObject_NSDictionary_ffiVoid_blockingListenerCallable
          .nativeFunction
          .cast(),
      (
        ffi.Pointer<ffi.Void> arg0,
        ffi.Pointer<objc.ObjCObject> arg1,
        ffi.Pointer<objc.ObjCObject> arg2,
        ffi.Pointer<objc.ObjCObject> arg3,
        ffi.Pointer<ffi.Void> arg4,
      ) => fn(
        arg0,
        objc.NSString.castFromPointer(arg1, retain: false, release: true),
        objc.ObjCObjectBase(arg2, retain: false, release: true),
        objc.NSDictionary.castFromPointer(arg3, retain: false, release: true),
        arg4,
      ),
      keepIsolateAlive,
    );
    final wrapper = _ObjectiveCBindings_wrapBlockingBlock_1sr3ozv(
      raw,
      rawListener,
      objc.objCContext,
    );
    objc.objectRelease(raw.cast());
    objc.objectRelease(rawListener.cast());
    return objc.ObjCBlock<
      ffi.Void Function(
        ffi.Pointer<ffi.Void>,
        objc.NSString,
        ffi.Pointer<objc.ObjCObject>,
        objc.NSDictionary,
        ffi.Pointer<ffi.Void>,
      )
    >(wrapper, retain: false, release: true);
  }
}

/// Call operator for `objc.ObjCBlock<ffi.Void Function(ffi.Pointer<ffi.Void>, objc.NSString, ffi.Pointer<objc.ObjCObject>, objc.NSDictionary, ffi.Pointer<ffi.Void>)>`.
extension ObjCBlock_ffiVoid_ffiVoid_NSString_objcObjCObject_NSDictionary_ffiVoid_CallExtension
    on
        objc.ObjCBlock<
          ffi.Void Function(
            ffi.Pointer<ffi.Void>,
            objc.NSString,
            ffi.Pointer<objc.ObjCObject>,
            objc.NSDictionary,
            ffi.Pointer<ffi.Void>,
          )
        > {
  void call(
    ffi.Pointer<ffi.Void> arg0,
    objc.NSString arg1,
    objc.ObjCObjectBase arg2,
    objc.NSDictionary arg3,
    ffi.Pointer<ffi.Void> arg4,
  ) =>
      ref.pointer.ref.invoke
          .cast<
            ffi.NativeFunction<
              ffi.Void Function(
                ffi.Pointer<objc.ObjCBlockImpl> block,
                ffi.Pointer<ffi.Void> arg0,
                ffi.Pointer<objc.ObjCObject> arg1,
                ffi.Pointer<objc.ObjCObject> arg2,
                ffi.Pointer<objc.ObjCObject> arg3,
                ffi.Pointer<ffi.Void> arg4,
              )
            >
          >()
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCBlockImpl>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<ffi.Void>,
            )
          >()(
        ref.pointer,
        arg0,
        arg1.ref.pointer,
        arg2.ref.pointer,
        arg3.ref.pointer,
        arg4,
      );
}

/// Protocol for observing changes to values of objects.
interface class Observer extends objc.ObjCProtocolBase
    implements objc.NSObjectProtocol {
  Observer._(
    ffi.Pointer<objc.ObjCObject> pointer, {
    bool retain = false,
    bool release = false,
  }) : super(pointer, retain: retain, release: release);

  /// Constructs a [Observer] that points to the same underlying object as [other].
  Observer.castFrom(objc.ObjCObjectBase other)
    : this._(other.ref.pointer, retain: true, release: true);

  /// Constructs a [Observer] that wraps the given raw object pointer.
  Observer.castFromPointer(
    ffi.Pointer<objc.ObjCObject> other, {
    bool retain = false,
    bool release = false,
  }) : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [Observer].
  static bool conformsTo(objc.ObjCObjectBase obj) {
    return _objc_msgSend_e3qsqz(
      obj.ref.pointer,
      _sel_conformsToProtocol_,
      _protocol_Observer,
    );
  }

  /// Returns the [objc.Protocol] object for this protocol.
  static objc.Protocol get $protocol =>
      objc.Protocol.castFromPointer(_protocol_Observer.cast());

  /// Builds an object that implements the Observer protocol. To implement
  /// multiple protocols, use [addToBuilder] or [objc.ObjCProtocolBuilder] directly.
  ///
  /// If `$keepIsolateAlive` is true, this protocol will keep this isolate
  /// alive until it is garbage collected by both Dart and ObjC.
  static Observer implement({
    required void Function(
      objc.NSString,
      objc.ObjCObjectBase,
      objc.NSDictionary,
      ffi.Pointer<ffi.Void>,
    )
    observeValueForKeyPath_ofObject_change_context_,
    bool $keepIsolateAlive = true,
  }) {
    final builder = objc.ObjCProtocolBuilder(debugName: 'Observer');
    Observer.observeValueForKeyPath_ofObject_change_context_.implement(
      builder,
      observeValueForKeyPath_ofObject_change_context_,
    );
    builder.addProtocol($protocol);
    return Observer.castFrom(
      builder.build(keepIsolateAlive: $keepIsolateAlive),
    );
  }

  /// Adds the implementation of the Observer protocol to an existing
  /// [objc.ObjCProtocolBuilder].
  ///
  /// Note: You cannot call this method after you have called `builder.build`.
  static void addToBuilder(
    objc.ObjCProtocolBuilder builder, {
    required void Function(
      objc.NSString,
      objc.ObjCObjectBase,
      objc.NSDictionary,
      ffi.Pointer<ffi.Void>,
    )
    observeValueForKeyPath_ofObject_change_context_,
    bool $keepIsolateAlive = true,
  }) {
    Observer.observeValueForKeyPath_ofObject_change_context_.implement(
      builder,
      observeValueForKeyPath_ofObject_change_context_,
    );
    builder.addProtocol($protocol);
  }

  /// Builds an object that implements the Observer protocol. To implement
  /// multiple protocols, use [addToBuilder] or [objc.ObjCProtocolBuilder] directly. All
  /// methods that can be implemented as listeners will be.
  ///
  /// If `$keepIsolateAlive` is true, this protocol will keep this isolate
  /// alive until it is garbage collected by both Dart and ObjC.
  static Observer implementAsListener({
    required void Function(
      objc.NSString,
      objc.ObjCObjectBase,
      objc.NSDictionary,
      ffi.Pointer<ffi.Void>,
    )
    observeValueForKeyPath_ofObject_change_context_,
    bool $keepIsolateAlive = true,
  }) {
    final builder = objc.ObjCProtocolBuilder(debugName: 'Observer');
    Observer.observeValueForKeyPath_ofObject_change_context_
        .implementAsListener(
          builder,
          observeValueForKeyPath_ofObject_change_context_,
        );
    builder.addProtocol($protocol);
    return Observer.castFrom(
      builder.build(keepIsolateAlive: $keepIsolateAlive),
    );
  }

  /// Adds the implementation of the Observer protocol to an existing
  /// [objc.ObjCProtocolBuilder]. All methods that can be implemented as listeners will
  /// be.
  ///
  /// Note: You cannot call this method after you have called `builder.build`.
  static void addToBuilderAsListener(
    objc.ObjCProtocolBuilder builder, {
    required void Function(
      objc.NSString,
      objc.ObjCObjectBase,
      objc.NSDictionary,
      ffi.Pointer<ffi.Void>,
    )
    observeValueForKeyPath_ofObject_change_context_,
    bool $keepIsolateAlive = true,
  }) {
    Observer.observeValueForKeyPath_ofObject_change_context_
        .implementAsListener(
          builder,
          observeValueForKeyPath_ofObject_change_context_,
        );
    builder.addProtocol($protocol);
  }

  /// Builds an object that implements the Observer protocol. To implement
  /// multiple protocols, use [addToBuilder] or [objc.ObjCProtocolBuilder] directly. All
  /// methods that can be implemented as blocking listeners will be.
  ///
  /// If `$keepIsolateAlive` is true, this protocol will keep this isolate
  /// alive until it is garbage collected by both Dart and ObjC.
  static Observer implementAsBlocking({
    required void Function(
      objc.NSString,
      objc.ObjCObjectBase,
      objc.NSDictionary,
      ffi.Pointer<ffi.Void>,
    )
    observeValueForKeyPath_ofObject_change_context_,
    bool $keepIsolateAlive = true,
  }) {
    final builder = objc.ObjCProtocolBuilder(debugName: 'Observer');
    Observer.observeValueForKeyPath_ofObject_change_context_
        .implementAsBlocking(
          builder,
          observeValueForKeyPath_ofObject_change_context_,
        );
    builder.addProtocol($protocol);
    return Observer.castFrom(
      builder.build(keepIsolateAlive: $keepIsolateAlive),
    );
  }

  /// Adds the implementation of the Observer protocol to an existing
  /// [objc.ObjCProtocolBuilder]. All methods that can be implemented as blocking
  /// listeners will be.
  ///
  /// Note: You cannot call this method after you have called `builder.build`.
  static void addToBuilderAsBlocking(
    objc.ObjCProtocolBuilder builder, {
    required void Function(
      objc.NSString,
      objc.ObjCObjectBase,
      objc.NSDictionary,
      ffi.Pointer<ffi.Void>,
    )
    observeValueForKeyPath_ofObject_change_context_,
    bool $keepIsolateAlive = true,
  }) {
    Observer.observeValueForKeyPath_ofObject_change_context_
        .implementAsBlocking(
          builder,
          observeValueForKeyPath_ofObject_change_context_,
        );
    builder.addProtocol($protocol);
  }

  /// observeValueForKeyPath:ofObject:change:context:
  static final observeValueForKeyPath_ofObject_change_context_ =
      objc.ObjCProtocolListenableMethod<
        void Function(
          objc.NSString,
          objc.ObjCObjectBase,
          objc.NSDictionary,
          ffi.Pointer<ffi.Void>,
        )
      >(
        _protocol_Observer,
        _sel_observeValueForKeyPath_ofObject_change_context_,
        ffi.Native.addressOf<
              ffi.NativeFunction<
                ffi.Void Function(
                  ffi.Pointer<objc.ObjCObject>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<objc.ObjCObject>,
                  ffi.Pointer<objc.ObjCObject>,
                  ffi.Pointer<objc.ObjCObject>,
                  ffi.Pointer<ffi.Void>,
                )
              >
            >(_ObjectiveCBindings_protocolTrampoline_1sr3ozv)
            .cast(),
        objc.getProtocolMethodSignature(
          _protocol_Observer,
          _sel_observeValueForKeyPath_ofObject_change_context_,
          isRequired: true,
          isInstanceMethod: true,
        ),
        (
          void Function(
            objc.NSString,
            objc.ObjCObjectBase,
            objc.NSDictionary,
            ffi.Pointer<ffi.Void>,
          )
          func,
        ) =>
            ObjCBlock_ffiVoid_ffiVoid_NSString_objcObjCObject_NSDictionary_ffiVoid.fromFunction(
              (
                ffi.Pointer<ffi.Void> _,
                objc.NSString arg1,
                objc.ObjCObjectBase arg2,
                objc.NSDictionary arg3,
                ffi.Pointer<ffi.Void> arg4,
              ) => func(arg1, arg2, arg3, arg4),
            ),
        (
          void Function(
            objc.NSString,
            objc.ObjCObjectBase,
            objc.NSDictionary,
            ffi.Pointer<ffi.Void>,
          )
          func,
        ) =>
            ObjCBlock_ffiVoid_ffiVoid_NSString_objcObjCObject_NSDictionary_ffiVoid.listener(
              (
                ffi.Pointer<ffi.Void> _,
                objc.NSString arg1,
                objc.ObjCObjectBase arg2,
                objc.NSDictionary arg3,
                ffi.Pointer<ffi.Void> arg4,
              ) => func(arg1, arg2, arg3, arg4),
            ),
        (
          void Function(
            objc.NSString,
            objc.ObjCObjectBase,
            objc.NSDictionary,
            ffi.Pointer<ffi.Void>,
          )
          func,
        ) =>
            ObjCBlock_ffiVoid_ffiVoid_NSString_objcObjCObject_NSDictionary_ffiVoid.blocking(
              (
                ffi.Pointer<ffi.Void> _,
                objc.NSString arg1,
                objc.ObjCObjectBase arg2,
                objc.NSDictionary arg3,
                ffi.Pointer<ffi.Void> arg4,
              ) => func(arg1, arg2, arg3, arg4),
            ),
      );
}

late final _class_NSNumber = objc.getClass("NSNumber");
final _objc_msgSend_91o635 = objc.msgSendPointer
    .cast<
      ffi.NativeFunction<
        ffi.Bool Function(
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCSelector>,
        )
      >
    >()
    .asFunction<
      bool Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >();
final _objc_msgSend_e3qsqz = objc.msgSendPointer
    .cast<
      ffi.NativeFunction<
        ffi.Bool Function(
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCSelector>,
          ffi.Pointer<objc.ObjCProtocol>,
        )
      >
    >()
    .asFunction<
      bool Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCProtocol>,
      )
    >();
late final _protocol_Observer = objc.getProtocol("Observer");
late final _sel_conformsToProtocol_ = objc.registerName("conformsToProtocol:");
late final _sel_isFloat = objc.registerName("isFloat");
late final _sel_observeValueForKeyPath_ofObject_change_context_ = objc
    .registerName("observeValueForKeyPath:ofObject:change:context:");
