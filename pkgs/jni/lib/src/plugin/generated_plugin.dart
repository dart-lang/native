// AUTO GENERATED BY JNIGEN 0.15.0. DO NOT EDIT!

// Copyright (c) 2025, the Dart project authors.  Please see the AUTHORS file
// for details. All rights reserved. Use of this source code is governed by a
// BSD-style license that can be found in the LICENSE file.

// ignore_for_file: prefer_relative_imports
// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: comment_references
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: inference_failure_on_untyped_parameter
// ignore_for_file: invalid_internal_annotation
// ignore_for_file: invalid_use_of_internal_member
// ignore_for_file: library_prefixes
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_library_prefixes
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unintended_html_in_doc_comment
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_non_null_assertion
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:core' show Object, String, bool, double, int;
import 'dart:core' as core$_;

import 'package:jni/_internal.dart' as jni$_;
import 'package:jni/jni.dart' as jni$_;

/// from: `com.github.dart_lang.jni.JniPlugin$ActivityListener`
class JniPlugin$ActivityListener extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<JniPlugin$ActivityListener> $type;

  @jni$_.internal
  JniPlugin$ActivityListener.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
      r'com/github/dart_lang/jni/JniPlugin$ActivityListener');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $JniPlugin$ActivityListener$NullableType();
  static const type = $JniPlugin$ActivityListener$Type();
  static final _id_onActivityChanged = _class.instanceMethodId(
    r'onActivityChanged',
    r'(Landroid/app/Activity;)V',
  );

  static final _onActivityChanged = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract void onActivityChanged(android.app.Activity activity)`
  void onActivityChanged(
    jni$_.JObject? activity,
  ) {
    final _$activity = activity?.reference ?? jni$_.jNullReference;
    _onActivityChanged(reference.pointer,
            _id_onActivityChanged as jni$_.JMethodIDPtr, _$activity.pointer)
        .check();
  }

  /// Maps a specific port to the implemented interface.
  static final core$_.Map<int, $JniPlugin$ActivityListener> _$impls = {};
  static jni$_.JObjectPtr _$invoke(
    int port,
    jni$_.JObjectPtr descriptor,
    jni$_.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      jni$_.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final jni$_.Pointer<
          jni$_.NativeFunction<
              jni$_.JObjectPtr Function(
                  jni$_.Int64, jni$_.JObjectPtr, jni$_.JObjectPtr)>>
      _$invokePointer = jni$_.Pointer.fromFunction(_$invoke);

  static jni$_.Pointer<jni$_.Void> _$invokeMethod(
    int $p,
    jni$_.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d == r'onActivityChanged(Landroid/app/Activity;)V') {
        _$impls[$p]!.onActivityChanged(
          $a![0]?.as(const jni$_.JObjectType(), releaseOriginal: true),
        );
        return jni$_.nullptr;
      }
    } catch (e) {
      return jni$_.ProtectedJniExtensions.newDartException(e);
    }
    return jni$_.nullptr;
  }

  static void implementIn(
    jni$_.JImplementer implementer,
    $JniPlugin$ActivityListener $impl,
  ) {
    late final jni$_.RawReceivePort $p;
    $p = jni$_.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = jni$_.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      jni$_.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'com.github.dart_lang.jni.JniPlugin$ActivityListener',
      $p,
      _$invokePointer,
      [
        if ($impl.onActivityChanged$async)
          r'onActivityChanged(Landroid/app/Activity;)V',
      ],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory JniPlugin$ActivityListener.implement(
    $JniPlugin$ActivityListener $impl,
  ) {
    final $i = jni$_.JImplementer();
    implementIn($i, $impl);
    return JniPlugin$ActivityListener.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $JniPlugin$ActivityListener {
  factory $JniPlugin$ActivityListener({
    required void Function(jni$_.JObject? activity) onActivityChanged,
    bool onActivityChanged$async,
  }) = _$JniPlugin$ActivityListener;

  void onActivityChanged(jni$_.JObject? activity);
  bool get onActivityChanged$async => false;
}

final class _$JniPlugin$ActivityListener with $JniPlugin$ActivityListener {
  _$JniPlugin$ActivityListener({
    required void Function(jni$_.JObject? activity) onActivityChanged,
    this.onActivityChanged$async = false,
  }) : _onActivityChanged = onActivityChanged;

  final void Function(jni$_.JObject? activity) _onActivityChanged;
  final bool onActivityChanged$async;

  void onActivityChanged(jni$_.JObject? activity) {
    return _onActivityChanged(activity);
  }
}

final class $JniPlugin$ActivityListener$NullableType
    extends jni$_.JObjType<JniPlugin$ActivityListener?> {
  @jni$_.internal
  const $JniPlugin$ActivityListener$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Lcom/github/dart_lang/jni/JniPlugin$ActivityListener;';

  @jni$_.internal
  @core$_.override
  JniPlugin$ActivityListener? fromReference(jni$_.JReference reference) =>
      reference.isNull
          ? null
          : JniPlugin$ActivityListener.fromReference(
              reference,
            );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<JniPlugin$ActivityListener?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($JniPlugin$ActivityListener$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($JniPlugin$ActivityListener$NullableType) &&
        other is $JniPlugin$ActivityListener$NullableType;
  }
}

final class $JniPlugin$ActivityListener$Type
    extends jni$_.JObjType<JniPlugin$ActivityListener> {
  @jni$_.internal
  const $JniPlugin$ActivityListener$Type();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Lcom/github/dart_lang/jni/JniPlugin$ActivityListener;';

  @jni$_.internal
  @core$_.override
  JniPlugin$ActivityListener fromReference(jni$_.JReference reference) =>
      JniPlugin$ActivityListener.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<JniPlugin$ActivityListener?> get nullableType =>
      const $JniPlugin$ActivityListener$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($JniPlugin$ActivityListener$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($JniPlugin$ActivityListener$Type) &&
        other is $JniPlugin$ActivityListener$Type;
  }
}

/// from: `com.github.dart_lang.jni.JniPlugin`
class JniPlugin extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<JniPlugin> $type;

  @jni$_.internal
  JniPlugin.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class =
      jni$_.JClass.forName(r'com/github/dart_lang/jni/JniPlugin');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $JniPlugin$NullableType();
  static const type = $JniPlugin$Type();
  static final _id_new$ = _class.constructorId(
    r'()V',
  );

  static final _new$ = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public void <init>()`
  /// The returned object must be released after use, by calling the [release] method.
  factory JniPlugin() {
    return JniPlugin.fromReference(
        _new$(_class.reference.pointer, _id_new$ as jni$_.JMethodIDPtr)
            .reference);
  }

  static final _id_getApplicationContext = _class.staticMethodId(
    r'getApplicationContext',
    r'(J)Landroid/content/Context;',
  );

  static final _getApplicationContext = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int64,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `static public android.content.Context getApplicationContext(long j)`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JObject getApplicationContext(
    int j,
  ) {
    return _getApplicationContext(_class.reference.pointer,
            _id_getApplicationContext as jni$_.JMethodIDPtr, j)
        .object<jni$_.JObject>(const jni$_.JObjectType());
  }

  static final _id_addActivityListener = _class.staticMethodId(
    r'addActivityListener',
    r'(JLcom/github/dart_lang/jni/JniPlugin$ActivityListener;)V',
  );

  static final _addActivityListener = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_
                          .VarArgs<(jni$_.Int64, jni$_.Pointer<jni$_.Void>)>)>>(
          'globalEnv_CallStaticVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, int, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public void addActivityListener(long j, com.github.dart_lang.jni.JniPlugin$ActivityListener activityListener)`
  static void addActivityListener(
    int j,
    JniPlugin$ActivityListener activityListener,
  ) {
    final _$activityListener = activityListener.reference;
    _addActivityListener(
            _class.reference.pointer,
            _id_addActivityListener as jni$_.JMethodIDPtr,
            j,
            _$activityListener.pointer)
        .check();
  }

  static final _id_removeActivityListener = _class.staticMethodId(
    r'removeActivityListener',
    r'(JLcom/github/dart_lang/jni/JniPlugin$ActivityListener;)V',
  );

  static final _removeActivityListener = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_
                          .VarArgs<(jni$_.Int64, jni$_.Pointer<jni$_.Void>)>)>>(
          'globalEnv_CallStaticVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, int, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public void removeActivityListener(long j, com.github.dart_lang.jni.JniPlugin$ActivityListener activityListener)`
  static void removeActivityListener(
    int j,
    JniPlugin$ActivityListener activityListener,
  ) {
    final _$activityListener = activityListener.reference;
    _removeActivityListener(
            _class.reference.pointer,
            _id_removeActivityListener as jni$_.JMethodIDPtr,
            j,
            _$activityListener.pointer)
        .check();
  }

  static final _id_onAttachedToEngine = _class.instanceMethodId(
    r'onAttachedToEngine',
    r'(Lio/flutter/embedding/engine/plugins/FlutterPlugin$FlutterPluginBinding;)V',
  );

  static final _onAttachedToEngine = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void onAttachedToEngine(io.flutter.embedding.engine.plugins.FlutterPlugin$FlutterPluginBinding flutterPluginBinding)`
  void onAttachedToEngine(
    jni$_.JObject flutterPluginBinding,
  ) {
    final _$flutterPluginBinding = flutterPluginBinding.reference;
    _onAttachedToEngine(
            reference.pointer,
            _id_onAttachedToEngine as jni$_.JMethodIDPtr,
            _$flutterPluginBinding.pointer)
        .check();
  }

  static final _id_onDetachedFromEngine = _class.instanceMethodId(
    r'onDetachedFromEngine',
    r'(Lio/flutter/embedding/engine/plugins/FlutterPlugin$FlutterPluginBinding;)V',
  );

  static final _onDetachedFromEngine = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void onDetachedFromEngine(io.flutter.embedding.engine.plugins.FlutterPlugin$FlutterPluginBinding flutterPluginBinding)`
  void onDetachedFromEngine(
    jni$_.JObject flutterPluginBinding,
  ) {
    final _$flutterPluginBinding = flutterPluginBinding.reference;
    _onDetachedFromEngine(
            reference.pointer,
            _id_onDetachedFromEngine as jni$_.JMethodIDPtr,
            _$flutterPluginBinding.pointer)
        .check();
  }

  static final _id_onAttachedToActivity = _class.instanceMethodId(
    r'onAttachedToActivity',
    r'(Lio/flutter/embedding/engine/plugins/activity/ActivityPluginBinding;)V',
  );

  static final _onAttachedToActivity = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void onAttachedToActivity(io.flutter.embedding.engine.plugins.activity.ActivityPluginBinding activityPluginBinding)`
  void onAttachedToActivity(
    jni$_.JObject activityPluginBinding,
  ) {
    final _$activityPluginBinding = activityPluginBinding.reference;
    _onAttachedToActivity(
            reference.pointer,
            _id_onAttachedToActivity as jni$_.JMethodIDPtr,
            _$activityPluginBinding.pointer)
        .check();
  }

  static final _id_onDetachedFromActivityForConfigChanges =
      _class.instanceMethodId(
    r'onDetachedFromActivityForConfigChanges',
    r'()V',
  );

  static final _onDetachedFromActivityForConfigChanges =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.JMethodIDPtr,
                  )>>('globalEnv_CallVoidMethod')
          .asFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>();

  /// from: `public void onDetachedFromActivityForConfigChanges()`
  void onDetachedFromActivityForConfigChanges() {
    _onDetachedFromActivityForConfigChanges(reference.pointer,
            _id_onDetachedFromActivityForConfigChanges as jni$_.JMethodIDPtr)
        .check();
  }

  static final _id_onReattachedToActivityForConfigChanges =
      _class.instanceMethodId(
    r'onReattachedToActivityForConfigChanges',
    r'(Lio/flutter/embedding/engine/plugins/activity/ActivityPluginBinding;)V',
  );

  static final _onReattachedToActivityForConfigChanges =
      jni$_.ProtectedJniExtensions.lookup<
                  jni$_.NativeFunction<
                      jni$_.JThrowablePtr Function(
                          jni$_.Pointer<jni$_.Void>,
                          jni$_.JMethodIDPtr,
                          jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void onReattachedToActivityForConfigChanges(io.flutter.embedding.engine.plugins.activity.ActivityPluginBinding activityPluginBinding)`
  void onReattachedToActivityForConfigChanges(
    jni$_.JObject activityPluginBinding,
  ) {
    final _$activityPluginBinding = activityPluginBinding.reference;
    _onReattachedToActivityForConfigChanges(
            reference.pointer,
            _id_onReattachedToActivityForConfigChanges as jni$_.JMethodIDPtr,
            _$activityPluginBinding.pointer)
        .check();
  }

  static final _id_onDetachedFromActivity = _class.instanceMethodId(
    r'onDetachedFromActivity',
    r'()V',
  );

  static final _onDetachedFromActivity = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public void onDetachedFromActivity()`
  void onDetachedFromActivity() {
    _onDetachedFromActivity(
            reference.pointer, _id_onDetachedFromActivity as jni$_.JMethodIDPtr)
        .check();
  }
}

final class $JniPlugin$NullableType extends jni$_.JObjType<JniPlugin?> {
  @jni$_.internal
  const $JniPlugin$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Lcom/github/dart_lang/jni/JniPlugin;';

  @jni$_.internal
  @core$_.override
  JniPlugin? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : JniPlugin.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<JniPlugin?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($JniPlugin$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($JniPlugin$NullableType) &&
        other is $JniPlugin$NullableType;
  }
}

final class $JniPlugin$Type extends jni$_.JObjType<JniPlugin> {
  @jni$_.internal
  const $JniPlugin$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Lcom/github/dart_lang/jni/JniPlugin;';

  @jni$_.internal
  @core$_.override
  JniPlugin fromReference(jni$_.JReference reference) =>
      JniPlugin.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<JniPlugin?> get nullableType =>
      const $JniPlugin$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($JniPlugin$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($JniPlugin$Type) && other is $JniPlugin$Type;
  }
}
