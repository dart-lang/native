// Copyright (c) 2023, the Dart project authors. Please see the AUTHORS file
// for details. All rights reserved. Use of this source code is governed by a
// BSD-style license that can be found in the LICENSE file.

// ignore_for_file: unused_import

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

class Bindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  Bindings(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  Bindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  MyEnum acceptsEnum(
    MyEnum value,
  ) {
    return MyEnum.fromValue(_acceptsEnum(
      value.value,
    ));
  }

  late final _acceptsEnumPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('acceptsEnum');
  late final _acceptsEnum = _acceptsEnumPtr.asFunction<int Function(int)>();

  int acceptsInt(
    int value,
  ) {
    return _acceptsInt(
      value,
    );
  }

  late final _acceptsIntPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('acceptsInt');
  late final _acceptsInt = _acceptsIntPtr.asFunction<int Function(int)>();
}

enum MyEnum {
  value1(0),
  value2(1),
  value3(2);

  final int value;
  const MyEnum(this.value);

  static MyEnum fromValue(int value) => switch (value) {
        0 => value1,
        1 => value2,
        2 => value3,
        _ => throw ArgumentError("Unknown value for MyEnum: $value"),
      };
}

sealed class MyIntegerEnum {
  static const int1 = 1;
  static const int2 = 2;
  static const int3 = 10;
}
