// Copyright (c) 2023, the Dart project authors. Please see the AUTHORS file
// for details. All rights reserved. Use of this source code is governed by a
// BSD-style license that can be found in the LICENSE file.

// ignore_for_file: unused_import

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

class Bindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  Bindings(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  Bindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  A funcWithEnum(
    A value,
  ) {
    return A.fromValue(_funcWithEnum(
      value.value,
    ));
  }

  late final _funcWithEnumPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('funcWithEnum');
  late final _funcWithEnum = _funcWithEnumPtr.asFunction<int Function(int)>();
}

enum A {
  a(0),
  b(1),
  c(2);

  final int value;
  const A(this.value);

  static A fromValue(int value) => switch (value) {
        0 => a,
        1 => b,
        2 => c,
        _ => throw ArgumentError("Unknown value for A: $value"),
      };
}

final class B extends ffi.Struct {
  @ffi.Int()
  external int _a;

  A get a => A.fromValue(_a);
}
