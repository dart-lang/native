// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi2;

class Bindings {
  /// Holds the symbol lookup function.
  final ffi2.Pointer<T> Function<T extends ffi2.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  Bindings(ffi2.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  Bindings.fromLookup(
      ffi2.Pointer<T> Function<T extends ffi2.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void testFunc() {
    return _testFunc();
  }

  late final _testFuncPtr =
      _lookup<ffi2.NativeFunction<ffi2.Void Function()>>('testFunc');
  late final _testFunc = _testFuncPtr.asFunction<void Function()>();

  void testFunc1() {
    return _testFunc1();
  }

  late final _testFunc1Ptr =
      _lookup<ffi2.NativeFunction<ffi2.Void Function()>>('testFunc');
  late final _testFunc1 = _testFunc1Ptr.asFunction<void Function()>();

  void testCrossDecl1() {
    return _testCrossDecl1();
  }

  late final _testCrossDecl1Ptr =
      _lookup<ffi2.NativeFunction<ffi2.Void Function()>>('testCrossDecl');
  late final _testCrossDecl1 = _testCrossDecl1Ptr.asFunction<void Function()>();

  void ffi1() {
    return _ffi1();
  }

  late final _ffi1Ptr =
      _lookup<ffi2.NativeFunction<ffi2.Void Function()>>('ffi1');
  late final _ffi1 = _ffi1Ptr.asFunction<void Function()>();
}

final class TestStruct extends ffi2.Opaque {}

final class TestStruct1 extends ffi2.Opaque {}

sealed class TestEnum {}

sealed class TestEnum1 {}

const int Test_Macro = 0;

const int Test_Macro1 = 0;

typedef testAlias = ffi2.Void;
typedef DarttestAlias = void;
typedef testAlias1 = ffi2.Void;
typedef DarttestAlias1 = void;

final class testCrossDecl extends ffi2.Opaque {}

const int testCrossDecl2 = 0;

sealed class testCrossDecl3 {}

typedef testCrossDecl4 = ffi2.Void;
typedef DarttestCrossDecl = void;

final class ffi extends ffi2.Opaque {}
