// Copyright (c) 2024, the Dart project authors. Please see the AUTHORS file
// for details. All rights reserved. Use of this source code is governed by a
// BSD-style license that can be found in the LICENSE file.

// ignore_for_file: camel_case_types, non_constant_identifier_names, unused_element, unused_field, void_checks, annotate_overrides, no_leading_underscores_for_local_identifiers, library_private_types_in_public_api

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;
import 'package:objective_c/objective_c.dart' as objc;
import 'package:ffi/ffi.dart' as pkg_ffi;

/// Bindings for AVFAudio.
class AVFAudio {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(
    String symbolName,
  ) _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  AVFAudio(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  AVFAudio.fromLookup(
    ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) lookup,
  ) : _lookup = lookup;

  late final _class_NSObject1 = objc.getClass("NSObject");
  late final _sel_load1 = objc.registerName("load");
  void _objc_msgSend_1(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_1(obj, sel);
  }

  late final __objc_msgSend_1Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1 =
      __objc_msgSend_1Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_initialize1 = objc.registerName("initialize");
  late final _sel_init1 = objc.registerName("init");
  instancetype _objc_msgSend_2(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_2(obj, sel);
  }

  late final __objc_msgSend_2Ptr = _lookup<
    ffi.NativeFunction<
      instancetype Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_2 =
      __objc_msgSend_2Ptr
          .asFunction<
            instancetype Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_new1 = objc.registerName("new");
  late final _sel_allocWithZone_1 = objc.registerName("allocWithZone:");
  instancetype _objc_msgSend_3(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<_NSZone> zone,
  ) {
    return __objc_msgSend_3(obj, sel, zone);
  }

  late final __objc_msgSend_3Ptr = _lookup<
    ffi.NativeFunction<
      instancetype Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<_NSZone>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_3 =
      __objc_msgSend_3Ptr
          .asFunction<
            instancetype Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<_NSZone>,
            )
          >();

  late final _sel_alloc1 = objc.registerName("alloc");
  late final _sel_dealloc1 = objc.registerName("dealloc");
  late final _sel_finalize1 = objc.registerName("finalize");
  late final _sel_copy1 = objc.registerName("copy");
  late final _sel_mutableCopy1 = objc.registerName("mutableCopy");
  late final _sel_copyWithZone_1 = objc.registerName("copyWithZone:");
  late final _sel_mutableCopyWithZone_1 = objc.registerName(
    "mutableCopyWithZone:",
  );
  late final _sel_instancesRespondToSelector_1 = objc.registerName(
    "instancesRespondToSelector:",
  );
  bool _objc_msgSend_4(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCSelector> aSelector,
  ) {
    return __objc_msgSend_4(obj, sel, aSelector);
  }

  late final __objc_msgSend_4Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Bool Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_4 =
      __objc_msgSend_4Ptr
          .asFunction<
            bool Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  bool _objc_msgSend_0(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> clazz,
  ) {
    return __objc_msgSend_0(obj, sel, clazz);
  }

  late final __objc_msgSend_0Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Bool Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_0 =
      __objc_msgSend_0Ptr
          .asFunction<
            bool Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_isKindOfClass_1 = objc.registerName("isKindOfClass:");
  late final _class_Protocol1 = objc.getClass("Protocol");
  late final _sel_conformsToProtocol_1 = objc.registerName(
    "conformsToProtocol:",
  );
  bool _objc_msgSend_5(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> protocol,
  ) {
    return __objc_msgSend_5(obj, sel, protocol);
  }

  late final __objc_msgSend_5Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Bool Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_5 =
      __objc_msgSend_5Ptr
          .asFunction<
            bool Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_methodForSelector_1 = objc.registerName("methodForSelector:");
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _objc_msgSend_6(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCSelector> aSelector,
  ) {
    return __objc_msgSend_6(obj, sel, aSelector);
  }

  late final __objc_msgSend_6Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_6 =
      __objc_msgSend_6Ptr
          .asFunction<
            ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_instanceMethodForSelector_1 = objc.registerName(
    "instanceMethodForSelector:",
  );
  late final _sel_doesNotRecognizeSelector_1 = objc.registerName(
    "doesNotRecognizeSelector:",
  );
  void _objc_msgSend_7(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCSelector> aSelector,
  ) {
    return __objc_msgSend_7(obj, sel, aSelector);
  }

  late final __objc_msgSend_7Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_7 =
      __objc_msgSend_7Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_forwardingTargetForSelector_1 = objc.registerName(
    "forwardingTargetForSelector:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_8(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCSelector> aSelector,
  ) {
    return __objc_msgSend_8(obj, sel, aSelector);
  }

  late final __objc_msgSend_8Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_8 =
      __objc_msgSend_8Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _class_NSInvocation1 = objc.getClass("NSInvocation");
  late final _class_NSMethodSignature1 = objc.getClass("NSMethodSignature");
  late final _sel_signatureWithObjCTypes_1 = objc.registerName(
    "signatureWithObjCTypes:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_9(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<ffi.Char> types,
  ) {
    return __objc_msgSend_9(obj, sel, types);
  }

  late final __objc_msgSend_9Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<ffi.Char>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_9 =
      __objc_msgSend_9Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<ffi.Char>,
            )
          >();

  late final _sel_numberOfArguments1 = objc.registerName("numberOfArguments");
  int _objc_msgSend_10(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_10(obj, sel);
  }

  late final __objc_msgSend_10Ptr = _lookup<
    ffi.NativeFunction<
      ffi.UnsignedLong Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_10 =
      __objc_msgSend_10Ptr
          .asFunction<
            int Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_getArgumentTypeAtIndex_1 = objc.registerName(
    "getArgumentTypeAtIndex:",
  );
  ffi.Pointer<ffi.Char> _objc_msgSend_11(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int idx,
  ) {
    return __objc_msgSend_11(obj, sel, idx);
  }

  late final __objc_msgSend_11Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<ffi.Char> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.UnsignedLong,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_11 =
      __objc_msgSend_11Ptr
          .asFunction<
            ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
            )
          >();

  late final _sel_frameLength1 = objc.registerName("frameLength");
  late final _sel_isOneway1 = objc.registerName("isOneway");
  bool _objc_msgSend_12(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_12(obj, sel);
  }

  late final __objc_msgSend_12Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Bool Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_12 =
      __objc_msgSend_12Ptr
          .asFunction<
            bool Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_methodReturnType1 = objc.registerName("methodReturnType");
  ffi.Pointer<ffi.Char> _objc_msgSend_13(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_13(obj, sel);
  }

  late final __objc_msgSend_13Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<ffi.Char> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_13 =
      __objc_msgSend_13Ptr
          .asFunction<
            ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_methodReturnLength1 = objc.registerName("methodReturnLength");
  late final _sel_cancelPreviousPerformRequestsWithTarget_selector_object_1 =
      objc.registerName(
        "cancelPreviousPerformRequestsWithTarget:selector:object:",
      );
  void _objc_msgSend_14(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> aTarget,
    ffi.Pointer<objc.ObjCSelector> aSelector,
    ffi.Pointer<objc.ObjCObject> anArgument,
  ) {
    return __objc_msgSend_14(obj, sel, aTarget, aSelector, anArgument);
  }

  late final __objc_msgSend_14Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_14 =
      __objc_msgSend_14Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_cancelPreviousPerformRequestsWithTarget_1 = objc.registerName(
    "cancelPreviousPerformRequestsWithTarget:",
  );
  void _objc_msgSend_15(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> aTarget,
  ) {
    return __objc_msgSend_15(obj, sel, aTarget);
  }

  late final __objc_msgSend_15Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_15 =
      __objc_msgSend_15Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_accessInstanceVariablesDirectly1 = objc.registerName(
    "accessInstanceVariablesDirectly",
  );
  late final _sel_useStoredAccessor1 = objc.registerName("useStoredAccessor");
  late final _class_NSSet1 = objc.getClass("NSSet");
  late final _sel_count1 = objc.registerName("count");
  late final _sel_member_1 = objc.registerName("member:");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_16(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> object,
  ) {
    return __objc_msgSend_16(obj, sel, object);
  }

  late final __objc_msgSend_16Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_16 =
      __objc_msgSend_16Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _class_NSEnumerator1 = objc.getClass("NSEnumerator");
  late final _sel_nextObject1 = objc.registerName("nextObject");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_17(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_17(obj, sel);
  }

  late final __objc_msgSend_17Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_17 =
      __objc_msgSend_17Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_allObjects1 = objc.registerName("allObjects");
  late final _class_NSString1 = objc.getClass("NSString");
  late final _sel_length1 = objc.registerName("length");
  late final _sel_characterAtIndex_1 = objc.registerName("characterAtIndex:");
  int _objc_msgSend_18(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int index,
  ) {
    return __objc_msgSend_18(obj, sel, index);
  }

  late final __objc_msgSend_18Ptr = _lookup<
    ffi.NativeFunction<
      ffi.UnsignedShort Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.UnsignedLong,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_18 =
      __objc_msgSend_18Ptr
          .asFunction<
            int Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
            )
          >();

  late final _class_NSCoder1 = objc.getClass("NSCoder");
  late final _sel_encodeValueOfObjCType_at_1 = objc.registerName(
    "encodeValueOfObjCType:at:",
  );
  void _objc_msgSend_19(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<ffi.Char> type,
    ffi.Pointer<ffi.Void> addr,
  ) {
    return __objc_msgSend_19(obj, sel, type, addr);
  }

  late final __objc_msgSend_19Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<ffi.Char>,
        ffi.Pointer<ffi.Void>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_19 =
      __objc_msgSend_19Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>,
            )
          >();

  late final _class_NSData1 = objc.getClass("NSData");
  late final _sel_bytes1 = objc.registerName("bytes");
  ffi.Pointer<ffi.Void> _objc_msgSend_20(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_20(obj, sel);
  }

  late final __objc_msgSend_20Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<ffi.Void> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_20 =
      __objc_msgSend_20Ptr
          .asFunction<
            ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_description1 = objc.registerName("description");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_21(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_21(obj, sel);
  }

  late final __objc_msgSend_21Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_21 =
      __objc_msgSend_21Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_getBytes_length_1 = objc.registerName("getBytes:length:");
  void _objc_msgSend_22(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<ffi.Void> buffer,
    int length,
  ) {
    return __objc_msgSend_22(obj, sel, buffer, length);
  }

  late final __objc_msgSend_22Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<ffi.Void>,
        ffi.UnsignedLong,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_22 =
      __objc_msgSend_22Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<ffi.Void>,
              int,
            )
          >();

  late final _sel_getBytes_range_1 = objc.registerName("getBytes:range:");
  void _objc_msgSend_23(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<ffi.Void> buffer,
    _NSRange range,
  ) {
    return __objc_msgSend_23(obj, sel, buffer, range);
  }

  late final __objc_msgSend_23Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<ffi.Void>,
        _NSRange,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_23 =
      __objc_msgSend_23Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<ffi.Void>,
              _NSRange,
            )
          >();

  late final _sel_isEqualToData_1 = objc.registerName("isEqualToData:");
  bool _objc_msgSend_24(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> other,
  ) {
    return __objc_msgSend_24(obj, sel, other);
  }

  late final __objc_msgSend_24Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Bool Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_24 =
      __objc_msgSend_24Ptr
          .asFunction<
            bool Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_subdataWithRange_1 = objc.registerName("subdataWithRange:");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_25(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    _NSRange range,
  ) {
    return __objc_msgSend_25(obj, sel, range);
  }

  late final __objc_msgSend_25Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        _NSRange,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_25 =
      __objc_msgSend_25Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              _NSRange,
            )
          >();

  late final _sel_writeToFile_atomically_1 = objc.registerName(
    "writeToFile:atomically:",
  );
  bool _objc_msgSend_26(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> path,
    bool useAuxiliaryFile,
  ) {
    return __objc_msgSend_26(obj, sel, path, useAuxiliaryFile);
  }

  late final __objc_msgSend_26Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Bool Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Bool,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_26 =
      __objc_msgSend_26Ptr
          .asFunction<
            bool Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              bool,
            )
          >();

  late final _class_NSURL1 = objc.getClass("NSURL");
  late final _sel_initWithScheme_host_path_1 = objc.registerName(
    "initWithScheme:host:path:",
  );
  instancetype _objc_msgSend_27(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> scheme,
    ffi.Pointer<objc.ObjCObject> host,
    ffi.Pointer<objc.ObjCObject> path,
  ) {
    return __objc_msgSend_27(obj, sel, scheme, host, path);
  }

  late final __objc_msgSend_27Ptr = _lookup<
    ffi.NativeFunction<
      instancetype Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_27 =
      __objc_msgSend_27Ptr
          .asFunction<
            instancetype Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_initFileURLWithPath_isDirectory_relativeToURL_1 = objc
      .registerName("initFileURLWithPath:isDirectory:relativeToURL:");
  instancetype _objc_msgSend_28(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> path,
    bool isDir,
    ffi.Pointer<objc.ObjCObject> baseURL,
  ) {
    return __objc_msgSend_28(obj, sel, path, isDir, baseURL);
  }

  late final __objc_msgSend_28Ptr = _lookup<
    ffi.NativeFunction<
      instancetype Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Bool,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_28 =
      __objc_msgSend_28Ptr
          .asFunction<
            instancetype Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              bool,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_initFileURLWithPath_relativeToURL_1 = objc.registerName(
    "initFileURLWithPath:relativeToURL:",
  );
  instancetype _objc_msgSend_29(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> path,
    ffi.Pointer<objc.ObjCObject> baseURL,
  ) {
    return __objc_msgSend_29(obj, sel, path, baseURL);
  }

  late final __objc_msgSend_29Ptr = _lookup<
    ffi.NativeFunction<
      instancetype Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_29 =
      __objc_msgSend_29Ptr
          .asFunction<
            instancetype Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_initFileURLWithPath_isDirectory_1 = objc.registerName(
    "initFileURLWithPath:isDirectory:",
  );
  instancetype _objc_msgSend_30(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> path,
    bool isDir,
  ) {
    return __objc_msgSend_30(obj, sel, path, isDir);
  }

  late final __objc_msgSend_30Ptr = _lookup<
    ffi.NativeFunction<
      instancetype Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Bool,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_30 =
      __objc_msgSend_30Ptr
          .asFunction<
            instancetype Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              bool,
            )
          >();

  late final _sel_initFileURLWithPath_1 = objc.registerName(
    "initFileURLWithPath:",
  );
  instancetype _objc_msgSend_31(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> path,
  ) {
    return __objc_msgSend_31(obj, sel, path);
  }

  late final __objc_msgSend_31Ptr = _lookup<
    ffi.NativeFunction<
      instancetype Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_31 =
      __objc_msgSend_31Ptr
          .asFunction<
            instancetype Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_fileURLWithPath_isDirectory_relativeToURL_1 = objc
      .registerName("fileURLWithPath:isDirectory:relativeToURL:");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_32(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> path,
    bool isDir,
    ffi.Pointer<objc.ObjCObject> baseURL,
  ) {
    return __objc_msgSend_32(obj, sel, path, isDir, baseURL);
  }

  late final __objc_msgSend_32Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Bool,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_32 =
      __objc_msgSend_32Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              bool,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_fileURLWithPath_relativeToURL_1 = objc.registerName(
    "fileURLWithPath:relativeToURL:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_33(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> path,
    ffi.Pointer<objc.ObjCObject> baseURL,
  ) {
    return __objc_msgSend_33(obj, sel, path, baseURL);
  }

  late final __objc_msgSend_33Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_33 =
      __objc_msgSend_33Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_fileURLWithPath_isDirectory_1 = objc.registerName(
    "fileURLWithPath:isDirectory:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_34(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> path,
    bool isDir,
  ) {
    return __objc_msgSend_34(obj, sel, path, isDir);
  }

  late final __objc_msgSend_34Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Bool,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_34 =
      __objc_msgSend_34Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              bool,
            )
          >();

  late final _sel_fileURLWithPath_1 = objc.registerName("fileURLWithPath:");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_35(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> path,
  ) {
    return __objc_msgSend_35(obj, sel, path);
  }

  late final __objc_msgSend_35Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_35 =
      __objc_msgSend_35Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_initFileURLWithFileSystemRepresentation_isDirectory_relativeToURL_1 =
      objc.registerName(
        "initFileURLWithFileSystemRepresentation:isDirectory:relativeToURL:",
      );
  instancetype _objc_msgSend_36(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<ffi.Char> path,
    bool isDir,
    ffi.Pointer<objc.ObjCObject> baseURL,
  ) {
    return __objc_msgSend_36(obj, sel, path, isDir, baseURL);
  }

  late final __objc_msgSend_36Ptr = _lookup<
    ffi.NativeFunction<
      instancetype Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<ffi.Char>,
        ffi.Bool,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_36 =
      __objc_msgSend_36Ptr
          .asFunction<
            instancetype Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<ffi.Char>,
              bool,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_fileURLWithFileSystemRepresentation_isDirectory_relativeToURL_1 =
      objc.registerName(
        "fileURLWithFileSystemRepresentation:isDirectory:relativeToURL:",
      );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_37(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<ffi.Char> path,
    bool isDir,
    ffi.Pointer<objc.ObjCObject> baseURL,
  ) {
    return __objc_msgSend_37(obj, sel, path, isDir, baseURL);
  }

  late final __objc_msgSend_37Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<ffi.Char>,
        ffi.Bool,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_37 =
      __objc_msgSend_37Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<ffi.Char>,
              bool,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_initWithString_1 = objc.registerName("initWithString:");
  instancetype _objc_msgSend_38(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> URLString,
  ) {
    return __objc_msgSend_38(obj, sel, URLString);
  }

  late final __objc_msgSend_38Ptr = _lookup<
    ffi.NativeFunction<
      instancetype Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_38 =
      __objc_msgSend_38Ptr
          .asFunction<
            instancetype Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_initWithString_relativeToURL_1 = objc.registerName(
    "initWithString:relativeToURL:",
  );
  instancetype _objc_msgSend_39(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> URLString,
    ffi.Pointer<objc.ObjCObject> baseURL,
  ) {
    return __objc_msgSend_39(obj, sel, URLString, baseURL);
  }

  late final __objc_msgSend_39Ptr = _lookup<
    ffi.NativeFunction<
      instancetype Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_39 =
      __objc_msgSend_39Ptr
          .asFunction<
            instancetype Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_URLWithString_1 = objc.registerName("URLWithString:");
  late final _sel_URLWithString_relativeToURL_1 = objc.registerName(
    "URLWithString:relativeToURL:",
  );
  late final _sel_initWithString_encodingInvalidCharacters_1 = objc
      .registerName("initWithString:encodingInvalidCharacters:");
  instancetype _objc_msgSend_40(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> URLString,
    bool encodingInvalidCharacters,
  ) {
    return __objc_msgSend_40(obj, sel, URLString, encodingInvalidCharacters);
  }

  late final __objc_msgSend_40Ptr = _lookup<
    ffi.NativeFunction<
      instancetype Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Bool,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_40 =
      __objc_msgSend_40Ptr
          .asFunction<
            instancetype Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              bool,
            )
          >();

  late final _sel_URLWithString_encodingInvalidCharacters_1 = objc.registerName(
    "URLWithString:encodingInvalidCharacters:",
  );
  late final _sel_initWithDataRepresentation_relativeToURL_1 = objc
      .registerName("initWithDataRepresentation:relativeToURL:");
  instancetype _objc_msgSend_41(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> data,
    ffi.Pointer<objc.ObjCObject> baseURL,
  ) {
    return __objc_msgSend_41(obj, sel, data, baseURL);
  }

  late final __objc_msgSend_41Ptr = _lookup<
    ffi.NativeFunction<
      instancetype Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_41 =
      __objc_msgSend_41Ptr
          .asFunction<
            instancetype Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_URLWithDataRepresentation_relativeToURL_1 = objc.registerName(
    "URLWithDataRepresentation:relativeToURL:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_42(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> data,
    ffi.Pointer<objc.ObjCObject> baseURL,
  ) {
    return __objc_msgSend_42(obj, sel, data, baseURL);
  }

  late final __objc_msgSend_42Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_42 =
      __objc_msgSend_42Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_initAbsoluteURLWithDataRepresentation_relativeToURL_1 = objc
      .registerName("initAbsoluteURLWithDataRepresentation:relativeToURL:");
  late final _sel_absoluteURLWithDataRepresentation_relativeToURL_1 = objc
      .registerName("absoluteURLWithDataRepresentation:relativeToURL:");
  late final _sel_dataRepresentation1 = objc.registerName("dataRepresentation");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_43(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_43(obj, sel);
  }

  late final __objc_msgSend_43Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_43 =
      __objc_msgSend_43Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_absoluteString1 = objc.registerName("absoluteString");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_44(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_44(obj, sel);
  }

  late final __objc_msgSend_44Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_44 =
      __objc_msgSend_44Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_relativeString1 = objc.registerName("relativeString");
  late final _sel_baseURL1 = objc.registerName("baseURL");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_45(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_45(obj, sel);
  }

  late final __objc_msgSend_45Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_45 =
      __objc_msgSend_45Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_absoluteURL1 = objc.registerName("absoluteURL");
  late final _sel_scheme1 = objc.registerName("scheme");
  late final _sel_resourceSpecifier1 = objc.registerName("resourceSpecifier");
  late final _sel_host1 = objc.registerName("host");
  late final _class_NSNumber1 = objc.getClass("NSNumber");
  late final _class_NSValue1 = objc.getClass("NSValue");
  late final _sel_getValue_size_1 = objc.registerName("getValue:size:");
  late final _sel_objCType1 = objc.registerName("objCType");
  late final _sel_initWithBytes_objCType_1 = objc.registerName(
    "initWithBytes:objCType:",
  );
  instancetype _objc_msgSend_46(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<ffi.Void> value,
    ffi.Pointer<ffi.Char> type,
  ) {
    return __objc_msgSend_46(obj, sel, value, type);
  }

  late final __objc_msgSend_46Ptr = _lookup<
    ffi.NativeFunction<
      instancetype Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<ffi.Void>,
        ffi.Pointer<ffi.Char>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_46 =
      __objc_msgSend_46Ptr
          .asFunction<
            instancetype Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>,
            )
          >();

  late final _sel_initWithCoder_1 = objc.registerName("initWithCoder:");
  instancetype _objc_msgSend_47(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> coder,
  ) {
    return __objc_msgSend_47(obj, sel, coder);
  }

  late final __objc_msgSend_47Ptr = _lookup<
    ffi.NativeFunction<
      instancetype Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_47 =
      __objc_msgSend_47Ptr
          .asFunction<
            instancetype Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_valueWithBytes_objCType_1 = objc.registerName(
    "valueWithBytes:objCType:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_48(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<ffi.Void> value,
    ffi.Pointer<ffi.Char> type,
  ) {
    return __objc_msgSend_48(obj, sel, value, type);
  }

  late final __objc_msgSend_48Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<ffi.Void>,
        ffi.Pointer<ffi.Char>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_48 =
      __objc_msgSend_48Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>,
            )
          >();

  late final _sel_value_withObjCType_1 = objc.registerName(
    "value:withObjCType:",
  );
  late final _sel_valueWithNonretainedObject_1 = objc.registerName(
    "valueWithNonretainedObject:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_49(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> anObject,
  ) {
    return __objc_msgSend_49(obj, sel, anObject);
  }

  late final __objc_msgSend_49Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_49 =
      __objc_msgSend_49Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_nonretainedObjectValue1 = objc.registerName(
    "nonretainedObjectValue",
  );
  late final _sel_valueWithPointer_1 = objc.registerName("valueWithPointer:");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_50(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<ffi.Void> pointer,
  ) {
    return __objc_msgSend_50(obj, sel, pointer);
  }

  late final __objc_msgSend_50Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<ffi.Void>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_50 =
      __objc_msgSend_50Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<ffi.Void>,
            )
          >();

  late final _sel_pointerValue1 = objc.registerName("pointerValue");
  late final _sel_isEqualToValue_1 = objc.registerName("isEqualToValue:");
  bool _objc_msgSend_51(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> value,
  ) {
    return __objc_msgSend_51(obj, sel, value);
  }

  late final __objc_msgSend_51Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Bool Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_51 =
      __objc_msgSend_51Ptr
          .asFunction<
            bool Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_getValue_1 = objc.registerName("getValue:");
  void _objc_msgSend_52(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<ffi.Void> value,
  ) {
    return __objc_msgSend_52(obj, sel, value);
  }

  late final __objc_msgSend_52Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<ffi.Void>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_52 =
      __objc_msgSend_52Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<ffi.Void>,
            )
          >();

  late final _sel_valueWithRange_1 = objc.registerName("valueWithRange:");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_53(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    _NSRange range,
  ) {
    return __objc_msgSend_53(obj, sel, range);
  }

  late final __objc_msgSend_53Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        _NSRange,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_53 =
      __objc_msgSend_53Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              _NSRange,
            )
          >();

  late final _sel_rangeValue1 = objc.registerName("rangeValue");
  _NSRange _objc_msgSend_54(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_54(obj, sel);
  }

  late final __objc_msgSend_54Ptr = _lookup<
    ffi.NativeFunction<
      _NSRange Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_54 =
      __objc_msgSend_54Ptr
          .asFunction<
            _NSRange Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  void _objc_msgSend_54_stret(
    ffi.Pointer<_NSRange> stret,
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_54_stret(stret, obj, sel);
  }

  late final __objc_msgSend_54_stretPtr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<_NSRange>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend_stret');
  late final __objc_msgSend_54_stret =
      __objc_msgSend_54_stretPtr
          .asFunction<
            void Function(
              ffi.Pointer<_NSRange>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_valueWithPoint_1 = objc.registerName("valueWithPoint:");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_55(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    CGPoint point,
  ) {
    return __objc_msgSend_55(obj, sel, point);
  }

  late final __objc_msgSend_55Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        CGPoint,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_55 =
      __objc_msgSend_55Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              CGPoint,
            )
          >();

  late final _sel_valueWithSize_1 = objc.registerName("valueWithSize:");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_56(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    CGSize size,
  ) {
    return __objc_msgSend_56(obj, sel, size);
  }

  late final __objc_msgSend_56Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        CGSize,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_56 =
      __objc_msgSend_56Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              CGSize,
            )
          >();

  late final _sel_valueWithRect_1 = objc.registerName("valueWithRect:");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_57(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    CGRect rect,
  ) {
    return __objc_msgSend_57(obj, sel, rect);
  }

  late final __objc_msgSend_57Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        CGRect,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_57 =
      __objc_msgSend_57Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              CGRect,
            )
          >();

  late final _sel_valueWithEdgeInsets_1 = objc.registerName(
    "valueWithEdgeInsets:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_58(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    NSEdgeInsets insets,
  ) {
    return __objc_msgSend_58(obj, sel, insets);
  }

  late final __objc_msgSend_58Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        NSEdgeInsets,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_58 =
      __objc_msgSend_58Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              NSEdgeInsets,
            )
          >();

  late final _sel_pointValue1 = objc.registerName("pointValue");
  CGPoint _objc_msgSend_59(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_59(obj, sel);
  }

  late final __objc_msgSend_59Ptr = _lookup<
    ffi.NativeFunction<
      CGPoint Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_59 =
      __objc_msgSend_59Ptr
          .asFunction<
            CGPoint Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  void _objc_msgSend_59_stret(
    ffi.Pointer<CGPoint> stret,
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_59_stret(stret, obj, sel);
  }

  late final __objc_msgSend_59_stretPtr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<CGPoint>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend_stret');
  late final __objc_msgSend_59_stret =
      __objc_msgSend_59_stretPtr
          .asFunction<
            void Function(
              ffi.Pointer<CGPoint>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_sizeValue1 = objc.registerName("sizeValue");
  CGSize _objc_msgSend_60(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_60(obj, sel);
  }

  late final __objc_msgSend_60Ptr = _lookup<
    ffi.NativeFunction<
      CGSize Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_60 =
      __objc_msgSend_60Ptr
          .asFunction<
            CGSize Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  void _objc_msgSend_60_stret(
    ffi.Pointer<CGSize> stret,
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_60_stret(stret, obj, sel);
  }

  late final __objc_msgSend_60_stretPtr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<CGSize>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend_stret');
  late final __objc_msgSend_60_stret =
      __objc_msgSend_60_stretPtr
          .asFunction<
            void Function(
              ffi.Pointer<CGSize>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_rectValue1 = objc.registerName("rectValue");
  CGRect _objc_msgSend_61(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_61(obj, sel);
  }

  late final __objc_msgSend_61Ptr = _lookup<
    ffi.NativeFunction<
      CGRect Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_61 =
      __objc_msgSend_61Ptr
          .asFunction<
            CGRect Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  void _objc_msgSend_61_stret(
    ffi.Pointer<CGRect> stret,
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_61_stret(stret, obj, sel);
  }

  late final __objc_msgSend_61_stretPtr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<CGRect>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend_stret');
  late final __objc_msgSend_61_stret =
      __objc_msgSend_61_stretPtr
          .asFunction<
            void Function(
              ffi.Pointer<CGRect>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_edgeInsetsValue1 = objc.registerName("edgeInsetsValue");
  NSEdgeInsets _objc_msgSend_62(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_62(obj, sel);
  }

  late final __objc_msgSend_62Ptr = _lookup<
    ffi.NativeFunction<
      NSEdgeInsets Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_62 =
      __objc_msgSend_62Ptr
          .asFunction<
            NSEdgeInsets Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  void _objc_msgSend_62_stret(
    ffi.Pointer<NSEdgeInsets> stret,
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_62_stret(stret, obj, sel);
  }

  late final __objc_msgSend_62_stretPtr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<NSEdgeInsets>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend_stret');
  late final __objc_msgSend_62_stret =
      __objc_msgSend_62_stretPtr
          .asFunction<
            void Function(
              ffi.Pointer<NSEdgeInsets>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_keyPathsForValuesAffectingValueForKey_1 = objc.registerName(
    "keyPathsForValuesAffectingValueForKey:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_63(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> key,
  ) {
    return __objc_msgSend_63(obj, sel, key);
  }

  late final __objc_msgSend_63Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_63 =
      __objc_msgSend_63Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_automaticallyNotifiesObserversForKey_1 = objc.registerName(
    "automaticallyNotifiesObserversForKey:",
  );
  bool _objc_msgSend_64(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> key,
  ) {
    return __objc_msgSend_64(obj, sel, key);
  }

  late final __objc_msgSend_64Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Bool Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_64 =
      __objc_msgSend_64Ptr
          .asFunction<
            bool Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _class_NSArray1 = objc.getClass("NSArray");
  late final _sel_objectAtIndex_1 = objc.registerName("objectAtIndex:");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_65(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int index,
  ) {
    return __objc_msgSend_65(obj, sel, index);
  }

  late final __objc_msgSend_65Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.UnsignedLong,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_65 =
      __objc_msgSend_65Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
            )
          >();

  late final _sel_initWithObjects_count_1 = objc.registerName(
    "initWithObjects:count:",
  );
  instancetype _objc_msgSend_66(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> objects,
    int cnt,
  ) {
    return __objc_msgSend_66(obj, sel, objects, cnt);
  }

  late final __objc_msgSend_66Ptr = _lookup<
    ffi.NativeFunction<
      instancetype Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
        ffi.UnsignedLong,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_66 =
      __objc_msgSend_66Ptr
          .asFunction<
            instancetype Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
              int,
            )
          >();

  late final _sel_arrayByAddingObject_1 = objc.registerName(
    "arrayByAddingObject:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_67(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> anObject,
  ) {
    return __objc_msgSend_67(obj, sel, anObject);
  }

  late final __objc_msgSend_67Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_67 =
      __objc_msgSend_67Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_arrayByAddingObjectsFromArray_1 = objc.registerName(
    "arrayByAddingObjectsFromArray:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_68(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> otherArray,
  ) {
    return __objc_msgSend_68(obj, sel, otherArray);
  }

  late final __objc_msgSend_68Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_68 =
      __objc_msgSend_68Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_componentsJoinedByString_1 = objc.registerName(
    "componentsJoinedByString:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_69(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> separator,
  ) {
    return __objc_msgSend_69(obj, sel, separator);
  }

  late final __objc_msgSend_69Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_69 =
      __objc_msgSend_69Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_containsObject_1 = objc.registerName("containsObject:");
  late final _sel_descriptionWithLocale_1 = objc.registerName(
    "descriptionWithLocale:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_70(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> locale,
  ) {
    return __objc_msgSend_70(obj, sel, locale);
  }

  late final __objc_msgSend_70Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_70 =
      __objc_msgSend_70Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_descriptionWithLocale_indent_1 = objc.registerName(
    "descriptionWithLocale:indent:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_71(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> locale,
    int level,
  ) {
    return __objc_msgSend_71(obj, sel, locale, level);
  }

  late final __objc_msgSend_71Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.UnsignedLong,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_71 =
      __objc_msgSend_71Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              int,
            )
          >();

  late final _sel_firstObjectCommonWithArray_1 = objc.registerName(
    "firstObjectCommonWithArray:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_72(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> otherArray,
  ) {
    return __objc_msgSend_72(obj, sel, otherArray);
  }

  late final __objc_msgSend_72Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_72 =
      __objc_msgSend_72Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_getObjects_range_1 = objc.registerName("getObjects:range:");
  void _objc_msgSend_73(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> objects,
    _NSRange range,
  ) {
    return __objc_msgSend_73(obj, sel, objects, range);
  }

  late final __objc_msgSend_73Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
        _NSRange,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_73 =
      __objc_msgSend_73Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
              _NSRange,
            )
          >();

  late final _sel_indexOfObject_1 = objc.registerName("indexOfObject:");
  int _objc_msgSend_74(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> anObject,
  ) {
    return __objc_msgSend_74(obj, sel, anObject);
  }

  late final __objc_msgSend_74Ptr = _lookup<
    ffi.NativeFunction<
      ffi.UnsignedLong Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_74 =
      __objc_msgSend_74Ptr
          .asFunction<
            int Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_indexOfObject_inRange_1 = objc.registerName(
    "indexOfObject:inRange:",
  );
  int _objc_msgSend_75(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> anObject,
    _NSRange range,
  ) {
    return __objc_msgSend_75(obj, sel, anObject, range);
  }

  late final __objc_msgSend_75Ptr = _lookup<
    ffi.NativeFunction<
      ffi.UnsignedLong Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        _NSRange,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_75 =
      __objc_msgSend_75Ptr
          .asFunction<
            int Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              _NSRange,
            )
          >();

  late final _sel_indexOfObjectIdenticalTo_1 = objc.registerName(
    "indexOfObjectIdenticalTo:",
  );
  late final _sel_indexOfObjectIdenticalTo_inRange_1 = objc.registerName(
    "indexOfObjectIdenticalTo:inRange:",
  );
  late final _sel_isEqualToArray_1 = objc.registerName("isEqualToArray:");
  bool _objc_msgSend_76(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> otherArray,
  ) {
    return __objc_msgSend_76(obj, sel, otherArray);
  }

  late final __objc_msgSend_76Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Bool Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_76 =
      __objc_msgSend_76Ptr
          .asFunction<
            bool Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_firstObject1 = objc.registerName("firstObject");
  late final _sel_lastObject1 = objc.registerName("lastObject");
  late final _sel_objectEnumerator1 = objc.registerName("objectEnumerator");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_77(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_77(obj, sel);
  }

  late final __objc_msgSend_77Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_77 =
      __objc_msgSend_77Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_reverseObjectEnumerator1 = objc.registerName(
    "reverseObjectEnumerator",
  );
  late final _sel_sortedArrayHint1 = objc.registerName("sortedArrayHint");
  late final _sel_sortedArrayUsingFunction_context_1 = objc.registerName(
    "sortedArrayUsingFunction:context:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_78(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<
      ffi.NativeFunction<
        ffi.Long Function(
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<ffi.Void>,
        )
      >
    > comparator,
    ffi.Pointer<ffi.Void> context,
  ) {
    return __objc_msgSend_78(obj, sel, comparator, context);
  }

  late final __objc_msgSend_78Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<
          ffi.NativeFunction<
            ffi.Long Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<ffi.Void>,
            )
          >
        >,
        ffi.Pointer<ffi.Void>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_78 =
      __objc_msgSend_78Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<
                ffi.NativeFunction<
                  ffi.Long Function(
                    ffi.Pointer<objc.ObjCObject>,
                    ffi.Pointer<objc.ObjCObject>,
                    ffi.Pointer<ffi.Void>,
                  )
                >
              >,
              ffi.Pointer<ffi.Void>,
            )
          >();

  late final _sel_sortedArrayUsingFunction_context_hint_1 = objc.registerName(
    "sortedArrayUsingFunction:context:hint:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_79(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<
      ffi.NativeFunction<
        ffi.Long Function(
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<ffi.Void>,
        )
      >
    > comparator,
    ffi.Pointer<ffi.Void> context,
    ffi.Pointer<objc.ObjCObject> hint,
  ) {
    return __objc_msgSend_79(obj, sel, comparator, context, hint);
  }

  late final __objc_msgSend_79Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<
          ffi.NativeFunction<
            ffi.Long Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<ffi.Void>,
            )
          >
        >,
        ffi.Pointer<ffi.Void>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_79 =
      __objc_msgSend_79Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<
                ffi.NativeFunction<
                  ffi.Long Function(
                    ffi.Pointer<objc.ObjCObject>,
                    ffi.Pointer<objc.ObjCObject>,
                    ffi.Pointer<ffi.Void>,
                  )
                >
              >,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_sortedArrayUsingSelector_1 = objc.registerName(
    "sortedArrayUsingSelector:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_80(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCSelector> comparator,
  ) {
    return __objc_msgSend_80(obj, sel, comparator);
  }

  late final __objc_msgSend_80Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_80 =
      __objc_msgSend_80Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_subarrayWithRange_1 = objc.registerName("subarrayWithRange:");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_81(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    _NSRange range,
  ) {
    return __objc_msgSend_81(obj, sel, range);
  }

  late final __objc_msgSend_81Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        _NSRange,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_81 =
      __objc_msgSend_81Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              _NSRange,
            )
          >();

  late final _class_NSError1 = objc.getClass("NSError");
  late final _sel_initWithDomain_code_userInfo_1 = objc.registerName(
    "initWithDomain:code:userInfo:",
  );
  instancetype _objc_msgSend_82(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> domain,
    int code,
    ffi.Pointer<objc.ObjCObject> dict,
  ) {
    return __objc_msgSend_82(obj, sel, domain, code, dict);
  }

  late final __objc_msgSend_82Ptr = _lookup<
    ffi.NativeFunction<
      instancetype Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Long,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_82 =
      __objc_msgSend_82Ptr
          .asFunction<
            instancetype Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              int,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_errorWithDomain_code_userInfo_1 = objc.registerName(
    "errorWithDomain:code:userInfo:",
  );
  late final _sel_domain1 = objc.registerName("domain");
  late final _sel_code1 = objc.registerName("code");
  int _objc_msgSend_83(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_83(obj, sel);
  }

  late final __objc_msgSend_83Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Long Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_83 =
      __objc_msgSend_83Ptr
          .asFunction<
            int Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_userInfo1 = objc.registerName("userInfo");
  late final _sel_localizedDescription1 = objc.registerName(
    "localizedDescription",
  );
  late final _sel_localizedFailureReason1 = objc.registerName(
    "localizedFailureReason",
  );
  late final _sel_localizedRecoverySuggestion1 = objc.registerName(
    "localizedRecoverySuggestion",
  );
  late final _sel_localizedRecoveryOptions1 = objc.registerName(
    "localizedRecoveryOptions",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_84(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_84(obj, sel);
  }

  late final __objc_msgSend_84Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_84 =
      __objc_msgSend_84Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_recoveryAttempter1 = objc.registerName("recoveryAttempter");
  late final _sel_helpAnchor1 = objc.registerName("helpAnchor");
  late final _sel_underlyingErrors1 = objc.registerName("underlyingErrors");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_85(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_85(obj, sel);
  }

  late final __objc_msgSend_85Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_85 =
      __objc_msgSend_85Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_setUserInfoValueProviderForDomain_provider_1 = objc
      .registerName("setUserInfoValueProviderForDomain:provider:");
  void _objc_msgSend_86(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> errorDomain,
    ffi.Pointer<objc.ObjCBlock> provider,
  ) {
    return __objc_msgSend_86(obj, sel, errorDomain, provider);
  }

  late final __objc_msgSend_86Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCBlock>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_86 =
      __objc_msgSend_86Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCBlock>,
            )
          >();

  late final _sel_userInfoValueProviderForDomain_1 = objc.registerName(
    "userInfoValueProviderForDomain:",
  );
  ffi.Pointer<objc.ObjCBlock> _objc_msgSend_87(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> err,
    ffi.Pointer<objc.ObjCObject> userInfoKey,
    ffi.Pointer<objc.ObjCObject> errorDomain,
  ) {
    return __objc_msgSend_87(obj, sel, err, userInfoKey, errorDomain);
  }

  late final __objc_msgSend_87Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCBlock> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_87 =
      __objc_msgSend_87Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCBlock> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_setKeys_triggerChangeNotificationsForDependentKey_1 = objc
      .registerName("setKeys:triggerChangeNotificationsForDependentKey:");
  void _objc_msgSend_88(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> keys,
    ffi.Pointer<objc.ObjCObject> dependentKey,
  ) {
    return __objc_msgSend_88(obj, sel, keys, dependentKey);
  }

  late final __objc_msgSend_88Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_88 =
      __objc_msgSend_88Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_classFallbacksForKeyedArchiver1 = objc.registerName(
    "classFallbacksForKeyedArchiver",
  );
  late final _sel_classForKeyedUnarchiver1 = objc.registerName(
    "classForKeyedUnarchiver",
  );
  late final _sel_writeToURL_error_1 = objc.registerName("writeToURL:error:");
  bool _objc_msgSend_89(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> url,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    return __objc_msgSend_89(obj, sel, url, error);
  }

  late final __objc_msgSend_89Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Bool Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_89 =
      __objc_msgSend_89Ptr
          .asFunction<
            bool Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
            )
          >();

  late final _sel_makeObjectsPerformSelector_1 = objc.registerName(
    "makeObjectsPerformSelector:",
  );
  late final _sel_makeObjectsPerformSelector_withObject_1 = objc.registerName(
    "makeObjectsPerformSelector:withObject:",
  );
  void _objc_msgSend_90(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCSelector> aSelector,
    ffi.Pointer<objc.ObjCObject> argument,
  ) {
    return __objc_msgSend_90(obj, sel, aSelector, argument);
  }

  late final __objc_msgSend_90Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_90 =
      __objc_msgSend_90Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _class_NSIndexSet1 = objc.getClass("NSIndexSet");
  late final _sel_indexSet1 = objc.registerName("indexSet");
  late final _sel_indexSetWithIndex_1 = objc.registerName("indexSetWithIndex:");
  late final _sel_indexSetWithIndexesInRange_1 = objc.registerName(
    "indexSetWithIndexesInRange:",
  );
  instancetype _objc_msgSend_91(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    _NSRange range,
  ) {
    return __objc_msgSend_91(obj, sel, range);
  }

  late final __objc_msgSend_91Ptr = _lookup<
    ffi.NativeFunction<
      instancetype Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        _NSRange,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_91 =
      __objc_msgSend_91Ptr
          .asFunction<
            instancetype Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              _NSRange,
            )
          >();

  late final _sel_initWithIndexesInRange_1 = objc.registerName(
    "initWithIndexesInRange:",
  );
  late final _sel_initWithIndexSet_1 = objc.registerName("initWithIndexSet:");
  instancetype _objc_msgSend_92(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> indexSet,
  ) {
    return __objc_msgSend_92(obj, sel, indexSet);
  }

  late final __objc_msgSend_92Ptr = _lookup<
    ffi.NativeFunction<
      instancetype Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_92 =
      __objc_msgSend_92Ptr
          .asFunction<
            instancetype Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_initWithIndex_1 = objc.registerName("initWithIndex:");
  late final _sel_isEqualToIndexSet_1 = objc.registerName("isEqualToIndexSet:");
  bool _objc_msgSend_93(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> indexSet,
  ) {
    return __objc_msgSend_93(obj, sel, indexSet);
  }

  late final __objc_msgSend_93Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Bool Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_93 =
      __objc_msgSend_93Ptr
          .asFunction<
            bool Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_firstIndex1 = objc.registerName("firstIndex");
  late final _sel_lastIndex1 = objc.registerName("lastIndex");
  late final _sel_indexGreaterThanIndex_1 = objc.registerName(
    "indexGreaterThanIndex:",
  );
  int _objc_msgSend_94(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int value,
  ) {
    return __objc_msgSend_94(obj, sel, value);
  }

  late final __objc_msgSend_94Ptr = _lookup<
    ffi.NativeFunction<
      ffi.UnsignedLong Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.UnsignedLong,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_94 =
      __objc_msgSend_94Ptr
          .asFunction<
            int Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
            )
          >();

  late final _sel_indexLessThanIndex_1 = objc.registerName(
    "indexLessThanIndex:",
  );
  late final _sel_indexGreaterThanOrEqualToIndex_1 = objc.registerName(
    "indexGreaterThanOrEqualToIndex:",
  );
  late final _sel_indexLessThanOrEqualToIndex_1 = objc.registerName(
    "indexLessThanOrEqualToIndex:",
  );
  late final _sel_getIndexes_maxCount_inIndexRange_1 = objc.registerName(
    "getIndexes:maxCount:inIndexRange:",
  );
  int _objc_msgSend_95(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<ffi.UnsignedLong> indexBuffer,
    int bufferSize,
    ffi.Pointer<_NSRange> range,
  ) {
    return __objc_msgSend_95(obj, sel, indexBuffer, bufferSize, range);
  }

  late final __objc_msgSend_95Ptr = _lookup<
    ffi.NativeFunction<
      ffi.UnsignedLong Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<ffi.UnsignedLong>,
        ffi.UnsignedLong,
        ffi.Pointer<_NSRange>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_95 =
      __objc_msgSend_95Ptr
          .asFunction<
            int Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<ffi.UnsignedLong>,
              int,
              ffi.Pointer<_NSRange>,
            )
          >();

  late final _sel_countOfIndexesInRange_1 = objc.registerName(
    "countOfIndexesInRange:",
  );
  int _objc_msgSend_96(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    _NSRange range,
  ) {
    return __objc_msgSend_96(obj, sel, range);
  }

  late final __objc_msgSend_96Ptr = _lookup<
    ffi.NativeFunction<
      ffi.UnsignedLong Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        _NSRange,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_96 =
      __objc_msgSend_96Ptr
          .asFunction<
            int Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              _NSRange,
            )
          >();

  late final _sel_containsIndex_1 = objc.registerName("containsIndex:");
  bool _objc_msgSend_97(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int value,
  ) {
    return __objc_msgSend_97(obj, sel, value);
  }

  late final __objc_msgSend_97Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Bool Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.UnsignedLong,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_97 =
      __objc_msgSend_97Ptr
          .asFunction<
            bool Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
            )
          >();

  late final _sel_containsIndexesInRange_1 = objc.registerName(
    "containsIndexesInRange:",
  );
  bool _objc_msgSend_98(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    _NSRange range,
  ) {
    return __objc_msgSend_98(obj, sel, range);
  }

  late final __objc_msgSend_98Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Bool Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        _NSRange,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_98 =
      __objc_msgSend_98Ptr
          .asFunction<
            bool Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              _NSRange,
            )
          >();

  late final _sel_containsIndexes_1 = objc.registerName("containsIndexes:");
  late final _sel_intersectsIndexesInRange_1 = objc.registerName(
    "intersectsIndexesInRange:",
  );
  late final _sel_enumerateIndexesUsingBlock_1 = objc.registerName(
    "enumerateIndexesUsingBlock:",
  );
  void _objc_msgSend_99(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCBlock> block,
  ) {
    return __objc_msgSend_99(obj, sel, block);
  }

  late final __objc_msgSend_99Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCBlock>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_99 =
      __objc_msgSend_99Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCBlock>,
            )
          >();

  late final _sel_enumerateIndexesWithOptions_usingBlock_1 = objc.registerName(
    "enumerateIndexesWithOptions:usingBlock:",
  );
  void _objc_msgSend_100(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int opts,
    ffi.Pointer<objc.ObjCBlock> block,
  ) {
    return __objc_msgSend_100(obj, sel, opts, block);
  }

  late final __objc_msgSend_100Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Int32,
        ffi.Pointer<objc.ObjCBlock>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_100 =
      __objc_msgSend_100Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
              ffi.Pointer<objc.ObjCBlock>,
            )
          >();

  late final _sel_enumerateIndexesInRange_options_usingBlock_1 = objc
      .registerName("enumerateIndexesInRange:options:usingBlock:");
  void _objc_msgSend_101(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    _NSRange range,
    int opts,
    ffi.Pointer<objc.ObjCBlock> block,
  ) {
    return __objc_msgSend_101(obj, sel, range, opts, block);
  }

  late final __objc_msgSend_101Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        _NSRange,
        ffi.Int32,
        ffi.Pointer<objc.ObjCBlock>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_101 =
      __objc_msgSend_101Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              _NSRange,
              int,
              ffi.Pointer<objc.ObjCBlock>,
            )
          >();

  late final _sel_indexPassingTest_1 = objc.registerName("indexPassingTest:");
  int _objc_msgSend_102(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCBlock> predicate,
  ) {
    return __objc_msgSend_102(obj, sel, predicate);
  }

  late final __objc_msgSend_102Ptr = _lookup<
    ffi.NativeFunction<
      ffi.UnsignedLong Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCBlock>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_102 =
      __objc_msgSend_102Ptr
          .asFunction<
            int Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCBlock>,
            )
          >();

  late final _sel_indexWithOptions_passingTest_1 = objc.registerName(
    "indexWithOptions:passingTest:",
  );
  int _objc_msgSend_103(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int opts,
    ffi.Pointer<objc.ObjCBlock> predicate,
  ) {
    return __objc_msgSend_103(obj, sel, opts, predicate);
  }

  late final __objc_msgSend_103Ptr = _lookup<
    ffi.NativeFunction<
      ffi.UnsignedLong Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Int32,
        ffi.Pointer<objc.ObjCBlock>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_103 =
      __objc_msgSend_103Ptr
          .asFunction<
            int Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
              ffi.Pointer<objc.ObjCBlock>,
            )
          >();

  late final _sel_indexInRange_options_passingTest_1 = objc.registerName(
    "indexInRange:options:passingTest:",
  );
  int _objc_msgSend_104(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    _NSRange range,
    int opts,
    ffi.Pointer<objc.ObjCBlock> predicate,
  ) {
    return __objc_msgSend_104(obj, sel, range, opts, predicate);
  }

  late final __objc_msgSend_104Ptr = _lookup<
    ffi.NativeFunction<
      ffi.UnsignedLong Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        _NSRange,
        ffi.Int32,
        ffi.Pointer<objc.ObjCBlock>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_104 =
      __objc_msgSend_104Ptr
          .asFunction<
            int Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              _NSRange,
              int,
              ffi.Pointer<objc.ObjCBlock>,
            )
          >();

  late final _sel_indexesPassingTest_1 = objc.registerName(
    "indexesPassingTest:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_105(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCBlock> predicate,
  ) {
    return __objc_msgSend_105(obj, sel, predicate);
  }

  late final __objc_msgSend_105Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCBlock>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_105 =
      __objc_msgSend_105Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCBlock>,
            )
          >();

  late final _sel_indexesWithOptions_passingTest_1 = objc.registerName(
    "indexesWithOptions:passingTest:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_106(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int opts,
    ffi.Pointer<objc.ObjCBlock> predicate,
  ) {
    return __objc_msgSend_106(obj, sel, opts, predicate);
  }

  late final __objc_msgSend_106Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Int32,
        ffi.Pointer<objc.ObjCBlock>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_106 =
      __objc_msgSend_106Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
              ffi.Pointer<objc.ObjCBlock>,
            )
          >();

  late final _sel_indexesInRange_options_passingTest_1 = objc.registerName(
    "indexesInRange:options:passingTest:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_107(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    _NSRange range,
    int opts,
    ffi.Pointer<objc.ObjCBlock> predicate,
  ) {
    return __objc_msgSend_107(obj, sel, range, opts, predicate);
  }

  late final __objc_msgSend_107Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        _NSRange,
        ffi.Int32,
        ffi.Pointer<objc.ObjCBlock>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_107 =
      __objc_msgSend_107Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              _NSRange,
              int,
              ffi.Pointer<objc.ObjCBlock>,
            )
          >();

  late final _sel_enumerateRangesUsingBlock_1 = objc.registerName(
    "enumerateRangesUsingBlock:",
  );
  void _objc_msgSend_108(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCBlock> block,
  ) {
    return __objc_msgSend_108(obj, sel, block);
  }

  late final __objc_msgSend_108Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCBlock>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_108 =
      __objc_msgSend_108Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCBlock>,
            )
          >();

  late final _sel_enumerateRangesWithOptions_usingBlock_1 = objc.registerName(
    "enumerateRangesWithOptions:usingBlock:",
  );
  void _objc_msgSend_109(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int opts,
    ffi.Pointer<objc.ObjCBlock> block,
  ) {
    return __objc_msgSend_109(obj, sel, opts, block);
  }

  late final __objc_msgSend_109Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Int32,
        ffi.Pointer<objc.ObjCBlock>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_109 =
      __objc_msgSend_109Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
              ffi.Pointer<objc.ObjCBlock>,
            )
          >();

  late final _sel_enumerateRangesInRange_options_usingBlock_1 = objc
      .registerName("enumerateRangesInRange:options:usingBlock:");
  void _objc_msgSend_110(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    _NSRange range,
    int opts,
    ffi.Pointer<objc.ObjCBlock> block,
  ) {
    return __objc_msgSend_110(obj, sel, range, opts, block);
  }

  late final __objc_msgSend_110Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        _NSRange,
        ffi.Int32,
        ffi.Pointer<objc.ObjCBlock>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_110 =
      __objc_msgSend_110Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              _NSRange,
              int,
              ffi.Pointer<objc.ObjCBlock>,
            )
          >();

  late final _sel_objectsAtIndexes_1 = objc.registerName("objectsAtIndexes:");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_111(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> indexes,
  ) {
    return __objc_msgSend_111(obj, sel, indexes);
  }

  late final __objc_msgSend_111Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_111 =
      __objc_msgSend_111Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_objectAtIndexedSubscript_1 = objc.registerName(
    "objectAtIndexedSubscript:",
  );
  late final _sel_enumerateObjectsUsingBlock_1 = objc.registerName(
    "enumerateObjectsUsingBlock:",
  );
  void _objc_msgSend_112(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCBlock> block,
  ) {
    return __objc_msgSend_112(obj, sel, block);
  }

  late final __objc_msgSend_112Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCBlock>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_112 =
      __objc_msgSend_112Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCBlock>,
            )
          >();

  late final _sel_enumerateObjectsWithOptions_usingBlock_1 = objc.registerName(
    "enumerateObjectsWithOptions:usingBlock:",
  );
  void _objc_msgSend_113(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int opts,
    ffi.Pointer<objc.ObjCBlock> block,
  ) {
    return __objc_msgSend_113(obj, sel, opts, block);
  }

  late final __objc_msgSend_113Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Int32,
        ffi.Pointer<objc.ObjCBlock>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_113 =
      __objc_msgSend_113Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
              ffi.Pointer<objc.ObjCBlock>,
            )
          >();

  late final _sel_enumerateObjectsAtIndexes_options_usingBlock_1 = objc
      .registerName("enumerateObjectsAtIndexes:options:usingBlock:");
  void _objc_msgSend_114(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> s,
    int opts,
    ffi.Pointer<objc.ObjCBlock> block,
  ) {
    return __objc_msgSend_114(obj, sel, s, opts, block);
  }

  late final __objc_msgSend_114Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Int32,
        ffi.Pointer<objc.ObjCBlock>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_114 =
      __objc_msgSend_114Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              int,
              ffi.Pointer<objc.ObjCBlock>,
            )
          >();

  late final _sel_indexOfObjectPassingTest_1 = objc.registerName(
    "indexOfObjectPassingTest:",
  );
  int _objc_msgSend_115(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCBlock> predicate,
  ) {
    return __objc_msgSend_115(obj, sel, predicate);
  }

  late final __objc_msgSend_115Ptr = _lookup<
    ffi.NativeFunction<
      ffi.UnsignedLong Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCBlock>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_115 =
      __objc_msgSend_115Ptr
          .asFunction<
            int Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCBlock>,
            )
          >();

  late final _sel_indexOfObjectWithOptions_passingTest_1 = objc.registerName(
    "indexOfObjectWithOptions:passingTest:",
  );
  int _objc_msgSend_116(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int opts,
    ffi.Pointer<objc.ObjCBlock> predicate,
  ) {
    return __objc_msgSend_116(obj, sel, opts, predicate);
  }

  late final __objc_msgSend_116Ptr = _lookup<
    ffi.NativeFunction<
      ffi.UnsignedLong Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Int32,
        ffi.Pointer<objc.ObjCBlock>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_116 =
      __objc_msgSend_116Ptr
          .asFunction<
            int Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
              ffi.Pointer<objc.ObjCBlock>,
            )
          >();

  late final _sel_indexOfObjectAtIndexes_options_passingTest_1 = objc
      .registerName("indexOfObjectAtIndexes:options:passingTest:");
  int _objc_msgSend_117(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> s,
    int opts,
    ffi.Pointer<objc.ObjCBlock> predicate,
  ) {
    return __objc_msgSend_117(obj, sel, s, opts, predicate);
  }

  late final __objc_msgSend_117Ptr = _lookup<
    ffi.NativeFunction<
      ffi.UnsignedLong Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Int32,
        ffi.Pointer<objc.ObjCBlock>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_117 =
      __objc_msgSend_117Ptr
          .asFunction<
            int Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              int,
              ffi.Pointer<objc.ObjCBlock>,
            )
          >();

  late final _sel_indexesOfObjectsPassingTest_1 = objc.registerName(
    "indexesOfObjectsPassingTest:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_118(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCBlock> predicate,
  ) {
    return __objc_msgSend_118(obj, sel, predicate);
  }

  late final __objc_msgSend_118Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCBlock>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_118 =
      __objc_msgSend_118Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCBlock>,
            )
          >();

  late final _sel_indexesOfObjectsWithOptions_passingTest_1 = objc.registerName(
    "indexesOfObjectsWithOptions:passingTest:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_119(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int opts,
    ffi.Pointer<objc.ObjCBlock> predicate,
  ) {
    return __objc_msgSend_119(obj, sel, opts, predicate);
  }

  late final __objc_msgSend_119Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Int32,
        ffi.Pointer<objc.ObjCBlock>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_119 =
      __objc_msgSend_119Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
              ffi.Pointer<objc.ObjCBlock>,
            )
          >();

  late final _sel_indexesOfObjectsAtIndexes_options_passingTest_1 = objc
      .registerName("indexesOfObjectsAtIndexes:options:passingTest:");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_120(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> s,
    int opts,
    ffi.Pointer<objc.ObjCBlock> predicate,
  ) {
    return __objc_msgSend_120(obj, sel, s, opts, predicate);
  }

  late final __objc_msgSend_120Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Int32,
        ffi.Pointer<objc.ObjCBlock>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_120 =
      __objc_msgSend_120Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              int,
              ffi.Pointer<objc.ObjCBlock>,
            )
          >();

  late final _sel_sortedArrayUsingComparator_1 = objc.registerName(
    "sortedArrayUsingComparator:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_121(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCBlock> cmptr,
  ) {
    return __objc_msgSend_121(obj, sel, cmptr);
  }

  late final __objc_msgSend_121Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCBlock>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_121 =
      __objc_msgSend_121Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCBlock>,
            )
          >();

  late final _sel_sortedArrayWithOptions_usingComparator_1 = objc.registerName(
    "sortedArrayWithOptions:usingComparator:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_122(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int opts,
    ffi.Pointer<objc.ObjCBlock> cmptr,
  ) {
    return __objc_msgSend_122(obj, sel, opts, cmptr);
  }

  late final __objc_msgSend_122Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Int32,
        ffi.Pointer<objc.ObjCBlock>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_122 =
      __objc_msgSend_122Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
              ffi.Pointer<objc.ObjCBlock>,
            )
          >();

  late final _sel_indexOfObject_inSortedRange_options_usingComparator_1 = objc
      .registerName("indexOfObject:inSortedRange:options:usingComparator:");
  int _objc_msgSend_123(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> obj1,
    _NSRange r,
    int opts,
    ffi.Pointer<objc.ObjCBlock> cmp,
  ) {
    return __objc_msgSend_123(obj, sel, obj1, r, opts, cmp);
  }

  late final __objc_msgSend_123Ptr = _lookup<
    ffi.NativeFunction<
      ffi.UnsignedLong Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        _NSRange,
        ffi.Int32,
        ffi.Pointer<objc.ObjCBlock>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_123 =
      __objc_msgSend_123Ptr
          .asFunction<
            int Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              _NSRange,
              int,
              ffi.Pointer<objc.ObjCBlock>,
            )
          >();

  late final _sel_array1 = objc.registerName("array");
  late final _sel_arrayWithObject_1 = objc.registerName("arrayWithObject:");
  instancetype _objc_msgSend_124(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> anObject,
  ) {
    return __objc_msgSend_124(obj, sel, anObject);
  }

  late final __objc_msgSend_124Ptr = _lookup<
    ffi.NativeFunction<
      instancetype Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_124 =
      __objc_msgSend_124Ptr
          .asFunction<
            instancetype Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_arrayWithObjects_count_1 = objc.registerName(
    "arrayWithObjects:count:",
  );
  late final _sel_arrayWithObjects_1 = objc.registerName("arrayWithObjects:");
  late final _sel_arrayWithArray_1 = objc.registerName("arrayWithArray:");
  instancetype _objc_msgSend_125(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> array,
  ) {
    return __objc_msgSend_125(obj, sel, array);
  }

  late final __objc_msgSend_125Ptr = _lookup<
    ffi.NativeFunction<
      instancetype Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_125 =
      __objc_msgSend_125Ptr
          .asFunction<
            instancetype Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_initWithObjects_1 = objc.registerName("initWithObjects:");
  late final _sel_initWithArray_1 = objc.registerName("initWithArray:");
  late final _sel_initWithArray_copyItems_1 = objc.registerName(
    "initWithArray:copyItems:",
  );
  instancetype _objc_msgSend_126(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> array,
    bool flag,
  ) {
    return __objc_msgSend_126(obj, sel, array, flag);
  }

  late final __objc_msgSend_126Ptr = _lookup<
    ffi.NativeFunction<
      instancetype Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Bool,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_126 =
      __objc_msgSend_126Ptr
          .asFunction<
            instancetype Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              bool,
            )
          >();

  late final _sel_initWithContentsOfURL_error_1 = objc.registerName(
    "initWithContentsOfURL:error:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_127(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> url,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    return __objc_msgSend_127(obj, sel, url, error);
  }

  late final __objc_msgSend_127Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_127 =
      __objc_msgSend_127Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
            )
          >();

  late final _sel_arrayWithContentsOfURL_error_1 = objc.registerName(
    "arrayWithContentsOfURL:error:",
  );
  late final _sel_differenceFromArray_withOptions_usingEquivalenceTest_1 = objc
      .registerName("differenceFromArray:withOptions:usingEquivalenceTest:");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_128(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> other,
    int options,
    ffi.Pointer<objc.ObjCBlock> block,
  ) {
    return __objc_msgSend_128(obj, sel, other, options, block);
  }

  late final __objc_msgSend_128Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Int32,
        ffi.Pointer<objc.ObjCBlock>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_128 =
      __objc_msgSend_128Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              int,
              ffi.Pointer<objc.ObjCBlock>,
            )
          >();

  late final _sel_differenceFromArray_withOptions_1 = objc.registerName(
    "differenceFromArray:withOptions:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_129(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> other,
    int options,
  ) {
    return __objc_msgSend_129(obj, sel, other, options);
  }

  late final __objc_msgSend_129Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Int32,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_129 =
      __objc_msgSend_129Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              int,
            )
          >();

  late final _sel_differenceFromArray_1 = objc.registerName(
    "differenceFromArray:",
  );
  late final _sel_arrayByApplyingDifference_1 = objc.registerName(
    "arrayByApplyingDifference:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_130(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> difference,
  ) {
    return __objc_msgSend_130(obj, sel, difference);
  }

  late final __objc_msgSend_130Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_130 =
      __objc_msgSend_130Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_getObjects_1 = objc.registerName("getObjects:");
  void _objc_msgSend_131(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> objects,
  ) {
    return __objc_msgSend_131(obj, sel, objects);
  }

  late final __objc_msgSend_131Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_131 =
      __objc_msgSend_131Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
            )
          >();

  late final _sel_arrayWithContentsOfFile_1 = objc.registerName(
    "arrayWithContentsOfFile:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_132(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> path,
  ) {
    return __objc_msgSend_132(obj, sel, path);
  }

  late final __objc_msgSend_132Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_132 =
      __objc_msgSend_132Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_arrayWithContentsOfURL_1 = objc.registerName(
    "arrayWithContentsOfURL:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_133(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> url,
  ) {
    return __objc_msgSend_133(obj, sel, url);
  }

  late final __objc_msgSend_133Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_133 =
      __objc_msgSend_133Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_initWithContentsOfFile_1 = objc.registerName(
    "initWithContentsOfFile:",
  );
  late final _sel_initWithContentsOfURL_1 = objc.registerName(
    "initWithContentsOfURL:",
  );
  late final _sel_writeToURL_atomically_1 = objc.registerName(
    "writeToURL:atomically:",
  );
  bool _objc_msgSend_134(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> url,
    bool atomically,
  ) {
    return __objc_msgSend_134(obj, sel, url, atomically);
  }

  late final __objc_msgSend_134Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Bool Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Bool,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_134 =
      __objc_msgSend_134Ptr
          .asFunction<
            bool Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              bool,
            )
          >();

  late final _sel_pathsMatchingExtensions_1 = objc.registerName(
    "pathsMatchingExtensions:",
  );
  late final _sel_valueForKey_1 = objc.registerName("valueForKey:");
  late final _sel_setValue_forKey_1 = objc.registerName("setValue:forKey:");
  void _objc_msgSend_135(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> value,
    ffi.Pointer<objc.ObjCObject> key,
  ) {
    return __objc_msgSend_135(obj, sel, value, key);
  }

  late final __objc_msgSend_135Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_135 =
      __objc_msgSend_135Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_addObserver_toObjectsAtIndexes_forKeyPath_options_context_1 =
      objc.registerName(
        "addObserver:toObjectsAtIndexes:forKeyPath:options:context:",
      );
  void _objc_msgSend_136(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> observer,
    ffi.Pointer<objc.ObjCObject> indexes,
    ffi.Pointer<objc.ObjCObject> keyPath,
    int options,
    ffi.Pointer<ffi.Void> context,
  ) {
    return __objc_msgSend_136(
      obj,
      sel,
      observer,
      indexes,
      keyPath,
      options,
      context,
    );
  }

  late final __objc_msgSend_136Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Int32,
        ffi.Pointer<ffi.Void>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_136 =
      __objc_msgSend_136Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
              int,
              ffi.Pointer<ffi.Void>,
            )
          >();

  late final _sel_removeObserver_fromObjectsAtIndexes_forKeyPath_context_1 =
      objc.registerName(
        "removeObserver:fromObjectsAtIndexes:forKeyPath:context:",
      );
  void _objc_msgSend_137(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> observer,
    ffi.Pointer<objc.ObjCObject> indexes,
    ffi.Pointer<objc.ObjCObject> keyPath,
    ffi.Pointer<ffi.Void> context,
  ) {
    return __objc_msgSend_137(obj, sel, observer, indexes, keyPath, context);
  }

  late final __objc_msgSend_137Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<ffi.Void>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_137 =
      __objc_msgSend_137Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<ffi.Void>,
            )
          >();

  late final _sel_removeObserver_fromObjectsAtIndexes_forKeyPath_1 = objc
      .registerName("removeObserver:fromObjectsAtIndexes:forKeyPath:");
  void _objc_msgSend_138(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> observer,
    ffi.Pointer<objc.ObjCObject> indexes,
    ffi.Pointer<objc.ObjCObject> keyPath,
  ) {
    return __objc_msgSend_138(obj, sel, observer, indexes, keyPath);
  }

  late final __objc_msgSend_138Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_138 =
      __objc_msgSend_138Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_addObserver_forKeyPath_options_context_1 = objc.registerName(
    "addObserver:forKeyPath:options:context:",
  );
  void _objc_msgSend_139(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> observer,
    ffi.Pointer<objc.ObjCObject> keyPath,
    int options,
    ffi.Pointer<ffi.Void> context,
  ) {
    return __objc_msgSend_139(obj, sel, observer, keyPath, options, context);
  }

  late final __objc_msgSend_139Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Int32,
        ffi.Pointer<ffi.Void>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_139 =
      __objc_msgSend_139Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
              int,
              ffi.Pointer<ffi.Void>,
            )
          >();

  late final _sel_removeObserver_forKeyPath_context_1 = objc.registerName(
    "removeObserver:forKeyPath:context:",
  );
  void _objc_msgSend_140(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> observer,
    ffi.Pointer<objc.ObjCObject> keyPath,
    ffi.Pointer<ffi.Void> context,
  ) {
    return __objc_msgSend_140(obj, sel, observer, keyPath, context);
  }

  late final __objc_msgSend_140Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<ffi.Void>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_140 =
      __objc_msgSend_140Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<ffi.Void>,
            )
          >();

  late final _sel_removeObserver_forKeyPath_1 = objc.registerName(
    "removeObserver:forKeyPath:",
  );
  void _objc_msgSend_141(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> observer,
    ffi.Pointer<objc.ObjCObject> keyPath,
  ) {
    return __objc_msgSend_141(obj, sel, observer, keyPath);
  }

  late final __objc_msgSend_141Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_141 =
      __objc_msgSend_141Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_sortedArrayUsingDescriptors_1 = objc.registerName(
    "sortedArrayUsingDescriptors:",
  );
  late final _class_NSPredicate1 = objc.getClass("NSPredicate");
  late final _sel_predicateWithFormat_argumentArray_1 = objc.registerName(
    "predicateWithFormat:argumentArray:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_142(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> predicateFormat,
    ffi.Pointer<objc.ObjCObject> arguments,
  ) {
    return __objc_msgSend_142(obj, sel, predicateFormat, arguments);
  }

  late final __objc_msgSend_142Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_142 =
      __objc_msgSend_142Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_predicateWithFormat_1 = objc.registerName(
    "predicateWithFormat:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_143(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> predicateFormat,
  ) {
    return __objc_msgSend_143(obj, sel, predicateFormat);
  }

  late final __objc_msgSend_143Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_143 =
      __objc_msgSend_143Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_predicateWithFormat_arguments_1 = objc.registerName(
    "predicateWithFormat:arguments:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_144(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> predicateFormat,
    ffi.Pointer<__va_list_tag> argList,
  ) {
    return __objc_msgSend_144(obj, sel, predicateFormat, argList);
  }

  late final __objc_msgSend_144Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<__va_list_tag>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_144 =
      __objc_msgSend_144Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<__va_list_tag>,
            )
          >();

  late final _sel_predicateFromMetadataQueryString_1 = objc.registerName(
    "predicateFromMetadataQueryString:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_145(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> queryString,
  ) {
    return __objc_msgSend_145(obj, sel, queryString);
  }

  late final __objc_msgSend_145Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_145 =
      __objc_msgSend_145Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_predicateWithValue_1 = objc.registerName(
    "predicateWithValue:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_146(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    bool value,
  ) {
    return __objc_msgSend_146(obj, sel, value);
  }

  late final __objc_msgSend_146Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Bool,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_146 =
      __objc_msgSend_146Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              bool,
            )
          >();

  late final _class_NSDictionary1 = objc.getClass("NSDictionary");
  late final _sel_objectForKey_1 = objc.registerName("objectForKey:");
  late final _sel_keyEnumerator1 = objc.registerName("keyEnumerator");
  late final _sel_initWithObjects_forKeys_count_1 = objc.registerName(
    "initWithObjects:forKeys:count:",
  );
  instancetype _objc_msgSend_147(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> objects,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> keys,
    int cnt,
  ) {
    return __objc_msgSend_147(obj, sel, objects, keys, cnt);
  }

  late final __objc_msgSend_147Ptr = _lookup<
    ffi.NativeFunction<
      instancetype Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
        ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
        ffi.UnsignedLong,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_147 =
      __objc_msgSend_147Ptr
          .asFunction<
            instancetype Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
              ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
              int,
            )
          >();

  late final _sel_allKeys1 = objc.registerName("allKeys");
  late final _sel_allKeysForObject_1 = objc.registerName("allKeysForObject:");
  late final _sel_allValues1 = objc.registerName("allValues");
  late final _sel_descriptionInStringsFileFormat1 = objc.registerName(
    "descriptionInStringsFileFormat",
  );
  late final _sel_isEqualToDictionary_1 = objc.registerName(
    "isEqualToDictionary:",
  );
  bool _objc_msgSend_148(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> otherDictionary,
  ) {
    return __objc_msgSend_148(obj, sel, otherDictionary);
  }

  late final __objc_msgSend_148Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Bool Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_148 =
      __objc_msgSend_148Ptr
          .asFunction<
            bool Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_objectsForKeys_notFoundMarker_1 = objc.registerName(
    "objectsForKeys:notFoundMarker:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_149(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> keys,
    ffi.Pointer<objc.ObjCObject> marker,
  ) {
    return __objc_msgSend_149(obj, sel, keys, marker);
  }

  late final __objc_msgSend_149Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_149 =
      __objc_msgSend_149Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_keysSortedByValueUsingSelector_1 = objc.registerName(
    "keysSortedByValueUsingSelector:",
  );
  late final _sel_getObjects_andKeys_count_1 = objc.registerName(
    "getObjects:andKeys:count:",
  );
  void _objc_msgSend_150(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> objects,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> keys,
    int count,
  ) {
    return __objc_msgSend_150(obj, sel, objects, keys, count);
  }

  late final __objc_msgSend_150Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
        ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
        ffi.UnsignedLong,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_150 =
      __objc_msgSend_150Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
              ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
              int,
            )
          >();

  late final _sel_objectForKeyedSubscript_1 = objc.registerName(
    "objectForKeyedSubscript:",
  );
  late final _sel_enumerateKeysAndObjectsUsingBlock_1 = objc.registerName(
    "enumerateKeysAndObjectsUsingBlock:",
  );
  void _objc_msgSend_151(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCBlock> block,
  ) {
    return __objc_msgSend_151(obj, sel, block);
  }

  late final __objc_msgSend_151Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCBlock>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_151 =
      __objc_msgSend_151Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCBlock>,
            )
          >();

  late final _sel_enumerateKeysAndObjectsWithOptions_usingBlock_1 = objc
      .registerName("enumerateKeysAndObjectsWithOptions:usingBlock:");
  void _objc_msgSend_152(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int opts,
    ffi.Pointer<objc.ObjCBlock> block,
  ) {
    return __objc_msgSend_152(obj, sel, opts, block);
  }

  late final __objc_msgSend_152Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Int32,
        ffi.Pointer<objc.ObjCBlock>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_152 =
      __objc_msgSend_152Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
              ffi.Pointer<objc.ObjCBlock>,
            )
          >();

  late final _sel_keysSortedByValueUsingComparator_1 = objc.registerName(
    "keysSortedByValueUsingComparator:",
  );
  late final _sel_keysSortedByValueWithOptions_usingComparator_1 = objc
      .registerName("keysSortedByValueWithOptions:usingComparator:");
  late final _sel_keysOfEntriesPassingTest_1 = objc.registerName(
    "keysOfEntriesPassingTest:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_153(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCBlock> predicate,
  ) {
    return __objc_msgSend_153(obj, sel, predicate);
  }

  late final __objc_msgSend_153Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCBlock>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_153 =
      __objc_msgSend_153Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCBlock>,
            )
          >();

  late final _sel_keysOfEntriesWithOptions_passingTest_1 = objc.registerName(
    "keysOfEntriesWithOptions:passingTest:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_154(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int opts,
    ffi.Pointer<objc.ObjCBlock> predicate,
  ) {
    return __objc_msgSend_154(obj, sel, opts, predicate);
  }

  late final __objc_msgSend_154Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Int32,
        ffi.Pointer<objc.ObjCBlock>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_154 =
      __objc_msgSend_154Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
              ffi.Pointer<objc.ObjCBlock>,
            )
          >();

  late final _sel_getObjects_andKeys_1 = objc.registerName(
    "getObjects:andKeys:",
  );
  void _objc_msgSend_155(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> objects,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> keys,
  ) {
    return __objc_msgSend_155(obj, sel, objects, keys);
  }

  late final __objc_msgSend_155Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
        ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_155 =
      __objc_msgSend_155Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
              ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
            )
          >();

  late final _sel_dictionaryWithContentsOfFile_1 = objc.registerName(
    "dictionaryWithContentsOfFile:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_156(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> path,
  ) {
    return __objc_msgSend_156(obj, sel, path);
  }

  late final __objc_msgSend_156Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_156 =
      __objc_msgSend_156Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_dictionaryWithContentsOfURL_1 = objc.registerName(
    "dictionaryWithContentsOfURL:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_157(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> url,
  ) {
    return __objc_msgSend_157(obj, sel, url);
  }

  late final __objc_msgSend_157Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_157 =
      __objc_msgSend_157Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_dictionary1 = objc.registerName("dictionary");
  late final _sel_dictionaryWithObject_forKey_1 = objc.registerName(
    "dictionaryWithObject:forKey:",
  );
  instancetype _objc_msgSend_158(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> object,
    ffi.Pointer<objc.ObjCObject> key,
  ) {
    return __objc_msgSend_158(obj, sel, object, key);
  }

  late final __objc_msgSend_158Ptr = _lookup<
    ffi.NativeFunction<
      instancetype Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_158 =
      __objc_msgSend_158Ptr
          .asFunction<
            instancetype Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_dictionaryWithObjects_forKeys_count_1 = objc.registerName(
    "dictionaryWithObjects:forKeys:count:",
  );
  late final _sel_dictionaryWithObjectsAndKeys_1 = objc.registerName(
    "dictionaryWithObjectsAndKeys:",
  );
  late final _sel_dictionaryWithDictionary_1 = objc.registerName(
    "dictionaryWithDictionary:",
  );
  instancetype _objc_msgSend_159(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> dict,
  ) {
    return __objc_msgSend_159(obj, sel, dict);
  }

  late final __objc_msgSend_159Ptr = _lookup<
    ffi.NativeFunction<
      instancetype Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_159 =
      __objc_msgSend_159Ptr
          .asFunction<
            instancetype Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_dictionaryWithObjects_forKeys_1 = objc.registerName(
    "dictionaryWithObjects:forKeys:",
  );
  instancetype _objc_msgSend_160(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> objects,
    ffi.Pointer<objc.ObjCObject> keys,
  ) {
    return __objc_msgSend_160(obj, sel, objects, keys);
  }

  late final __objc_msgSend_160Ptr = _lookup<
    ffi.NativeFunction<
      instancetype Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_160 =
      __objc_msgSend_160Ptr
          .asFunction<
            instancetype Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_initWithObjectsAndKeys_1 = objc.registerName(
    "initWithObjectsAndKeys:",
  );
  late final _sel_initWithDictionary_1 = objc.registerName(
    "initWithDictionary:",
  );
  late final _sel_initWithDictionary_copyItems_1 = objc.registerName(
    "initWithDictionary:copyItems:",
  );
  instancetype _objc_msgSend_161(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> otherDictionary,
    bool flag,
  ) {
    return __objc_msgSend_161(obj, sel, otherDictionary, flag);
  }

  late final __objc_msgSend_161Ptr = _lookup<
    ffi.NativeFunction<
      instancetype Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Bool,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_161 =
      __objc_msgSend_161Ptr
          .asFunction<
            instancetype Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              bool,
            )
          >();

  late final _sel_initWithObjects_forKeys_1 = objc.registerName(
    "initWithObjects:forKeys:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_162(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> url,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    return __objc_msgSend_162(obj, sel, url, error);
  }

  late final __objc_msgSend_162Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_162 =
      __objc_msgSend_162Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
            )
          >();

  late final _sel_dictionaryWithContentsOfURL_error_1 = objc.registerName(
    "dictionaryWithContentsOfURL:error:",
  );
  late final _sel_sharedKeySetForKeys_1 = objc.registerName(
    "sharedKeySetForKeys:",
  );
  late final _sel_countByEnumeratingWithState_objects_count_1 = objc
      .registerName("countByEnumeratingWithState:objects:count:");
  int _objc_msgSend_163(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<NSFastEnumerationState> state,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> buffer,
    int len,
  ) {
    return __objc_msgSend_163(obj, sel, state, buffer, len);
  }

  late final __objc_msgSend_163Ptr = _lookup<
    ffi.NativeFunction<
      ffi.UnsignedLong Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<NSFastEnumerationState>,
        ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
        ffi.UnsignedLong,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_163 =
      __objc_msgSend_163Ptr
          .asFunction<
            int Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<NSFastEnumerationState>,
              ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
              int,
            )
          >();

  late final _sel_fileSize1 = objc.registerName("fileSize");
  int _objc_msgSend_164(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_164(obj, sel);
  }

  late final __objc_msgSend_164Ptr = _lookup<
    ffi.NativeFunction<
      ffi.UnsignedLongLong Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_164 =
      __objc_msgSend_164Ptr
          .asFunction<
            int Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _class_NSDate1 = objc.getClass("NSDate");
  late final _sel_timeIntervalSinceReferenceDate1 = objc.registerName(
    "timeIntervalSinceReferenceDate",
  );
  double _objc_msgSend_165(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_165(obj, sel);
  }

  late final __objc_msgSend_165Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Double Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_165 =
      __objc_msgSend_165Ptr
          .asFunction<
            double Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  double _objc_msgSend_165_fpret(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_165_fpret(obj, sel);
  }

  late final __objc_msgSend_165_fpretPtr = _lookup<
    ffi.NativeFunction<
      ffi.Double Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend_fpret');
  late final __objc_msgSend_165_fpret =
      __objc_msgSend_165_fpretPtr
          .asFunction<
            double Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_initWithTimeIntervalSinceReferenceDate_1 = objc.registerName(
    "initWithTimeIntervalSinceReferenceDate:",
  );
  instancetype _objc_msgSend_166(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    double ti,
  ) {
    return __objc_msgSend_166(obj, sel, ti);
  }

  late final __objc_msgSend_166Ptr = _lookup<
    ffi.NativeFunction<
      instancetype Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Double,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_166 =
      __objc_msgSend_166Ptr
          .asFunction<
            instancetype Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              double,
            )
          >();

  late final _sel_timeIntervalSinceDate_1 = objc.registerName(
    "timeIntervalSinceDate:",
  );
  double _objc_msgSend_167(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> anotherDate,
  ) {
    return __objc_msgSend_167(obj, sel, anotherDate);
  }

  late final __objc_msgSend_167Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Double Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_167 =
      __objc_msgSend_167Ptr
          .asFunction<
            double Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  double _objc_msgSend_167_fpret(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> anotherDate,
  ) {
    return __objc_msgSend_167_fpret(obj, sel, anotherDate);
  }

  late final __objc_msgSend_167_fpretPtr = _lookup<
    ffi.NativeFunction<
      ffi.Double Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend_fpret');
  late final __objc_msgSend_167_fpret =
      __objc_msgSend_167_fpretPtr
          .asFunction<
            double Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_timeIntervalSinceNow1 = objc.registerName(
    "timeIntervalSinceNow",
  );
  late final _sel_timeIntervalSince19701 = objc.registerName(
    "timeIntervalSince1970",
  );
  late final _sel_addTimeInterval_1 = objc.registerName("addTimeInterval:");
  late final _sel_dateByAddingTimeInterval_1 = objc.registerName(
    "dateByAddingTimeInterval:",
  );
  late final _sel_earlierDate_1 = objc.registerName("earlierDate:");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_168(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> anotherDate,
  ) {
    return __objc_msgSend_168(obj, sel, anotherDate);
  }

  late final __objc_msgSend_168Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_168 =
      __objc_msgSend_168Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_laterDate_1 = objc.registerName("laterDate:");
  late final _sel_compare_1 = objc.registerName("compare:");
  int _objc_msgSend_169(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> other,
  ) {
    return __objc_msgSend_169(obj, sel, other);
  }

  late final __objc_msgSend_169Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Int32 Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_169 =
      __objc_msgSend_169Ptr
          .asFunction<
            int Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_isEqualToDate_1 = objc.registerName("isEqualToDate:");
  bool _objc_msgSend_170(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> otherDate,
  ) {
    return __objc_msgSend_170(obj, sel, otherDate);
  }

  late final __objc_msgSend_170Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Bool Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_170 =
      __objc_msgSend_170Ptr
          .asFunction<
            bool Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_date1 = objc.registerName("date");
  late final _sel_dateWithTimeIntervalSinceNow_1 = objc.registerName(
    "dateWithTimeIntervalSinceNow:",
  );
  late final _sel_dateWithTimeIntervalSinceReferenceDate_1 = objc.registerName(
    "dateWithTimeIntervalSinceReferenceDate:",
  );
  late final _sel_dateWithTimeIntervalSince1970_1 = objc.registerName(
    "dateWithTimeIntervalSince1970:",
  );
  late final _sel_dateWithTimeInterval_sinceDate_1 = objc.registerName(
    "dateWithTimeInterval:sinceDate:",
  );
  instancetype _objc_msgSend_171(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    double secsToBeAdded,
    ffi.Pointer<objc.ObjCObject> date,
  ) {
    return __objc_msgSend_171(obj, sel, secsToBeAdded, date);
  }

  late final __objc_msgSend_171Ptr = _lookup<
    ffi.NativeFunction<
      instancetype Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Double,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_171 =
      __objc_msgSend_171Ptr
          .asFunction<
            instancetype Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              double,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_distantFuture1 = objc.registerName("distantFuture");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_172(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_172(obj, sel);
  }

  late final __objc_msgSend_172Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_172 =
      __objc_msgSend_172Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_distantPast1 = objc.registerName("distantPast");
  late final _sel_now1 = objc.registerName("now");
  late final _sel_initWithTimeIntervalSinceNow_1 = objc.registerName(
    "initWithTimeIntervalSinceNow:",
  );
  late final _sel_initWithTimeIntervalSince1970_1 = objc.registerName(
    "initWithTimeIntervalSince1970:",
  );
  late final _sel_initWithTimeInterval_sinceDate_1 = objc.registerName(
    "initWithTimeInterval:sinceDate:",
  );
  late final _sel_dateWithNaturalLanguageString_locale_1 = objc.registerName(
    "dateWithNaturalLanguageString:locale:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_173(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> string,
    ffi.Pointer<objc.ObjCObject> locale,
  ) {
    return __objc_msgSend_173(obj, sel, string, locale);
  }

  late final __objc_msgSend_173Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_173 =
      __objc_msgSend_173Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_dateWithNaturalLanguageString_1 = objc.registerName(
    "dateWithNaturalLanguageString:",
  );
  late final _sel_dateWithString_1 = objc.registerName("dateWithString:");
  late final _class_NSCalendarDate1 = objc.getClass("NSCalendarDate");
  late final _sel_calendarDate1 = objc.registerName("calendarDate");
  late final _sel_dateWithString_calendarFormat_locale_1 = objc.registerName(
    "dateWithString:calendarFormat:locale:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_174(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> description,
    ffi.Pointer<objc.ObjCObject> format,
    ffi.Pointer<objc.ObjCObject> locale,
  ) {
    return __objc_msgSend_174(obj, sel, description, format, locale);
  }

  late final __objc_msgSend_174Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_174 =
      __objc_msgSend_174Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_dateWithString_calendarFormat_1 = objc.registerName(
    "dateWithString:calendarFormat:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_175(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> description,
    ffi.Pointer<objc.ObjCObject> format,
  ) {
    return __objc_msgSend_175(obj, sel, description, format);
  }

  late final __objc_msgSend_175Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_175 =
      __objc_msgSend_175Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _class_NSTimeZone1 = objc.getClass("NSTimeZone");
  late final _sel_name1 = objc.registerName("name");
  late final _sel_data1 = objc.registerName("data");
  late final _sel_secondsFromGMTForDate_1 = objc.registerName(
    "secondsFromGMTForDate:",
  );
  int _objc_msgSend_176(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> aDate,
  ) {
    return __objc_msgSend_176(obj, sel, aDate);
  }

  late final __objc_msgSend_176Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Long Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_176 =
      __objc_msgSend_176Ptr
          .asFunction<
            int Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_abbreviationForDate_1 = objc.registerName(
    "abbreviationForDate:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_177(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> aDate,
  ) {
    return __objc_msgSend_177(obj, sel, aDate);
  }

  late final __objc_msgSend_177Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_177 =
      __objc_msgSend_177Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_isDaylightSavingTimeForDate_1 = objc.registerName(
    "isDaylightSavingTimeForDate:",
  );
  late final _sel_daylightSavingTimeOffsetForDate_1 = objc.registerName(
    "daylightSavingTimeOffsetForDate:",
  );
  late final _sel_nextDaylightSavingTimeTransitionAfterDate_1 = objc
      .registerName("nextDaylightSavingTimeTransitionAfterDate:");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_178(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> aDate,
  ) {
    return __objc_msgSend_178(obj, sel, aDate);
  }

  late final __objc_msgSend_178Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_178 =
      __objc_msgSend_178Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_systemTimeZone1 = objc.registerName("systemTimeZone");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_179(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_179(obj, sel);
  }

  late final __objc_msgSend_179Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_179 =
      __objc_msgSend_179Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_resetSystemTimeZone1 = objc.registerName(
    "resetSystemTimeZone",
  );
  late final _sel_defaultTimeZone1 = objc.registerName("defaultTimeZone");
  late final _sel_setDefaultTimeZone_1 = objc.registerName(
    "setDefaultTimeZone:",
  );
  void _objc_msgSend_180(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> value,
  ) {
    return __objc_msgSend_180(obj, sel, value);
  }

  late final __objc_msgSend_180Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_180 =
      __objc_msgSend_180Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_localTimeZone1 = objc.registerName("localTimeZone");
  late final _sel_knownTimeZoneNames1 = objc.registerName("knownTimeZoneNames");
  late final _sel_abbreviationDictionary1 = objc.registerName(
    "abbreviationDictionary",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_181(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_181(obj, sel);
  }

  late final __objc_msgSend_181Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_181 =
      __objc_msgSend_181Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_setAbbreviationDictionary_1 = objc.registerName(
    "setAbbreviationDictionary:",
  );
  void _objc_msgSend_182(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> value,
  ) {
    return __objc_msgSend_182(obj, sel, value);
  }

  late final __objc_msgSend_182Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_182 =
      __objc_msgSend_182Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_timeZoneDataVersion1 = objc.registerName(
    "timeZoneDataVersion",
  );
  late final _sel_secondsFromGMT1 = objc.registerName("secondsFromGMT");
  late final _sel_abbreviation1 = objc.registerName("abbreviation");
  late final _sel_isDaylightSavingTime1 = objc.registerName(
    "isDaylightSavingTime",
  );
  late final _sel_daylightSavingTimeOffset1 = objc.registerName(
    "daylightSavingTimeOffset",
  );
  late final _sel_nextDaylightSavingTimeTransition1 = objc.registerName(
    "nextDaylightSavingTimeTransition",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_183(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_183(obj, sel);
  }

  late final __objc_msgSend_183Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_183 =
      __objc_msgSend_183Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_isEqualToTimeZone_1 = objc.registerName("isEqualToTimeZone:");
  bool _objc_msgSend_184(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> aTimeZone,
  ) {
    return __objc_msgSend_184(obj, sel, aTimeZone);
  }

  late final __objc_msgSend_184Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Bool Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_184 =
      __objc_msgSend_184Ptr
          .asFunction<
            bool Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _class_NSLocale1 = objc.getClass("NSLocale");
  late final _sel_displayNameForKey_value_1 = objc.registerName(
    "displayNameForKey:value:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_185(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> key,
    ffi.Pointer<objc.ObjCObject> value,
  ) {
    return __objc_msgSend_185(obj, sel, key, value);
  }

  late final __objc_msgSend_185Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_185 =
      __objc_msgSend_185Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_initWithLocaleIdentifier_1 = objc.registerName(
    "initWithLocaleIdentifier:",
  );
  late final _sel_localeIdentifier1 = objc.registerName("localeIdentifier");
  late final _sel_localizedStringForLocaleIdentifier_1 = objc.registerName(
    "localizedStringForLocaleIdentifier:",
  );
  late final _sel_languageCode1 = objc.registerName("languageCode");
  late final _sel_localizedStringForLanguageCode_1 = objc.registerName(
    "localizedStringForLanguageCode:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_186(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> languageCode,
  ) {
    return __objc_msgSend_186(obj, sel, languageCode);
  }

  late final __objc_msgSend_186Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_186 =
      __objc_msgSend_186Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_languageIdentifier1 = objc.registerName("languageIdentifier");
  late final _sel_countryCode1 = objc.registerName("countryCode");
  late final _sel_localizedStringForCountryCode_1 = objc.registerName(
    "localizedStringForCountryCode:",
  );
  late final _sel_regionCode1 = objc.registerName("regionCode");
  late final _sel_scriptCode1 = objc.registerName("scriptCode");
  late final _sel_localizedStringForScriptCode_1 = objc.registerName(
    "localizedStringForScriptCode:",
  );
  late final _sel_variantCode1 = objc.registerName("variantCode");
  late final _sel_localizedStringForVariantCode_1 = objc.registerName(
    "localizedStringForVariantCode:",
  );
  late final _class_NSCharacterSet1 = objc.getClass("NSCharacterSet");
  late final _sel_controlCharacterSet1 = objc.registerName(
    "controlCharacterSet",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_187(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_187(obj, sel);
  }

  late final __objc_msgSend_187Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_187 =
      __objc_msgSend_187Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_whitespaceCharacterSet1 = objc.registerName(
    "whitespaceCharacterSet",
  );
  late final _sel_whitespaceAndNewlineCharacterSet1 = objc.registerName(
    "whitespaceAndNewlineCharacterSet",
  );
  late final _sel_decimalDigitCharacterSet1 = objc.registerName(
    "decimalDigitCharacterSet",
  );
  late final _sel_letterCharacterSet1 = objc.registerName("letterCharacterSet");
  late final _sel_lowercaseLetterCharacterSet1 = objc.registerName(
    "lowercaseLetterCharacterSet",
  );
  late final _sel_uppercaseLetterCharacterSet1 = objc.registerName(
    "uppercaseLetterCharacterSet",
  );
  late final _sel_nonBaseCharacterSet1 = objc.registerName(
    "nonBaseCharacterSet",
  );
  late final _sel_alphanumericCharacterSet1 = objc.registerName(
    "alphanumericCharacterSet",
  );
  late final _sel_decomposableCharacterSet1 = objc.registerName(
    "decomposableCharacterSet",
  );
  late final _sel_illegalCharacterSet1 = objc.registerName(
    "illegalCharacterSet",
  );
  late final _sel_punctuationCharacterSet1 = objc.registerName(
    "punctuationCharacterSet",
  );
  late final _sel_capitalizedLetterCharacterSet1 = objc.registerName(
    "capitalizedLetterCharacterSet",
  );
  late final _sel_symbolCharacterSet1 = objc.registerName("symbolCharacterSet");
  late final _sel_newlineCharacterSet1 = objc.registerName(
    "newlineCharacterSet",
  );
  late final _sel_characterSetWithRange_1 = objc.registerName(
    "characterSetWithRange:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_188(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    _NSRange aRange,
  ) {
    return __objc_msgSend_188(obj, sel, aRange);
  }

  late final __objc_msgSend_188Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        _NSRange,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_188 =
      __objc_msgSend_188Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              _NSRange,
            )
          >();

  late final _sel_characterSetWithCharactersInString_1 = objc.registerName(
    "characterSetWithCharactersInString:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_189(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> aString,
  ) {
    return __objc_msgSend_189(obj, sel, aString);
  }

  late final __objc_msgSend_189Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_189 =
      __objc_msgSend_189Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_characterSetWithBitmapRepresentation_1 = objc.registerName(
    "characterSetWithBitmapRepresentation:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_190(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> data,
  ) {
    return __objc_msgSend_190(obj, sel, data);
  }

  late final __objc_msgSend_190Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_190 =
      __objc_msgSend_190Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_characterSetWithContentsOfFile_1 = objc.registerName(
    "characterSetWithContentsOfFile:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_191(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> fName,
  ) {
    return __objc_msgSend_191(obj, sel, fName);
  }

  late final __objc_msgSend_191Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_191 =
      __objc_msgSend_191Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  instancetype _objc_msgSend_192(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> coder,
  ) {
    return __objc_msgSend_192(obj, sel, coder);
  }

  late final __objc_msgSend_192Ptr = _lookup<
    ffi.NativeFunction<
      instancetype Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_192 =
      __objc_msgSend_192Ptr
          .asFunction<
            instancetype Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_characterIsMember_1 = objc.registerName("characterIsMember:");
  bool _objc_msgSend_193(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int aCharacter,
  ) {
    return __objc_msgSend_193(obj, sel, aCharacter);
  }

  late final __objc_msgSend_193Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Bool Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.UnsignedShort,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_193 =
      __objc_msgSend_193Ptr
          .asFunction<
            bool Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
            )
          >();

  late final _sel_bitmapRepresentation1 = objc.registerName(
    "bitmapRepresentation",
  );
  late final _sel_invertedSet1 = objc.registerName("invertedSet");
  late final _sel_longCharacterIsMember_1 = objc.registerName(
    "longCharacterIsMember:",
  );
  bool _objc_msgSend_194(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int theLongChar,
  ) {
    return __objc_msgSend_194(obj, sel, theLongChar);
  }

  late final __objc_msgSend_194Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Bool Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.UnsignedInt,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_194 =
      __objc_msgSend_194Ptr
          .asFunction<
            bool Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
            )
          >();

  late final _sel_isSupersetOfSet_1 = objc.registerName("isSupersetOfSet:");
  bool _objc_msgSend_195(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> theOtherSet,
  ) {
    return __objc_msgSend_195(obj, sel, theOtherSet);
  }

  late final __objc_msgSend_195Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Bool Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_195 =
      __objc_msgSend_195Ptr
          .asFunction<
            bool Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_hasMemberInPlane_1 = objc.registerName("hasMemberInPlane:");
  bool _objc_msgSend_196(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int thePlane,
  ) {
    return __objc_msgSend_196(obj, sel, thePlane);
  }

  late final __objc_msgSend_196Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Bool Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Uint8,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_196 =
      __objc_msgSend_196Ptr
          .asFunction<
            bool Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
            )
          >();

  late final _sel_URLUserAllowedCharacterSet1 = objc.registerName(
    "URLUserAllowedCharacterSet",
  );
  late final _sel_URLPasswordAllowedCharacterSet1 = objc.registerName(
    "URLPasswordAllowedCharacterSet",
  );
  late final _sel_URLHostAllowedCharacterSet1 = objc.registerName(
    "URLHostAllowedCharacterSet",
  );
  late final _sel_URLPathAllowedCharacterSet1 = objc.registerName(
    "URLPathAllowedCharacterSet",
  );
  late final _sel_URLQueryAllowedCharacterSet1 = objc.registerName(
    "URLQueryAllowedCharacterSet",
  );
  late final _sel_URLFragmentAllowedCharacterSet1 = objc.registerName(
    "URLFragmentAllowedCharacterSet",
  );
  late final _sel_exemplarCharacterSet1 = objc.registerName(
    "exemplarCharacterSet",
  );
  late final _sel_calendarIdentifier1 = objc.registerName("calendarIdentifier");
  late final _sel_localizedStringForCalendarIdentifier_1 = objc.registerName(
    "localizedStringForCalendarIdentifier:",
  );
  late final _sel_collationIdentifier1 = objc.registerName(
    "collationIdentifier",
  );
  late final _sel_localizedStringForCollationIdentifier_1 = objc.registerName(
    "localizedStringForCollationIdentifier:",
  );
  late final _sel_usesMetricSystem1 = objc.registerName("usesMetricSystem");
  late final _sel_decimalSeparator1 = objc.registerName("decimalSeparator");
  late final _sel_groupingSeparator1 = objc.registerName("groupingSeparator");
  late final _sel_currencySymbol1 = objc.registerName("currencySymbol");
  late final _sel_currencyCode1 = objc.registerName("currencyCode");
  late final _sel_localizedStringForCurrencyCode_1 = objc.registerName(
    "localizedStringForCurrencyCode:",
  );
  late final _sel_collatorIdentifier1 = objc.registerName("collatorIdentifier");
  late final _sel_localizedStringForCollatorIdentifier_1 = objc.registerName(
    "localizedStringForCollatorIdentifier:",
  );
  late final _sel_quotationBeginDelimiter1 = objc.registerName(
    "quotationBeginDelimiter",
  );
  late final _sel_quotationEndDelimiter1 = objc.registerName(
    "quotationEndDelimiter",
  );
  late final _sel_alternateQuotationBeginDelimiter1 = objc.registerName(
    "alternateQuotationBeginDelimiter",
  );
  late final _sel_alternateQuotationEndDelimiter1 = objc.registerName(
    "alternateQuotationEndDelimiter",
  );
  late final _sel_autoupdatingCurrentLocale1 = objc.registerName(
    "autoupdatingCurrentLocale",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_197(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_197(obj, sel);
  }

  late final __objc_msgSend_197Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_197 =
      __objc_msgSend_197Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_currentLocale1 = objc.registerName("currentLocale");
  late final _sel_systemLocale1 = objc.registerName("systemLocale");
  late final _sel_localeWithLocaleIdentifier_1 = objc.registerName(
    "localeWithLocaleIdentifier:",
  );
  late final _sel_availableLocaleIdentifiers1 = objc.registerName(
    "availableLocaleIdentifiers",
  );
  late final _sel_ISOLanguageCodes1 = objc.registerName("ISOLanguageCodes");
  late final _sel_ISOCountryCodes1 = objc.registerName("ISOCountryCodes");
  late final _sel_ISOCurrencyCodes1 = objc.registerName("ISOCurrencyCodes");
  late final _sel_commonISOCurrencyCodes1 = objc.registerName(
    "commonISOCurrencyCodes",
  );
  late final _sel_preferredLanguages1 = objc.registerName("preferredLanguages");
  late final _sel_componentsFromLocaleIdentifier_1 = objc.registerName(
    "componentsFromLocaleIdentifier:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_198(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> string,
  ) {
    return __objc_msgSend_198(obj, sel, string);
  }

  late final __objc_msgSend_198Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_198 =
      __objc_msgSend_198Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_localeIdentifierFromComponents_1 = objc.registerName(
    "localeIdentifierFromComponents:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_199(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> dict,
  ) {
    return __objc_msgSend_199(obj, sel, dict);
  }

  late final __objc_msgSend_199Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_199 =
      __objc_msgSend_199Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_canonicalLocaleIdentifierFromString_1 = objc.registerName(
    "canonicalLocaleIdentifierFromString:",
  );
  late final _sel_canonicalLanguageIdentifierFromString_1 = objc.registerName(
    "canonicalLanguageIdentifierFromString:",
  );
  late final _sel_localeIdentifierFromWindowsLocaleCode_1 = objc.registerName(
    "localeIdentifierFromWindowsLocaleCode:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_200(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int lcid,
  ) {
    return __objc_msgSend_200(obj, sel, lcid);
  }

  late final __objc_msgSend_200Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Uint32,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_200 =
      __objc_msgSend_200Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
            )
          >();

  late final _sel_windowsLocaleCodeFromLocaleIdentifier_1 = objc.registerName(
    "windowsLocaleCodeFromLocaleIdentifier:",
  );
  int _objc_msgSend_201(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> localeIdentifier,
  ) {
    return __objc_msgSend_201(obj, sel, localeIdentifier);
  }

  late final __objc_msgSend_201Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Uint32 Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_201 =
      __objc_msgSend_201Ptr
          .asFunction<
            int Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_characterDirectionForLanguage_1 = objc.registerName(
    "characterDirectionForLanguage:",
  );
  int _objc_msgSend_202(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> isoLangCode,
  ) {
    return __objc_msgSend_202(obj, sel, isoLangCode);
  }

  late final __objc_msgSend_202Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Int32 Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_202 =
      __objc_msgSend_202Ptr
          .asFunction<
            int Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_lineDirectionForLanguage_1 = objc.registerName(
    "lineDirectionForLanguage:",
  );
  late final _sel_localizedName_locale_1 = objc.registerName(
    "localizedName:locale:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_203(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int style,
    ffi.Pointer<objc.ObjCObject> locale,
  ) {
    return __objc_msgSend_203(obj, sel, style, locale);
  }

  late final __objc_msgSend_203Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Int32,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_203 =
      __objc_msgSend_203Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_timeZoneWithName_1 = objc.registerName("timeZoneWithName:");
  late final _sel_timeZoneWithName_data_1 = objc.registerName(
    "timeZoneWithName:data:",
  );
  instancetype _objc_msgSend_204(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> tzName,
    ffi.Pointer<objc.ObjCObject> aData,
  ) {
    return __objc_msgSend_204(obj, sel, tzName, aData);
  }

  late final __objc_msgSend_204Ptr = _lookup<
    ffi.NativeFunction<
      instancetype Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_204 =
      __objc_msgSend_204Ptr
          .asFunction<
            instancetype Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_initWithName_1 = objc.registerName("initWithName:");
  late final _sel_initWithName_data_1 = objc.registerName("initWithName:data:");
  late final _sel_timeZoneForSecondsFromGMT_1 = objc.registerName(
    "timeZoneForSecondsFromGMT:",
  );
  instancetype _objc_msgSend_205(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int seconds,
  ) {
    return __objc_msgSend_205(obj, sel, seconds);
  }

  late final __objc_msgSend_205Ptr = _lookup<
    ffi.NativeFunction<
      instancetype Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Long,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_205 =
      __objc_msgSend_205Ptr
          .asFunction<
            instancetype Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
            )
          >();

  late final _sel_timeZoneWithAbbreviation_1 = objc.registerName(
    "timeZoneWithAbbreviation:",
  );
  late final _sel_dateWithYear_month_day_hour_minute_second_timeZone_1 = objc
      .registerName("dateWithYear:month:day:hour:minute:second:timeZone:");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_206(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int year,
    int month,
    int day,
    int hour,
    int minute,
    int second,
    ffi.Pointer<objc.ObjCObject> aTimeZone,
  ) {
    return __objc_msgSend_206(
      obj,
      sel,
      year,
      month,
      day,
      hour,
      minute,
      second,
      aTimeZone,
    );
  }

  late final __objc_msgSend_206Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Long,
        ffi.UnsignedLong,
        ffi.UnsignedLong,
        ffi.UnsignedLong,
        ffi.UnsignedLong,
        ffi.UnsignedLong,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_206 =
      __objc_msgSend_206Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
              int,
              int,
              int,
              int,
              int,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_dateByAddingYears_months_days_hours_minutes_seconds_1 = objc
      .registerName("dateByAddingYears:months:days:hours:minutes:seconds:");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_207(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int year,
    int month,
    int day,
    int hour,
    int minute,
    int second,
  ) {
    return __objc_msgSend_207(obj, sel, year, month, day, hour, minute, second);
  }

  late final __objc_msgSend_207Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Long,
        ffi.Long,
        ffi.Long,
        ffi.Long,
        ffi.Long,
        ffi.Long,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_207 =
      __objc_msgSend_207Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
              int,
              int,
              int,
              int,
              int,
            )
          >();

  late final _sel_dayOfCommonEra1 = objc.registerName("dayOfCommonEra");
  late final _sel_dayOfMonth1 = objc.registerName("dayOfMonth");
  late final _sel_dayOfWeek1 = objc.registerName("dayOfWeek");
  late final _sel_dayOfYear1 = objc.registerName("dayOfYear");
  late final _sel_hourOfDay1 = objc.registerName("hourOfDay");
  late final _sel_minuteOfHour1 = objc.registerName("minuteOfHour");
  late final _sel_monthOfYear1 = objc.registerName("monthOfYear");
  late final _sel_secondOfMinute1 = objc.registerName("secondOfMinute");
  late final _sel_yearOfCommonEra1 = objc.registerName("yearOfCommonEra");
  late final _sel_calendarFormat1 = objc.registerName("calendarFormat");
  late final _sel_descriptionWithCalendarFormat_locale_1 = objc.registerName(
    "descriptionWithCalendarFormat:locale:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_208(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> format,
    ffi.Pointer<objc.ObjCObject> locale,
  ) {
    return __objc_msgSend_208(obj, sel, format, locale);
  }

  late final __objc_msgSend_208Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_208 =
      __objc_msgSend_208Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_descriptionWithCalendarFormat_1 = objc.registerName(
    "descriptionWithCalendarFormat:",
  );
  late final _sel_timeZone1 = objc.registerName("timeZone");
  late final _sel_initWithString_calendarFormat_locale_1 = objc.registerName(
    "initWithString:calendarFormat:locale:",
  );
  late final _sel_initWithString_calendarFormat_1 = objc.registerName(
    "initWithString:calendarFormat:",
  );
  late final _sel_initWithYear_month_day_hour_minute_second_timeZone_1 = objc
      .registerName("initWithYear:month:day:hour:minute:second:timeZone:");
  late final _sel_setCalendarFormat_1 = objc.registerName("setCalendarFormat:");
  void _objc_msgSend_209(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> format,
  ) {
    return __objc_msgSend_209(obj, sel, format);
  }

  late final __objc_msgSend_209Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_209 =
      __objc_msgSend_209Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_setTimeZone_1 = objc.registerName("setTimeZone:");
  void _objc_msgSend_210(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> aTimeZone,
  ) {
    return __objc_msgSend_210(obj, sel, aTimeZone);
  }

  late final __objc_msgSend_210Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_210 =
      __objc_msgSend_210Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_years_months_days_hours_minutes_seconds_sinceDate_1 = objc
      .registerName("years:months:days:hours:minutes:seconds:sinceDate:");
  void _objc_msgSend_211(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<ffi.Long> yp,
    ffi.Pointer<ffi.Long> mop,
    ffi.Pointer<ffi.Long> dp,
    ffi.Pointer<ffi.Long> hp,
    ffi.Pointer<ffi.Long> mip,
    ffi.Pointer<ffi.Long> sp,
    ffi.Pointer<objc.ObjCObject> date,
  ) {
    return __objc_msgSend_211(obj, sel, yp, mop, dp, hp, mip, sp, date);
  }

  late final __objc_msgSend_211Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<ffi.Long>,
        ffi.Pointer<ffi.Long>,
        ffi.Pointer<ffi.Long>,
        ffi.Pointer<ffi.Long>,
        ffi.Pointer<ffi.Long>,
        ffi.Pointer<ffi.Long>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_211 =
      __objc_msgSend_211Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<ffi.Long>,
              ffi.Pointer<ffi.Long>,
              ffi.Pointer<ffi.Long>,
              ffi.Pointer<ffi.Long>,
              ffi.Pointer<ffi.Long>,
              ffi.Pointer<ffi.Long>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_dateWithCalendarFormat_timeZone_1 = objc.registerName(
    "dateWithCalendarFormat:timeZone:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_212(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> format,
    ffi.Pointer<objc.ObjCObject> aTimeZone,
  ) {
    return __objc_msgSend_212(obj, sel, format, aTimeZone);
  }

  late final __objc_msgSend_212Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_212 =
      __objc_msgSend_212Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_descriptionWithCalendarFormat_timeZone_locale_1 = objc
      .registerName("descriptionWithCalendarFormat:timeZone:locale:");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_213(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> format,
    ffi.Pointer<objc.ObjCObject> aTimeZone,
    ffi.Pointer<objc.ObjCObject> locale,
  ) {
    return __objc_msgSend_213(obj, sel, format, aTimeZone, locale);
  }

  late final __objc_msgSend_213Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_213 =
      __objc_msgSend_213Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_fileModificationDate1 = objc.registerName(
    "fileModificationDate",
  );
  late final _sel_fileType1 = objc.registerName("fileType");
  late final _sel_filePosixPermissions1 = objc.registerName(
    "filePosixPermissions",
  );
  late final _sel_fileOwnerAccountName1 = objc.registerName(
    "fileOwnerAccountName",
  );
  late final _sel_fileGroupOwnerAccountName1 = objc.registerName(
    "fileGroupOwnerAccountName",
  );
  late final _sel_fileSystemNumber1 = objc.registerName("fileSystemNumber");
  late final _sel_fileSystemFileNumber1 = objc.registerName(
    "fileSystemFileNumber",
  );
  late final _sel_fileExtensionHidden1 = objc.registerName(
    "fileExtensionHidden",
  );
  late final _sel_fileHFSCreatorCode1 = objc.registerName("fileHFSCreatorCode");
  int _objc_msgSend_214(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_214(obj, sel);
  }

  late final __objc_msgSend_214Ptr = _lookup<
    ffi.NativeFunction<
      ffi.UnsignedInt Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_214 =
      __objc_msgSend_214Ptr
          .asFunction<
            int Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_fileHFSTypeCode1 = objc.registerName("fileHFSTypeCode");
  late final _sel_fileIsImmutable1 = objc.registerName("fileIsImmutable");
  late final _sel_fileIsAppendOnly1 = objc.registerName("fileIsAppendOnly");
  late final _sel_fileCreationDate1 = objc.registerName("fileCreationDate");
  late final _sel_fileOwnerAccountID1 = objc.registerName("fileOwnerAccountID");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_215(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_215(obj, sel);
  }

  late final __objc_msgSend_215Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_215 =
      __objc_msgSend_215Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_fileGroupOwnerAccountID1 = objc.registerName(
    "fileGroupOwnerAccountID",
  );
  late final _sel_predicateWithBlock_1 = objc.registerName(
    "predicateWithBlock:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_216(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCBlock> block,
  ) {
    return __objc_msgSend_216(obj, sel, block);
  }

  late final __objc_msgSend_216Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCBlock>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_216 =
      __objc_msgSend_216Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCBlock>,
            )
          >();

  late final _sel_predicateFormat1 = objc.registerName("predicateFormat");
  late final _sel_predicateWithSubstitutionVariables_1 = objc.registerName(
    "predicateWithSubstitutionVariables:",
  );
  late final _sel_evaluateWithObject_1 = objc.registerName(
    "evaluateWithObject:",
  );
  bool _objc_msgSend_217(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> object,
  ) {
    return __objc_msgSend_217(obj, sel, object);
  }

  late final __objc_msgSend_217Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Bool Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_217 =
      __objc_msgSend_217Ptr
          .asFunction<
            bool Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_evaluateWithObject_substitutionVariables_1 = objc
      .registerName("evaluateWithObject:substitutionVariables:");
  bool _objc_msgSend_218(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> object,
    ffi.Pointer<objc.ObjCObject> bindings,
  ) {
    return __objc_msgSend_218(obj, sel, object, bindings);
  }

  late final __objc_msgSend_218Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Bool Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_218 =
      __objc_msgSend_218Ptr
          .asFunction<
            bool Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_allowEvaluation1 = objc.registerName("allowEvaluation");
  late final _sel_filteredArrayUsingPredicate_1 = objc.registerName(
    "filteredArrayUsingPredicate:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_219(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> predicate,
  ) {
    return __objc_msgSend_219(obj, sel, predicate);
  }

  late final __objc_msgSend_219Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_219 =
      __objc_msgSend_219Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_initWithChar_1 = objc.registerName("initWithChar:");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_220(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int value,
  ) {
    return __objc_msgSend_220(obj, sel, value);
  }

  late final __objc_msgSend_220Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Char,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_220 =
      __objc_msgSend_220Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
            )
          >();

  late final _sel_initWithUnsignedChar_1 = objc.registerName(
    "initWithUnsignedChar:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_221(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int value,
  ) {
    return __objc_msgSend_221(obj, sel, value);
  }

  late final __objc_msgSend_221Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.UnsignedChar,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_221 =
      __objc_msgSend_221Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
            )
          >();

  late final _sel_initWithShort_1 = objc.registerName("initWithShort:");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_222(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int value,
  ) {
    return __objc_msgSend_222(obj, sel, value);
  }

  late final __objc_msgSend_222Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Short,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_222 =
      __objc_msgSend_222Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
            )
          >();

  late final _sel_initWithUnsignedShort_1 = objc.registerName(
    "initWithUnsignedShort:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_223(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int value,
  ) {
    return __objc_msgSend_223(obj, sel, value);
  }

  late final __objc_msgSend_223Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.UnsignedShort,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_223 =
      __objc_msgSend_223Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
            )
          >();

  late final _sel_initWithInt_1 = objc.registerName("initWithInt:");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_224(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int value,
  ) {
    return __objc_msgSend_224(obj, sel, value);
  }

  late final __objc_msgSend_224Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Int,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_224 =
      __objc_msgSend_224Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
            )
          >();

  late final _sel_initWithUnsignedInt_1 = objc.registerName(
    "initWithUnsignedInt:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_225(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int value,
  ) {
    return __objc_msgSend_225(obj, sel, value);
  }

  late final __objc_msgSend_225Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.UnsignedInt,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_225 =
      __objc_msgSend_225Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
            )
          >();

  late final _sel_initWithLong_1 = objc.registerName("initWithLong:");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_226(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int value,
  ) {
    return __objc_msgSend_226(obj, sel, value);
  }

  late final __objc_msgSend_226Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Long,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_226 =
      __objc_msgSend_226Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
            )
          >();

  late final _sel_initWithUnsignedLong_1 = objc.registerName(
    "initWithUnsignedLong:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_227(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int value,
  ) {
    return __objc_msgSend_227(obj, sel, value);
  }

  late final __objc_msgSend_227Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.UnsignedLong,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_227 =
      __objc_msgSend_227Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
            )
          >();

  late final _sel_initWithLongLong_1 = objc.registerName("initWithLongLong:");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_228(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int value,
  ) {
    return __objc_msgSend_228(obj, sel, value);
  }

  late final __objc_msgSend_228Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.LongLong,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_228 =
      __objc_msgSend_228Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
            )
          >();

  late final _sel_initWithUnsignedLongLong_1 = objc.registerName(
    "initWithUnsignedLongLong:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_229(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int value,
  ) {
    return __objc_msgSend_229(obj, sel, value);
  }

  late final __objc_msgSend_229Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.UnsignedLongLong,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_229 =
      __objc_msgSend_229Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
            )
          >();

  late final _sel_initWithFloat_1 = objc.registerName("initWithFloat:");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_230(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    double value,
  ) {
    return __objc_msgSend_230(obj, sel, value);
  }

  late final __objc_msgSend_230Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Float,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_230 =
      __objc_msgSend_230Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              double,
            )
          >();

  late final _sel_initWithDouble_1 = objc.registerName("initWithDouble:");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_231(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    double value,
  ) {
    return __objc_msgSend_231(obj, sel, value);
  }

  late final __objc_msgSend_231Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Double,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_231 =
      __objc_msgSend_231Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              double,
            )
          >();

  late final _sel_initWithBool_1 = objc.registerName("initWithBool:");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_232(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    bool value,
  ) {
    return __objc_msgSend_232(obj, sel, value);
  }

  late final __objc_msgSend_232Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Bool,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_232 =
      __objc_msgSend_232Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              bool,
            )
          >();

  late final _sel_initWithInteger_1 = objc.registerName("initWithInteger:");
  late final _sel_initWithUnsignedInteger_1 = objc.registerName(
    "initWithUnsignedInteger:",
  );
  late final _sel_charValue1 = objc.registerName("charValue");
  int _objc_msgSend_233(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_233(obj, sel);
  }

  late final __objc_msgSend_233Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Char Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_233 =
      __objc_msgSend_233Ptr
          .asFunction<
            int Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_unsignedCharValue1 = objc.registerName("unsignedCharValue");
  int _objc_msgSend_234(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_234(obj, sel);
  }

  late final __objc_msgSend_234Ptr = _lookup<
    ffi.NativeFunction<
      ffi.UnsignedChar Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_234 =
      __objc_msgSend_234Ptr
          .asFunction<
            int Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_shortValue1 = objc.registerName("shortValue");
  int _objc_msgSend_235(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_235(obj, sel);
  }

  late final __objc_msgSend_235Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Short Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_235 =
      __objc_msgSend_235Ptr
          .asFunction<
            int Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_unsignedShortValue1 = objc.registerName("unsignedShortValue");
  int _objc_msgSend_236(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_236(obj, sel);
  }

  late final __objc_msgSend_236Ptr = _lookup<
    ffi.NativeFunction<
      ffi.UnsignedShort Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_236 =
      __objc_msgSend_236Ptr
          .asFunction<
            int Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_intValue1 = objc.registerName("intValue");
  int _objc_msgSend_237(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_237(obj, sel);
  }

  late final __objc_msgSend_237Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Int Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_237 =
      __objc_msgSend_237Ptr
          .asFunction<
            int Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_unsignedIntValue1 = objc.registerName("unsignedIntValue");
  late final _sel_longValue1 = objc.registerName("longValue");
  late final _sel_unsignedLongValue1 = objc.registerName("unsignedLongValue");
  late final _sel_longLongValue1 = objc.registerName("longLongValue");
  int _objc_msgSend_238(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_238(obj, sel);
  }

  late final __objc_msgSend_238Ptr = _lookup<
    ffi.NativeFunction<
      ffi.LongLong Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_238 =
      __objc_msgSend_238Ptr
          .asFunction<
            int Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_unsignedLongLongValue1 = objc.registerName(
    "unsignedLongLongValue",
  );
  late final _sel_floatValue1 = objc.registerName("floatValue");
  double _objc_msgSend_239(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_239(obj, sel);
  }

  late final __objc_msgSend_239Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Float Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_239 =
      __objc_msgSend_239Ptr
          .asFunction<
            double Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  double _objc_msgSend_239_fpret(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_239_fpret(obj, sel);
  }

  late final __objc_msgSend_239_fpretPtr = _lookup<
    ffi.NativeFunction<
      ffi.Float Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend_fpret');
  late final __objc_msgSend_239_fpret =
      __objc_msgSend_239_fpretPtr
          .asFunction<
            double Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_doubleValue1 = objc.registerName("doubleValue");
  late final _sel_boolValue1 = objc.registerName("boolValue");
  late final _sel_integerValue1 = objc.registerName("integerValue");
  late final _sel_unsignedIntegerValue1 = objc.registerName(
    "unsignedIntegerValue",
  );
  late final _sel_stringValue1 = objc.registerName("stringValue");
  int _objc_msgSend_240(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> otherNumber,
  ) {
    return __objc_msgSend_240(obj, sel, otherNumber);
  }

  late final __objc_msgSend_240Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Int32 Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_240 =
      __objc_msgSend_240Ptr
          .asFunction<
            int Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_isEqualToNumber_1 = objc.registerName("isEqualToNumber:");
  bool _objc_msgSend_241(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> number,
  ) {
    return __objc_msgSend_241(obj, sel, number);
  }

  late final __objc_msgSend_241Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Bool Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_241 =
      __objc_msgSend_241Ptr
          .asFunction<
            bool Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_numberWithChar_1 = objc.registerName("numberWithChar:");
  late final _sel_numberWithUnsignedChar_1 = objc.registerName(
    "numberWithUnsignedChar:",
  );
  late final _sel_numberWithShort_1 = objc.registerName("numberWithShort:");
  late final _sel_numberWithUnsignedShort_1 = objc.registerName(
    "numberWithUnsignedShort:",
  );
  late final _sel_numberWithInt_1 = objc.registerName("numberWithInt:");
  late final _sel_numberWithUnsignedInt_1 = objc.registerName(
    "numberWithUnsignedInt:",
  );
  late final _sel_numberWithLong_1 = objc.registerName("numberWithLong:");
  late final _sel_numberWithUnsignedLong_1 = objc.registerName(
    "numberWithUnsignedLong:",
  );
  late final _sel_numberWithLongLong_1 = objc.registerName(
    "numberWithLongLong:",
  );
  late final _sel_numberWithUnsignedLongLong_1 = objc.registerName(
    "numberWithUnsignedLongLong:",
  );
  late final _sel_numberWithFloat_1 = objc.registerName("numberWithFloat:");
  late final _sel_numberWithDouble_1 = objc.registerName("numberWithDouble:");
  late final _sel_numberWithBool_1 = objc.registerName("numberWithBool:");
  late final _sel_numberWithInteger_1 = objc.registerName("numberWithInteger:");
  late final _sel_numberWithUnsignedInteger_1 = objc.registerName(
    "numberWithUnsignedInteger:",
  );
  late final _sel_port1 = objc.registerName("port");
  late final _sel_user1 = objc.registerName("user");
  late final _sel_password1 = objc.registerName("password");
  late final _sel_path1 = objc.registerName("path");
  late final _sel_fragment1 = objc.registerName("fragment");
  late final _sel_parameterString1 = objc.registerName("parameterString");
  late final _sel_query1 = objc.registerName("query");
  late final _sel_relativePath1 = objc.registerName("relativePath");
  late final _sel_hasDirectoryPath1 = objc.registerName("hasDirectoryPath");
  late final _sel_getFileSystemRepresentation_maxLength_1 = objc.registerName(
    "getFileSystemRepresentation:maxLength:",
  );
  bool _objc_msgSend_242(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<ffi.Char> buffer,
    int maxBufferLength,
  ) {
    return __objc_msgSend_242(obj, sel, buffer, maxBufferLength);
  }

  late final __objc_msgSend_242Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Bool Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<ffi.Char>,
        ffi.UnsignedLong,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_242 =
      __objc_msgSend_242Ptr
          .asFunction<
            bool Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<ffi.Char>,
              int,
            )
          >();

  late final _sel_fileSystemRepresentation1 = objc.registerName(
    "fileSystemRepresentation",
  );
  late final _sel_isFileURL1 = objc.registerName("isFileURL");
  late final _sel_standardizedURL1 = objc.registerName("standardizedURL");
  late final _sel_isFileReferenceURL1 = objc.registerName("isFileReferenceURL");
  late final _sel_fileReferenceURL1 = objc.registerName("fileReferenceURL");
  late final _sel_filePathURL1 = objc.registerName("filePathURL");
  late final _sel_getResourceValue_forKey_error_1 = objc.registerName(
    "getResourceValue:forKey:error:",
  );
  bool _objc_msgSend_243(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> value,
    ffi.Pointer<objc.ObjCObject> key,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    return __objc_msgSend_243(obj, sel, value, key, error);
  }

  late final __objc_msgSend_243Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Bool Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_243 =
      __objc_msgSend_243Ptr
          .asFunction<
            bool Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
            )
          >();

  late final _sel_resourceValuesForKeys_error_1 = objc.registerName(
    "resourceValuesForKeys:error:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_244(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> keys,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    return __objc_msgSend_244(obj, sel, keys, error);
  }

  late final __objc_msgSend_244Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_244 =
      __objc_msgSend_244Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
            )
          >();

  late final _sel_setResourceValue_forKey_error_1 = objc.registerName(
    "setResourceValue:forKey:error:",
  );
  bool _objc_msgSend_245(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> value,
    ffi.Pointer<objc.ObjCObject> key,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    return __objc_msgSend_245(obj, sel, value, key, error);
  }

  late final __objc_msgSend_245Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Bool Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_245 =
      __objc_msgSend_245Ptr
          .asFunction<
            bool Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
            )
          >();

  late final _sel_setResourceValues_error_1 = objc.registerName(
    "setResourceValues:error:",
  );
  bool _objc_msgSend_246(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> keyedValues,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    return __objc_msgSend_246(obj, sel, keyedValues, error);
  }

  late final __objc_msgSend_246Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Bool Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_246 =
      __objc_msgSend_246Ptr
          .asFunction<
            bool Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
            )
          >();

  late final _sel_removeCachedResourceValueForKey_1 = objc.registerName(
    "removeCachedResourceValueForKey:",
  );
  void _objc_msgSend_247(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> key,
  ) {
    return __objc_msgSend_247(obj, sel, key);
  }

  late final __objc_msgSend_247Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_247 =
      __objc_msgSend_247Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_removeAllCachedResourceValues1 = objc.registerName(
    "removeAllCachedResourceValues",
  );
  late final _sel_setTemporaryResourceValue_forKey_1 = objc.registerName(
    "setTemporaryResourceValue:forKey:",
  );
  late final _sel_bookmarkDataWithOptions_includingResourceValuesForKeys_relativeToURL_error_1 =
      objc.registerName(
        "bookmarkDataWithOptions:includingResourceValuesForKeys:relativeToURL:error:",
      );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_248(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int options,
    ffi.Pointer<objc.ObjCObject> keys,
    ffi.Pointer<objc.ObjCObject> relativeURL,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    return __objc_msgSend_248(obj, sel, options, keys, relativeURL, error);
  }

  late final __objc_msgSend_248Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Int32,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_248 =
      __objc_msgSend_248Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
            )
          >();

  late final _sel_initByResolvingBookmarkData_options_relativeToURL_bookmarkDataIsStale_error_1 =
      objc.registerName(
        "initByResolvingBookmarkData:options:relativeToURL:bookmarkDataIsStale:error:",
      );
  instancetype _objc_msgSend_249(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> bookmarkData,
    int options,
    ffi.Pointer<objc.ObjCObject> relativeURL,
    ffi.Pointer<ffi.Bool> isStale,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    return __objc_msgSend_249(
      obj,
      sel,
      bookmarkData,
      options,
      relativeURL,
      isStale,
      error,
    );
  }

  late final __objc_msgSend_249Ptr = _lookup<
    ffi.NativeFunction<
      instancetype Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Int32,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<ffi.Bool>,
        ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_249 =
      __objc_msgSend_249Ptr
          .asFunction<
            instancetype Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              int,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<ffi.Bool>,
              ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
            )
          >();

  late final _sel_URLByResolvingBookmarkData_options_relativeToURL_bookmarkDataIsStale_error_1 =
      objc.registerName(
        "URLByResolvingBookmarkData:options:relativeToURL:bookmarkDataIsStale:error:",
      );
  late final _sel_resourceValuesForKeys_fromBookmarkData_1 = objc.registerName(
    "resourceValuesForKeys:fromBookmarkData:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_250(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> keys,
    ffi.Pointer<objc.ObjCObject> bookmarkData,
  ) {
    return __objc_msgSend_250(obj, sel, keys, bookmarkData);
  }

  late final __objc_msgSend_250Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_250 =
      __objc_msgSend_250Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_writeBookmarkData_toURL_options_error_1 = objc.registerName(
    "writeBookmarkData:toURL:options:error:",
  );
  bool _objc_msgSend_251(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> bookmarkData,
    ffi.Pointer<objc.ObjCObject> bookmarkFileURL,
    int options,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    return __objc_msgSend_251(
      obj,
      sel,
      bookmarkData,
      bookmarkFileURL,
      options,
      error,
    );
  }

  late final __objc_msgSend_251Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Bool Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.UnsignedLong,
        ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_251 =
      __objc_msgSend_251Ptr
          .asFunction<
            bool Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
              int,
              ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
            )
          >();

  late final _sel_bookmarkDataWithContentsOfURL_error_1 = objc.registerName(
    "bookmarkDataWithContentsOfURL:error:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_252(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> bookmarkFileURL,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    return __objc_msgSend_252(obj, sel, bookmarkFileURL, error);
  }

  late final __objc_msgSend_252Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_252 =
      __objc_msgSend_252Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
            )
          >();

  late final _sel_URLByResolvingAliasFileAtURL_options_error_1 = objc
      .registerName("URLByResolvingAliasFileAtURL:options:error:");
  instancetype _objc_msgSend_253(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> url,
    int options,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    return __objc_msgSend_253(obj, sel, url, options, error);
  }

  late final __objc_msgSend_253Ptr = _lookup<
    ffi.NativeFunction<
      instancetype Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Int32,
        ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_253 =
      __objc_msgSend_253Ptr
          .asFunction<
            instancetype Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              int,
              ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
            )
          >();

  late final _sel_startAccessingSecurityScopedResource1 = objc.registerName(
    "startAccessingSecurityScopedResource",
  );
  late final _sel_stopAccessingSecurityScopedResource1 = objc.registerName(
    "stopAccessingSecurityScopedResource",
  );
  late final _sel_getPromisedItemResourceValue_forKey_error_1 = objc
      .registerName("getPromisedItemResourceValue:forKey:error:");
  late final _sel_promisedItemResourceValuesForKeys_error_1 = objc.registerName(
    "promisedItemResourceValuesForKeys:error:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_254(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> keys,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    return __objc_msgSend_254(obj, sel, keys, error);
  }

  late final __objc_msgSend_254Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_254 =
      __objc_msgSend_254Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
            )
          >();

  late final _sel_checkPromisedItemIsReachableAndReturnError_1 = objc
      .registerName("checkPromisedItemIsReachableAndReturnError:");
  bool _objc_msgSend_255(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    return __objc_msgSend_255(obj, sel, error);
  }

  late final __objc_msgSend_255Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Bool Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_255 =
      __objc_msgSend_255Ptr
          .asFunction<
            bool Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
            )
          >();

  late final _sel_fileURLWithPathComponents_1 = objc.registerName(
    "fileURLWithPathComponents:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_256(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> components,
  ) {
    return __objc_msgSend_256(obj, sel, components);
  }

  late final __objc_msgSend_256Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_256 =
      __objc_msgSend_256Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_pathComponents1 = objc.registerName("pathComponents");
  late final _sel_lastPathComponent1 = objc.registerName("lastPathComponent");
  late final _sel_pathExtension1 = objc.registerName("pathExtension");
  late final _sel_URLByAppendingPathComponent_1 = objc.registerName(
    "URLByAppendingPathComponent:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_257(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> pathComponent,
  ) {
    return __objc_msgSend_257(obj, sel, pathComponent);
  }

  late final __objc_msgSend_257Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_257 =
      __objc_msgSend_257Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_URLByAppendingPathComponent_isDirectory_1 = objc.registerName(
    "URLByAppendingPathComponent:isDirectory:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_258(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> pathComponent,
    bool isDirectory,
  ) {
    return __objc_msgSend_258(obj, sel, pathComponent, isDirectory);
  }

  late final __objc_msgSend_258Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Bool,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_258 =
      __objc_msgSend_258Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              bool,
            )
          >();

  late final _sel_URLByDeletingLastPathComponent1 = objc.registerName(
    "URLByDeletingLastPathComponent",
  );
  late final _sel_URLByAppendingPathExtension_1 = objc.registerName(
    "URLByAppendingPathExtension:",
  );
  late final _sel_URLByDeletingPathExtension1 = objc.registerName(
    "URLByDeletingPathExtension",
  );
  late final _sel_checkResourceIsReachableAndReturnError_1 = objc.registerName(
    "checkResourceIsReachableAndReturnError:",
  );
  late final _sel_URLByStandardizingPath1 = objc.registerName(
    "URLByStandardizingPath",
  );
  late final _sel_URLByResolvingSymlinksInPath1 = objc.registerName(
    "URLByResolvingSymlinksInPath",
  );
  late final _sel_resourceDataUsingCache_1 = objc.registerName(
    "resourceDataUsingCache:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_259(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    bool shouldUseCache,
  ) {
    return __objc_msgSend_259(obj, sel, shouldUseCache);
  }

  late final __objc_msgSend_259Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Bool,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_259 =
      __objc_msgSend_259Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              bool,
            )
          >();

  late final _sel_loadResourceDataNotifyingClient_usingCache_1 = objc
      .registerName("loadResourceDataNotifyingClient:usingCache:");
  void _objc_msgSend_260(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> client,
    bool shouldUseCache,
  ) {
    return __objc_msgSend_260(obj, sel, client, shouldUseCache);
  }

  late final __objc_msgSend_260Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Bool,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_260 =
      __objc_msgSend_260Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              bool,
            )
          >();

  late final _sel_propertyForKey_1 = objc.registerName("propertyForKey:");
  late final _sel_setResourceData_1 = objc.registerName("setResourceData:");
  late final _sel_setProperty_forKey_1 = objc.registerName(
    "setProperty:forKey:",
  );
  bool _objc_msgSend_261(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> property,
    ffi.Pointer<objc.ObjCObject> propertyKey,
  ) {
    return __objc_msgSend_261(obj, sel, property, propertyKey);
  }

  late final __objc_msgSend_261Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Bool Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_261 =
      __objc_msgSend_261Ptr
          .asFunction<
            bool Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _class_NSURLHandle1 = objc.getClass("NSURLHandle");
  late final _sel_registerURLHandleClass_1 = objc.registerName(
    "registerURLHandleClass:",
  );
  late final _sel_URLHandleClassForURL_1 = objc.registerName(
    "URLHandleClassForURL:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_262(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> anURL,
  ) {
    return __objc_msgSend_262(obj, sel, anURL);
  }

  late final __objc_msgSend_262Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_262 =
      __objc_msgSend_262Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_status1 = objc.registerName("status");
  int _objc_msgSend_263(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_263(obj, sel);
  }

  late final __objc_msgSend_263Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Int32 Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_263 =
      __objc_msgSend_263Ptr
          .asFunction<
            int Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_failureReason1 = objc.registerName("failureReason");
  late final _sel_addClient_1 = objc.registerName("addClient:");
  late final _sel_removeClient_1 = objc.registerName("removeClient:");
  late final _sel_loadInBackground1 = objc.registerName("loadInBackground");
  late final _sel_cancelLoadInBackground1 = objc.registerName(
    "cancelLoadInBackground",
  );
  late final _sel_resourceData1 = objc.registerName("resourceData");
  late final _sel_availableResourceData1 = objc.registerName(
    "availableResourceData",
  );
  late final _sel_expectedResourceDataSize1 = objc.registerName(
    "expectedResourceDataSize",
  );
  late final _sel_flushCachedData1 = objc.registerName("flushCachedData");
  late final _sel_backgroundLoadDidFailWithReason_1 = objc.registerName(
    "backgroundLoadDidFailWithReason:",
  );
  late final _sel_didLoadBytes_loadComplete_1 = objc.registerName(
    "didLoadBytes:loadComplete:",
  );
  void _objc_msgSend_264(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> newBytes,
    bool yorn,
  ) {
    return __objc_msgSend_264(obj, sel, newBytes, yorn);
  }

  late final __objc_msgSend_264Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Bool,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_264 =
      __objc_msgSend_264Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              bool,
            )
          >();

  late final _sel_canInitWithURL_1 = objc.registerName("canInitWithURL:");
  bool _objc_msgSend_265(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> anURL,
  ) {
    return __objc_msgSend_265(obj, sel, anURL);
  }

  late final __objc_msgSend_265Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Bool Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_265 =
      __objc_msgSend_265Ptr
          .asFunction<
            bool Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_cachedHandleForURL_1 = objc.registerName(
    "cachedHandleForURL:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_266(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> anURL,
  ) {
    return __objc_msgSend_266(obj, sel, anURL);
  }

  late final __objc_msgSend_266Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_266 =
      __objc_msgSend_266Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_initWithURL_cached_1 = objc.registerName(
    "initWithURL:cached:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_267(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> anURL,
    bool willCache,
  ) {
    return __objc_msgSend_267(obj, sel, anURL, willCache);
  }

  late final __objc_msgSend_267Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Bool,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_267 =
      __objc_msgSend_267Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              bool,
            )
          >();

  late final _sel_propertyForKeyIfAvailable_1 = objc.registerName(
    "propertyForKeyIfAvailable:",
  );
  late final _sel_writeProperty_forKey_1 = objc.registerName(
    "writeProperty:forKey:",
  );
  late final _sel_writeData_1 = objc.registerName("writeData:");
  late final _sel_loadInForeground1 = objc.registerName("loadInForeground");
  late final _sel_beginLoadInBackground1 = objc.registerName(
    "beginLoadInBackground",
  );
  late final _sel_endLoadInBackground1 = objc.registerName(
    "endLoadInBackground",
  );
  late final _sel_URLHandleUsingCache_1 = objc.registerName(
    "URLHandleUsingCache:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_268(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    bool shouldUseCache,
  ) {
    return __objc_msgSend_268(obj, sel, shouldUseCache);
  }

  late final __objc_msgSend_268Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Bool,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_268 =
      __objc_msgSend_268Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              bool,
            )
          >();

  late final _sel_writeToFile_options_error_1 = objc.registerName(
    "writeToFile:options:error:",
  );
  bool _objc_msgSend_269(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> path,
    int writeOptionsMask,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> errorPtr,
  ) {
    return __objc_msgSend_269(obj, sel, path, writeOptionsMask, errorPtr);
  }

  late final __objc_msgSend_269Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Bool Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Int32,
        ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_269 =
      __objc_msgSend_269Ptr
          .asFunction<
            bool Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              int,
              ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
            )
          >();

  late final _sel_writeToURL_options_error_1 = objc.registerName(
    "writeToURL:options:error:",
  );
  bool _objc_msgSend_270(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> url,
    int writeOptionsMask,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> errorPtr,
  ) {
    return __objc_msgSend_270(obj, sel, url, writeOptionsMask, errorPtr);
  }

  late final __objc_msgSend_270Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Bool Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Int32,
        ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_270 =
      __objc_msgSend_270Ptr
          .asFunction<
            bool Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              int,
              ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
            )
          >();

  late final _sel_rangeOfData_options_range_1 = objc.registerName(
    "rangeOfData:options:range:",
  );
  _NSRange _objc_msgSend_271(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> dataToFind,
    int mask,
    _NSRange searchRange,
  ) {
    return __objc_msgSend_271(obj, sel, dataToFind, mask, searchRange);
  }

  late final __objc_msgSend_271Ptr = _lookup<
    ffi.NativeFunction<
      _NSRange Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Int32,
        _NSRange,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_271 =
      __objc_msgSend_271Ptr
          .asFunction<
            _NSRange Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              int,
              _NSRange,
            )
          >();

  void _objc_msgSend_271_stret(
    ffi.Pointer<_NSRange> stret,
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> dataToFind,
    int mask,
    _NSRange searchRange,
  ) {
    return __objc_msgSend_271_stret(
      stret,
      obj,
      sel,
      dataToFind,
      mask,
      searchRange,
    );
  }

  late final __objc_msgSend_271_stretPtr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<_NSRange>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Int32,
        _NSRange,
      )
    >
  >('objc_msgSend_stret');
  late final __objc_msgSend_271_stret =
      __objc_msgSend_271_stretPtr
          .asFunction<
            void Function(
              ffi.Pointer<_NSRange>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              int,
              _NSRange,
            )
          >();

  late final _sel_enumerateByteRangesUsingBlock_1 = objc.registerName(
    "enumerateByteRangesUsingBlock:",
  );
  void _objc_msgSend_272(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCBlock> block,
  ) {
    return __objc_msgSend_272(obj, sel, block);
  }

  late final __objc_msgSend_272Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCBlock>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_272 =
      __objc_msgSend_272Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCBlock>,
            )
          >();

  late final _sel_dataWithBytes_length_1 = objc.registerName(
    "dataWithBytes:length:",
  );
  instancetype _objc_msgSend_273(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<ffi.Void> bytes,
    int length,
  ) {
    return __objc_msgSend_273(obj, sel, bytes, length);
  }

  late final __objc_msgSend_273Ptr = _lookup<
    ffi.NativeFunction<
      instancetype Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<ffi.Void>,
        ffi.UnsignedLong,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_273 =
      __objc_msgSend_273Ptr
          .asFunction<
            instancetype Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<ffi.Void>,
              int,
            )
          >();

  late final _sel_dataWithBytesNoCopy_length_1 = objc.registerName(
    "dataWithBytesNoCopy:length:",
  );
  late final _sel_dataWithBytesNoCopy_length_freeWhenDone_1 = objc.registerName(
    "dataWithBytesNoCopy:length:freeWhenDone:",
  );
  instancetype _objc_msgSend_274(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<ffi.Void> bytes,
    int length,
    bool b,
  ) {
    return __objc_msgSend_274(obj, sel, bytes, length, b);
  }

  late final __objc_msgSend_274Ptr = _lookup<
    ffi.NativeFunction<
      instancetype Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<ffi.Void>,
        ffi.UnsignedLong,
        ffi.Bool,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_274 =
      __objc_msgSend_274Ptr
          .asFunction<
            instancetype Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<ffi.Void>,
              int,
              bool,
            )
          >();

  late final _sel_dataWithContentsOfFile_options_error_1 = objc.registerName(
    "dataWithContentsOfFile:options:error:",
  );
  instancetype _objc_msgSend_275(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> path,
    int readOptionsMask,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> errorPtr,
  ) {
    return __objc_msgSend_275(obj, sel, path, readOptionsMask, errorPtr);
  }

  late final __objc_msgSend_275Ptr = _lookup<
    ffi.NativeFunction<
      instancetype Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Int32,
        ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_275 =
      __objc_msgSend_275Ptr
          .asFunction<
            instancetype Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              int,
              ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
            )
          >();

  late final _sel_dataWithContentsOfURL_options_error_1 = objc.registerName(
    "dataWithContentsOfURL:options:error:",
  );
  instancetype _objc_msgSend_276(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> url,
    int readOptionsMask,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> errorPtr,
  ) {
    return __objc_msgSend_276(obj, sel, url, readOptionsMask, errorPtr);
  }

  late final __objc_msgSend_276Ptr = _lookup<
    ffi.NativeFunction<
      instancetype Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Int32,
        ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_276 =
      __objc_msgSend_276Ptr
          .asFunction<
            instancetype Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              int,
              ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
            )
          >();

  late final _sel_dataWithContentsOfFile_1 = objc.registerName(
    "dataWithContentsOfFile:",
  );
  late final _sel_dataWithContentsOfURL_1 = objc.registerName(
    "dataWithContentsOfURL:",
  );
  instancetype _objc_msgSend_277(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> url,
  ) {
    return __objc_msgSend_277(obj, sel, url);
  }

  late final __objc_msgSend_277Ptr = _lookup<
    ffi.NativeFunction<
      instancetype Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_277 =
      __objc_msgSend_277Ptr
          .asFunction<
            instancetype Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_initWithBytes_length_1 = objc.registerName(
    "initWithBytes:length:",
  );
  late final _sel_initWithBytesNoCopy_length_1 = objc.registerName(
    "initWithBytesNoCopy:length:",
  );
  late final _sel_initWithBytesNoCopy_length_freeWhenDone_1 = objc.registerName(
    "initWithBytesNoCopy:length:freeWhenDone:",
  );
  late final _sel_initWithBytesNoCopy_length_deallocator_1 = objc.registerName(
    "initWithBytesNoCopy:length:deallocator:",
  );
  instancetype _objc_msgSend_278(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<ffi.Void> bytes,
    int length,
    ffi.Pointer<objc.ObjCBlock> deallocator,
  ) {
    return __objc_msgSend_278(obj, sel, bytes, length, deallocator);
  }

  late final __objc_msgSend_278Ptr = _lookup<
    ffi.NativeFunction<
      instancetype Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<ffi.Void>,
        ffi.UnsignedLong,
        ffi.Pointer<objc.ObjCBlock>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_278 =
      __objc_msgSend_278Ptr
          .asFunction<
            instancetype Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<ffi.Void>,
              int,
              ffi.Pointer<objc.ObjCBlock>,
            )
          >();

  late final _sel_initWithContentsOfFile_options_error_1 = objc.registerName(
    "initWithContentsOfFile:options:error:",
  );
  late final _sel_initWithContentsOfURL_options_error_1 = objc.registerName(
    "initWithContentsOfURL:options:error:",
  );
  late final _sel_initWithData_1 = objc.registerName("initWithData:");
  instancetype _objc_msgSend_279(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> data,
  ) {
    return __objc_msgSend_279(obj, sel, data);
  }

  late final __objc_msgSend_279Ptr = _lookup<
    ffi.NativeFunction<
      instancetype Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_279 =
      __objc_msgSend_279Ptr
          .asFunction<
            instancetype Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_dataWithData_1 = objc.registerName("dataWithData:");
  late final _sel_initWithBase64EncodedString_options_1 = objc.registerName(
    "initWithBase64EncodedString:options:",
  );
  instancetype _objc_msgSend_280(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> base64String,
    int options,
  ) {
    return __objc_msgSend_280(obj, sel, base64String, options);
  }

  late final __objc_msgSend_280Ptr = _lookup<
    ffi.NativeFunction<
      instancetype Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Int32,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_280 =
      __objc_msgSend_280Ptr
          .asFunction<
            instancetype Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              int,
            )
          >();

  late final _sel_base64EncodedStringWithOptions_1 = objc.registerName(
    "base64EncodedStringWithOptions:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_281(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int options,
  ) {
    return __objc_msgSend_281(obj, sel, options);
  }

  late final __objc_msgSend_281Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Int32,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_281 =
      __objc_msgSend_281Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
            )
          >();

  late final _sel_initWithBase64EncodedData_options_1 = objc.registerName(
    "initWithBase64EncodedData:options:",
  );
  instancetype _objc_msgSend_282(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> base64Data,
    int options,
  ) {
    return __objc_msgSend_282(obj, sel, base64Data, options);
  }

  late final __objc_msgSend_282Ptr = _lookup<
    ffi.NativeFunction<
      instancetype Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Int32,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_282 =
      __objc_msgSend_282Ptr
          .asFunction<
            instancetype Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              int,
            )
          >();

  late final _sel_base64EncodedDataWithOptions_1 = objc.registerName(
    "base64EncodedDataWithOptions:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_283(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int options,
  ) {
    return __objc_msgSend_283(obj, sel, options);
  }

  late final __objc_msgSend_283Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Int32,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_283 =
      __objc_msgSend_283Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
            )
          >();

  late final _sel_decompressedDataUsingAlgorithm_error_1 = objc.registerName(
    "decompressedDataUsingAlgorithm:error:",
  );
  instancetype _objc_msgSend_284(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int algorithm,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    return __objc_msgSend_284(obj, sel, algorithm, error);
  }

  late final __objc_msgSend_284Ptr = _lookup<
    ffi.NativeFunction<
      instancetype Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Int32,
        ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_284 =
      __objc_msgSend_284Ptr
          .asFunction<
            instancetype Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
              ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
            )
          >();

  late final _sel_compressedDataUsingAlgorithm_error_1 = objc.registerName(
    "compressedDataUsingAlgorithm:error:",
  );
  late final _sel_getBytes_1 = objc.registerName("getBytes:");
  late final _sel_dataWithContentsOfMappedFile_1 = objc.registerName(
    "dataWithContentsOfMappedFile:",
  );
  late final _sel_initWithContentsOfMappedFile_1 = objc.registerName(
    "initWithContentsOfMappedFile:",
  );
  late final _sel_initWithBase64Encoding_1 = objc.registerName(
    "initWithBase64Encoding:",
  );
  late final _sel_base64Encoding1 = objc.registerName("base64Encoding");
  late final _sel_encodeDataObject_1 = objc.registerName("encodeDataObject:");
  void _objc_msgSend_285(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> data,
  ) {
    return __objc_msgSend_285(obj, sel, data);
  }

  late final __objc_msgSend_285Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_285 =
      __objc_msgSend_285Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_decodeDataObject1 = objc.registerName("decodeDataObject");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_286(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_286(obj, sel);
  }

  late final __objc_msgSend_286Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_286 =
      __objc_msgSend_286Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_decodeValueOfObjCType_at_size_1 = objc.registerName(
    "decodeValueOfObjCType:at:size:",
  );
  void _objc_msgSend_287(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<ffi.Char> type,
    ffi.Pointer<ffi.Void> data,
    int size,
  ) {
    return __objc_msgSend_287(obj, sel, type, data, size);
  }

  late final __objc_msgSend_287Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<ffi.Char>,
        ffi.Pointer<ffi.Void>,
        ffi.UnsignedLong,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_287 =
      __objc_msgSend_287Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>,
              int,
            )
          >();

  late final _sel_versionForClassName_1 = objc.registerName(
    "versionForClassName:",
  );
  int _objc_msgSend_288(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> className,
  ) {
    return __objc_msgSend_288(obj, sel, className);
  }

  late final __objc_msgSend_288Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Long Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_288 =
      __objc_msgSend_288Ptr
          .asFunction<
            int Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_encodeObject_1 = objc.registerName("encodeObject:");
  void _objc_msgSend_289(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> object,
  ) {
    return __objc_msgSend_289(obj, sel, object);
  }

  late final __objc_msgSend_289Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_289 =
      __objc_msgSend_289Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_encodeRootObject_1 = objc.registerName("encodeRootObject:");
  late final _sel_encodeBycopyObject_1 = objc.registerName(
    "encodeBycopyObject:",
  );
  late final _sel_encodeByrefObject_1 = objc.registerName("encodeByrefObject:");
  late final _sel_encodeConditionalObject_1 = objc.registerName(
    "encodeConditionalObject:",
  );
  late final _sel_encodeValuesOfObjCTypes_1 = objc.registerName(
    "encodeValuesOfObjCTypes:",
  );
  void _objc_msgSend_290(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<ffi.Char> types,
  ) {
    return __objc_msgSend_290(obj, sel, types);
  }

  late final __objc_msgSend_290Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<ffi.Char>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_290 =
      __objc_msgSend_290Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<ffi.Char>,
            )
          >();

  late final _sel_encodeArrayOfObjCType_count_at_1 = objc.registerName(
    "encodeArrayOfObjCType:count:at:",
  );
  void _objc_msgSend_291(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<ffi.Char> type,
    int count,
    ffi.Pointer<ffi.Void> array,
  ) {
    return __objc_msgSend_291(obj, sel, type, count, array);
  }

  late final __objc_msgSend_291Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<ffi.Char>,
        ffi.UnsignedLong,
        ffi.Pointer<ffi.Void>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_291 =
      __objc_msgSend_291Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<ffi.Char>,
              int,
              ffi.Pointer<ffi.Void>,
            )
          >();

  late final _sel_encodeBytes_length_1 = objc.registerName(
    "encodeBytes:length:",
  );
  late final _sel_decodeObject1 = objc.registerName("decodeObject");
  late final _sel_decodeTopLevelObjectAndReturnError_1 = objc.registerName(
    "decodeTopLevelObjectAndReturnError:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_292(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    return __objc_msgSend_292(obj, sel, error);
  }

  late final __objc_msgSend_292Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_292 =
      __objc_msgSend_292Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
            )
          >();

  late final _sel_decodeValuesOfObjCTypes_1 = objc.registerName(
    "decodeValuesOfObjCTypes:",
  );
  late final _sel_decodeArrayOfObjCType_count_at_1 = objc.registerName(
    "decodeArrayOfObjCType:count:at:",
  );
  late final _sel_decodeBytesWithReturnedLength_1 = objc.registerName(
    "decodeBytesWithReturnedLength:",
  );
  ffi.Pointer<ffi.Void> _objc_msgSend_293(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<ffi.UnsignedLong> lengthp,
  ) {
    return __objc_msgSend_293(obj, sel, lengthp);
  }

  late final __objc_msgSend_293Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<ffi.Void> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<ffi.UnsignedLong>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_293 =
      __objc_msgSend_293Ptr
          .asFunction<
            ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<ffi.UnsignedLong>,
            )
          >();

  late final _sel_encodePropertyList_1 = objc.registerName(
    "encodePropertyList:",
  );
  late final _sel_decodePropertyList1 = objc.registerName("decodePropertyList");
  late final _sel_setObjectZone_1 = objc.registerName("setObjectZone:");
  void _objc_msgSend_294(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<_NSZone> zone,
  ) {
    return __objc_msgSend_294(obj, sel, zone);
  }

  late final __objc_msgSend_294Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<_NSZone>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_294 =
      __objc_msgSend_294Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<_NSZone>,
            )
          >();

  late final _sel_objectZone1 = objc.registerName("objectZone");
  ffi.Pointer<_NSZone> _objc_msgSend_295(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_295(obj, sel);
  }

  late final __objc_msgSend_295Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<_NSZone> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_295 =
      __objc_msgSend_295Ptr
          .asFunction<
            ffi.Pointer<_NSZone> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_systemVersion1 = objc.registerName("systemVersion");
  late final _sel_allowsKeyedCoding1 = objc.registerName("allowsKeyedCoding");
  late final _sel_encodeObject_forKey_1 = objc.registerName(
    "encodeObject:forKey:",
  );
  late final _sel_encodeConditionalObject_forKey_1 = objc.registerName(
    "encodeConditionalObject:forKey:",
  );
  late final _sel_encodeBool_forKey_1 = objc.registerName("encodeBool:forKey:");
  void _objc_msgSend_296(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    bool value,
    ffi.Pointer<objc.ObjCObject> key,
  ) {
    return __objc_msgSend_296(obj, sel, value, key);
  }

  late final __objc_msgSend_296Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Bool,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_296 =
      __objc_msgSend_296Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              bool,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_encodeInt_forKey_1 = objc.registerName("encodeInt:forKey:");
  void _objc_msgSend_297(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int value,
    ffi.Pointer<objc.ObjCObject> key,
  ) {
    return __objc_msgSend_297(obj, sel, value, key);
  }

  late final __objc_msgSend_297Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Int,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_297 =
      __objc_msgSend_297Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_encodeInt32_forKey_1 = objc.registerName(
    "encodeInt32:forKey:",
  );
  void _objc_msgSend_298(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int value,
    ffi.Pointer<objc.ObjCObject> key,
  ) {
    return __objc_msgSend_298(obj, sel, value, key);
  }

  late final __objc_msgSend_298Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Int32,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_298 =
      __objc_msgSend_298Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_encodeInt64_forKey_1 = objc.registerName(
    "encodeInt64:forKey:",
  );
  void _objc_msgSend_299(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int value,
    ffi.Pointer<objc.ObjCObject> key,
  ) {
    return __objc_msgSend_299(obj, sel, value, key);
  }

  late final __objc_msgSend_299Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Int64,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_299 =
      __objc_msgSend_299Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_encodeFloat_forKey_1 = objc.registerName(
    "encodeFloat:forKey:",
  );
  void _objc_msgSend_300(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    double value,
    ffi.Pointer<objc.ObjCObject> key,
  ) {
    return __objc_msgSend_300(obj, sel, value, key);
  }

  late final __objc_msgSend_300Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Float,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_300 =
      __objc_msgSend_300Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              double,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_encodeDouble_forKey_1 = objc.registerName(
    "encodeDouble:forKey:",
  );
  void _objc_msgSend_301(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    double value,
    ffi.Pointer<objc.ObjCObject> key,
  ) {
    return __objc_msgSend_301(obj, sel, value, key);
  }

  late final __objc_msgSend_301Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Double,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_301 =
      __objc_msgSend_301Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              double,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_encodeBytes_length_forKey_1 = objc.registerName(
    "encodeBytes:length:forKey:",
  );
  void _objc_msgSend_302(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<ffi.Uint8> bytes,
    int length,
    ffi.Pointer<objc.ObjCObject> key,
  ) {
    return __objc_msgSend_302(obj, sel, bytes, length, key);
  }

  late final __objc_msgSend_302Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<ffi.Uint8>,
        ffi.UnsignedLong,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_302 =
      __objc_msgSend_302Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_containsValueForKey_1 = objc.registerName(
    "containsValueForKey:",
  );
  late final _sel_decodeObjectForKey_1 = objc.registerName(
    "decodeObjectForKey:",
  );
  late final _sel_decodeTopLevelObjectForKey_error_1 = objc.registerName(
    "decodeTopLevelObjectForKey:error:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_303(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> key,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    return __objc_msgSend_303(obj, sel, key, error);
  }

  late final __objc_msgSend_303Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_303 =
      __objc_msgSend_303Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
            )
          >();

  late final _sel_decodeBoolForKey_1 = objc.registerName("decodeBoolForKey:");
  late final _sel_decodeIntForKey_1 = objc.registerName("decodeIntForKey:");
  int _objc_msgSend_304(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> key,
  ) {
    return __objc_msgSend_304(obj, sel, key);
  }

  late final __objc_msgSend_304Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Int Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_304 =
      __objc_msgSend_304Ptr
          .asFunction<
            int Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_decodeInt32ForKey_1 = objc.registerName("decodeInt32ForKey:");
  int _objc_msgSend_305(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> key,
  ) {
    return __objc_msgSend_305(obj, sel, key);
  }

  late final __objc_msgSend_305Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Int32 Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_305 =
      __objc_msgSend_305Ptr
          .asFunction<
            int Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_decodeInt64ForKey_1 = objc.registerName("decodeInt64ForKey:");
  int _objc_msgSend_306(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> key,
  ) {
    return __objc_msgSend_306(obj, sel, key);
  }

  late final __objc_msgSend_306Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Int64 Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_306 =
      __objc_msgSend_306Ptr
          .asFunction<
            int Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_decodeFloatForKey_1 = objc.registerName("decodeFloatForKey:");
  double _objc_msgSend_307(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> key,
  ) {
    return __objc_msgSend_307(obj, sel, key);
  }

  late final __objc_msgSend_307Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Float Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_307 =
      __objc_msgSend_307Ptr
          .asFunction<
            double Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  double _objc_msgSend_307_fpret(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> key,
  ) {
    return __objc_msgSend_307_fpret(obj, sel, key);
  }

  late final __objc_msgSend_307_fpretPtr = _lookup<
    ffi.NativeFunction<
      ffi.Float Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend_fpret');
  late final __objc_msgSend_307_fpret =
      __objc_msgSend_307_fpretPtr
          .asFunction<
            double Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_decodeDoubleForKey_1 = objc.registerName(
    "decodeDoubleForKey:",
  );
  double _objc_msgSend_308(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> key,
  ) {
    return __objc_msgSend_308(obj, sel, key);
  }

  late final __objc_msgSend_308Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Double Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_308 =
      __objc_msgSend_308Ptr
          .asFunction<
            double Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  double _objc_msgSend_308_fpret(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> key,
  ) {
    return __objc_msgSend_308_fpret(obj, sel, key);
  }

  late final __objc_msgSend_308_fpretPtr = _lookup<
    ffi.NativeFunction<
      ffi.Double Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend_fpret');
  late final __objc_msgSend_308_fpret =
      __objc_msgSend_308_fpretPtr
          .asFunction<
            double Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_decodeBytesForKey_returnedLength_1 = objc.registerName(
    "decodeBytesForKey:returnedLength:",
  );
  ffi.Pointer<ffi.Uint8> _objc_msgSend_309(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> key,
    ffi.Pointer<ffi.UnsignedLong> lengthp,
  ) {
    return __objc_msgSend_309(obj, sel, key, lengthp);
  }

  late final __objc_msgSend_309Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<ffi.Uint8> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<ffi.UnsignedLong>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_309 =
      __objc_msgSend_309Ptr
          .asFunction<
            ffi.Pointer<ffi.Uint8> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<ffi.UnsignedLong>,
            )
          >();

  late final _sel_encodeInteger_forKey_1 = objc.registerName(
    "encodeInteger:forKey:",
  );
  void _objc_msgSend_310(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int value,
    ffi.Pointer<objc.ObjCObject> key,
  ) {
    return __objc_msgSend_310(obj, sel, value, key);
  }

  late final __objc_msgSend_310Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Long,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_310 =
      __objc_msgSend_310Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_decodeIntegerForKey_1 = objc.registerName(
    "decodeIntegerForKey:",
  );
  late final _sel_requiresSecureCoding1 = objc.registerName(
    "requiresSecureCoding",
  );
  late final _sel_decodeObjectOfClass_forKey_1 = objc.registerName(
    "decodeObjectOfClass:forKey:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_311(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> aClass,
    ffi.Pointer<objc.ObjCObject> key,
  ) {
    return __objc_msgSend_311(obj, sel, aClass, key);
  }

  late final __objc_msgSend_311Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_311 =
      __objc_msgSend_311Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_decodeTopLevelObjectOfClass_forKey_error_1 = objc
      .registerName("decodeTopLevelObjectOfClass:forKey:error:");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_312(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> aClass,
    ffi.Pointer<objc.ObjCObject> key,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    return __objc_msgSend_312(obj, sel, aClass, key, error);
  }

  late final __objc_msgSend_312Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_312 =
      __objc_msgSend_312Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
            )
          >();

  late final _sel_decodeArrayOfObjectsOfClass_forKey_1 = objc.registerName(
    "decodeArrayOfObjectsOfClass:forKey:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_313(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> cls,
    ffi.Pointer<objc.ObjCObject> key,
  ) {
    return __objc_msgSend_313(obj, sel, cls, key);
  }

  late final __objc_msgSend_313Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_313 =
      __objc_msgSend_313Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_decodeDictionaryWithKeysOfClass_objectsOfClass_forKey_1 = objc
      .registerName("decodeDictionaryWithKeysOfClass:objectsOfClass:forKey:");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_314(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> keyCls,
    ffi.Pointer<objc.ObjCObject> objectCls,
    ffi.Pointer<objc.ObjCObject> key,
  ) {
    return __objc_msgSend_314(obj, sel, keyCls, objectCls, key);
  }

  late final __objc_msgSend_314Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_314 =
      __objc_msgSend_314Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_decodeObjectOfClasses_forKey_1 = objc.registerName(
    "decodeObjectOfClasses:forKey:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_315(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> classes,
    ffi.Pointer<objc.ObjCObject> key,
  ) {
    return __objc_msgSend_315(obj, sel, classes, key);
  }

  late final __objc_msgSend_315Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_315 =
      __objc_msgSend_315Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_decodeTopLevelObjectOfClasses_forKey_error_1 = objc
      .registerName("decodeTopLevelObjectOfClasses:forKey:error:");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_316(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> classes,
    ffi.Pointer<objc.ObjCObject> key,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    return __objc_msgSend_316(obj, sel, classes, key, error);
  }

  late final __objc_msgSend_316Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_316 =
      __objc_msgSend_316Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
            )
          >();

  late final _sel_decodeArrayOfObjectsOfClasses_forKey_1 = objc.registerName(
    "decodeArrayOfObjectsOfClasses:forKey:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_317(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> classes,
    ffi.Pointer<objc.ObjCObject> key,
  ) {
    return __objc_msgSend_317(obj, sel, classes, key);
  }

  late final __objc_msgSend_317Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_317 =
      __objc_msgSend_317Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_decodeDictionaryWithKeysOfClasses_objectsOfClasses_forKey_1 =
      objc.registerName(
        "decodeDictionaryWithKeysOfClasses:objectsOfClasses:forKey:",
      );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_318(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> keyClasses,
    ffi.Pointer<objc.ObjCObject> objectClasses,
    ffi.Pointer<objc.ObjCObject> key,
  ) {
    return __objc_msgSend_318(obj, sel, keyClasses, objectClasses, key);
  }

  late final __objc_msgSend_318Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_318 =
      __objc_msgSend_318Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_decodePropertyListForKey_1 = objc.registerName(
    "decodePropertyListForKey:",
  );
  late final _sel_allowedClasses1 = objc.registerName("allowedClasses");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_319(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_319(obj, sel);
  }

  late final __objc_msgSend_319Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_319 =
      __objc_msgSend_319Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_failWithError_1 = objc.registerName("failWithError:");
  void _objc_msgSend_320(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> error,
  ) {
    return __objc_msgSend_320(obj, sel, error);
  }

  late final __objc_msgSend_320Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_320 =
      __objc_msgSend_320Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_decodingFailurePolicy1 = objc.registerName(
    "decodingFailurePolicy",
  );
  int _objc_msgSend_321(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_321(obj, sel);
  }

  late final __objc_msgSend_321Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Int32 Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_321 =
      __objc_msgSend_321Ptr
          .asFunction<
            int Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_error1 = objc.registerName("error");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_322(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_322(obj, sel);
  }

  late final __objc_msgSend_322Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_322 =
      __objc_msgSend_322Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_encodeNXObject_1 = objc.registerName("encodeNXObject:");
  late final _sel_decodeNXObject1 = objc.registerName("decodeNXObject");
  late final _sel_decodeValueOfObjCType_at_1 = objc.registerName(
    "decodeValueOfObjCType:at:",
  );
  late final _sel_encodePoint_1 = objc.registerName("encodePoint:");
  void _objc_msgSend_323(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    CGPoint point,
  ) {
    return __objc_msgSend_323(obj, sel, point);
  }

  late final __objc_msgSend_323Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        CGPoint,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_323 =
      __objc_msgSend_323Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              CGPoint,
            )
          >();

  late final _sel_decodePoint1 = objc.registerName("decodePoint");
  late final _sel_encodeSize_1 = objc.registerName("encodeSize:");
  void _objc_msgSend_324(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    CGSize size,
  ) {
    return __objc_msgSend_324(obj, sel, size);
  }

  late final __objc_msgSend_324Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        CGSize,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_324 =
      __objc_msgSend_324Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              CGSize,
            )
          >();

  late final _sel_decodeSize1 = objc.registerName("decodeSize");
  late final _sel_encodeRect_1 = objc.registerName("encodeRect:");
  void _objc_msgSend_325(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    CGRect rect,
  ) {
    return __objc_msgSend_325(obj, sel, rect);
  }

  late final __objc_msgSend_325Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        CGRect,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_325 =
      __objc_msgSend_325Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              CGRect,
            )
          >();

  late final _sel_decodeRect1 = objc.registerName("decodeRect");
  late final _sel_encodePoint_forKey_1 = objc.registerName(
    "encodePoint:forKey:",
  );
  void _objc_msgSend_326(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    CGPoint point,
    ffi.Pointer<objc.ObjCObject> key,
  ) {
    return __objc_msgSend_326(obj, sel, point, key);
  }

  late final __objc_msgSend_326Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        CGPoint,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_326 =
      __objc_msgSend_326Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              CGPoint,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_encodeSize_forKey_1 = objc.registerName("encodeSize:forKey:");
  void _objc_msgSend_327(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    CGSize size,
    ffi.Pointer<objc.ObjCObject> key,
  ) {
    return __objc_msgSend_327(obj, sel, size, key);
  }

  late final __objc_msgSend_327Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        CGSize,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_327 =
      __objc_msgSend_327Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              CGSize,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_encodeRect_forKey_1 = objc.registerName("encodeRect:forKey:");
  void _objc_msgSend_328(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    CGRect rect,
    ffi.Pointer<objc.ObjCObject> key,
  ) {
    return __objc_msgSend_328(obj, sel, rect, key);
  }

  late final __objc_msgSend_328Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        CGRect,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_328 =
      __objc_msgSend_328Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              CGRect,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_decodePointForKey_1 = objc.registerName("decodePointForKey:");
  CGPoint _objc_msgSend_329(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> key,
  ) {
    return __objc_msgSend_329(obj, sel, key);
  }

  late final __objc_msgSend_329Ptr = _lookup<
    ffi.NativeFunction<
      CGPoint Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_329 =
      __objc_msgSend_329Ptr
          .asFunction<
            CGPoint Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  void _objc_msgSend_329_stret(
    ffi.Pointer<CGPoint> stret,
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> key,
  ) {
    return __objc_msgSend_329_stret(stret, obj, sel, key);
  }

  late final __objc_msgSend_329_stretPtr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<CGPoint>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend_stret');
  late final __objc_msgSend_329_stret =
      __objc_msgSend_329_stretPtr
          .asFunction<
            void Function(
              ffi.Pointer<CGPoint>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_decodeSizeForKey_1 = objc.registerName("decodeSizeForKey:");
  CGSize _objc_msgSend_330(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> key,
  ) {
    return __objc_msgSend_330(obj, sel, key);
  }

  late final __objc_msgSend_330Ptr = _lookup<
    ffi.NativeFunction<
      CGSize Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_330 =
      __objc_msgSend_330Ptr
          .asFunction<
            CGSize Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  void _objc_msgSend_330_stret(
    ffi.Pointer<CGSize> stret,
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> key,
  ) {
    return __objc_msgSend_330_stret(stret, obj, sel, key);
  }

  late final __objc_msgSend_330_stretPtr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<CGSize>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend_stret');
  late final __objc_msgSend_330_stret =
      __objc_msgSend_330_stretPtr
          .asFunction<
            void Function(
              ffi.Pointer<CGSize>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_decodeRectForKey_1 = objc.registerName("decodeRectForKey:");
  CGRect _objc_msgSend_331(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> key,
  ) {
    return __objc_msgSend_331(obj, sel, key);
  }

  late final __objc_msgSend_331Ptr = _lookup<
    ffi.NativeFunction<
      CGRect Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_331 =
      __objc_msgSend_331Ptr
          .asFunction<
            CGRect Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  void _objc_msgSend_331_stret(
    ffi.Pointer<CGRect> stret,
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> key,
  ) {
    return __objc_msgSend_331_stret(stret, obj, sel, key);
  }

  late final __objc_msgSend_331_stretPtr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<CGRect>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend_stret');
  late final __objc_msgSend_331_stret =
      __objc_msgSend_331_stretPtr
          .asFunction<
            void Function(
              ffi.Pointer<CGRect>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_substringFromIndex_1 = objc.registerName(
    "substringFromIndex:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_332(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int from,
  ) {
    return __objc_msgSend_332(obj, sel, from);
  }

  late final __objc_msgSend_332Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.UnsignedLong,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_332 =
      __objc_msgSend_332Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
            )
          >();

  late final _sel_substringToIndex_1 = objc.registerName("substringToIndex:");
  late final _sel_substringWithRange_1 = objc.registerName(
    "substringWithRange:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_333(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    _NSRange range,
  ) {
    return __objc_msgSend_333(obj, sel, range);
  }

  late final __objc_msgSend_333Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        _NSRange,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_333 =
      __objc_msgSend_333Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              _NSRange,
            )
          >();

  late final _sel_getCharacters_range_1 = objc.registerName(
    "getCharacters:range:",
  );
  void _objc_msgSend_334(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<ffi.UnsignedShort> buffer,
    _NSRange range,
  ) {
    return __objc_msgSend_334(obj, sel, buffer, range);
  }

  late final __objc_msgSend_334Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<ffi.UnsignedShort>,
        _NSRange,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_334 =
      __objc_msgSend_334Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<ffi.UnsignedShort>,
              _NSRange,
            )
          >();

  int _objc_msgSend_335(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> string,
  ) {
    return __objc_msgSend_335(obj, sel, string);
  }

  late final __objc_msgSend_335Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Int32 Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_335 =
      __objc_msgSend_335Ptr
          .asFunction<
            int Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_compare_options_1 = objc.registerName("compare:options:");
  int _objc_msgSend_336(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> string,
    int mask,
  ) {
    return __objc_msgSend_336(obj, sel, string, mask);
  }

  late final __objc_msgSend_336Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Int32 Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Int32,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_336 =
      __objc_msgSend_336Ptr
          .asFunction<
            int Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              int,
            )
          >();

  late final _sel_compare_options_range_1 = objc.registerName(
    "compare:options:range:",
  );
  int _objc_msgSend_337(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> string,
    int mask,
    _NSRange rangeOfReceiverToCompare,
  ) {
    return __objc_msgSend_337(obj, sel, string, mask, rangeOfReceiverToCompare);
  }

  late final __objc_msgSend_337Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Int32 Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Int32,
        _NSRange,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_337 =
      __objc_msgSend_337Ptr
          .asFunction<
            int Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              int,
              _NSRange,
            )
          >();

  late final _sel_compare_options_range_locale_1 = objc.registerName(
    "compare:options:range:locale:",
  );
  int _objc_msgSend_338(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> string,
    int mask,
    _NSRange rangeOfReceiverToCompare,
    ffi.Pointer<objc.ObjCObject> locale,
  ) {
    return __objc_msgSend_338(
      obj,
      sel,
      string,
      mask,
      rangeOfReceiverToCompare,
      locale,
    );
  }

  late final __objc_msgSend_338Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Int32 Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Int32,
        _NSRange,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_338 =
      __objc_msgSend_338Ptr
          .asFunction<
            int Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              int,
              _NSRange,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_caseInsensitiveCompare_1 = objc.registerName(
    "caseInsensitiveCompare:",
  );
  late final _sel_localizedCompare_1 = objc.registerName("localizedCompare:");
  late final _sel_localizedCaseInsensitiveCompare_1 = objc.registerName(
    "localizedCaseInsensitiveCompare:",
  );
  late final _sel_localizedStandardCompare_1 = objc.registerName(
    "localizedStandardCompare:",
  );
  late final _sel_isEqualToString_1 = objc.registerName("isEqualToString:");
  late final _sel_hasPrefix_1 = objc.registerName("hasPrefix:");
  late final _sel_hasSuffix_1 = objc.registerName("hasSuffix:");
  late final _sel_commonPrefixWithString_options_1 = objc.registerName(
    "commonPrefixWithString:options:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_339(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> str,
    int mask,
  ) {
    return __objc_msgSend_339(obj, sel, str, mask);
  }

  late final __objc_msgSend_339Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Int32,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_339 =
      __objc_msgSend_339Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              int,
            )
          >();

  late final _sel_containsString_1 = objc.registerName("containsString:");
  late final _sel_localizedCaseInsensitiveContainsString_1 = objc.registerName(
    "localizedCaseInsensitiveContainsString:",
  );
  late final _sel_localizedStandardContainsString_1 = objc.registerName(
    "localizedStandardContainsString:",
  );
  late final _sel_localizedStandardRangeOfString_1 = objc.registerName(
    "localizedStandardRangeOfString:",
  );
  _NSRange _objc_msgSend_340(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> str,
  ) {
    return __objc_msgSend_340(obj, sel, str);
  }

  late final __objc_msgSend_340Ptr = _lookup<
    ffi.NativeFunction<
      _NSRange Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_340 =
      __objc_msgSend_340Ptr
          .asFunction<
            _NSRange Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  void _objc_msgSend_340_stret(
    ffi.Pointer<_NSRange> stret,
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> str,
  ) {
    return __objc_msgSend_340_stret(stret, obj, sel, str);
  }

  late final __objc_msgSend_340_stretPtr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<_NSRange>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend_stret');
  late final __objc_msgSend_340_stret =
      __objc_msgSend_340_stretPtr
          .asFunction<
            void Function(
              ffi.Pointer<_NSRange>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_rangeOfString_1 = objc.registerName("rangeOfString:");
  late final _sel_rangeOfString_options_1 = objc.registerName(
    "rangeOfString:options:",
  );
  _NSRange _objc_msgSend_341(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> searchString,
    int mask,
  ) {
    return __objc_msgSend_341(obj, sel, searchString, mask);
  }

  late final __objc_msgSend_341Ptr = _lookup<
    ffi.NativeFunction<
      _NSRange Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Int32,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_341 =
      __objc_msgSend_341Ptr
          .asFunction<
            _NSRange Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              int,
            )
          >();

  void _objc_msgSend_341_stret(
    ffi.Pointer<_NSRange> stret,
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> searchString,
    int mask,
  ) {
    return __objc_msgSend_341_stret(stret, obj, sel, searchString, mask);
  }

  late final __objc_msgSend_341_stretPtr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<_NSRange>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Int32,
      )
    >
  >('objc_msgSend_stret');
  late final __objc_msgSend_341_stret =
      __objc_msgSend_341_stretPtr
          .asFunction<
            void Function(
              ffi.Pointer<_NSRange>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              int,
            )
          >();

  late final _sel_rangeOfString_options_range_1 = objc.registerName(
    "rangeOfString:options:range:",
  );
  _NSRange _objc_msgSend_342(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> searchString,
    int mask,
    _NSRange rangeOfReceiverToSearch,
  ) {
    return __objc_msgSend_342(
      obj,
      sel,
      searchString,
      mask,
      rangeOfReceiverToSearch,
    );
  }

  late final __objc_msgSend_342Ptr = _lookup<
    ffi.NativeFunction<
      _NSRange Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Int32,
        _NSRange,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_342 =
      __objc_msgSend_342Ptr
          .asFunction<
            _NSRange Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              int,
              _NSRange,
            )
          >();

  void _objc_msgSend_342_stret(
    ffi.Pointer<_NSRange> stret,
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> searchString,
    int mask,
    _NSRange rangeOfReceiverToSearch,
  ) {
    return __objc_msgSend_342_stret(
      stret,
      obj,
      sel,
      searchString,
      mask,
      rangeOfReceiverToSearch,
    );
  }

  late final __objc_msgSend_342_stretPtr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<_NSRange>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Int32,
        _NSRange,
      )
    >
  >('objc_msgSend_stret');
  late final __objc_msgSend_342_stret =
      __objc_msgSend_342_stretPtr
          .asFunction<
            void Function(
              ffi.Pointer<_NSRange>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              int,
              _NSRange,
            )
          >();

  late final _sel_rangeOfString_options_range_locale_1 = objc.registerName(
    "rangeOfString:options:range:locale:",
  );
  _NSRange _objc_msgSend_343(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> searchString,
    int mask,
    _NSRange rangeOfReceiverToSearch,
    ffi.Pointer<objc.ObjCObject> locale,
  ) {
    return __objc_msgSend_343(
      obj,
      sel,
      searchString,
      mask,
      rangeOfReceiverToSearch,
      locale,
    );
  }

  late final __objc_msgSend_343Ptr = _lookup<
    ffi.NativeFunction<
      _NSRange Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Int32,
        _NSRange,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_343 =
      __objc_msgSend_343Ptr
          .asFunction<
            _NSRange Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              int,
              _NSRange,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  void _objc_msgSend_343_stret(
    ffi.Pointer<_NSRange> stret,
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> searchString,
    int mask,
    _NSRange rangeOfReceiverToSearch,
    ffi.Pointer<objc.ObjCObject> locale,
  ) {
    return __objc_msgSend_343_stret(
      stret,
      obj,
      sel,
      searchString,
      mask,
      rangeOfReceiverToSearch,
      locale,
    );
  }

  late final __objc_msgSend_343_stretPtr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<_NSRange>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Int32,
        _NSRange,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend_stret');
  late final __objc_msgSend_343_stret =
      __objc_msgSend_343_stretPtr
          .asFunction<
            void Function(
              ffi.Pointer<_NSRange>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              int,
              _NSRange,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_rangeOfCharacterFromSet_1 = objc.registerName(
    "rangeOfCharacterFromSet:",
  );
  _NSRange _objc_msgSend_344(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> searchSet,
  ) {
    return __objc_msgSend_344(obj, sel, searchSet);
  }

  late final __objc_msgSend_344Ptr = _lookup<
    ffi.NativeFunction<
      _NSRange Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_344 =
      __objc_msgSend_344Ptr
          .asFunction<
            _NSRange Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  void _objc_msgSend_344_stret(
    ffi.Pointer<_NSRange> stret,
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> searchSet,
  ) {
    return __objc_msgSend_344_stret(stret, obj, sel, searchSet);
  }

  late final __objc_msgSend_344_stretPtr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<_NSRange>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend_stret');
  late final __objc_msgSend_344_stret =
      __objc_msgSend_344_stretPtr
          .asFunction<
            void Function(
              ffi.Pointer<_NSRange>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_rangeOfCharacterFromSet_options_1 = objc.registerName(
    "rangeOfCharacterFromSet:options:",
  );
  _NSRange _objc_msgSend_345(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> searchSet,
    int mask,
  ) {
    return __objc_msgSend_345(obj, sel, searchSet, mask);
  }

  late final __objc_msgSend_345Ptr = _lookup<
    ffi.NativeFunction<
      _NSRange Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Int32,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_345 =
      __objc_msgSend_345Ptr
          .asFunction<
            _NSRange Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              int,
            )
          >();

  void _objc_msgSend_345_stret(
    ffi.Pointer<_NSRange> stret,
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> searchSet,
    int mask,
  ) {
    return __objc_msgSend_345_stret(stret, obj, sel, searchSet, mask);
  }

  late final __objc_msgSend_345_stretPtr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<_NSRange>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Int32,
      )
    >
  >('objc_msgSend_stret');
  late final __objc_msgSend_345_stret =
      __objc_msgSend_345_stretPtr
          .asFunction<
            void Function(
              ffi.Pointer<_NSRange>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              int,
            )
          >();

  late final _sel_rangeOfCharacterFromSet_options_range_1 = objc.registerName(
    "rangeOfCharacterFromSet:options:range:",
  );
  _NSRange _objc_msgSend_346(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> searchSet,
    int mask,
    _NSRange rangeOfReceiverToSearch,
  ) {
    return __objc_msgSend_346(
      obj,
      sel,
      searchSet,
      mask,
      rangeOfReceiverToSearch,
    );
  }

  late final __objc_msgSend_346Ptr = _lookup<
    ffi.NativeFunction<
      _NSRange Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Int32,
        _NSRange,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_346 =
      __objc_msgSend_346Ptr
          .asFunction<
            _NSRange Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              int,
              _NSRange,
            )
          >();

  void _objc_msgSend_346_stret(
    ffi.Pointer<_NSRange> stret,
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> searchSet,
    int mask,
    _NSRange rangeOfReceiverToSearch,
  ) {
    return __objc_msgSend_346_stret(
      stret,
      obj,
      sel,
      searchSet,
      mask,
      rangeOfReceiverToSearch,
    );
  }

  late final __objc_msgSend_346_stretPtr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<_NSRange>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Int32,
        _NSRange,
      )
    >
  >('objc_msgSend_stret');
  late final __objc_msgSend_346_stret =
      __objc_msgSend_346_stretPtr
          .asFunction<
            void Function(
              ffi.Pointer<_NSRange>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              int,
              _NSRange,
            )
          >();

  late final _sel_rangeOfComposedCharacterSequenceAtIndex_1 = objc.registerName(
    "rangeOfComposedCharacterSequenceAtIndex:",
  );
  _NSRange _objc_msgSend_347(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int index,
  ) {
    return __objc_msgSend_347(obj, sel, index);
  }

  late final __objc_msgSend_347Ptr = _lookup<
    ffi.NativeFunction<
      _NSRange Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.UnsignedLong,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_347 =
      __objc_msgSend_347Ptr
          .asFunction<
            _NSRange Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
            )
          >();

  void _objc_msgSend_347_stret(
    ffi.Pointer<_NSRange> stret,
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int index,
  ) {
    return __objc_msgSend_347_stret(stret, obj, sel, index);
  }

  late final __objc_msgSend_347_stretPtr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<_NSRange>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.UnsignedLong,
      )
    >
  >('objc_msgSend_stret');
  late final __objc_msgSend_347_stret =
      __objc_msgSend_347_stretPtr
          .asFunction<
            void Function(
              ffi.Pointer<_NSRange>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
            )
          >();

  late final _sel_rangeOfComposedCharacterSequencesForRange_1 = objc
      .registerName("rangeOfComposedCharacterSequencesForRange:");
  _NSRange _objc_msgSend_348(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    _NSRange range,
  ) {
    return __objc_msgSend_348(obj, sel, range);
  }

  late final __objc_msgSend_348Ptr = _lookup<
    ffi.NativeFunction<
      _NSRange Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        _NSRange,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_348 =
      __objc_msgSend_348Ptr
          .asFunction<
            _NSRange Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              _NSRange,
            )
          >();

  void _objc_msgSend_348_stret(
    ffi.Pointer<_NSRange> stret,
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    _NSRange range,
  ) {
    return __objc_msgSend_348_stret(stret, obj, sel, range);
  }

  late final __objc_msgSend_348_stretPtr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<_NSRange>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        _NSRange,
      )
    >
  >('objc_msgSend_stret');
  late final __objc_msgSend_348_stret =
      __objc_msgSend_348_stretPtr
          .asFunction<
            void Function(
              ffi.Pointer<_NSRange>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              _NSRange,
            )
          >();

  late final _sel_stringByAppendingString_1 = objc.registerName(
    "stringByAppendingString:",
  );
  late final _sel_stringByAppendingFormat_1 = objc.registerName(
    "stringByAppendingFormat:",
  );
  late final _sel_uppercaseString1 = objc.registerName("uppercaseString");
  late final _sel_lowercaseString1 = objc.registerName("lowercaseString");
  late final _sel_capitalizedString1 = objc.registerName("capitalizedString");
  late final _sel_localizedUppercaseString1 = objc.registerName(
    "localizedUppercaseString",
  );
  late final _sel_localizedLowercaseString1 = objc.registerName(
    "localizedLowercaseString",
  );
  late final _sel_localizedCapitalizedString1 = objc.registerName(
    "localizedCapitalizedString",
  );
  late final _sel_uppercaseStringWithLocale_1 = objc.registerName(
    "uppercaseStringWithLocale:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_349(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> locale,
  ) {
    return __objc_msgSend_349(obj, sel, locale);
  }

  late final __objc_msgSend_349Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_349 =
      __objc_msgSend_349Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_lowercaseStringWithLocale_1 = objc.registerName(
    "lowercaseStringWithLocale:",
  );
  late final _sel_capitalizedStringWithLocale_1 = objc.registerName(
    "capitalizedStringWithLocale:",
  );
  late final _sel_getLineStart_end_contentsEnd_forRange_1 = objc.registerName(
    "getLineStart:end:contentsEnd:forRange:",
  );
  void _objc_msgSend_350(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<ffi.UnsignedLong> startPtr,
    ffi.Pointer<ffi.UnsignedLong> lineEndPtr,
    ffi.Pointer<ffi.UnsignedLong> contentsEndPtr,
    _NSRange range,
  ) {
    return __objc_msgSend_350(
      obj,
      sel,
      startPtr,
      lineEndPtr,
      contentsEndPtr,
      range,
    );
  }

  late final __objc_msgSend_350Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<ffi.UnsignedLong>,
        ffi.Pointer<ffi.UnsignedLong>,
        ffi.Pointer<ffi.UnsignedLong>,
        _NSRange,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_350 =
      __objc_msgSend_350Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<ffi.UnsignedLong>,
              ffi.Pointer<ffi.UnsignedLong>,
              ffi.Pointer<ffi.UnsignedLong>,
              _NSRange,
            )
          >();

  late final _sel_lineRangeForRange_1 = objc.registerName("lineRangeForRange:");
  late final _sel_getParagraphStart_end_contentsEnd_forRange_1 = objc
      .registerName("getParagraphStart:end:contentsEnd:forRange:");
  late final _sel_paragraphRangeForRange_1 = objc.registerName(
    "paragraphRangeForRange:",
  );
  late final _sel_enumerateSubstringsInRange_options_usingBlock_1 = objc
      .registerName("enumerateSubstringsInRange:options:usingBlock:");
  void _objc_msgSend_351(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    _NSRange range,
    int opts,
    ffi.Pointer<objc.ObjCBlock> block,
  ) {
    return __objc_msgSend_351(obj, sel, range, opts, block);
  }

  late final __objc_msgSend_351Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        _NSRange,
        ffi.Int32,
        ffi.Pointer<objc.ObjCBlock>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_351 =
      __objc_msgSend_351Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              _NSRange,
              int,
              ffi.Pointer<objc.ObjCBlock>,
            )
          >();

  late final _sel_enumerateLinesUsingBlock_1 = objc.registerName(
    "enumerateLinesUsingBlock:",
  );
  void _objc_msgSend_352(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCBlock> block,
  ) {
    return __objc_msgSend_352(obj, sel, block);
  }

  late final __objc_msgSend_352Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCBlock>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_352 =
      __objc_msgSend_352Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCBlock>,
            )
          >();

  late final _sel_UTF8String1 = objc.registerName("UTF8String");
  late final _sel_fastestEncoding1 = objc.registerName("fastestEncoding");
  late final _sel_smallestEncoding1 = objc.registerName("smallestEncoding");
  late final _sel_dataUsingEncoding_allowLossyConversion_1 = objc.registerName(
    "dataUsingEncoding:allowLossyConversion:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_353(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int encoding,
    bool lossy,
  ) {
    return __objc_msgSend_353(obj, sel, encoding, lossy);
  }

  late final __objc_msgSend_353Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.UnsignedLong,
        ffi.Bool,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_353 =
      __objc_msgSend_353Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
              bool,
            )
          >();

  late final _sel_dataUsingEncoding_1 = objc.registerName("dataUsingEncoding:");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_354(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int encoding,
  ) {
    return __objc_msgSend_354(obj, sel, encoding);
  }

  late final __objc_msgSend_354Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.UnsignedLong,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_354 =
      __objc_msgSend_354Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
            )
          >();

  late final _sel_canBeConvertedToEncoding_1 = objc.registerName(
    "canBeConvertedToEncoding:",
  );
  late final _sel_cStringUsingEncoding_1 = objc.registerName(
    "cStringUsingEncoding:",
  );
  late final _sel_getCString_maxLength_encoding_1 = objc.registerName(
    "getCString:maxLength:encoding:",
  );
  bool _objc_msgSend_355(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<ffi.Char> buffer,
    int maxBufferCount,
    int encoding,
  ) {
    return __objc_msgSend_355(obj, sel, buffer, maxBufferCount, encoding);
  }

  late final __objc_msgSend_355Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Bool Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<ffi.Char>,
        ffi.UnsignedLong,
        ffi.UnsignedLong,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_355 =
      __objc_msgSend_355Ptr
          .asFunction<
            bool Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<ffi.Char>,
              int,
              int,
            )
          >();

  late final _sel_getBytes_maxLength_usedLength_encoding_options_range_remainingRange_1 =
      objc.registerName(
        "getBytes:maxLength:usedLength:encoding:options:range:remainingRange:",
      );
  bool _objc_msgSend_356(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<ffi.Void> buffer,
    int maxBufferCount,
    ffi.Pointer<ffi.UnsignedLong> usedBufferCount,
    int encoding,
    int options,
    _NSRange range,
    ffi.Pointer<_NSRange> leftover,
  ) {
    return __objc_msgSend_356(
      obj,
      sel,
      buffer,
      maxBufferCount,
      usedBufferCount,
      encoding,
      options,
      range,
      leftover,
    );
  }

  late final __objc_msgSend_356Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Bool Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<ffi.Void>,
        ffi.UnsignedLong,
        ffi.Pointer<ffi.UnsignedLong>,
        ffi.UnsignedLong,
        ffi.Int32,
        _NSRange,
        ffi.Pointer<_NSRange>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_356 =
      __objc_msgSend_356Ptr
          .asFunction<
            bool Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<ffi.Void>,
              int,
              ffi.Pointer<ffi.UnsignedLong>,
              int,
              int,
              _NSRange,
              ffi.Pointer<_NSRange>,
            )
          >();

  late final _sel_maximumLengthOfBytesUsingEncoding_1 = objc.registerName(
    "maximumLengthOfBytesUsingEncoding:",
  );
  late final _sel_lengthOfBytesUsingEncoding_1 = objc.registerName(
    "lengthOfBytesUsingEncoding:",
  );
  late final _sel_availableStringEncodings1 = objc.registerName(
    "availableStringEncodings",
  );
  ffi.Pointer<ffi.UnsignedLong> _objc_msgSend_357(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_357(obj, sel);
  }

  late final __objc_msgSend_357Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<ffi.UnsignedLong> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_357 =
      __objc_msgSend_357Ptr
          .asFunction<
            ffi.Pointer<ffi.UnsignedLong> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_localizedNameOfStringEncoding_1 = objc.registerName(
    "localizedNameOfStringEncoding:",
  );
  late final _sel_defaultCStringEncoding1 = objc.registerName(
    "defaultCStringEncoding",
  );
  late final _sel_decomposedStringWithCanonicalMapping1 = objc.registerName(
    "decomposedStringWithCanonicalMapping",
  );
  late final _sel_precomposedStringWithCanonicalMapping1 = objc.registerName(
    "precomposedStringWithCanonicalMapping",
  );
  late final _sel_decomposedStringWithCompatibilityMapping1 = objc.registerName(
    "decomposedStringWithCompatibilityMapping",
  );
  late final _sel_precomposedStringWithCompatibilityMapping1 = objc
      .registerName("precomposedStringWithCompatibilityMapping");
  late final _sel_componentsSeparatedByString_1 = objc.registerName(
    "componentsSeparatedByString:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_358(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> separator,
  ) {
    return __objc_msgSend_358(obj, sel, separator);
  }

  late final __objc_msgSend_358Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_358 =
      __objc_msgSend_358Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_componentsSeparatedByCharactersInSet_1 = objc.registerName(
    "componentsSeparatedByCharactersInSet:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_359(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> separator,
  ) {
    return __objc_msgSend_359(obj, sel, separator);
  }

  late final __objc_msgSend_359Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_359 =
      __objc_msgSend_359Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_stringByTrimmingCharactersInSet_1 = objc.registerName(
    "stringByTrimmingCharactersInSet:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_360(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> set1,
  ) {
    return __objc_msgSend_360(obj, sel, set1);
  }

  late final __objc_msgSend_360Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_360 =
      __objc_msgSend_360Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_stringByPaddingToLength_withString_startingAtIndex_1 = objc
      .registerName("stringByPaddingToLength:withString:startingAtIndex:");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_361(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int newLength,
    ffi.Pointer<objc.ObjCObject> padString,
    int padIndex,
  ) {
    return __objc_msgSend_361(obj, sel, newLength, padString, padIndex);
  }

  late final __objc_msgSend_361Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.UnsignedLong,
        ffi.Pointer<objc.ObjCObject>,
        ffi.UnsignedLong,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_361 =
      __objc_msgSend_361Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
              ffi.Pointer<objc.ObjCObject>,
              int,
            )
          >();

  late final _sel_stringByFoldingWithOptions_locale_1 = objc.registerName(
    "stringByFoldingWithOptions:locale:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_362(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int options,
    ffi.Pointer<objc.ObjCObject> locale,
  ) {
    return __objc_msgSend_362(obj, sel, options, locale);
  }

  late final __objc_msgSend_362Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Int32,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_362 =
      __objc_msgSend_362Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_stringByReplacingOccurrencesOfString_withString_options_range_1 =
      objc.registerName(
        "stringByReplacingOccurrencesOfString:withString:options:range:",
      );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_363(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> target,
    ffi.Pointer<objc.ObjCObject> replacement,
    int options,
    _NSRange searchRange,
  ) {
    return __objc_msgSend_363(
      obj,
      sel,
      target,
      replacement,
      options,
      searchRange,
    );
  }

  late final __objc_msgSend_363Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Int32,
        _NSRange,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_363 =
      __objc_msgSend_363Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
              int,
              _NSRange,
            )
          >();

  late final _sel_stringByReplacingOccurrencesOfString_withString_1 = objc
      .registerName("stringByReplacingOccurrencesOfString:withString:");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_364(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> target,
    ffi.Pointer<objc.ObjCObject> replacement,
  ) {
    return __objc_msgSend_364(obj, sel, target, replacement);
  }

  late final __objc_msgSend_364Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_364 =
      __objc_msgSend_364Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_stringByReplacingCharactersInRange_withString_1 = objc
      .registerName("stringByReplacingCharactersInRange:withString:");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_365(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    _NSRange range,
    ffi.Pointer<objc.ObjCObject> replacement,
  ) {
    return __objc_msgSend_365(obj, sel, range, replacement);
  }

  late final __objc_msgSend_365Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        _NSRange,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_365 =
      __objc_msgSend_365Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              _NSRange,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_stringByApplyingTransform_reverse_1 = objc.registerName(
    "stringByApplyingTransform:reverse:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_366(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> transform,
    bool reverse,
  ) {
    return __objc_msgSend_366(obj, sel, transform, reverse);
  }

  late final __objc_msgSend_366Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Bool,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_366 =
      __objc_msgSend_366Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              bool,
            )
          >();

  late final _sel_writeToURL_atomically_encoding_error_1 = objc.registerName(
    "writeToURL:atomically:encoding:error:",
  );
  bool _objc_msgSend_367(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> url,
    bool useAuxiliaryFile,
    int enc,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    return __objc_msgSend_367(obj, sel, url, useAuxiliaryFile, enc, error);
  }

  late final __objc_msgSend_367Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Bool Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Bool,
        ffi.UnsignedLong,
        ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_367 =
      __objc_msgSend_367Ptr
          .asFunction<
            bool Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              bool,
              int,
              ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
            )
          >();

  late final _sel_writeToFile_atomically_encoding_error_1 = objc.registerName(
    "writeToFile:atomically:encoding:error:",
  );
  bool _objc_msgSend_368(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> path,
    bool useAuxiliaryFile,
    int enc,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    return __objc_msgSend_368(obj, sel, path, useAuxiliaryFile, enc, error);
  }

  late final __objc_msgSend_368Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Bool Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Bool,
        ffi.UnsignedLong,
        ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_368 =
      __objc_msgSend_368Ptr
          .asFunction<
            bool Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              bool,
              int,
              ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
            )
          >();

  late final _sel_hash1 = objc.registerName("hash");
  late final _sel_initWithCharactersNoCopy_length_freeWhenDone_1 = objc
      .registerName("initWithCharactersNoCopy:length:freeWhenDone:");
  instancetype _objc_msgSend_369(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<ffi.UnsignedShort> characters,
    int length,
    bool freeBuffer,
  ) {
    return __objc_msgSend_369(obj, sel, characters, length, freeBuffer);
  }

  late final __objc_msgSend_369Ptr = _lookup<
    ffi.NativeFunction<
      instancetype Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<ffi.UnsignedShort>,
        ffi.UnsignedLong,
        ffi.Bool,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_369 =
      __objc_msgSend_369Ptr
          .asFunction<
            instancetype Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<ffi.UnsignedShort>,
              int,
              bool,
            )
          >();

  late final _sel_initWithCharactersNoCopy_length_deallocator_1 = objc
      .registerName("initWithCharactersNoCopy:length:deallocator:");
  instancetype _objc_msgSend_370(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<ffi.UnsignedShort> chars,
    int len,
    ffi.Pointer<objc.ObjCBlock> deallocator,
  ) {
    return __objc_msgSend_370(obj, sel, chars, len, deallocator);
  }

  late final __objc_msgSend_370Ptr = _lookup<
    ffi.NativeFunction<
      instancetype Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<ffi.UnsignedShort>,
        ffi.UnsignedLong,
        ffi.Pointer<objc.ObjCBlock>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_370 =
      __objc_msgSend_370Ptr
          .asFunction<
            instancetype Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<ffi.UnsignedShort>,
              int,
              ffi.Pointer<objc.ObjCBlock>,
            )
          >();

  late final _sel_initWithCharacters_length_1 = objc.registerName(
    "initWithCharacters:length:",
  );
  instancetype _objc_msgSend_371(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<ffi.UnsignedShort> characters,
    int length,
  ) {
    return __objc_msgSend_371(obj, sel, characters, length);
  }

  late final __objc_msgSend_371Ptr = _lookup<
    ffi.NativeFunction<
      instancetype Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<ffi.UnsignedShort>,
        ffi.UnsignedLong,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_371 =
      __objc_msgSend_371Ptr
          .asFunction<
            instancetype Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<ffi.UnsignedShort>,
              int,
            )
          >();

  late final _sel_initWithUTF8String_1 = objc.registerName(
    "initWithUTF8String:",
  );
  instancetype _objc_msgSend_372(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<ffi.Char> nullTerminatedCString,
  ) {
    return __objc_msgSend_372(obj, sel, nullTerminatedCString);
  }

  late final __objc_msgSend_372Ptr = _lookup<
    ffi.NativeFunction<
      instancetype Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<ffi.Char>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_372 =
      __objc_msgSend_372Ptr
          .asFunction<
            instancetype Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<ffi.Char>,
            )
          >();

  late final _sel_initWithFormat_1 = objc.registerName("initWithFormat:");
  late final _sel_initWithFormat_arguments_1 = objc.registerName(
    "initWithFormat:arguments:",
  );
  instancetype _objc_msgSend_373(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> format,
    ffi.Pointer<__va_list_tag> argList,
  ) {
    return __objc_msgSend_373(obj, sel, format, argList);
  }

  late final __objc_msgSend_373Ptr = _lookup<
    ffi.NativeFunction<
      instancetype Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<__va_list_tag>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_373 =
      __objc_msgSend_373Ptr
          .asFunction<
            instancetype Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<__va_list_tag>,
            )
          >();

  late final _sel_initWithFormat_locale_1 = objc.registerName(
    "initWithFormat:locale:",
  );
  instancetype _objc_msgSend_374(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> format,
    ffi.Pointer<objc.ObjCObject> locale,
  ) {
    return __objc_msgSend_374(obj, sel, format, locale);
  }

  late final __objc_msgSend_374Ptr = _lookup<
    ffi.NativeFunction<
      instancetype Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_374 =
      __objc_msgSend_374Ptr
          .asFunction<
            instancetype Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_initWithFormat_locale_arguments_1 = objc.registerName(
    "initWithFormat:locale:arguments:",
  );
  instancetype _objc_msgSend_375(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> format,
    ffi.Pointer<objc.ObjCObject> locale,
    ffi.Pointer<__va_list_tag> argList,
  ) {
    return __objc_msgSend_375(obj, sel, format, locale, argList);
  }

  late final __objc_msgSend_375Ptr = _lookup<
    ffi.NativeFunction<
      instancetype Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<__va_list_tag>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_375 =
      __objc_msgSend_375Ptr
          .asFunction<
            instancetype Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<__va_list_tag>,
            )
          >();

  late final _sel_initWithValidatedFormat_validFormatSpecifiers_error_1 = objc
      .registerName("initWithValidatedFormat:validFormatSpecifiers:error:");
  instancetype _objc_msgSend_376(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> format,
    ffi.Pointer<objc.ObjCObject> validFormatSpecifiers,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    return __objc_msgSend_376(obj, sel, format, validFormatSpecifiers, error);
  }

  late final __objc_msgSend_376Ptr = _lookup<
    ffi.NativeFunction<
      instancetype Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_376 =
      __objc_msgSend_376Ptr
          .asFunction<
            instancetype Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
            )
          >();

  late final _sel_initWithValidatedFormat_validFormatSpecifiers_locale_error_1 =
      objc.registerName(
        "initWithValidatedFormat:validFormatSpecifiers:locale:error:",
      );
  instancetype _objc_msgSend_377(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> format,
    ffi.Pointer<objc.ObjCObject> validFormatSpecifiers,
    ffi.Pointer<objc.ObjCObject> locale,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    return __objc_msgSend_377(
      obj,
      sel,
      format,
      validFormatSpecifiers,
      locale,
      error,
    );
  }

  late final __objc_msgSend_377Ptr = _lookup<
    ffi.NativeFunction<
      instancetype Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_377 =
      __objc_msgSend_377Ptr
          .asFunction<
            instancetype Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
            )
          >();

  late final _sel_initWithValidatedFormat_validFormatSpecifiers_arguments_error_1 =
      objc.registerName(
        "initWithValidatedFormat:validFormatSpecifiers:arguments:error:",
      );
  instancetype _objc_msgSend_378(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> format,
    ffi.Pointer<objc.ObjCObject> validFormatSpecifiers,
    ffi.Pointer<__va_list_tag> argList,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    return __objc_msgSend_378(
      obj,
      sel,
      format,
      validFormatSpecifiers,
      argList,
      error,
    );
  }

  late final __objc_msgSend_378Ptr = _lookup<
    ffi.NativeFunction<
      instancetype Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<__va_list_tag>,
        ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_378 =
      __objc_msgSend_378Ptr
          .asFunction<
            instancetype Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<__va_list_tag>,
              ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
            )
          >();

  late final _sel_initWithValidatedFormat_validFormatSpecifiers_locale_arguments_error_1 =
      objc.registerName(
        "initWithValidatedFormat:validFormatSpecifiers:locale:arguments:error:",
      );
  instancetype _objc_msgSend_379(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> format,
    ffi.Pointer<objc.ObjCObject> validFormatSpecifiers,
    ffi.Pointer<objc.ObjCObject> locale,
    ffi.Pointer<__va_list_tag> argList,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    return __objc_msgSend_379(
      obj,
      sel,
      format,
      validFormatSpecifiers,
      locale,
      argList,
      error,
    );
  }

  late final __objc_msgSend_379Ptr = _lookup<
    ffi.NativeFunction<
      instancetype Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<__va_list_tag>,
        ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_379 =
      __objc_msgSend_379Ptr
          .asFunction<
            instancetype Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<__va_list_tag>,
              ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
            )
          >();

  late final _sel_initWithData_encoding_1 = objc.registerName(
    "initWithData:encoding:",
  );
  instancetype _objc_msgSend_380(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> data,
    int encoding,
  ) {
    return __objc_msgSend_380(obj, sel, data, encoding);
  }

  late final __objc_msgSend_380Ptr = _lookup<
    ffi.NativeFunction<
      instancetype Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.UnsignedLong,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_380 =
      __objc_msgSend_380Ptr
          .asFunction<
            instancetype Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              int,
            )
          >();

  late final _sel_initWithBytes_length_encoding_1 = objc.registerName(
    "initWithBytes:length:encoding:",
  );
  instancetype _objc_msgSend_381(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<ffi.Void> bytes,
    int len,
    int encoding,
  ) {
    return __objc_msgSend_381(obj, sel, bytes, len, encoding);
  }

  late final __objc_msgSend_381Ptr = _lookup<
    ffi.NativeFunction<
      instancetype Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<ffi.Void>,
        ffi.UnsignedLong,
        ffi.UnsignedLong,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_381 =
      __objc_msgSend_381Ptr
          .asFunction<
            instancetype Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<ffi.Void>,
              int,
              int,
            )
          >();

  late final _sel_initWithBytesNoCopy_length_encoding_freeWhenDone_1 = objc
      .registerName("initWithBytesNoCopy:length:encoding:freeWhenDone:");
  instancetype _objc_msgSend_382(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<ffi.Void> bytes,
    int len,
    int encoding,
    bool freeBuffer,
  ) {
    return __objc_msgSend_382(obj, sel, bytes, len, encoding, freeBuffer);
  }

  late final __objc_msgSend_382Ptr = _lookup<
    ffi.NativeFunction<
      instancetype Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<ffi.Void>,
        ffi.UnsignedLong,
        ffi.UnsignedLong,
        ffi.Bool,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_382 =
      __objc_msgSend_382Ptr
          .asFunction<
            instancetype Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<ffi.Void>,
              int,
              int,
              bool,
            )
          >();

  late final _sel_initWithBytesNoCopy_length_encoding_deallocator_1 = objc
      .registerName("initWithBytesNoCopy:length:encoding:deallocator:");
  instancetype _objc_msgSend_383(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<ffi.Void> bytes,
    int len,
    int encoding,
    ffi.Pointer<objc.ObjCBlock> deallocator,
  ) {
    return __objc_msgSend_383(obj, sel, bytes, len, encoding, deallocator);
  }

  late final __objc_msgSend_383Ptr = _lookup<
    ffi.NativeFunction<
      instancetype Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<ffi.Void>,
        ffi.UnsignedLong,
        ffi.UnsignedLong,
        ffi.Pointer<objc.ObjCBlock>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_383 =
      __objc_msgSend_383Ptr
          .asFunction<
            instancetype Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<ffi.Void>,
              int,
              int,
              ffi.Pointer<objc.ObjCBlock>,
            )
          >();

  late final _sel_string1 = objc.registerName("string");
  late final _sel_stringWithString_1 = objc.registerName("stringWithString:");
  late final _sel_stringWithCharacters_length_1 = objc.registerName(
    "stringWithCharacters:length:",
  );
  late final _sel_stringWithUTF8String_1 = objc.registerName(
    "stringWithUTF8String:",
  );
  late final _sel_stringWithFormat_1 = objc.registerName("stringWithFormat:");
  late final _sel_localizedStringWithFormat_1 = objc.registerName(
    "localizedStringWithFormat:",
  );
  late final _sel_stringWithValidatedFormat_validFormatSpecifiers_error_1 = objc
      .registerName("stringWithValidatedFormat:validFormatSpecifiers:error:");
  late final _sel_localizedStringWithValidatedFormat_validFormatSpecifiers_error_1 =
      objc.registerName(
        "localizedStringWithValidatedFormat:validFormatSpecifiers:error:",
      );
  late final _sel_initWithCString_encoding_1 = objc.registerName(
    "initWithCString:encoding:",
  );
  instancetype _objc_msgSend_384(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<ffi.Char> nullTerminatedCString,
    int encoding,
  ) {
    return __objc_msgSend_384(obj, sel, nullTerminatedCString, encoding);
  }

  late final __objc_msgSend_384Ptr = _lookup<
    ffi.NativeFunction<
      instancetype Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<ffi.Char>,
        ffi.UnsignedLong,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_384 =
      __objc_msgSend_384Ptr
          .asFunction<
            instancetype Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<ffi.Char>,
              int,
            )
          >();

  late final _sel_stringWithCString_encoding_1 = objc.registerName(
    "stringWithCString:encoding:",
  );
  late final _sel_initWithContentsOfURL_encoding_error_1 = objc.registerName(
    "initWithContentsOfURL:encoding:error:",
  );
  instancetype _objc_msgSend_385(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> url,
    int enc,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    return __objc_msgSend_385(obj, sel, url, enc, error);
  }

  late final __objc_msgSend_385Ptr = _lookup<
    ffi.NativeFunction<
      instancetype Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.UnsignedLong,
        ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_385 =
      __objc_msgSend_385Ptr
          .asFunction<
            instancetype Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              int,
              ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
            )
          >();

  late final _sel_initWithContentsOfFile_encoding_error_1 = objc.registerName(
    "initWithContentsOfFile:encoding:error:",
  );
  instancetype _objc_msgSend_386(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> path,
    int enc,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    return __objc_msgSend_386(obj, sel, path, enc, error);
  }

  late final __objc_msgSend_386Ptr = _lookup<
    ffi.NativeFunction<
      instancetype Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.UnsignedLong,
        ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_386 =
      __objc_msgSend_386Ptr
          .asFunction<
            instancetype Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              int,
              ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
            )
          >();

  late final _sel_stringWithContentsOfURL_encoding_error_1 = objc.registerName(
    "stringWithContentsOfURL:encoding:error:",
  );
  late final _sel_stringWithContentsOfFile_encoding_error_1 = objc.registerName(
    "stringWithContentsOfFile:encoding:error:",
  );
  late final _sel_initWithContentsOfURL_usedEncoding_error_1 = objc
      .registerName("initWithContentsOfURL:usedEncoding:error:");
  instancetype _objc_msgSend_387(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> url,
    ffi.Pointer<ffi.UnsignedLong> enc,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    return __objc_msgSend_387(obj, sel, url, enc, error);
  }

  late final __objc_msgSend_387Ptr = _lookup<
    ffi.NativeFunction<
      instancetype Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<ffi.UnsignedLong>,
        ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_387 =
      __objc_msgSend_387Ptr
          .asFunction<
            instancetype Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<ffi.UnsignedLong>,
              ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
            )
          >();

  late final _sel_initWithContentsOfFile_usedEncoding_error_1 = objc
      .registerName("initWithContentsOfFile:usedEncoding:error:");
  instancetype _objc_msgSend_388(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> path,
    ffi.Pointer<ffi.UnsignedLong> enc,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    return __objc_msgSend_388(obj, sel, path, enc, error);
  }

  late final __objc_msgSend_388Ptr = _lookup<
    ffi.NativeFunction<
      instancetype Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<ffi.UnsignedLong>,
        ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_388 =
      __objc_msgSend_388Ptr
          .asFunction<
            instancetype Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<ffi.UnsignedLong>,
              ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
            )
          >();

  late final _sel_stringWithContentsOfURL_usedEncoding_error_1 = objc
      .registerName("stringWithContentsOfURL:usedEncoding:error:");
  late final _sel_stringWithContentsOfFile_usedEncoding_error_1 = objc
      .registerName("stringWithContentsOfFile:usedEncoding:error:");
  late final _sel_stringEncodingForData_encodingOptions_convertedString_usedLossyConversion_1 =
      objc.registerName(
        "stringEncodingForData:encodingOptions:convertedString:usedLossyConversion:",
      );
  int _objc_msgSend_389(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> data,
    ffi.Pointer<objc.ObjCObject> opts,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> string,
    ffi.Pointer<ffi.Bool> usedLossyConversion,
  ) {
    return __objc_msgSend_389(
      obj,
      sel,
      data,
      opts,
      string,
      usedLossyConversion,
    );
  }

  late final __objc_msgSend_389Ptr = _lookup<
    ffi.NativeFunction<
      ffi.UnsignedLong Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
        ffi.Pointer<ffi.Bool>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_389 =
      __objc_msgSend_389Ptr
          .asFunction<
            int Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
              ffi.Pointer<ffi.Bool>,
            )
          >();

  late final _sel_propertyList1 = objc.registerName("propertyList");
  late final _sel_propertyListFromStringsFileFormat1 = objc.registerName(
    "propertyListFromStringsFileFormat",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_390(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_390(obj, sel);
  }

  late final __objc_msgSend_390Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_390 =
      __objc_msgSend_390Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_cString1 = objc.registerName("cString");
  late final _sel_lossyCString1 = objc.registerName("lossyCString");
  late final _sel_cStringLength1 = objc.registerName("cStringLength");
  late final _sel_getCString_1 = objc.registerName("getCString:");
  late final _sel_getCString_maxLength_1 = objc.registerName(
    "getCString:maxLength:",
  );
  void _objc_msgSend_391(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<ffi.Char> bytes,
    int maxLength,
  ) {
    return __objc_msgSend_391(obj, sel, bytes, maxLength);
  }

  late final __objc_msgSend_391Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<ffi.Char>,
        ffi.UnsignedLong,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_391 =
      __objc_msgSend_391Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<ffi.Char>,
              int,
            )
          >();

  late final _sel_getCString_maxLength_range_remainingRange_1 = objc
      .registerName("getCString:maxLength:range:remainingRange:");
  void _objc_msgSend_392(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<ffi.Char> bytes,
    int maxLength,
    _NSRange aRange,
    ffi.Pointer<_NSRange> leftoverRange,
  ) {
    return __objc_msgSend_392(
      obj,
      sel,
      bytes,
      maxLength,
      aRange,
      leftoverRange,
    );
  }

  late final __objc_msgSend_392Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<ffi.Char>,
        ffi.UnsignedLong,
        _NSRange,
        ffi.Pointer<_NSRange>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_392 =
      __objc_msgSend_392Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<ffi.Char>,
              int,
              _NSRange,
              ffi.Pointer<_NSRange>,
            )
          >();

  late final _sel_stringWithContentsOfFile_1 = objc.registerName(
    "stringWithContentsOfFile:",
  );
  late final _sel_stringWithContentsOfURL_1 = objc.registerName(
    "stringWithContentsOfURL:",
  );
  late final _sel_initWithCStringNoCopy_length_freeWhenDone_1 = objc
      .registerName("initWithCStringNoCopy:length:freeWhenDone:");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_393(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<ffi.Char> bytes,
    int length,
    bool freeBuffer,
  ) {
    return __objc_msgSend_393(obj, sel, bytes, length, freeBuffer);
  }

  late final __objc_msgSend_393Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<ffi.Char>,
        ffi.UnsignedLong,
        ffi.Bool,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_393 =
      __objc_msgSend_393Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<ffi.Char>,
              int,
              bool,
            )
          >();

  late final _sel_initWithCString_length_1 = objc.registerName(
    "initWithCString:length:",
  );
  late final _sel_initWithCString_1 = objc.registerName("initWithCString:");
  late final _sel_stringWithCString_length_1 = objc.registerName(
    "stringWithCString:length:",
  );
  late final _sel_stringWithCString_1 = objc.registerName("stringWithCString:");
  late final _sel_getCharacters_1 = objc.registerName("getCharacters:");
  void _objc_msgSend_394(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<ffi.UnsignedShort> buffer,
  ) {
    return __objc_msgSend_394(obj, sel, buffer);
  }

  late final __objc_msgSend_394Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<ffi.UnsignedShort>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_394 =
      __objc_msgSend_394Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<ffi.UnsignedShort>,
            )
          >();

  late final _sel_variantFittingPresentationWidth_1 = objc.registerName(
    "variantFittingPresentationWidth:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_395(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int width,
  ) {
    return __objc_msgSend_395(obj, sel, width);
  }

  late final __objc_msgSend_395Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Long,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_395 =
      __objc_msgSend_395Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
            )
          >();

  late final _sel_pathWithComponents_1 = objc.registerName(
    "pathWithComponents:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_396(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> components,
  ) {
    return __objc_msgSend_396(obj, sel, components);
  }

  late final __objc_msgSend_396Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_396 =
      __objc_msgSend_396Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_isAbsolutePath1 = objc.registerName("isAbsolutePath");
  late final _sel_stringByDeletingLastPathComponent1 = objc.registerName(
    "stringByDeletingLastPathComponent",
  );
  late final _sel_stringByAppendingPathComponent_1 = objc.registerName(
    "stringByAppendingPathComponent:",
  );
  late final _sel_stringByDeletingPathExtension1 = objc.registerName(
    "stringByDeletingPathExtension",
  );
  late final _sel_stringByAppendingPathExtension_1 = objc.registerName(
    "stringByAppendingPathExtension:",
  );
  late final _sel_stringByAbbreviatingWithTildeInPath1 = objc.registerName(
    "stringByAbbreviatingWithTildeInPath",
  );
  late final _sel_stringByExpandingTildeInPath1 = objc.registerName(
    "stringByExpandingTildeInPath",
  );
  late final _sel_stringByStandardizingPath1 = objc.registerName(
    "stringByStandardizingPath",
  );
  late final _sel_stringByResolvingSymlinksInPath1 = objc.registerName(
    "stringByResolvingSymlinksInPath",
  );
  late final _sel_stringsByAppendingPaths_1 = objc.registerName(
    "stringsByAppendingPaths:",
  );
  late final _sel_completePathIntoString_caseSensitive_matchesIntoArray_filterTypes_1 =
      objc.registerName(
        "completePathIntoString:caseSensitive:matchesIntoArray:filterTypes:",
      );
  int _objc_msgSend_397(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outputName,
    bool flag,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outputArray,
    ffi.Pointer<objc.ObjCObject> filterTypes,
  ) {
    return __objc_msgSend_397(
      obj,
      sel,
      outputName,
      flag,
      outputArray,
      filterTypes,
    );
  }

  late final __objc_msgSend_397Ptr = _lookup<
    ffi.NativeFunction<
      ffi.UnsignedLong Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
        ffi.Bool,
        ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_397 =
      __objc_msgSend_397Ptr
          .asFunction<
            int Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
              bool,
              ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_stringByAddingPercentEncodingWithAllowedCharacters_1 = objc
      .registerName("stringByAddingPercentEncodingWithAllowedCharacters:");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_398(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> allowedCharacters,
  ) {
    return __objc_msgSend_398(obj, sel, allowedCharacters);
  }

  late final __objc_msgSend_398Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_398 =
      __objc_msgSend_398Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_stringByRemovingPercentEncoding1 = objc.registerName(
    "stringByRemovingPercentEncoding",
  );
  late final _sel_stringByAddingPercentEscapesUsingEncoding_1 = objc
      .registerName("stringByAddingPercentEscapesUsingEncoding:");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_399(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int enc,
  ) {
    return __objc_msgSend_399(obj, sel, enc);
  }

  late final __objc_msgSend_399Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.UnsignedLong,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_399 =
      __objc_msgSend_399Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
            )
          >();

  late final _sel_stringByReplacingPercentEscapesUsingEncoding_1 = objc
      .registerName("stringByReplacingPercentEscapesUsingEncoding:");
  late final _class_NSOrthography1 = objc.getClass("NSOrthography");
  late final _sel_dominantScript1 = objc.registerName("dominantScript");
  late final _sel_languageMap1 = objc.registerName("languageMap");
  late final _sel_initWithDominantScript_languageMap_1 = objc.registerName(
    "initWithDominantScript:languageMap:",
  );
  instancetype _objc_msgSend_400(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> script,
    ffi.Pointer<objc.ObjCObject> map,
  ) {
    return __objc_msgSend_400(obj, sel, script, map);
  }

  late final __objc_msgSend_400Ptr = _lookup<
    ffi.NativeFunction<
      instancetype Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_400 =
      __objc_msgSend_400Ptr
          .asFunction<
            instancetype Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_languagesForScript_1 = objc.registerName(
    "languagesForScript:",
  );
  late final _sel_dominantLanguageForScript_1 = objc.registerName(
    "dominantLanguageForScript:",
  );
  late final _sel_dominantLanguage1 = objc.registerName("dominantLanguage");
  late final _sel_allScripts1 = objc.registerName("allScripts");
  late final _sel_allLanguages1 = objc.registerName("allLanguages");
  late final _sel_defaultOrthographyForLanguage_1 = objc.registerName(
    "defaultOrthographyForLanguage:",
  );
  late final _sel_orthographyWithDominantScript_languageMap_1 = objc
      .registerName("orthographyWithDominantScript:languageMap:");
  late final _sel_linguisticTagsInRange_scheme_options_orthography_tokenRanges_1 =
      objc.registerName(
        "linguisticTagsInRange:scheme:options:orthography:tokenRanges:",
      );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_401(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    _NSRange range,
    ffi.Pointer<objc.ObjCObject> scheme,
    int options,
    ffi.Pointer<objc.ObjCObject> orthography,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> tokenRanges,
  ) {
    return __objc_msgSend_401(
      obj,
      sel,
      range,
      scheme,
      options,
      orthography,
      tokenRanges,
    );
  }

  late final __objc_msgSend_401Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        _NSRange,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Int32,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_401 =
      __objc_msgSend_401Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              _NSRange,
              ffi.Pointer<objc.ObjCObject>,
              int,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
            )
          >();

  late final _sel_enumerateLinguisticTagsInRange_scheme_options_orthography_usingBlock_1 =
      objc.registerName(
        "enumerateLinguisticTagsInRange:scheme:options:orthography:usingBlock:",
      );
  void _objc_msgSend_402(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    _NSRange range,
    ffi.Pointer<objc.ObjCObject> scheme,
    int options,
    ffi.Pointer<objc.ObjCObject> orthography,
    ffi.Pointer<objc.ObjCBlock> block,
  ) {
    return __objc_msgSend_402(
      obj,
      sel,
      range,
      scheme,
      options,
      orthography,
      block,
    );
  }

  late final __objc_msgSend_402Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        _NSRange,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Int32,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCBlock>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_402 =
      __objc_msgSend_402Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              _NSRange,
              ffi.Pointer<objc.ObjCObject>,
              int,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCBlock>,
            )
          >();

  late final _sel_anyObject1 = objc.registerName("anyObject");
  late final _sel_intersectsSet_1 = objc.registerName("intersectsSet:");
  bool _objc_msgSend_403(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> otherSet,
  ) {
    return __objc_msgSend_403(obj, sel, otherSet);
  }

  late final __objc_msgSend_403Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Bool Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_403 =
      __objc_msgSend_403Ptr
          .asFunction<
            bool Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_isEqualToSet_1 = objc.registerName("isEqualToSet:");
  late final _sel_isSubsetOfSet_1 = objc.registerName("isSubsetOfSet:");
  late final _sel_setByAddingObject_1 = objc.registerName("setByAddingObject:");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_404(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> anObject,
  ) {
    return __objc_msgSend_404(obj, sel, anObject);
  }

  late final __objc_msgSend_404Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_404 =
      __objc_msgSend_404Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_setByAddingObjectsFromSet_1 = objc.registerName(
    "setByAddingObjectsFromSet:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_405(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> other,
  ) {
    return __objc_msgSend_405(obj, sel, other);
  }

  late final __objc_msgSend_405Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_405 =
      __objc_msgSend_405Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_setByAddingObjectsFromArray_1 = objc.registerName(
    "setByAddingObjectsFromArray:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_406(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> other,
  ) {
    return __objc_msgSend_406(obj, sel, other);
  }

  late final __objc_msgSend_406Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_406 =
      __objc_msgSend_406Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  void _objc_msgSend_407(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCBlock> block,
  ) {
    return __objc_msgSend_407(obj, sel, block);
  }

  late final __objc_msgSend_407Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCBlock>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_407 =
      __objc_msgSend_407Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCBlock>,
            )
          >();

  void _objc_msgSend_408(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int opts,
    ffi.Pointer<objc.ObjCBlock> block,
  ) {
    return __objc_msgSend_408(obj, sel, opts, block);
  }

  late final __objc_msgSend_408Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Int32,
        ffi.Pointer<objc.ObjCBlock>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_408 =
      __objc_msgSend_408Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
              ffi.Pointer<objc.ObjCBlock>,
            )
          >();

  late final _sel_objectsPassingTest_1 = objc.registerName(
    "objectsPassingTest:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_409(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCBlock> predicate,
  ) {
    return __objc_msgSend_409(obj, sel, predicate);
  }

  late final __objc_msgSend_409Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCBlock>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_409 =
      __objc_msgSend_409Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCBlock>,
            )
          >();

  late final _sel_objectsWithOptions_passingTest_1 = objc.registerName(
    "objectsWithOptions:passingTest:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_410(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int opts,
    ffi.Pointer<objc.ObjCBlock> predicate,
  ) {
    return __objc_msgSend_410(obj, sel, opts, predicate);
  }

  late final __objc_msgSend_410Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Int32,
        ffi.Pointer<objc.ObjCBlock>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_410 =
      __objc_msgSend_410Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
              ffi.Pointer<objc.ObjCBlock>,
            )
          >();

  late final _sel_set1 = objc.registerName("set");
  late final _sel_setWithObject_1 = objc.registerName("setWithObject:");
  late final _sel_setWithObjects_count_1 = objc.registerName(
    "setWithObjects:count:",
  );
  late final _sel_setWithObjects_1 = objc.registerName("setWithObjects:");
  late final _sel_setWithSet_1 = objc.registerName("setWithSet:");
  instancetype _objc_msgSend_411(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> set1,
  ) {
    return __objc_msgSend_411(obj, sel, set1);
  }

  late final __objc_msgSend_411Ptr = _lookup<
    ffi.NativeFunction<
      instancetype Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_411 =
      __objc_msgSend_411Ptr
          .asFunction<
            instancetype Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_setWithArray_1 = objc.registerName("setWithArray:");
  late final _sel_initWithSet_1 = objc.registerName("initWithSet:");
  late final _sel_initWithSet_copyItems_1 = objc.registerName(
    "initWithSet:copyItems:",
  );
  instancetype _objc_msgSend_412(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> set1,
    bool flag,
  ) {
    return __objc_msgSend_412(obj, sel, set1, flag);
  }

  late final __objc_msgSend_412Ptr = _lookup<
    ffi.NativeFunction<
      instancetype Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Bool,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_412 =
      __objc_msgSend_412Ptr
          .asFunction<
            instancetype Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              bool,
            )
          >();

  late final _sel_filteredSetUsingPredicate_1 = objc.registerName(
    "filteredSetUsingPredicate:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_413(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> predicate,
  ) {
    return __objc_msgSend_413(obj, sel, predicate);
  }

  late final __objc_msgSend_413Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_413 =
      __objc_msgSend_413Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_invocationWithMethodSignature_1 = objc.registerName(
    "invocationWithMethodSignature:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_414(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> sig,
  ) {
    return __objc_msgSend_414(obj, sel, sig);
  }

  late final __objc_msgSend_414Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_414 =
      __objc_msgSend_414Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_methodSignature1 = objc.registerName("methodSignature");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_415(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_415(obj, sel);
  }

  late final __objc_msgSend_415Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_415 =
      __objc_msgSend_415Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_retainArguments1 = objc.registerName("retainArguments");
  late final _sel_argumentsRetained1 = objc.registerName("argumentsRetained");
  late final _sel_target1 = objc.registerName("target");
  late final _sel_setTarget_1 = objc.registerName("setTarget:");
  void _objc_msgSend_416(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> value,
  ) {
    return __objc_msgSend_416(obj, sel, value);
  }

  late final __objc_msgSend_416Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_416 =
      __objc_msgSend_416Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_selector1 = objc.registerName("selector");
  ffi.Pointer<objc.ObjCSelector> _objc_msgSend_417(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_417(obj, sel);
  }

  late final __objc_msgSend_417Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCSelector> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_417 =
      __objc_msgSend_417Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCSelector> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_setSelector_1 = objc.registerName("setSelector:");
  void _objc_msgSend_418(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCSelector> value,
  ) {
    return __objc_msgSend_418(obj, sel, value);
  }

  late final __objc_msgSend_418Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_418 =
      __objc_msgSend_418Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_getReturnValue_1 = objc.registerName("getReturnValue:");
  late final _sel_setReturnValue_1 = objc.registerName("setReturnValue:");
  late final _sel_getArgument_atIndex_1 = objc.registerName(
    "getArgument:atIndex:",
  );
  void _objc_msgSend_419(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<ffi.Void> argumentLocation,
    int idx,
  ) {
    return __objc_msgSend_419(obj, sel, argumentLocation, idx);
  }

  late final __objc_msgSend_419Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<ffi.Void>,
        ffi.Long,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_419 =
      __objc_msgSend_419Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<ffi.Void>,
              int,
            )
          >();

  late final _sel_setArgument_atIndex_1 = objc.registerName(
    "setArgument:atIndex:",
  );
  late final _sel_invoke1 = objc.registerName("invoke");
  late final _sel_invokeWithTarget_1 = objc.registerName("invokeWithTarget:");
  late final _sel_invokeUsingIMP_1 = objc.registerName("invokeUsingIMP:");
  void _objc_msgSend_420(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> imp,
  ) {
    return __objc_msgSend_420(obj, sel, imp);
  }

  late final __objc_msgSend_420Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_420 =
      __objc_msgSend_420Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>,
            )
          >();

  late final _sel_forwardInvocation_1 = objc.registerName("forwardInvocation:");
  void _objc_msgSend_421(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> anInvocation,
  ) {
    return __objc_msgSend_421(obj, sel, anInvocation);
  }

  late final __objc_msgSend_421Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_421 =
      __objc_msgSend_421Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_methodSignatureForSelector_1 = objc.registerName(
    "methodSignatureForSelector:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_422(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCSelector> aSelector,
  ) {
    return __objc_msgSend_422(obj, sel, aSelector);
  }

  late final __objc_msgSend_422Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_422 =
      __objc_msgSend_422Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_instanceMethodSignatureForSelector_1 = objc.registerName(
    "instanceMethodSignatureForSelector:",
  );
  late final _sel_allowsWeakReference1 = objc.registerName(
    "allowsWeakReference",
  );
  late final _sel_retainWeakReference1 = objc.registerName(
    "retainWeakReference",
  );
  late final _sel_isSubclassOfClass_1 = objc.registerName("isSubclassOfClass:");
  late final _sel_resolveClassMethod_1 = objc.registerName(
    "resolveClassMethod:",
  );
  late final _sel_resolveInstanceMethod_1 = objc.registerName(
    "resolveInstanceMethod:",
  );
  late final _sel_superclass1 = objc.registerName("superclass");
  late final _sel_class1 = objc.registerName("class");
  late final _sel_debugDescription1 = objc.registerName("debugDescription");
  late final _sel_version1 = objc.registerName("version");
  late final _sel_setVersion_1 = objc.registerName("setVersion:");
  void _objc_msgSend_423(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int aVersion,
  ) {
    return __objc_msgSend_423(obj, sel, aVersion);
  }

  late final __objc_msgSend_423Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Long,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_423 =
      __objc_msgSend_423Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
            )
          >();

  late final _sel_classForCoder1 = objc.registerName("classForCoder");
  late final _sel_replacementObjectForCoder_1 = objc.registerName(
    "replacementObjectForCoder:",
  );
  late final _sel_awakeAfterUsingCoder_1 = objc.registerName(
    "awakeAfterUsingCoder:",
  );
  late final _sel_poseAsClass_1 = objc.registerName("poseAsClass:");
  late final _sel_autoContentAccessingProxy1 = objc.registerName(
    "autoContentAccessingProxy",
  );
  late final _sel_attemptRecoveryFromError_optionIndex_delegate_didRecoverSelector_contextInfo_1 =
      objc.registerName(
        "attemptRecoveryFromError:optionIndex:delegate:didRecoverSelector:contextInfo:",
      );
  void _objc_msgSend_424(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> error,
    int recoveryOptionIndex,
    ffi.Pointer<objc.ObjCObject> delegate,
    ffi.Pointer<objc.ObjCSelector> didRecoverSelector,
    ffi.Pointer<ffi.Void> contextInfo,
  ) {
    return __objc_msgSend_424(
      obj,
      sel,
      error,
      recoveryOptionIndex,
      delegate,
      didRecoverSelector,
      contextInfo,
    );
  }

  late final __objc_msgSend_424Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.UnsignedLong,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<ffi.Void>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_424 =
      __objc_msgSend_424Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              int,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<ffi.Void>,
            )
          >();

  late final _sel_attemptRecoveryFromError_optionIndex_1 = objc.registerName(
    "attemptRecoveryFromError:optionIndex:",
  );
  bool _objc_msgSend_425(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> error,
    int recoveryOptionIndex,
  ) {
    return __objc_msgSend_425(obj, sel, error, recoveryOptionIndex);
  }

  late final __objc_msgSend_425Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Bool Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.UnsignedLong,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_425 =
      __objc_msgSend_425Ptr
          .asFunction<
            bool Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              int,
            )
          >();

  late final _sel_performSelector_withObject_afterDelay_inModes_1 = objc
      .registerName("performSelector:withObject:afterDelay:inModes:");
  void _objc_msgSend_426(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCSelector> aSelector,
    ffi.Pointer<objc.ObjCObject> anArgument,
    double delay,
    ffi.Pointer<objc.ObjCObject> modes,
  ) {
    return __objc_msgSend_426(obj, sel, aSelector, anArgument, delay, modes);
  }

  late final __objc_msgSend_426Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Double,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_426 =
      __objc_msgSend_426Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              double,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_performSelector_withObject_afterDelay_1 = objc.registerName(
    "performSelector:withObject:afterDelay:",
  );
  void _objc_msgSend_427(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCSelector> aSelector,
    ffi.Pointer<objc.ObjCObject> anArgument,
    double delay,
  ) {
    return __objc_msgSend_427(obj, sel, aSelector, anArgument, delay);
  }

  late final __objc_msgSend_427Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Double,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_427 =
      __objc_msgSend_427Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              double,
            )
          >();

  late final _sel_URL_resourceDataDidBecomeAvailable_1 = objc.registerName(
    "URL:resourceDataDidBecomeAvailable:",
  );
  void _objc_msgSend_428(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> sender,
    ffi.Pointer<objc.ObjCObject> newBytes,
  ) {
    return __objc_msgSend_428(obj, sel, sender, newBytes);
  }

  late final __objc_msgSend_428Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_428 =
      __objc_msgSend_428Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_URLResourceDidFinishLoading_1 = objc.registerName(
    "URLResourceDidFinishLoading:",
  );
  void _objc_msgSend_429(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> sender,
  ) {
    return __objc_msgSend_429(obj, sel, sender);
  }

  late final __objc_msgSend_429Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_429 =
      __objc_msgSend_429Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_URLResourceDidCancelLoading_1 = objc.registerName(
    "URLResourceDidCancelLoading:",
  );
  late final _sel_URL_resourceDidFailLoadingWithReason_1 = objc.registerName(
    "URL:resourceDidFailLoadingWithReason:",
  );
  void _objc_msgSend_430(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> sender,
    ffi.Pointer<objc.ObjCObject> reason,
  ) {
    return __objc_msgSend_430(obj, sel, sender, reason);
  }

  late final __objc_msgSend_430Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_430 =
      __objc_msgSend_430Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _class_NSFileManager1 = objc.getClass("NSFileManager");
  late final _sel_defaultManager1 = objc.registerName("defaultManager");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_431(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_431(obj, sel);
  }

  late final __objc_msgSend_431Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_431 =
      __objc_msgSend_431Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_mountedVolumeURLsIncludingResourceValuesForKeys_options_1 =
      objc.registerName(
        "mountedVolumeURLsIncludingResourceValuesForKeys:options:",
      );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_432(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> propertyKeys,
    int options,
  ) {
    return __objc_msgSend_432(obj, sel, propertyKeys, options);
  }

  late final __objc_msgSend_432Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Int32,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_432 =
      __objc_msgSend_432Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              int,
            )
          >();

  late final _sel_unmountVolumeAtURL_options_completionHandler_1 = objc
      .registerName("unmountVolumeAtURL:options:completionHandler:");
  void _objc_msgSend_433(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> url,
    int mask,
    ffi.Pointer<objc.ObjCBlock> completionHandler,
  ) {
    return __objc_msgSend_433(obj, sel, url, mask, completionHandler);
  }

  late final __objc_msgSend_433Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Int32,
        ffi.Pointer<objc.ObjCBlock>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_433 =
      __objc_msgSend_433Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              int,
              ffi.Pointer<objc.ObjCBlock>,
            )
          >();

  late final _sel_contentsOfDirectoryAtURL_includingPropertiesForKeys_options_error_1 =
      objc.registerName(
        "contentsOfDirectoryAtURL:includingPropertiesForKeys:options:error:",
      );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_434(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> url,
    ffi.Pointer<objc.ObjCObject> keys,
    int mask,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    return __objc_msgSend_434(obj, sel, url, keys, mask, error);
  }

  late final __objc_msgSend_434Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Int32,
        ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_434 =
      __objc_msgSend_434Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
              int,
              ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
            )
          >();

  late final _sel_URLsForDirectory_inDomains_1 = objc.registerName(
    "URLsForDirectory:inDomains:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_435(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int directory,
    int domainMask,
  ) {
    return __objc_msgSend_435(obj, sel, directory, domainMask);
  }

  late final __objc_msgSend_435Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Int32,
        ffi.Int32,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_435 =
      __objc_msgSend_435Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
              int,
            )
          >();

  late final _sel_URLForDirectory_inDomain_appropriateForURL_create_error_1 =
      objc.registerName(
        "URLForDirectory:inDomain:appropriateForURL:create:error:",
      );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_436(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int directory,
    int domain,
    ffi.Pointer<objc.ObjCObject> url,
    bool shouldCreate,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    return __objc_msgSend_436(
      obj,
      sel,
      directory,
      domain,
      url,
      shouldCreate,
      error,
    );
  }

  late final __objc_msgSend_436Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Int32,
        ffi.Int32,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Bool,
        ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_436 =
      __objc_msgSend_436Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
              int,
              ffi.Pointer<objc.ObjCObject>,
              bool,
              ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
            )
          >();

  late final _sel_getRelationship_ofDirectoryAtURL_toItemAtURL_error_1 = objc
      .registerName("getRelationship:ofDirectoryAtURL:toItemAtURL:error:");
  bool _objc_msgSend_437(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<ffi.Int32> outRelationship,
    ffi.Pointer<objc.ObjCObject> directoryURL,
    ffi.Pointer<objc.ObjCObject> otherURL,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    return __objc_msgSend_437(
      obj,
      sel,
      outRelationship,
      directoryURL,
      otherURL,
      error,
    );
  }

  late final __objc_msgSend_437Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Bool Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<ffi.Int32>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_437 =
      __objc_msgSend_437Ptr
          .asFunction<
            bool Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
            )
          >();

  late final _sel_getRelationship_ofDirectory_inDomain_toItemAtURL_error_1 =
      objc.registerName(
        "getRelationship:ofDirectory:inDomain:toItemAtURL:error:",
      );
  bool _objc_msgSend_438(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<ffi.Int32> outRelationship,
    int directory,
    int domainMask,
    ffi.Pointer<objc.ObjCObject> url,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    return __objc_msgSend_438(
      obj,
      sel,
      outRelationship,
      directory,
      domainMask,
      url,
      error,
    );
  }

  late final __objc_msgSend_438Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Bool Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<ffi.Int32>,
        ffi.Int32,
        ffi.Int32,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_438 =
      __objc_msgSend_438Ptr
          .asFunction<
            bool Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<ffi.Int32>,
              int,
              int,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
            )
          >();

  late final _sel_createDirectoryAtURL_withIntermediateDirectories_attributes_error_1 =
      objc.registerName(
        "createDirectoryAtURL:withIntermediateDirectories:attributes:error:",
      );
  bool _objc_msgSend_439(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> url,
    bool createIntermediates,
    ffi.Pointer<objc.ObjCObject> attributes,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    return __objc_msgSend_439(
      obj,
      sel,
      url,
      createIntermediates,
      attributes,
      error,
    );
  }

  late final __objc_msgSend_439Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Bool Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Bool,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_439 =
      __objc_msgSend_439Ptr
          .asFunction<
            bool Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              bool,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
            )
          >();

  late final _sel_createSymbolicLinkAtURL_withDestinationURL_error_1 = objc
      .registerName("createSymbolicLinkAtURL:withDestinationURL:error:");
  bool _objc_msgSend_440(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> url,
    ffi.Pointer<objc.ObjCObject> destURL,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    return __objc_msgSend_440(obj, sel, url, destURL, error);
  }

  late final __objc_msgSend_440Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Bool Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_440 =
      __objc_msgSend_440Ptr
          .asFunction<
            bool Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
            )
          >();

  late final _sel_delegate1 = objc.registerName("delegate");
  late final _sel_setDelegate_1 = objc.registerName("setDelegate:");
  late final _sel_setAttributes_ofItemAtPath_error_1 = objc.registerName(
    "setAttributes:ofItemAtPath:error:",
  );
  bool _objc_msgSend_441(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> attributes,
    ffi.Pointer<objc.ObjCObject> path,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    return __objc_msgSend_441(obj, sel, attributes, path, error);
  }

  late final __objc_msgSend_441Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Bool Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_441 =
      __objc_msgSend_441Ptr
          .asFunction<
            bool Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
            )
          >();

  late final _sel_createDirectoryAtPath_withIntermediateDirectories_attributes_error_1 =
      objc.registerName(
        "createDirectoryAtPath:withIntermediateDirectories:attributes:error:",
      );
  bool _objc_msgSend_442(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> path,
    bool createIntermediates,
    ffi.Pointer<objc.ObjCObject> attributes,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    return __objc_msgSend_442(
      obj,
      sel,
      path,
      createIntermediates,
      attributes,
      error,
    );
  }

  late final __objc_msgSend_442Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Bool Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Bool,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_442 =
      __objc_msgSend_442Ptr
          .asFunction<
            bool Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              bool,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
            )
          >();

  late final _sel_contentsOfDirectoryAtPath_error_1 = objc.registerName(
    "contentsOfDirectoryAtPath:error:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_443(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> path,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    return __objc_msgSend_443(obj, sel, path, error);
  }

  late final __objc_msgSend_443Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_443 =
      __objc_msgSend_443Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
            )
          >();

  late final _sel_subpathsOfDirectoryAtPath_error_1 = objc.registerName(
    "subpathsOfDirectoryAtPath:error:",
  );
  late final _sel_attributesOfItemAtPath_error_1 = objc.registerName(
    "attributesOfItemAtPath:error:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_444(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> path,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    return __objc_msgSend_444(obj, sel, path, error);
  }

  late final __objc_msgSend_444Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_444 =
      __objc_msgSend_444Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
            )
          >();

  late final _sel_attributesOfFileSystemForPath_error_1 = objc.registerName(
    "attributesOfFileSystemForPath:error:",
  );
  late final _sel_createSymbolicLinkAtPath_withDestinationPath_error_1 = objc
      .registerName("createSymbolicLinkAtPath:withDestinationPath:error:");
  bool _objc_msgSend_445(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> path,
    ffi.Pointer<objc.ObjCObject> destPath,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    return __objc_msgSend_445(obj, sel, path, destPath, error);
  }

  late final __objc_msgSend_445Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Bool Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_445 =
      __objc_msgSend_445Ptr
          .asFunction<
            bool Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
            )
          >();

  late final _sel_destinationOfSymbolicLinkAtPath_error_1 = objc.registerName(
    "destinationOfSymbolicLinkAtPath:error:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_446(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> path,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    return __objc_msgSend_446(obj, sel, path, error);
  }

  late final __objc_msgSend_446Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_446 =
      __objc_msgSend_446Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
            )
          >();

  late final _sel_copyItemAtPath_toPath_error_1 = objc.registerName(
    "copyItemAtPath:toPath:error:",
  );
  late final _sel_moveItemAtPath_toPath_error_1 = objc.registerName(
    "moveItemAtPath:toPath:error:",
  );
  late final _sel_linkItemAtPath_toPath_error_1 = objc.registerName(
    "linkItemAtPath:toPath:error:",
  );
  late final _sel_removeItemAtPath_error_1 = objc.registerName(
    "removeItemAtPath:error:",
  );
  bool _objc_msgSend_447(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> path,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    return __objc_msgSend_447(obj, sel, path, error);
  }

  late final __objc_msgSend_447Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Bool Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_447 =
      __objc_msgSend_447Ptr
          .asFunction<
            bool Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
            )
          >();

  late final _sel_copyItemAtURL_toURL_error_1 = objc.registerName(
    "copyItemAtURL:toURL:error:",
  );
  late final _sel_moveItemAtURL_toURL_error_1 = objc.registerName(
    "moveItemAtURL:toURL:error:",
  );
  late final _sel_linkItemAtURL_toURL_error_1 = objc.registerName(
    "linkItemAtURL:toURL:error:",
  );
  late final _sel_removeItemAtURL_error_1 = objc.registerName(
    "removeItemAtURL:error:",
  );
  late final _sel_trashItemAtURL_resultingItemURL_error_1 = objc.registerName(
    "trashItemAtURL:resultingItemURL:error:",
  );
  bool _objc_msgSend_448(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> url,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outResultingURL,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    return __objc_msgSend_448(obj, sel, url, outResultingURL, error);
  }

  late final __objc_msgSend_448Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Bool Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
        ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_448 =
      __objc_msgSend_448Ptr
          .asFunction<
            bool Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
              ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
            )
          >();

  late final _sel_fileAttributesAtPath_traverseLink_1 = objc.registerName(
    "fileAttributesAtPath:traverseLink:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_449(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> path,
    bool yorn,
  ) {
    return __objc_msgSend_449(obj, sel, path, yorn);
  }

  late final __objc_msgSend_449Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Bool,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_449 =
      __objc_msgSend_449Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              bool,
            )
          >();

  late final _sel_changeFileAttributes_atPath_1 = objc.registerName(
    "changeFileAttributes:atPath:",
  );
  bool _objc_msgSend_450(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> attributes,
    ffi.Pointer<objc.ObjCObject> path,
  ) {
    return __objc_msgSend_450(obj, sel, attributes, path);
  }

  late final __objc_msgSend_450Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Bool Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_450 =
      __objc_msgSend_450Ptr
          .asFunction<
            bool Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_directoryContentsAtPath_1 = objc.registerName(
    "directoryContentsAtPath:",
  );
  late final _sel_fileSystemAttributesAtPath_1 = objc.registerName(
    "fileSystemAttributesAtPath:",
  );
  late final _sel_pathContentOfSymbolicLinkAtPath_1 = objc.registerName(
    "pathContentOfSymbolicLinkAtPath:",
  );
  late final _sel_createSymbolicLinkAtPath_pathContent_1 = objc.registerName(
    "createSymbolicLinkAtPath:pathContent:",
  );
  bool _objc_msgSend_451(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> path,
    ffi.Pointer<objc.ObjCObject> otherpath,
  ) {
    return __objc_msgSend_451(obj, sel, path, otherpath);
  }

  late final __objc_msgSend_451Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Bool Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_451 =
      __objc_msgSend_451Ptr
          .asFunction<
            bool Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_createDirectoryAtPath_attributes_1 = objc.registerName(
    "createDirectoryAtPath:attributes:",
  );
  bool _objc_msgSend_452(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> path,
    ffi.Pointer<objc.ObjCObject> attributes,
  ) {
    return __objc_msgSend_452(obj, sel, path, attributes);
  }

  late final __objc_msgSend_452Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Bool Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_452 =
      __objc_msgSend_452Ptr
          .asFunction<
            bool Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_linkPath_toPath_handler_1 = objc.registerName(
    "linkPath:toPath:handler:",
  );
  bool _objc_msgSend_453(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> src,
    ffi.Pointer<objc.ObjCObject> dest,
    ffi.Pointer<objc.ObjCObject> handler,
  ) {
    return __objc_msgSend_453(obj, sel, src, dest, handler);
  }

  late final __objc_msgSend_453Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Bool Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_453 =
      __objc_msgSend_453Ptr
          .asFunction<
            bool Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_copyPath_toPath_handler_1 = objc.registerName(
    "copyPath:toPath:handler:",
  );
  late final _sel_movePath_toPath_handler_1 = objc.registerName(
    "movePath:toPath:handler:",
  );
  late final _sel_removeFileAtPath_handler_1 = objc.registerName(
    "removeFileAtPath:handler:",
  );
  bool _objc_msgSend_454(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> path,
    ffi.Pointer<objc.ObjCObject> handler,
  ) {
    return __objc_msgSend_454(obj, sel, path, handler);
  }

  late final __objc_msgSend_454Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Bool Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_454 =
      __objc_msgSend_454Ptr
          .asFunction<
            bool Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_currentDirectoryPath1 = objc.registerName(
    "currentDirectoryPath",
  );
  late final _sel_changeCurrentDirectoryPath_1 = objc.registerName(
    "changeCurrentDirectoryPath:",
  );
  late final _sel_fileExistsAtPath_1 = objc.registerName("fileExistsAtPath:");
  late final _sel_fileExistsAtPath_isDirectory_1 = objc.registerName(
    "fileExistsAtPath:isDirectory:",
  );
  bool _objc_msgSend_455(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> path,
    ffi.Pointer<ffi.Bool> isDirectory,
  ) {
    return __objc_msgSend_455(obj, sel, path, isDirectory);
  }

  late final __objc_msgSend_455Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Bool Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<ffi.Bool>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_455 =
      __objc_msgSend_455Ptr
          .asFunction<
            bool Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<ffi.Bool>,
            )
          >();

  late final _sel_isReadableFileAtPath_1 = objc.registerName(
    "isReadableFileAtPath:",
  );
  late final _sel_isWritableFileAtPath_1 = objc.registerName(
    "isWritableFileAtPath:",
  );
  late final _sel_isExecutableFileAtPath_1 = objc.registerName(
    "isExecutableFileAtPath:",
  );
  late final _sel_isDeletableFileAtPath_1 = objc.registerName(
    "isDeletableFileAtPath:",
  );
  late final _sel_contentsEqualAtPath_andPath_1 = objc.registerName(
    "contentsEqualAtPath:andPath:",
  );
  late final _sel_displayNameAtPath_1 = objc.registerName("displayNameAtPath:");
  late final _sel_componentsToDisplayForPath_1 = objc.registerName(
    "componentsToDisplayForPath:",
  );
  late final _sel_enumeratorAtPath_1 = objc.registerName("enumeratorAtPath:");
  late final _sel_enumeratorAtURL_includingPropertiesForKeys_options_errorHandler_1 =
      objc.registerName(
        "enumeratorAtURL:includingPropertiesForKeys:options:errorHandler:",
      );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_456(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> url,
    ffi.Pointer<objc.ObjCObject> keys,
    int mask,
    ffi.Pointer<objc.ObjCBlock> handler,
  ) {
    return __objc_msgSend_456(obj, sel, url, keys, mask, handler);
  }

  late final __objc_msgSend_456Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Int32,
        ffi.Pointer<objc.ObjCBlock>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_456 =
      __objc_msgSend_456Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
              int,
              ffi.Pointer<objc.ObjCBlock>,
            )
          >();

  late final _sel_subpathsAtPath_1 = objc.registerName("subpathsAtPath:");
  late final _sel_contentsAtPath_1 = objc.registerName("contentsAtPath:");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_457(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> path,
  ) {
    return __objc_msgSend_457(obj, sel, path);
  }

  late final __objc_msgSend_457Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_457 =
      __objc_msgSend_457Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_createFileAtPath_contents_attributes_1 = objc.registerName(
    "createFileAtPath:contents:attributes:",
  );
  bool _objc_msgSend_458(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> path,
    ffi.Pointer<objc.ObjCObject> data,
    ffi.Pointer<objc.ObjCObject> attr,
  ) {
    return __objc_msgSend_458(obj, sel, path, data, attr);
  }

  late final __objc_msgSend_458Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Bool Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_458 =
      __objc_msgSend_458Ptr
          .asFunction<
            bool Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_fileSystemRepresentationWithPath_1 = objc.registerName(
    "fileSystemRepresentationWithPath:",
  );
  ffi.Pointer<ffi.Char> _objc_msgSend_459(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> path,
  ) {
    return __objc_msgSend_459(obj, sel, path);
  }

  late final __objc_msgSend_459Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<ffi.Char> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_459 =
      __objc_msgSend_459Ptr
          .asFunction<
            ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_stringWithFileSystemRepresentation_length_1 = objc
      .registerName("stringWithFileSystemRepresentation:length:");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_460(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<ffi.Char> str,
    int len,
  ) {
    return __objc_msgSend_460(obj, sel, str, len);
  }

  late final __objc_msgSend_460Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<ffi.Char>,
        ffi.UnsignedLong,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_460 =
      __objc_msgSend_460Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<ffi.Char>,
              int,
            )
          >();

  late final _sel_replaceItemAtURL_withItemAtURL_backupItemName_options_resultingItemURL_error_1 =
      objc.registerName(
        "replaceItemAtURL:withItemAtURL:backupItemName:options:resultingItemURL:error:",
      );
  bool _objc_msgSend_461(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> originalItemURL,
    ffi.Pointer<objc.ObjCObject> newItemURL,
    ffi.Pointer<objc.ObjCObject> backupItemName,
    int options,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> resultingURL,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    return __objc_msgSend_461(
      obj,
      sel,
      originalItemURL,
      newItemURL,
      backupItemName,
      options,
      resultingURL,
      error,
    );
  }

  late final __objc_msgSend_461Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Bool Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Int32,
        ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
        ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_461 =
      __objc_msgSend_461Ptr
          .asFunction<
            bool Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
              int,
              ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
              ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
            )
          >();

  late final _sel_setUbiquitous_itemAtURL_destinationURL_error_1 = objc
      .registerName("setUbiquitous:itemAtURL:destinationURL:error:");
  bool _objc_msgSend_462(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    bool flag,
    ffi.Pointer<objc.ObjCObject> url,
    ffi.Pointer<objc.ObjCObject> destinationURL,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    return __objc_msgSend_462(obj, sel, flag, url, destinationURL, error);
  }

  late final __objc_msgSend_462Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Bool Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Bool,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_462 =
      __objc_msgSend_462Ptr
          .asFunction<
            bool Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              bool,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
            )
          >();

  late final _sel_isUbiquitousItemAtURL_1 = objc.registerName(
    "isUbiquitousItemAtURL:",
  );
  late final _sel_startDownloadingUbiquitousItemAtURL_error_1 = objc
      .registerName("startDownloadingUbiquitousItemAtURL:error:");
  late final _sel_evictUbiquitousItemAtURL_error_1 = objc.registerName(
    "evictUbiquitousItemAtURL:error:",
  );
  late final _sel_URLForUbiquityContainerIdentifier_1 = objc.registerName(
    "URLForUbiquityContainerIdentifier:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_463(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> containerIdentifier,
  ) {
    return __objc_msgSend_463(obj, sel, containerIdentifier);
  }

  late final __objc_msgSend_463Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_463 =
      __objc_msgSend_463Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_URLForPublishingUbiquitousItemAtURL_expirationDate_error_1 =
      objc.registerName(
        "URLForPublishingUbiquitousItemAtURL:expirationDate:error:",
      );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_464(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> url,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outDate,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    return __objc_msgSend_464(obj, sel, url, outDate, error);
  }

  late final __objc_msgSend_464Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
        ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_464 =
      __objc_msgSend_464Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
              ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
            )
          >();

  late final _sel_ubiquityIdentityToken1 = objc.registerName(
    "ubiquityIdentityToken",
  );
  late final _sel_getFileProviderServicesForItemAtURL_completionHandler_1 = objc
      .registerName("getFileProviderServicesForItemAtURL:completionHandler:");
  void _objc_msgSend_465(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> url,
    ffi.Pointer<objc.ObjCBlock> completionHandler,
  ) {
    return __objc_msgSend_465(obj, sel, url, completionHandler);
  }

  late final __objc_msgSend_465Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCBlock>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_465 =
      __objc_msgSend_465Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCBlock>,
            )
          >();

  late final _sel_containerURLForSecurityApplicationGroupIdentifier_1 = objc
      .registerName("containerURLForSecurityApplicationGroupIdentifier:");
  late final _sel_homeDirectoryForCurrentUser1 = objc.registerName(
    "homeDirectoryForCurrentUser",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_466(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_466(obj, sel);
  }

  late final __objc_msgSend_466Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_466 =
      __objc_msgSend_466Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_temporaryDirectory1 = objc.registerName("temporaryDirectory");
  late final _sel_homeDirectoryForUser_1 = objc.registerName(
    "homeDirectoryForUser:",
  );
  late final _sel_fileManager_shouldProceedAfterError_1 = objc.registerName(
    "fileManager:shouldProceedAfterError:",
  );
  bool _objc_msgSend_467(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> fm,
    ffi.Pointer<objc.ObjCObject> errorInfo,
  ) {
    return __objc_msgSend_467(obj, sel, fm, errorInfo);
  }

  late final __objc_msgSend_467Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Bool Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_467 =
      __objc_msgSend_467Ptr
          .asFunction<
            bool Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_fileManager_willProcessPath_1 = objc.registerName(
    "fileManager:willProcessPath:",
  );
  void _objc_msgSend_468(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> fm,
    ffi.Pointer<objc.ObjCObject> path,
  ) {
    return __objc_msgSend_468(obj, sel, fm, path);
  }

  late final __objc_msgSend_468Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_468 =
      __objc_msgSend_468Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_validateValue_forKey_error_1 = objc.registerName(
    "validateValue:forKey:error:",
  );
  late final _class_NSMutableArray1 = objc.getClass("NSMutableArray");
  late final _sel_addObject_1 = objc.registerName("addObject:");
  late final _sel_insertObject_atIndex_1 = objc.registerName(
    "insertObject:atIndex:",
  );
  void _objc_msgSend_469(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> anObject,
    int index,
  ) {
    return __objc_msgSend_469(obj, sel, anObject, index);
  }

  late final __objc_msgSend_469Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.UnsignedLong,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_469 =
      __objc_msgSend_469Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              int,
            )
          >();

  late final _sel_removeLastObject1 = objc.registerName("removeLastObject");
  late final _sel_removeObjectAtIndex_1 = objc.registerName(
    "removeObjectAtIndex:",
  );
  void _objc_msgSend_470(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int index,
  ) {
    return __objc_msgSend_470(obj, sel, index);
  }

  late final __objc_msgSend_470Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.UnsignedLong,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_470 =
      __objc_msgSend_470Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
            )
          >();

  late final _sel_replaceObjectAtIndex_withObject_1 = objc.registerName(
    "replaceObjectAtIndex:withObject:",
  );
  void _objc_msgSend_471(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int index,
    ffi.Pointer<objc.ObjCObject> anObject,
  ) {
    return __objc_msgSend_471(obj, sel, index, anObject);
  }

  late final __objc_msgSend_471Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.UnsignedLong,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_471 =
      __objc_msgSend_471Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_initWithCapacity_1 = objc.registerName("initWithCapacity:");
  late final _sel_addObjectsFromArray_1 = objc.registerName(
    "addObjectsFromArray:",
  );
  void _objc_msgSend_472(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> otherArray,
  ) {
    return __objc_msgSend_472(obj, sel, otherArray);
  }

  late final __objc_msgSend_472Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_472 =
      __objc_msgSend_472Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_exchangeObjectAtIndex_withObjectAtIndex_1 = objc.registerName(
    "exchangeObjectAtIndex:withObjectAtIndex:",
  );
  void _objc_msgSend_473(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int idx1,
    int idx2,
  ) {
    return __objc_msgSend_473(obj, sel, idx1, idx2);
  }

  late final __objc_msgSend_473Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.UnsignedLong,
        ffi.UnsignedLong,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_473 =
      __objc_msgSend_473Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
              int,
            )
          >();

  late final _sel_removeAllObjects1 = objc.registerName("removeAllObjects");
  late final _sel_removeObject_inRange_1 = objc.registerName(
    "removeObject:inRange:",
  );
  void _objc_msgSend_474(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> anObject,
    _NSRange range,
  ) {
    return __objc_msgSend_474(obj, sel, anObject, range);
  }

  late final __objc_msgSend_474Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        _NSRange,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_474 =
      __objc_msgSend_474Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              _NSRange,
            )
          >();

  late final _sel_removeObject_1 = objc.registerName("removeObject:");
  late final _sel_removeObjectIdenticalTo_inRange_1 = objc.registerName(
    "removeObjectIdenticalTo:inRange:",
  );
  late final _sel_removeObjectIdenticalTo_1 = objc.registerName(
    "removeObjectIdenticalTo:",
  );
  late final _sel_removeObjectsFromIndices_numIndices_1 = objc.registerName(
    "removeObjectsFromIndices:numIndices:",
  );
  void _objc_msgSend_475(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<ffi.UnsignedLong> indices,
    int cnt,
  ) {
    return __objc_msgSend_475(obj, sel, indices, cnt);
  }

  late final __objc_msgSend_475Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<ffi.UnsignedLong>,
        ffi.UnsignedLong,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_475 =
      __objc_msgSend_475Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<ffi.UnsignedLong>,
              int,
            )
          >();

  late final _sel_removeObjectsInArray_1 = objc.registerName(
    "removeObjectsInArray:",
  );
  late final _sel_removeObjectsInRange_1 = objc.registerName(
    "removeObjectsInRange:",
  );
  void _objc_msgSend_476(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    _NSRange range,
  ) {
    return __objc_msgSend_476(obj, sel, range);
  }

  late final __objc_msgSend_476Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        _NSRange,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_476 =
      __objc_msgSend_476Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              _NSRange,
            )
          >();

  late final _sel_replaceObjectsInRange_withObjectsFromArray_range_1 = objc
      .registerName("replaceObjectsInRange:withObjectsFromArray:range:");
  void _objc_msgSend_477(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    _NSRange range,
    ffi.Pointer<objc.ObjCObject> otherArray,
    _NSRange otherRange,
  ) {
    return __objc_msgSend_477(obj, sel, range, otherArray, otherRange);
  }

  late final __objc_msgSend_477Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        _NSRange,
        ffi.Pointer<objc.ObjCObject>,
        _NSRange,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_477 =
      __objc_msgSend_477Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              _NSRange,
              ffi.Pointer<objc.ObjCObject>,
              _NSRange,
            )
          >();

  late final _sel_replaceObjectsInRange_withObjectsFromArray_1 = objc
      .registerName("replaceObjectsInRange:withObjectsFromArray:");
  void _objc_msgSend_478(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    _NSRange range,
    ffi.Pointer<objc.ObjCObject> otherArray,
  ) {
    return __objc_msgSend_478(obj, sel, range, otherArray);
  }

  late final __objc_msgSend_478Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        _NSRange,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_478 =
      __objc_msgSend_478Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              _NSRange,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_setArray_1 = objc.registerName("setArray:");
  late final _sel_sortUsingFunction_context_1 = objc.registerName(
    "sortUsingFunction:context:",
  );
  void _objc_msgSend_479(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<
      ffi.NativeFunction<
        ffi.Long Function(
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<ffi.Void>,
        )
      >
    > compare,
    ffi.Pointer<ffi.Void> context,
  ) {
    return __objc_msgSend_479(obj, sel, compare, context);
  }

  late final __objc_msgSend_479Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<
          ffi.NativeFunction<
            ffi.Long Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<ffi.Void>,
            )
          >
        >,
        ffi.Pointer<ffi.Void>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_479 =
      __objc_msgSend_479Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<
                ffi.NativeFunction<
                  ffi.Long Function(
                    ffi.Pointer<objc.ObjCObject>,
                    ffi.Pointer<objc.ObjCObject>,
                    ffi.Pointer<ffi.Void>,
                  )
                >
              >,
              ffi.Pointer<ffi.Void>,
            )
          >();

  late final _sel_sortUsingSelector_1 = objc.registerName("sortUsingSelector:");
  late final _sel_insertObjects_atIndexes_1 = objc.registerName(
    "insertObjects:atIndexes:",
  );
  void _objc_msgSend_480(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> objects,
    ffi.Pointer<objc.ObjCObject> indexes,
  ) {
    return __objc_msgSend_480(obj, sel, objects, indexes);
  }

  late final __objc_msgSend_480Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_480 =
      __objc_msgSend_480Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_removeObjectsAtIndexes_1 = objc.registerName(
    "removeObjectsAtIndexes:",
  );
  void _objc_msgSend_481(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> indexes,
  ) {
    return __objc_msgSend_481(obj, sel, indexes);
  }

  late final __objc_msgSend_481Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_481 =
      __objc_msgSend_481Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_replaceObjectsAtIndexes_withObjects_1 = objc.registerName(
    "replaceObjectsAtIndexes:withObjects:",
  );
  void _objc_msgSend_482(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> indexes,
    ffi.Pointer<objc.ObjCObject> objects,
  ) {
    return __objc_msgSend_482(obj, sel, indexes, objects);
  }

  late final __objc_msgSend_482Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_482 =
      __objc_msgSend_482Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_setObject_atIndexedSubscript_1 = objc.registerName(
    "setObject:atIndexedSubscript:",
  );
  late final _sel_sortUsingComparator_1 = objc.registerName(
    "sortUsingComparator:",
  );
  void _objc_msgSend_483(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCBlock> cmptr,
  ) {
    return __objc_msgSend_483(obj, sel, cmptr);
  }

  late final __objc_msgSend_483Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCBlock>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_483 =
      __objc_msgSend_483Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCBlock>,
            )
          >();

  late final _sel_sortWithOptions_usingComparator_1 = objc.registerName(
    "sortWithOptions:usingComparator:",
  );
  void _objc_msgSend_484(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int opts,
    ffi.Pointer<objc.ObjCBlock> cmptr,
  ) {
    return __objc_msgSend_484(obj, sel, opts, cmptr);
  }

  late final __objc_msgSend_484Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Int32,
        ffi.Pointer<objc.ObjCBlock>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_484 =
      __objc_msgSend_484Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
              ffi.Pointer<objc.ObjCBlock>,
            )
          >();

  late final _sel_arrayWithCapacity_1 = objc.registerName("arrayWithCapacity:");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_485(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> path,
  ) {
    return __objc_msgSend_485(obj, sel, path);
  }

  late final __objc_msgSend_485Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_485 =
      __objc_msgSend_485Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  ffi.Pointer<objc.ObjCObject> _objc_msgSend_486(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> url,
  ) {
    return __objc_msgSend_486(obj, sel, url);
  }

  late final __objc_msgSend_486Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_486 =
      __objc_msgSend_486Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_applyDifference_1 = objc.registerName("applyDifference:");
  late final _sel_sortUsingDescriptors_1 = objc.registerName(
    "sortUsingDescriptors:",
  );
  late final _sel_filterUsingPredicate_1 = objc.registerName(
    "filterUsingPredicate:",
  );
  void _objc_msgSend_487(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> predicate,
  ) {
    return __objc_msgSend_487(obj, sel, predicate);
  }

  late final __objc_msgSend_487Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_487 =
      __objc_msgSend_487Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_mutableArrayValueForKey_1 = objc.registerName(
    "mutableArrayValueForKey:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_488(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> key,
  ) {
    return __objc_msgSend_488(obj, sel, key);
  }

  late final __objc_msgSend_488Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_488 =
      __objc_msgSend_488Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _class_NSMutableOrderedSet1 = objc.getClass("NSMutableOrderedSet");
  late final _class_NSOrderedSet1 = objc.getClass("NSOrderedSet");
  late final _sel_isEqualToOrderedSet_1 = objc.registerName(
    "isEqualToOrderedSet:",
  );
  bool _objc_msgSend_489(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> other,
  ) {
    return __objc_msgSend_489(obj, sel, other);
  }

  late final __objc_msgSend_489Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Bool Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_489 =
      __objc_msgSend_489Ptr
          .asFunction<
            bool Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_intersectsOrderedSet_1 = objc.registerName(
    "intersectsOrderedSet:",
  );
  late final _sel_isSubsetOfOrderedSet_1 = objc.registerName(
    "isSubsetOfOrderedSet:",
  );
  late final _sel_reversedOrderedSet1 = objc.registerName("reversedOrderedSet");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_490(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_490(obj, sel);
  }

  late final __objc_msgSend_490Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_490 =
      __objc_msgSend_490Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  ffi.Pointer<objc.ObjCObject> _objc_msgSend_491(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_491(obj, sel);
  }

  late final __objc_msgSend_491Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_491 =
      __objc_msgSend_491Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_orderedSet1 = objc.registerName("orderedSet");
  late final _sel_orderedSetWithObject_1 = objc.registerName(
    "orderedSetWithObject:",
  );
  late final _sel_orderedSetWithObjects_count_1 = objc.registerName(
    "orderedSetWithObjects:count:",
  );
  late final _sel_orderedSetWithObjects_1 = objc.registerName(
    "orderedSetWithObjects:",
  );
  late final _sel_orderedSetWithOrderedSet_1 = objc.registerName(
    "orderedSetWithOrderedSet:",
  );
  instancetype _objc_msgSend_492(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> set1,
  ) {
    return __objc_msgSend_492(obj, sel, set1);
  }

  late final __objc_msgSend_492Ptr = _lookup<
    ffi.NativeFunction<
      instancetype Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_492 =
      __objc_msgSend_492Ptr
          .asFunction<
            instancetype Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_orderedSetWithOrderedSet_range_copyItems_1 = objc
      .registerName("orderedSetWithOrderedSet:range:copyItems:");
  instancetype _objc_msgSend_493(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> set1,
    _NSRange range,
    bool flag,
  ) {
    return __objc_msgSend_493(obj, sel, set1, range, flag);
  }

  late final __objc_msgSend_493Ptr = _lookup<
    ffi.NativeFunction<
      instancetype Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        _NSRange,
        ffi.Bool,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_493 =
      __objc_msgSend_493Ptr
          .asFunction<
            instancetype Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              _NSRange,
              bool,
            )
          >();

  late final _sel_orderedSetWithArray_1 = objc.registerName(
    "orderedSetWithArray:",
  );
  late final _sel_orderedSetWithArray_range_copyItems_1 = objc.registerName(
    "orderedSetWithArray:range:copyItems:",
  );
  instancetype _objc_msgSend_494(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> array,
    _NSRange range,
    bool flag,
  ) {
    return __objc_msgSend_494(obj, sel, array, range, flag);
  }

  late final __objc_msgSend_494Ptr = _lookup<
    ffi.NativeFunction<
      instancetype Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        _NSRange,
        ffi.Bool,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_494 =
      __objc_msgSend_494Ptr
          .asFunction<
            instancetype Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              _NSRange,
              bool,
            )
          >();

  late final _sel_orderedSetWithSet_1 = objc.registerName("orderedSetWithSet:");
  late final _sel_orderedSetWithSet_copyItems_1 = objc.registerName(
    "orderedSetWithSet:copyItems:",
  );
  late final _sel_initWithObject_1 = objc.registerName("initWithObject:");
  late final _sel_initWithOrderedSet_1 = objc.registerName(
    "initWithOrderedSet:",
  );
  late final _sel_initWithOrderedSet_copyItems_1 = objc.registerName(
    "initWithOrderedSet:copyItems:",
  );
  instancetype _objc_msgSend_495(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> set1,
    bool flag,
  ) {
    return __objc_msgSend_495(obj, sel, set1, flag);
  }

  late final __objc_msgSend_495Ptr = _lookup<
    ffi.NativeFunction<
      instancetype Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Bool,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_495 =
      __objc_msgSend_495Ptr
          .asFunction<
            instancetype Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              bool,
            )
          >();

  late final _sel_initWithOrderedSet_range_copyItems_1 = objc.registerName(
    "initWithOrderedSet:range:copyItems:",
  );
  late final _sel_initWithArray_range_copyItems_1 = objc.registerName(
    "initWithArray:range:copyItems:",
  );
  late final _sel_differenceFromOrderedSet_withOptions_usingEquivalenceTest_1 =
      objc.registerName(
        "differenceFromOrderedSet:withOptions:usingEquivalenceTest:",
      );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_496(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> other,
    int options,
    ffi.Pointer<objc.ObjCBlock> block,
  ) {
    return __objc_msgSend_496(obj, sel, other, options, block);
  }

  late final __objc_msgSend_496Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Int32,
        ffi.Pointer<objc.ObjCBlock>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_496 =
      __objc_msgSend_496Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              int,
              ffi.Pointer<objc.ObjCBlock>,
            )
          >();

  late final _sel_differenceFromOrderedSet_withOptions_1 = objc.registerName(
    "differenceFromOrderedSet:withOptions:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_497(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> other,
    int options,
  ) {
    return __objc_msgSend_497(obj, sel, other, options);
  }

  late final __objc_msgSend_497Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Int32,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_497 =
      __objc_msgSend_497Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              int,
            )
          >();

  late final _sel_differenceFromOrderedSet_1 = objc.registerName(
    "differenceFromOrderedSet:",
  );
  late final _sel_orderedSetByApplyingDifference_1 = objc.registerName(
    "orderedSetByApplyingDifference:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_498(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> difference,
  ) {
    return __objc_msgSend_498(obj, sel, difference);
  }

  late final __objc_msgSend_498Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_498 =
      __objc_msgSend_498Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_filteredOrderedSetUsingPredicate_1 = objc.registerName(
    "filteredOrderedSetUsingPredicate:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_499(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> p,
  ) {
    return __objc_msgSend_499(obj, sel, p);
  }

  late final __objc_msgSend_499Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_499 =
      __objc_msgSend_499Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_addObjects_count_1 = objc.registerName("addObjects:count:");
  void _objc_msgSend_500(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> objects,
    int count,
  ) {
    return __objc_msgSend_500(obj, sel, objects, count);
  }

  late final __objc_msgSend_500Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
        ffi.UnsignedLong,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_500 =
      __objc_msgSend_500Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
              int,
            )
          >();

  late final _sel_moveObjectsAtIndexes_toIndex_1 = objc.registerName(
    "moveObjectsAtIndexes:toIndex:",
  );
  void _objc_msgSend_501(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> indexes,
    int idx,
  ) {
    return __objc_msgSend_501(obj, sel, indexes, idx);
  }

  late final __objc_msgSend_501Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.UnsignedLong,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_501 =
      __objc_msgSend_501Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              int,
            )
          >();

  late final _sel_setObject_atIndex_1 = objc.registerName("setObject:atIndex:");
  late final _sel_replaceObjectsInRange_withObjects_count_1 = objc.registerName(
    "replaceObjectsInRange:withObjects:count:",
  );
  void _objc_msgSend_502(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    _NSRange range,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> objects,
    int count,
  ) {
    return __objc_msgSend_502(obj, sel, range, objects, count);
  }

  late final __objc_msgSend_502Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        _NSRange,
        ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
        ffi.UnsignedLong,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_502 =
      __objc_msgSend_502Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              _NSRange,
              ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
              int,
            )
          >();

  late final _sel_intersectOrderedSet_1 = objc.registerName(
    "intersectOrderedSet:",
  );
  void _objc_msgSend_503(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> other,
  ) {
    return __objc_msgSend_503(obj, sel, other);
  }

  late final __objc_msgSend_503Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_503 =
      __objc_msgSend_503Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_minusOrderedSet_1 = objc.registerName("minusOrderedSet:");
  late final _sel_unionOrderedSet_1 = objc.registerName("unionOrderedSet:");
  late final _sel_intersectSet_1 = objc.registerName("intersectSet:");
  void _objc_msgSend_504(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> other,
  ) {
    return __objc_msgSend_504(obj, sel, other);
  }

  late final __objc_msgSend_504Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_504 =
      __objc_msgSend_504Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_minusSet_1 = objc.registerName("minusSet:");
  late final _sel_unionSet_1 = objc.registerName("unionSet:");
  late final _sel_sortRange_options_usingComparator_1 = objc.registerName(
    "sortRange:options:usingComparator:",
  );
  void _objc_msgSend_505(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    _NSRange range,
    int opts,
    ffi.Pointer<objc.ObjCBlock> cmptr,
  ) {
    return __objc_msgSend_505(obj, sel, range, opts, cmptr);
  }

  late final __objc_msgSend_505Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        _NSRange,
        ffi.Int32,
        ffi.Pointer<objc.ObjCBlock>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_505 =
      __objc_msgSend_505Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              _NSRange,
              int,
              ffi.Pointer<objc.ObjCBlock>,
            )
          >();

  late final _sel_orderedSetWithCapacity_1 = objc.registerName(
    "orderedSetWithCapacity:",
  );
  late final _sel_mutableOrderedSetValueForKey_1 = objc.registerName(
    "mutableOrderedSetValueForKey:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_506(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> key,
  ) {
    return __objc_msgSend_506(obj, sel, key);
  }

  late final __objc_msgSend_506Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_506 =
      __objc_msgSend_506Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _class_NSMutableSet1 = objc.getClass("NSMutableSet");
  late final _sel_setSet_1 = objc.registerName("setSet:");
  late final _sel_setWithCapacity_1 = objc.registerName("setWithCapacity:");
  late final _sel_mutableSetValueForKey_1 = objc.registerName(
    "mutableSetValueForKey:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_507(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> key,
  ) {
    return __objc_msgSend_507(obj, sel, key);
  }

  late final __objc_msgSend_507Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_507 =
      __objc_msgSend_507Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_valueForKeyPath_1 = objc.registerName("valueForKeyPath:");
  late final _sel_setValue_forKeyPath_1 = objc.registerName(
    "setValue:forKeyPath:",
  );
  late final _sel_validateValue_forKeyPath_error_1 = objc.registerName(
    "validateValue:forKeyPath:error:",
  );
  late final _sel_mutableArrayValueForKeyPath_1 = objc.registerName(
    "mutableArrayValueForKeyPath:",
  );
  late final _sel_mutableOrderedSetValueForKeyPath_1 = objc.registerName(
    "mutableOrderedSetValueForKeyPath:",
  );
  late final _sel_mutableSetValueForKeyPath_1 = objc.registerName(
    "mutableSetValueForKeyPath:",
  );
  late final _sel_valueForUndefinedKey_1 = objc.registerName(
    "valueForUndefinedKey:",
  );
  late final _sel_setValue_forUndefinedKey_1 = objc.registerName(
    "setValue:forUndefinedKey:",
  );
  late final _sel_setNilValueForKey_1 = objc.registerName("setNilValueForKey:");
  late final _sel_dictionaryWithValuesForKeys_1 = objc.registerName(
    "dictionaryWithValuesForKeys:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_508(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> keys,
  ) {
    return __objc_msgSend_508(obj, sel, keys);
  }

  late final __objc_msgSend_508Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_508 =
      __objc_msgSend_508Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_setValuesForKeysWithDictionary_1 = objc.registerName(
    "setValuesForKeysWithDictionary:",
  );
  void _objc_msgSend_509(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> keyedValues,
  ) {
    return __objc_msgSend_509(obj, sel, keyedValues);
  }

  late final __objc_msgSend_509Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_509 =
      __objc_msgSend_509Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_storedValueForKey_1 = objc.registerName("storedValueForKey:");
  late final _sel_takeStoredValue_forKey_1 = objc.registerName(
    "takeStoredValue:forKey:",
  );
  late final _sel_takeValue_forKey_1 = objc.registerName("takeValue:forKey:");
  late final _sel_takeValue_forKeyPath_1 = objc.registerName(
    "takeValue:forKeyPath:",
  );
  late final _sel_handleQueryWithUnboundKey_1 = objc.registerName(
    "handleQueryWithUnboundKey:",
  );
  late final _sel_handleTakeValue_forUnboundKey_1 = objc.registerName(
    "handleTakeValue:forUnboundKey:",
  );
  late final _sel_unableToSetNilForKey_1 = objc.registerName(
    "unableToSetNilForKey:",
  );
  late final _sel_valuesForKeys_1 = objc.registerName("valuesForKeys:");
  late final _sel_takeValuesFromDictionary_1 = objc.registerName(
    "takeValuesFromDictionary:",
  );
  late final _sel_observeValueForKeyPath_ofObject_change_context_1 = objc
      .registerName("observeValueForKeyPath:ofObject:change:context:");
  void _objc_msgSend_510(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> keyPath,
    ffi.Pointer<objc.ObjCObject> object,
    ffi.Pointer<objc.ObjCObject> change,
    ffi.Pointer<ffi.Void> context,
  ) {
    return __objc_msgSend_510(obj, sel, keyPath, object, change, context);
  }

  late final __objc_msgSend_510Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<ffi.Void>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_510 =
      __objc_msgSend_510Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<ffi.Void>,
            )
          >();

  late final _sel_willChangeValueForKey_1 = objc.registerName(
    "willChangeValueForKey:",
  );
  late final _sel_didChangeValueForKey_1 = objc.registerName(
    "didChangeValueForKey:",
  );
  late final _sel_willChange_valuesAtIndexes_forKey_1 = objc.registerName(
    "willChange:valuesAtIndexes:forKey:",
  );
  void _objc_msgSend_511(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int changeKind,
    ffi.Pointer<objc.ObjCObject> indexes,
    ffi.Pointer<objc.ObjCObject> key,
  ) {
    return __objc_msgSend_511(obj, sel, changeKind, indexes, key);
  }

  late final __objc_msgSend_511Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Int32,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_511 =
      __objc_msgSend_511Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_didChange_valuesAtIndexes_forKey_1 = objc.registerName(
    "didChange:valuesAtIndexes:forKey:",
  );
  late final _sel_willChangeValueForKey_withSetMutation_usingObjects_1 = objc
      .registerName("willChangeValueForKey:withSetMutation:usingObjects:");
  void _objc_msgSend_512(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> key,
    int mutationKind,
    ffi.Pointer<objc.ObjCObject> objects,
  ) {
    return __objc_msgSend_512(obj, sel, key, mutationKind, objects);
  }

  late final __objc_msgSend_512Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Int32,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_512 =
      __objc_msgSend_512Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              int,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_didChangeValueForKey_withSetMutation_usingObjects_1 = objc
      .registerName("didChangeValueForKey:withSetMutation:usingObjects:");
  late final _sel_observationInfo1 = objc.registerName("observationInfo");
  late final _sel_setObservationInfo_1 = objc.registerName(
    "setObservationInfo:",
  );
  void _objc_msgSend_513(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<ffi.Void> value,
  ) {
    return __objc_msgSend_513(obj, sel, value);
  }

  late final __objc_msgSend_513Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<ffi.Void>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_513 =
      __objc_msgSend_513Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<ffi.Void>,
            )
          >();

  late final _sel_classForKeyedArchiver1 = objc.registerName(
    "classForKeyedArchiver",
  );
  late final _class_NSKeyedArchiver1 = objc.getClass("NSKeyedArchiver");
  late final _sel_initRequiringSecureCoding_1 = objc.registerName(
    "initRequiringSecureCoding:",
  );
  instancetype _objc_msgSend_514(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    bool requiresSecureCoding,
  ) {
    return __objc_msgSend_514(obj, sel, requiresSecureCoding);
  }

  late final __objc_msgSend_514Ptr = _lookup<
    ffi.NativeFunction<
      instancetype Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Bool,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_514 =
      __objc_msgSend_514Ptr
          .asFunction<
            instancetype Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              bool,
            )
          >();

  late final _sel_archivedDataWithRootObject_requiringSecureCoding_error_1 =
      objc.registerName(
        "archivedDataWithRootObject:requiringSecureCoding:error:",
      );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_515(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> object,
    bool requiresSecureCoding,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    return __objc_msgSend_515(obj, sel, object, requiresSecureCoding, error);
  }

  late final __objc_msgSend_515Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Bool,
        ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_515 =
      __objc_msgSend_515Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              bool,
              ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
            )
          >();

  late final _class_NSMutableData1 = objc.getClass("NSMutableData");
  late final _sel_mutableBytes1 = objc.registerName("mutableBytes");
  late final _sel_setLength_1 = objc.registerName("setLength:");
  void _objc_msgSend_516(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int value,
  ) {
    return __objc_msgSend_516(obj, sel, value);
  }

  late final __objc_msgSend_516Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.UnsignedLong,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_516 =
      __objc_msgSend_516Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
            )
          >();

  late final _sel_appendBytes_length_1 = objc.registerName(
    "appendBytes:length:",
  );
  late final _sel_appendData_1 = objc.registerName("appendData:");
  late final _sel_increaseLengthBy_1 = objc.registerName("increaseLengthBy:");
  late final _sel_replaceBytesInRange_withBytes_1 = objc.registerName(
    "replaceBytesInRange:withBytes:",
  );
  void _objc_msgSend_517(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    _NSRange range,
    ffi.Pointer<ffi.Void> bytes,
  ) {
    return __objc_msgSend_517(obj, sel, range, bytes);
  }

  late final __objc_msgSend_517Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        _NSRange,
        ffi.Pointer<ffi.Void>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_517 =
      __objc_msgSend_517Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              _NSRange,
              ffi.Pointer<ffi.Void>,
            )
          >();

  late final _sel_resetBytesInRange_1 = objc.registerName("resetBytesInRange:");
  late final _sel_setData_1 = objc.registerName("setData:");
  late final _sel_replaceBytesInRange_withBytes_length_1 = objc.registerName(
    "replaceBytesInRange:withBytes:length:",
  );
  void _objc_msgSend_518(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    _NSRange range,
    ffi.Pointer<ffi.Void> replacementBytes,
    int replacementLength,
  ) {
    return __objc_msgSend_518(
      obj,
      sel,
      range,
      replacementBytes,
      replacementLength,
    );
  }

  late final __objc_msgSend_518Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        _NSRange,
        ffi.Pointer<ffi.Void>,
        ffi.UnsignedLong,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_518 =
      __objc_msgSend_518Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              _NSRange,
              ffi.Pointer<ffi.Void>,
              int,
            )
          >();

  late final _sel_dataWithCapacity_1 = objc.registerName("dataWithCapacity:");
  instancetype _objc_msgSend_519(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int aNumItems,
  ) {
    return __objc_msgSend_519(obj, sel, aNumItems);
  }

  late final __objc_msgSend_519Ptr = _lookup<
    ffi.NativeFunction<
      instancetype Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.UnsignedLong,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_519 =
      __objc_msgSend_519Ptr
          .asFunction<
            instancetype Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
            )
          >();

  late final _sel_dataWithLength_1 = objc.registerName("dataWithLength:");
  late final _sel_initWithLength_1 = objc.registerName("initWithLength:");
  late final _sel_decompressUsingAlgorithm_error_1 = objc.registerName(
    "decompressUsingAlgorithm:error:",
  );
  bool _objc_msgSend_520(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int algorithm,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    return __objc_msgSend_520(obj, sel, algorithm, error);
  }

  late final __objc_msgSend_520Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Bool Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Int32,
        ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_520 =
      __objc_msgSend_520Ptr
          .asFunction<
            bool Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
              ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
            )
          >();

  late final _sel_compressUsingAlgorithm_error_1 = objc.registerName(
    "compressUsingAlgorithm:error:",
  );
  late final _sel_initForWritingWithMutableData_1 = objc.registerName(
    "initForWritingWithMutableData:",
  );
  instancetype _objc_msgSend_521(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> data,
  ) {
    return __objc_msgSend_521(obj, sel, data);
  }

  late final __objc_msgSend_521Ptr = _lookup<
    ffi.NativeFunction<
      instancetype Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_521 =
      __objc_msgSend_521Ptr
          .asFunction<
            instancetype Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_archivedDataWithRootObject_1 = objc.registerName(
    "archivedDataWithRootObject:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_522(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> rootObject,
  ) {
    return __objc_msgSend_522(obj, sel, rootObject);
  }

  late final __objc_msgSend_522Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_522 =
      __objc_msgSend_522Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_archiveRootObject_toFile_1 = objc.registerName(
    "archiveRootObject:toFile:",
  );
  late final _sel_outputFormat1 = objc.registerName("outputFormat");
  int _objc_msgSend_523(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_523(obj, sel);
  }

  late final __objc_msgSend_523Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Int32 Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_523 =
      __objc_msgSend_523Ptr
          .asFunction<
            int Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_setOutputFormat_1 = objc.registerName("setOutputFormat:");
  void _objc_msgSend_524(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int value,
  ) {
    return __objc_msgSend_524(obj, sel, value);
  }

  late final __objc_msgSend_524Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Int32,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_524 =
      __objc_msgSend_524Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
            )
          >();

  late final _sel_encodedData1 = objc.registerName("encodedData");
  late final _sel_finishEncoding1 = objc.registerName("finishEncoding");
  late final _sel_setClassName_forClass_1 = objc.registerName(
    "setClassName:forClass:",
  );
  void _objc_msgSend_525(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> codedName,
    ffi.Pointer<objc.ObjCObject> cls,
  ) {
    return __objc_msgSend_525(obj, sel, codedName, cls);
  }

  late final __objc_msgSend_525Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_525 =
      __objc_msgSend_525Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_classNameForClass_1 = objc.registerName("classNameForClass:");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_526(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> cls,
  ) {
    return __objc_msgSend_526(obj, sel, cls);
  }

  late final __objc_msgSend_526Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_526 =
      __objc_msgSend_526Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_setRequiresSecureCoding_1 = objc.registerName(
    "setRequiresSecureCoding:",
  );
  void _objc_msgSend_527(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    bool value,
  ) {
    return __objc_msgSend_527(obj, sel, value);
  }

  late final __objc_msgSend_527Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Bool,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_527 =
      __objc_msgSend_527Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              bool,
            )
          >();

  late final _sel_replacementObjectForKeyedArchiver_1 = objc.registerName(
    "replacementObjectForKeyedArchiver:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_528(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> archiver,
  ) {
    return __objc_msgSend_528(obj, sel, archiver);
  }

  late final __objc_msgSend_528Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_528 =
      __objc_msgSend_528Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_performSelectorOnMainThread_withObject_waitUntilDone_modes_1 =
      objc.registerName(
        "performSelectorOnMainThread:withObject:waitUntilDone:modes:",
      );
  void _objc_msgSend_529(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCSelector> aSelector,
    ffi.Pointer<objc.ObjCObject> arg,
    bool wait,
    ffi.Pointer<objc.ObjCObject> array,
  ) {
    return __objc_msgSend_529(obj, sel, aSelector, arg, wait, array);
  }

  late final __objc_msgSend_529Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Bool,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_529 =
      __objc_msgSend_529Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              bool,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_performSelectorOnMainThread_withObject_waitUntilDone_1 = objc
      .registerName("performSelectorOnMainThread:withObject:waitUntilDone:");
  void _objc_msgSend_530(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCSelector> aSelector,
    ffi.Pointer<objc.ObjCObject> arg,
    bool wait,
  ) {
    return __objc_msgSend_530(obj, sel, aSelector, arg, wait);
  }

  late final __objc_msgSend_530Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Bool,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_530 =
      __objc_msgSend_530Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              bool,
            )
          >();

  late final _class_NSThread1 = objc.getClass("NSThread");
  late final _sel_currentThread1 = objc.registerName("currentThread");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_531(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_531(obj, sel);
  }

  late final __objc_msgSend_531Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_531 =
      __objc_msgSend_531Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_detachNewThreadWithBlock_1 = objc.registerName(
    "detachNewThreadWithBlock:",
  );
  void _objc_msgSend_532(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCBlock> block,
  ) {
    return __objc_msgSend_532(obj, sel, block);
  }

  late final __objc_msgSend_532Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCBlock>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_532 =
      __objc_msgSend_532Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCBlock>,
            )
          >();

  late final _sel_detachNewThreadSelector_toTarget_withObject_1 = objc
      .registerName("detachNewThreadSelector:toTarget:withObject:");
  void _objc_msgSend_533(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCSelector> selector,
    ffi.Pointer<objc.ObjCObject> target,
    ffi.Pointer<objc.ObjCObject> argument,
  ) {
    return __objc_msgSend_533(obj, sel, selector, target, argument);
  }

  late final __objc_msgSend_533Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_533 =
      __objc_msgSend_533Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_isMultiThreaded1 = objc.registerName("isMultiThreaded");
  late final _class_NSMutableDictionary1 = objc.getClass("NSMutableDictionary");
  late final _sel_removeObjectForKey_1 = objc.registerName(
    "removeObjectForKey:",
  );
  late final _sel_setObject_forKey_1 = objc.registerName("setObject:forKey:");
  void _objc_msgSend_534(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> anObject,
    ffi.Pointer<objc.ObjCObject> aKey,
  ) {
    return __objc_msgSend_534(obj, sel, anObject, aKey);
  }

  late final __objc_msgSend_534Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_534 =
      __objc_msgSend_534Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_addEntriesFromDictionary_1 = objc.registerName(
    "addEntriesFromDictionary:",
  );
  late final _sel_removeObjectsForKeys_1 = objc.registerName(
    "removeObjectsForKeys:",
  );
  late final _sel_setDictionary_1 = objc.registerName("setDictionary:");
  late final _sel_setObject_forKeyedSubscript_1 = objc.registerName(
    "setObject:forKeyedSubscript:",
  );
  void _objc_msgSend_535(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> obj1,
    ffi.Pointer<objc.ObjCObject> key,
  ) {
    return __objc_msgSend_535(obj, sel, obj1, key);
  }

  late final __objc_msgSend_535Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_535 =
      __objc_msgSend_535Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_dictionaryWithCapacity_1 = objc.registerName(
    "dictionaryWithCapacity:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_536(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> path,
  ) {
    return __objc_msgSend_536(obj, sel, path);
  }

  late final __objc_msgSend_536Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_536 =
      __objc_msgSend_536Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  ffi.Pointer<objc.ObjCObject> _objc_msgSend_537(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> url,
  ) {
    return __objc_msgSend_537(obj, sel, url);
  }

  late final __objc_msgSend_537Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_537 =
      __objc_msgSend_537Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_dictionaryWithSharedKeySet_1 = objc.registerName(
    "dictionaryWithSharedKeySet:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_538(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> keyset,
  ) {
    return __objc_msgSend_538(obj, sel, keyset);
  }

  late final __objc_msgSend_538Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_538 =
      __objc_msgSend_538Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_threadDictionary1 = objc.registerName("threadDictionary");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_539(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_539(obj, sel);
  }

  late final __objc_msgSend_539Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_539 =
      __objc_msgSend_539Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_sleepUntilDate_1 = objc.registerName("sleepUntilDate:");
  void _objc_msgSend_540(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> date,
  ) {
    return __objc_msgSend_540(obj, sel, date);
  }

  late final __objc_msgSend_540Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_540 =
      __objc_msgSend_540Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_sleepForTimeInterval_1 = objc.registerName(
    "sleepForTimeInterval:",
  );
  void _objc_msgSend_541(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    double ti,
  ) {
    return __objc_msgSend_541(obj, sel, ti);
  }

  late final __objc_msgSend_541Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Double,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_541 =
      __objc_msgSend_541Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              double,
            )
          >();

  late final _sel_exit1 = objc.registerName("exit");
  late final _sel_threadPriority1 = objc.registerName("threadPriority");
  late final _sel_setThreadPriority_1 = objc.registerName("setThreadPriority:");
  void _objc_msgSend_542(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    double value,
  ) {
    return __objc_msgSend_542(obj, sel, value);
  }

  late final __objc_msgSend_542Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Double,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_542 =
      __objc_msgSend_542Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              double,
            )
          >();

  late final _sel_qualityOfService1 = objc.registerName("qualityOfService");
  int _objc_msgSend_543(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_543(obj, sel);
  }

  late final __objc_msgSend_543Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Int32 Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_543 =
      __objc_msgSend_543Ptr
          .asFunction<
            int Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_setQualityOfService_1 = objc.registerName(
    "setQualityOfService:",
  );
  void _objc_msgSend_544(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int value,
  ) {
    return __objc_msgSend_544(obj, sel, value);
  }

  late final __objc_msgSend_544Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Int32,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_544 =
      __objc_msgSend_544Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
            )
          >();

  late final _sel_callStackReturnAddresses1 = objc.registerName(
    "callStackReturnAddresses",
  );
  late final _sel_callStackSymbols1 = objc.registerName("callStackSymbols");
  late final _sel_setName_1 = objc.registerName("setName:");
  void _objc_msgSend_545(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> value,
  ) {
    return __objc_msgSend_545(obj, sel, value);
  }

  late final __objc_msgSend_545Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_545 =
      __objc_msgSend_545Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_stackSize1 = objc.registerName("stackSize");
  late final _sel_setStackSize_1 = objc.registerName("setStackSize:");
  late final _sel_isMainThread1 = objc.registerName("isMainThread");
  late final _sel_mainThread1 = objc.registerName("mainThread");
  late final _sel_initWithTarget_selector_object_1 = objc.registerName(
    "initWithTarget:selector:object:",
  );
  instancetype _objc_msgSend_546(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> target,
    ffi.Pointer<objc.ObjCSelector> selector,
    ffi.Pointer<objc.ObjCObject> argument,
  ) {
    return __objc_msgSend_546(obj, sel, target, selector, argument);
  }

  late final __objc_msgSend_546Ptr = _lookup<
    ffi.NativeFunction<
      instancetype Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_546 =
      __objc_msgSend_546Ptr
          .asFunction<
            instancetype Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_initWithBlock_1 = objc.registerName("initWithBlock:");
  instancetype _objc_msgSend_547(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCBlock> block,
  ) {
    return __objc_msgSend_547(obj, sel, block);
  }

  late final __objc_msgSend_547Ptr = _lookup<
    ffi.NativeFunction<
      instancetype Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCBlock>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_547 =
      __objc_msgSend_547Ptr
          .asFunction<
            instancetype Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCBlock>,
            )
          >();

  late final _sel_isExecuting1 = objc.registerName("isExecuting");
  late final _sel_isFinished1 = objc.registerName("isFinished");
  late final _sel_isCancelled1 = objc.registerName("isCancelled");
  late final _sel_cancel1 = objc.registerName("cancel");
  late final _sel_start1 = objc.registerName("start");
  late final _sel_main1 = objc.registerName("main");
  late final _sel_performSelector_onThread_withObject_waitUntilDone_modes_1 =
      objc.registerName(
        "performSelector:onThread:withObject:waitUntilDone:modes:",
      );
  void _objc_msgSend_548(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCSelector> aSelector,
    ffi.Pointer<objc.ObjCObject> thr,
    ffi.Pointer<objc.ObjCObject> arg,
    bool wait,
    ffi.Pointer<objc.ObjCObject> array,
  ) {
    return __objc_msgSend_548(obj, sel, aSelector, thr, arg, wait, array);
  }

  late final __objc_msgSend_548Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Bool,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_548 =
      __objc_msgSend_548Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
              bool,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_performSelector_onThread_withObject_waitUntilDone_1 = objc
      .registerName("performSelector:onThread:withObject:waitUntilDone:");
  void _objc_msgSend_549(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCSelector> aSelector,
    ffi.Pointer<objc.ObjCObject> thr,
    ffi.Pointer<objc.ObjCObject> arg,
    bool wait,
  ) {
    return __objc_msgSend_549(obj, sel, aSelector, thr, arg, wait);
  }

  late final __objc_msgSend_549Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Bool,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_549 =
      __objc_msgSend_549Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
              bool,
            )
          >();

  late final _sel_performSelectorInBackground_withObject_1 = objc.registerName(
    "performSelectorInBackground:withObject:",
  );
  late final _sel_classForArchiver1 = objc.registerName("classForArchiver");
  late final _class_NSArchiver1 = objc.getClass("NSArchiver");
  late final _sel_archiverData1 = objc.registerName("archiverData");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_550(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_550(obj, sel);
  }

  late final __objc_msgSend_550Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_550 =
      __objc_msgSend_550Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_encodeClassName_intoClassName_1 = objc.registerName(
    "encodeClassName:intoClassName:",
  );
  void _objc_msgSend_551(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> trueName,
    ffi.Pointer<objc.ObjCObject> inArchiveName,
  ) {
    return __objc_msgSend_551(obj, sel, trueName, inArchiveName);
  }

  late final __objc_msgSend_551Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_551 =
      __objc_msgSend_551Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_classNameEncodedForTrueClassName_1 = objc.registerName(
    "classNameEncodedForTrueClassName:",
  );
  late final _sel_replaceObject_withObject_1 = objc.registerName(
    "replaceObject:withObject:",
  );
  late final _sel_replacementObjectForArchiver_1 = objc.registerName(
    "replacementObjectForArchiver:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_552(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> archiver,
  ) {
    return __objc_msgSend_552(obj, sel, archiver);
  }

  late final __objc_msgSend_552Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_552 =
      __objc_msgSend_552Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_classForPortCoder1 = objc.registerName("classForPortCoder");
  late final _class_NSPortCoder1 = objc.getClass("NSPortCoder");
  late final _sel_isBycopy1 = objc.registerName("isBycopy");
  late final _sel_isByref1 = objc.registerName("isByref");
  late final _class_NSPort1 = objc.getClass("NSPort");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_553(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_553(obj, sel);
  }

  late final __objc_msgSend_553Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_553 =
      __objc_msgSend_553Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_invalidate1 = objc.registerName("invalidate");
  late final _sel_isValid1 = objc.registerName("isValid");
  late final _class_NSRunLoop1 = objc.getClass("NSRunLoop");
  late final _sel_currentRunLoop1 = objc.registerName("currentRunLoop");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_554(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_554(obj, sel);
  }

  late final __objc_msgSend_554Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_554 =
      __objc_msgSend_554Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_mainRunLoop1 = objc.registerName("mainRunLoop");
  late final _sel_currentMode1 = objc.registerName("currentMode");
  late final _sel_getCFRunLoop1 = objc.registerName("getCFRunLoop");
  ffi.Pointer<__CFRunLoop> _objc_msgSend_555(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_555(obj, sel);
  }

  late final __objc_msgSend_555Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<__CFRunLoop> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_555 =
      __objc_msgSend_555Ptr
          .asFunction<
            ffi.Pointer<__CFRunLoop> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _class_NSTimer1 = objc.getClass("NSTimer");
  late final _sel_timerWithTimeInterval_invocation_repeats_1 = objc
      .registerName("timerWithTimeInterval:invocation:repeats:");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_556(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    double ti,
    ffi.Pointer<objc.ObjCObject> invocation,
    bool yesOrNo,
  ) {
    return __objc_msgSend_556(obj, sel, ti, invocation, yesOrNo);
  }

  late final __objc_msgSend_556Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Double,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Bool,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_556 =
      __objc_msgSend_556Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              double,
              ffi.Pointer<objc.ObjCObject>,
              bool,
            )
          >();

  late final _sel_scheduledTimerWithTimeInterval_invocation_repeats_1 = objc
      .registerName("scheduledTimerWithTimeInterval:invocation:repeats:");
  late final _sel_timerWithTimeInterval_target_selector_userInfo_repeats_1 =
      objc.registerName(
        "timerWithTimeInterval:target:selector:userInfo:repeats:",
      );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_557(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    double ti,
    ffi.Pointer<objc.ObjCObject> aTarget,
    ffi.Pointer<objc.ObjCSelector> aSelector,
    ffi.Pointer<objc.ObjCObject> userInfo,
    bool yesOrNo,
  ) {
    return __objc_msgSend_557(
      obj,
      sel,
      ti,
      aTarget,
      aSelector,
      userInfo,
      yesOrNo,
    );
  }

  late final __objc_msgSend_557Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Double,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Bool,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_557 =
      __objc_msgSend_557Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              double,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              bool,
            )
          >();

  late final _sel_scheduledTimerWithTimeInterval_target_selector_userInfo_repeats_1 =
      objc.registerName(
        "scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:",
      );
  late final _sel_timerWithTimeInterval_repeats_block_1 = objc.registerName(
    "timerWithTimeInterval:repeats:block:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_558(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    double interval,
    bool repeats,
    ffi.Pointer<objc.ObjCBlock> block,
  ) {
    return __objc_msgSend_558(obj, sel, interval, repeats, block);
  }

  late final __objc_msgSend_558Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Double,
        ffi.Bool,
        ffi.Pointer<objc.ObjCBlock>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_558 =
      __objc_msgSend_558Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              double,
              bool,
              ffi.Pointer<objc.ObjCBlock>,
            )
          >();

  late final _sel_scheduledTimerWithTimeInterval_repeats_block_1 = objc
      .registerName("scheduledTimerWithTimeInterval:repeats:block:");
  late final _sel_initWithFireDate_interval_repeats_block_1 = objc.registerName(
    "initWithFireDate:interval:repeats:block:",
  );
  instancetype _objc_msgSend_559(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> date,
    double interval,
    bool repeats,
    ffi.Pointer<objc.ObjCBlock> block,
  ) {
    return __objc_msgSend_559(obj, sel, date, interval, repeats, block);
  }

  late final __objc_msgSend_559Ptr = _lookup<
    ffi.NativeFunction<
      instancetype Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Double,
        ffi.Bool,
        ffi.Pointer<objc.ObjCBlock>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_559 =
      __objc_msgSend_559Ptr
          .asFunction<
            instancetype Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              double,
              bool,
              ffi.Pointer<objc.ObjCBlock>,
            )
          >();

  late final _sel_initWithFireDate_interval_target_selector_userInfo_repeats_1 =
      objc.registerName(
        "initWithFireDate:interval:target:selector:userInfo:repeats:",
      );
  instancetype _objc_msgSend_560(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> date,
    double ti,
    ffi.Pointer<objc.ObjCObject> t,
    ffi.Pointer<objc.ObjCSelector> s,
    ffi.Pointer<objc.ObjCObject> ui,
    bool rep,
  ) {
    return __objc_msgSend_560(obj, sel, date, ti, t, s, ui, rep);
  }

  late final __objc_msgSend_560Ptr = _lookup<
    ffi.NativeFunction<
      instancetype Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Double,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Bool,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_560 =
      __objc_msgSend_560Ptr
          .asFunction<
            instancetype Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              double,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              bool,
            )
          >();

  late final _sel_fire1 = objc.registerName("fire");
  late final _sel_fireDate1 = objc.registerName("fireDate");
  late final _sel_setFireDate_1 = objc.registerName("setFireDate:");
  void _objc_msgSend_561(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> value,
  ) {
    return __objc_msgSend_561(obj, sel, value);
  }

  late final __objc_msgSend_561Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_561 =
      __objc_msgSend_561Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_timeInterval1 = objc.registerName("timeInterval");
  late final _sel_tolerance1 = objc.registerName("tolerance");
  late final _sel_setTolerance_1 = objc.registerName("setTolerance:");
  late final _sel_addTimer_forMode_1 = objc.registerName("addTimer:forMode:");
  void _objc_msgSend_562(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> timer,
    ffi.Pointer<objc.ObjCObject> mode,
  ) {
    return __objc_msgSend_562(obj, sel, timer, mode);
  }

  late final __objc_msgSend_562Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_562 =
      __objc_msgSend_562Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_addPort_forMode_1 = objc.registerName("addPort:forMode:");
  void _objc_msgSend_563(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> aPort,
    ffi.Pointer<objc.ObjCObject> mode,
  ) {
    return __objc_msgSend_563(obj, sel, aPort, mode);
  }

  late final __objc_msgSend_563Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_563 =
      __objc_msgSend_563Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_removePort_forMode_1 = objc.registerName(
    "removePort:forMode:",
  );
  late final _sel_limitDateForMode_1 = objc.registerName("limitDateForMode:");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_564(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> mode,
  ) {
    return __objc_msgSend_564(obj, sel, mode);
  }

  late final __objc_msgSend_564Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_564 =
      __objc_msgSend_564Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_acceptInputForMode_beforeDate_1 = objc.registerName(
    "acceptInputForMode:beforeDate:",
  );
  void _objc_msgSend_565(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> mode,
    ffi.Pointer<objc.ObjCObject> limitDate,
  ) {
    return __objc_msgSend_565(obj, sel, mode, limitDate);
  }

  late final __objc_msgSend_565Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_565 =
      __objc_msgSend_565Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_run1 = objc.registerName("run");
  late final _sel_runUntilDate_1 = objc.registerName("runUntilDate:");
  late final _sel_runMode_beforeDate_1 = objc.registerName(
    "runMode:beforeDate:",
  );
  bool _objc_msgSend_566(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> mode,
    ffi.Pointer<objc.ObjCObject> limitDate,
  ) {
    return __objc_msgSend_566(obj, sel, mode, limitDate);
  }

  late final __objc_msgSend_566Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Bool Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_566 =
      __objc_msgSend_566Ptr
          .asFunction<
            bool Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_configureAsServer1 = objc.registerName("configureAsServer");
  late final _sel_performInModes_block_1 = objc.registerName(
    "performInModes:block:",
  );
  void _objc_msgSend_567(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> modes,
    ffi.Pointer<objc.ObjCBlock> block,
  ) {
    return __objc_msgSend_567(obj, sel, modes, block);
  }

  late final __objc_msgSend_567Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCBlock>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_567 =
      __objc_msgSend_567Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCBlock>,
            )
          >();

  late final _sel_performBlock_1 = objc.registerName("performBlock:");
  late final _sel_performSelector_target_argument_order_modes_1 = objc
      .registerName("performSelector:target:argument:order:modes:");
  void _objc_msgSend_568(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCSelector> aSelector,
    ffi.Pointer<objc.ObjCObject> target,
    ffi.Pointer<objc.ObjCObject> arg,
    int order,
    ffi.Pointer<objc.ObjCObject> modes,
  ) {
    return __objc_msgSend_568(obj, sel, aSelector, target, arg, order, modes);
  }

  late final __objc_msgSend_568Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.UnsignedLong,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_568 =
      __objc_msgSend_568Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
              int,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_cancelPerformSelector_target_argument_1 = objc.registerName(
    "cancelPerformSelector:target:argument:",
  );
  late final _sel_cancelPerformSelectorsWithTarget_1 = objc.registerName(
    "cancelPerformSelectorsWithTarget:",
  );
  late final _sel_scheduleInRunLoop_forMode_1 = objc.registerName(
    "scheduleInRunLoop:forMode:",
  );
  void _objc_msgSend_569(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> runLoop,
    ffi.Pointer<objc.ObjCObject> mode,
  ) {
    return __objc_msgSend_569(obj, sel, runLoop, mode);
  }

  late final __objc_msgSend_569Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_569 =
      __objc_msgSend_569Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_removeFromRunLoop_forMode_1 = objc.registerName(
    "removeFromRunLoop:forMode:",
  );
  late final _sel_reservedSpaceLength1 = objc.registerName(
    "reservedSpaceLength",
  );
  late final _sel_sendBeforeDate_components_from_reserved_1 = objc.registerName(
    "sendBeforeDate:components:from:reserved:",
  );
  bool _objc_msgSend_570(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> limitDate,
    ffi.Pointer<objc.ObjCObject> components,
    ffi.Pointer<objc.ObjCObject> receivePort,
    int headerSpaceReserved,
  ) {
    return __objc_msgSend_570(
      obj,
      sel,
      limitDate,
      components,
      receivePort,
      headerSpaceReserved,
    );
  }

  late final __objc_msgSend_570Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Bool Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.UnsignedLong,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_570 =
      __objc_msgSend_570Ptr
          .asFunction<
            bool Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
              int,
            )
          >();

  late final _sel_sendBeforeDate_msgid_components_from_reserved_1 = objc
      .registerName("sendBeforeDate:msgid:components:from:reserved:");
  bool _objc_msgSend_571(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> limitDate,
    int msgID,
    ffi.Pointer<objc.ObjCObject> components,
    ffi.Pointer<objc.ObjCObject> receivePort,
    int headerSpaceReserved,
  ) {
    return __objc_msgSend_571(
      obj,
      sel,
      limitDate,
      msgID,
      components,
      receivePort,
      headerSpaceReserved,
    );
  }

  late final __objc_msgSend_571Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Bool Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.UnsignedLong,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.UnsignedLong,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_571 =
      __objc_msgSend_571Ptr
          .asFunction<
            bool Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              int,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
              int,
            )
          >();

  late final _class_NSConnection1 = objc.getClass("NSConnection");
  late final _sel_statistics1 = objc.registerName("statistics");
  late final _sel_allConnections1 = objc.registerName("allConnections");
  late final _sel_defaultConnection1 = objc.registerName("defaultConnection");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_572(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_572(obj, sel);
  }

  late final __objc_msgSend_572Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_572 =
      __objc_msgSend_572Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_connectionWithRegisteredName_host_1 = objc.registerName(
    "connectionWithRegisteredName:host:",
  );
  instancetype _objc_msgSend_573(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> name,
    ffi.Pointer<objc.ObjCObject> hostName,
  ) {
    return __objc_msgSend_573(obj, sel, name, hostName);
  }

  late final __objc_msgSend_573Ptr = _lookup<
    ffi.NativeFunction<
      instancetype Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_573 =
      __objc_msgSend_573Ptr
          .asFunction<
            instancetype Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _class_NSPortNameServer1 = objc.getClass("NSPortNameServer");
  late final _sel_systemDefaultPortNameServer1 = objc.registerName(
    "systemDefaultPortNameServer",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_574(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_574(obj, sel);
  }

  late final __objc_msgSend_574Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_574 =
      __objc_msgSend_574Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_portForName_1 = objc.registerName("portForName:");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_575(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> name,
  ) {
    return __objc_msgSend_575(obj, sel, name);
  }

  late final __objc_msgSend_575Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_575 =
      __objc_msgSend_575Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_portForName_host_1 = objc.registerName("portForName:host:");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_576(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> name,
    ffi.Pointer<objc.ObjCObject> host,
  ) {
    return __objc_msgSend_576(obj, sel, name, host);
  }

  late final __objc_msgSend_576Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_576 =
      __objc_msgSend_576Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_registerPort_name_1 = objc.registerName("registerPort:name:");
  bool _objc_msgSend_577(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> port,
    ffi.Pointer<objc.ObjCObject> name,
  ) {
    return __objc_msgSend_577(obj, sel, port, name);
  }

  late final __objc_msgSend_577Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Bool Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_577 =
      __objc_msgSend_577Ptr
          .asFunction<
            bool Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_removePortForName_1 = objc.registerName("removePortForName:");
  late final _sel_connectionWithRegisteredName_host_usingNameServer_1 = objc
      .registerName("connectionWithRegisteredName:host:usingNameServer:");
  instancetype _objc_msgSend_578(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> name,
    ffi.Pointer<objc.ObjCObject> hostName,
    ffi.Pointer<objc.ObjCObject> server,
  ) {
    return __objc_msgSend_578(obj, sel, name, hostName, server);
  }

  late final __objc_msgSend_578Ptr = _lookup<
    ffi.NativeFunction<
      instancetype Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_578 =
      __objc_msgSend_578Ptr
          .asFunction<
            instancetype Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _class_NSDistantObject1 = objc.getClass("NSDistantObject");
  late final _class_NSProxy1 = objc.getClass("NSProxy");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_579(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCSelector> sel1,
  ) {
    return __objc_msgSend_579(obj, sel, sel1);
  }

  late final __objc_msgSend_579Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_579 =
      __objc_msgSend_579Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_respondsToSelector_1 = objc.registerName(
    "respondsToSelector:",
  );
  late final _sel_proxyWithTarget_connection_1 = objc.registerName(
    "proxyWithTarget:connection:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_580(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> target,
    ffi.Pointer<objc.ObjCObject> connection,
  ) {
    return __objc_msgSend_580(obj, sel, target, connection);
  }

  late final __objc_msgSend_580Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_580 =
      __objc_msgSend_580Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_initWithTarget_connection_1 = objc.registerName(
    "initWithTarget:connection:",
  );
  late final _sel_proxyWithLocal_connection_1 = objc.registerName(
    "proxyWithLocal:connection:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_581(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> target,
    ffi.Pointer<objc.ObjCObject> connection,
  ) {
    return __objc_msgSend_581(obj, sel, target, connection);
  }

  late final __objc_msgSend_581Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_581 =
      __objc_msgSend_581Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_initWithLocal_connection_1 = objc.registerName(
    "initWithLocal:connection:",
  );
  late final _sel_setProtocolForProxy_1 = objc.registerName(
    "setProtocolForProxy:",
  );
  void _objc_msgSend_582(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> proto,
  ) {
    return __objc_msgSend_582(obj, sel, proto);
  }

  late final __objc_msgSend_582Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_582 =
      __objc_msgSend_582Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_connectionForProxy1 = objc.registerName("connectionForProxy");
  late final _sel_rootProxyForConnectionWithRegisteredName_host_1 = objc
      .registerName("rootProxyForConnectionWithRegisteredName:host:");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_583(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> name,
    ffi.Pointer<objc.ObjCObject> hostName,
  ) {
    return __objc_msgSend_583(obj, sel, name, hostName);
  }

  late final __objc_msgSend_583Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_583 =
      __objc_msgSend_583Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_rootProxyForConnectionWithRegisteredName_host_usingNameServer_1 =
      objc.registerName(
        "rootProxyForConnectionWithRegisteredName:host:usingNameServer:",
      );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_584(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> name,
    ffi.Pointer<objc.ObjCObject> hostName,
    ffi.Pointer<objc.ObjCObject> server,
  ) {
    return __objc_msgSend_584(obj, sel, name, hostName, server);
  }

  late final __objc_msgSend_584Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_584 =
      __objc_msgSend_584Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_serviceConnectionWithName_rootObject_usingNameServer_1 = objc
      .registerName("serviceConnectionWithName:rootObject:usingNameServer:");
  instancetype _objc_msgSend_585(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> name,
    ffi.Pointer<objc.ObjCObject> root,
    ffi.Pointer<objc.ObjCObject> server,
  ) {
    return __objc_msgSend_585(obj, sel, name, root, server);
  }

  late final __objc_msgSend_585Ptr = _lookup<
    ffi.NativeFunction<
      instancetype Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_585 =
      __objc_msgSend_585Ptr
          .asFunction<
            instancetype Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_serviceConnectionWithName_rootObject_1 = objc.registerName(
    "serviceConnectionWithName:rootObject:",
  );
  instancetype _objc_msgSend_586(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> name,
    ffi.Pointer<objc.ObjCObject> root,
  ) {
    return __objc_msgSend_586(obj, sel, name, root);
  }

  late final __objc_msgSend_586Ptr = _lookup<
    ffi.NativeFunction<
      instancetype Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_586 =
      __objc_msgSend_586Ptr
          .asFunction<
            instancetype Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_requestTimeout1 = objc.registerName("requestTimeout");
  late final _sel_setRequestTimeout_1 = objc.registerName("setRequestTimeout:");
  late final _sel_replyTimeout1 = objc.registerName("replyTimeout");
  late final _sel_setReplyTimeout_1 = objc.registerName("setReplyTimeout:");
  late final _sel_rootObject1 = objc.registerName("rootObject");
  late final _sel_setRootObject_1 = objc.registerName("setRootObject:");
  late final _sel_independentConversationQueueing1 = objc.registerName(
    "independentConversationQueueing",
  );
  late final _sel_setIndependentConversationQueueing_1 = objc.registerName(
    "setIndependentConversationQueueing:",
  );
  late final _sel_rootProxy1 = objc.registerName("rootProxy");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_587(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_587(obj, sel);
  }

  late final __objc_msgSend_587Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_587 =
      __objc_msgSend_587Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_addRequestMode_1 = objc.registerName("addRequestMode:");
  late final _sel_removeRequestMode_1 = objc.registerName("removeRequestMode:");
  late final _sel_requestModes1 = objc.registerName("requestModes");
  late final _sel_registerName_1 = objc.registerName("registerName:");
  bool _objc_msgSend_588(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> name,
  ) {
    return __objc_msgSend_588(obj, sel, name);
  }

  late final __objc_msgSend_588Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Bool Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_588 =
      __objc_msgSend_588Ptr
          .asFunction<
            bool Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_registerName_withNameServer_1 = objc.registerName(
    "registerName:withNameServer:",
  );
  bool _objc_msgSend_589(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> name,
    ffi.Pointer<objc.ObjCObject> server,
  ) {
    return __objc_msgSend_589(obj, sel, name, server);
  }

  late final __objc_msgSend_589Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Bool Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_589 =
      __objc_msgSend_589Ptr
          .asFunction<
            bool Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_connectionWithReceivePort_sendPort_1 = objc.registerName(
    "connectionWithReceivePort:sendPort:",
  );
  instancetype _objc_msgSend_590(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> receivePort,
    ffi.Pointer<objc.ObjCObject> sendPort,
  ) {
    return __objc_msgSend_590(obj, sel, receivePort, sendPort);
  }

  late final __objc_msgSend_590Ptr = _lookup<
    ffi.NativeFunction<
      instancetype Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_590 =
      __objc_msgSend_590Ptr
          .asFunction<
            instancetype Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_currentConversation1 = objc.registerName(
    "currentConversation",
  );
  late final _sel_initWithReceivePort_sendPort_1 = objc.registerName(
    "initWithReceivePort:sendPort:",
  );
  late final _sel_sendPort1 = objc.registerName("sendPort");
  late final _sel_receivePort1 = objc.registerName("receivePort");
  late final _sel_enableMultipleThreads1 = objc.registerName(
    "enableMultipleThreads",
  );
  late final _sel_multipleThreadsEnabled1 = objc.registerName(
    "multipleThreadsEnabled",
  );
  late final _sel_addRunLoop_1 = objc.registerName("addRunLoop:");
  void _objc_msgSend_591(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> runloop,
  ) {
    return __objc_msgSend_591(obj, sel, runloop);
  }

  late final __objc_msgSend_591Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_591 =
      __objc_msgSend_591Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_removeRunLoop_1 = objc.registerName("removeRunLoop:");
  late final _sel_runInNewThread1 = objc.registerName("runInNewThread");
  late final _sel_remoteObjects1 = objc.registerName("remoteObjects");
  late final _sel_localObjects1 = objc.registerName("localObjects");
  late final _sel_dispatchWithComponents_1 = objc.registerName(
    "dispatchWithComponents:",
  );
  late final _sel_addConnection_toRunLoop_forMode_1 = objc.registerName(
    "addConnection:toRunLoop:forMode:",
  );
  void _objc_msgSend_592(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> conn,
    ffi.Pointer<objc.ObjCObject> runLoop,
    ffi.Pointer<objc.ObjCObject> mode,
  ) {
    return __objc_msgSend_592(obj, sel, conn, runLoop, mode);
  }

  late final __objc_msgSend_592Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_592 =
      __objc_msgSend_592Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_removeConnection_fromRunLoop_forMode_1 = objc.registerName(
    "removeConnection:fromRunLoop:forMode:",
  );
  late final _sel_encodePortObject_1 = objc.registerName("encodePortObject:");
  void _objc_msgSend_593(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> aport,
  ) {
    return __objc_msgSend_593(obj, sel, aport);
  }

  late final __objc_msgSend_593Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_593 =
      __objc_msgSend_593Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_decodePortObject1 = objc.registerName("decodePortObject");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_594(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_594(obj, sel);
  }

  late final __objc_msgSend_594Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_594 =
      __objc_msgSend_594Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_connection1 = objc.registerName("connection");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_595(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_595(obj, sel);
  }

  late final __objc_msgSend_595Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_595 =
      __objc_msgSend_595Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_portCoderWithReceivePort_sendPort_components_1 = objc
      .registerName("portCoderWithReceivePort:sendPort:components:");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_596(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> rcvPort,
    ffi.Pointer<objc.ObjCObject> sndPort,
    ffi.Pointer<objc.ObjCObject> comps,
  ) {
    return __objc_msgSend_596(obj, sel, rcvPort, sndPort, comps);
  }

  late final __objc_msgSend_596Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_596 =
      __objc_msgSend_596Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_initWithReceivePort_sendPort_components_1 = objc.registerName(
    "initWithReceivePort:sendPort:components:",
  );
  late final _sel_dispatch1 = objc.registerName("dispatch");
  late final _sel_replacementObjectForPortCoder_1 = objc.registerName(
    "replacementObjectForPortCoder:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_597(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> coder,
  ) {
    return __objc_msgSend_597(obj, sel, coder);
  }

  late final __objc_msgSend_597Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_597 =
      __objc_msgSend_597Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _class_NSClassDescription1 = objc.getClass("NSClassDescription");
  late final _sel_registerClassDescription_forClass_1 = objc.registerName(
    "registerClassDescription:forClass:",
  );
  void _objc_msgSend_598(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> description,
    ffi.Pointer<objc.ObjCObject> aClass,
  ) {
    return __objc_msgSend_598(obj, sel, description, aClass);
  }

  late final __objc_msgSend_598Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_598 =
      __objc_msgSend_598Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_invalidateClassDescriptionCache1 = objc.registerName(
    "invalidateClassDescriptionCache",
  );
  late final _sel_classDescriptionForClass_1 = objc.registerName(
    "classDescriptionForClass:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_599(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> aClass,
  ) {
    return __objc_msgSend_599(obj, sel, aClass);
  }

  late final __objc_msgSend_599Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_599 =
      __objc_msgSend_599Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_attributeKeys1 = objc.registerName("attributeKeys");
  late final _sel_toOneRelationshipKeys1 = objc.registerName(
    "toOneRelationshipKeys",
  );
  late final _sel_toManyRelationshipKeys1 = objc.registerName(
    "toManyRelationshipKeys",
  );
  late final _sel_inverseForRelationshipKey_1 = objc.registerName(
    "inverseForRelationshipKey:",
  );
  late final _sel_classDescription1 = objc.registerName("classDescription");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_600(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_600(obj, sel);
  }

  late final __objc_msgSend_600Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_600 =
      __objc_msgSend_600Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _class_NSScriptObjectSpecifier1 = objc.getClass(
    "NSScriptObjectSpecifier",
  );
  late final _class_NSAppleEventDescriptor1 = objc.getClass(
    "NSAppleEventDescriptor",
  );
  late final _sel_nullDescriptor1 = objc.registerName("nullDescriptor");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_601(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_601(obj, sel);
  }

  late final __objc_msgSend_601Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_601 =
      __objc_msgSend_601Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_descriptorWithDescriptorType_bytes_length_1 = objc
      .registerName("descriptorWithDescriptorType:bytes:length:");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_602(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int descriptorType,
    ffi.Pointer<ffi.Void> bytes,
    int byteCount,
  ) {
    return __objc_msgSend_602(obj, sel, descriptorType, bytes, byteCount);
  }

  late final __objc_msgSend_602Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.UnsignedInt,
        ffi.Pointer<ffi.Void>,
        ffi.UnsignedLong,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_602 =
      __objc_msgSend_602Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
              ffi.Pointer<ffi.Void>,
              int,
            )
          >();

  late final _sel_descriptorWithDescriptorType_data_1 = objc.registerName(
    "descriptorWithDescriptorType:data:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_603(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int descriptorType,
    ffi.Pointer<objc.ObjCObject> data,
  ) {
    return __objc_msgSend_603(obj, sel, descriptorType, data);
  }

  late final __objc_msgSend_603Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.UnsignedInt,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_603 =
      __objc_msgSend_603Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_descriptorWithBoolean_1 = objc.registerName(
    "descriptorWithBoolean:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_604(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int boolean,
  ) {
    return __objc_msgSend_604(obj, sel, boolean);
  }

  late final __objc_msgSend_604Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.UnsignedChar,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_604 =
      __objc_msgSend_604Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
            )
          >();

  late final _sel_descriptorWithEnumCode_1 = objc.registerName(
    "descriptorWithEnumCode:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_605(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int enumerator,
  ) {
    return __objc_msgSend_605(obj, sel, enumerator);
  }

  late final __objc_msgSend_605Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.UnsignedInt,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_605 =
      __objc_msgSend_605Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
            )
          >();

  late final _sel_descriptorWithInt32_1 = objc.registerName(
    "descriptorWithInt32:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_606(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int signedInt,
  ) {
    return __objc_msgSend_606(obj, sel, signedInt);
  }

  late final __objc_msgSend_606Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Int,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_606 =
      __objc_msgSend_606Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
            )
          >();

  late final _sel_descriptorWithDouble_1 = objc.registerName(
    "descriptorWithDouble:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_607(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    double doubleValue,
  ) {
    return __objc_msgSend_607(obj, sel, doubleValue);
  }

  late final __objc_msgSend_607Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Double,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_607 =
      __objc_msgSend_607Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              double,
            )
          >();

  late final _sel_descriptorWithTypeCode_1 = objc.registerName(
    "descriptorWithTypeCode:",
  );
  late final _sel_descriptorWithString_1 = objc.registerName(
    "descriptorWithString:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_608(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> string,
  ) {
    return __objc_msgSend_608(obj, sel, string);
  }

  late final __objc_msgSend_608Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_608 =
      __objc_msgSend_608Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_descriptorWithDate_1 = objc.registerName(
    "descriptorWithDate:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_609(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> date,
  ) {
    return __objc_msgSend_609(obj, sel, date);
  }

  late final __objc_msgSend_609Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_609 =
      __objc_msgSend_609Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_descriptorWithFileURL_1 = objc.registerName(
    "descriptorWithFileURL:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_610(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> fileURL,
  ) {
    return __objc_msgSend_610(obj, sel, fileURL);
  }

  late final __objc_msgSend_610Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_610 =
      __objc_msgSend_610Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_appleEventWithEventClass_eventID_targetDescriptor_returnID_transactionID_1 =
      objc.registerName(
        "appleEventWithEventClass:eventID:targetDescriptor:returnID:transactionID:",
      );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_611(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int eventClass,
    int eventID,
    ffi.Pointer<objc.ObjCObject> targetDescriptor,
    int returnID,
    int transactionID,
  ) {
    return __objc_msgSend_611(
      obj,
      sel,
      eventClass,
      eventID,
      targetDescriptor,
      returnID,
      transactionID,
    );
  }

  late final __objc_msgSend_611Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.UnsignedInt,
        ffi.UnsignedInt,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Short,
        ffi.Int,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_611 =
      __objc_msgSend_611Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
              int,
              ffi.Pointer<objc.ObjCObject>,
              int,
              int,
            )
          >();

  late final _sel_listDescriptor1 = objc.registerName("listDescriptor");
  late final _sel_recordDescriptor1 = objc.registerName("recordDescriptor");
  late final _sel_currentProcessDescriptor1 = objc.registerName(
    "currentProcessDescriptor",
  );
  late final _sel_descriptorWithProcessIdentifier_1 = objc.registerName(
    "descriptorWithProcessIdentifier:",
  );
  late final _sel_descriptorWithBundleIdentifier_1 = objc.registerName(
    "descriptorWithBundleIdentifier:",
  );
  late final _sel_descriptorWithApplicationURL_1 = objc.registerName(
    "descriptorWithApplicationURL:",
  );
  late final _sel_initWithAEDescNoCopy_1 = objc.registerName(
    "initWithAEDescNoCopy:",
  );
  instancetype _objc_msgSend_612(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<AEDesc> aeDesc,
  ) {
    return __objc_msgSend_612(obj, sel, aeDesc);
  }

  late final __objc_msgSend_612Ptr = _lookup<
    ffi.NativeFunction<
      instancetype Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<AEDesc>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_612 =
      __objc_msgSend_612Ptr
          .asFunction<
            instancetype Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<AEDesc>,
            )
          >();

  late final _sel_initWithDescriptorType_bytes_length_1 = objc.registerName(
    "initWithDescriptorType:bytes:length:",
  );
  instancetype _objc_msgSend_613(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int descriptorType,
    ffi.Pointer<ffi.Void> bytes,
    int byteCount,
  ) {
    return __objc_msgSend_613(obj, sel, descriptorType, bytes, byteCount);
  }

  late final __objc_msgSend_613Ptr = _lookup<
    ffi.NativeFunction<
      instancetype Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.UnsignedInt,
        ffi.Pointer<ffi.Void>,
        ffi.UnsignedLong,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_613 =
      __objc_msgSend_613Ptr
          .asFunction<
            instancetype Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
              ffi.Pointer<ffi.Void>,
              int,
            )
          >();

  late final _sel_initWithDescriptorType_data_1 = objc.registerName(
    "initWithDescriptorType:data:",
  );
  instancetype _objc_msgSend_614(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int descriptorType,
    ffi.Pointer<objc.ObjCObject> data,
  ) {
    return __objc_msgSend_614(obj, sel, descriptorType, data);
  }

  late final __objc_msgSend_614Ptr = _lookup<
    ffi.NativeFunction<
      instancetype Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.UnsignedInt,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_614 =
      __objc_msgSend_614Ptr
          .asFunction<
            instancetype Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_initWithEventClass_eventID_targetDescriptor_returnID_transactionID_1 =
      objc.registerName(
        "initWithEventClass:eventID:targetDescriptor:returnID:transactionID:",
      );
  instancetype _objc_msgSend_615(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int eventClass,
    int eventID,
    ffi.Pointer<objc.ObjCObject> targetDescriptor,
    int returnID,
    int transactionID,
  ) {
    return __objc_msgSend_615(
      obj,
      sel,
      eventClass,
      eventID,
      targetDescriptor,
      returnID,
      transactionID,
    );
  }

  late final __objc_msgSend_615Ptr = _lookup<
    ffi.NativeFunction<
      instancetype Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.UnsignedInt,
        ffi.UnsignedInt,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Short,
        ffi.Int,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_615 =
      __objc_msgSend_615Ptr
          .asFunction<
            instancetype Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
              int,
              ffi.Pointer<objc.ObjCObject>,
              int,
              int,
            )
          >();

  late final _sel_initListDescriptor1 = objc.registerName("initListDescriptor");
  late final _sel_initRecordDescriptor1 = objc.registerName(
    "initRecordDescriptor",
  );
  late final _sel_aeDesc1 = objc.registerName("aeDesc");
  ffi.Pointer<AEDesc> _objc_msgSend_616(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_616(obj, sel);
  }

  late final __objc_msgSend_616Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<AEDesc> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_616 =
      __objc_msgSend_616Ptr
          .asFunction<
            ffi.Pointer<AEDesc> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_descriptorType1 = objc.registerName("descriptorType");
  late final _sel_booleanValue1 = objc.registerName("booleanValue");
  late final _sel_enumCodeValue1 = objc.registerName("enumCodeValue");
  late final _sel_int32Value1 = objc.registerName("int32Value");
  late final _sel_typeCodeValue1 = objc.registerName("typeCodeValue");
  late final _sel_dateValue1 = objc.registerName("dateValue");
  late final _sel_fileURLValue1 = objc.registerName("fileURLValue");
  late final _sel_eventClass1 = objc.registerName("eventClass");
  late final _sel_eventID1 = objc.registerName("eventID");
  late final _sel_returnID1 = objc.registerName("returnID");
  late final _sel_transactionID1 = objc.registerName("transactionID");
  late final _sel_setParamDescriptor_forKeyword_1 = objc.registerName(
    "setParamDescriptor:forKeyword:",
  );
  void _objc_msgSend_617(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> descriptor,
    int keyword,
  ) {
    return __objc_msgSend_617(obj, sel, descriptor, keyword);
  }

  late final __objc_msgSend_617Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.UnsignedInt,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_617 =
      __objc_msgSend_617Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              int,
            )
          >();

  late final _sel_paramDescriptorForKeyword_1 = objc.registerName(
    "paramDescriptorForKeyword:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_618(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int keyword,
  ) {
    return __objc_msgSend_618(obj, sel, keyword);
  }

  late final __objc_msgSend_618Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.UnsignedInt,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_618 =
      __objc_msgSend_618Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
            )
          >();

  late final _sel_removeParamDescriptorWithKeyword_1 = objc.registerName(
    "removeParamDescriptorWithKeyword:",
  );
  void _objc_msgSend_619(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int keyword,
  ) {
    return __objc_msgSend_619(obj, sel, keyword);
  }

  late final __objc_msgSend_619Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.UnsignedInt,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_619 =
      __objc_msgSend_619Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
            )
          >();

  late final _sel_setAttributeDescriptor_forKeyword_1 = objc.registerName(
    "setAttributeDescriptor:forKeyword:",
  );
  late final _sel_attributeDescriptorForKeyword_1 = objc.registerName(
    "attributeDescriptorForKeyword:",
  );
  late final _sel_sendEventWithOptions_timeout_error_1 = objc.registerName(
    "sendEventWithOptions:timeout:error:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_620(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int sendOptions,
    double timeoutInSeconds,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    return __objc_msgSend_620(obj, sel, sendOptions, timeoutInSeconds, error);
  }

  late final __objc_msgSend_620Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Int32,
        ffi.Double,
        ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_620 =
      __objc_msgSend_620Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
              double,
              ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
            )
          >();

  late final _sel_isRecordDescriptor1 = objc.registerName("isRecordDescriptor");
  late final _sel_numberOfItems1 = objc.registerName("numberOfItems");
  late final _sel_insertDescriptor_atIndex_1 = objc.registerName(
    "insertDescriptor:atIndex:",
  );
  void _objc_msgSend_621(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> descriptor,
    int index,
  ) {
    return __objc_msgSend_621(obj, sel, descriptor, index);
  }

  late final __objc_msgSend_621Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Long,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_621 =
      __objc_msgSend_621Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              int,
            )
          >();

  late final _sel_descriptorAtIndex_1 = objc.registerName("descriptorAtIndex:");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_622(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int index,
  ) {
    return __objc_msgSend_622(obj, sel, index);
  }

  late final __objc_msgSend_622Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Long,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_622 =
      __objc_msgSend_622Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
            )
          >();

  late final _sel_removeDescriptorAtIndex_1 = objc.registerName(
    "removeDescriptorAtIndex:",
  );
  late final _sel_setDescriptor_forKeyword_1 = objc.registerName(
    "setDescriptor:forKeyword:",
  );
  late final _sel_descriptorForKeyword_1 = objc.registerName(
    "descriptorForKeyword:",
  );
  late final _sel_removeDescriptorWithKeyword_1 = objc.registerName(
    "removeDescriptorWithKeyword:",
  );
  late final _sel_keywordForDescriptorAtIndex_1 = objc.registerName(
    "keywordForDescriptorAtIndex:",
  );
  int _objc_msgSend_623(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int index,
  ) {
    return __objc_msgSend_623(obj, sel, index);
  }

  late final __objc_msgSend_623Ptr = _lookup<
    ffi.NativeFunction<
      ffi.UnsignedInt Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Long,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_623 =
      __objc_msgSend_623Ptr
          .asFunction<
            int Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
            )
          >();

  late final _sel_coerceToDescriptorType_1 = objc.registerName(
    "coerceToDescriptorType:",
  );
  late final _sel_objectSpecifierWithDescriptor_1 = objc.registerName(
    "objectSpecifierWithDescriptor:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_624(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> descriptor,
  ) {
    return __objc_msgSend_624(obj, sel, descriptor);
  }

  late final __objc_msgSend_624Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_624 =
      __objc_msgSend_624Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_initWithContainerSpecifier_key_1 = objc.registerName(
    "initWithContainerSpecifier:key:",
  );
  instancetype _objc_msgSend_625(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> container,
    ffi.Pointer<objc.ObjCObject> property,
  ) {
    return __objc_msgSend_625(obj, sel, container, property);
  }

  late final __objc_msgSend_625Ptr = _lookup<
    ffi.NativeFunction<
      instancetype Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_625 =
      __objc_msgSend_625Ptr
          .asFunction<
            instancetype Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _class_NSScriptClassDescription1 = objc.getClass(
    "NSScriptClassDescription",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_626(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> aClass,
  ) {
    return __objc_msgSend_626(obj, sel, aClass);
  }

  late final __objc_msgSend_626Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_626 =
      __objc_msgSend_626Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_initWithSuiteName_className_dictionary_1 = objc.registerName(
    "initWithSuiteName:className:dictionary:",
  );
  instancetype _objc_msgSend_627(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> suiteName,
    ffi.Pointer<objc.ObjCObject> className,
    ffi.Pointer<objc.ObjCObject> classDeclaration,
  ) {
    return __objc_msgSend_627(obj, sel, suiteName, className, classDeclaration);
  }

  late final __objc_msgSend_627Ptr = _lookup<
    ffi.NativeFunction<
      instancetype Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_627 =
      __objc_msgSend_627Ptr
          .asFunction<
            instancetype Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_suiteName1 = objc.registerName("suiteName");
  late final _sel_className1 = objc.registerName("className");
  late final _sel_implementationClassName1 = objc.registerName(
    "implementationClassName",
  );
  late final _sel_superclassDescription1 = objc.registerName(
    "superclassDescription",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_628(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_628(obj, sel);
  }

  late final __objc_msgSend_628Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_628 =
      __objc_msgSend_628Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_appleEventCode1 = objc.registerName("appleEventCode");
  late final _sel_matchesAppleEventCode_1 = objc.registerName(
    "matchesAppleEventCode:",
  );
  late final _class_NSScriptCommandDescription1 = objc.getClass(
    "NSScriptCommandDescription",
  );
  late final _sel_initWithSuiteName_commandName_dictionary_1 = objc
      .registerName("initWithSuiteName:commandName:dictionary:");
  late final _sel_commandName1 = objc.registerName("commandName");
  late final _sel_appleEventClassCode1 = objc.registerName(
    "appleEventClassCode",
  );
  late final _sel_commandClassName1 = objc.registerName("commandClassName");
  late final _sel_returnType1 = objc.registerName("returnType");
  late final _sel_appleEventCodeForReturnType1 = objc.registerName(
    "appleEventCodeForReturnType",
  );
  late final _sel_argumentNames1 = objc.registerName("argumentNames");
  late final _sel_typeForArgumentWithName_1 = objc.registerName(
    "typeForArgumentWithName:",
  );
  late final _sel_appleEventCodeForArgumentWithName_1 = objc.registerName(
    "appleEventCodeForArgumentWithName:",
  );
  int _objc_msgSend_629(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> argumentName,
  ) {
    return __objc_msgSend_629(obj, sel, argumentName);
  }

  late final __objc_msgSend_629Ptr = _lookup<
    ffi.NativeFunction<
      ffi.UnsignedInt Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_629 =
      __objc_msgSend_629Ptr
          .asFunction<
            int Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_isOptionalArgumentWithName_1 = objc.registerName(
    "isOptionalArgumentWithName:",
  );
  late final _class_NSScriptCommand1 = objc.getClass("NSScriptCommand");
  late final _sel_initWithCommandDescription_1 = objc.registerName(
    "initWithCommandDescription:",
  );
  instancetype _objc_msgSend_630(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> commandDef,
  ) {
    return __objc_msgSend_630(obj, sel, commandDef);
  }

  late final __objc_msgSend_630Ptr = _lookup<
    ffi.NativeFunction<
      instancetype Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_630 =
      __objc_msgSend_630Ptr
          .asFunction<
            instancetype Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_commandDescription1 = objc.registerName("commandDescription");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_631(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_631(obj, sel);
  }

  late final __objc_msgSend_631Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_631 =
      __objc_msgSend_631Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_directParameter1 = objc.registerName("directParameter");
  late final _sel_setDirectParameter_1 = objc.registerName(
    "setDirectParameter:",
  );
  late final _sel_receiversSpecifier1 = objc.registerName("receiversSpecifier");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_632(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_632(obj, sel);
  }

  late final __objc_msgSend_632Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_632 =
      __objc_msgSend_632Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_setReceiversSpecifier_1 = objc.registerName(
    "setReceiversSpecifier:",
  );
  void _objc_msgSend_633(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> value,
  ) {
    return __objc_msgSend_633(obj, sel, value);
  }

  late final __objc_msgSend_633Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_633 =
      __objc_msgSend_633Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_evaluatedReceivers1 = objc.registerName("evaluatedReceivers");
  late final _sel_arguments1 = objc.registerName("arguments");
  late final _sel_setArguments_1 = objc.registerName("setArguments:");
  void _objc_msgSend_634(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> value,
  ) {
    return __objc_msgSend_634(obj, sel, value);
  }

  late final __objc_msgSend_634Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_634 =
      __objc_msgSend_634Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_evaluatedArguments1 = objc.registerName("evaluatedArguments");
  late final _sel_isWellFormed1 = objc.registerName("isWellFormed");
  late final _sel_performDefaultImplementation1 = objc.registerName(
    "performDefaultImplementation",
  );
  late final _sel_executeCommand1 = objc.registerName("executeCommand");
  late final _sel_scriptErrorNumber1 = objc.registerName("scriptErrorNumber");
  late final _sel_setScriptErrorNumber_1 = objc.registerName(
    "setScriptErrorNumber:",
  );
  void _objc_msgSend_635(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int value,
  ) {
    return __objc_msgSend_635(obj, sel, value);
  }

  late final __objc_msgSend_635Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Long,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_635 =
      __objc_msgSend_635Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
            )
          >();

  late final _sel_scriptErrorOffendingObjectDescriptor1 = objc.registerName(
    "scriptErrorOffendingObjectDescriptor",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_636(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_636(obj, sel);
  }

  late final __objc_msgSend_636Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_636 =
      __objc_msgSend_636Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_setScriptErrorOffendingObjectDescriptor_1 = objc.registerName(
    "setScriptErrorOffendingObjectDescriptor:",
  );
  void _objc_msgSend_637(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> value,
  ) {
    return __objc_msgSend_637(obj, sel, value);
  }

  late final __objc_msgSend_637Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_637 =
      __objc_msgSend_637Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_scriptErrorExpectedTypeDescriptor1 = objc.registerName(
    "scriptErrorExpectedTypeDescriptor",
  );
  late final _sel_setScriptErrorExpectedTypeDescriptor_1 = objc.registerName(
    "setScriptErrorExpectedTypeDescriptor:",
  );
  late final _sel_scriptErrorString1 = objc.registerName("scriptErrorString");
  late final _sel_setScriptErrorString_1 = objc.registerName(
    "setScriptErrorString:",
  );
  late final _sel_currentCommand1 = objc.registerName("currentCommand");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_638(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_638(obj, sel);
  }

  late final __objc_msgSend_638Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_638 =
      __objc_msgSend_638Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_appleEvent1 = objc.registerName("appleEvent");
  late final _sel_suspendExecution1 = objc.registerName("suspendExecution");
  late final _sel_resumeExecutionWithResult_1 = objc.registerName(
    "resumeExecutionWithResult:",
  );
  late final _sel_createCommandInstance1 = objc.registerName(
    "createCommandInstance",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_639(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_639(obj, sel);
  }

  late final __objc_msgSend_639Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_639 =
      __objc_msgSend_639Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_createCommandInstanceWithZone_1 = objc.registerName(
    "createCommandInstanceWithZone:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_640(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<_NSZone> zone,
  ) {
    return __objc_msgSend_640(obj, sel, zone);
  }

  late final __objc_msgSend_640Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<_NSZone>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_640 =
      __objc_msgSend_640Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<_NSZone>,
            )
          >();

  late final _sel_supportsCommand_1 = objc.registerName("supportsCommand:");
  bool _objc_msgSend_641(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> commandDescription,
  ) {
    return __objc_msgSend_641(obj, sel, commandDescription);
  }

  late final __objc_msgSend_641Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Bool Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_641 =
      __objc_msgSend_641Ptr
          .asFunction<
            bool Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_selectorForCommand_1 = objc.registerName(
    "selectorForCommand:",
  );
  ffi.Pointer<objc.ObjCSelector> _objc_msgSend_642(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> commandDescription,
  ) {
    return __objc_msgSend_642(obj, sel, commandDescription);
  }

  late final __objc_msgSend_642Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCSelector> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_642 =
      __objc_msgSend_642Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCSelector> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_typeForKey_1 = objc.registerName("typeForKey:");
  late final _sel_classDescriptionForKey_1 = objc.registerName(
    "classDescriptionForKey:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_643(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> key,
  ) {
    return __objc_msgSend_643(obj, sel, key);
  }

  late final __objc_msgSend_643Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_643 =
      __objc_msgSend_643Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_appleEventCodeForKey_1 = objc.registerName(
    "appleEventCodeForKey:",
  );
  late final _sel_keyWithAppleEventCode_1 = objc.registerName(
    "keyWithAppleEventCode:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_644(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int appleEventCode,
  ) {
    return __objc_msgSend_644(obj, sel, appleEventCode);
  }

  late final __objc_msgSend_644Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.UnsignedInt,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_644 =
      __objc_msgSend_644Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
            )
          >();

  late final _sel_defaultSubcontainerAttributeKey1 = objc.registerName(
    "defaultSubcontainerAttributeKey",
  );
  late final _sel_isLocationRequiredToCreateForKey_1 = objc.registerName(
    "isLocationRequiredToCreateForKey:",
  );
  late final _sel_hasPropertyForKey_1 = objc.registerName("hasPropertyForKey:");
  late final _sel_hasOrderedToManyRelationshipForKey_1 = objc.registerName(
    "hasOrderedToManyRelationshipForKey:",
  );
  late final _sel_hasReadablePropertyForKey_1 = objc.registerName(
    "hasReadablePropertyForKey:",
  );
  late final _sel_hasWritablePropertyForKey_1 = objc.registerName(
    "hasWritablePropertyForKey:",
  );
  late final _sel_isReadOnlyKey_1 = objc.registerName("isReadOnlyKey:");
  late final _sel_initWithContainerClassDescription_containerSpecifier_key_1 =
      objc.registerName(
        "initWithContainerClassDescription:containerSpecifier:key:",
      );
  instancetype _objc_msgSend_645(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> classDesc,
    ffi.Pointer<objc.ObjCObject> container,
    ffi.Pointer<objc.ObjCObject> property,
  ) {
    return __objc_msgSend_645(obj, sel, classDesc, container, property);
  }

  late final __objc_msgSend_645Ptr = _lookup<
    ffi.NativeFunction<
      instancetype Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_645 =
      __objc_msgSend_645Ptr
          .asFunction<
            instancetype Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_childSpecifier1 = objc.registerName("childSpecifier");
  late final _sel_setChildSpecifier_1 = objc.registerName("setChildSpecifier:");
  late final _sel_containerSpecifier1 = objc.registerName("containerSpecifier");
  late final _sel_setContainerSpecifier_1 = objc.registerName(
    "setContainerSpecifier:",
  );
  late final _sel_containerIsObjectBeingTested1 = objc.registerName(
    "containerIsObjectBeingTested",
  );
  late final _sel_setContainerIsObjectBeingTested_1 = objc.registerName(
    "setContainerIsObjectBeingTested:",
  );
  late final _sel_containerIsRangeContainerObject1 = objc.registerName(
    "containerIsRangeContainerObject",
  );
  late final _sel_setContainerIsRangeContainerObject_1 = objc.registerName(
    "setContainerIsRangeContainerObject:",
  );
  late final _sel_key1 = objc.registerName("key");
  late final _sel_setKey_1 = objc.registerName("setKey:");
  void _objc_msgSend_646(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> value,
  ) {
    return __objc_msgSend_646(obj, sel, value);
  }

  late final __objc_msgSend_646Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_646 =
      __objc_msgSend_646Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_containerClassDescription1 = objc.registerName(
    "containerClassDescription",
  );
  late final _sel_setContainerClassDescription_1 = objc.registerName(
    "setContainerClassDescription:",
  );
  void _objc_msgSend_647(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> value,
  ) {
    return __objc_msgSend_647(obj, sel, value);
  }

  late final __objc_msgSend_647Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_647 =
      __objc_msgSend_647Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_keyClassDescription1 = objc.registerName(
    "keyClassDescription",
  );
  late final _sel_indicesOfObjectsByEvaluatingWithContainer_count_1 = objc
      .registerName("indicesOfObjectsByEvaluatingWithContainer:count:");
  ffi.Pointer<ffi.Long> _objc_msgSend_648(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> container,
    ffi.Pointer<ffi.Long> count,
  ) {
    return __objc_msgSend_648(obj, sel, container, count);
  }

  late final __objc_msgSend_648Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<ffi.Long> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<ffi.Long>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_648 =
      __objc_msgSend_648Ptr
          .asFunction<
            ffi.Pointer<ffi.Long> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<ffi.Long>,
            )
          >();

  late final _sel_objectsByEvaluatingWithContainers_1 = objc.registerName(
    "objectsByEvaluatingWithContainers:",
  );
  late final _sel_objectsByEvaluatingSpecifier1 = objc.registerName(
    "objectsByEvaluatingSpecifier",
  );
  late final _sel_evaluationErrorNumber1 = objc.registerName(
    "evaluationErrorNumber",
  );
  late final _sel_setEvaluationErrorNumber_1 = objc.registerName(
    "setEvaluationErrorNumber:",
  );
  late final _sel_evaluationErrorSpecifier1 = objc.registerName(
    "evaluationErrorSpecifier",
  );
  late final _sel_descriptor1 = objc.registerName("descriptor");
  late final _sel_scriptingValueForSpecifier_1 = objc.registerName(
    "scriptingValueForSpecifier:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_649(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> objectSpecifier,
  ) {
    return __objc_msgSend_649(obj, sel, objectSpecifier);
  }

  late final __objc_msgSend_649Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_649 =
      __objc_msgSend_649Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_scriptingProperties1 = objc.registerName(
    "scriptingProperties",
  );
  late final _sel_setScriptingProperties_1 = objc.registerName(
    "setScriptingProperties:",
  );
  late final _sel_copyScriptingValue_forKey_withProperties_1 = objc
      .registerName("copyScriptingValue:forKey:withProperties:");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_650(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> value,
    ffi.Pointer<objc.ObjCObject> key,
    ffi.Pointer<objc.ObjCObject> properties,
  ) {
    return __objc_msgSend_650(obj, sel, value, key, properties);
  }

  late final __objc_msgSend_650Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_650 =
      __objc_msgSend_650Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_newScriptingObjectOfClass_forValueForKey_withContentsValue_properties_1 =
      objc.registerName(
        "newScriptingObjectOfClass:forValueForKey:withContentsValue:properties:",
      );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_651(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> objectClass,
    ffi.Pointer<objc.ObjCObject> key,
    ffi.Pointer<objc.ObjCObject> contentsValue,
    ffi.Pointer<objc.ObjCObject> properties,
  ) {
    return __objc_msgSend_651(
      obj,
      sel,
      objectClass,
      key,
      contentsValue,
      properties,
    );
  }

  late final __objc_msgSend_651Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_651 =
      __objc_msgSend_651Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_classCode1 = objc.registerName("classCode");
  late final _sel_valueAtIndex_inPropertyWithKey_1 = objc.registerName(
    "valueAtIndex:inPropertyWithKey:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_652(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int index,
    ffi.Pointer<objc.ObjCObject> key,
  ) {
    return __objc_msgSend_652(obj, sel, index, key);
  }

  late final __objc_msgSend_652Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.UnsignedLong,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_652 =
      __objc_msgSend_652Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_valueWithName_inPropertyWithKey_1 = objc.registerName(
    "valueWithName:inPropertyWithKey:",
  );
  late final _sel_valueWithUniqueID_inPropertyWithKey_1 = objc.registerName(
    "valueWithUniqueID:inPropertyWithKey:",
  );
  late final _sel_insertValue_atIndex_inPropertyWithKey_1 = objc.registerName(
    "insertValue:atIndex:inPropertyWithKey:",
  );
  void _objc_msgSend_653(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> value,
    int index,
    ffi.Pointer<objc.ObjCObject> key,
  ) {
    return __objc_msgSend_653(obj, sel, value, index, key);
  }

  late final __objc_msgSend_653Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.UnsignedLong,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_653 =
      __objc_msgSend_653Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              int,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_removeValueAtIndex_fromPropertyWithKey_1 = objc.registerName(
    "removeValueAtIndex:fromPropertyWithKey:",
  );
  void _objc_msgSend_654(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int index,
    ffi.Pointer<objc.ObjCObject> key,
  ) {
    return __objc_msgSend_654(obj, sel, index, key);
  }

  late final __objc_msgSend_654Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.UnsignedLong,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_654 =
      __objc_msgSend_654Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_replaceValueAtIndex_inPropertyWithKey_withValue_1 = objc
      .registerName("replaceValueAtIndex:inPropertyWithKey:withValue:");
  void _objc_msgSend_655(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int index,
    ffi.Pointer<objc.ObjCObject> key,
    ffi.Pointer<objc.ObjCObject> value,
  ) {
    return __objc_msgSend_655(obj, sel, index, key, value);
  }

  late final __objc_msgSend_655Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.UnsignedLong,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_655 =
      __objc_msgSend_655Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_insertValue_inPropertyWithKey_1 = objc.registerName(
    "insertValue:inPropertyWithKey:",
  );
  void _objc_msgSend_656(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> value,
    ffi.Pointer<objc.ObjCObject> key,
  ) {
    return __objc_msgSend_656(obj, sel, value, key);
  }

  late final __objc_msgSend_656Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_656 =
      __objc_msgSend_656Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_coerceValue_forKey_1 = objc.registerName(
    "coerceValue:forKey:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_657(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> value,
    ffi.Pointer<objc.ObjCObject> key,
  ) {
    return __objc_msgSend_657(obj, sel, value, key);
  }

  late final __objc_msgSend_657Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_657 =
      __objc_msgSend_657Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_objectSpecifier1 = objc.registerName("objectSpecifier");
  late final _sel_indicesOfObjectsByEvaluatingObjectSpecifier_1 = objc
      .registerName("indicesOfObjectsByEvaluatingObjectSpecifier:");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_658(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> specifier,
  ) {
    return __objc_msgSend_658(obj, sel, specifier);
  }

  late final __objc_msgSend_658Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_658 =
      __objc_msgSend_658Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_isEqualTo_1 = objc.registerName("isEqualTo:");
  late final _sel_isLessThanOrEqualTo_1 = objc.registerName(
    "isLessThanOrEqualTo:",
  );
  late final _sel_isLessThan_1 = objc.registerName("isLessThan:");
  late final _sel_isGreaterThanOrEqualTo_1 = objc.registerName(
    "isGreaterThanOrEqualTo:",
  );
  late final _sel_isGreaterThan_1 = objc.registerName("isGreaterThan:");
  late final _sel_isNotEqualTo_1 = objc.registerName("isNotEqualTo:");
  late final _sel_doesContain_1 = objc.registerName("doesContain:");
  late final _sel_isLike_1 = objc.registerName("isLike:");
  late final _sel_isCaseInsensitiveLike_1 = objc.registerName(
    "isCaseInsensitiveLike:",
  );
  late final _sel_scriptingIsEqualTo_1 = objc.registerName(
    "scriptingIsEqualTo:",
  );
  late final _sel_scriptingIsLessThanOrEqualTo_1 = objc.registerName(
    "scriptingIsLessThanOrEqualTo:",
  );
  late final _sel_scriptingIsLessThan_1 = objc.registerName(
    "scriptingIsLessThan:",
  );
  late final _sel_scriptingIsGreaterThanOrEqualTo_1 = objc.registerName(
    "scriptingIsGreaterThanOrEqualTo:",
  );
  late final _sel_scriptingIsGreaterThan_1 = objc.registerName(
    "scriptingIsGreaterThan:",
  );
  late final _sel_scriptingBeginsWith_1 = objc.registerName(
    "scriptingBeginsWith:",
  );
  late final _sel_scriptingEndsWith_1 = objc.registerName("scriptingEndsWith:");
  late final _sel_scriptingContains_1 = objc.registerName("scriptingContains:");
  late final _class_NSItemProvider1 = objc.getClass("NSItemProvider");
  late final _class_NSProgress1 = objc.getClass("NSProgress");
  late final _sel_currentProgress1 = objc.registerName("currentProgress");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_659(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_659(obj, sel);
  }

  late final __objc_msgSend_659Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_659 =
      __objc_msgSend_659Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_progressWithTotalUnitCount_1 = objc.registerName(
    "progressWithTotalUnitCount:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_660(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int unitCount,
  ) {
    return __objc_msgSend_660(obj, sel, unitCount);
  }

  late final __objc_msgSend_660Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Int64,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_660 =
      __objc_msgSend_660Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
            )
          >();

  late final _sel_discreteProgressWithTotalUnitCount_1 = objc.registerName(
    "discreteProgressWithTotalUnitCount:",
  );
  late final _sel_progressWithTotalUnitCount_parent_pendingUnitCount_1 = objc
      .registerName("progressWithTotalUnitCount:parent:pendingUnitCount:");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_661(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int unitCount,
    ffi.Pointer<objc.ObjCObject> parent,
    int portionOfParentTotalUnitCount,
  ) {
    return __objc_msgSend_661(
      obj,
      sel,
      unitCount,
      parent,
      portionOfParentTotalUnitCount,
    );
  }

  late final __objc_msgSend_661Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Int64,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Int64,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_661 =
      __objc_msgSend_661Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
              ffi.Pointer<objc.ObjCObject>,
              int,
            )
          >();

  late final _sel_initWithParent_userInfo_1 = objc.registerName(
    "initWithParent:userInfo:",
  );
  instancetype _objc_msgSend_662(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> parentProgressOrNil,
    ffi.Pointer<objc.ObjCObject> userInfoOrNil,
  ) {
    return __objc_msgSend_662(obj, sel, parentProgressOrNil, userInfoOrNil);
  }

  late final __objc_msgSend_662Ptr = _lookup<
    ffi.NativeFunction<
      instancetype Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_662 =
      __objc_msgSend_662Ptr
          .asFunction<
            instancetype Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_becomeCurrentWithPendingUnitCount_1 = objc.registerName(
    "becomeCurrentWithPendingUnitCount:",
  );
  void _objc_msgSend_663(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int unitCount,
  ) {
    return __objc_msgSend_663(obj, sel, unitCount);
  }

  late final __objc_msgSend_663Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Int64,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_663 =
      __objc_msgSend_663Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
            )
          >();

  late final _sel_performAsCurrentWithPendingUnitCount_usingBlock_1 = objc
      .registerName("performAsCurrentWithPendingUnitCount:usingBlock:");
  void _objc_msgSend_664(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int unitCount,
    ffi.Pointer<objc.ObjCBlock> work,
  ) {
    return __objc_msgSend_664(obj, sel, unitCount, work);
  }

  late final __objc_msgSend_664Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Int64,
        ffi.Pointer<objc.ObjCBlock>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_664 =
      __objc_msgSend_664Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
              ffi.Pointer<objc.ObjCBlock>,
            )
          >();

  late final _sel_resignCurrent1 = objc.registerName("resignCurrent");
  late final _sel_addChild_withPendingUnitCount_1 = objc.registerName(
    "addChild:withPendingUnitCount:",
  );
  void _objc_msgSend_665(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> child,
    int inUnitCount,
  ) {
    return __objc_msgSend_665(obj, sel, child, inUnitCount);
  }

  late final __objc_msgSend_665Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Int64,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_665 =
      __objc_msgSend_665Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              int,
            )
          >();

  late final _sel_totalUnitCount1 = objc.registerName("totalUnitCount");
  int _objc_msgSend_666(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_666(obj, sel);
  }

  late final __objc_msgSend_666Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Int64 Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_666 =
      __objc_msgSend_666Ptr
          .asFunction<
            int Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_setTotalUnitCount_1 = objc.registerName("setTotalUnitCount:");
  void _objc_msgSend_667(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int value,
  ) {
    return __objc_msgSend_667(obj, sel, value);
  }

  late final __objc_msgSend_667Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Int64,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_667 =
      __objc_msgSend_667Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
            )
          >();

  late final _sel_completedUnitCount1 = objc.registerName("completedUnitCount");
  late final _sel_setCompletedUnitCount_1 = objc.registerName(
    "setCompletedUnitCount:",
  );
  late final _sel_setLocalizedDescription_1 = objc.registerName(
    "setLocalizedDescription:",
  );
  late final _sel_localizedAdditionalDescription1 = objc.registerName(
    "localizedAdditionalDescription",
  );
  late final _sel_setLocalizedAdditionalDescription_1 = objc.registerName(
    "setLocalizedAdditionalDescription:",
  );
  late final _sel_isCancellable1 = objc.registerName("isCancellable");
  late final _sel_setCancellable_1 = objc.registerName("setCancellable:");
  late final _sel_isPausable1 = objc.registerName("isPausable");
  late final _sel_setPausable_1 = objc.registerName("setPausable:");
  late final _sel_isPaused1 = objc.registerName("isPaused");
  late final _sel_cancellationHandler1 = objc.registerName(
    "cancellationHandler",
  );
  ffi.Pointer<objc.ObjCBlock> _objc_msgSend_668(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_668(obj, sel);
  }

  late final __objc_msgSend_668Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCBlock> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_668 =
      __objc_msgSend_668Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCBlock> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_setCancellationHandler_1 = objc.registerName(
    "setCancellationHandler:",
  );
  void _objc_msgSend_669(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCBlock> value,
  ) {
    return __objc_msgSend_669(obj, sel, value);
  }

  late final __objc_msgSend_669Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCBlock>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_669 =
      __objc_msgSend_669Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCBlock>,
            )
          >();

  late final _sel_pausingHandler1 = objc.registerName("pausingHandler");
  late final _sel_setPausingHandler_1 = objc.registerName("setPausingHandler:");
  late final _sel_resumingHandler1 = objc.registerName("resumingHandler");
  late final _sel_setResumingHandler_1 = objc.registerName(
    "setResumingHandler:",
  );
  late final _sel_setUserInfoObject_forKey_1 = objc.registerName(
    "setUserInfoObject:forKey:",
  );
  late final _sel_isIndeterminate1 = objc.registerName("isIndeterminate");
  late final _sel_fractionCompleted1 = objc.registerName("fractionCompleted");
  late final _sel_pause1 = objc.registerName("pause");
  late final _sel_resume1 = objc.registerName("resume");
  late final _sel_kind1 = objc.registerName("kind");
  late final _sel_setKind_1 = objc.registerName("setKind:");
  late final _sel_estimatedTimeRemaining1 = objc.registerName(
    "estimatedTimeRemaining",
  );
  late final _sel_setEstimatedTimeRemaining_1 = objc.registerName(
    "setEstimatedTimeRemaining:",
  );
  void _objc_msgSend_670(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> value,
  ) {
    return __objc_msgSend_670(obj, sel, value);
  }

  late final __objc_msgSend_670Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_670 =
      __objc_msgSend_670Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_throughput1 = objc.registerName("throughput");
  late final _sel_setThroughput_1 = objc.registerName("setThroughput:");
  late final _sel_fileOperationKind1 = objc.registerName("fileOperationKind");
  late final _sel_setFileOperationKind_1 = objc.registerName(
    "setFileOperationKind:",
  );
  late final _sel_fileURL1 = objc.registerName("fileURL");
  late final _sel_setFileURL_1 = objc.registerName("setFileURL:");
  void _objc_msgSend_671(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> value,
  ) {
    return __objc_msgSend_671(obj, sel, value);
  }

  late final __objc_msgSend_671Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_671 =
      __objc_msgSend_671Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_fileTotalCount1 = objc.registerName("fileTotalCount");
  late final _sel_setFileTotalCount_1 = objc.registerName("setFileTotalCount:");
  late final _sel_fileCompletedCount1 = objc.registerName("fileCompletedCount");
  late final _sel_setFileCompletedCount_1 = objc.registerName(
    "setFileCompletedCount:",
  );
  late final _sel_publish1 = objc.registerName("publish");
  late final _sel_unpublish1 = objc.registerName("unpublish");
  late final _sel_addSubscriberForFileURL_withPublishingHandler_1 = objc
      .registerName("addSubscriberForFileURL:withPublishingHandler:");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_672(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> url,
    ffi.Pointer<objc.ObjCBlock> publishingHandler,
  ) {
    return __objc_msgSend_672(obj, sel, url, publishingHandler);
  }

  late final __objc_msgSend_672Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCBlock>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_672 =
      __objc_msgSend_672Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCBlock>,
            )
          >();

  late final _sel_removeSubscriber_1 = objc.registerName("removeSubscriber:");
  late final _sel_isOld1 = objc.registerName("isOld");
  late final _sel_registerDataRepresentationForTypeIdentifier_visibility_loadHandler_1 =
      objc.registerName(
        "registerDataRepresentationForTypeIdentifier:visibility:loadHandler:",
      );
  void _objc_msgSend_673(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> typeIdentifier,
    int visibility,
    ffi.Pointer<objc.ObjCBlock> loadHandler,
  ) {
    return __objc_msgSend_673(
      obj,
      sel,
      typeIdentifier,
      visibility,
      loadHandler,
    );
  }

  late final __objc_msgSend_673Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Int32,
        ffi.Pointer<objc.ObjCBlock>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_673 =
      __objc_msgSend_673Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              int,
              ffi.Pointer<objc.ObjCBlock>,
            )
          >();

  late final _sel_registerFileRepresentationForTypeIdentifier_fileOptions_visibility_loadHandler_1 =
      objc.registerName(
        "registerFileRepresentationForTypeIdentifier:fileOptions:visibility:loadHandler:",
      );
  void _objc_msgSend_674(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> typeIdentifier,
    int fileOptions,
    int visibility,
    ffi.Pointer<objc.ObjCBlock> loadHandler,
  ) {
    return __objc_msgSend_674(
      obj,
      sel,
      typeIdentifier,
      fileOptions,
      visibility,
      loadHandler,
    );
  }

  late final __objc_msgSend_674Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Int32,
        ffi.Int32,
        ffi.Pointer<objc.ObjCBlock>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_674 =
      __objc_msgSend_674Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              int,
              int,
              ffi.Pointer<objc.ObjCBlock>,
            )
          >();

  late final _sel_registeredTypeIdentifiers1 = objc.registerName(
    "registeredTypeIdentifiers",
  );
  late final _sel_registeredTypeIdentifiersWithFileOptions_1 = objc
      .registerName("registeredTypeIdentifiersWithFileOptions:");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_675(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int fileOptions,
  ) {
    return __objc_msgSend_675(obj, sel, fileOptions);
  }

  late final __objc_msgSend_675Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Int32,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_675 =
      __objc_msgSend_675Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
            )
          >();

  late final _sel_hasItemConformingToTypeIdentifier_1 = objc.registerName(
    "hasItemConformingToTypeIdentifier:",
  );
  late final _sel_hasRepresentationConformingToTypeIdentifier_fileOptions_1 =
      objc.registerName(
        "hasRepresentationConformingToTypeIdentifier:fileOptions:",
      );
  bool _objc_msgSend_676(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> typeIdentifier,
    int fileOptions,
  ) {
    return __objc_msgSend_676(obj, sel, typeIdentifier, fileOptions);
  }

  late final __objc_msgSend_676Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Bool Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Int32,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_676 =
      __objc_msgSend_676Ptr
          .asFunction<
            bool Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              int,
            )
          >();

  late final _sel_loadDataRepresentationForTypeIdentifier_completionHandler_1 =
      objc.registerName(
        "loadDataRepresentationForTypeIdentifier:completionHandler:",
      );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_677(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> typeIdentifier,
    ffi.Pointer<objc.ObjCBlock> completionHandler,
  ) {
    return __objc_msgSend_677(obj, sel, typeIdentifier, completionHandler);
  }

  late final __objc_msgSend_677Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCBlock>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_677 =
      __objc_msgSend_677Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCBlock>,
            )
          >();

  late final _sel_loadFileRepresentationForTypeIdentifier_completionHandler_1 =
      objc.registerName(
        "loadFileRepresentationForTypeIdentifier:completionHandler:",
      );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_678(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> typeIdentifier,
    ffi.Pointer<objc.ObjCBlock> completionHandler,
  ) {
    return __objc_msgSend_678(obj, sel, typeIdentifier, completionHandler);
  }

  late final __objc_msgSend_678Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCBlock>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_678 =
      __objc_msgSend_678Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCBlock>,
            )
          >();

  late final _sel_loadInPlaceFileRepresentationForTypeIdentifier_completionHandler_1 =
      objc.registerName(
        "loadInPlaceFileRepresentationForTypeIdentifier:completionHandler:",
      );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_679(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> typeIdentifier,
    ffi.Pointer<objc.ObjCBlock> completionHandler,
  ) {
    return __objc_msgSend_679(obj, sel, typeIdentifier, completionHandler);
  }

  late final __objc_msgSend_679Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCBlock>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_679 =
      __objc_msgSend_679Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCBlock>,
            )
          >();

  late final _sel_suggestedName1 = objc.registerName("suggestedName");
  late final _sel_setSuggestedName_1 = objc.registerName("setSuggestedName:");
  late final _sel_registerObject_visibility_1 = objc.registerName(
    "registerObject:visibility:",
  );
  void _objc_msgSend_680(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> object,
    int visibility,
  ) {
    return __objc_msgSend_680(obj, sel, object, visibility);
  }

  late final __objc_msgSend_680Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Int32,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_680 =
      __objc_msgSend_680Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              int,
            )
          >();

  late final _sel_registerObjectOfClass_visibility_loadHandler_1 = objc
      .registerName("registerObjectOfClass:visibility:loadHandler:");
  void _objc_msgSend_681(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> aClass,
    int visibility,
    ffi.Pointer<objc.ObjCBlock> loadHandler,
  ) {
    return __objc_msgSend_681(obj, sel, aClass, visibility, loadHandler);
  }

  late final __objc_msgSend_681Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Int32,
        ffi.Pointer<objc.ObjCBlock>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_681 =
      __objc_msgSend_681Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              int,
              ffi.Pointer<objc.ObjCBlock>,
            )
          >();

  late final _sel_canLoadObjectOfClass_1 = objc.registerName(
    "canLoadObjectOfClass:",
  );
  late final _sel_loadObjectOfClass_completionHandler_1 = objc.registerName(
    "loadObjectOfClass:completionHandler:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_682(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> aClass,
    ffi.Pointer<objc.ObjCBlock> completionHandler,
  ) {
    return __objc_msgSend_682(obj, sel, aClass, completionHandler);
  }

  late final __objc_msgSend_682Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCBlock>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_682 =
      __objc_msgSend_682Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCBlock>,
            )
          >();

  late final _sel_initWithItem_typeIdentifier_1 = objc.registerName(
    "initWithItem:typeIdentifier:",
  );
  instancetype _objc_msgSend_683(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> item,
    ffi.Pointer<objc.ObjCObject> typeIdentifier,
  ) {
    return __objc_msgSend_683(obj, sel, item, typeIdentifier);
  }

  late final __objc_msgSend_683Ptr = _lookup<
    ffi.NativeFunction<
      instancetype Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_683 =
      __objc_msgSend_683Ptr
          .asFunction<
            instancetype Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_registerItemForTypeIdentifier_loadHandler_1 = objc
      .registerName("registerItemForTypeIdentifier:loadHandler:");
  void _objc_msgSend_684(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> typeIdentifier,
    ffi.Pointer<objc.ObjCBlock> loadHandler,
  ) {
    return __objc_msgSend_684(obj, sel, typeIdentifier, loadHandler);
  }

  late final __objc_msgSend_684Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCBlock>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_684 =
      __objc_msgSend_684Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCBlock>,
            )
          >();

  late final _sel_loadItemForTypeIdentifier_options_completionHandler_1 = objc
      .registerName("loadItemForTypeIdentifier:options:completionHandler:");
  void _objc_msgSend_685(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> typeIdentifier,
    ffi.Pointer<objc.ObjCObject> options,
    ffi.Pointer<objc.ObjCBlock> completionHandler,
  ) {
    return __objc_msgSend_685(
      obj,
      sel,
      typeIdentifier,
      options,
      completionHandler,
    );
  }

  late final __objc_msgSend_685Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCBlock>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_685 =
      __objc_msgSend_685Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCBlock>,
            )
          >();

  late final _sel_previewImageHandler1 = objc.registerName(
    "previewImageHandler",
  );
  ffi.Pointer<objc.ObjCBlock> _objc_msgSend_686(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_686(obj, sel);
  }

  late final __objc_msgSend_686Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCBlock> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_686 =
      __objc_msgSend_686Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCBlock> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_setPreviewImageHandler_1 = objc.registerName(
    "setPreviewImageHandler:",
  );
  void _objc_msgSend_687(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCBlock> value,
  ) {
    return __objc_msgSend_687(obj, sel, value);
  }

  late final __objc_msgSend_687Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCBlock>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_687 =
      __objc_msgSend_687Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCBlock>,
            )
          >();

  late final _sel_loadPreviewImageWithOptions_completionHandler_1 = objc
      .registerName("loadPreviewImageWithOptions:completionHandler:");
  void _objc_msgSend_688(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> options,
    ffi.Pointer<objc.ObjCBlock> completionHandler,
  ) {
    return __objc_msgSend_688(obj, sel, options, completionHandler);
  }

  late final __objc_msgSend_688Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCBlock>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_688 =
      __objc_msgSend_688Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCBlock>,
            )
          >();

  late final _class_NSMutableString1 = objc.getClass("NSMutableString");
  late final _sel_replaceCharactersInRange_withString_1 = objc.registerName(
    "replaceCharactersInRange:withString:",
  );
  void _objc_msgSend_689(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    _NSRange range,
    ffi.Pointer<objc.ObjCObject> aString,
  ) {
    return __objc_msgSend_689(obj, sel, range, aString);
  }

  late final __objc_msgSend_689Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        _NSRange,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_689 =
      __objc_msgSend_689Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              _NSRange,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_insertString_atIndex_1 = objc.registerName(
    "insertString:atIndex:",
  );
  void _objc_msgSend_690(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> aString,
    int loc,
  ) {
    return __objc_msgSend_690(obj, sel, aString, loc);
  }

  late final __objc_msgSend_690Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.UnsignedLong,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_690 =
      __objc_msgSend_690Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              int,
            )
          >();

  late final _sel_deleteCharactersInRange_1 = objc.registerName(
    "deleteCharactersInRange:",
  );
  late final _sel_appendString_1 = objc.registerName("appendString:");
  late final _sel_appendFormat_1 = objc.registerName("appendFormat:");
  late final _sel_setString_1 = objc.registerName("setString:");
  late final _sel_replaceOccurrencesOfString_withString_options_range_1 = objc
      .registerName("replaceOccurrencesOfString:withString:options:range:");
  int _objc_msgSend_691(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> target,
    ffi.Pointer<objc.ObjCObject> replacement,
    int options,
    _NSRange searchRange,
  ) {
    return __objc_msgSend_691(
      obj,
      sel,
      target,
      replacement,
      options,
      searchRange,
    );
  }

  late final __objc_msgSend_691Ptr = _lookup<
    ffi.NativeFunction<
      ffi.UnsignedLong Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Int32,
        _NSRange,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_691 =
      __objc_msgSend_691Ptr
          .asFunction<
            int Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
              int,
              _NSRange,
            )
          >();

  late final _sel_applyTransform_reverse_range_updatedRange_1 = objc
      .registerName("applyTransform:reverse:range:updatedRange:");
  bool _objc_msgSend_692(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> transform,
    bool reverse,
    _NSRange range,
    ffi.Pointer<_NSRange> resultingRange,
  ) {
    return __objc_msgSend_692(
      obj,
      sel,
      transform,
      reverse,
      range,
      resultingRange,
    );
  }

  late final __objc_msgSend_692Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Bool Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Bool,
        _NSRange,
        ffi.Pointer<_NSRange>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_692 =
      __objc_msgSend_692Ptr
          .asFunction<
            bool Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              bool,
              _NSRange,
              ffi.Pointer<_NSRange>,
            )
          >();

  ffi.Pointer<objc.ObjCObject> _objc_msgSend_693(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int capacity,
  ) {
    return __objc_msgSend_693(obj, sel, capacity);
  }

  late final __objc_msgSend_693Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.UnsignedLong,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_693 =
      __objc_msgSend_693Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
            )
          >();

  late final _sel_stringWithCapacity_1 = objc.registerName(
    "stringWithCapacity:",
  );
  late final _class_NSNotification1 = objc.getClass("NSNotification");
  late final _sel_object1 = objc.registerName("object");
  late final _sel_initWithName_object_userInfo_1 = objc.registerName(
    "initWithName:object:userInfo:",
  );
  instancetype _objc_msgSend_694(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> name,
    ffi.Pointer<objc.ObjCObject> object,
    ffi.Pointer<objc.ObjCObject> userInfo,
  ) {
    return __objc_msgSend_694(obj, sel, name, object, userInfo);
  }

  late final __objc_msgSend_694Ptr = _lookup<
    ffi.NativeFunction<
      instancetype Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_694 =
      __objc_msgSend_694Ptr
          .asFunction<
            instancetype Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_notificationWithName_object_1 = objc.registerName(
    "notificationWithName:object:",
  );
  late final _sel_notificationWithName_object_userInfo_1 = objc.registerName(
    "notificationWithName:object:userInfo:",
  );
  late final _class_NSBundle1 = objc.getClass("NSBundle");
  late final _sel_mainBundle1 = objc.registerName("mainBundle");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_695(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_695(obj, sel);
  }

  late final __objc_msgSend_695Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_695 =
      __objc_msgSend_695Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_bundleWithPath_1 = objc.registerName("bundleWithPath:");
  late final _sel_initWithPath_1 = objc.registerName("initWithPath:");
  late final _sel_bundleWithURL_1 = objc.registerName("bundleWithURL:");
  late final _sel_initWithURL_1 = objc.registerName("initWithURL:");
  late final _sel_bundleForClass_1 = objc.registerName("bundleForClass:");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_696(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> aClass,
  ) {
    return __objc_msgSend_696(obj, sel, aClass);
  }

  late final __objc_msgSend_696Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_696 =
      __objc_msgSend_696Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_bundleWithIdentifier_1 = objc.registerName(
    "bundleWithIdentifier:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_697(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> identifier,
  ) {
    return __objc_msgSend_697(obj, sel, identifier);
  }

  late final __objc_msgSend_697Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_697 =
      __objc_msgSend_697Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_allBundles1 = objc.registerName("allBundles");
  late final _sel_allFrameworks1 = objc.registerName("allFrameworks");
  late final _sel_isLoaded1 = objc.registerName("isLoaded");
  late final _sel_unload1 = objc.registerName("unload");
  late final _sel_preflightAndReturnError_1 = objc.registerName(
    "preflightAndReturnError:",
  );
  late final _sel_loadAndReturnError_1 = objc.registerName(
    "loadAndReturnError:",
  );
  late final _sel_bundleURL1 = objc.registerName("bundleURL");
  late final _sel_resourceURL1 = objc.registerName("resourceURL");
  late final _sel_executableURL1 = objc.registerName("executableURL");
  late final _sel_URLForAuxiliaryExecutable_1 = objc.registerName(
    "URLForAuxiliaryExecutable:",
  );
  late final _sel_privateFrameworksURL1 = objc.registerName(
    "privateFrameworksURL",
  );
  late final _sel_sharedFrameworksURL1 = objc.registerName(
    "sharedFrameworksURL",
  );
  late final _sel_sharedSupportURL1 = objc.registerName("sharedSupportURL");
  late final _sel_builtInPlugInsURL1 = objc.registerName("builtInPlugInsURL");
  late final _sel_appStoreReceiptURL1 = objc.registerName("appStoreReceiptURL");
  late final _sel_bundlePath1 = objc.registerName("bundlePath");
  late final _sel_resourcePath1 = objc.registerName("resourcePath");
  late final _sel_executablePath1 = objc.registerName("executablePath");
  late final _sel_pathForAuxiliaryExecutable_1 = objc.registerName(
    "pathForAuxiliaryExecutable:",
  );
  late final _sel_privateFrameworksPath1 = objc.registerName(
    "privateFrameworksPath",
  );
  late final _sel_sharedFrameworksPath1 = objc.registerName(
    "sharedFrameworksPath",
  );
  late final _sel_sharedSupportPath1 = objc.registerName("sharedSupportPath");
  late final _sel_builtInPlugInsPath1 = objc.registerName("builtInPlugInsPath");
  late final _sel_URLForResource_withExtension_subdirectory_inBundleWithURL_1 =
      objc.registerName(
        "URLForResource:withExtension:subdirectory:inBundleWithURL:",
      );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_698(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> name,
    ffi.Pointer<objc.ObjCObject> ext,
    ffi.Pointer<objc.ObjCObject> subpath,
    ffi.Pointer<objc.ObjCObject> bundleURL,
  ) {
    return __objc_msgSend_698(obj, sel, name, ext, subpath, bundleURL);
  }

  late final __objc_msgSend_698Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_698 =
      __objc_msgSend_698Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_URLsForResourcesWithExtension_subdirectory_inBundleWithURL_1 =
      objc.registerName(
        "URLsForResourcesWithExtension:subdirectory:inBundleWithURL:",
      );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_699(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> ext,
    ffi.Pointer<objc.ObjCObject> subpath,
    ffi.Pointer<objc.ObjCObject> bundleURL,
  ) {
    return __objc_msgSend_699(obj, sel, ext, subpath, bundleURL);
  }

  late final __objc_msgSend_699Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_699 =
      __objc_msgSend_699Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_URLForResource_withExtension_1 = objc.registerName(
    "URLForResource:withExtension:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_700(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> name,
    ffi.Pointer<objc.ObjCObject> ext,
  ) {
    return __objc_msgSend_700(obj, sel, name, ext);
  }

  late final __objc_msgSend_700Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_700 =
      __objc_msgSend_700Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_URLForResource_withExtension_subdirectory_1 = objc
      .registerName("URLForResource:withExtension:subdirectory:");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_701(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> name,
    ffi.Pointer<objc.ObjCObject> ext,
    ffi.Pointer<objc.ObjCObject> subpath,
  ) {
    return __objc_msgSend_701(obj, sel, name, ext, subpath);
  }

  late final __objc_msgSend_701Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_701 =
      __objc_msgSend_701Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_URLForResource_withExtension_subdirectory_localization_1 =
      objc.registerName(
        "URLForResource:withExtension:subdirectory:localization:",
      );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_702(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> name,
    ffi.Pointer<objc.ObjCObject> ext,
    ffi.Pointer<objc.ObjCObject> subpath,
    ffi.Pointer<objc.ObjCObject> localizationName,
  ) {
    return __objc_msgSend_702(obj, sel, name, ext, subpath, localizationName);
  }

  late final __objc_msgSend_702Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_702 =
      __objc_msgSend_702Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_URLsForResourcesWithExtension_subdirectory_1 = objc
      .registerName("URLsForResourcesWithExtension:subdirectory:");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_703(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> ext,
    ffi.Pointer<objc.ObjCObject> subpath,
  ) {
    return __objc_msgSend_703(obj, sel, ext, subpath);
  }

  late final __objc_msgSend_703Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_703 =
      __objc_msgSend_703Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_URLsForResourcesWithExtension_subdirectory_localization_1 =
      objc.registerName(
        "URLsForResourcesWithExtension:subdirectory:localization:",
      );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_704(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> ext,
    ffi.Pointer<objc.ObjCObject> subpath,
    ffi.Pointer<objc.ObjCObject> localizationName,
  ) {
    return __objc_msgSend_704(obj, sel, ext, subpath, localizationName);
  }

  late final __objc_msgSend_704Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_704 =
      __objc_msgSend_704Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_pathForResource_ofType_inDirectory_1 = objc.registerName(
    "pathForResource:ofType:inDirectory:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_705(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> name,
    ffi.Pointer<objc.ObjCObject> ext,
    ffi.Pointer<objc.ObjCObject> bundlePath,
  ) {
    return __objc_msgSend_705(obj, sel, name, ext, bundlePath);
  }

  late final __objc_msgSend_705Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_705 =
      __objc_msgSend_705Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_pathsForResourcesOfType_inDirectory_1 = objc.registerName(
    "pathsForResourcesOfType:inDirectory:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_706(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> ext,
    ffi.Pointer<objc.ObjCObject> bundlePath,
  ) {
    return __objc_msgSend_706(obj, sel, ext, bundlePath);
  }

  late final __objc_msgSend_706Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_706 =
      __objc_msgSend_706Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_pathForResource_ofType_1 = objc.registerName(
    "pathForResource:ofType:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_707(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> name,
    ffi.Pointer<objc.ObjCObject> ext,
  ) {
    return __objc_msgSend_707(obj, sel, name, ext);
  }

  late final __objc_msgSend_707Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_707 =
      __objc_msgSend_707Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_pathForResource_ofType_inDirectory_forLocalization_1 = objc
      .registerName("pathForResource:ofType:inDirectory:forLocalization:");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_708(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> name,
    ffi.Pointer<objc.ObjCObject> ext,
    ffi.Pointer<objc.ObjCObject> subpath,
    ffi.Pointer<objc.ObjCObject> localizationName,
  ) {
    return __objc_msgSend_708(obj, sel, name, ext, subpath, localizationName);
  }

  late final __objc_msgSend_708Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_708 =
      __objc_msgSend_708Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_pathsForResourcesOfType_inDirectory_forLocalization_1 = objc
      .registerName("pathsForResourcesOfType:inDirectory:forLocalization:");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_709(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> ext,
    ffi.Pointer<objc.ObjCObject> subpath,
    ffi.Pointer<objc.ObjCObject> localizationName,
  ) {
    return __objc_msgSend_709(obj, sel, ext, subpath, localizationName);
  }

  late final __objc_msgSend_709Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_709 =
      __objc_msgSend_709Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_localizedStringForKey_value_table_1 = objc.registerName(
    "localizedStringForKey:value:table:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_710(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> key,
    ffi.Pointer<objc.ObjCObject> value,
    ffi.Pointer<objc.ObjCObject> tableName,
  ) {
    return __objc_msgSend_710(obj, sel, key, value, tableName);
  }

  late final __objc_msgSend_710Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_710 =
      __objc_msgSend_710Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _class_NSAttributedString1 = objc.getClass("NSAttributedString");
  late final _sel_attributesAtIndex_effectiveRange_1 = objc.registerName(
    "attributesAtIndex:effectiveRange:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_711(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int location,
    ffi.Pointer<_NSRange> range,
  ) {
    return __objc_msgSend_711(obj, sel, location, range);
  }

  late final __objc_msgSend_711Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.UnsignedLong,
        ffi.Pointer<_NSRange>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_711 =
      __objc_msgSend_711Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
              ffi.Pointer<_NSRange>,
            )
          >();

  late final _sel_attribute_atIndex_effectiveRange_1 = objc.registerName(
    "attribute:atIndex:effectiveRange:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_712(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> attrName,
    int location,
    ffi.Pointer<_NSRange> range,
  ) {
    return __objc_msgSend_712(obj, sel, attrName, location, range);
  }

  late final __objc_msgSend_712Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.UnsignedLong,
        ffi.Pointer<_NSRange>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_712 =
      __objc_msgSend_712Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              int,
              ffi.Pointer<_NSRange>,
            )
          >();

  late final _sel_attributedSubstringFromRange_1 = objc.registerName(
    "attributedSubstringFromRange:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_713(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    _NSRange range,
  ) {
    return __objc_msgSend_713(obj, sel, range);
  }

  late final __objc_msgSend_713Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        _NSRange,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_713 =
      __objc_msgSend_713Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              _NSRange,
            )
          >();

  late final _sel_attributesAtIndex_longestEffectiveRange_inRange_1 = objc
      .registerName("attributesAtIndex:longestEffectiveRange:inRange:");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_714(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int location,
    ffi.Pointer<_NSRange> range,
    _NSRange rangeLimit,
  ) {
    return __objc_msgSend_714(obj, sel, location, range, rangeLimit);
  }

  late final __objc_msgSend_714Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.UnsignedLong,
        ffi.Pointer<_NSRange>,
        _NSRange,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_714 =
      __objc_msgSend_714Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
              ffi.Pointer<_NSRange>,
              _NSRange,
            )
          >();

  late final _sel_attribute_atIndex_longestEffectiveRange_inRange_1 = objc
      .registerName("attribute:atIndex:longestEffectiveRange:inRange:");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_715(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> attrName,
    int location,
    ffi.Pointer<_NSRange> range,
    _NSRange rangeLimit,
  ) {
    return __objc_msgSend_715(obj, sel, attrName, location, range, rangeLimit);
  }

  late final __objc_msgSend_715Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.UnsignedLong,
        ffi.Pointer<_NSRange>,
        _NSRange,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_715 =
      __objc_msgSend_715Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              int,
              ffi.Pointer<_NSRange>,
              _NSRange,
            )
          >();

  late final _sel_isEqualToAttributedString_1 = objc.registerName(
    "isEqualToAttributedString:",
  );
  bool _objc_msgSend_716(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> other,
  ) {
    return __objc_msgSend_716(obj, sel, other);
  }

  late final __objc_msgSend_716Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Bool Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_716 =
      __objc_msgSend_716Ptr
          .asFunction<
            bool Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_initWithString_attributes_1 = objc.registerName(
    "initWithString:attributes:",
  );
  instancetype _objc_msgSend_717(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> str,
    ffi.Pointer<objc.ObjCObject> attrs,
  ) {
    return __objc_msgSend_717(obj, sel, str, attrs);
  }

  late final __objc_msgSend_717Ptr = _lookup<
    ffi.NativeFunction<
      instancetype Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_717 =
      __objc_msgSend_717Ptr
          .asFunction<
            instancetype Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_initWithAttributedString_1 = objc.registerName(
    "initWithAttributedString:",
  );
  instancetype _objc_msgSend_718(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> attrStr,
  ) {
    return __objc_msgSend_718(obj, sel, attrStr);
  }

  late final __objc_msgSend_718Ptr = _lookup<
    ffi.NativeFunction<
      instancetype Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_718 =
      __objc_msgSend_718Ptr
          .asFunction<
            instancetype Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_enumerateAttributesInRange_options_usingBlock_1 = objc
      .registerName("enumerateAttributesInRange:options:usingBlock:");
  void _objc_msgSend_719(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    _NSRange enumerationRange,
    int opts,
    ffi.Pointer<objc.ObjCBlock> block,
  ) {
    return __objc_msgSend_719(obj, sel, enumerationRange, opts, block);
  }

  late final __objc_msgSend_719Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        _NSRange,
        ffi.Int32,
        ffi.Pointer<objc.ObjCBlock>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_719 =
      __objc_msgSend_719Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              _NSRange,
              int,
              ffi.Pointer<objc.ObjCBlock>,
            )
          >();

  late final _sel_enumerateAttribute_inRange_options_usingBlock_1 = objc
      .registerName("enumerateAttribute:inRange:options:usingBlock:");
  void _objc_msgSend_720(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> attrName,
    _NSRange enumerationRange,
    int opts,
    ffi.Pointer<objc.ObjCBlock> block,
  ) {
    return __objc_msgSend_720(
      obj,
      sel,
      attrName,
      enumerationRange,
      opts,
      block,
    );
  }

  late final __objc_msgSend_720Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        _NSRange,
        ffi.Int32,
        ffi.Pointer<objc.ObjCBlock>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_720 =
      __objc_msgSend_720Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              _NSRange,
              int,
              ffi.Pointer<objc.ObjCBlock>,
            )
          >();

  late final _class_NSAttributedStringMarkdownParsingOptions1 = objc.getClass(
    "NSAttributedStringMarkdownParsingOptions",
  );
  late final _sel_allowsExtendedAttributes1 = objc.registerName(
    "allowsExtendedAttributes",
  );
  late final _sel_setAllowsExtendedAttributes_1 = objc.registerName(
    "setAllowsExtendedAttributes:",
  );
  late final _sel_interpretedSyntax1 = objc.registerName("interpretedSyntax");
  int _objc_msgSend_721(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_721(obj, sel);
  }

  late final __objc_msgSend_721Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Int32 Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_721 =
      __objc_msgSend_721Ptr
          .asFunction<
            int Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_setInterpretedSyntax_1 = objc.registerName(
    "setInterpretedSyntax:",
  );
  void _objc_msgSend_722(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int value,
  ) {
    return __objc_msgSend_722(obj, sel, value);
  }

  late final __objc_msgSend_722Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Int32,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_722 =
      __objc_msgSend_722Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
            )
          >();

  late final _sel_failurePolicy1 = objc.registerName("failurePolicy");
  int _objc_msgSend_723(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_723(obj, sel);
  }

  late final __objc_msgSend_723Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Int32 Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_723 =
      __objc_msgSend_723Ptr
          .asFunction<
            int Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_setFailurePolicy_1 = objc.registerName("setFailurePolicy:");
  void _objc_msgSend_724(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int value,
  ) {
    return __objc_msgSend_724(obj, sel, value);
  }

  late final __objc_msgSend_724Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Int32,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_724 =
      __objc_msgSend_724Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
            )
          >();

  late final _sel_setLanguageCode_1 = objc.registerName("setLanguageCode:");
  late final _sel_appliesSourcePositionAttributes1 = objc.registerName(
    "appliesSourcePositionAttributes",
  );
  late final _sel_setAppliesSourcePositionAttributes_1 = objc.registerName(
    "setAppliesSourcePositionAttributes:",
  );
  late final _sel_initWithContentsOfMarkdownFileAtURL_options_baseURL_error_1 =
      objc.registerName(
        "initWithContentsOfMarkdownFileAtURL:options:baseURL:error:",
      );
  instancetype _objc_msgSend_725(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> markdownFile,
    ffi.Pointer<objc.ObjCObject> options,
    ffi.Pointer<objc.ObjCObject> baseURL,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    return __objc_msgSend_725(obj, sel, markdownFile, options, baseURL, error);
  }

  late final __objc_msgSend_725Ptr = _lookup<
    ffi.NativeFunction<
      instancetype Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_725 =
      __objc_msgSend_725Ptr
          .asFunction<
            instancetype Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
            )
          >();

  late final _sel_initWithMarkdown_options_baseURL_error_1 = objc.registerName(
    "initWithMarkdown:options:baseURL:error:",
  );
  instancetype _objc_msgSend_726(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> markdown,
    ffi.Pointer<objc.ObjCObject> options,
    ffi.Pointer<objc.ObjCObject> baseURL,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    return __objc_msgSend_726(obj, sel, markdown, options, baseURL, error);
  }

  late final __objc_msgSend_726Ptr = _lookup<
    ffi.NativeFunction<
      instancetype Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_726 =
      __objc_msgSend_726Ptr
          .asFunction<
            instancetype Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
            )
          >();

  late final _sel_initWithMarkdownString_options_baseURL_error_1 = objc
      .registerName("initWithMarkdownString:options:baseURL:error:");
  instancetype _objc_msgSend_727(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> markdownString,
    ffi.Pointer<objc.ObjCObject> options,
    ffi.Pointer<objc.ObjCObject> baseURL,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    return __objc_msgSend_727(
      obj,
      sel,
      markdownString,
      options,
      baseURL,
      error,
    );
  }

  late final __objc_msgSend_727Ptr = _lookup<
    ffi.NativeFunction<
      instancetype Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_727 =
      __objc_msgSend_727Ptr
          .asFunction<
            instancetype Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
            )
          >();

  late final _sel_initWithFormat_options_locale_1 = objc.registerName(
    "initWithFormat:options:locale:",
  );
  instancetype _objc_msgSend_728(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> format,
    int options,
    ffi.Pointer<objc.ObjCObject> locale,
  ) {
    return __objc_msgSend_728(obj, sel, format, options, locale);
  }

  late final __objc_msgSend_728Ptr = _lookup<
    ffi.NativeFunction<
      instancetype Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Int32,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_728 =
      __objc_msgSend_728Ptr
          .asFunction<
            instancetype Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              int,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_initWithFormat_options_locale_arguments_1 = objc.registerName(
    "initWithFormat:options:locale:arguments:",
  );
  instancetype _objc_msgSend_729(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> format,
    int options,
    ffi.Pointer<objc.ObjCObject> locale,
    ffi.Pointer<__va_list_tag> arguments,
  ) {
    return __objc_msgSend_729(obj, sel, format, options, locale, arguments);
  }

  late final __objc_msgSend_729Ptr = _lookup<
    ffi.NativeFunction<
      instancetype Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Int32,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<__va_list_tag>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_729 =
      __objc_msgSend_729Ptr
          .asFunction<
            instancetype Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              int,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<__va_list_tag>,
            )
          >();

  late final _sel_localizedAttributedStringWithFormat_1 = objc.registerName(
    "localizedAttributedStringWithFormat:",
  );
  late final _sel_localizedAttributedStringWithFormat_options_1 = objc
      .registerName("localizedAttributedStringWithFormat:options:");
  instancetype _objc_msgSend_730(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> format,
    int options,
  ) {
    return __objc_msgSend_730(obj, sel, format, options);
  }

  late final __objc_msgSend_730Ptr = _lookup<
    ffi.NativeFunction<
      instancetype Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Int32,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_730 =
      __objc_msgSend_730Ptr
          .asFunction<
            instancetype Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              int,
            )
          >();

  late final _sel_initWithFormat_options_locale_context_1 = objc.registerName(
    "initWithFormat:options:locale:context:",
  );
  instancetype _objc_msgSend_731(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> format,
    int options,
    ffi.Pointer<objc.ObjCObject> locale,
    ffi.Pointer<objc.ObjCObject> context,
  ) {
    return __objc_msgSend_731(obj, sel, format, options, locale, context);
  }

  late final __objc_msgSend_731Ptr = _lookup<
    ffi.NativeFunction<
      instancetype Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Int32,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_731 =
      __objc_msgSend_731Ptr
          .asFunction<
            instancetype Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              int,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_initWithFormat_options_locale_context_arguments_1 = objc
      .registerName("initWithFormat:options:locale:context:arguments:");
  instancetype _objc_msgSend_732(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> format,
    int options,
    ffi.Pointer<objc.ObjCObject> locale,
    ffi.Pointer<objc.ObjCObject> context,
    ffi.Pointer<__va_list_tag> arguments,
  ) {
    return __objc_msgSend_732(
      obj,
      sel,
      format,
      options,
      locale,
      context,
      arguments,
    );
  }

  late final __objc_msgSend_732Ptr = _lookup<
    ffi.NativeFunction<
      instancetype Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Int32,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<__va_list_tag>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_732 =
      __objc_msgSend_732Ptr
          .asFunction<
            instancetype Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              int,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<__va_list_tag>,
            )
          >();

  late final _sel_localizedAttributedStringWithFormat_context_1 = objc
      .registerName("localizedAttributedStringWithFormat:context:");
  instancetype _objc_msgSend_733(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> format,
    ffi.Pointer<objc.ObjCObject> context,
  ) {
    return __objc_msgSend_733(obj, sel, format, context);
  }

  late final __objc_msgSend_733Ptr = _lookup<
    ffi.NativeFunction<
      instancetype Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_733 =
      __objc_msgSend_733Ptr
          .asFunction<
            instancetype Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_localizedAttributedStringWithFormat_options_context_1 = objc
      .registerName("localizedAttributedStringWithFormat:options:context:");
  instancetype _objc_msgSend_734(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> format,
    int options,
    ffi.Pointer<objc.ObjCObject> context,
  ) {
    return __objc_msgSend_734(obj, sel, format, options, context);
  }

  late final __objc_msgSend_734Ptr = _lookup<
    ffi.NativeFunction<
      instancetype Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Int32,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_734 =
      __objc_msgSend_734Ptr
          .asFunction<
            instancetype Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              int,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_attributedStringByInflectingString1 = objc.registerName(
    "attributedStringByInflectingString",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_735(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_735(obj, sel);
  }

  late final __objc_msgSend_735Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_735 =
      __objc_msgSend_735Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_localizedAttributedStringForKey_value_table_1 = objc
      .registerName("localizedAttributedStringForKey:value:table:");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_736(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> key,
    ffi.Pointer<objc.ObjCObject> value,
    ffi.Pointer<objc.ObjCObject> tableName,
  ) {
    return __objc_msgSend_736(obj, sel, key, value, tableName);
  }

  late final __objc_msgSend_736Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_736 =
      __objc_msgSend_736Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_bundleIdentifier1 = objc.registerName("bundleIdentifier");
  late final _sel_infoDictionary1 = objc.registerName("infoDictionary");
  late final _sel_localizedInfoDictionary1 = objc.registerName(
    "localizedInfoDictionary",
  );
  late final _sel_objectForInfoDictionaryKey_1 = objc.registerName(
    "objectForInfoDictionaryKey:",
  );
  late final _sel_classNamed_1 = objc.registerName("classNamed:");
  late final _sel_principalClass1 = objc.registerName("principalClass");
  late final _sel_preferredLocalizations1 = objc.registerName(
    "preferredLocalizations",
  );
  late final _sel_localizations1 = objc.registerName("localizations");
  late final _sel_developmentLocalization1 = objc.registerName(
    "developmentLocalization",
  );
  late final _sel_preferredLocalizationsFromArray_1 = objc.registerName(
    "preferredLocalizationsFromArray:",
  );
  late final _sel_preferredLocalizationsFromArray_forPreferences_1 = objc
      .registerName("preferredLocalizationsFromArray:forPreferences:");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_737(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> localizationsArray,
    ffi.Pointer<objc.ObjCObject> preferencesArray,
  ) {
    return __objc_msgSend_737(obj, sel, localizationsArray, preferencesArray);
  }

  late final __objc_msgSend_737Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_737 =
      __objc_msgSend_737Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_executableArchitectures1 = objc.registerName(
    "executableArchitectures",
  );
  late final _sel_setPreservationPriority_forTags_1 = objc.registerName(
    "setPreservationPriority:forTags:",
  );
  void _objc_msgSend_738(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    double priority,
    ffi.Pointer<objc.ObjCObject> tags,
  ) {
    return __objc_msgSend_738(obj, sel, priority, tags);
  }

  late final __objc_msgSend_738Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Double,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_738 =
      __objc_msgSend_738Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              double,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_preservationPriorityForTag_1 = objc.registerName(
    "preservationPriorityForTag:",
  );
  late final _class_NSMutableAttributedString1 = objc.getClass(
    "NSMutableAttributedString",
  );
  late final _sel_setAttributes_range_1 = objc.registerName(
    "setAttributes:range:",
  );
  void _objc_msgSend_739(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> attrs,
    _NSRange range,
  ) {
    return __objc_msgSend_739(obj, sel, attrs, range);
  }

  late final __objc_msgSend_739Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        _NSRange,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_739 =
      __objc_msgSend_739Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              _NSRange,
            )
          >();

  late final _sel_mutableString1 = objc.registerName("mutableString");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_740(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_740(obj, sel);
  }

  late final __objc_msgSend_740Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_740 =
      __objc_msgSend_740Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_addAttribute_value_range_1 = objc.registerName(
    "addAttribute:value:range:",
  );
  void _objc_msgSend_741(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> name,
    ffi.Pointer<objc.ObjCObject> value,
    _NSRange range,
  ) {
    return __objc_msgSend_741(obj, sel, name, value, range);
  }

  late final __objc_msgSend_741Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
        _NSRange,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_741 =
      __objc_msgSend_741Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
              _NSRange,
            )
          >();

  late final _sel_addAttributes_range_1 = objc.registerName(
    "addAttributes:range:",
  );
  void _objc_msgSend_742(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> attrs,
    _NSRange range,
  ) {
    return __objc_msgSend_742(obj, sel, attrs, range);
  }

  late final __objc_msgSend_742Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        _NSRange,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_742 =
      __objc_msgSend_742Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              _NSRange,
            )
          >();

  late final _sel_removeAttribute_range_1 = objc.registerName(
    "removeAttribute:range:",
  );
  void _objc_msgSend_743(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> name,
    _NSRange range,
  ) {
    return __objc_msgSend_743(obj, sel, name, range);
  }

  late final __objc_msgSend_743Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        _NSRange,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_743 =
      __objc_msgSend_743Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              _NSRange,
            )
          >();

  late final _sel_replaceCharactersInRange_withAttributedString_1 = objc
      .registerName("replaceCharactersInRange:withAttributedString:");
  void _objc_msgSend_744(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    _NSRange range,
    ffi.Pointer<objc.ObjCObject> attrString,
  ) {
    return __objc_msgSend_744(obj, sel, range, attrString);
  }

  late final __objc_msgSend_744Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        _NSRange,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_744 =
      __objc_msgSend_744Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              _NSRange,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_insertAttributedString_atIndex_1 = objc.registerName(
    "insertAttributedString:atIndex:",
  );
  void _objc_msgSend_745(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> attrString,
    int loc,
  ) {
    return __objc_msgSend_745(obj, sel, attrString, loc);
  }

  late final __objc_msgSend_745Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.UnsignedLong,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_745 =
      __objc_msgSend_745Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              int,
            )
          >();

  late final _sel_appendAttributedString_1 = objc.registerName(
    "appendAttributedString:",
  );
  void _objc_msgSend_746(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> attrString,
  ) {
    return __objc_msgSend_746(obj, sel, attrString);
  }

  late final __objc_msgSend_746Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_746 =
      __objc_msgSend_746Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_setAttributedString_1 = objc.registerName(
    "setAttributedString:",
  );
  late final _sel_beginEditing1 = objc.registerName("beginEditing");
  late final _sel_endEditing1 = objc.registerName("endEditing");
  late final _sel_appendLocalizedFormat_1 = objc.registerName(
    "appendLocalizedFormat:",
  );
  late final _class_NSDateFormatter1 = objc.getClass("NSDateFormatter");
  late final _class_NSFormatter1 = objc.getClass("NSFormatter");
  late final _sel_stringForObjectValue_1 = objc.registerName(
    "stringForObjectValue:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_747(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> obj1,
  ) {
    return __objc_msgSend_747(obj, sel, obj1);
  }

  late final __objc_msgSend_747Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_747 =
      __objc_msgSend_747Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_attributedStringForObjectValue_withDefaultAttributes_1 = objc
      .registerName("attributedStringForObjectValue:withDefaultAttributes:");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_748(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> obj1,
    ffi.Pointer<objc.ObjCObject> attrs,
  ) {
    return __objc_msgSend_748(obj, sel, obj1, attrs);
  }

  late final __objc_msgSend_748Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_748 =
      __objc_msgSend_748Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_editingStringForObjectValue_1 = objc.registerName(
    "editingStringForObjectValue:",
  );
  late final _sel_getObjectValue_forString_errorDescription_1 = objc
      .registerName("getObjectValue:forString:errorDescription:");
  bool _objc_msgSend_749(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> obj1,
    ffi.Pointer<objc.ObjCObject> string,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    return __objc_msgSend_749(obj, sel, obj1, string, error);
  }

  late final __objc_msgSend_749Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Bool Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_749 =
      __objc_msgSend_749Ptr
          .asFunction<
            bool Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
            )
          >();

  late final _sel_isPartialStringValid_newEditingString_errorDescription_1 =
      objc.registerName(
        "isPartialStringValid:newEditingString:errorDescription:",
      );
  bool _objc_msgSend_750(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> partialString,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> newString,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    return __objc_msgSend_750(obj, sel, partialString, newString, error);
  }

  late final __objc_msgSend_750Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Bool Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
        ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_750 =
      __objc_msgSend_750Ptr
          .asFunction<
            bool Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
              ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
            )
          >();

  late final _sel_isPartialStringValid_proposedSelectedRange_originalString_originalSelectedRange_errorDescription_1 =
      objc.registerName(
        "isPartialStringValid:proposedSelectedRange:originalString:originalSelectedRange:errorDescription:",
      );
  bool _objc_msgSend_751(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> partialStringPtr,
    ffi.Pointer<_NSRange> proposedSelRangePtr,
    ffi.Pointer<objc.ObjCObject> origString,
    _NSRange origSelRange,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    return __objc_msgSend_751(
      obj,
      sel,
      partialStringPtr,
      proposedSelRangePtr,
      origString,
      origSelRange,
      error,
    );
  }

  late final __objc_msgSend_751Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Bool Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
        ffi.Pointer<_NSRange>,
        ffi.Pointer<objc.ObjCObject>,
        _NSRange,
        ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_751 =
      __objc_msgSend_751Ptr
          .asFunction<
            bool Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
              ffi.Pointer<_NSRange>,
              ffi.Pointer<objc.ObjCObject>,
              _NSRange,
              ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
            )
          >();

  late final _sel_formattingContext1 = objc.registerName("formattingContext");
  int _objc_msgSend_752(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_752(obj, sel);
  }

  late final __objc_msgSend_752Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Int32 Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_752 =
      __objc_msgSend_752Ptr
          .asFunction<
            int Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_setFormattingContext_1 = objc.registerName(
    "setFormattingContext:",
  );
  void _objc_msgSend_753(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int value,
  ) {
    return __objc_msgSend_753(obj, sel, value);
  }

  late final __objc_msgSend_753Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Int32,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_753 =
      __objc_msgSend_753Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
            )
          >();

  late final _sel_getObjectValue_forString_range_error_1 = objc.registerName(
    "getObjectValue:forString:range:error:",
  );
  bool _objc_msgSend_754(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> obj1,
    ffi.Pointer<objc.ObjCObject> string,
    ffi.Pointer<_NSRange> rangep,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    return __objc_msgSend_754(obj, sel, obj1, string, rangep, error);
  }

  late final __objc_msgSend_754Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Bool Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<_NSRange>,
        ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_754 =
      __objc_msgSend_754Ptr
          .asFunction<
            bool Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<_NSRange>,
              ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
            )
          >();

  late final _sel_stringFromDate_1 = objc.registerName("stringFromDate:");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_755(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> date,
  ) {
    return __objc_msgSend_755(obj, sel, date);
  }

  late final __objc_msgSend_755Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_755 =
      __objc_msgSend_755Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_dateFromString_1 = objc.registerName("dateFromString:");
  late final _sel_localizedStringFromDate_dateStyle_timeStyle_1 = objc
      .registerName("localizedStringFromDate:dateStyle:timeStyle:");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_756(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> date,
    int dstyle,
    int tstyle,
  ) {
    return __objc_msgSend_756(obj, sel, date, dstyle, tstyle);
  }

  late final __objc_msgSend_756Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Int32,
        ffi.Int32,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_756 =
      __objc_msgSend_756Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              int,
              int,
            )
          >();

  late final _sel_dateFormatFromTemplate_options_locale_1 = objc.registerName(
    "dateFormatFromTemplate:options:locale:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_757(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> tmplate,
    int opts,
    ffi.Pointer<objc.ObjCObject> locale,
  ) {
    return __objc_msgSend_757(obj, sel, tmplate, opts, locale);
  }

  late final __objc_msgSend_757Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.UnsignedLong,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_757 =
      __objc_msgSend_757Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              int,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_defaultFormatterBehavior1 = objc.registerName(
    "defaultFormatterBehavior",
  );
  int _objc_msgSend_758(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_758(obj, sel);
  }

  late final __objc_msgSend_758Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Int32 Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_758 =
      __objc_msgSend_758Ptr
          .asFunction<
            int Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_setDefaultFormatterBehavior_1 = objc.registerName(
    "setDefaultFormatterBehavior:",
  );
  void _objc_msgSend_759(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int value,
  ) {
    return __objc_msgSend_759(obj, sel, value);
  }

  late final __objc_msgSend_759Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Int32,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_759 =
      __objc_msgSend_759Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
            )
          >();

  late final _sel_setLocalizedDateFormatFromTemplate_1 = objc.registerName(
    "setLocalizedDateFormatFromTemplate:",
  );
  late final _sel_dateFormat1 = objc.registerName("dateFormat");
  late final _sel_setDateFormat_1 = objc.registerName("setDateFormat:");
  late final _sel_dateStyle1 = objc.registerName("dateStyle");
  int _objc_msgSend_760(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_760(obj, sel);
  }

  late final __objc_msgSend_760Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Int32 Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_760 =
      __objc_msgSend_760Ptr
          .asFunction<
            int Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_setDateStyle_1 = objc.registerName("setDateStyle:");
  void _objc_msgSend_761(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int value,
  ) {
    return __objc_msgSend_761(obj, sel, value);
  }

  late final __objc_msgSend_761Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Int32,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_761 =
      __objc_msgSend_761Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
            )
          >();

  late final _sel_timeStyle1 = objc.registerName("timeStyle");
  late final _sel_setTimeStyle_1 = objc.registerName("setTimeStyle:");
  late final _sel_locale1 = objc.registerName("locale");
  late final _sel_setLocale_1 = objc.registerName("setLocale:");
  void _objc_msgSend_762(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> value,
  ) {
    return __objc_msgSend_762(obj, sel, value);
  }

  late final __objc_msgSend_762Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_762 =
      __objc_msgSend_762Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_generatesCalendarDates1 = objc.registerName(
    "generatesCalendarDates",
  );
  late final _sel_setGeneratesCalendarDates_1 = objc.registerName(
    "setGeneratesCalendarDates:",
  );
  late final _sel_formatterBehavior1 = objc.registerName("formatterBehavior");
  late final _sel_setFormatterBehavior_1 = objc.registerName(
    "setFormatterBehavior:",
  );
  late final _class_NSCalendar1 = objc.getClass("NSCalendar");
  late final _sel_currentCalendar1 = objc.registerName("currentCalendar");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_763(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_763(obj, sel);
  }

  late final __objc_msgSend_763Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_763 =
      __objc_msgSend_763Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_autoupdatingCurrentCalendar1 = objc.registerName(
    "autoupdatingCurrentCalendar",
  );
  late final _sel_calendarWithIdentifier_1 = objc.registerName(
    "calendarWithIdentifier:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_764(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> calendarIdentifierConstant,
  ) {
    return __objc_msgSend_764(obj, sel, calendarIdentifierConstant);
  }

  late final __objc_msgSend_764Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_764 =
      __objc_msgSend_764Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_initWithCalendarIdentifier_1 = objc.registerName(
    "initWithCalendarIdentifier:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_765(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_765(obj, sel);
  }

  late final __objc_msgSend_765Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_765 =
      __objc_msgSend_765Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  void _objc_msgSend_766(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> value,
  ) {
    return __objc_msgSend_766(obj, sel, value);
  }

  late final __objc_msgSend_766Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_766 =
      __objc_msgSend_766Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_firstWeekday1 = objc.registerName("firstWeekday");
  late final _sel_setFirstWeekday_1 = objc.registerName("setFirstWeekday:");
  late final _sel_minimumDaysInFirstWeek1 = objc.registerName(
    "minimumDaysInFirstWeek",
  );
  late final _sel_setMinimumDaysInFirstWeek_1 = objc.registerName(
    "setMinimumDaysInFirstWeek:",
  );
  late final _sel_eraSymbols1 = objc.registerName("eraSymbols");
  late final _sel_longEraSymbols1 = objc.registerName("longEraSymbols");
  late final _sel_monthSymbols1 = objc.registerName("monthSymbols");
  late final _sel_shortMonthSymbols1 = objc.registerName("shortMonthSymbols");
  late final _sel_veryShortMonthSymbols1 = objc.registerName(
    "veryShortMonthSymbols",
  );
  late final _sel_standaloneMonthSymbols1 = objc.registerName(
    "standaloneMonthSymbols",
  );
  late final _sel_shortStandaloneMonthSymbols1 = objc.registerName(
    "shortStandaloneMonthSymbols",
  );
  late final _sel_veryShortStandaloneMonthSymbols1 = objc.registerName(
    "veryShortStandaloneMonthSymbols",
  );
  late final _sel_weekdaySymbols1 = objc.registerName("weekdaySymbols");
  late final _sel_shortWeekdaySymbols1 = objc.registerName(
    "shortWeekdaySymbols",
  );
  late final _sel_veryShortWeekdaySymbols1 = objc.registerName(
    "veryShortWeekdaySymbols",
  );
  late final _sel_standaloneWeekdaySymbols1 = objc.registerName(
    "standaloneWeekdaySymbols",
  );
  late final _sel_shortStandaloneWeekdaySymbols1 = objc.registerName(
    "shortStandaloneWeekdaySymbols",
  );
  late final _sel_veryShortStandaloneWeekdaySymbols1 = objc.registerName(
    "veryShortStandaloneWeekdaySymbols",
  );
  late final _sel_quarterSymbols1 = objc.registerName("quarterSymbols");
  late final _sel_shortQuarterSymbols1 = objc.registerName(
    "shortQuarterSymbols",
  );
  late final _sel_standaloneQuarterSymbols1 = objc.registerName(
    "standaloneQuarterSymbols",
  );
  late final _sel_shortStandaloneQuarterSymbols1 = objc.registerName(
    "shortStandaloneQuarterSymbols",
  );
  late final _sel_AMSymbol1 = objc.registerName("AMSymbol");
  late final _sel_PMSymbol1 = objc.registerName("PMSymbol");
  late final _sel_minimumRangeOfUnit_1 = objc.registerName(
    "minimumRangeOfUnit:",
  );
  _NSRange _objc_msgSend_767(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int unit,
  ) {
    return __objc_msgSend_767(obj, sel, unit);
  }

  late final __objc_msgSend_767Ptr = _lookup<
    ffi.NativeFunction<
      _NSRange Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Int32,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_767 =
      __objc_msgSend_767Ptr
          .asFunction<
            _NSRange Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
            )
          >();

  void _objc_msgSend_767_stret(
    ffi.Pointer<_NSRange> stret,
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int unit,
  ) {
    return __objc_msgSend_767_stret(stret, obj, sel, unit);
  }

  late final __objc_msgSend_767_stretPtr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<_NSRange>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Int32,
      )
    >
  >('objc_msgSend_stret');
  late final __objc_msgSend_767_stret =
      __objc_msgSend_767_stretPtr
          .asFunction<
            void Function(
              ffi.Pointer<_NSRange>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
            )
          >();

  late final _sel_maximumRangeOfUnit_1 = objc.registerName(
    "maximumRangeOfUnit:",
  );
  late final _sel_rangeOfUnit_inUnit_forDate_1 = objc.registerName(
    "rangeOfUnit:inUnit:forDate:",
  );
  _NSRange _objc_msgSend_768(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int smaller,
    int larger,
    ffi.Pointer<objc.ObjCObject> date,
  ) {
    return __objc_msgSend_768(obj, sel, smaller, larger, date);
  }

  late final __objc_msgSend_768Ptr = _lookup<
    ffi.NativeFunction<
      _NSRange Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Int32,
        ffi.Int32,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_768 =
      __objc_msgSend_768Ptr
          .asFunction<
            _NSRange Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
              int,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  void _objc_msgSend_768_stret(
    ffi.Pointer<_NSRange> stret,
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int smaller,
    int larger,
    ffi.Pointer<objc.ObjCObject> date,
  ) {
    return __objc_msgSend_768_stret(stret, obj, sel, smaller, larger, date);
  }

  late final __objc_msgSend_768_stretPtr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<_NSRange>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Int32,
        ffi.Int32,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend_stret');
  late final __objc_msgSend_768_stret =
      __objc_msgSend_768_stretPtr
          .asFunction<
            void Function(
              ffi.Pointer<_NSRange>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
              int,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_ordinalityOfUnit_inUnit_forDate_1 = objc.registerName(
    "ordinalityOfUnit:inUnit:forDate:",
  );
  int _objc_msgSend_769(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int smaller,
    int larger,
    ffi.Pointer<objc.ObjCObject> date,
  ) {
    return __objc_msgSend_769(obj, sel, smaller, larger, date);
  }

  late final __objc_msgSend_769Ptr = _lookup<
    ffi.NativeFunction<
      ffi.UnsignedLong Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Int32,
        ffi.Int32,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_769 =
      __objc_msgSend_769Ptr
          .asFunction<
            int Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
              int,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_rangeOfUnit_startDate_interval_forDate_1 = objc.registerName(
    "rangeOfUnit:startDate:interval:forDate:",
  );
  bool _objc_msgSend_770(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int unit,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> datep,
    ffi.Pointer<ffi.Double> tip,
    ffi.Pointer<objc.ObjCObject> date,
  ) {
    return __objc_msgSend_770(obj, sel, unit, datep, tip, date);
  }

  late final __objc_msgSend_770Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Bool Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Int32,
        ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
        ffi.Pointer<ffi.Double>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_770 =
      __objc_msgSend_770Ptr
          .asFunction<
            bool Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
              ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _class_NSDateComponents1 = objc.getClass("NSDateComponents");
  late final _sel_calendar1 = objc.registerName("calendar");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_771(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_771(obj, sel);
  }

  late final __objc_msgSend_771Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_771 =
      __objc_msgSend_771Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_setCalendar_1 = objc.registerName("setCalendar:");
  void _objc_msgSend_772(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> value,
  ) {
    return __objc_msgSend_772(obj, sel, value);
  }

  late final __objc_msgSend_772Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_772 =
      __objc_msgSend_772Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  ffi.Pointer<objc.ObjCObject> _objc_msgSend_773(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_773(obj, sel);
  }

  late final __objc_msgSend_773Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_773 =
      __objc_msgSend_773Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  void _objc_msgSend_774(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> value,
  ) {
    return __objc_msgSend_774(obj, sel, value);
  }

  late final __objc_msgSend_774Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_774 =
      __objc_msgSend_774Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_era1 = objc.registerName("era");
  late final _sel_setEra_1 = objc.registerName("setEra:");
  late final _sel_year1 = objc.registerName("year");
  late final _sel_setYear_1 = objc.registerName("setYear:");
  late final _sel_month1 = objc.registerName("month");
  late final _sel_setMonth_1 = objc.registerName("setMonth:");
  late final _sel_day1 = objc.registerName("day");
  late final _sel_setDay_1 = objc.registerName("setDay:");
  late final _sel_hour1 = objc.registerName("hour");
  late final _sel_setHour_1 = objc.registerName("setHour:");
  late final _sel_minute1 = objc.registerName("minute");
  late final _sel_setMinute_1 = objc.registerName("setMinute:");
  late final _sel_second1 = objc.registerName("second");
  late final _sel_setSecond_1 = objc.registerName("setSecond:");
  late final _sel_nanosecond1 = objc.registerName("nanosecond");
  late final _sel_setNanosecond_1 = objc.registerName("setNanosecond:");
  late final _sel_weekday1 = objc.registerName("weekday");
  late final _sel_setWeekday_1 = objc.registerName("setWeekday:");
  late final _sel_weekdayOrdinal1 = objc.registerName("weekdayOrdinal");
  late final _sel_setWeekdayOrdinal_1 = objc.registerName("setWeekdayOrdinal:");
  late final _sel_quarter1 = objc.registerName("quarter");
  late final _sel_setQuarter_1 = objc.registerName("setQuarter:");
  late final _sel_weekOfMonth1 = objc.registerName("weekOfMonth");
  late final _sel_setWeekOfMonth_1 = objc.registerName("setWeekOfMonth:");
  late final _sel_weekOfYear1 = objc.registerName("weekOfYear");
  late final _sel_setWeekOfYear_1 = objc.registerName("setWeekOfYear:");
  late final _sel_yearForWeekOfYear1 = objc.registerName("yearForWeekOfYear");
  late final _sel_setYearForWeekOfYear_1 = objc.registerName(
    "setYearForWeekOfYear:",
  );
  late final _sel_isLeapMonth1 = objc.registerName("isLeapMonth");
  late final _sel_setLeapMonth_1 = objc.registerName("setLeapMonth:");
  late final _sel_week1 = objc.registerName("week");
  late final _sel_setWeek_1 = objc.registerName("setWeek:");
  late final _sel_setValue_forComponent_1 = objc.registerName(
    "setValue:forComponent:",
  );
  void _objc_msgSend_775(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int value,
    int unit,
  ) {
    return __objc_msgSend_775(obj, sel, value, unit);
  }

  late final __objc_msgSend_775Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Long,
        ffi.Int32,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_775 =
      __objc_msgSend_775Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
              int,
            )
          >();

  late final _sel_valueForComponent_1 = objc.registerName("valueForComponent:");
  int _objc_msgSend_776(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int unit,
  ) {
    return __objc_msgSend_776(obj, sel, unit);
  }

  late final __objc_msgSend_776Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Long Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Int32,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_776 =
      __objc_msgSend_776Ptr
          .asFunction<
            int Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
            )
          >();

  late final _sel_isValidDate1 = objc.registerName("isValidDate");
  late final _sel_isValidDateInCalendar_1 = objc.registerName(
    "isValidDateInCalendar:",
  );
  bool _objc_msgSend_777(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> calendar,
  ) {
    return __objc_msgSend_777(obj, sel, calendar);
  }

  late final __objc_msgSend_777Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Bool Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_777 =
      __objc_msgSend_777Ptr
          .asFunction<
            bool Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_dateFromComponents_1 = objc.registerName(
    "dateFromComponents:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_778(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> comps,
  ) {
    return __objc_msgSend_778(obj, sel, comps);
  }

  late final __objc_msgSend_778Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_778 =
      __objc_msgSend_778Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_components_fromDate_1 = objc.registerName(
    "components:fromDate:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_779(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int unitFlags,
    ffi.Pointer<objc.ObjCObject> date,
  ) {
    return __objc_msgSend_779(obj, sel, unitFlags, date);
  }

  late final __objc_msgSend_779Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Int32,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_779 =
      __objc_msgSend_779Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_dateByAddingComponents_toDate_options_1 = objc.registerName(
    "dateByAddingComponents:toDate:options:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_780(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> comps,
    ffi.Pointer<objc.ObjCObject> date,
    int opts,
  ) {
    return __objc_msgSend_780(obj, sel, comps, date, opts);
  }

  late final __objc_msgSend_780Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Int32,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_780 =
      __objc_msgSend_780Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
              int,
            )
          >();

  late final _sel_components_fromDate_toDate_options_1 = objc.registerName(
    "components:fromDate:toDate:options:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_781(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int unitFlags,
    ffi.Pointer<objc.ObjCObject> startingDate,
    ffi.Pointer<objc.ObjCObject> resultDate,
    int opts,
  ) {
    return __objc_msgSend_781(
      obj,
      sel,
      unitFlags,
      startingDate,
      resultDate,
      opts,
    );
  }

  late final __objc_msgSend_781Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Int32,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Int32,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_781 =
      __objc_msgSend_781Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
              int,
            )
          >();

  late final _sel_getEra_year_month_day_fromDate_1 = objc.registerName(
    "getEra:year:month:day:fromDate:",
  );
  void _objc_msgSend_782(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<ffi.Long> eraValuePointer,
    ffi.Pointer<ffi.Long> yearValuePointer,
    ffi.Pointer<ffi.Long> monthValuePointer,
    ffi.Pointer<ffi.Long> dayValuePointer,
    ffi.Pointer<objc.ObjCObject> date,
  ) {
    return __objc_msgSend_782(
      obj,
      sel,
      eraValuePointer,
      yearValuePointer,
      monthValuePointer,
      dayValuePointer,
      date,
    );
  }

  late final __objc_msgSend_782Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<ffi.Long>,
        ffi.Pointer<ffi.Long>,
        ffi.Pointer<ffi.Long>,
        ffi.Pointer<ffi.Long>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_782 =
      __objc_msgSend_782Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<ffi.Long>,
              ffi.Pointer<ffi.Long>,
              ffi.Pointer<ffi.Long>,
              ffi.Pointer<ffi.Long>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_getEra_yearForWeekOfYear_weekOfYear_weekday_fromDate_1 = objc
      .registerName("getEra:yearForWeekOfYear:weekOfYear:weekday:fromDate:");
  late final _sel_getHour_minute_second_nanosecond_fromDate_1 = objc
      .registerName("getHour:minute:second:nanosecond:fromDate:");
  late final _sel_component_fromDate_1 = objc.registerName(
    "component:fromDate:",
  );
  int _objc_msgSend_783(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int unit,
    ffi.Pointer<objc.ObjCObject> date,
  ) {
    return __objc_msgSend_783(obj, sel, unit, date);
  }

  late final __objc_msgSend_783Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Long Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Int32,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_783 =
      __objc_msgSend_783Ptr
          .asFunction<
            int Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_dateWithEra_year_month_day_hour_minute_second_nanosecond_1 =
      objc.registerName(
        "dateWithEra:year:month:day:hour:minute:second:nanosecond:",
      );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_784(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int eraValue,
    int yearValue,
    int monthValue,
    int dayValue,
    int hourValue,
    int minuteValue,
    int secondValue,
    int nanosecondValue,
  ) {
    return __objc_msgSend_784(
      obj,
      sel,
      eraValue,
      yearValue,
      monthValue,
      dayValue,
      hourValue,
      minuteValue,
      secondValue,
      nanosecondValue,
    );
  }

  late final __objc_msgSend_784Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Long,
        ffi.Long,
        ffi.Long,
        ffi.Long,
        ffi.Long,
        ffi.Long,
        ffi.Long,
        ffi.Long,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_784 =
      __objc_msgSend_784Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
              int,
              int,
              int,
              int,
              int,
              int,
              int,
            )
          >();

  late final _sel_dateWithEra_yearForWeekOfYear_weekOfYear_weekday_hour_minute_second_nanosecond_1 =
      objc.registerName(
        "dateWithEra:yearForWeekOfYear:weekOfYear:weekday:hour:minute:second:nanosecond:",
      );
  late final _sel_startOfDayForDate_1 = objc.registerName("startOfDayForDate:");
  late final _sel_componentsInTimeZone_fromDate_1 = objc.registerName(
    "componentsInTimeZone:fromDate:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_785(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> timezone,
    ffi.Pointer<objc.ObjCObject> date,
  ) {
    return __objc_msgSend_785(obj, sel, timezone, date);
  }

  late final __objc_msgSend_785Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_785 =
      __objc_msgSend_785Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_compareDate_toDate_toUnitGranularity_1 = objc.registerName(
    "compareDate:toDate:toUnitGranularity:",
  );
  int _objc_msgSend_786(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> date1,
    ffi.Pointer<objc.ObjCObject> date2,
    int unit,
  ) {
    return __objc_msgSend_786(obj, sel, date1, date2, unit);
  }

  late final __objc_msgSend_786Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Int32 Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Int32,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_786 =
      __objc_msgSend_786Ptr
          .asFunction<
            int Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
              int,
            )
          >();

  late final _sel_isDate_equalToDate_toUnitGranularity_1 = objc.registerName(
    "isDate:equalToDate:toUnitGranularity:",
  );
  bool _objc_msgSend_787(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> date1,
    ffi.Pointer<objc.ObjCObject> date2,
    int unit,
  ) {
    return __objc_msgSend_787(obj, sel, date1, date2, unit);
  }

  late final __objc_msgSend_787Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Bool Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Int32,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_787 =
      __objc_msgSend_787Ptr
          .asFunction<
            bool Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
              int,
            )
          >();

  late final _sel_isDate_inSameDayAsDate_1 = objc.registerName(
    "isDate:inSameDayAsDate:",
  );
  bool _objc_msgSend_788(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> date1,
    ffi.Pointer<objc.ObjCObject> date2,
  ) {
    return __objc_msgSend_788(obj, sel, date1, date2);
  }

  late final __objc_msgSend_788Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Bool Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_788 =
      __objc_msgSend_788Ptr
          .asFunction<
            bool Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_isDateInToday_1 = objc.registerName("isDateInToday:");
  late final _sel_isDateInYesterday_1 = objc.registerName("isDateInYesterday:");
  late final _sel_isDateInTomorrow_1 = objc.registerName("isDateInTomorrow:");
  late final _sel_isDateInWeekend_1 = objc.registerName("isDateInWeekend:");
  late final _sel_rangeOfWeekendStartDate_interval_containingDate_1 = objc
      .registerName("rangeOfWeekendStartDate:interval:containingDate:");
  bool _objc_msgSend_789(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> datep,
    ffi.Pointer<ffi.Double> tip,
    ffi.Pointer<objc.ObjCObject> date,
  ) {
    return __objc_msgSend_789(obj, sel, datep, tip, date);
  }

  late final __objc_msgSend_789Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Bool Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
        ffi.Pointer<ffi.Double>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_789 =
      __objc_msgSend_789Ptr
          .asFunction<
            bool Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_nextWeekendStartDate_interval_options_afterDate_1 = objc
      .registerName("nextWeekendStartDate:interval:options:afterDate:");
  bool _objc_msgSend_790(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> datep,
    ffi.Pointer<ffi.Double> tip,
    int options,
    ffi.Pointer<objc.ObjCObject> date,
  ) {
    return __objc_msgSend_790(obj, sel, datep, tip, options, date);
  }

  late final __objc_msgSend_790Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Bool Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
        ffi.Pointer<ffi.Double>,
        ffi.Int32,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_790 =
      __objc_msgSend_790Ptr
          .asFunction<
            bool Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
              ffi.Pointer<ffi.Double>,
              int,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_components_fromDateComponents_toDateComponents_options_1 =
      objc.registerName(
        "components:fromDateComponents:toDateComponents:options:",
      );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_791(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int unitFlags,
    ffi.Pointer<objc.ObjCObject> startingDateComp,
    ffi.Pointer<objc.ObjCObject> resultDateComp,
    int options,
  ) {
    return __objc_msgSend_791(
      obj,
      sel,
      unitFlags,
      startingDateComp,
      resultDateComp,
      options,
    );
  }

  late final __objc_msgSend_791Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Int32,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Int32,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_791 =
      __objc_msgSend_791Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
              int,
            )
          >();

  late final _sel_dateByAddingUnit_value_toDate_options_1 = objc.registerName(
    "dateByAddingUnit:value:toDate:options:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_792(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int unit,
    int value,
    ffi.Pointer<objc.ObjCObject> date,
    int options,
  ) {
    return __objc_msgSend_792(obj, sel, unit, value, date, options);
  }

  late final __objc_msgSend_792Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Int32,
        ffi.Long,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Int32,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_792 =
      __objc_msgSend_792Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
              int,
              ffi.Pointer<objc.ObjCObject>,
              int,
            )
          >();

  late final _sel_enumerateDatesStartingAfterDate_matchingComponents_options_usingBlock_1 =
      objc.registerName(
        "enumerateDatesStartingAfterDate:matchingComponents:options:usingBlock:",
      );
  void _objc_msgSend_793(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> start,
    ffi.Pointer<objc.ObjCObject> comps,
    int opts,
    ffi.Pointer<objc.ObjCBlock> block,
  ) {
    return __objc_msgSend_793(obj, sel, start, comps, opts, block);
  }

  late final __objc_msgSend_793Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Int32,
        ffi.Pointer<objc.ObjCBlock>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_793 =
      __objc_msgSend_793Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
              int,
              ffi.Pointer<objc.ObjCBlock>,
            )
          >();

  late final _sel_nextDateAfterDate_matchingComponents_options_1 = objc
      .registerName("nextDateAfterDate:matchingComponents:options:");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_794(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> date,
    ffi.Pointer<objc.ObjCObject> comps,
    int options,
  ) {
    return __objc_msgSend_794(obj, sel, date, comps, options);
  }

  late final __objc_msgSend_794Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Int32,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_794 =
      __objc_msgSend_794Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
              int,
            )
          >();

  late final _sel_nextDateAfterDate_matchingUnit_value_options_1 = objc
      .registerName("nextDateAfterDate:matchingUnit:value:options:");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_795(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> date,
    int unit,
    int value,
    int options,
  ) {
    return __objc_msgSend_795(obj, sel, date, unit, value, options);
  }

  late final __objc_msgSend_795Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Int32,
        ffi.Long,
        ffi.Int32,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_795 =
      __objc_msgSend_795Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              int,
              int,
              int,
            )
          >();

  late final _sel_nextDateAfterDate_matchingHour_minute_second_options_1 = objc
      .registerName("nextDateAfterDate:matchingHour:minute:second:options:");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_796(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> date,
    int hourValue,
    int minuteValue,
    int secondValue,
    int options,
  ) {
    return __objc_msgSend_796(
      obj,
      sel,
      date,
      hourValue,
      minuteValue,
      secondValue,
      options,
    );
  }

  late final __objc_msgSend_796Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Long,
        ffi.Long,
        ffi.Long,
        ffi.Int32,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_796 =
      __objc_msgSend_796Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              int,
              int,
              int,
              int,
            )
          >();

  late final _sel_dateBySettingUnit_value_ofDate_options_1 = objc.registerName(
    "dateBySettingUnit:value:ofDate:options:",
  );
  late final _sel_dateBySettingHour_minute_second_ofDate_options_1 = objc
      .registerName("dateBySettingHour:minute:second:ofDate:options:");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_797(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int h,
    int m,
    int s,
    ffi.Pointer<objc.ObjCObject> date,
    int opts,
  ) {
    return __objc_msgSend_797(obj, sel, h, m, s, date, opts);
  }

  late final __objc_msgSend_797Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Long,
        ffi.Long,
        ffi.Long,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Int32,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_797 =
      __objc_msgSend_797Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
              int,
              int,
              ffi.Pointer<objc.ObjCObject>,
              int,
            )
          >();

  late final _sel_date_matchesComponents_1 = objc.registerName(
    "date:matchesComponents:",
  );
  bool _objc_msgSend_798(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> date,
    ffi.Pointer<objc.ObjCObject> components,
  ) {
    return __objc_msgSend_798(obj, sel, date, components);
  }

  late final __objc_msgSend_798Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Bool Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_798 =
      __objc_msgSend_798Ptr
          .asFunction<
            bool Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  void _objc_msgSend_799(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> value,
  ) {
    return __objc_msgSend_799(obj, sel, value);
  }

  late final __objc_msgSend_799Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_799 =
      __objc_msgSend_799Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_isLenient1 = objc.registerName("isLenient");
  late final _sel_setLenient_1 = objc.registerName("setLenient:");
  late final _sel_twoDigitStartDate1 = objc.registerName("twoDigitStartDate");
  late final _sel_setTwoDigitStartDate_1 = objc.registerName(
    "setTwoDigitStartDate:",
  );
  void _objc_msgSend_800(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> value,
  ) {
    return __objc_msgSend_800(obj, sel, value);
  }

  late final __objc_msgSend_800Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_800 =
      __objc_msgSend_800Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_defaultDate1 = objc.registerName("defaultDate");
  late final _sel_setDefaultDate_1 = objc.registerName("setDefaultDate:");
  late final _sel_setEraSymbols_1 = objc.registerName("setEraSymbols:");
  void _objc_msgSend_801(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> value,
  ) {
    return __objc_msgSend_801(obj, sel, value);
  }

  late final __objc_msgSend_801Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_801 =
      __objc_msgSend_801Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_setMonthSymbols_1 = objc.registerName("setMonthSymbols:");
  late final _sel_setShortMonthSymbols_1 = objc.registerName(
    "setShortMonthSymbols:",
  );
  late final _sel_setWeekdaySymbols_1 = objc.registerName("setWeekdaySymbols:");
  late final _sel_setShortWeekdaySymbols_1 = objc.registerName(
    "setShortWeekdaySymbols:",
  );
  late final _sel_setAMSymbol_1 = objc.registerName("setAMSymbol:");
  late final _sel_setPMSymbol_1 = objc.registerName("setPMSymbol:");
  late final _sel_setLongEraSymbols_1 = objc.registerName("setLongEraSymbols:");
  late final _sel_setVeryShortMonthSymbols_1 = objc.registerName(
    "setVeryShortMonthSymbols:",
  );
  late final _sel_setStandaloneMonthSymbols_1 = objc.registerName(
    "setStandaloneMonthSymbols:",
  );
  late final _sel_setShortStandaloneMonthSymbols_1 = objc.registerName(
    "setShortStandaloneMonthSymbols:",
  );
  late final _sel_setVeryShortStandaloneMonthSymbols_1 = objc.registerName(
    "setVeryShortStandaloneMonthSymbols:",
  );
  late final _sel_setVeryShortWeekdaySymbols_1 = objc.registerName(
    "setVeryShortWeekdaySymbols:",
  );
  late final _sel_setStandaloneWeekdaySymbols_1 = objc.registerName(
    "setStandaloneWeekdaySymbols:",
  );
  late final _sel_setShortStandaloneWeekdaySymbols_1 = objc.registerName(
    "setShortStandaloneWeekdaySymbols:",
  );
  late final _sel_setVeryShortStandaloneWeekdaySymbols_1 = objc.registerName(
    "setVeryShortStandaloneWeekdaySymbols:",
  );
  late final _sel_setQuarterSymbols_1 = objc.registerName("setQuarterSymbols:");
  late final _sel_setShortQuarterSymbols_1 = objc.registerName(
    "setShortQuarterSymbols:",
  );
  late final _sel_setStandaloneQuarterSymbols_1 = objc.registerName(
    "setStandaloneQuarterSymbols:",
  );
  late final _sel_setShortStandaloneQuarterSymbols_1 = objc.registerName(
    "setShortStandaloneQuarterSymbols:",
  );
  late final _sel_gregorianStartDate1 = objc.registerName("gregorianStartDate");
  late final _sel_setGregorianStartDate_1 = objc.registerName(
    "setGregorianStartDate:",
  );
  late final _sel_doesRelativeDateFormatting1 = objc.registerName(
    "doesRelativeDateFormatting",
  );
  late final _sel_setDoesRelativeDateFormatting_1 = objc.registerName(
    "setDoesRelativeDateFormatting:",
  );
  late final _sel_initWithDateFormat_allowNaturalLanguage_1 = objc.registerName(
    "initWithDateFormat:allowNaturalLanguage:",
  );
  late final _sel_allowsNaturalLanguage1 = objc.registerName(
    "allowsNaturalLanguage",
  );
  late final _class_NSNumberFormatter1 = objc.getClass("NSNumberFormatter");
  late final _sel_stringFromNumber_1 = objc.registerName("stringFromNumber:");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_802(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> number,
  ) {
    return __objc_msgSend_802(obj, sel, number);
  }

  late final __objc_msgSend_802Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_802 =
      __objc_msgSend_802Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_numberFromString_1 = objc.registerName("numberFromString:");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_803(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> string,
  ) {
    return __objc_msgSend_803(obj, sel, string);
  }

  late final __objc_msgSend_803Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_803 =
      __objc_msgSend_803Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_localizedStringFromNumber_numberStyle_1 = objc.registerName(
    "localizedStringFromNumber:numberStyle:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_804(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> num,
    int nstyle,
  ) {
    return __objc_msgSend_804(obj, sel, num, nstyle);
  }

  late final __objc_msgSend_804Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Int32,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_804 =
      __objc_msgSend_804Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              int,
            )
          >();

  int _objc_msgSend_805(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_805(obj, sel);
  }

  late final __objc_msgSend_805Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Int32 Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_805 =
      __objc_msgSend_805Ptr
          .asFunction<
            int Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  void _objc_msgSend_806(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int behavior,
  ) {
    return __objc_msgSend_806(obj, sel, behavior);
  }

  late final __objc_msgSend_806Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Int32,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_806 =
      __objc_msgSend_806Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
            )
          >();

  late final _sel_numberStyle1 = objc.registerName("numberStyle");
  int _objc_msgSend_807(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_807(obj, sel);
  }

  late final __objc_msgSend_807Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Int32 Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_807 =
      __objc_msgSend_807Ptr
          .asFunction<
            int Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_setNumberStyle_1 = objc.registerName("setNumberStyle:");
  void _objc_msgSend_808(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int value,
  ) {
    return __objc_msgSend_808(obj, sel, value);
  }

  late final __objc_msgSend_808Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Int32,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_808 =
      __objc_msgSend_808Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
            )
          >();

  late final _sel_generatesDecimalNumbers1 = objc.registerName(
    "generatesDecimalNumbers",
  );
  late final _sel_setGeneratesDecimalNumbers_1 = objc.registerName(
    "setGeneratesDecimalNumbers:",
  );
  void _objc_msgSend_809(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int value,
  ) {
    return __objc_msgSend_809(obj, sel, value);
  }

  late final __objc_msgSend_809Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Int32,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_809 =
      __objc_msgSend_809Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
            )
          >();

  late final _sel_negativeFormat1 = objc.registerName("negativeFormat");
  late final _sel_setNegativeFormat_1 = objc.registerName("setNegativeFormat:");
  late final _sel_textAttributesForNegativeValues1 = objc.registerName(
    "textAttributesForNegativeValues",
  );
  late final _sel_setTextAttributesForNegativeValues_1 = objc.registerName(
    "setTextAttributesForNegativeValues:",
  );
  late final _sel_positiveFormat1 = objc.registerName("positiveFormat");
  late final _sel_setPositiveFormat_1 = objc.registerName("setPositiveFormat:");
  late final _sel_textAttributesForPositiveValues1 = objc.registerName(
    "textAttributesForPositiveValues",
  );
  late final _sel_setTextAttributesForPositiveValues_1 = objc.registerName(
    "setTextAttributesForPositiveValues:",
  );
  late final _sel_allowsFloats1 = objc.registerName("allowsFloats");
  late final _sel_setAllowsFloats_1 = objc.registerName("setAllowsFloats:");
  late final _sel_setDecimalSeparator_1 = objc.registerName(
    "setDecimalSeparator:",
  );
  late final _sel_alwaysShowsDecimalSeparator1 = objc.registerName(
    "alwaysShowsDecimalSeparator",
  );
  late final _sel_setAlwaysShowsDecimalSeparator_1 = objc.registerName(
    "setAlwaysShowsDecimalSeparator:",
  );
  late final _sel_currencyDecimalSeparator1 = objc.registerName(
    "currencyDecimalSeparator",
  );
  late final _sel_setCurrencyDecimalSeparator_1 = objc.registerName(
    "setCurrencyDecimalSeparator:",
  );
  late final _sel_usesGroupingSeparator1 = objc.registerName(
    "usesGroupingSeparator",
  );
  late final _sel_setUsesGroupingSeparator_1 = objc.registerName(
    "setUsesGroupingSeparator:",
  );
  late final _sel_setGroupingSeparator_1 = objc.registerName(
    "setGroupingSeparator:",
  );
  late final _sel_zeroSymbol1 = objc.registerName("zeroSymbol");
  late final _sel_setZeroSymbol_1 = objc.registerName("setZeroSymbol:");
  late final _sel_textAttributesForZero1 = objc.registerName(
    "textAttributesForZero",
  );
  late final _sel_setTextAttributesForZero_1 = objc.registerName(
    "setTextAttributesForZero:",
  );
  late final _sel_nilSymbol1 = objc.registerName("nilSymbol");
  late final _sel_setNilSymbol_1 = objc.registerName("setNilSymbol:");
  late final _sel_textAttributesForNil1 = objc.registerName(
    "textAttributesForNil",
  );
  late final _sel_setTextAttributesForNil_1 = objc.registerName(
    "setTextAttributesForNil:",
  );
  late final _sel_notANumberSymbol1 = objc.registerName("notANumberSymbol");
  late final _sel_setNotANumberSymbol_1 = objc.registerName(
    "setNotANumberSymbol:",
  );
  late final _sel_textAttributesForNotANumber1 = objc.registerName(
    "textAttributesForNotANumber",
  );
  late final _sel_setTextAttributesForNotANumber_1 = objc.registerName(
    "setTextAttributesForNotANumber:",
  );
  late final _sel_positiveInfinitySymbol1 = objc.registerName(
    "positiveInfinitySymbol",
  );
  late final _sel_setPositiveInfinitySymbol_1 = objc.registerName(
    "setPositiveInfinitySymbol:",
  );
  late final _sel_textAttributesForPositiveInfinity1 = objc.registerName(
    "textAttributesForPositiveInfinity",
  );
  late final _sel_setTextAttributesForPositiveInfinity_1 = objc.registerName(
    "setTextAttributesForPositiveInfinity:",
  );
  late final _sel_negativeInfinitySymbol1 = objc.registerName(
    "negativeInfinitySymbol",
  );
  late final _sel_setNegativeInfinitySymbol_1 = objc.registerName(
    "setNegativeInfinitySymbol:",
  );
  late final _sel_textAttributesForNegativeInfinity1 = objc.registerName(
    "textAttributesForNegativeInfinity",
  );
  late final _sel_setTextAttributesForNegativeInfinity_1 = objc.registerName(
    "setTextAttributesForNegativeInfinity:",
  );
  late final _sel_positivePrefix1 = objc.registerName("positivePrefix");
  late final _sel_setPositivePrefix_1 = objc.registerName("setPositivePrefix:");
  late final _sel_positiveSuffix1 = objc.registerName("positiveSuffix");
  late final _sel_setPositiveSuffix_1 = objc.registerName("setPositiveSuffix:");
  late final _sel_negativePrefix1 = objc.registerName("negativePrefix");
  late final _sel_setNegativePrefix_1 = objc.registerName("setNegativePrefix:");
  late final _sel_negativeSuffix1 = objc.registerName("negativeSuffix");
  late final _sel_setNegativeSuffix_1 = objc.registerName("setNegativeSuffix:");
  late final _sel_setCurrencyCode_1 = objc.registerName("setCurrencyCode:");
  late final _sel_setCurrencySymbol_1 = objc.registerName("setCurrencySymbol:");
  late final _sel_internationalCurrencySymbol1 = objc.registerName(
    "internationalCurrencySymbol",
  );
  late final _sel_setInternationalCurrencySymbol_1 = objc.registerName(
    "setInternationalCurrencySymbol:",
  );
  late final _sel_percentSymbol1 = objc.registerName("percentSymbol");
  late final _sel_setPercentSymbol_1 = objc.registerName("setPercentSymbol:");
  late final _sel_perMillSymbol1 = objc.registerName("perMillSymbol");
  late final _sel_setPerMillSymbol_1 = objc.registerName("setPerMillSymbol:");
  late final _sel_minusSign1 = objc.registerName("minusSign");
  late final _sel_setMinusSign_1 = objc.registerName("setMinusSign:");
  late final _sel_plusSign1 = objc.registerName("plusSign");
  late final _sel_setPlusSign_1 = objc.registerName("setPlusSign:");
  late final _sel_exponentSymbol1 = objc.registerName("exponentSymbol");
  late final _sel_setExponentSymbol_1 = objc.registerName("setExponentSymbol:");
  late final _sel_groupingSize1 = objc.registerName("groupingSize");
  late final _sel_setGroupingSize_1 = objc.registerName("setGroupingSize:");
  late final _sel_secondaryGroupingSize1 = objc.registerName(
    "secondaryGroupingSize",
  );
  late final _sel_setSecondaryGroupingSize_1 = objc.registerName(
    "setSecondaryGroupingSize:",
  );
  late final _sel_multiplier1 = objc.registerName("multiplier");
  late final _sel_setMultiplier_1 = objc.registerName("setMultiplier:");
  late final _sel_formatWidth1 = objc.registerName("formatWidth");
  late final _sel_setFormatWidth_1 = objc.registerName("setFormatWidth:");
  late final _sel_paddingCharacter1 = objc.registerName("paddingCharacter");
  late final _sel_setPaddingCharacter_1 = objc.registerName(
    "setPaddingCharacter:",
  );
  late final _sel_paddingPosition1 = objc.registerName("paddingPosition");
  int _objc_msgSend_810(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_810(obj, sel);
  }

  late final __objc_msgSend_810Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Int32 Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_810 =
      __objc_msgSend_810Ptr
          .asFunction<
            int Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_setPaddingPosition_1 = objc.registerName(
    "setPaddingPosition:",
  );
  void _objc_msgSend_811(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int value,
  ) {
    return __objc_msgSend_811(obj, sel, value);
  }

  late final __objc_msgSend_811Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Int32,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_811 =
      __objc_msgSend_811Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
            )
          >();

  late final _sel_roundingMode1 = objc.registerName("roundingMode");
  int _objc_msgSend_812(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_812(obj, sel);
  }

  late final __objc_msgSend_812Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Int32 Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_812 =
      __objc_msgSend_812Ptr
          .asFunction<
            int Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_setRoundingMode_1 = objc.registerName("setRoundingMode:");
  void _objc_msgSend_813(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int value,
  ) {
    return __objc_msgSend_813(obj, sel, value);
  }

  late final __objc_msgSend_813Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Int32,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_813 =
      __objc_msgSend_813Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
            )
          >();

  late final _sel_roundingIncrement1 = objc.registerName("roundingIncrement");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_814(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_814(obj, sel);
  }

  late final __objc_msgSend_814Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_814 =
      __objc_msgSend_814Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_setRoundingIncrement_1 = objc.registerName(
    "setRoundingIncrement:",
  );
  void _objc_msgSend_815(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> value,
  ) {
    return __objc_msgSend_815(obj, sel, value);
  }

  late final __objc_msgSend_815Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_815 =
      __objc_msgSend_815Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_minimumIntegerDigits1 = objc.registerName(
    "minimumIntegerDigits",
  );
  late final _sel_setMinimumIntegerDigits_1 = objc.registerName(
    "setMinimumIntegerDigits:",
  );
  late final _sel_maximumIntegerDigits1 = objc.registerName(
    "maximumIntegerDigits",
  );
  late final _sel_setMaximumIntegerDigits_1 = objc.registerName(
    "setMaximumIntegerDigits:",
  );
  late final _sel_minimumFractionDigits1 = objc.registerName(
    "minimumFractionDigits",
  );
  late final _sel_setMinimumFractionDigits_1 = objc.registerName(
    "setMinimumFractionDigits:",
  );
  late final _sel_maximumFractionDigits1 = objc.registerName(
    "maximumFractionDigits",
  );
  late final _sel_setMaximumFractionDigits_1 = objc.registerName(
    "setMaximumFractionDigits:",
  );
  late final _sel_minimum1 = objc.registerName("minimum");
  late final _sel_setMinimum_1 = objc.registerName("setMinimum:");
  late final _sel_maximum1 = objc.registerName("maximum");
  late final _sel_setMaximum_1 = objc.registerName("setMaximum:");
  late final _sel_currencyGroupingSeparator1 = objc.registerName(
    "currencyGroupingSeparator",
  );
  late final _sel_setCurrencyGroupingSeparator_1 = objc.registerName(
    "setCurrencyGroupingSeparator:",
  );
  late final _sel_usesSignificantDigits1 = objc.registerName(
    "usesSignificantDigits",
  );
  late final _sel_setUsesSignificantDigits_1 = objc.registerName(
    "setUsesSignificantDigits:",
  );
  late final _sel_minimumSignificantDigits1 = objc.registerName(
    "minimumSignificantDigits",
  );
  late final _sel_setMinimumSignificantDigits_1 = objc.registerName(
    "setMinimumSignificantDigits:",
  );
  late final _sel_maximumSignificantDigits1 = objc.registerName(
    "maximumSignificantDigits",
  );
  late final _sel_setMaximumSignificantDigits_1 = objc.registerName(
    "setMaximumSignificantDigits:",
  );
  late final _sel_isPartialStringValidationEnabled1 = objc.registerName(
    "isPartialStringValidationEnabled",
  );
  late final _sel_setPartialStringValidationEnabled_1 = objc.registerName(
    "setPartialStringValidationEnabled:",
  );
  late final _sel_hasThousandSeparators1 = objc.registerName(
    "hasThousandSeparators",
  );
  late final _sel_setHasThousandSeparators_1 = objc.registerName(
    "setHasThousandSeparators:",
  );
  late final _sel_thousandSeparator1 = objc.registerName("thousandSeparator");
  late final _sel_setThousandSeparator_1 = objc.registerName(
    "setThousandSeparator:",
  );
  late final _sel_localizesFormat1 = objc.registerName("localizesFormat");
  late final _sel_setLocalizesFormat_1 = objc.registerName(
    "setLocalizesFormat:",
  );
  late final _sel_format1 = objc.registerName("format");
  late final _sel_setFormat_1 = objc.registerName("setFormat:");
  late final _sel_attributedStringForZero1 = objc.registerName(
    "attributedStringForZero",
  );
  late final _sel_setAttributedStringForZero_1 = objc.registerName(
    "setAttributedStringForZero:",
  );
  void _objc_msgSend_816(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> value,
  ) {
    return __objc_msgSend_816(obj, sel, value);
  }

  late final __objc_msgSend_816Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_816 =
      __objc_msgSend_816Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_attributedStringForNil1 = objc.registerName(
    "attributedStringForNil",
  );
  late final _sel_setAttributedStringForNil_1 = objc.registerName(
    "setAttributedStringForNil:",
  );
  late final _sel_attributedStringForNotANumber1 = objc.registerName(
    "attributedStringForNotANumber",
  );
  late final _sel_setAttributedStringForNotANumber_1 = objc.registerName(
    "setAttributedStringForNotANumber:",
  );
  late final _class_NSDecimalNumberHandler1 = objc.getClass(
    "NSDecimalNumberHandler",
  );
  late final _sel_defaultDecimalNumberHandler1 = objc.registerName(
    "defaultDecimalNumberHandler",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_817(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_817(obj, sel);
  }

  late final __objc_msgSend_817Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_817 =
      __objc_msgSend_817Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_initWithRoundingMode_scale_raiseOnExactness_raiseOnOverflow_raiseOnUnderflow_raiseOnDivideByZero_1 =
      objc.registerName(
        "initWithRoundingMode:scale:raiseOnExactness:raiseOnOverflow:raiseOnUnderflow:raiseOnDivideByZero:",
      );
  instancetype _objc_msgSend_818(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int roundingMode,
    int scale,
    bool exact,
    bool overflow,
    bool underflow,
    bool divideByZero,
  ) {
    return __objc_msgSend_818(
      obj,
      sel,
      roundingMode,
      scale,
      exact,
      overflow,
      underflow,
      divideByZero,
    );
  }

  late final __objc_msgSend_818Ptr = _lookup<
    ffi.NativeFunction<
      instancetype Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Int32,
        ffi.Short,
        ffi.Bool,
        ffi.Bool,
        ffi.Bool,
        ffi.Bool,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_818 =
      __objc_msgSend_818Ptr
          .asFunction<
            instancetype Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
              int,
              bool,
              bool,
              bool,
              bool,
            )
          >();

  late final _sel_decimalNumberHandlerWithRoundingMode_scale_raiseOnExactness_raiseOnOverflow_raiseOnUnderflow_raiseOnDivideByZero_1 =
      objc.registerName(
        "decimalNumberHandlerWithRoundingMode:scale:raiseOnExactness:raiseOnOverflow:raiseOnUnderflow:raiseOnDivideByZero:",
      );
  late final _sel_roundingBehavior1 = objc.registerName("roundingBehavior");
  late final _sel_setRoundingBehavior_1 = objc.registerName(
    "setRoundingBehavior:",
  );
  void _objc_msgSend_819(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> value,
  ) {
    return __objc_msgSend_819(obj, sel, value);
  }

  late final __objc_msgSend_819Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_819 =
      __objc_msgSend_819Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _class_NSScanner1 = objc.getClass("NSScanner");
  late final _sel_scanLocation1 = objc.registerName("scanLocation");
  late final _sel_setScanLocation_1 = objc.registerName("setScanLocation:");
  late final _sel_charactersToBeSkipped1 = objc.registerName(
    "charactersToBeSkipped",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_820(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_820(obj, sel);
  }

  late final __objc_msgSend_820Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_820 =
      __objc_msgSend_820Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_setCharactersToBeSkipped_1 = objc.registerName(
    "setCharactersToBeSkipped:",
  );
  void _objc_msgSend_821(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> value,
  ) {
    return __objc_msgSend_821(obj, sel, value);
  }

  late final __objc_msgSend_821Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_821 =
      __objc_msgSend_821Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_caseSensitive1 = objc.registerName("caseSensitive");
  late final _sel_setCaseSensitive_1 = objc.registerName("setCaseSensitive:");
  late final _sel_scanInt_1 = objc.registerName("scanInt:");
  bool _objc_msgSend_822(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<ffi.Int> result,
  ) {
    return __objc_msgSend_822(obj, sel, result);
  }

  late final __objc_msgSend_822Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Bool Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<ffi.Int>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_822 =
      __objc_msgSend_822Ptr
          .asFunction<
            bool Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<ffi.Int>,
            )
          >();

  late final _sel_scanInteger_1 = objc.registerName("scanInteger:");
  bool _objc_msgSend_823(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<ffi.Long> result,
  ) {
    return __objc_msgSend_823(obj, sel, result);
  }

  late final __objc_msgSend_823Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Bool Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<ffi.Long>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_823 =
      __objc_msgSend_823Ptr
          .asFunction<
            bool Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<ffi.Long>,
            )
          >();

  late final _sel_scanLongLong_1 = objc.registerName("scanLongLong:");
  bool _objc_msgSend_824(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<ffi.LongLong> result,
  ) {
    return __objc_msgSend_824(obj, sel, result);
  }

  late final __objc_msgSend_824Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Bool Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<ffi.LongLong>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_824 =
      __objc_msgSend_824Ptr
          .asFunction<
            bool Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<ffi.LongLong>,
            )
          >();

  late final _sel_scanUnsignedLongLong_1 = objc.registerName(
    "scanUnsignedLongLong:",
  );
  bool _objc_msgSend_825(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<ffi.UnsignedLongLong> result,
  ) {
    return __objc_msgSend_825(obj, sel, result);
  }

  late final __objc_msgSend_825Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Bool Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<ffi.UnsignedLongLong>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_825 =
      __objc_msgSend_825Ptr
          .asFunction<
            bool Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<ffi.UnsignedLongLong>,
            )
          >();

  late final _sel_scanFloat_1 = objc.registerName("scanFloat:");
  bool _objc_msgSend_826(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<ffi.Float> result,
  ) {
    return __objc_msgSend_826(obj, sel, result);
  }

  late final __objc_msgSend_826Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Bool Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<ffi.Float>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_826 =
      __objc_msgSend_826Ptr
          .asFunction<
            bool Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<ffi.Float>,
            )
          >();

  late final _sel_scanDouble_1 = objc.registerName("scanDouble:");
  bool _objc_msgSend_827(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<ffi.Double> result,
  ) {
    return __objc_msgSend_827(obj, sel, result);
  }

  late final __objc_msgSend_827Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Bool Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<ffi.Double>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_827 =
      __objc_msgSend_827Ptr
          .asFunction<
            bool Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<ffi.Double>,
            )
          >();

  late final _sel_scanHexInt_1 = objc.registerName("scanHexInt:");
  bool _objc_msgSend_828(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<ffi.UnsignedInt> result,
  ) {
    return __objc_msgSend_828(obj, sel, result);
  }

  late final __objc_msgSend_828Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Bool Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<ffi.UnsignedInt>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_828 =
      __objc_msgSend_828Ptr
          .asFunction<
            bool Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<ffi.UnsignedInt>,
            )
          >();

  late final _sel_scanHexLongLong_1 = objc.registerName("scanHexLongLong:");
  late final _sel_scanHexFloat_1 = objc.registerName("scanHexFloat:");
  late final _sel_scanHexDouble_1 = objc.registerName("scanHexDouble:");
  late final _sel_scanString_intoString_1 = objc.registerName(
    "scanString:intoString:",
  );
  bool _objc_msgSend_829(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> string,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> result,
  ) {
    return __objc_msgSend_829(obj, sel, string, result);
  }

  late final __objc_msgSend_829Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Bool Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_829 =
      __objc_msgSend_829Ptr
          .asFunction<
            bool Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
            )
          >();

  late final _sel_scanCharactersFromSet_intoString_1 = objc.registerName(
    "scanCharactersFromSet:intoString:",
  );
  bool _objc_msgSend_830(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> set1,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> result,
  ) {
    return __objc_msgSend_830(obj, sel, set1, result);
  }

  late final __objc_msgSend_830Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Bool Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_830 =
      __objc_msgSend_830Ptr
          .asFunction<
            bool Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
            )
          >();

  late final _sel_scanUpToString_intoString_1 = objc.registerName(
    "scanUpToString:intoString:",
  );
  late final _sel_scanUpToCharactersFromSet_intoString_1 = objc.registerName(
    "scanUpToCharactersFromSet:intoString:",
  );
  late final _sel_isAtEnd1 = objc.registerName("isAtEnd");
  late final _sel_scannerWithString_1 = objc.registerName("scannerWithString:");
  late final _sel_localizedScannerWithString_1 = objc.registerName(
    "localizedScannerWithString:",
  );
  late final _sel_scanDecimal_1 = objc.registerName("scanDecimal:");
  bool _objc_msgSend_831(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<NSDecimal> dcm,
  ) {
    return __objc_msgSend_831(obj, sel, dcm);
  }

  late final __objc_msgSend_831Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Bool Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<NSDecimal>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_831 =
      __objc_msgSend_831Ptr
          .asFunction<
            bool Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<NSDecimal>,
            )
          >();

  late final _class_NSException1 = objc.getClass("NSException");
  late final _sel_exceptionWithName_reason_userInfo_1 = objc.registerName(
    "exceptionWithName:reason:userInfo:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_832(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> name,
    ffi.Pointer<objc.ObjCObject> reason,
    ffi.Pointer<objc.ObjCObject> userInfo,
  ) {
    return __objc_msgSend_832(obj, sel, name, reason, userInfo);
  }

  late final __objc_msgSend_832Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_832 =
      __objc_msgSend_832Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_initWithName_reason_userInfo_1 = objc.registerName(
    "initWithName:reason:userInfo:",
  );
  instancetype _objc_msgSend_833(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> aName,
    ffi.Pointer<objc.ObjCObject> aReason,
    ffi.Pointer<objc.ObjCObject> aUserInfo,
  ) {
    return __objc_msgSend_833(obj, sel, aName, aReason, aUserInfo);
  }

  late final __objc_msgSend_833Ptr = _lookup<
    ffi.NativeFunction<
      instancetype Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_833 =
      __objc_msgSend_833Ptr
          .asFunction<
            instancetype Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_reason1 = objc.registerName("reason");
  late final _sel_raise1 = objc.registerName("raise");
  late final _sel_raise_format_1 = objc.registerName("raise:format:");
  late final _sel_raise_format_arguments_1 = objc.registerName(
    "raise:format:arguments:",
  );
  void _objc_msgSend_834(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> name,
    ffi.Pointer<objc.ObjCObject> format,
    ffi.Pointer<__va_list_tag> argList,
  ) {
    return __objc_msgSend_834(obj, sel, name, format, argList);
  }

  late final __objc_msgSend_834Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<__va_list_tag>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_834 =
      __objc_msgSend_834Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<__va_list_tag>,
            )
          >();

  late final _class_NSFileHandle1 = objc.getClass("NSFileHandle");
  late final _sel_availableData1 = objc.registerName("availableData");
  late final _sel_initWithFileDescriptor_closeOnDealloc_1 = objc.registerName(
    "initWithFileDescriptor:closeOnDealloc:",
  );
  instancetype _objc_msgSend_835(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int fd,
    bool closeopt,
  ) {
    return __objc_msgSend_835(obj, sel, fd, closeopt);
  }

  late final __objc_msgSend_835Ptr = _lookup<
    ffi.NativeFunction<
      instancetype Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Int,
        ffi.Bool,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_835 =
      __objc_msgSend_835Ptr
          .asFunction<
            instancetype Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
              bool,
            )
          >();

  late final _sel_readDataToEndOfFileAndReturnError_1 = objc.registerName(
    "readDataToEndOfFileAndReturnError:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_836(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    return __objc_msgSend_836(obj, sel, error);
  }

  late final __objc_msgSend_836Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_836 =
      __objc_msgSend_836Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
            )
          >();

  late final _sel_readDataUpToLength_error_1 = objc.registerName(
    "readDataUpToLength:error:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_837(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int length,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    return __objc_msgSend_837(obj, sel, length, error);
  }

  late final __objc_msgSend_837Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.UnsignedLong,
        ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_837 =
      __objc_msgSend_837Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
              ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
            )
          >();

  late final _sel_writeData_error_1 = objc.registerName("writeData:error:");
  bool _objc_msgSend_838(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> data,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    return __objc_msgSend_838(obj, sel, data, error);
  }

  late final __objc_msgSend_838Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Bool Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_838 =
      __objc_msgSend_838Ptr
          .asFunction<
            bool Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
            )
          >();

  late final _sel_getOffset_error_1 = objc.registerName("getOffset:error:");
  bool _objc_msgSend_839(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<ffi.UnsignedLongLong> offsetInFile,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    return __objc_msgSend_839(obj, sel, offsetInFile, error);
  }

  late final __objc_msgSend_839Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Bool Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<ffi.UnsignedLongLong>,
        ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_839 =
      __objc_msgSend_839Ptr
          .asFunction<
            bool Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<ffi.UnsignedLongLong>,
              ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
            )
          >();

  late final _sel_seekToEndReturningOffset_error_1 = objc.registerName(
    "seekToEndReturningOffset:error:",
  );
  late final _sel_seekToOffset_error_1 = objc.registerName(
    "seekToOffset:error:",
  );
  bool _objc_msgSend_840(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int offset,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    return __objc_msgSend_840(obj, sel, offset, error);
  }

  late final __objc_msgSend_840Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Bool Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.UnsignedLongLong,
        ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_840 =
      __objc_msgSend_840Ptr
          .asFunction<
            bool Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
              ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
            )
          >();

  late final _sel_truncateAtOffset_error_1 = objc.registerName(
    "truncateAtOffset:error:",
  );
  late final _sel_synchronizeAndReturnError_1 = objc.registerName(
    "synchronizeAndReturnError:",
  );
  late final _sel_closeAndReturnError_1 = objc.registerName(
    "closeAndReturnError:",
  );
  late final _sel_fileHandleWithStandardInput1 = objc.registerName(
    "fileHandleWithStandardInput",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_841(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_841(obj, sel);
  }

  late final __objc_msgSend_841Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_841 =
      __objc_msgSend_841Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_fileHandleWithStandardOutput1 = objc.registerName(
    "fileHandleWithStandardOutput",
  );
  late final _sel_fileHandleWithStandardError1 = objc.registerName(
    "fileHandleWithStandardError",
  );
  late final _sel_fileHandleWithNullDevice1 = objc.registerName(
    "fileHandleWithNullDevice",
  );
  late final _sel_fileHandleForReadingAtPath_1 = objc.registerName(
    "fileHandleForReadingAtPath:",
  );
  late final _sel_fileHandleForWritingAtPath_1 = objc.registerName(
    "fileHandleForWritingAtPath:",
  );
  late final _sel_fileHandleForUpdatingAtPath_1 = objc.registerName(
    "fileHandleForUpdatingAtPath:",
  );
  late final _sel_fileHandleForReadingFromURL_error_1 = objc.registerName(
    "fileHandleForReadingFromURL:error:",
  );
  instancetype _objc_msgSend_842(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> url,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    return __objc_msgSend_842(obj, sel, url, error);
  }

  late final __objc_msgSend_842Ptr = _lookup<
    ffi.NativeFunction<
      instancetype Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_842 =
      __objc_msgSend_842Ptr
          .asFunction<
            instancetype Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
            )
          >();

  late final _sel_fileHandleForWritingToURL_error_1 = objc.registerName(
    "fileHandleForWritingToURL:error:",
  );
  late final _sel_fileHandleForUpdatingURL_error_1 = objc.registerName(
    "fileHandleForUpdatingURL:error:",
  );
  late final _sel_readInBackgroundAndNotifyForModes_1 = objc.registerName(
    "readInBackgroundAndNotifyForModes:",
  );
  void _objc_msgSend_843(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> modes,
  ) {
    return __objc_msgSend_843(obj, sel, modes);
  }

  late final __objc_msgSend_843Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_843 =
      __objc_msgSend_843Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_readInBackgroundAndNotify1 = objc.registerName(
    "readInBackgroundAndNotify",
  );
  late final _sel_readToEndOfFileInBackgroundAndNotifyForModes_1 = objc
      .registerName("readToEndOfFileInBackgroundAndNotifyForModes:");
  late final _sel_readToEndOfFileInBackgroundAndNotify1 = objc.registerName(
    "readToEndOfFileInBackgroundAndNotify",
  );
  late final _sel_acceptConnectionInBackgroundAndNotifyForModes_1 = objc
      .registerName("acceptConnectionInBackgroundAndNotifyForModes:");
  late final _sel_acceptConnectionInBackgroundAndNotify1 = objc.registerName(
    "acceptConnectionInBackgroundAndNotify",
  );
  late final _sel_waitForDataInBackgroundAndNotifyForModes_1 = objc
      .registerName("waitForDataInBackgroundAndNotifyForModes:");
  late final _sel_waitForDataInBackgroundAndNotify1 = objc.registerName(
    "waitForDataInBackgroundAndNotify",
  );
  late final _sel_readabilityHandler1 = objc.registerName("readabilityHandler");
  ffi.Pointer<objc.ObjCBlock> _objc_msgSend_844(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_844(obj, sel);
  }

  late final __objc_msgSend_844Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCBlock> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_844 =
      __objc_msgSend_844Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCBlock> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_setReadabilityHandler_1 = objc.registerName(
    "setReadabilityHandler:",
  );
  void _objc_msgSend_845(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCBlock> value,
  ) {
    return __objc_msgSend_845(obj, sel, value);
  }

  late final __objc_msgSend_845Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCBlock>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_845 =
      __objc_msgSend_845Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCBlock>,
            )
          >();

  late final _sel_writeabilityHandler1 = objc.registerName(
    "writeabilityHandler",
  );
  late final _sel_setWriteabilityHandler_1 = objc.registerName(
    "setWriteabilityHandler:",
  );
  late final _sel_initWithFileDescriptor_1 = objc.registerName(
    "initWithFileDescriptor:",
  );
  instancetype _objc_msgSend_846(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int fd,
  ) {
    return __objc_msgSend_846(obj, sel, fd);
  }

  late final __objc_msgSend_846Ptr = _lookup<
    ffi.NativeFunction<
      instancetype Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Int,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_846 =
      __objc_msgSend_846Ptr
          .asFunction<
            instancetype Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
            )
          >();

  late final _sel_fileDescriptor1 = objc.registerName("fileDescriptor");
  late final _sel_readDataToEndOfFile1 = objc.registerName(
    "readDataToEndOfFile",
  );
  late final _sel_readDataOfLength_1 = objc.registerName("readDataOfLength:");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_847(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int length,
  ) {
    return __objc_msgSend_847(obj, sel, length);
  }

  late final __objc_msgSend_847Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.UnsignedLong,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_847 =
      __objc_msgSend_847Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
            )
          >();

  late final _sel_offsetInFile1 = objc.registerName("offsetInFile");
  late final _sel_seekToEndOfFile1 = objc.registerName("seekToEndOfFile");
  late final _sel_seekToFileOffset_1 = objc.registerName("seekToFileOffset:");
  void _objc_msgSend_848(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int offset,
  ) {
    return __objc_msgSend_848(obj, sel, offset);
  }

  late final __objc_msgSend_848Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.UnsignedLongLong,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_848 =
      __objc_msgSend_848Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
            )
          >();

  late final _sel_truncateFileAtOffset_1 = objc.registerName(
    "truncateFileAtOffset:",
  );
  late final _sel_synchronizeFile1 = objc.registerName("synchronizeFile");
  late final _sel_closeFile1 = objc.registerName("closeFile");
  late final _class_NSHTTPCookieStorage1 = objc.getClass("NSHTTPCookieStorage");
  late final _sel_sharedHTTPCookieStorage1 = objc.registerName(
    "sharedHTTPCookieStorage",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_849(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_849(obj, sel);
  }

  late final __objc_msgSend_849Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_849 =
      __objc_msgSend_849Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_sharedCookieStorageForGroupContainerIdentifier_1 = objc
      .registerName("sharedCookieStorageForGroupContainerIdentifier:");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_850(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> identifier,
  ) {
    return __objc_msgSend_850(obj, sel, identifier);
  }

  late final __objc_msgSend_850Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_850 =
      __objc_msgSend_850Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_cookies1 = objc.registerName("cookies");
  late final _class_NSHTTPCookie1 = objc.getClass("NSHTTPCookie");
  late final _sel_initWithProperties_1 = objc.registerName(
    "initWithProperties:",
  );
  instancetype _objc_msgSend_851(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> properties,
  ) {
    return __objc_msgSend_851(obj, sel, properties);
  }

  late final __objc_msgSend_851Ptr = _lookup<
    ffi.NativeFunction<
      instancetype Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_851 =
      __objc_msgSend_851Ptr
          .asFunction<
            instancetype Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_cookieWithProperties_1 = objc.registerName(
    "cookieWithProperties:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_852(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> properties,
  ) {
    return __objc_msgSend_852(obj, sel, properties);
  }

  late final __objc_msgSend_852Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_852 =
      __objc_msgSend_852Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_requestHeaderFieldsWithCookies_1 = objc.registerName(
    "requestHeaderFieldsWithCookies:",
  );
  late final _sel_cookiesWithResponseHeaderFields_forURL_1 = objc.registerName(
    "cookiesWithResponseHeaderFields:forURL:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_853(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> headerFields,
    ffi.Pointer<objc.ObjCObject> URL,
  ) {
    return __objc_msgSend_853(obj, sel, headerFields, URL);
  }

  late final __objc_msgSend_853Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_853 =
      __objc_msgSend_853Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_properties1 = objc.registerName("properties");
  late final _sel_value1 = objc.registerName("value");
  late final _sel_expiresDate1 = objc.registerName("expiresDate");
  late final _sel_isSessionOnly1 = objc.registerName("isSessionOnly");
  late final _sel_isSecure1 = objc.registerName("isSecure");
  late final _sel_isHTTPOnly1 = objc.registerName("isHTTPOnly");
  late final _sel_comment1 = objc.registerName("comment");
  late final _sel_commentURL1 = objc.registerName("commentURL");
  late final _sel_portList1 = objc.registerName("portList");
  late final _sel_sameSitePolicy1 = objc.registerName("sameSitePolicy");
  late final _sel_setCookie_1 = objc.registerName("setCookie:");
  void _objc_msgSend_854(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> cookie,
  ) {
    return __objc_msgSend_854(obj, sel, cookie);
  }

  late final __objc_msgSend_854Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_854 =
      __objc_msgSend_854Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_deleteCookie_1 = objc.registerName("deleteCookie:");
  late final _sel_removeCookiesSinceDate_1 = objc.registerName(
    "removeCookiesSinceDate:",
  );
  late final _sel_cookiesForURL_1 = objc.registerName("cookiesForURL:");
  late final _sel_setCookies_forURL_mainDocumentURL_1 = objc.registerName(
    "setCookies:forURL:mainDocumentURL:",
  );
  void _objc_msgSend_855(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> cookies,
    ffi.Pointer<objc.ObjCObject> URL,
    ffi.Pointer<objc.ObjCObject> mainDocumentURL,
  ) {
    return __objc_msgSend_855(obj, sel, cookies, URL, mainDocumentURL);
  }

  late final __objc_msgSend_855Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_855 =
      __objc_msgSend_855Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_cookieAcceptPolicy1 = objc.registerName("cookieAcceptPolicy");
  int _objc_msgSend_856(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_856(obj, sel);
  }

  late final __objc_msgSend_856Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Int32 Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_856 =
      __objc_msgSend_856Ptr
          .asFunction<
            int Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_setCookieAcceptPolicy_1 = objc.registerName(
    "setCookieAcceptPolicy:",
  );
  void _objc_msgSend_857(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int value,
  ) {
    return __objc_msgSend_857(obj, sel, value);
  }

  late final __objc_msgSend_857Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Int32,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_857 =
      __objc_msgSend_857Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
            )
          >();

  late final _sel_sortedCookiesUsingDescriptors_1 = objc.registerName(
    "sortedCookiesUsingDescriptors:",
  );
  late final _class_NSURLSessionTask1 = objc.getClass("NSURLSessionTask");
  late final _sel_taskIdentifier1 = objc.registerName("taskIdentifier");
  late final _class_NSURLRequest1 = objc.getClass("NSURLRequest");
  late final _sel_requestWithURL_1 = objc.registerName("requestWithURL:");
  late final _sel_supportsSecureCoding1 = objc.registerName(
    "supportsSecureCoding",
  );
  late final _sel_requestWithURL_cachePolicy_timeoutInterval_1 = objc
      .registerName("requestWithURL:cachePolicy:timeoutInterval:");
  instancetype _objc_msgSend_858(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> URL,
    int cachePolicy,
    double timeoutInterval,
  ) {
    return __objc_msgSend_858(obj, sel, URL, cachePolicy, timeoutInterval);
  }

  late final __objc_msgSend_858Ptr = _lookup<
    ffi.NativeFunction<
      instancetype Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Int32,
        ffi.Double,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_858 =
      __objc_msgSend_858Ptr
          .asFunction<
            instancetype Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              int,
              double,
            )
          >();

  late final _sel_initWithURL_cachePolicy_timeoutInterval_1 = objc.registerName(
    "initWithURL:cachePolicy:timeoutInterval:",
  );
  late final _sel_URL1 = objc.registerName("URL");
  late final _sel_cachePolicy1 = objc.registerName("cachePolicy");
  int _objc_msgSend_859(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_859(obj, sel);
  }

  late final __objc_msgSend_859Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Int32 Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_859 =
      __objc_msgSend_859Ptr
          .asFunction<
            int Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_timeoutInterval1 = objc.registerName("timeoutInterval");
  late final _sel_mainDocumentURL1 = objc.registerName("mainDocumentURL");
  late final _sel_networkServiceType1 = objc.registerName("networkServiceType");
  int _objc_msgSend_860(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_860(obj, sel);
  }

  late final __objc_msgSend_860Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Int32 Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_860 =
      __objc_msgSend_860Ptr
          .asFunction<
            int Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_allowsCellularAccess1 = objc.registerName(
    "allowsCellularAccess",
  );
  late final _sel_allowsExpensiveNetworkAccess1 = objc.registerName(
    "allowsExpensiveNetworkAccess",
  );
  late final _sel_allowsConstrainedNetworkAccess1 = objc.registerName(
    "allowsConstrainedNetworkAccess",
  );
  late final _sel_assumesHTTP3Capable1 = objc.registerName(
    "assumesHTTP3Capable",
  );
  late final _sel_attribution1 = objc.registerName("attribution");
  int _objc_msgSend_861(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_861(obj, sel);
  }

  late final __objc_msgSend_861Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Int32 Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_861 =
      __objc_msgSend_861Ptr
          .asFunction<
            int Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_requiresDNSSECValidation1 = objc.registerName(
    "requiresDNSSECValidation",
  );
  late final _sel_HTTPMethod1 = objc.registerName("HTTPMethod");
  late final _sel_allHTTPHeaderFields1 = objc.registerName(
    "allHTTPHeaderFields",
  );
  late final _sel_valueForHTTPHeaderField_1 = objc.registerName(
    "valueForHTTPHeaderField:",
  );
  late final _sel_HTTPBody1 = objc.registerName("HTTPBody");
  late final _class_NSInputStream1 = objc.getClass("NSInputStream");
  late final _class_NSStream1 = objc.getClass("NSStream");
  late final _sel_open1 = objc.registerName("open");
  late final _sel_close1 = objc.registerName("close");
  bool _objc_msgSend_862(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> property,
    ffi.Pointer<objc.ObjCObject> key,
  ) {
    return __objc_msgSend_862(obj, sel, property, key);
  }

  late final __objc_msgSend_862Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Bool Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_862 =
      __objc_msgSend_862Ptr
          .asFunction<
            bool Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_streamStatus1 = objc.registerName("streamStatus");
  int _objc_msgSend_863(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_863(obj, sel);
  }

  late final __objc_msgSend_863Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Int32 Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_863 =
      __objc_msgSend_863Ptr
          .asFunction<
            int Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_streamError1 = objc.registerName("streamError");
  late final _class_NSOutputStream1 = objc.getClass("NSOutputStream");
  late final _sel_write_maxLength_1 = objc.registerName("write:maxLength:");
  int _objc_msgSend_864(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<ffi.Uint8> buffer,
    int len,
  ) {
    return __objc_msgSend_864(obj, sel, buffer, len);
  }

  late final __objc_msgSend_864Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Long Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<ffi.Uint8>,
        ffi.UnsignedLong,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_864 =
      __objc_msgSend_864Ptr
          .asFunction<
            int Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<ffi.Uint8>,
              int,
            )
          >();

  late final _sel_hasSpaceAvailable1 = objc.registerName("hasSpaceAvailable");
  late final _sel_initToMemory1 = objc.registerName("initToMemory");
  late final _sel_initToBuffer_capacity_1 = objc.registerName(
    "initToBuffer:capacity:",
  );
  instancetype _objc_msgSend_865(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<ffi.Uint8> buffer,
    int capacity,
  ) {
    return __objc_msgSend_865(obj, sel, buffer, capacity);
  }

  late final __objc_msgSend_865Ptr = _lookup<
    ffi.NativeFunction<
      instancetype Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<ffi.Uint8>,
        ffi.UnsignedLong,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_865 =
      __objc_msgSend_865Ptr
          .asFunction<
            instancetype Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<ffi.Uint8>,
              int,
            )
          >();

  late final _sel_initWithURL_append_1 = objc.registerName(
    "initWithURL:append:",
  );
  instancetype _objc_msgSend_866(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> url,
    bool shouldAppend,
  ) {
    return __objc_msgSend_866(obj, sel, url, shouldAppend);
  }

  late final __objc_msgSend_866Ptr = _lookup<
    ffi.NativeFunction<
      instancetype Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Bool,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_866 =
      __objc_msgSend_866Ptr
          .asFunction<
            instancetype Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              bool,
            )
          >();

  late final _sel_initToFileAtPath_append_1 = objc.registerName(
    "initToFileAtPath:append:",
  );
  late final _sel_outputStreamToMemory1 = objc.registerName(
    "outputStreamToMemory",
  );
  late final _sel_outputStreamToBuffer_capacity_1 = objc.registerName(
    "outputStreamToBuffer:capacity:",
  );
  late final _sel_outputStreamToFileAtPath_append_1 = objc.registerName(
    "outputStreamToFileAtPath:append:",
  );
  late final _sel_outputStreamWithURL_append_1 = objc.registerName(
    "outputStreamWithURL:append:",
  );
  late final _sel_getStreamsToHostWithName_port_inputStream_outputStream_1 =
      objc.registerName(
        "getStreamsToHostWithName:port:inputStream:outputStream:",
      );
  void _objc_msgSend_867(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> hostname,
    int port,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> inputStream,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outputStream,
  ) {
    return __objc_msgSend_867(
      obj,
      sel,
      hostname,
      port,
      inputStream,
      outputStream,
    );
  }

  late final __objc_msgSend_867Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Long,
        ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
        ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_867 =
      __objc_msgSend_867Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              int,
              ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
              ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
            )
          >();

  late final _class_NSHost1 = objc.getClass("NSHost");
  late final _sel_currentHost1 = objc.registerName("currentHost");
  late final _sel_hostWithName_1 = objc.registerName("hostWithName:");
  instancetype _objc_msgSend_868(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> name,
  ) {
    return __objc_msgSend_868(obj, sel, name);
  }

  late final __objc_msgSend_868Ptr = _lookup<
    ffi.NativeFunction<
      instancetype Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_868 =
      __objc_msgSend_868Ptr
          .asFunction<
            instancetype Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_hostWithAddress_1 = objc.registerName("hostWithAddress:");
  late final _sel_isEqualToHost_1 = objc.registerName("isEqualToHost:");
  bool _objc_msgSend_869(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> aHost,
  ) {
    return __objc_msgSend_869(obj, sel, aHost);
  }

  late final __objc_msgSend_869Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Bool Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_869 =
      __objc_msgSend_869Ptr
          .asFunction<
            bool Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_names1 = objc.registerName("names");
  late final _sel_address1 = objc.registerName("address");
  late final _sel_addresses1 = objc.registerName("addresses");
  late final _sel_localizedName1 = objc.registerName("localizedName");
  late final _sel_setHostCacheEnabled_1 = objc.registerName(
    "setHostCacheEnabled:",
  );
  void _objc_msgSend_870(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    bool flag,
  ) {
    return __objc_msgSend_870(obj, sel, flag);
  }

  late final __objc_msgSend_870Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Bool,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_870 =
      __objc_msgSend_870Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              bool,
            )
          >();

  late final _sel_isHostCacheEnabled1 = objc.registerName("isHostCacheEnabled");
  late final _sel_flushHostCache1 = objc.registerName("flushHostCache");
  late final _sel_getStreamsToHost_port_inputStream_outputStream_1 = objc
      .registerName("getStreamsToHost:port:inputStream:outputStream:");
  void _objc_msgSend_871(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> host,
    int port,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> inputStream,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outputStream,
  ) {
    return __objc_msgSend_871(obj, sel, host, port, inputStream, outputStream);
  }

  late final __objc_msgSend_871Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Long,
        ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
        ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_871 =
      __objc_msgSend_871Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              int,
              ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
              ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
            )
          >();

  late final _sel_getBoundStreamsWithBufferSize_inputStream_outputStream_1 =
      objc.registerName(
        "getBoundStreamsWithBufferSize:inputStream:outputStream:",
      );
  void _objc_msgSend_872(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int bufferSize,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> inputStream,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outputStream,
  ) {
    return __objc_msgSend_872(obj, sel, bufferSize, inputStream, outputStream);
  }

  late final __objc_msgSend_872Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.UnsignedLong,
        ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
        ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_872 =
      __objc_msgSend_872Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
              ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
              ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
            )
          >();

  late final _sel_read_maxLength_1 = objc.registerName("read:maxLength:");
  late final _sel_getBuffer_length_1 = objc.registerName("getBuffer:length:");
  bool _objc_msgSend_873(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<ffi.Pointer<ffi.Uint8>> buffer,
    ffi.Pointer<ffi.UnsignedLong> len,
  ) {
    return __objc_msgSend_873(obj, sel, buffer, len);
  }

  late final __objc_msgSend_873Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Bool Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
        ffi.Pointer<ffi.UnsignedLong>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_873 =
      __objc_msgSend_873Ptr
          .asFunction<
            bool Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
              ffi.Pointer<ffi.UnsignedLong>,
            )
          >();

  late final _sel_hasBytesAvailable1 = objc.registerName("hasBytesAvailable");
  late final _sel_initWithFileAtPath_1 = objc.registerName(
    "initWithFileAtPath:",
  );
  late final _sel_inputStreamWithData_1 = objc.registerName(
    "inputStreamWithData:",
  );
  instancetype _objc_msgSend_874(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> data,
  ) {
    return __objc_msgSend_874(obj, sel, data);
  }

  late final __objc_msgSend_874Ptr = _lookup<
    ffi.NativeFunction<
      instancetype Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_874 =
      __objc_msgSend_874Ptr
          .asFunction<
            instancetype Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_inputStreamWithFileAtPath_1 = objc.registerName(
    "inputStreamWithFileAtPath:",
  );
  late final _sel_inputStreamWithURL_1 = objc.registerName(
    "inputStreamWithURL:",
  );
  late final _sel_HTTPBodyStream1 = objc.registerName("HTTPBodyStream");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_875(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_875(obj, sel);
  }

  late final __objc_msgSend_875Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_875 =
      __objc_msgSend_875Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_HTTPShouldHandleCookies1 = objc.registerName(
    "HTTPShouldHandleCookies",
  );
  late final _sel_HTTPShouldUsePipelining1 = objc.registerName(
    "HTTPShouldUsePipelining",
  );
  late final _sel_originalRequest1 = objc.registerName("originalRequest");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_876(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_876(obj, sel);
  }

  late final __objc_msgSend_876Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_876 =
      __objc_msgSend_876Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_currentRequest1 = objc.registerName("currentRequest");
  late final _class_NSURLResponse1 = objc.getClass("NSURLResponse");
  late final _sel_initWithURL_MIMEType_expectedContentLength_textEncodingName_1 =
      objc.registerName(
        "initWithURL:MIMEType:expectedContentLength:textEncodingName:",
      );
  instancetype _objc_msgSend_877(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> URL,
    ffi.Pointer<objc.ObjCObject> MIMEType,
    int length,
    ffi.Pointer<objc.ObjCObject> name,
  ) {
    return __objc_msgSend_877(obj, sel, URL, MIMEType, length, name);
  }

  late final __objc_msgSend_877Ptr = _lookup<
    ffi.NativeFunction<
      instancetype Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Long,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_877 =
      __objc_msgSend_877Ptr
          .asFunction<
            instancetype Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
              int,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_MIMEType1 = objc.registerName("MIMEType");
  late final _sel_expectedContentLength1 = objc.registerName(
    "expectedContentLength",
  );
  late final _sel_textEncodingName1 = objc.registerName("textEncodingName");
  late final _sel_suggestedFilename1 = objc.registerName("suggestedFilename");
  late final _sel_response1 = objc.registerName("response");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_878(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_878(obj, sel);
  }

  late final __objc_msgSend_878Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_878 =
      __objc_msgSend_878Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_progress1 = objc.registerName("progress");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_879(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_879(obj, sel);
  }

  late final __objc_msgSend_879Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_879 =
      __objc_msgSend_879Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_earliestBeginDate1 = objc.registerName("earliestBeginDate");
  late final _sel_setEarliestBeginDate_1 = objc.registerName(
    "setEarliestBeginDate:",
  );
  late final _sel_countOfBytesClientExpectsToSend1 = objc.registerName(
    "countOfBytesClientExpectsToSend",
  );
  late final _sel_setCountOfBytesClientExpectsToSend_1 = objc.registerName(
    "setCountOfBytesClientExpectsToSend:",
  );
  late final _sel_countOfBytesClientExpectsToReceive1 = objc.registerName(
    "countOfBytesClientExpectsToReceive",
  );
  late final _sel_setCountOfBytesClientExpectsToReceive_1 = objc.registerName(
    "setCountOfBytesClientExpectsToReceive:",
  );
  late final _sel_countOfBytesSent1 = objc.registerName("countOfBytesSent");
  late final _sel_countOfBytesReceived1 = objc.registerName(
    "countOfBytesReceived",
  );
  late final _sel_countOfBytesExpectedToSend1 = objc.registerName(
    "countOfBytesExpectedToSend",
  );
  late final _sel_countOfBytesExpectedToReceive1 = objc.registerName(
    "countOfBytesExpectedToReceive",
  );
  late final _sel_taskDescription1 = objc.registerName("taskDescription");
  late final _sel_setTaskDescription_1 = objc.registerName(
    "setTaskDescription:",
  );
  late final _sel_state1 = objc.registerName("state");
  int _objc_msgSend_880(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_880(obj, sel);
  }

  late final __objc_msgSend_880Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Int32 Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_880 =
      __objc_msgSend_880Ptr
          .asFunction<
            int Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_suspend1 = objc.registerName("suspend");
  late final _sel_priority1 = objc.registerName("priority");
  late final _sel_setPriority_1 = objc.registerName("setPriority:");
  void _objc_msgSend_881(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    double value,
  ) {
    return __objc_msgSend_881(obj, sel, value);
  }

  late final __objc_msgSend_881Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Float,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_881 =
      __objc_msgSend_881Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              double,
            )
          >();

  late final _sel_prefersIncrementalDelivery1 = objc.registerName(
    "prefersIncrementalDelivery",
  );
  late final _sel_setPrefersIncrementalDelivery_1 = objc.registerName(
    "setPrefersIncrementalDelivery:",
  );
  late final _sel_storeCookies_forTask_1 = objc.registerName(
    "storeCookies:forTask:",
  );
  void _objc_msgSend_882(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> cookies,
    ffi.Pointer<objc.ObjCObject> task,
  ) {
    return __objc_msgSend_882(obj, sel, cookies, task);
  }

  late final __objc_msgSend_882Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_882 =
      __objc_msgSend_882Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_getCookiesForTask_completionHandler_1 = objc.registerName(
    "getCookiesForTask:completionHandler:",
  );
  void _objc_msgSend_883(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> task,
    ffi.Pointer<objc.ObjCBlock> completionHandler,
  ) {
    return __objc_msgSend_883(obj, sel, task, completionHandler);
  }

  late final __objc_msgSend_883Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCBlock>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_883 =
      __objc_msgSend_883Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCBlock>,
            )
          >();

  late final _class_NSIndexPath1 = objc.getClass("NSIndexPath");
  late final _sel_indexPathWithIndex_1 = objc.registerName(
    "indexPathWithIndex:",
  );
  late final _sel_indexPathWithIndexes_length_1 = objc.registerName(
    "indexPathWithIndexes:length:",
  );
  instancetype _objc_msgSend_884(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<ffi.UnsignedLong> indexes,
    int length,
  ) {
    return __objc_msgSend_884(obj, sel, indexes, length);
  }

  late final __objc_msgSend_884Ptr = _lookup<
    ffi.NativeFunction<
      instancetype Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<ffi.UnsignedLong>,
        ffi.UnsignedLong,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_884 =
      __objc_msgSend_884Ptr
          .asFunction<
            instancetype Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<ffi.UnsignedLong>,
              int,
            )
          >();

  late final _sel_initWithIndexes_length_1 = objc.registerName(
    "initWithIndexes:length:",
  );
  late final _sel_indexPathByAddingIndex_1 = objc.registerName(
    "indexPathByAddingIndex:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_885(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int index,
  ) {
    return __objc_msgSend_885(obj, sel, index);
  }

  late final __objc_msgSend_885Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.UnsignedLong,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_885 =
      __objc_msgSend_885Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
            )
          >();

  late final _sel_indexPathByRemovingLastIndex1 = objc.registerName(
    "indexPathByRemovingLastIndex",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_886(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_886(obj, sel);
  }

  late final __objc_msgSend_886Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_886 =
      __objc_msgSend_886Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_indexAtPosition_1 = objc.registerName("indexAtPosition:");
  late final _sel_getIndexes_range_1 = objc.registerName("getIndexes:range:");
  void _objc_msgSend_887(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<ffi.UnsignedLong> indexes,
    _NSRange positionRange,
  ) {
    return __objc_msgSend_887(obj, sel, indexes, positionRange);
  }

  late final __objc_msgSend_887Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<ffi.UnsignedLong>,
        _NSRange,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_887 =
      __objc_msgSend_887Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<ffi.UnsignedLong>,
              _NSRange,
            )
          >();

  int _objc_msgSend_888(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> otherObject,
  ) {
    return __objc_msgSend_888(obj, sel, otherObject);
  }

  late final __objc_msgSend_888Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Int32 Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_888 =
      __objc_msgSend_888Ptr
          .asFunction<
            int Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_getIndexes_1 = objc.registerName("getIndexes:");
  void _objc_msgSend_889(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<ffi.UnsignedLong> indexes,
  ) {
    return __objc_msgSend_889(obj, sel, indexes);
  }

  late final __objc_msgSend_889Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<ffi.UnsignedLong>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_889 =
      __objc_msgSend_889Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<ffi.UnsignedLong>,
            )
          >();

  late final _class_NSInflectionRule1 = objc.getClass("NSInflectionRule");
  late final _sel_automaticRule1 = objc.registerName("automaticRule");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_890(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_890(obj, sel);
  }

  late final __objc_msgSend_890Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_890 =
      __objc_msgSend_890Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_canInflectLanguage_1 = objc.registerName(
    "canInflectLanguage:",
  );
  late final _sel_canInflectPreferredLocalization1 = objc.registerName(
    "canInflectPreferredLocalization",
  );
  late final _class_NSMorphology1 = objc.getClass("NSMorphology");
  late final _sel_grammaticalGender1 = objc.registerName("grammaticalGender");
  int _objc_msgSend_891(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_891(obj, sel);
  }

  late final __objc_msgSend_891Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Int32 Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_891 =
      __objc_msgSend_891Ptr
          .asFunction<
            int Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_setGrammaticalGender_1 = objc.registerName(
    "setGrammaticalGender:",
  );
  void _objc_msgSend_892(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int value,
  ) {
    return __objc_msgSend_892(obj, sel, value);
  }

  late final __objc_msgSend_892Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Int32,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_892 =
      __objc_msgSend_892Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
            )
          >();

  late final _sel_partOfSpeech1 = objc.registerName("partOfSpeech");
  int _objc_msgSend_893(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_893(obj, sel);
  }

  late final __objc_msgSend_893Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Int32 Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_893 =
      __objc_msgSend_893Ptr
          .asFunction<
            int Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_setPartOfSpeech_1 = objc.registerName("setPartOfSpeech:");
  void _objc_msgSend_894(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int value,
  ) {
    return __objc_msgSend_894(obj, sel, value);
  }

  late final __objc_msgSend_894Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Int32,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_894 =
      __objc_msgSend_894Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
            )
          >();

  late final _sel_number1 = objc.registerName("number");
  int _objc_msgSend_895(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_895(obj, sel);
  }

  late final __objc_msgSend_895Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Int32 Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_895 =
      __objc_msgSend_895Ptr
          .asFunction<
            int Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_setNumber_1 = objc.registerName("setNumber:");
  void _objc_msgSend_896(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int value,
  ) {
    return __objc_msgSend_896(obj, sel, value);
  }

  late final __objc_msgSend_896Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Int32,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_896 =
      __objc_msgSend_896Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
            )
          >();

  late final _sel_grammaticalCase1 = objc.registerName("grammaticalCase");
  int _objc_msgSend_897(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_897(obj, sel);
  }

  late final __objc_msgSend_897Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Int32 Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_897 =
      __objc_msgSend_897Ptr
          .asFunction<
            int Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_setGrammaticalCase_1 = objc.registerName(
    "setGrammaticalCase:",
  );
  void _objc_msgSend_898(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int value,
  ) {
    return __objc_msgSend_898(obj, sel, value);
  }

  late final __objc_msgSend_898Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Int32,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_898 =
      __objc_msgSend_898Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
            )
          >();

  late final _sel_determination1 = objc.registerName("determination");
  int _objc_msgSend_899(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_899(obj, sel);
  }

  late final __objc_msgSend_899Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Int32 Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_899 =
      __objc_msgSend_899Ptr
          .asFunction<
            int Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_setDetermination_1 = objc.registerName("setDetermination:");
  void _objc_msgSend_900(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int value,
  ) {
    return __objc_msgSend_900(obj, sel, value);
  }

  late final __objc_msgSend_900Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Int32,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_900 =
      __objc_msgSend_900Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
            )
          >();

  late final _sel_grammaticalPerson1 = objc.registerName("grammaticalPerson");
  int _objc_msgSend_901(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_901(obj, sel);
  }

  late final __objc_msgSend_901Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Int32 Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_901 =
      __objc_msgSend_901Ptr
          .asFunction<
            int Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_setGrammaticalPerson_1 = objc.registerName(
    "setGrammaticalPerson:",
  );
  void _objc_msgSend_902(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int value,
  ) {
    return __objc_msgSend_902(obj, sel, value);
  }

  late final __objc_msgSend_902Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Int32,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_902 =
      __objc_msgSend_902Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
            )
          >();

  late final _sel_pronounType1 = objc.registerName("pronounType");
  int _objc_msgSend_903(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_903(obj, sel);
  }

  late final __objc_msgSend_903Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Int32 Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_903 =
      __objc_msgSend_903Ptr
          .asFunction<
            int Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_setPronounType_1 = objc.registerName("setPronounType:");
  void _objc_msgSend_904(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int value,
  ) {
    return __objc_msgSend_904(obj, sel, value);
  }

  late final __objc_msgSend_904Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Int32,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_904 =
      __objc_msgSend_904Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
            )
          >();

  late final _sel_definiteness1 = objc.registerName("definiteness");
  int _objc_msgSend_905(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_905(obj, sel);
  }

  late final __objc_msgSend_905Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Int32 Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_905 =
      __objc_msgSend_905Ptr
          .asFunction<
            int Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_setDefiniteness_1 = objc.registerName("setDefiniteness:");
  void _objc_msgSend_906(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int value,
  ) {
    return __objc_msgSend_906(obj, sel, value);
  }

  late final __objc_msgSend_906Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Int32,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_906 =
      __objc_msgSend_906Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
            )
          >();

  late final _class_NSMorphologyCustomPronoun1 = objc.getClass(
    "NSMorphologyCustomPronoun",
  );
  late final _sel_isSupportedForLanguage_1 = objc.registerName(
    "isSupportedForLanguage:",
  );
  late final _sel_requiredKeysForLanguage_1 = objc.registerName(
    "requiredKeysForLanguage:",
  );
  late final _sel_subjectForm1 = objc.registerName("subjectForm");
  late final _sel_setSubjectForm_1 = objc.registerName("setSubjectForm:");
  late final _sel_objectForm1 = objc.registerName("objectForm");
  late final _sel_setObjectForm_1 = objc.registerName("setObjectForm:");
  late final _sel_possessiveForm1 = objc.registerName("possessiveForm");
  late final _sel_setPossessiveForm_1 = objc.registerName("setPossessiveForm:");
  late final _sel_possessiveAdjectiveForm1 = objc.registerName(
    "possessiveAdjectiveForm",
  );
  late final _sel_setPossessiveAdjectiveForm_1 = objc.registerName(
    "setPossessiveAdjectiveForm:",
  );
  late final _sel_reflexiveForm1 = objc.registerName("reflexiveForm");
  late final _sel_setReflexiveForm_1 = objc.registerName("setReflexiveForm:");
  late final _sel_customPronounForLanguage_1 = objc.registerName(
    "customPronounForLanguage:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_907(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> language,
  ) {
    return __objc_msgSend_907(obj, sel, language);
  }

  late final __objc_msgSend_907Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_907 =
      __objc_msgSend_907Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_setCustomPronoun_forLanguage_error_1 = objc.registerName(
    "setCustomPronoun:forLanguage:error:",
  );
  bool _objc_msgSend_908(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> features,
    ffi.Pointer<objc.ObjCObject> language,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    return __objc_msgSend_908(obj, sel, features, language, error);
  }

  late final __objc_msgSend_908Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Bool Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_908 =
      __objc_msgSend_908Ptr
          .asFunction<
            bool Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
            )
          >();

  late final _sel_isUnspecified1 = objc.registerName("isUnspecified");
  late final _sel_userMorphology1 = objc.registerName("userMorphology");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_909(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_909(obj, sel);
  }

  late final __objc_msgSend_909Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_909 =
      __objc_msgSend_909Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _class_NSOperationQueue1 = objc.getClass("NSOperationQueue");
  late final _class_NSOperation1 = objc.getClass("NSOperation");
  late final _sel_isConcurrent1 = objc.registerName("isConcurrent");
  late final _sel_isAsynchronous1 = objc.registerName("isAsynchronous");
  late final _sel_isReady1 = objc.registerName("isReady");
  late final _sel_addDependency_1 = objc.registerName("addDependency:");
  void _objc_msgSend_910(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> op,
  ) {
    return __objc_msgSend_910(obj, sel, op);
  }

  late final __objc_msgSend_910Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_910 =
      __objc_msgSend_910Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_removeDependency_1 = objc.registerName("removeDependency:");
  late final _sel_dependencies1 = objc.registerName("dependencies");
  late final _sel_queuePriority1 = objc.registerName("queuePriority");
  int _objc_msgSend_911(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_911(obj, sel);
  }

  late final __objc_msgSend_911Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Int32 Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_911 =
      __objc_msgSend_911Ptr
          .asFunction<
            int Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_setQueuePriority_1 = objc.registerName("setQueuePriority:");
  void _objc_msgSend_912(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int value,
  ) {
    return __objc_msgSend_912(obj, sel, value);
  }

  late final __objc_msgSend_912Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Int32,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_912 =
      __objc_msgSend_912Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
            )
          >();

  late final _sel_completionBlock1 = objc.registerName("completionBlock");
  late final _sel_setCompletionBlock_1 = objc.registerName(
    "setCompletionBlock:",
  );
  late final _sel_waitUntilFinished1 = objc.registerName("waitUntilFinished");
  late final _sel_addOperation_1 = objc.registerName("addOperation:");
  late final _sel_addOperations_waitUntilFinished_1 = objc.registerName(
    "addOperations:waitUntilFinished:",
  );
  void _objc_msgSend_913(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> ops,
    bool wait,
  ) {
    return __objc_msgSend_913(obj, sel, ops, wait);
  }

  late final __objc_msgSend_913Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Bool,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_913 =
      __objc_msgSend_913Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              bool,
            )
          >();

  late final _sel_addOperationWithBlock_1 = objc.registerName(
    "addOperationWithBlock:",
  );
  late final _sel_addBarrierBlock_1 = objc.registerName("addBarrierBlock:");
  late final _sel_maxConcurrentOperationCount1 = objc.registerName(
    "maxConcurrentOperationCount",
  );
  late final _sel_setMaxConcurrentOperationCount_1 = objc.registerName(
    "setMaxConcurrentOperationCount:",
  );
  late final _sel_isSuspended1 = objc.registerName("isSuspended");
  late final _sel_setSuspended_1 = objc.registerName("setSuspended:");
  late final _sel_underlyingQueue1 = objc.registerName("underlyingQueue");
  ffi.Pointer<dispatch_queue_s> _objc_msgSend_914(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_914(obj, sel);
  }

  late final __objc_msgSend_914Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<dispatch_queue_s> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_914 =
      __objc_msgSend_914Ptr
          .asFunction<
            ffi.Pointer<dispatch_queue_s> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_setUnderlyingQueue_1 = objc.registerName(
    "setUnderlyingQueue:",
  );
  void _objc_msgSend_915(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<dispatch_queue_s> value,
  ) {
    return __objc_msgSend_915(obj, sel, value);
  }

  late final __objc_msgSend_915Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<dispatch_queue_s>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_915 =
      __objc_msgSend_915Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<dispatch_queue_s>,
            )
          >();

  late final _sel_cancelAllOperations1 = objc.registerName(
    "cancelAllOperations",
  );
  late final _sel_waitUntilAllOperationsAreFinished1 = objc.registerName(
    "waitUntilAllOperationsAreFinished",
  );
  late final _sel_currentQueue1 = objc.registerName("currentQueue");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_916(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_916(obj, sel);
  }

  late final __objc_msgSend_916Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_916 =
      __objc_msgSend_916Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_mainQueue1 = objc.registerName("mainQueue");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_917(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_917(obj, sel);
  }

  late final __objc_msgSend_917Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_917 =
      __objc_msgSend_917Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_operations1 = objc.registerName("operations");
  late final _sel_operationCount1 = objc.registerName("operationCount");
  late final _class_NSPointerArray1 = objc.getClass("NSPointerArray");
  late final _sel_initWithOptions_1 = objc.registerName("initWithOptions:");
  instancetype _objc_msgSend_918(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int options,
  ) {
    return __objc_msgSend_918(obj, sel, options);
  }

  late final __objc_msgSend_918Ptr = _lookup<
    ffi.NativeFunction<
      instancetype Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Int32,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_918 =
      __objc_msgSend_918Ptr
          .asFunction<
            instancetype Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
            )
          >();

  late final _class_NSPointerFunctions1 = objc.getClass("NSPointerFunctions");
  late final _sel_pointerFunctionsWithOptions_1 = objc.registerName(
    "pointerFunctionsWithOptions:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_919(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int options,
  ) {
    return __objc_msgSend_919(obj, sel, options);
  }

  late final __objc_msgSend_919Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Int32,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_919 =
      __objc_msgSend_919Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
            )
          >();

  late final _sel_hashFunction1 = objc.registerName("hashFunction");
  ffi.Pointer<
    ffi.NativeFunction<
      ffi.UnsignedLong Function(
        ffi.Pointer<ffi.Void>,
        ffi.Pointer<
          ffi.NativeFunction<ffi.UnsignedLong Function(ffi.Pointer<ffi.Void>)>
        >,
      )
    >
  >
  _objc_msgSend_920(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_920(obj, sel);
  }

  late final __objc_msgSend_920Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<
        ffi.NativeFunction<
          ffi.UnsignedLong Function(
            ffi.Pointer<ffi.Void>,
            ffi.Pointer<
              ffi.NativeFunction<
                ffi.UnsignedLong Function(ffi.Pointer<ffi.Void>)
              >
            >,
          )
        >
      >
      Function(ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)
    >
  >('objc_msgSend');
  late final __objc_msgSend_920 =
      __objc_msgSend_920Ptr
          .asFunction<
            ffi.Pointer<
              ffi.NativeFunction<
                ffi.UnsignedLong Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<
                    ffi.NativeFunction<
                      ffi.UnsignedLong Function(ffi.Pointer<ffi.Void>)
                    >
                  >,
                )
              >
            >
            Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_setHashFunction_1 = objc.registerName("setHashFunction:");
  void _objc_msgSend_921(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<
      ffi.NativeFunction<
        ffi.UnsignedLong Function(
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<
            ffi.NativeFunction<ffi.UnsignedLong Function(ffi.Pointer<ffi.Void>)>
          >,
        )
      >
    > value,
  ) {
    return __objc_msgSend_921(obj, sel, value);
  }

  late final __objc_msgSend_921Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<
          ffi.NativeFunction<
            ffi.UnsignedLong Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<
                ffi.NativeFunction<
                  ffi.UnsignedLong Function(ffi.Pointer<ffi.Void>)
                >
              >,
            )
          >
        >,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_921 =
      __objc_msgSend_921Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<
                ffi.NativeFunction<
                  ffi.UnsignedLong Function(
                    ffi.Pointer<ffi.Void>,
                    ffi.Pointer<
                      ffi.NativeFunction<
                        ffi.UnsignedLong Function(ffi.Pointer<ffi.Void>)
                      >
                    >,
                  )
                >
              >,
            )
          >();

  late final _sel_isEqualFunction1 = objc.registerName("isEqualFunction");
  ffi.Pointer<
    ffi.NativeFunction<
      ffi.Bool Function(
        ffi.Pointer<ffi.Void>,
        ffi.Pointer<ffi.Void>,
        ffi.Pointer<
          ffi.NativeFunction<ffi.UnsignedLong Function(ffi.Pointer<ffi.Void>)>
        >,
      )
    >
  >
  _objc_msgSend_922(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_922(obj, sel);
  }

  late final __objc_msgSend_922Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<
        ffi.NativeFunction<
          ffi.Bool Function(
            ffi.Pointer<ffi.Void>,
            ffi.Pointer<ffi.Void>,
            ffi.Pointer<
              ffi.NativeFunction<
                ffi.UnsignedLong Function(ffi.Pointer<ffi.Void>)
              >
            >,
          )
        >
      >
      Function(ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)
    >
  >('objc_msgSend');
  late final __objc_msgSend_922 =
      __objc_msgSend_922Ptr
          .asFunction<
            ffi.Pointer<
              ffi.NativeFunction<
                ffi.Bool Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<
                    ffi.NativeFunction<
                      ffi.UnsignedLong Function(ffi.Pointer<ffi.Void>)
                    >
                  >,
                )
              >
            >
            Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_setIsEqualFunction_1 = objc.registerName(
    "setIsEqualFunction:",
  );
  void _objc_msgSend_923(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<
      ffi.NativeFunction<
        ffi.Bool Function(
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<
            ffi.NativeFunction<ffi.UnsignedLong Function(ffi.Pointer<ffi.Void>)>
          >,
        )
      >
    > value,
  ) {
    return __objc_msgSend_923(obj, sel, value);
  }

  late final __objc_msgSend_923Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<
          ffi.NativeFunction<
            ffi.Bool Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<
                ffi.NativeFunction<
                  ffi.UnsignedLong Function(ffi.Pointer<ffi.Void>)
                >
              >,
            )
          >
        >,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_923 =
      __objc_msgSend_923Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<
                ffi.NativeFunction<
                  ffi.Bool Function(
                    ffi.Pointer<ffi.Void>,
                    ffi.Pointer<ffi.Void>,
                    ffi.Pointer<
                      ffi.NativeFunction<
                        ffi.UnsignedLong Function(ffi.Pointer<ffi.Void>)
                      >
                    >,
                  )
                >
              >,
            )
          >();

  late final _sel_sizeFunction1 = objc.registerName("sizeFunction");
  ffi.Pointer<
    ffi.NativeFunction<ffi.UnsignedLong Function(ffi.Pointer<ffi.Void>)>
  >
  _objc_msgSend_924(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_924(obj, sel);
  }

  late final __objc_msgSend_924Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<
        ffi.NativeFunction<ffi.UnsignedLong Function(ffi.Pointer<ffi.Void>)>
      >
      Function(ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)
    >
  >('objc_msgSend');
  late final __objc_msgSend_924 =
      __objc_msgSend_924Ptr
          .asFunction<
            ffi.Pointer<
              ffi.NativeFunction<
                ffi.UnsignedLong Function(ffi.Pointer<ffi.Void>)
              >
            >
            Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_setSizeFunction_1 = objc.registerName("setSizeFunction:");
  void _objc_msgSend_925(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<
      ffi.NativeFunction<ffi.UnsignedLong Function(ffi.Pointer<ffi.Void>)>
    > value,
  ) {
    return __objc_msgSend_925(obj, sel, value);
  }

  late final __objc_msgSend_925Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<
          ffi.NativeFunction<ffi.UnsignedLong Function(ffi.Pointer<ffi.Void>)>
        >,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_925 =
      __objc_msgSend_925Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<
                ffi.NativeFunction<
                  ffi.UnsignedLong Function(ffi.Pointer<ffi.Void>)
                >
              >,
            )
          >();

  late final _sel_descriptionFunction1 = objc.registerName(
    "descriptionFunction",
  );
  ffi.Pointer<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<ffi.Void>)
    >
  >
  _objc_msgSend_926(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_926(obj, sel);
  }

  late final __objc_msgSend_926Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<
        ffi.NativeFunction<
          ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<ffi.Void>)
        >
      >
      Function(ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)
    >
  >('objc_msgSend');
  late final __objc_msgSend_926 =
      __objc_msgSend_926Ptr
          .asFunction<
            ffi.Pointer<
              ffi.NativeFunction<
                ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<ffi.Void>)
              >
            >
            Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_setDescriptionFunction_1 = objc.registerName(
    "setDescriptionFunction:",
  );
  void _objc_msgSend_927(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<
      ffi.NativeFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<ffi.Void>)
      >
    > value,
  ) {
    return __objc_msgSend_927(obj, sel, value);
  }

  late final __objc_msgSend_927Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<
          ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<ffi.Void>)
          >
        >,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_927 =
      __objc_msgSend_927Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<
                ffi.NativeFunction<
                  ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<ffi.Void>)
                >
              >,
            )
          >();

  late final _sel_relinquishFunction1 = objc.registerName("relinquishFunction");
  ffi.Pointer<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<ffi.Void>,
        ffi.Pointer<
          ffi.NativeFunction<ffi.UnsignedLong Function(ffi.Pointer<ffi.Void>)>
        >,
      )
    >
  >
  _objc_msgSend_928(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_928(obj, sel);
  }

  late final __objc_msgSend_928Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<
        ffi.NativeFunction<
          ffi.Void Function(
            ffi.Pointer<ffi.Void>,
            ffi.Pointer<
              ffi.NativeFunction<
                ffi.UnsignedLong Function(ffi.Pointer<ffi.Void>)
              >
            >,
          )
        >
      >
      Function(ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)
    >
  >('objc_msgSend');
  late final __objc_msgSend_928 =
      __objc_msgSend_928Ptr
          .asFunction<
            ffi.Pointer<
              ffi.NativeFunction<
                ffi.Void Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<
                    ffi.NativeFunction<
                      ffi.UnsignedLong Function(ffi.Pointer<ffi.Void>)
                    >
                  >,
                )
              >
            >
            Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_setRelinquishFunction_1 = objc.registerName(
    "setRelinquishFunction:",
  );
  void _objc_msgSend_929(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<
      ffi.NativeFunction<
        ffi.Void Function(
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<
            ffi.NativeFunction<ffi.UnsignedLong Function(ffi.Pointer<ffi.Void>)>
          >,
        )
      >
    > value,
  ) {
    return __objc_msgSend_929(obj, sel, value);
  }

  late final __objc_msgSend_929Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<
          ffi.NativeFunction<
            ffi.Void Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<
                ffi.NativeFunction<
                  ffi.UnsignedLong Function(ffi.Pointer<ffi.Void>)
                >
              >,
            )
          >
        >,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_929 =
      __objc_msgSend_929Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<
                ffi.NativeFunction<
                  ffi.Void Function(
                    ffi.Pointer<ffi.Void>,
                    ffi.Pointer<
                      ffi.NativeFunction<
                        ffi.UnsignedLong Function(ffi.Pointer<ffi.Void>)
                      >
                    >,
                  )
                >
              >,
            )
          >();

  late final _sel_acquireFunction1 = objc.registerName("acquireFunction");
  ffi.Pointer<
    ffi.NativeFunction<
      ffi.Pointer<ffi.Void> Function(
        ffi.Pointer<ffi.Void>,
        ffi.Pointer<
          ffi.NativeFunction<ffi.UnsignedLong Function(ffi.Pointer<ffi.Void>)>
        >,
        ffi.Bool,
      )
    >
  >
  _objc_msgSend_930(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_930(obj, sel);
  }

  late final __objc_msgSend_930Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<
        ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
            ffi.Pointer<ffi.Void>,
            ffi.Pointer<
              ffi.NativeFunction<
                ffi.UnsignedLong Function(ffi.Pointer<ffi.Void>)
              >
            >,
            ffi.Bool,
          )
        >
      >
      Function(ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)
    >
  >('objc_msgSend');
  late final __objc_msgSend_930 =
      __objc_msgSend_930Ptr
          .asFunction<
            ffi.Pointer<
              ffi.NativeFunction<
                ffi.Pointer<ffi.Void> Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<
                    ffi.NativeFunction<
                      ffi.UnsignedLong Function(ffi.Pointer<ffi.Void>)
                    >
                  >,
                  ffi.Bool,
                )
              >
            >
            Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_setAcquireFunction_1 = objc.registerName(
    "setAcquireFunction:",
  );
  void _objc_msgSend_931(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<
      ffi.NativeFunction<
        ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<
            ffi.NativeFunction<ffi.UnsignedLong Function(ffi.Pointer<ffi.Void>)>
          >,
          ffi.Bool,
        )
      >
    > value,
  ) {
    return __objc_msgSend_931(obj, sel, value);
  }

  late final __objc_msgSend_931Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<
          ffi.NativeFunction<
            ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<
                ffi.NativeFunction<
                  ffi.UnsignedLong Function(ffi.Pointer<ffi.Void>)
                >
              >,
              ffi.Bool,
            )
          >
        >,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_931 =
      __objc_msgSend_931Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<
                ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(
                    ffi.Pointer<ffi.Void>,
                    ffi.Pointer<
                      ffi.NativeFunction<
                        ffi.UnsignedLong Function(ffi.Pointer<ffi.Void>)
                      >
                    >,
                    ffi.Bool,
                  )
                >
              >,
            )
          >();

  late final _sel_usesStrongWriteBarrier1 = objc.registerName(
    "usesStrongWriteBarrier",
  );
  late final _sel_setUsesStrongWriteBarrier_1 = objc.registerName(
    "setUsesStrongWriteBarrier:",
  );
  late final _sel_usesWeakReadAndWriteBarriers1 = objc.registerName(
    "usesWeakReadAndWriteBarriers",
  );
  late final _sel_setUsesWeakReadAndWriteBarriers_1 = objc.registerName(
    "setUsesWeakReadAndWriteBarriers:",
  );
  late final _sel_initWithPointerFunctions_1 = objc.registerName(
    "initWithPointerFunctions:",
  );
  instancetype _objc_msgSend_932(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> functions,
  ) {
    return __objc_msgSend_932(obj, sel, functions);
  }

  late final __objc_msgSend_932Ptr = _lookup<
    ffi.NativeFunction<
      instancetype Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_932 =
      __objc_msgSend_932Ptr
          .asFunction<
            instancetype Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_pointerArrayWithOptions_1 = objc.registerName(
    "pointerArrayWithOptions:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_933(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int options,
  ) {
    return __objc_msgSend_933(obj, sel, options);
  }

  late final __objc_msgSend_933Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Int32,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_933 =
      __objc_msgSend_933Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
            )
          >();

  late final _sel_pointerArrayWithPointerFunctions_1 = objc.registerName(
    "pointerArrayWithPointerFunctions:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_934(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> functions,
  ) {
    return __objc_msgSend_934(obj, sel, functions);
  }

  late final __objc_msgSend_934Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_934 =
      __objc_msgSend_934Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_pointerFunctions1 = objc.registerName("pointerFunctions");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_935(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_935(obj, sel);
  }

  late final __objc_msgSend_935Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_935 =
      __objc_msgSend_935Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_pointerAtIndex_1 = objc.registerName("pointerAtIndex:");
  ffi.Pointer<ffi.Void> _objc_msgSend_936(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int index,
  ) {
    return __objc_msgSend_936(obj, sel, index);
  }

  late final __objc_msgSend_936Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<ffi.Void> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.UnsignedLong,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_936 =
      __objc_msgSend_936Ptr
          .asFunction<
            ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
            )
          >();

  late final _sel_addPointer_1 = objc.registerName("addPointer:");
  late final _sel_removePointerAtIndex_1 = objc.registerName(
    "removePointerAtIndex:",
  );
  late final _sel_insertPointer_atIndex_1 = objc.registerName(
    "insertPointer:atIndex:",
  );
  late final _sel_replacePointerAtIndex_withPointer_1 = objc.registerName(
    "replacePointerAtIndex:withPointer:",
  );
  void _objc_msgSend_937(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int index,
    ffi.Pointer<ffi.Void> item,
  ) {
    return __objc_msgSend_937(obj, sel, index, item);
  }

  late final __objc_msgSend_937Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.UnsignedLong,
        ffi.Pointer<ffi.Void>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_937 =
      __objc_msgSend_937Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
              ffi.Pointer<ffi.Void>,
            )
          >();

  late final _sel_compact1 = objc.registerName("compact");
  late final _sel_setCount_1 = objc.registerName("setCount:");
  late final _sel_pointerArrayWithStrongObjects1 = objc.registerName(
    "pointerArrayWithStrongObjects",
  );
  late final _sel_pointerArrayWithWeakObjects1 = objc.registerName(
    "pointerArrayWithWeakObjects",
  );
  late final _sel_strongObjectsPointerArray1 = objc.registerName(
    "strongObjectsPointerArray",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_938(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_938(obj, sel);
  }

  late final __objc_msgSend_938Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_938 =
      __objc_msgSend_938Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_weakObjectsPointerArray1 = objc.registerName(
    "weakObjectsPointerArray",
  );
  late final _class_NSProcessInfo1 = objc.getClass("NSProcessInfo");
  late final _sel_processInfo1 = objc.registerName("processInfo");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_939(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_939(obj, sel);
  }

  late final __objc_msgSend_939Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_939 =
      __objc_msgSend_939Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_environment1 = objc.registerName("environment");
  late final _sel_hostName1 = objc.registerName("hostName");
  late final _sel_processName1 = objc.registerName("processName");
  late final _sel_setProcessName_1 = objc.registerName("setProcessName:");
  late final _sel_processIdentifier1 = objc.registerName("processIdentifier");
  late final _sel_globallyUniqueString1 = objc.registerName(
    "globallyUniqueString",
  );
  late final _sel_operatingSystem1 = objc.registerName("operatingSystem");
  late final _sel_operatingSystemName1 = objc.registerName(
    "operatingSystemName",
  );
  late final _sel_operatingSystemVersionString1 = objc.registerName(
    "operatingSystemVersionString",
  );
  late final _sel_operatingSystemVersion1 = objc.registerName(
    "operatingSystemVersion",
  );
  NSOperatingSystemVersion _objc_msgSend_940(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_940(obj, sel);
  }

  late final __objc_msgSend_940Ptr = _lookup<
    ffi.NativeFunction<
      NSOperatingSystemVersion Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_940 =
      __objc_msgSend_940Ptr
          .asFunction<
            NSOperatingSystemVersion Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  void _objc_msgSend_940_stret(
    ffi.Pointer<NSOperatingSystemVersion> stret,
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_940_stret(stret, obj, sel);
  }

  late final __objc_msgSend_940_stretPtr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<NSOperatingSystemVersion>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend_stret');
  late final __objc_msgSend_940_stret =
      __objc_msgSend_940_stretPtr
          .asFunction<
            void Function(
              ffi.Pointer<NSOperatingSystemVersion>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_processorCount1 = objc.registerName("processorCount");
  late final _sel_activeProcessorCount1 = objc.registerName(
    "activeProcessorCount",
  );
  late final _sel_physicalMemory1 = objc.registerName("physicalMemory");
  late final _sel_isOperatingSystemAtLeastVersion_1 = objc.registerName(
    "isOperatingSystemAtLeastVersion:",
  );
  bool _objc_msgSend_941(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    NSOperatingSystemVersion version,
  ) {
    return __objc_msgSend_941(obj, sel, version);
  }

  late final __objc_msgSend_941Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Bool Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        NSOperatingSystemVersion,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_941 =
      __objc_msgSend_941Ptr
          .asFunction<
            bool Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              NSOperatingSystemVersion,
            )
          >();

  late final _sel_systemUptime1 = objc.registerName("systemUptime");
  late final _sel_disableSuddenTermination1 = objc.registerName(
    "disableSuddenTermination",
  );
  late final _sel_enableSuddenTermination1 = objc.registerName(
    "enableSuddenTermination",
  );
  late final _sel_disableAutomaticTermination_1 = objc.registerName(
    "disableAutomaticTermination:",
  );
  late final _sel_enableAutomaticTermination_1 = objc.registerName(
    "enableAutomaticTermination:",
  );
  late final _sel_automaticTerminationSupportEnabled1 = objc.registerName(
    "automaticTerminationSupportEnabled",
  );
  late final _sel_setAutomaticTerminationSupportEnabled_1 = objc.registerName(
    "setAutomaticTerminationSupportEnabled:",
  );
  late final _sel_beginActivityWithOptions_reason_1 = objc.registerName(
    "beginActivityWithOptions:reason:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_942(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int options,
    ffi.Pointer<objc.ObjCObject> reason,
  ) {
    return __objc_msgSend_942(obj, sel, options, reason);
  }

  late final __objc_msgSend_942Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Int32,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_942 =
      __objc_msgSend_942Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_endActivity_1 = objc.registerName("endActivity:");
  late final _sel_performActivityWithOptions_reason_usingBlock_1 = objc
      .registerName("performActivityWithOptions:reason:usingBlock:");
  void _objc_msgSend_943(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int options,
    ffi.Pointer<objc.ObjCObject> reason,
    ffi.Pointer<objc.ObjCBlock> block,
  ) {
    return __objc_msgSend_943(obj, sel, options, reason, block);
  }

  late final __objc_msgSend_943Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Int32,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCBlock>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_943 =
      __objc_msgSend_943Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCBlock>,
            )
          >();

  late final _sel_performExpiringActivityWithReason_usingBlock_1 = objc
      .registerName("performExpiringActivityWithReason:usingBlock:");
  void _objc_msgSend_944(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> reason,
    ffi.Pointer<objc.ObjCBlock> block,
  ) {
    return __objc_msgSend_944(obj, sel, reason, block);
  }

  late final __objc_msgSend_944Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCBlock>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_944 =
      __objc_msgSend_944Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCBlock>,
            )
          >();

  late final _sel_userName1 = objc.registerName("userName");
  late final _sel_fullUserName1 = objc.registerName("fullUserName");
  late final _sel_thermalState1 = objc.registerName("thermalState");
  int _objc_msgSend_945(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_945(obj, sel);
  }

  late final __objc_msgSend_945Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Int32 Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_945 =
      __objc_msgSend_945Ptr
          .asFunction<
            int Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_isLowPowerModeEnabled1 = objc.registerName(
    "isLowPowerModeEnabled",
  );
  late final _sel_isMacCatalystApp1 = objc.registerName("isMacCatalystApp");
  late final _sel_isiOSAppOnMac1 = objc.registerName("isiOSAppOnMac");
  late final _class_NSTextCheckingResult1 = objc.getClass(
    "NSTextCheckingResult",
  );
  late final _sel_resultType1 = objc.registerName("resultType");
  int _objc_msgSend_946(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_946(obj, sel);
  }

  late final __objc_msgSend_946Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Int32 Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_946 =
      __objc_msgSend_946Ptr
          .asFunction<
            int Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_range1 = objc.registerName("range");
  late final _sel_orthography1 = objc.registerName("orthography");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_947(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_947(obj, sel);
  }

  late final __objc_msgSend_947Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_947 =
      __objc_msgSend_947Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_grammarDetails1 = objc.registerName("grammarDetails");
  late final _sel_duration1 = objc.registerName("duration");
  late final _sel_components1 = objc.registerName("components");
  late final _sel_replacementString1 = objc.registerName("replacementString");
  late final _sel_alternativeStrings1 = objc.registerName("alternativeStrings");
  late final _class_NSRegularExpression1 = objc.getClass("NSRegularExpression");
  late final _sel_regularExpressionWithPattern_options_error_1 = objc
      .registerName("regularExpressionWithPattern:options:error:");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_948(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> pattern,
    int options,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    return __objc_msgSend_948(obj, sel, pattern, options, error);
  }

  late final __objc_msgSend_948Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Int32,
        ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_948 =
      __objc_msgSend_948Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              int,
              ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
            )
          >();

  late final _sel_initWithPattern_options_error_1 = objc.registerName(
    "initWithPattern:options:error:",
  );
  instancetype _objc_msgSend_949(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> pattern,
    int options,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    return __objc_msgSend_949(obj, sel, pattern, options, error);
  }

  late final __objc_msgSend_949Ptr = _lookup<
    ffi.NativeFunction<
      instancetype Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Int32,
        ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_949 =
      __objc_msgSend_949Ptr
          .asFunction<
            instancetype Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              int,
              ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
            )
          >();

  late final _sel_pattern1 = objc.registerName("pattern");
  late final _sel_options1 = objc.registerName("options");
  int _objc_msgSend_950(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_950(obj, sel);
  }

  late final __objc_msgSend_950Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Int32 Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_950 =
      __objc_msgSend_950Ptr
          .asFunction<
            int Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_numberOfCaptureGroups1 = objc.registerName(
    "numberOfCaptureGroups",
  );
  late final _sel_escapedPatternForString_1 = objc.registerName(
    "escapedPatternForString:",
  );
  late final _sel_enumerateMatchesInString_options_range_usingBlock_1 = objc
      .registerName("enumerateMatchesInString:options:range:usingBlock:");
  void _objc_msgSend_951(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> string,
    int options,
    _NSRange range,
    ffi.Pointer<objc.ObjCBlock> block,
  ) {
    return __objc_msgSend_951(obj, sel, string, options, range, block);
  }

  late final __objc_msgSend_951Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Int32,
        _NSRange,
        ffi.Pointer<objc.ObjCBlock>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_951 =
      __objc_msgSend_951Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              int,
              _NSRange,
              ffi.Pointer<objc.ObjCBlock>,
            )
          >();

  late final _sel_matchesInString_options_range_1 = objc.registerName(
    "matchesInString:options:range:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_952(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> string,
    int options,
    _NSRange range,
  ) {
    return __objc_msgSend_952(obj, sel, string, options, range);
  }

  late final __objc_msgSend_952Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Int32,
        _NSRange,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_952 =
      __objc_msgSend_952Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              int,
              _NSRange,
            )
          >();

  late final _sel_numberOfMatchesInString_options_range_1 = objc.registerName(
    "numberOfMatchesInString:options:range:",
  );
  int _objc_msgSend_953(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> string,
    int options,
    _NSRange range,
  ) {
    return __objc_msgSend_953(obj, sel, string, options, range);
  }

  late final __objc_msgSend_953Ptr = _lookup<
    ffi.NativeFunction<
      ffi.UnsignedLong Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Int32,
        _NSRange,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_953 =
      __objc_msgSend_953Ptr
          .asFunction<
            int Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              int,
              _NSRange,
            )
          >();

  late final _sel_firstMatchInString_options_range_1 = objc.registerName(
    "firstMatchInString:options:range:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_954(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> string,
    int options,
    _NSRange range,
  ) {
    return __objc_msgSend_954(obj, sel, string, options, range);
  }

  late final __objc_msgSend_954Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Int32,
        _NSRange,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_954 =
      __objc_msgSend_954Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              int,
              _NSRange,
            )
          >();

  late final _sel_rangeOfFirstMatchInString_options_range_1 = objc.registerName(
    "rangeOfFirstMatchInString:options:range:",
  );
  _NSRange _objc_msgSend_955(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> string,
    int options,
    _NSRange range,
  ) {
    return __objc_msgSend_955(obj, sel, string, options, range);
  }

  late final __objc_msgSend_955Ptr = _lookup<
    ffi.NativeFunction<
      _NSRange Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Int32,
        _NSRange,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_955 =
      __objc_msgSend_955Ptr
          .asFunction<
            _NSRange Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              int,
              _NSRange,
            )
          >();

  void _objc_msgSend_955_stret(
    ffi.Pointer<_NSRange> stret,
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> string,
    int options,
    _NSRange range,
  ) {
    return __objc_msgSend_955_stret(stret, obj, sel, string, options, range);
  }

  late final __objc_msgSend_955_stretPtr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<_NSRange>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Int32,
        _NSRange,
      )
    >
  >('objc_msgSend_stret');
  late final __objc_msgSend_955_stret =
      __objc_msgSend_955_stretPtr
          .asFunction<
            void Function(
              ffi.Pointer<_NSRange>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              int,
              _NSRange,
            )
          >();

  late final _sel_stringByReplacingMatchesInString_options_range_withTemplate_1 =
      objc.registerName(
        "stringByReplacingMatchesInString:options:range:withTemplate:",
      );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_956(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> string,
    int options,
    _NSRange range,
    ffi.Pointer<objc.ObjCObject> templ,
  ) {
    return __objc_msgSend_956(obj, sel, string, options, range, templ);
  }

  late final __objc_msgSend_956Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Int32,
        _NSRange,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_956 =
      __objc_msgSend_956Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              int,
              _NSRange,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_replaceMatchesInString_options_range_withTemplate_1 = objc
      .registerName("replaceMatchesInString:options:range:withTemplate:");
  int _objc_msgSend_957(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> string,
    int options,
    _NSRange range,
    ffi.Pointer<objc.ObjCObject> templ,
  ) {
    return __objc_msgSend_957(obj, sel, string, options, range, templ);
  }

  late final __objc_msgSend_957Ptr = _lookup<
    ffi.NativeFunction<
      ffi.UnsignedLong Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Int32,
        _NSRange,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_957 =
      __objc_msgSend_957Ptr
          .asFunction<
            int Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              int,
              _NSRange,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_replacementStringForResult_inString_offset_template_1 = objc
      .registerName("replacementStringForResult:inString:offset:template:");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_958(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> result,
    ffi.Pointer<objc.ObjCObject> string,
    int offset,
    ffi.Pointer<objc.ObjCObject> templ,
  ) {
    return __objc_msgSend_958(obj, sel, result, string, offset, templ);
  }

  late final __objc_msgSend_958Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Long,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_958 =
      __objc_msgSend_958Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
              int,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_escapedTemplateForString_1 = objc.registerName(
    "escapedTemplateForString:",
  );
  late final _sel_regularExpression1 = objc.registerName("regularExpression");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_959(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_959(obj, sel);
  }

  late final __objc_msgSend_959Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_959 =
      __objc_msgSend_959Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_phoneNumber1 = objc.registerName("phoneNumber");
  late final _sel_numberOfRanges1 = objc.registerName("numberOfRanges");
  late final _sel_rangeAtIndex_1 = objc.registerName("rangeAtIndex:");
  late final _sel_rangeWithName_1 = objc.registerName("rangeWithName:");
  late final _sel_resultByAdjustingRangesWithOffset_1 = objc.registerName(
    "resultByAdjustingRangesWithOffset:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_960(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int offset,
  ) {
    return __objc_msgSend_960(obj, sel, offset);
  }

  late final __objc_msgSend_960Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Long,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_960 =
      __objc_msgSend_960Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
            )
          >();

  late final _sel_addressComponents1 = objc.registerName("addressComponents");
  late final _sel_orthographyCheckingResultWithRange_orthography_1 = objc
      .registerName("orthographyCheckingResultWithRange:orthography:");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_961(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    _NSRange range,
    ffi.Pointer<objc.ObjCObject> orthography,
  ) {
    return __objc_msgSend_961(obj, sel, range, orthography);
  }

  late final __objc_msgSend_961Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        _NSRange,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_961 =
      __objc_msgSend_961Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              _NSRange,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_spellCheckingResultWithRange_1 = objc.registerName(
    "spellCheckingResultWithRange:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_962(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    _NSRange range,
  ) {
    return __objc_msgSend_962(obj, sel, range);
  }

  late final __objc_msgSend_962Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        _NSRange,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_962 =
      __objc_msgSend_962Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              _NSRange,
            )
          >();

  late final _sel_grammarCheckingResultWithRange_details_1 = objc.registerName(
    "grammarCheckingResultWithRange:details:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_963(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    _NSRange range,
    ffi.Pointer<objc.ObjCObject> details,
  ) {
    return __objc_msgSend_963(obj, sel, range, details);
  }

  late final __objc_msgSend_963Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        _NSRange,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_963 =
      __objc_msgSend_963Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              _NSRange,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_dateCheckingResultWithRange_date_1 = objc.registerName(
    "dateCheckingResultWithRange:date:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_964(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    _NSRange range,
    ffi.Pointer<objc.ObjCObject> date,
  ) {
    return __objc_msgSend_964(obj, sel, range, date);
  }

  late final __objc_msgSend_964Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        _NSRange,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_964 =
      __objc_msgSend_964Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              _NSRange,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_dateCheckingResultWithRange_date_timeZone_duration_1 = objc
      .registerName("dateCheckingResultWithRange:date:timeZone:duration:");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_965(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    _NSRange range,
    ffi.Pointer<objc.ObjCObject> date,
    ffi.Pointer<objc.ObjCObject> timeZone,
    double duration,
  ) {
    return __objc_msgSend_965(obj, sel, range, date, timeZone, duration);
  }

  late final __objc_msgSend_965Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        _NSRange,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Double,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_965 =
      __objc_msgSend_965Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              _NSRange,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
              double,
            )
          >();

  late final _sel_addressCheckingResultWithRange_components_1 = objc
      .registerName("addressCheckingResultWithRange:components:");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_966(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    _NSRange range,
    ffi.Pointer<objc.ObjCObject> components,
  ) {
    return __objc_msgSend_966(obj, sel, range, components);
  }

  late final __objc_msgSend_966Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        _NSRange,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_966 =
      __objc_msgSend_966Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              _NSRange,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_linkCheckingResultWithRange_URL_1 = objc.registerName(
    "linkCheckingResultWithRange:URL:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_967(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    _NSRange range,
    ffi.Pointer<objc.ObjCObject> url,
  ) {
    return __objc_msgSend_967(obj, sel, range, url);
  }

  late final __objc_msgSend_967Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        _NSRange,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_967 =
      __objc_msgSend_967Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              _NSRange,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_quoteCheckingResultWithRange_replacementString_1 = objc
      .registerName("quoteCheckingResultWithRange:replacementString:");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_968(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    _NSRange range,
    ffi.Pointer<objc.ObjCObject> replacementString,
  ) {
    return __objc_msgSend_968(obj, sel, range, replacementString);
  }

  late final __objc_msgSend_968Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        _NSRange,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_968 =
      __objc_msgSend_968Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              _NSRange,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_dashCheckingResultWithRange_replacementString_1 = objc
      .registerName("dashCheckingResultWithRange:replacementString:");
  late final _sel_replacementCheckingResultWithRange_replacementString_1 = objc
      .registerName("replacementCheckingResultWithRange:replacementString:");
  late final _sel_correctionCheckingResultWithRange_replacementString_1 = objc
      .registerName("correctionCheckingResultWithRange:replacementString:");
  late final _sel_correctionCheckingResultWithRange_replacementString_alternativeStrings_1 =
      objc.registerName(
        "correctionCheckingResultWithRange:replacementString:alternativeStrings:",
      );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_969(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    _NSRange range,
    ffi.Pointer<objc.ObjCObject> replacementString,
    ffi.Pointer<objc.ObjCObject> alternativeStrings,
  ) {
    return __objc_msgSend_969(
      obj,
      sel,
      range,
      replacementString,
      alternativeStrings,
    );
  }

  late final __objc_msgSend_969Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        _NSRange,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_969 =
      __objc_msgSend_969Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              _NSRange,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_regularExpressionCheckingResultWithRanges_count_regularExpression_1 =
      objc.registerName(
        "regularExpressionCheckingResultWithRanges:count:regularExpression:",
      );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_970(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<_NSRange> ranges,
    int count,
    ffi.Pointer<objc.ObjCObject> regularExpression,
  ) {
    return __objc_msgSend_970(obj, sel, ranges, count, regularExpression);
  }

  late final __objc_msgSend_970Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<_NSRange>,
        ffi.UnsignedLong,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_970 =
      __objc_msgSend_970Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<_NSRange>,
              int,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_phoneNumberCheckingResultWithRange_phoneNumber_1 = objc
      .registerName("phoneNumberCheckingResultWithRange:phoneNumber:");
  late final _sel_transitInformationCheckingResultWithRange_components_1 = objc
      .registerName("transitInformationCheckingResultWithRange:components:");
  late final _class_NSURLCache1 = objc.getClass("NSURLCache");
  late final _sel_sharedURLCache1 = objc.registerName("sharedURLCache");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_971(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_971(obj, sel);
  }

  late final __objc_msgSend_971Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_971 =
      __objc_msgSend_971Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_setSharedURLCache_1 = objc.registerName("setSharedURLCache:");
  void _objc_msgSend_972(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> value,
  ) {
    return __objc_msgSend_972(obj, sel, value);
  }

  late final __objc_msgSend_972Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_972 =
      __objc_msgSend_972Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_initWithMemoryCapacity_diskCapacity_diskPath_1 = objc
      .registerName("initWithMemoryCapacity:diskCapacity:diskPath:");
  instancetype _objc_msgSend_973(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int memoryCapacity,
    int diskCapacity,
    ffi.Pointer<objc.ObjCObject> path,
  ) {
    return __objc_msgSend_973(obj, sel, memoryCapacity, diskCapacity, path);
  }

  late final __objc_msgSend_973Ptr = _lookup<
    ffi.NativeFunction<
      instancetype Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.UnsignedLong,
        ffi.UnsignedLong,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_973 =
      __objc_msgSend_973Ptr
          .asFunction<
            instancetype Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
              int,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_initWithMemoryCapacity_diskCapacity_directoryURL_1 = objc
      .registerName("initWithMemoryCapacity:diskCapacity:directoryURL:");
  instancetype _objc_msgSend_974(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int memoryCapacity,
    int diskCapacity,
    ffi.Pointer<objc.ObjCObject> directoryURL,
  ) {
    return __objc_msgSend_974(
      obj,
      sel,
      memoryCapacity,
      diskCapacity,
      directoryURL,
    );
  }

  late final __objc_msgSend_974Ptr = _lookup<
    ffi.NativeFunction<
      instancetype Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.UnsignedLong,
        ffi.UnsignedLong,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_974 =
      __objc_msgSend_974Ptr
          .asFunction<
            instancetype Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
              int,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _class_NSCachedURLResponse1 = objc.getClass("NSCachedURLResponse");
  late final _sel_initWithResponse_data_1 = objc.registerName(
    "initWithResponse:data:",
  );
  instancetype _objc_msgSend_975(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> response,
    ffi.Pointer<objc.ObjCObject> data,
  ) {
    return __objc_msgSend_975(obj, sel, response, data);
  }

  late final __objc_msgSend_975Ptr = _lookup<
    ffi.NativeFunction<
      instancetype Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_975 =
      __objc_msgSend_975Ptr
          .asFunction<
            instancetype Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_initWithResponse_data_userInfo_storagePolicy_1 = objc
      .registerName("initWithResponse:data:userInfo:storagePolicy:");
  instancetype _objc_msgSend_976(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> response,
    ffi.Pointer<objc.ObjCObject> data,
    ffi.Pointer<objc.ObjCObject> userInfo,
    int storagePolicy,
  ) {
    return __objc_msgSend_976(
      obj,
      sel,
      response,
      data,
      userInfo,
      storagePolicy,
    );
  }

  late final __objc_msgSend_976Ptr = _lookup<
    ffi.NativeFunction<
      instancetype Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Int32,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_976 =
      __objc_msgSend_976Ptr
          .asFunction<
            instancetype Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
              int,
            )
          >();

  ffi.Pointer<objc.ObjCObject> _objc_msgSend_977(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_977(obj, sel);
  }

  late final __objc_msgSend_977Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_977 =
      __objc_msgSend_977Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_storagePolicy1 = objc.registerName("storagePolicy");
  int _objc_msgSend_978(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_978(obj, sel);
  }

  late final __objc_msgSend_978Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Int32 Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_978 =
      __objc_msgSend_978Ptr
          .asFunction<
            int Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_cachedResponseForRequest_1 = objc.registerName(
    "cachedResponseForRequest:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_979(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> request,
  ) {
    return __objc_msgSend_979(obj, sel, request);
  }

  late final __objc_msgSend_979Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_979 =
      __objc_msgSend_979Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_storeCachedResponse_forRequest_1 = objc.registerName(
    "storeCachedResponse:forRequest:",
  );
  void _objc_msgSend_980(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> cachedResponse,
    ffi.Pointer<objc.ObjCObject> request,
  ) {
    return __objc_msgSend_980(obj, sel, cachedResponse, request);
  }

  late final __objc_msgSend_980Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_980 =
      __objc_msgSend_980Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_removeCachedResponseForRequest_1 = objc.registerName(
    "removeCachedResponseForRequest:",
  );
  void _objc_msgSend_981(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> request,
  ) {
    return __objc_msgSend_981(obj, sel, request);
  }

  late final __objc_msgSend_981Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_981 =
      __objc_msgSend_981Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_removeAllCachedResponses1 = objc.registerName(
    "removeAllCachedResponses",
  );
  late final _sel_removeCachedResponsesSinceDate_1 = objc.registerName(
    "removeCachedResponsesSinceDate:",
  );
  late final _sel_memoryCapacity1 = objc.registerName("memoryCapacity");
  late final _sel_setMemoryCapacity_1 = objc.registerName("setMemoryCapacity:");
  late final _sel_diskCapacity1 = objc.registerName("diskCapacity");
  late final _sel_setDiskCapacity_1 = objc.registerName("setDiskCapacity:");
  late final _sel_currentMemoryUsage1 = objc.registerName("currentMemoryUsage");
  late final _sel_currentDiskUsage1 = objc.registerName("currentDiskUsage");
  late final _class_NSURLSessionDataTask1 = objc.getClass(
    "NSURLSessionDataTask",
  );
  late final _sel_storeCachedResponse_forDataTask_1 = objc.registerName(
    "storeCachedResponse:forDataTask:",
  );
  void _objc_msgSend_982(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> cachedResponse,
    ffi.Pointer<objc.ObjCObject> dataTask,
  ) {
    return __objc_msgSend_982(obj, sel, cachedResponse, dataTask);
  }

  late final __objc_msgSend_982Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_982 =
      __objc_msgSend_982Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_getCachedResponseForDataTask_completionHandler_1 = objc
      .registerName("getCachedResponseForDataTask:completionHandler:");
  void _objc_msgSend_983(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> dataTask,
    ffi.Pointer<objc.ObjCBlock> completionHandler,
  ) {
    return __objc_msgSend_983(obj, sel, dataTask, completionHandler);
  }

  late final __objc_msgSend_983Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCBlock>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_983 =
      __objc_msgSend_983Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCBlock>,
            )
          >();

  late final _sel_removeCachedResponseForDataTask_1 = objc.registerName(
    "removeCachedResponseForDataTask:",
  );
  void _objc_msgSend_984(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> dataTask,
  ) {
    return __objc_msgSend_984(obj, sel, dataTask);
  }

  late final __objc_msgSend_984Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_984 =
      __objc_msgSend_984Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _class_NSURLConnection1 = objc.getClass("NSURLConnection");
  late final _sel_initWithRequest_delegate_startImmediately_1 = objc
      .registerName("initWithRequest:delegate:startImmediately:");
  instancetype _objc_msgSend_985(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> request,
    ffi.Pointer<objc.ObjCObject> delegate,
    bool startImmediately,
  ) {
    return __objc_msgSend_985(obj, sel, request, delegate, startImmediately);
  }

  late final __objc_msgSend_985Ptr = _lookup<
    ffi.NativeFunction<
      instancetype Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Bool,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_985 =
      __objc_msgSend_985Ptr
          .asFunction<
            instancetype Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
              bool,
            )
          >();

  late final _sel_initWithRequest_delegate_1 = objc.registerName(
    "initWithRequest:delegate:",
  );
  instancetype _objc_msgSend_986(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> request,
    ffi.Pointer<objc.ObjCObject> delegate,
  ) {
    return __objc_msgSend_986(obj, sel, request, delegate);
  }

  late final __objc_msgSend_986Ptr = _lookup<
    ffi.NativeFunction<
      instancetype Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_986 =
      __objc_msgSend_986Ptr
          .asFunction<
            instancetype Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_connectionWithRequest_delegate_1 = objc.registerName(
    "connectionWithRequest:delegate:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_987(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> request,
    ffi.Pointer<objc.ObjCObject> delegate,
  ) {
    return __objc_msgSend_987(obj, sel, request, delegate);
  }

  late final __objc_msgSend_987Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_987 =
      __objc_msgSend_987Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  ffi.Pointer<objc.ObjCObject> _objc_msgSend_988(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_988(obj, sel);
  }

  late final __objc_msgSend_988Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_988 =
      __objc_msgSend_988Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_unscheduleFromRunLoop_forMode_1 = objc.registerName(
    "unscheduleFromRunLoop:forMode:",
  );
  late final _sel_setDelegateQueue_1 = objc.registerName("setDelegateQueue:");
  void _objc_msgSend_989(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> queue,
  ) {
    return __objc_msgSend_989(obj, sel, queue);
  }

  late final __objc_msgSend_989Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_989 =
      __objc_msgSend_989Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_canHandleRequest_1 = objc.registerName("canHandleRequest:");
  bool _objc_msgSend_990(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> request,
  ) {
    return __objc_msgSend_990(obj, sel, request);
  }

  late final __objc_msgSend_990Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Bool Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_990 =
      __objc_msgSend_990Ptr
          .asFunction<
            bool Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_sendSynchronousRequest_returningResponse_error_1 = objc
      .registerName("sendSynchronousRequest:returningResponse:error:");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_991(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> request,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> response,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    return __objc_msgSend_991(obj, sel, request, response, error);
  }

  late final __objc_msgSend_991Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
        ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_991 =
      __objc_msgSend_991Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
              ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
            )
          >();

  late final _sel_sendAsynchronousRequest_queue_completionHandler_1 = objc
      .registerName("sendAsynchronousRequest:queue:completionHandler:");
  void _objc_msgSend_992(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> request,
    ffi.Pointer<objc.ObjCObject> queue,
    ffi.Pointer<objc.ObjCBlock> handler,
  ) {
    return __objc_msgSend_992(obj, sel, request, queue, handler);
  }

  late final __objc_msgSend_992Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCBlock>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_992 =
      __objc_msgSend_992Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCBlock>,
            )
          >();

  late final _class_NSURLCredential1 = objc.getClass("NSURLCredential");
  late final _sel_persistence1 = objc.registerName("persistence");
  int _objc_msgSend_993(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_993(obj, sel);
  }

  late final __objc_msgSend_993Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Int32 Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_993 =
      __objc_msgSend_993Ptr
          .asFunction<
            int Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_initWithUser_password_persistence_1 = objc.registerName(
    "initWithUser:password:persistence:",
  );
  instancetype _objc_msgSend_994(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> user,
    ffi.Pointer<objc.ObjCObject> password,
    int persistence,
  ) {
    return __objc_msgSend_994(obj, sel, user, password, persistence);
  }

  late final __objc_msgSend_994Ptr = _lookup<
    ffi.NativeFunction<
      instancetype Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Int32,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_994 =
      __objc_msgSend_994Ptr
          .asFunction<
            instancetype Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
              int,
            )
          >();

  late final _sel_credentialWithUser_password_persistence_1 = objc.registerName(
    "credentialWithUser:password:persistence:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_995(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> user,
    ffi.Pointer<objc.ObjCObject> password,
    int persistence,
  ) {
    return __objc_msgSend_995(obj, sel, user, password, persistence);
  }

  late final __objc_msgSend_995Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Int32,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_995 =
      __objc_msgSend_995Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
              int,
            )
          >();

  late final _sel_hasPassword1 = objc.registerName("hasPassword");
  late final _sel_initWithIdentity_certificates_persistence_1 = objc
      .registerName("initWithIdentity:certificates:persistence:");
  instancetype _objc_msgSend_996(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<__SecIdentity> identity,
    ffi.Pointer<objc.ObjCObject> certArray,
    int persistence,
  ) {
    return __objc_msgSend_996(obj, sel, identity, certArray, persistence);
  }

  late final __objc_msgSend_996Ptr = _lookup<
    ffi.NativeFunction<
      instancetype Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<__SecIdentity>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Int32,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_996 =
      __objc_msgSend_996Ptr
          .asFunction<
            instancetype Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<__SecIdentity>,
              ffi.Pointer<objc.ObjCObject>,
              int,
            )
          >();

  late final _sel_credentialWithIdentity_certificates_persistence_1 = objc
      .registerName("credentialWithIdentity:certificates:persistence:");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_997(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<__SecIdentity> identity,
    ffi.Pointer<objc.ObjCObject> certArray,
    int persistence,
  ) {
    return __objc_msgSend_997(obj, sel, identity, certArray, persistence);
  }

  late final __objc_msgSend_997Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<__SecIdentity>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Int32,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_997 =
      __objc_msgSend_997Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<__SecIdentity>,
              ffi.Pointer<objc.ObjCObject>,
              int,
            )
          >();

  late final _sel_identity1 = objc.registerName("identity");
  ffi.Pointer<__SecIdentity> _objc_msgSend_998(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_998(obj, sel);
  }

  late final __objc_msgSend_998Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<__SecIdentity> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_998 =
      __objc_msgSend_998Ptr
          .asFunction<
            ffi.Pointer<__SecIdentity> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_certificates1 = objc.registerName("certificates");
  late final _sel_initWithTrust_1 = objc.registerName("initWithTrust:");
  instancetype _objc_msgSend_999(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<__SecTrust> trust,
  ) {
    return __objc_msgSend_999(obj, sel, trust);
  }

  late final __objc_msgSend_999Ptr = _lookup<
    ffi.NativeFunction<
      instancetype Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<__SecTrust>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_999 =
      __objc_msgSend_999Ptr
          .asFunction<
            instancetype Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<__SecTrust>,
            )
          >();

  late final _sel_credentialForTrust_1 = objc.registerName(
    "credentialForTrust:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_1000(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<__SecTrust> trust,
  ) {
    return __objc_msgSend_1000(obj, sel, trust);
  }

  late final __objc_msgSend_1000Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<__SecTrust>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1000 =
      __objc_msgSend_1000Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<__SecTrust>,
            )
          >();

  late final _class_NSURLProtectionSpace1 = objc.getClass(
    "NSURLProtectionSpace",
  );
  late final _sel_initWithHost_port_protocol_realm_authenticationMethod_1 = objc
      .registerName("initWithHost:port:protocol:realm:authenticationMethod:");
  instancetype _objc_msgSend_1001(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> host,
    int port,
    ffi.Pointer<objc.ObjCObject> protocol,
    ffi.Pointer<objc.ObjCObject> realm,
    ffi.Pointer<objc.ObjCObject> authenticationMethod,
  ) {
    return __objc_msgSend_1001(
      obj,
      sel,
      host,
      port,
      protocol,
      realm,
      authenticationMethod,
    );
  }

  late final __objc_msgSend_1001Ptr = _lookup<
    ffi.NativeFunction<
      instancetype Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Long,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1001 =
      __objc_msgSend_1001Ptr
          .asFunction<
            instancetype Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              int,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_initWithProxyHost_port_type_realm_authenticationMethod_1 =
      objc.registerName(
        "initWithProxyHost:port:type:realm:authenticationMethod:",
      );
  late final _sel_realm1 = objc.registerName("realm");
  late final _sel_receivesCredentialSecurely1 = objc.registerName(
    "receivesCredentialSecurely",
  );
  late final _sel_isProxy1 = objc.registerName("isProxy");
  late final _sel_proxyType1 = objc.registerName("proxyType");
  late final _sel_protocol1 = objc.registerName("protocol");
  late final _sel_authenticationMethod1 = objc.registerName(
    "authenticationMethod",
  );
  late final _sel_distinguishedNames1 = objc.registerName("distinguishedNames");
  late final _sel_serverTrust1 = objc.registerName("serverTrust");
  ffi.Pointer<__SecTrust> _objc_msgSend_1002(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_1002(obj, sel);
  }

  late final __objc_msgSend_1002Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<__SecTrust> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1002 =
      __objc_msgSend_1002Ptr
          .asFunction<
            ffi.Pointer<__SecTrust> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _class_NSURLCredentialStorage1 = objc.getClass(
    "NSURLCredentialStorage",
  );
  late final _sel_sharedCredentialStorage1 = objc.registerName(
    "sharedCredentialStorage",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_1003(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_1003(obj, sel);
  }

  late final __objc_msgSend_1003Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1003 =
      __objc_msgSend_1003Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_credentialsForProtectionSpace_1 = objc.registerName(
    "credentialsForProtectionSpace:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_1004(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> space,
  ) {
    return __objc_msgSend_1004(obj, sel, space);
  }

  late final __objc_msgSend_1004Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1004 =
      __objc_msgSend_1004Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_allCredentials1 = objc.registerName("allCredentials");
  late final _sel_setCredential_forProtectionSpace_1 = objc.registerName(
    "setCredential:forProtectionSpace:",
  );
  void _objc_msgSend_1005(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> credential,
    ffi.Pointer<objc.ObjCObject> space,
  ) {
    return __objc_msgSend_1005(obj, sel, credential, space);
  }

  late final __objc_msgSend_1005Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1005 =
      __objc_msgSend_1005Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_removeCredential_forProtectionSpace_1 = objc.registerName(
    "removeCredential:forProtectionSpace:",
  );
  late final _sel_removeCredential_forProtectionSpace_options_1 = objc
      .registerName("removeCredential:forProtectionSpace:options:");
  void _objc_msgSend_1006(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> credential,
    ffi.Pointer<objc.ObjCObject> space,
    ffi.Pointer<objc.ObjCObject> options,
  ) {
    return __objc_msgSend_1006(obj, sel, credential, space, options);
  }

  late final __objc_msgSend_1006Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1006 =
      __objc_msgSend_1006Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_defaultCredentialForProtectionSpace_1 = objc.registerName(
    "defaultCredentialForProtectionSpace:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_1007(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> space,
  ) {
    return __objc_msgSend_1007(obj, sel, space);
  }

  late final __objc_msgSend_1007Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1007 =
      __objc_msgSend_1007Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_setDefaultCredential_forProtectionSpace_1 = objc.registerName(
    "setDefaultCredential:forProtectionSpace:",
  );
  late final _sel_getCredentialsForProtectionSpace_task_completionHandler_1 =
      objc.registerName(
        "getCredentialsForProtectionSpace:task:completionHandler:",
      );
  void _objc_msgSend_1008(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> protectionSpace,
    ffi.Pointer<objc.ObjCObject> task,
    ffi.Pointer<objc.ObjCBlock> completionHandler,
  ) {
    return __objc_msgSend_1008(
      obj,
      sel,
      protectionSpace,
      task,
      completionHandler,
    );
  }

  late final __objc_msgSend_1008Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCBlock>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1008 =
      __objc_msgSend_1008Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCBlock>,
            )
          >();

  late final _sel_setCredential_forProtectionSpace_task_1 = objc.registerName(
    "setCredential:forProtectionSpace:task:",
  );
  void _objc_msgSend_1009(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> credential,
    ffi.Pointer<objc.ObjCObject> protectionSpace,
    ffi.Pointer<objc.ObjCObject> task,
  ) {
    return __objc_msgSend_1009(obj, sel, credential, protectionSpace, task);
  }

  late final __objc_msgSend_1009Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1009 =
      __objc_msgSend_1009Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_removeCredential_forProtectionSpace_options_task_1 = objc
      .registerName("removeCredential:forProtectionSpace:options:task:");
  void _objc_msgSend_1010(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> credential,
    ffi.Pointer<objc.ObjCObject> protectionSpace,
    ffi.Pointer<objc.ObjCObject> options,
    ffi.Pointer<objc.ObjCObject> task,
  ) {
    return __objc_msgSend_1010(
      obj,
      sel,
      credential,
      protectionSpace,
      options,
      task,
    );
  }

  late final __objc_msgSend_1010Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1010 =
      __objc_msgSend_1010Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_getDefaultCredentialForProtectionSpace_task_completionHandler_1 =
      objc.registerName(
        "getDefaultCredentialForProtectionSpace:task:completionHandler:",
      );
  void _objc_msgSend_1011(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> space,
    ffi.Pointer<objc.ObjCObject> task,
    ffi.Pointer<objc.ObjCBlock> completionHandler,
  ) {
    return __objc_msgSend_1011(obj, sel, space, task, completionHandler);
  }

  late final __objc_msgSend_1011Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCBlock>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1011 =
      __objc_msgSend_1011Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCBlock>,
            )
          >();

  late final _sel_setDefaultCredential_forProtectionSpace_task_1 = objc
      .registerName("setDefaultCredential:forProtectionSpace:task:");
  late final _class_NSURLProtocol1 = objc.getClass("NSURLProtocol");
  late final _sel_initWithRequest_cachedResponse_client_1 = objc.registerName(
    "initWithRequest:cachedResponse:client:",
  );
  instancetype _objc_msgSend_1012(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> request,
    ffi.Pointer<objc.ObjCObject> cachedResponse,
    ffi.Pointer<objc.ObjCObject> client,
  ) {
    return __objc_msgSend_1012(obj, sel, request, cachedResponse, client);
  }

  late final __objc_msgSend_1012Ptr = _lookup<
    ffi.NativeFunction<
      instancetype Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1012 =
      __objc_msgSend_1012Ptr
          .asFunction<
            instancetype Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_client1 = objc.registerName("client");
  late final _sel_request1 = objc.registerName("request");
  late final _sel_cachedResponse1 = objc.registerName("cachedResponse");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_1013(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_1013(obj, sel);
  }

  late final __objc_msgSend_1013Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1013 =
      __objc_msgSend_1013Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_canInitWithRequest_1 = objc.registerName(
    "canInitWithRequest:",
  );
  late final _sel_canonicalRequestForRequest_1 = objc.registerName(
    "canonicalRequestForRequest:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_1014(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> request,
  ) {
    return __objc_msgSend_1014(obj, sel, request);
  }

  late final __objc_msgSend_1014Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1014 =
      __objc_msgSend_1014Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_requestIsCacheEquivalent_toRequest_1 = objc.registerName(
    "requestIsCacheEquivalent:toRequest:",
  );
  bool _objc_msgSend_1015(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> a,
    ffi.Pointer<objc.ObjCObject> b,
  ) {
    return __objc_msgSend_1015(obj, sel, a, b);
  }

  late final __objc_msgSend_1015Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Bool Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1015 =
      __objc_msgSend_1015Ptr
          .asFunction<
            bool Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_startLoading1 = objc.registerName("startLoading");
  late final _sel_stopLoading1 = objc.registerName("stopLoading");
  late final _sel_propertyForKey_inRequest_1 = objc.registerName(
    "propertyForKey:inRequest:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_1016(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> key,
    ffi.Pointer<objc.ObjCObject> request,
  ) {
    return __objc_msgSend_1016(obj, sel, key, request);
  }

  late final __objc_msgSend_1016Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1016 =
      __objc_msgSend_1016Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _class_NSMutableURLRequest1 = objc.getClass("NSMutableURLRequest");
  late final _sel_setURL_1 = objc.registerName("setURL:");
  late final _sel_setCachePolicy_1 = objc.registerName("setCachePolicy:");
  void _objc_msgSend_1017(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int value,
  ) {
    return __objc_msgSend_1017(obj, sel, value);
  }

  late final __objc_msgSend_1017Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Int32,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1017 =
      __objc_msgSend_1017Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
            )
          >();

  late final _sel_setTimeoutInterval_1 = objc.registerName(
    "setTimeoutInterval:",
  );
  late final _sel_setMainDocumentURL_1 = objc.registerName(
    "setMainDocumentURL:",
  );
  late final _sel_setNetworkServiceType_1 = objc.registerName(
    "setNetworkServiceType:",
  );
  void _objc_msgSend_1018(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int value,
  ) {
    return __objc_msgSend_1018(obj, sel, value);
  }

  late final __objc_msgSend_1018Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Int32,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1018 =
      __objc_msgSend_1018Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
            )
          >();

  late final _sel_setAllowsCellularAccess_1 = objc.registerName(
    "setAllowsCellularAccess:",
  );
  late final _sel_setAllowsExpensiveNetworkAccess_1 = objc.registerName(
    "setAllowsExpensiveNetworkAccess:",
  );
  late final _sel_setAllowsConstrainedNetworkAccess_1 = objc.registerName(
    "setAllowsConstrainedNetworkAccess:",
  );
  late final _sel_setAssumesHTTP3Capable_1 = objc.registerName(
    "setAssumesHTTP3Capable:",
  );
  late final _sel_setAttribution_1 = objc.registerName("setAttribution:");
  void _objc_msgSend_1019(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int value,
  ) {
    return __objc_msgSend_1019(obj, sel, value);
  }

  late final __objc_msgSend_1019Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Int32,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1019 =
      __objc_msgSend_1019Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
            )
          >();

  late final _sel_setRequiresDNSSECValidation_1 = objc.registerName(
    "setRequiresDNSSECValidation:",
  );
  late final _sel_setHTTPMethod_1 = objc.registerName("setHTTPMethod:");
  late final _sel_setAllHTTPHeaderFields_1 = objc.registerName(
    "setAllHTTPHeaderFields:",
  );
  late final _sel_setValue_forHTTPHeaderField_1 = objc.registerName(
    "setValue:forHTTPHeaderField:",
  );
  void _objc_msgSend_1020(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> value,
    ffi.Pointer<objc.ObjCObject> field,
  ) {
    return __objc_msgSend_1020(obj, sel, value, field);
  }

  late final __objc_msgSend_1020Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1020 =
      __objc_msgSend_1020Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_addValue_forHTTPHeaderField_1 = objc.registerName(
    "addValue:forHTTPHeaderField:",
  );
  late final _sel_setHTTPBody_1 = objc.registerName("setHTTPBody:");
  void _objc_msgSend_1021(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> value,
  ) {
    return __objc_msgSend_1021(obj, sel, value);
  }

  late final __objc_msgSend_1021Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1021 =
      __objc_msgSend_1021Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_setHTTPBodyStream_1 = objc.registerName("setHTTPBodyStream:");
  void _objc_msgSend_1022(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> value,
  ) {
    return __objc_msgSend_1022(obj, sel, value);
  }

  late final __objc_msgSend_1022Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1022 =
      __objc_msgSend_1022Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_setHTTPShouldHandleCookies_1 = objc.registerName(
    "setHTTPShouldHandleCookies:",
  );
  late final _sel_setHTTPShouldUsePipelining_1 = objc.registerName(
    "setHTTPShouldUsePipelining:",
  );
  late final _sel_setProperty_forKey_inRequest_1 = objc.registerName(
    "setProperty:forKey:inRequest:",
  );
  void _objc_msgSend_1023(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> value,
    ffi.Pointer<objc.ObjCObject> key,
    ffi.Pointer<objc.ObjCObject> request,
  ) {
    return __objc_msgSend_1023(obj, sel, value, key, request);
  }

  late final __objc_msgSend_1023Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1023 =
      __objc_msgSend_1023Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_removePropertyForKey_inRequest_1 = objc.registerName(
    "removePropertyForKey:inRequest:",
  );
  void _objc_msgSend_1024(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> key,
    ffi.Pointer<objc.ObjCObject> request,
  ) {
    return __objc_msgSend_1024(obj, sel, key, request);
  }

  late final __objc_msgSend_1024Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1024 =
      __objc_msgSend_1024Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_registerClass_1 = objc.registerName("registerClass:");
  late final _sel_unregisterClass_1 = objc.registerName("unregisterClass:");
  late final _sel_canInitWithTask_1 = objc.registerName("canInitWithTask:");
  bool _objc_msgSend_1025(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> task,
  ) {
    return __objc_msgSend_1025(obj, sel, task);
  }

  late final __objc_msgSend_1025Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Bool Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1025 =
      __objc_msgSend_1025Ptr
          .asFunction<
            bool Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_initWithTask_cachedResponse_client_1 = objc.registerName(
    "initWithTask:cachedResponse:client:",
  );
  instancetype _objc_msgSend_1026(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> task,
    ffi.Pointer<objc.ObjCObject> cachedResponse,
    ffi.Pointer<objc.ObjCObject> client,
  ) {
    return __objc_msgSend_1026(obj, sel, task, cachedResponse, client);
  }

  late final __objc_msgSend_1026Ptr = _lookup<
    ffi.NativeFunction<
      instancetype Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1026 =
      __objc_msgSend_1026Ptr
          .asFunction<
            instancetype Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_task1 = objc.registerName("task");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_1027(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_1027(obj, sel);
  }

  late final __objc_msgSend_1027Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1027 =
      __objc_msgSend_1027Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _class_NSXMLParser1 = objc.getClass("NSXMLParser");
  late final _sel_initWithStream_1 = objc.registerName("initWithStream:");
  instancetype _objc_msgSend_1028(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> stream,
  ) {
    return __objc_msgSend_1028(obj, sel, stream);
  }

  late final __objc_msgSend_1028Ptr = _lookup<
    ffi.NativeFunction<
      instancetype Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1028 =
      __objc_msgSend_1028Ptr
          .asFunction<
            instancetype Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_shouldProcessNamespaces1 = objc.registerName(
    "shouldProcessNamespaces",
  );
  late final _sel_setShouldProcessNamespaces_1 = objc.registerName(
    "setShouldProcessNamespaces:",
  );
  late final _sel_shouldReportNamespacePrefixes1 = objc.registerName(
    "shouldReportNamespacePrefixes",
  );
  late final _sel_setShouldReportNamespacePrefixes_1 = objc.registerName(
    "setShouldReportNamespacePrefixes:",
  );
  late final _sel_externalEntityResolvingPolicy1 = objc.registerName(
    "externalEntityResolvingPolicy",
  );
  int _objc_msgSend_1029(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_1029(obj, sel);
  }

  late final __objc_msgSend_1029Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Int32 Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1029 =
      __objc_msgSend_1029Ptr
          .asFunction<
            int Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_setExternalEntityResolvingPolicy_1 = objc.registerName(
    "setExternalEntityResolvingPolicy:",
  );
  void _objc_msgSend_1030(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int value,
  ) {
    return __objc_msgSend_1030(obj, sel, value);
  }

  late final __objc_msgSend_1030Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Int32,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1030 =
      __objc_msgSend_1030Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
            )
          >();

  late final _sel_allowedExternalEntityURLs1 = objc.registerName(
    "allowedExternalEntityURLs",
  );
  late final _sel_setAllowedExternalEntityURLs_1 = objc.registerName(
    "setAllowedExternalEntityURLs:",
  );
  void _objc_msgSend_1031(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> value,
  ) {
    return __objc_msgSend_1031(obj, sel, value);
  }

  late final __objc_msgSend_1031Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1031 =
      __objc_msgSend_1031Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_parse1 = objc.registerName("parse");
  late final _sel_abortParsing1 = objc.registerName("abortParsing");
  late final _sel_parserError1 = objc.registerName("parserError");
  late final _sel_shouldResolveExternalEntities1 = objc.registerName(
    "shouldResolveExternalEntities",
  );
  late final _sel_setShouldResolveExternalEntities_1 = objc.registerName(
    "setShouldResolveExternalEntities:",
  );
  late final _sel_publicID1 = objc.registerName("publicID");
  late final _sel_systemID1 = objc.registerName("systemID");
  late final _sel_lineNumber1 = objc.registerName("lineNumber");
  late final _sel_columnNumber1 = objc.registerName("columnNumber");
  late final _class_NSFileWrapper1 = objc.getClass("NSFileWrapper");
  late final _sel_initWithURL_options_error_1 = objc.registerName(
    "initWithURL:options:error:",
  );
  instancetype _objc_msgSend_1032(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> url,
    int options,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError,
  ) {
    return __objc_msgSend_1032(obj, sel, url, options, outError);
  }

  late final __objc_msgSend_1032Ptr = _lookup<
    ffi.NativeFunction<
      instancetype Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Int32,
        ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1032 =
      __objc_msgSend_1032Ptr
          .asFunction<
            instancetype Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              int,
              ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
            )
          >();

  late final _sel_initDirectoryWithFileWrappers_1 = objc.registerName(
    "initDirectoryWithFileWrappers:",
  );
  late final _sel_initRegularFileWithContents_1 = objc.registerName(
    "initRegularFileWithContents:",
  );
  late final _sel_initSymbolicLinkWithDestinationURL_1 = objc.registerName(
    "initSymbolicLinkWithDestinationURL:",
  );
  late final _sel_initWithSerializedRepresentation_1 = objc.registerName(
    "initWithSerializedRepresentation:",
  );
  late final _sel_isDirectory1 = objc.registerName("isDirectory");
  late final _sel_isRegularFile1 = objc.registerName("isRegularFile");
  late final _sel_isSymbolicLink1 = objc.registerName("isSymbolicLink");
  late final _sel_preferredFilename1 = objc.registerName("preferredFilename");
  late final _sel_setPreferredFilename_1 = objc.registerName(
    "setPreferredFilename:",
  );
  late final _sel_filename1 = objc.registerName("filename");
  late final _sel_setFilename_1 = objc.registerName("setFilename:");
  late final _sel_fileAttributes1 = objc.registerName("fileAttributes");
  late final _sel_setFileAttributes_1 = objc.registerName("setFileAttributes:");
  late final _sel_matchesContentsOfURL_1 = objc.registerName(
    "matchesContentsOfURL:",
  );
  late final _sel_readFromURL_options_error_1 = objc.registerName(
    "readFromURL:options:error:",
  );
  bool _objc_msgSend_1033(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> url,
    int options,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError,
  ) {
    return __objc_msgSend_1033(obj, sel, url, options, outError);
  }

  late final __objc_msgSend_1033Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Bool Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Int32,
        ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1033 =
      __objc_msgSend_1033Ptr
          .asFunction<
            bool Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              int,
              ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
            )
          >();

  late final _sel_writeToURL_options_originalContentsURL_error_1 = objc
      .registerName("writeToURL:options:originalContentsURL:error:");
  bool _objc_msgSend_1034(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> url,
    int options,
    ffi.Pointer<objc.ObjCObject> originalContentsURL,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError,
  ) {
    return __objc_msgSend_1034(
      obj,
      sel,
      url,
      options,
      originalContentsURL,
      outError,
    );
  }

  late final __objc_msgSend_1034Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Bool Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Int32,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1034 =
      __objc_msgSend_1034Ptr
          .asFunction<
            bool Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              int,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
            )
          >();

  late final _sel_serializedRepresentation1 = objc.registerName(
    "serializedRepresentation",
  );
  late final _sel_addFileWrapper_1 = objc.registerName("addFileWrapper:");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_1035(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> child,
  ) {
    return __objc_msgSend_1035(obj, sel, child);
  }

  late final __objc_msgSend_1035Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1035 =
      __objc_msgSend_1035Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_addRegularFileWithContents_preferredFilename_1 = objc
      .registerName("addRegularFileWithContents:preferredFilename:");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_1036(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> data,
    ffi.Pointer<objc.ObjCObject> fileName,
  ) {
    return __objc_msgSend_1036(obj, sel, data, fileName);
  }

  late final __objc_msgSend_1036Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1036 =
      __objc_msgSend_1036Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_removeFileWrapper_1 = objc.registerName("removeFileWrapper:");
  void _objc_msgSend_1037(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> child,
  ) {
    return __objc_msgSend_1037(obj, sel, child);
  }

  late final __objc_msgSend_1037Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1037 =
      __objc_msgSend_1037Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_fileWrappers1 = objc.registerName("fileWrappers");
  late final _sel_keyForFileWrapper_1 = objc.registerName("keyForFileWrapper:");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_1038(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> child,
  ) {
    return __objc_msgSend_1038(obj, sel, child);
  }

  late final __objc_msgSend_1038Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1038 =
      __objc_msgSend_1038Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_regularFileContents1 = objc.registerName(
    "regularFileContents",
  );
  late final _sel_symbolicLinkDestinationURL1 = objc.registerName(
    "symbolicLinkDestinationURL",
  );
  late final _sel_initSymbolicLinkWithDestination_1 = objc.registerName(
    "initSymbolicLinkWithDestination:",
  );
  late final _sel_needsToBeUpdatedFromPath_1 = objc.registerName(
    "needsToBeUpdatedFromPath:",
  );
  late final _sel_updateFromPath_1 = objc.registerName("updateFromPath:");
  late final _sel_writeToFile_atomically_updateFilenames_1 = objc.registerName(
    "writeToFile:atomically:updateFilenames:",
  );
  bool _objc_msgSend_1039(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> path,
    bool atomicFlag,
    bool updateFilenamesFlag,
  ) {
    return __objc_msgSend_1039(obj, sel, path, atomicFlag, updateFilenamesFlag);
  }

  late final __objc_msgSend_1039Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Bool Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Bool,
        ffi.Bool,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1039 =
      __objc_msgSend_1039Ptr
          .asFunction<
            bool Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              bool,
              bool,
            )
          >();

  late final _sel_addFileWithPath_1 = objc.registerName("addFileWithPath:");
  late final _sel_addSymbolicLinkWithDestination_preferredFilename_1 = objc
      .registerName("addSymbolicLinkWithDestination:preferredFilename:");
  late final _sel_symbolicLinkDestination1 = objc.registerName(
    "symbolicLinkDestination",
  );
  late final _class_NSURLSession1 = objc.getClass("NSURLSession");
  late final _sel_sharedSession1 = objc.registerName("sharedSession");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_1040(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_1040(obj, sel);
  }

  late final __objc_msgSend_1040Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1040 =
      __objc_msgSend_1040Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _class_NSURLSessionConfiguration1 = objc.getClass(
    "NSURLSessionConfiguration",
  );
  late final _sel_defaultSessionConfiguration1 = objc.registerName(
    "defaultSessionConfiguration",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_1041(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_1041(obj, sel);
  }

  late final __objc_msgSend_1041Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1041 =
      __objc_msgSend_1041Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_ephemeralSessionConfiguration1 = objc.registerName(
    "ephemeralSessionConfiguration",
  );
  late final _sel_backgroundSessionConfigurationWithIdentifier_1 = objc
      .registerName("backgroundSessionConfigurationWithIdentifier:");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_1042(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> identifier,
  ) {
    return __objc_msgSend_1042(obj, sel, identifier);
  }

  late final __objc_msgSend_1042Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1042 =
      __objc_msgSend_1042Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_identifier1 = objc.registerName("identifier");
  late final _sel_requestCachePolicy1 = objc.registerName("requestCachePolicy");
  late final _sel_setRequestCachePolicy_1 = objc.registerName(
    "setRequestCachePolicy:",
  );
  late final _sel_timeoutIntervalForRequest1 = objc.registerName(
    "timeoutIntervalForRequest",
  );
  late final _sel_setTimeoutIntervalForRequest_1 = objc.registerName(
    "setTimeoutIntervalForRequest:",
  );
  late final _sel_timeoutIntervalForResource1 = objc.registerName(
    "timeoutIntervalForResource",
  );
  late final _sel_setTimeoutIntervalForResource_1 = objc.registerName(
    "setTimeoutIntervalForResource:",
  );
  late final _sel_waitsForConnectivity1 = objc.registerName(
    "waitsForConnectivity",
  );
  late final _sel_setWaitsForConnectivity_1 = objc.registerName(
    "setWaitsForConnectivity:",
  );
  late final _sel_isDiscretionary1 = objc.registerName("isDiscretionary");
  late final _sel_setDiscretionary_1 = objc.registerName("setDiscretionary:");
  late final _sel_sharedContainerIdentifier1 = objc.registerName(
    "sharedContainerIdentifier",
  );
  late final _sel_setSharedContainerIdentifier_1 = objc.registerName(
    "setSharedContainerIdentifier:",
  );
  late final _sel_sessionSendsLaunchEvents1 = objc.registerName(
    "sessionSendsLaunchEvents",
  );
  late final _sel_setSessionSendsLaunchEvents_1 = objc.registerName(
    "setSessionSendsLaunchEvents:",
  );
  late final _sel_connectionProxyDictionary1 = objc.registerName(
    "connectionProxyDictionary",
  );
  late final _sel_setConnectionProxyDictionary_1 = objc.registerName(
    "setConnectionProxyDictionary:",
  );
  late final _sel_TLSMinimumSupportedProtocol1 = objc.registerName(
    "TLSMinimumSupportedProtocol",
  );
  int _objc_msgSend_1043(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_1043(obj, sel);
  }

  late final __objc_msgSend_1043Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Int32 Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1043 =
      __objc_msgSend_1043Ptr
          .asFunction<
            int Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_setTLSMinimumSupportedProtocol_1 = objc.registerName(
    "setTLSMinimumSupportedProtocol:",
  );
  void _objc_msgSend_1044(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int value,
  ) {
    return __objc_msgSend_1044(obj, sel, value);
  }

  late final __objc_msgSend_1044Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Int32,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1044 =
      __objc_msgSend_1044Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
            )
          >();

  late final _sel_TLSMaximumSupportedProtocol1 = objc.registerName(
    "TLSMaximumSupportedProtocol",
  );
  late final _sel_setTLSMaximumSupportedProtocol_1 = objc.registerName(
    "setTLSMaximumSupportedProtocol:",
  );
  late final _sel_TLSMinimumSupportedProtocolVersion1 = objc.registerName(
    "TLSMinimumSupportedProtocolVersion",
  );
  int _objc_msgSend_1045(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_1045(obj, sel);
  }

  late final __objc_msgSend_1045Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Int32 Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1045 =
      __objc_msgSend_1045Ptr
          .asFunction<
            int Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_setTLSMinimumSupportedProtocolVersion_1 = objc.registerName(
    "setTLSMinimumSupportedProtocolVersion:",
  );
  void _objc_msgSend_1046(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int value,
  ) {
    return __objc_msgSend_1046(obj, sel, value);
  }

  late final __objc_msgSend_1046Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Int32,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1046 =
      __objc_msgSend_1046Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
            )
          >();

  late final _sel_TLSMaximumSupportedProtocolVersion1 = objc.registerName(
    "TLSMaximumSupportedProtocolVersion",
  );
  late final _sel_setTLSMaximumSupportedProtocolVersion_1 = objc.registerName(
    "setTLSMaximumSupportedProtocolVersion:",
  );
  late final _sel_HTTPShouldSetCookies1 = objc.registerName(
    "HTTPShouldSetCookies",
  );
  late final _sel_setHTTPShouldSetCookies_1 = objc.registerName(
    "setHTTPShouldSetCookies:",
  );
  late final _sel_HTTPCookieAcceptPolicy1 = objc.registerName(
    "HTTPCookieAcceptPolicy",
  );
  late final _sel_setHTTPCookieAcceptPolicy_1 = objc.registerName(
    "setHTTPCookieAcceptPolicy:",
  );
  late final _sel_HTTPAdditionalHeaders1 = objc.registerName(
    "HTTPAdditionalHeaders",
  );
  late final _sel_setHTTPAdditionalHeaders_1 = objc.registerName(
    "setHTTPAdditionalHeaders:",
  );
  late final _sel_HTTPMaximumConnectionsPerHost1 = objc.registerName(
    "HTTPMaximumConnectionsPerHost",
  );
  late final _sel_setHTTPMaximumConnectionsPerHost_1 = objc.registerName(
    "setHTTPMaximumConnectionsPerHost:",
  );
  late final _sel_HTTPCookieStorage1 = objc.registerName("HTTPCookieStorage");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_1047(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_1047(obj, sel);
  }

  late final __objc_msgSend_1047Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1047 =
      __objc_msgSend_1047Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_setHTTPCookieStorage_1 = objc.registerName(
    "setHTTPCookieStorage:",
  );
  void _objc_msgSend_1048(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> value,
  ) {
    return __objc_msgSend_1048(obj, sel, value);
  }

  late final __objc_msgSend_1048Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1048 =
      __objc_msgSend_1048Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_URLCredentialStorage1 = objc.registerName(
    "URLCredentialStorage",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_1049(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_1049(obj, sel);
  }

  late final __objc_msgSend_1049Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1049 =
      __objc_msgSend_1049Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_setURLCredentialStorage_1 = objc.registerName(
    "setURLCredentialStorage:",
  );
  void _objc_msgSend_1050(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> value,
  ) {
    return __objc_msgSend_1050(obj, sel, value);
  }

  late final __objc_msgSend_1050Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1050 =
      __objc_msgSend_1050Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_URLCache1 = objc.registerName("URLCache");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_1051(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_1051(obj, sel);
  }

  late final __objc_msgSend_1051Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1051 =
      __objc_msgSend_1051Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_setURLCache_1 = objc.registerName("setURLCache:");
  void _objc_msgSend_1052(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> value,
  ) {
    return __objc_msgSend_1052(obj, sel, value);
  }

  late final __objc_msgSend_1052Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1052 =
      __objc_msgSend_1052Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_shouldUseExtendedBackgroundIdleMode1 = objc.registerName(
    "shouldUseExtendedBackgroundIdleMode",
  );
  late final _sel_setShouldUseExtendedBackgroundIdleMode_1 = objc.registerName(
    "setShouldUseExtendedBackgroundIdleMode:",
  );
  late final _sel_protocolClasses1 = objc.registerName("protocolClasses");
  late final _sel_setProtocolClasses_1 = objc.registerName(
    "setProtocolClasses:",
  );
  void _objc_msgSend_1053(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> value,
  ) {
    return __objc_msgSend_1053(obj, sel, value);
  }

  late final __objc_msgSend_1053Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1053 =
      __objc_msgSend_1053Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_multipathServiceType1 = objc.registerName(
    "multipathServiceType",
  );
  int _objc_msgSend_1054(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_1054(obj, sel);
  }

  late final __objc_msgSend_1054Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Int32 Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1054 =
      __objc_msgSend_1054Ptr
          .asFunction<
            int Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_setMultipathServiceType_1 = objc.registerName(
    "setMultipathServiceType:",
  );
  void _objc_msgSend_1055(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int value,
  ) {
    return __objc_msgSend_1055(obj, sel, value);
  }

  late final __objc_msgSend_1055Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Int32,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1055 =
      __objc_msgSend_1055Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
            )
          >();

  late final _sel_backgroundSessionConfiguration_1 = objc.registerName(
    "backgroundSessionConfiguration:",
  );
  late final _sel_sessionWithConfiguration_1 = objc.registerName(
    "sessionWithConfiguration:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_1056(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> configuration,
  ) {
    return __objc_msgSend_1056(obj, sel, configuration);
  }

  late final __objc_msgSend_1056Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1056 =
      __objc_msgSend_1056Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_sessionWithConfiguration_delegate_delegateQueue_1 = objc
      .registerName("sessionWithConfiguration:delegate:delegateQueue:");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_1057(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> configuration,
    ffi.Pointer<objc.ObjCObject> delegate,
    ffi.Pointer<objc.ObjCObject> queue,
  ) {
    return __objc_msgSend_1057(obj, sel, configuration, delegate, queue);
  }

  late final __objc_msgSend_1057Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1057 =
      __objc_msgSend_1057Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_delegateQueue1 = objc.registerName("delegateQueue");
  late final _sel_configuration1 = objc.registerName("configuration");
  late final _sel_sessionDescription1 = objc.registerName("sessionDescription");
  late final _sel_setSessionDescription_1 = objc.registerName(
    "setSessionDescription:",
  );
  late final _sel_finishTasksAndInvalidate1 = objc.registerName(
    "finishTasksAndInvalidate",
  );
  late final _sel_invalidateAndCancel1 = objc.registerName(
    "invalidateAndCancel",
  );
  late final _sel_resetWithCompletionHandler_1 = objc.registerName(
    "resetWithCompletionHandler:",
  );
  late final _sel_flushWithCompletionHandler_1 = objc.registerName(
    "flushWithCompletionHandler:",
  );
  late final _sel_getTasksWithCompletionHandler_1 = objc.registerName(
    "getTasksWithCompletionHandler:",
  );
  void _objc_msgSend_1058(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCBlock> completionHandler,
  ) {
    return __objc_msgSend_1058(obj, sel, completionHandler);
  }

  late final __objc_msgSend_1058Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCBlock>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1058 =
      __objc_msgSend_1058Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCBlock>,
            )
          >();

  late final _sel_getAllTasksWithCompletionHandler_1 = objc.registerName(
    "getAllTasksWithCompletionHandler:",
  );
  void _objc_msgSend_1059(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCBlock> completionHandler,
  ) {
    return __objc_msgSend_1059(obj, sel, completionHandler);
  }

  late final __objc_msgSend_1059Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCBlock>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1059 =
      __objc_msgSend_1059Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCBlock>,
            )
          >();

  late final _sel_dataTaskWithRequest_1 = objc.registerName(
    "dataTaskWithRequest:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_1060(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> request,
  ) {
    return __objc_msgSend_1060(obj, sel, request);
  }

  late final __objc_msgSend_1060Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1060 =
      __objc_msgSend_1060Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_dataTaskWithURL_1 = objc.registerName("dataTaskWithURL:");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_1061(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> url,
  ) {
    return __objc_msgSend_1061(obj, sel, url);
  }

  late final __objc_msgSend_1061Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1061 =
      __objc_msgSend_1061Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _class_NSURLSessionUploadTask1 = objc.getClass(
    "NSURLSessionUploadTask",
  );
  late final _sel_cancelByProducingResumeData_1 = objc.registerName(
    "cancelByProducingResumeData:",
  );
  void _objc_msgSend_1062(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCBlock> completionHandler,
  ) {
    return __objc_msgSend_1062(obj, sel, completionHandler);
  }

  late final __objc_msgSend_1062Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCBlock>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1062 =
      __objc_msgSend_1062Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCBlock>,
            )
          >();

  late final _sel_uploadTaskWithRequest_fromFile_1 = objc.registerName(
    "uploadTaskWithRequest:fromFile:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_1063(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> request,
    ffi.Pointer<objc.ObjCObject> fileURL,
  ) {
    return __objc_msgSend_1063(obj, sel, request, fileURL);
  }

  late final __objc_msgSend_1063Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1063 =
      __objc_msgSend_1063Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_uploadTaskWithRequest_fromData_1 = objc.registerName(
    "uploadTaskWithRequest:fromData:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_1064(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> request,
    ffi.Pointer<objc.ObjCObject> bodyData,
  ) {
    return __objc_msgSend_1064(obj, sel, request, bodyData);
  }

  late final __objc_msgSend_1064Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1064 =
      __objc_msgSend_1064Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_uploadTaskWithResumeData_1 = objc.registerName(
    "uploadTaskWithResumeData:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_1065(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> resumeData,
  ) {
    return __objc_msgSend_1065(obj, sel, resumeData);
  }

  late final __objc_msgSend_1065Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1065 =
      __objc_msgSend_1065Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_uploadTaskWithStreamedRequest_1 = objc.registerName(
    "uploadTaskWithStreamedRequest:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_1066(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> request,
  ) {
    return __objc_msgSend_1066(obj, sel, request);
  }

  late final __objc_msgSend_1066Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1066 =
      __objc_msgSend_1066Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _class_NSURLSessionDownloadTask1 = objc.getClass(
    "NSURLSessionDownloadTask",
  );
  late final _sel_downloadTaskWithRequest_1 = objc.registerName(
    "downloadTaskWithRequest:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_1067(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> request,
  ) {
    return __objc_msgSend_1067(obj, sel, request);
  }

  late final __objc_msgSend_1067Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1067 =
      __objc_msgSend_1067Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_downloadTaskWithURL_1 = objc.registerName(
    "downloadTaskWithURL:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_1068(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> url,
  ) {
    return __objc_msgSend_1068(obj, sel, url);
  }

  late final __objc_msgSend_1068Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1068 =
      __objc_msgSend_1068Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_downloadTaskWithResumeData_1 = objc.registerName(
    "downloadTaskWithResumeData:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_1069(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> resumeData,
  ) {
    return __objc_msgSend_1069(obj, sel, resumeData);
  }

  late final __objc_msgSend_1069Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1069 =
      __objc_msgSend_1069Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _class_NSURLSessionStreamTask1 = objc.getClass(
    "NSURLSessionStreamTask",
  );
  late final _sel_readDataOfMinLength_maxLength_timeout_completionHandler_1 =
      objc.registerName(
        "readDataOfMinLength:maxLength:timeout:completionHandler:",
      );
  void _objc_msgSend_1070(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int minBytes,
    int maxBytes,
    double timeout,
    ffi.Pointer<objc.ObjCBlock> completionHandler,
  ) {
    return __objc_msgSend_1070(
      obj,
      sel,
      minBytes,
      maxBytes,
      timeout,
      completionHandler,
    );
  }

  late final __objc_msgSend_1070Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.UnsignedLong,
        ffi.UnsignedLong,
        ffi.Double,
        ffi.Pointer<objc.ObjCBlock>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1070 =
      __objc_msgSend_1070Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
              int,
              double,
              ffi.Pointer<objc.ObjCBlock>,
            )
          >();

  late final _sel_writeData_timeout_completionHandler_1 = objc.registerName(
    "writeData:timeout:completionHandler:",
  );
  void _objc_msgSend_1071(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> data,
    double timeout,
    ffi.Pointer<objc.ObjCBlock> completionHandler,
  ) {
    return __objc_msgSend_1071(obj, sel, data, timeout, completionHandler);
  }

  late final __objc_msgSend_1071Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Double,
        ffi.Pointer<objc.ObjCBlock>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1071 =
      __objc_msgSend_1071Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              double,
              ffi.Pointer<objc.ObjCBlock>,
            )
          >();

  late final _sel_captureStreams1 = objc.registerName("captureStreams");
  late final _sel_closeWrite1 = objc.registerName("closeWrite");
  late final _sel_closeRead1 = objc.registerName("closeRead");
  late final _sel_startSecureConnection1 = objc.registerName(
    "startSecureConnection",
  );
  late final _sel_stopSecureConnection1 = objc.registerName(
    "stopSecureConnection",
  );
  late final _sel_streamTaskWithHostName_port_1 = objc.registerName(
    "streamTaskWithHostName:port:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_1072(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> hostname,
    int port,
  ) {
    return __objc_msgSend_1072(obj, sel, hostname, port);
  }

  late final __objc_msgSend_1072Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Long,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1072 =
      __objc_msgSend_1072Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              int,
            )
          >();

  late final _class_NSNetService1 = objc.getClass("NSNetService");
  late final _sel_initWithDomain_type_name_port_1 = objc.registerName(
    "initWithDomain:type:name:port:",
  );
  instancetype _objc_msgSend_1073(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> domain,
    ffi.Pointer<objc.ObjCObject> type,
    ffi.Pointer<objc.ObjCObject> name,
    int port,
  ) {
    return __objc_msgSend_1073(obj, sel, domain, type, name, port);
  }

  late final __objc_msgSend_1073Ptr = _lookup<
    ffi.NativeFunction<
      instancetype Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Int,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1073 =
      __objc_msgSend_1073Ptr
          .asFunction<
            instancetype Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
              int,
            )
          >();

  late final _sel_initWithDomain_type_name_1 = objc.registerName(
    "initWithDomain:type:name:",
  );
  instancetype _objc_msgSend_1074(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> domain,
    ffi.Pointer<objc.ObjCObject> type,
    ffi.Pointer<objc.ObjCObject> name,
  ) {
    return __objc_msgSend_1074(obj, sel, domain, type, name);
  }

  late final __objc_msgSend_1074Ptr = _lookup<
    ffi.NativeFunction<
      instancetype Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1074 =
      __objc_msgSend_1074Ptr
          .asFunction<
            instancetype Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_includesPeerToPeer1 = objc.registerName("includesPeerToPeer");
  late final _sel_setIncludesPeerToPeer_1 = objc.registerName(
    "setIncludesPeerToPeer:",
  );
  late final _sel_type1 = objc.registerName("type");
  late final _sel_publishWithOptions_1 = objc.registerName(
    "publishWithOptions:",
  );
  void _objc_msgSend_1075(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int options,
  ) {
    return __objc_msgSend_1075(obj, sel, options);
  }

  late final __objc_msgSend_1075Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Int32,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1075 =
      __objc_msgSend_1075Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
            )
          >();

  late final _sel_resolve1 = objc.registerName("resolve");
  late final _sel_stop1 = objc.registerName("stop");
  late final _sel_dictionaryFromTXTRecordData_1 = objc.registerName(
    "dictionaryFromTXTRecordData:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_1076(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> txtData,
  ) {
    return __objc_msgSend_1076(obj, sel, txtData);
  }

  late final __objc_msgSend_1076Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1076 =
      __objc_msgSend_1076Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_dataFromTXTRecordDictionary_1 = objc.registerName(
    "dataFromTXTRecordDictionary:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_1077(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> txtDictionary,
  ) {
    return __objc_msgSend_1077(obj, sel, txtDictionary);
  }

  late final __objc_msgSend_1077Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1077 =
      __objc_msgSend_1077Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_resolveWithTimeout_1 = objc.registerName(
    "resolveWithTimeout:",
  );
  late final _sel_getInputStream_outputStream_1 = objc.registerName(
    "getInputStream:outputStream:",
  );
  bool _objc_msgSend_1078(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> inputStream,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outputStream,
  ) {
    return __objc_msgSend_1078(obj, sel, inputStream, outputStream);
  }

  late final __objc_msgSend_1078Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Bool Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
        ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1078 =
      __objc_msgSend_1078Ptr
          .asFunction<
            bool Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
              ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
            )
          >();

  late final _sel_setTXTRecordData_1 = objc.registerName("setTXTRecordData:");
  bool _objc_msgSend_1079(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> recordData,
  ) {
    return __objc_msgSend_1079(obj, sel, recordData);
  }

  late final __objc_msgSend_1079Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Bool Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1079 =
      __objc_msgSend_1079Ptr
          .asFunction<
            bool Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_TXTRecordData1 = objc.registerName("TXTRecordData");
  late final _sel_startMonitoring1 = objc.registerName("startMonitoring");
  late final _sel_stopMonitoring1 = objc.registerName("stopMonitoring");
  late final _sel_streamTaskWithNetService_1 = objc.registerName(
    "streamTaskWithNetService:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_1080(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> service,
  ) {
    return __objc_msgSend_1080(obj, sel, service);
  }

  late final __objc_msgSend_1080Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1080 =
      __objc_msgSend_1080Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _class_NSURLSessionWebSocketTask1 = objc.getClass(
    "NSURLSessionWebSocketTask",
  );
  late final _class_NSURLSessionWebSocketMessage1 = objc.getClass(
    "NSURLSessionWebSocketMessage",
  );
  int _objc_msgSend_1081(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_1081(obj, sel);
  }

  late final __objc_msgSend_1081Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Int32 Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1081 =
      __objc_msgSend_1081Ptr
          .asFunction<
            int Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_sendMessage_completionHandler_1 = objc.registerName(
    "sendMessage:completionHandler:",
  );
  void _objc_msgSend_1082(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> message,
    ffi.Pointer<objc.ObjCBlock> completionHandler,
  ) {
    return __objc_msgSend_1082(obj, sel, message, completionHandler);
  }

  late final __objc_msgSend_1082Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCBlock>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1082 =
      __objc_msgSend_1082Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCBlock>,
            )
          >();

  late final _sel_receiveMessageWithCompletionHandler_1 = objc.registerName(
    "receiveMessageWithCompletionHandler:",
  );
  void _objc_msgSend_1083(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCBlock> completionHandler,
  ) {
    return __objc_msgSend_1083(obj, sel, completionHandler);
  }

  late final __objc_msgSend_1083Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCBlock>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1083 =
      __objc_msgSend_1083Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCBlock>,
            )
          >();

  late final _sel_sendPingWithPongReceiveHandler_1 = objc.registerName(
    "sendPingWithPongReceiveHandler:",
  );
  void _objc_msgSend_1084(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCBlock> pongReceiveHandler,
  ) {
    return __objc_msgSend_1084(obj, sel, pongReceiveHandler);
  }

  late final __objc_msgSend_1084Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCBlock>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1084 =
      __objc_msgSend_1084Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCBlock>,
            )
          >();

  late final _sel_cancelWithCloseCode_reason_1 = objc.registerName(
    "cancelWithCloseCode:reason:",
  );
  void _objc_msgSend_1085(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int closeCode,
    ffi.Pointer<objc.ObjCObject> reason,
  ) {
    return __objc_msgSend_1085(obj, sel, closeCode, reason);
  }

  late final __objc_msgSend_1085Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Int32,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1085 =
      __objc_msgSend_1085Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_maximumMessageSize1 = objc.registerName("maximumMessageSize");
  late final _sel_setMaximumMessageSize_1 = objc.registerName(
    "setMaximumMessageSize:",
  );
  late final _sel_closeCode1 = objc.registerName("closeCode");
  int _objc_msgSend_1086(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_1086(obj, sel);
  }

  late final __objc_msgSend_1086Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Int32 Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1086 =
      __objc_msgSend_1086Ptr
          .asFunction<
            int Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_closeReason1 = objc.registerName("closeReason");
  late final _sel_webSocketTaskWithURL_1 = objc.registerName(
    "webSocketTaskWithURL:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_1087(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> url,
  ) {
    return __objc_msgSend_1087(obj, sel, url);
  }

  late final __objc_msgSend_1087Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1087 =
      __objc_msgSend_1087Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_webSocketTaskWithURL_protocols_1 = objc.registerName(
    "webSocketTaskWithURL:protocols:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_1088(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> url,
    ffi.Pointer<objc.ObjCObject> protocols,
  ) {
    return __objc_msgSend_1088(obj, sel, url, protocols);
  }

  late final __objc_msgSend_1088Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1088 =
      __objc_msgSend_1088Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_webSocketTaskWithRequest_1 = objc.registerName(
    "webSocketTaskWithRequest:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_1089(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> request,
  ) {
    return __objc_msgSend_1089(obj, sel, request);
  }

  late final __objc_msgSend_1089Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1089 =
      __objc_msgSend_1089Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_dataTaskWithRequest_completionHandler_1 = objc.registerName(
    "dataTaskWithRequest:completionHandler:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_1090(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> request,
    ffi.Pointer<objc.ObjCBlock> completionHandler,
  ) {
    return __objc_msgSend_1090(obj, sel, request, completionHandler);
  }

  late final __objc_msgSend_1090Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCBlock>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1090 =
      __objc_msgSend_1090Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCBlock>,
            )
          >();

  late final _sel_dataTaskWithURL_completionHandler_1 = objc.registerName(
    "dataTaskWithURL:completionHandler:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_1091(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> url,
    ffi.Pointer<objc.ObjCBlock> completionHandler,
  ) {
    return __objc_msgSend_1091(obj, sel, url, completionHandler);
  }

  late final __objc_msgSend_1091Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCBlock>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1091 =
      __objc_msgSend_1091Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCBlock>,
            )
          >();

  late final _sel_uploadTaskWithRequest_fromFile_completionHandler_1 = objc
      .registerName("uploadTaskWithRequest:fromFile:completionHandler:");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_1092(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> request,
    ffi.Pointer<objc.ObjCObject> fileURL,
    ffi.Pointer<objc.ObjCBlock> completionHandler,
  ) {
    return __objc_msgSend_1092(obj, sel, request, fileURL, completionHandler);
  }

  late final __objc_msgSend_1092Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCBlock>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1092 =
      __objc_msgSend_1092Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCBlock>,
            )
          >();

  late final _sel_uploadTaskWithRequest_fromData_completionHandler_1 = objc
      .registerName("uploadTaskWithRequest:fromData:completionHandler:");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_1093(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> request,
    ffi.Pointer<objc.ObjCObject> bodyData,
    ffi.Pointer<objc.ObjCBlock> completionHandler,
  ) {
    return __objc_msgSend_1093(obj, sel, request, bodyData, completionHandler);
  }

  late final __objc_msgSend_1093Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCBlock>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1093 =
      __objc_msgSend_1093Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCBlock>,
            )
          >();

  late final _sel_uploadTaskWithResumeData_completionHandler_1 = objc
      .registerName("uploadTaskWithResumeData:completionHandler:");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_1094(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> resumeData,
    ffi.Pointer<objc.ObjCBlock> completionHandler,
  ) {
    return __objc_msgSend_1094(obj, sel, resumeData, completionHandler);
  }

  late final __objc_msgSend_1094Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCBlock>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1094 =
      __objc_msgSend_1094Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCBlock>,
            )
          >();

  late final _sel_downloadTaskWithRequest_completionHandler_1 = objc
      .registerName("downloadTaskWithRequest:completionHandler:");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_1095(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> request,
    ffi.Pointer<objc.ObjCBlock> completionHandler,
  ) {
    return __objc_msgSend_1095(obj, sel, request, completionHandler);
  }

  late final __objc_msgSend_1095Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCBlock>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1095 =
      __objc_msgSend_1095Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCBlock>,
            )
          >();

  late final _sel_downloadTaskWithURL_completionHandler_1 = objc.registerName(
    "downloadTaskWithURL:completionHandler:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_1096(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> url,
    ffi.Pointer<objc.ObjCBlock> completionHandler,
  ) {
    return __objc_msgSend_1096(obj, sel, url, completionHandler);
  }

  late final __objc_msgSend_1096Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCBlock>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1096 =
      __objc_msgSend_1096Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCBlock>,
            )
          >();

  late final _sel_downloadTaskWithResumeData_completionHandler_1 = objc
      .registerName("downloadTaskWithResumeData:completionHandler:");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_1097(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> resumeData,
    ffi.Pointer<objc.ObjCBlock> completionHandler,
  ) {
    return __objc_msgSend_1097(obj, sel, resumeData, completionHandler);
  }

  late final __objc_msgSend_1097Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCBlock>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1097 =
      __objc_msgSend_1097Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCBlock>,
            )
          >();

  late final _class_NSProtocolChecker1 = objc.getClass("NSProtocolChecker");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_1098(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_1098(obj, sel);
  }

  late final __objc_msgSend_1098Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1098 =
      __objc_msgSend_1098Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  ffi.Pointer<objc.ObjCObject> _objc_msgSend_1099(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_1099(obj, sel);
  }

  late final __objc_msgSend_1099Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1099 =
      __objc_msgSend_1099Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_protocolCheckerWithTarget_protocol_1 = objc.registerName(
    "protocolCheckerWithTarget:protocol:",
  );
  instancetype _objc_msgSend_1100(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> anObject,
    ffi.Pointer<objc.ObjCObject> aProtocol,
  ) {
    return __objc_msgSend_1100(obj, sel, anObject, aProtocol);
  }

  late final __objc_msgSend_1100Ptr = _lookup<
    ffi.NativeFunction<
      instancetype Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1100 =
      __objc_msgSend_1100Ptr
          .asFunction<
            instancetype Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_initWithTarget_protocol_1 = objc.registerName(
    "initWithTarget:protocol:",
  );
  late final _class_NSTask1 = objc.getClass("NSTask");
  late final _sel_setExecutableURL_1 = objc.registerName("setExecutableURL:");
  late final _sel_setEnvironment_1 = objc.registerName("setEnvironment:");
  late final _sel_currentDirectoryURL1 = objc.registerName(
    "currentDirectoryURL",
  );
  late final _sel_setCurrentDirectoryURL_1 = objc.registerName(
    "setCurrentDirectoryURL:",
  );
  late final _sel_launchRequirementData1 = objc.registerName(
    "launchRequirementData",
  );
  late final _sel_setLaunchRequirementData_1 = objc.registerName(
    "setLaunchRequirementData:",
  );
  late final _sel_standardInput1 = objc.registerName("standardInput");
  late final _sel_setStandardInput_1 = objc.registerName("setStandardInput:");
  late final _sel_standardOutput1 = objc.registerName("standardOutput");
  late final _sel_setStandardOutput_1 = objc.registerName("setStandardOutput:");
  late final _sel_standardError1 = objc.registerName("standardError");
  late final _sel_setStandardError_1 = objc.registerName("setStandardError:");
  late final _sel_launchAndReturnError_1 = objc.registerName(
    "launchAndReturnError:",
  );
  late final _sel_interrupt1 = objc.registerName("interrupt");
  late final _sel_terminate1 = objc.registerName("terminate");
  late final _sel_isRunning1 = objc.registerName("isRunning");
  late final _sel_terminationStatus1 = objc.registerName("terminationStatus");
  late final _sel_terminationReason1 = objc.registerName("terminationReason");
  int _objc_msgSend_1101(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_1101(obj, sel);
  }

  late final __objc_msgSend_1101Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Int32 Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1101 =
      __objc_msgSend_1101Ptr
          .asFunction<
            int Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_terminationHandler1 = objc.registerName("terminationHandler");
  ffi.Pointer<objc.ObjCBlock> _objc_msgSend_1102(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_1102(obj, sel);
  }

  late final __objc_msgSend_1102Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCBlock> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1102 =
      __objc_msgSend_1102Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCBlock> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_setTerminationHandler_1 = objc.registerName(
    "setTerminationHandler:",
  );
  void _objc_msgSend_1103(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCBlock> value,
  ) {
    return __objc_msgSend_1103(obj, sel, value);
  }

  late final __objc_msgSend_1103Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCBlock>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1103 =
      __objc_msgSend_1103Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCBlock>,
            )
          >();

  late final _sel_launchedTaskWithExecutableURL_arguments_error_terminationHandler_1 =
      objc.registerName(
        "launchedTaskWithExecutableURL:arguments:error:terminationHandler:",
      );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_1104(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> url,
    ffi.Pointer<objc.ObjCObject> arguments,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
    ffi.Pointer<objc.ObjCBlock> terminationHandler,
  ) {
    return __objc_msgSend_1104(
      obj,
      sel,
      url,
      arguments,
      error,
      terminationHandler,
    );
  }

  late final __objc_msgSend_1104Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
        ffi.Pointer<objc.ObjCBlock>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1104 =
      __objc_msgSend_1104Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
              ffi.Pointer<objc.ObjCBlock>,
            )
          >();

  late final _sel_waitUntilExit1 = objc.registerName("waitUntilExit");
  late final _sel_launchPath1 = objc.registerName("launchPath");
  late final _sel_setLaunchPath_1 = objc.registerName("setLaunchPath:");
  late final _sel_setCurrentDirectoryPath_1 = objc.registerName(
    "setCurrentDirectoryPath:",
  );
  late final _sel_launch1 = objc.registerName("launch");
  late final _sel_launchedTaskWithLaunchPath_arguments_1 = objc.registerName(
    "launchedTaskWithLaunchPath:arguments:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_1105(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> path,
    ffi.Pointer<objc.ObjCObject> arguments,
  ) {
    return __objc_msgSend_1105(obj, sel, path, arguments);
  }

  late final __objc_msgSend_1105Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1105 =
      __objc_msgSend_1105Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _class_NSXMLElement1 = objc.getClass("NSXMLElement");
  late final _class_NSXMLNode1 = objc.getClass("NSXMLNode");
  late final _sel_initWithKind_1 = objc.registerName("initWithKind:");
  instancetype _objc_msgSend_1106(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int kind,
  ) {
    return __objc_msgSend_1106(obj, sel, kind);
  }

  late final __objc_msgSend_1106Ptr = _lookup<
    ffi.NativeFunction<
      instancetype Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Int32,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1106 =
      __objc_msgSend_1106Ptr
          .asFunction<
            instancetype Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
            )
          >();

  late final _sel_initWithKind_options_1 = objc.registerName(
    "initWithKind:options:",
  );
  instancetype _objc_msgSend_1107(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int kind,
    int options,
  ) {
    return __objc_msgSend_1107(obj, sel, kind, options);
  }

  late final __objc_msgSend_1107Ptr = _lookup<
    ffi.NativeFunction<
      instancetype Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Int32,
        ffi.Int32,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1107 =
      __objc_msgSend_1107Ptr
          .asFunction<
            instancetype Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
              int,
            )
          >();

  late final _sel_document1 = objc.registerName("document");
  late final _sel_documentWithRootElement_1 = objc.registerName(
    "documentWithRootElement:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_1108(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> element,
  ) {
    return __objc_msgSend_1108(obj, sel, element);
  }

  late final __objc_msgSend_1108Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1108 =
      __objc_msgSend_1108Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_elementWithName_1 = objc.registerName("elementWithName:");
  late final _sel_elementWithName_URI_1 = objc.registerName(
    "elementWithName:URI:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_1109(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> name,
    ffi.Pointer<objc.ObjCObject> URI,
  ) {
    return __objc_msgSend_1109(obj, sel, name, URI);
  }

  late final __objc_msgSend_1109Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1109 =
      __objc_msgSend_1109Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_elementWithName_stringValue_1 = objc.registerName(
    "elementWithName:stringValue:",
  );
  late final _sel_elementWithName_children_attributes_1 = objc.registerName(
    "elementWithName:children:attributes:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_1110(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> name,
    ffi.Pointer<objc.ObjCObject> children,
    ffi.Pointer<objc.ObjCObject> attributes,
  ) {
    return __objc_msgSend_1110(obj, sel, name, children, attributes);
  }

  late final __objc_msgSend_1110Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1110 =
      __objc_msgSend_1110Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_attributeWithName_stringValue_1 = objc.registerName(
    "attributeWithName:stringValue:",
  );
  late final _sel_attributeWithName_URI_stringValue_1 = objc.registerName(
    "attributeWithName:URI:stringValue:",
  );
  late final _sel_namespaceWithName_stringValue_1 = objc.registerName(
    "namespaceWithName:stringValue:",
  );
  late final _sel_processingInstructionWithName_stringValue_1 = objc
      .registerName("processingInstructionWithName:stringValue:");
  late final _sel_commentWithStringValue_1 = objc.registerName(
    "commentWithStringValue:",
  );
  late final _sel_textWithStringValue_1 = objc.registerName(
    "textWithStringValue:",
  );
  late final _sel_DTDNodeWithXMLString_1 = objc.registerName(
    "DTDNodeWithXMLString:",
  );
  int _objc_msgSend_1111(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_1111(obj, sel);
  }

  late final __objc_msgSend_1111Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Int32 Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1111 =
      __objc_msgSend_1111Ptr
          .asFunction<
            int Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_objectValue1 = objc.registerName("objectValue");
  late final _sel_setObjectValue_1 = objc.registerName("setObjectValue:");
  late final _sel_setStringValue_1 = objc.registerName("setStringValue:");
  late final _sel_setStringValue_resolvingEntities_1 = objc.registerName(
    "setStringValue:resolvingEntities:",
  );
  void _objc_msgSend_1112(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> string,
    bool resolve,
  ) {
    return __objc_msgSend_1112(obj, sel, string, resolve);
  }

  late final __objc_msgSend_1112Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Bool,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1112 =
      __objc_msgSend_1112Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              bool,
            )
          >();

  late final _sel_index1 = objc.registerName("index");
  late final _sel_level1 = objc.registerName("level");
  late final _class_NSXMLDocument1 = objc.getClass("NSXMLDocument");
  late final _sel_initWithXMLString_options_error_1 = objc.registerName(
    "initWithXMLString:options:error:",
  );
  instancetype _objc_msgSend_1113(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> string,
    int mask,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    return __objc_msgSend_1113(obj, sel, string, mask, error);
  }

  late final __objc_msgSend_1113Ptr = _lookup<
    ffi.NativeFunction<
      instancetype Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Int32,
        ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1113 =
      __objc_msgSend_1113Ptr
          .asFunction<
            instancetype Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              int,
              ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
            )
          >();

  instancetype _objc_msgSend_1114(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> url,
    int mask,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    return __objc_msgSend_1114(obj, sel, url, mask, error);
  }

  late final __objc_msgSend_1114Ptr = _lookup<
    ffi.NativeFunction<
      instancetype Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Int32,
        ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1114 =
      __objc_msgSend_1114Ptr
          .asFunction<
            instancetype Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              int,
              ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
            )
          >();

  late final _sel_initWithData_options_error_1 = objc.registerName(
    "initWithData:options:error:",
  );
  instancetype _objc_msgSend_1115(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> data,
    int mask,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    return __objc_msgSend_1115(obj, sel, data, mask, error);
  }

  late final __objc_msgSend_1115Ptr = _lookup<
    ffi.NativeFunction<
      instancetype Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Int32,
        ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1115 =
      __objc_msgSend_1115Ptr
          .asFunction<
            instancetype Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              int,
              ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
            )
          >();

  late final _sel_initWithRootElement_1 = objc.registerName(
    "initWithRootElement:",
  );
  instancetype _objc_msgSend_1116(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> element,
  ) {
    return __objc_msgSend_1116(obj, sel, element);
  }

  late final __objc_msgSend_1116Ptr = _lookup<
    ffi.NativeFunction<
      instancetype Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1116 =
      __objc_msgSend_1116Ptr
          .asFunction<
            instancetype Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_replacementClassForClass_1 = objc.registerName(
    "replacementClassForClass:",
  );
  late final _sel_characterEncoding1 = objc.registerName("characterEncoding");
  late final _sel_setCharacterEncoding_1 = objc.registerName(
    "setCharacterEncoding:",
  );
  late final _sel_isStandalone1 = objc.registerName("isStandalone");
  late final _sel_setStandalone_1 = objc.registerName("setStandalone:");
  late final _sel_documentContentKind1 = objc.registerName(
    "documentContentKind",
  );
  int _objc_msgSend_1117(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_1117(obj, sel);
  }

  late final __objc_msgSend_1117Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Int32 Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1117 =
      __objc_msgSend_1117Ptr
          .asFunction<
            int Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_setDocumentContentKind_1 = objc.registerName(
    "setDocumentContentKind:",
  );
  void _objc_msgSend_1118(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int value,
  ) {
    return __objc_msgSend_1118(obj, sel, value);
  }

  late final __objc_msgSend_1118Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Int32,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1118 =
      __objc_msgSend_1118Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
            )
          >();

  late final _sel_setMIMEType_1 = objc.registerName("setMIMEType:");
  late final _class_NSXMLDTD1 = objc.getClass("NSXMLDTD");
  late final _sel_setPublicID_1 = objc.registerName("setPublicID:");
  late final _sel_setSystemID_1 = objc.registerName("setSystemID:");
  late final _sel_insertChild_atIndex_1 = objc.registerName(
    "insertChild:atIndex:",
  );
  void _objc_msgSend_1119(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> child,
    int index,
  ) {
    return __objc_msgSend_1119(obj, sel, child, index);
  }

  late final __objc_msgSend_1119Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.UnsignedLong,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1119 =
      __objc_msgSend_1119Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              int,
            )
          >();

  late final _sel_insertChildren_atIndex_1 = objc.registerName(
    "insertChildren:atIndex:",
  );
  void _objc_msgSend_1120(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> children,
    int index,
  ) {
    return __objc_msgSend_1120(obj, sel, children, index);
  }

  late final __objc_msgSend_1120Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.UnsignedLong,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1120 =
      __objc_msgSend_1120Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              int,
            )
          >();

  late final _sel_removeChildAtIndex_1 = objc.registerName(
    "removeChildAtIndex:",
  );
  late final _sel_setChildren_1 = objc.registerName("setChildren:");
  late final _sel_addChild_1 = objc.registerName("addChild:");
  void _objc_msgSend_1121(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> child,
  ) {
    return __objc_msgSend_1121(obj, sel, child);
  }

  late final __objc_msgSend_1121Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1121 =
      __objc_msgSend_1121Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_replaceChildAtIndex_withNode_1 = objc.registerName(
    "replaceChildAtIndex:withNode:",
  );
  void _objc_msgSend_1122(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int index,
    ffi.Pointer<objc.ObjCObject> node,
  ) {
    return __objc_msgSend_1122(obj, sel, index, node);
  }

  late final __objc_msgSend_1122Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.UnsignedLong,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1122 =
      __objc_msgSend_1122Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _class_NSXMLDTDNode1 = objc.getClass("NSXMLDTDNode");
  late final _sel_initWithXMLString_1 = objc.registerName("initWithXMLString:");
  late final _sel_DTDKind1 = objc.registerName("DTDKind");
  int _objc_msgSend_1123(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_1123(obj, sel);
  }

  late final __objc_msgSend_1123Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Int32 Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1123 =
      __objc_msgSend_1123Ptr
          .asFunction<
            int Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_setDTDKind_1 = objc.registerName("setDTDKind:");
  void _objc_msgSend_1124(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int value,
  ) {
    return __objc_msgSend_1124(obj, sel, value);
  }

  late final __objc_msgSend_1124Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Int32,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1124 =
      __objc_msgSend_1124Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
            )
          >();

  late final _sel_isExternal1 = objc.registerName("isExternal");
  late final _sel_notationName1 = objc.registerName("notationName");
  late final _sel_setNotationName_1 = objc.registerName("setNotationName:");
  late final _sel_localNameForName_1 = objc.registerName("localNameForName:");
  late final _sel_prefixForName_1 = objc.registerName("prefixForName:");
  late final _sel_predefinedNamespaceForPrefix_1 = objc.registerName(
    "predefinedNamespaceForPrefix:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_1125(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> name,
  ) {
    return __objc_msgSend_1125(obj, sel, name);
  }

  late final __objc_msgSend_1125Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1125 =
      __objc_msgSend_1125Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_entityDeclarationForName_1 = objc.registerName(
    "entityDeclarationForName:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_1126(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> name,
  ) {
    return __objc_msgSend_1126(obj, sel, name);
  }

  late final __objc_msgSend_1126Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1126 =
      __objc_msgSend_1126Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_notationDeclarationForName_1 = objc.registerName(
    "notationDeclarationForName:",
  );
  late final _sel_elementDeclarationForName_1 = objc.registerName(
    "elementDeclarationForName:",
  );
  late final _sel_attributeDeclarationForName_elementName_1 = objc.registerName(
    "attributeDeclarationForName:elementName:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_1127(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> name,
    ffi.Pointer<objc.ObjCObject> elementName,
  ) {
    return __objc_msgSend_1127(obj, sel, name, elementName);
  }

  late final __objc_msgSend_1127Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1127 =
      __objc_msgSend_1127Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_predefinedEntityDeclarationForName_1 = objc.registerName(
    "predefinedEntityDeclarationForName:",
  );
  late final _sel_DTD1 = objc.registerName("DTD");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_1128(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_1128(obj, sel);
  }

  late final __objc_msgSend_1128Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1128 =
      __objc_msgSend_1128Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_setDTD_1 = objc.registerName("setDTD:");
  void _objc_msgSend_1129(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> value,
  ) {
    return __objc_msgSend_1129(obj, sel, value);
  }

  late final __objc_msgSend_1129Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1129 =
      __objc_msgSend_1129Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_setRootElement_1 = objc.registerName("setRootElement:");
  void _objc_msgSend_1130(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> root,
  ) {
    return __objc_msgSend_1130(obj, sel, root);
  }

  late final __objc_msgSend_1130Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1130 =
      __objc_msgSend_1130Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_rootElement1 = objc.registerName("rootElement");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_1131(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_1131(obj, sel);
  }

  late final __objc_msgSend_1131Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1131 =
      __objc_msgSend_1131Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_XMLData1 = objc.registerName("XMLData");
  late final _sel_XMLDataWithOptions_1 = objc.registerName(
    "XMLDataWithOptions:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_1132(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int options,
  ) {
    return __objc_msgSend_1132(obj, sel, options);
  }

  late final __objc_msgSend_1132Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Int32,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1132 =
      __objc_msgSend_1132Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
            )
          >();

  late final _sel_objectByApplyingXSLT_arguments_error_1 = objc.registerName(
    "objectByApplyingXSLT:arguments:error:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_1133(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> xslt,
    ffi.Pointer<objc.ObjCObject> arguments,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    return __objc_msgSend_1133(obj, sel, xslt, arguments, error);
  }

  late final __objc_msgSend_1133Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1133 =
      __objc_msgSend_1133Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
            )
          >();

  late final _sel_objectByApplyingXSLTString_arguments_error_1 = objc
      .registerName("objectByApplyingXSLTString:arguments:error:");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_1134(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> xslt,
    ffi.Pointer<objc.ObjCObject> arguments,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    return __objc_msgSend_1134(obj, sel, xslt, arguments, error);
  }

  late final __objc_msgSend_1134Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1134 =
      __objc_msgSend_1134Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
            )
          >();

  late final _sel_objectByApplyingXSLTAtURL_arguments_error_1 = objc
      .registerName("objectByApplyingXSLTAtURL:arguments:error:");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_1135(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> xsltURL,
    ffi.Pointer<objc.ObjCObject> argument,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    return __objc_msgSend_1135(obj, sel, xsltURL, argument, error);
  }

  late final __objc_msgSend_1135Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1135 =
      __objc_msgSend_1135Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
            )
          >();

  late final _sel_validateAndReturnError_1 = objc.registerName(
    "validateAndReturnError:",
  );
  late final _sel_rootDocument1 = objc.registerName("rootDocument");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_1136(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_1136(obj, sel);
  }

  late final __objc_msgSend_1136Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1136 =
      __objc_msgSend_1136Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_parent1 = objc.registerName("parent");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_1137(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_1137(obj, sel);
  }

  late final __objc_msgSend_1137Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1137 =
      __objc_msgSend_1137Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_childCount1 = objc.registerName("childCount");
  late final _sel_children1 = objc.registerName("children");
  late final _sel_childAtIndex_1 = objc.registerName("childAtIndex:");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_1138(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int index,
  ) {
    return __objc_msgSend_1138(obj, sel, index);
  }

  late final __objc_msgSend_1138Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.UnsignedLong,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1138 =
      __objc_msgSend_1138Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
            )
          >();

  late final _sel_previousSibling1 = objc.registerName("previousSibling");
  late final _sel_nextSibling1 = objc.registerName("nextSibling");
  late final _sel_previousNode1 = objc.registerName("previousNode");
  late final _sel_nextNode1 = objc.registerName("nextNode");
  late final _sel_detach1 = objc.registerName("detach");
  late final _sel_XPath1 = objc.registerName("XPath");
  late final _sel_localName1 = objc.registerName("localName");
  late final _sel_prefix1 = objc.registerName("prefix");
  late final _sel_URI1 = objc.registerName("URI");
  late final _sel_setURI_1 = objc.registerName("setURI:");
  late final _sel_XMLString1 = objc.registerName("XMLString");
  late final _sel_XMLStringWithOptions_1 = objc.registerName(
    "XMLStringWithOptions:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_1139(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int options,
  ) {
    return __objc_msgSend_1139(obj, sel, options);
  }

  late final __objc_msgSend_1139Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Int32,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1139 =
      __objc_msgSend_1139Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
            )
          >();

  late final _sel_canonicalXMLStringPreservingComments_1 = objc.registerName(
    "canonicalXMLStringPreservingComments:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_1140(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    bool comments,
  ) {
    return __objc_msgSend_1140(obj, sel, comments);
  }

  late final __objc_msgSend_1140Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Bool,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1140 =
      __objc_msgSend_1140Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              bool,
            )
          >();

  late final _sel_nodesForXPath_error_1 = objc.registerName(
    "nodesForXPath:error:",
  );
  late final _sel_objectsForXQuery_constants_error_1 = objc.registerName(
    "objectsForXQuery:constants:error:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_1141(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> xquery,
    ffi.Pointer<objc.ObjCObject> constants,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    return __objc_msgSend_1141(obj, sel, xquery, constants, error);
  }

  late final __objc_msgSend_1141Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1141 =
      __objc_msgSend_1141Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
            )
          >();

  late final _sel_objectsForXQuery_error_1 = objc.registerName(
    "objectsForXQuery:error:",
  );
  late final _sel_initWithName_URI_1 = objc.registerName("initWithName:URI:");
  instancetype _objc_msgSend_1142(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> name,
    ffi.Pointer<objc.ObjCObject> URI,
  ) {
    return __objc_msgSend_1142(obj, sel, name, URI);
  }

  late final __objc_msgSend_1142Ptr = _lookup<
    ffi.NativeFunction<
      instancetype Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1142 =
      __objc_msgSend_1142Ptr
          .asFunction<
            instancetype Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_initWithName_stringValue_1 = objc.registerName(
    "initWithName:stringValue:",
  );
  late final _sel_initWithXMLString_error_1 = objc.registerName(
    "initWithXMLString:error:",
  );
  late final _sel_elementsForName_1 = objc.registerName("elementsForName:");
  late final _sel_elementsForLocalName_URI_1 = objc.registerName(
    "elementsForLocalName:URI:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_1143(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> localName,
    ffi.Pointer<objc.ObjCObject> URI,
  ) {
    return __objc_msgSend_1143(obj, sel, localName, URI);
  }

  late final __objc_msgSend_1143Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1143 =
      __objc_msgSend_1143Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_addAttribute_1 = objc.registerName("addAttribute:");
  late final _sel_removeAttributeForName_1 = objc.registerName(
    "removeAttributeForName:",
  );
  late final _sel_attributes1 = objc.registerName("attributes");
  late final _sel_setAttributes_1 = objc.registerName("setAttributes:");
  late final _sel_setAttributesWithDictionary_1 = objc.registerName(
    "setAttributesWithDictionary:",
  );
  late final _sel_attributeForName_1 = objc.registerName("attributeForName:");
  late final _sel_attributeForLocalName_URI_1 = objc.registerName(
    "attributeForLocalName:URI:",
  );
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_1144(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> localName,
    ffi.Pointer<objc.ObjCObject> URI,
  ) {
    return __objc_msgSend_1144(obj, sel, localName, URI);
  }

  late final __objc_msgSend_1144Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1144 =
      __objc_msgSend_1144Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_addNamespace_1 = objc.registerName("addNamespace:");
  late final _sel_removeNamespaceForPrefix_1 = objc.registerName(
    "removeNamespaceForPrefix:",
  );
  late final _sel_namespaces1 = objc.registerName("namespaces");
  late final _sel_setNamespaces_1 = objc.registerName("setNamespaces:");
  late final _sel_namespaceForPrefix_1 = objc.registerName(
    "namespaceForPrefix:",
  );
  late final _sel_resolveNamespaceForName_1 = objc.registerName(
    "resolveNamespaceForName:",
  );
  late final _sel_resolvePrefixForNamespaceURI_1 = objc.registerName(
    "resolvePrefixForNamespaceURI:",
  );
  late final _sel_normalizeAdjacentTextNodesPreservingCDATA_1 = objc
      .registerName("normalizeAdjacentTextNodesPreservingCDATA:");
  late final _sel_setAttributesAsDictionary_1 = objc.registerName(
    "setAttributesAsDictionary:",
  );
  late final _class_AVAudioSession1 = objc.getClass("AVAudioSession");
  late final _sel_sharedInstance1 = objc.registerName("sharedInstance");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_1145(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_1145(obj, sel);
  }

  late final __objc_msgSend_1145Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1145 =
      __objc_msgSend_1145Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_availableCategories1 = objc.registerName(
    "availableCategories",
  );
  late final _sel_setCategory_error_1 = objc.registerName("setCategory:error:");
  late final _sel_setCategory_withOptions_error_1 = objc.registerName(
    "setCategory:withOptions:error:",
  );
  bool _objc_msgSend_1146(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> category,
    int options,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError,
  ) {
    return __objc_msgSend_1146(obj, sel, category, options, outError);
  }

  late final __objc_msgSend_1146Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Bool Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Int32,
        ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1146 =
      __objc_msgSend_1146Ptr
          .asFunction<
            bool Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              int,
              ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
            )
          >();

  late final _sel_setCategory_mode_options_error_1 = objc.registerName(
    "setCategory:mode:options:error:",
  );
  bool _objc_msgSend_1147(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> category,
    ffi.Pointer<objc.ObjCObject> mode,
    int options,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError,
  ) {
    return __objc_msgSend_1147(obj, sel, category, mode, options, outError);
  }

  late final __objc_msgSend_1147Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Bool Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Int32,
        ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1147 =
      __objc_msgSend_1147Ptr
          .asFunction<
            bool Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
              int,
              ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
            )
          >();

  late final _sel_setCategory_mode_routeSharingPolicy_options_error_1 = objc
      .registerName("setCategory:mode:routeSharingPolicy:options:error:");
  bool _objc_msgSend_1148(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> category,
    ffi.Pointer<objc.ObjCObject> mode,
    int policy,
    int options,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError,
  ) {
    return __objc_msgSend_1148(
      obj,
      sel,
      category,
      mode,
      policy,
      options,
      outError,
    );
  }

  late final __objc_msgSend_1148Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Bool Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Int32,
        ffi.Int32,
        ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1148 =
      __objc_msgSend_1148Ptr
          .asFunction<
            bool Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
              int,
              int,
              ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
            )
          >();

  late final _sel_category1 = objc.registerName("category");
  late final _sel_categoryOptions1 = objc.registerName("categoryOptions");
  int _objc_msgSend_1149(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_1149(obj, sel);
  }

  late final __objc_msgSend_1149Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Int32 Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1149 =
      __objc_msgSend_1149Ptr
          .asFunction<
            int Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_routeSharingPolicy1 = objc.registerName("routeSharingPolicy");
  int _objc_msgSend_1150(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_1150(obj, sel);
  }

  late final __objc_msgSend_1150Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Int32 Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1150 =
      __objc_msgSend_1150Ptr
          .asFunction<
            int Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_availableModes1 = objc.registerName("availableModes");
  late final _sel_setMode_error_1 = objc.registerName("setMode:error:");
  late final _sel_mode1 = objc.registerName("mode");
  late final _sel_setAllowHapticsAndSystemSoundsDuringRecording_error_1 = objc
      .registerName("setAllowHapticsAndSystemSoundsDuringRecording:error:");
  bool _objc_msgSend_1151(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    bool inValue,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError,
  ) {
    return __objc_msgSend_1151(obj, sel, inValue, outError);
  }

  late final __objc_msgSend_1151Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Bool Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Bool,
        ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1151 =
      __objc_msgSend_1151Ptr
          .asFunction<
            bool Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              bool,
              ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
            )
          >();

  late final _sel_allowHapticsAndSystemSoundsDuringRecording1 = objc
      .registerName("allowHapticsAndSystemSoundsDuringRecording");
  late final _sel_recordPermission1 = objc.registerName("recordPermission");
  int _objc_msgSend_1152(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_1152(obj, sel);
  }

  late final __objc_msgSend_1152Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Int32 Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1152 =
      __objc_msgSend_1152Ptr
          .asFunction<
            int Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_requestRecordPermission_1 = objc.registerName(
    "requestRecordPermission:",
  );
  void _objc_msgSend_1153(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCBlock> response,
  ) {
    return __objc_msgSend_1153(obj, sel, response);
  }

  late final __objc_msgSend_1153Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCBlock>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1153 =
      __objc_msgSend_1153Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCBlock>,
            )
          >();

  late final _sel_overrideOutputAudioPort_error_1 = objc.registerName(
    "overrideOutputAudioPort:error:",
  );
  bool _objc_msgSend_1154(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int portOverride,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError,
  ) {
    return __objc_msgSend_1154(obj, sel, portOverride, outError);
  }

  late final __objc_msgSend_1154Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Bool Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Int32,
        ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1154 =
      __objc_msgSend_1154Ptr
          .asFunction<
            bool Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
              ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
            )
          >();

  late final _class_AVAudioSessionPortDescription1 = objc.getClass(
    "AVAudioSessionPortDescription",
  );
  late final _sel_portType1 = objc.registerName("portType");
  late final _sel_portName1 = objc.registerName("portName");
  late final _sel_UID1 = objc.registerName("UID");
  late final _sel_hasHardwareVoiceCallProcessing1 = objc.registerName(
    "hasHardwareVoiceCallProcessing",
  );
  late final _sel_isSpatialAudioEnabled1 = objc.registerName(
    "isSpatialAudioEnabled",
  );
  late final _sel_channels1 = objc.registerName("channels");
  late final _sel_dataSources1 = objc.registerName("dataSources");
  late final _class_AVAudioSessionDataSourceDescription1 = objc.getClass(
    "AVAudioSessionDataSourceDescription",
  );
  late final _sel_dataSourceID1 = objc.registerName("dataSourceID");
  late final _sel_dataSourceName1 = objc.registerName("dataSourceName");
  late final _sel_location1 = objc.registerName("location");
  late final _sel_orientation1 = objc.registerName("orientation");
  late final _sel_supportedPolarPatterns1 = objc.registerName(
    "supportedPolarPatterns",
  );
  late final _sel_selectedPolarPattern1 = objc.registerName(
    "selectedPolarPattern",
  );
  late final _sel_preferredPolarPattern1 = objc.registerName(
    "preferredPolarPattern",
  );
  late final _sel_setPreferredPolarPattern_error_1 = objc.registerName(
    "setPreferredPolarPattern:error:",
  );
  bool _objc_msgSend_1155(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> pattern,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError,
  ) {
    return __objc_msgSend_1155(obj, sel, pattern, outError);
  }

  late final __objc_msgSend_1155Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Bool Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1155 =
      __objc_msgSend_1155Ptr
          .asFunction<
            bool Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
            )
          >();

  late final _sel_selectedDataSource1 = objc.registerName("selectedDataSource");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_1156(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_1156(obj, sel);
  }

  late final __objc_msgSend_1156Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1156 =
      __objc_msgSend_1156Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_preferredDataSource1 = objc.registerName(
    "preferredDataSource",
  );
  late final _sel_setPreferredDataSource_error_1 = objc.registerName(
    "setPreferredDataSource:error:",
  );
  bool _objc_msgSend_1157(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> dataSource,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError,
  ) {
    return __objc_msgSend_1157(obj, sel, dataSource, outError);
  }

  late final __objc_msgSend_1157Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Bool Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1157 =
      __objc_msgSend_1157Ptr
          .asFunction<
            bool Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
            )
          >();

  late final _sel_setPreferredInput_error_1 = objc.registerName(
    "setPreferredInput:error:",
  );
  bool _objc_msgSend_1158(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> inPort,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError,
  ) {
    return __objc_msgSend_1158(obj, sel, inPort, outError);
  }

  late final __objc_msgSend_1158Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Bool Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1158 =
      __objc_msgSend_1158Ptr
          .asFunction<
            bool Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
            )
          >();

  late final _sel_preferredInput1 = objc.registerName("preferredInput");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_1159(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_1159(obj, sel);
  }

  late final __objc_msgSend_1159Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1159 =
      __objc_msgSend_1159Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_setPrefersNoInterruptionsFromSystemAlerts_error_1 = objc
      .registerName("setPrefersNoInterruptionsFromSystemAlerts:error:");
  late final _sel_prefersNoInterruptionsFromSystemAlerts1 = objc.registerName(
    "prefersNoInterruptionsFromSystemAlerts",
  );
  late final _sel_renderingMode1 = objc.registerName("renderingMode");
  int _objc_msgSend_1160(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_1160(obj, sel);
  }

  late final __objc_msgSend_1160Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Int32 Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1160 =
      __objc_msgSend_1160Ptr
          .asFunction<
            int Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_setActive_error_1 = objc.registerName("setActive:error:");
  late final _sel_setActive_withOptions_error_1 = objc.registerName(
    "setActive:withOptions:error:",
  );
  bool _objc_msgSend_1161(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    bool active,
    int options,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError,
  ) {
    return __objc_msgSend_1161(obj, sel, active, options, outError);
  }

  late final __objc_msgSend_1161Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Bool Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Bool,
        ffi.Int32,
        ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1161 =
      __objc_msgSend_1161Ptr
          .asFunction<
            bool Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              bool,
              int,
              ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
            )
          >();

  late final _sel_activateWithOptions_completionHandler_1 = objc.registerName(
    "activateWithOptions:completionHandler:",
  );
  void _objc_msgSend_1162(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int options,
    ffi.Pointer<objc.ObjCBlock> handler,
  ) {
    return __objc_msgSend_1162(obj, sel, options, handler);
  }

  late final __objc_msgSend_1162Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Int32,
        ffi.Pointer<objc.ObjCBlock>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1162 =
      __objc_msgSend_1162Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
              ffi.Pointer<objc.ObjCBlock>,
            )
          >();

  late final _sel_setPreferredSampleRate_error_1 = objc.registerName(
    "setPreferredSampleRate:error:",
  );
  bool _objc_msgSend_1163(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    double sampleRate,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError,
  ) {
    return __objc_msgSend_1163(obj, sel, sampleRate, outError);
  }

  late final __objc_msgSend_1163Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Bool Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Double,
        ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1163 =
      __objc_msgSend_1163Ptr
          .asFunction<
            bool Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              double,
              ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
            )
          >();

  late final _sel_preferredSampleRate1 = objc.registerName(
    "preferredSampleRate",
  );
  late final _sel_setPreferredIOBufferDuration_error_1 = objc.registerName(
    "setPreferredIOBufferDuration:error:",
  );
  late final _sel_preferredIOBufferDuration1 = objc.registerName(
    "preferredIOBufferDuration",
  );
  late final _sel_setPreferredInputNumberOfChannels_error_1 = objc.registerName(
    "setPreferredInputNumberOfChannels:error:",
  );
  bool _objc_msgSend_1164(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int count,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError,
  ) {
    return __objc_msgSend_1164(obj, sel, count, outError);
  }

  late final __objc_msgSend_1164Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Bool Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Long,
        ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1164 =
      __objc_msgSend_1164Ptr
          .asFunction<
            bool Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
              ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
            )
          >();

  late final _sel_preferredInputNumberOfChannels1 = objc.registerName(
    "preferredInputNumberOfChannels",
  );
  late final _sel_setPreferredOutputNumberOfChannels_error_1 = objc
      .registerName("setPreferredOutputNumberOfChannels:error:");
  late final _sel_preferredOutputNumberOfChannels1 = objc.registerName(
    "preferredOutputNumberOfChannels",
  );
  late final _sel_setPreferredInputOrientation_error_1 = objc.registerName(
    "setPreferredInputOrientation:error:",
  );
  bool _objc_msgSend_1165(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int orientation,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError,
  ) {
    return __objc_msgSend_1165(obj, sel, orientation, outError);
  }

  late final __objc_msgSend_1165Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Bool Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Int32,
        ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1165 =
      __objc_msgSend_1165Ptr
          .asFunction<
            bool Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
              ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
            )
          >();

  late final _sel_preferredInputOrientation1 = objc.registerName(
    "preferredInputOrientation",
  );
  int _objc_msgSend_1166(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_1166(obj, sel);
  }

  late final __objc_msgSend_1166Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Int32 Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1166 =
      __objc_msgSend_1166Ptr
          .asFunction<
            int Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_inputOrientation1 = objc.registerName("inputOrientation");
  late final _sel_maximumInputNumberOfChannels1 = objc.registerName(
    "maximumInputNumberOfChannels",
  );
  late final _sel_maximumOutputNumberOfChannels1 = objc.registerName(
    "maximumOutputNumberOfChannels",
  );
  late final _sel_setInputGain_error_1 = objc.registerName(
    "setInputGain:error:",
  );
  bool _objc_msgSend_1167(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    double gain,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError,
  ) {
    return __objc_msgSend_1167(obj, sel, gain, outError);
  }

  late final __objc_msgSend_1167Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Bool Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Float,
        ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1167 =
      __objc_msgSend_1167Ptr
          .asFunction<
            bool Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              double,
              ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
            )
          >();

  late final _sel_inputGain1 = objc.registerName("inputGain");
  late final _sel_isInputGainSettable1 = objc.registerName(
    "isInputGainSettable",
  );
  late final _sel_isInputAvailable1 = objc.registerName("isInputAvailable");
  late final _sel_inputDataSources1 = objc.registerName("inputDataSources");
  late final _sel_inputDataSource1 = objc.registerName("inputDataSource");
  late final _sel_setInputDataSource_error_1 = objc.registerName(
    "setInputDataSource:error:",
  );
  late final _sel_outputDataSources1 = objc.registerName("outputDataSources");
  late final _sel_outputDataSource1 = objc.registerName("outputDataSource");
  late final _sel_setOutputDataSource_error_1 = objc.registerName(
    "setOutputDataSource:error:",
  );
  late final _sel_sampleRate1 = objc.registerName("sampleRate");
  late final _sel_inputNumberOfChannels1 = objc.registerName(
    "inputNumberOfChannels",
  );
  late final _sel_outputNumberOfChannels1 = objc.registerName(
    "outputNumberOfChannels",
  );
  late final _sel_inputLatency1 = objc.registerName("inputLatency");
  late final _sel_outputLatency1 = objc.registerName("outputLatency");
  late final _sel_IOBufferDuration1 = objc.registerName("IOBufferDuration");
  late final _sel_supportedOutputChannelLayouts1 = objc.registerName(
    "supportedOutputChannelLayouts",
  );
  late final _sel_isOtherAudioPlaying1 = objc.registerName(
    "isOtherAudioPlaying",
  );
  late final _sel_secondaryAudioShouldBeSilencedHint1 = objc.registerName(
    "secondaryAudioShouldBeSilencedHint",
  );
  late final _sel_outputVolume1 = objc.registerName("outputVolume");
  late final _sel_promptStyle1 = objc.registerName("promptStyle");
  int _objc_msgSend_1168(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_1168(obj, sel);
  }

  late final __objc_msgSend_1168Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Int32 Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1168 =
      __objc_msgSend_1168Ptr
          .asFunction<
            int Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_availableInputs1 = objc.registerName("availableInputs");
  late final _class_AVAudioSessionRouteDescription1 = objc.getClass(
    "AVAudioSessionRouteDescription",
  );
  late final _sel_inputs1 = objc.registerName("inputs");
  late final _sel_outputs1 = objc.registerName("outputs");
  late final _sel_currentRoute1 = objc.registerName("currentRoute");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_1169(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_1169(obj, sel);
  }

  late final __objc_msgSend_1169Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1169 =
      __objc_msgSend_1169Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_setAggregatedIOPreference_error_1 = objc.registerName(
    "setAggregatedIOPreference:error:",
  );
  bool _objc_msgSend_1170(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int inIOType,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError,
  ) {
    return __objc_msgSend_1170(obj, sel, inIOType, outError);
  }

  late final __objc_msgSend_1170Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Bool Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Int32,
        ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1170 =
      __objc_msgSend_1170Ptr
          .asFunction<
            bool Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
              ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
            )
          >();

  late final _sel_setSupportsMultichannelContent_error_1 = objc.registerName(
    "setSupportsMultichannelContent:error:",
  );
  late final _sel_supportsMultichannelContent1 = objc.registerName(
    "supportsMultichannelContent",
  );
  late final _sel_setPrefersInterruptionOnRouteDisconnect_error_1 = objc
      .registerName("setPrefersInterruptionOnRouteDisconnect:error:");
  late final _sel_prefersInterruptionOnRouteDisconnect1 = objc.registerName(
    "prefersInterruptionOnRouteDisconnect",
  );
  late final _sel_setActive_withFlags_error_1 = objc.registerName(
    "setActive:withFlags:error:",
  );
  bool _objc_msgSend_1171(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    bool active,
    int flags,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError,
  ) {
    return __objc_msgSend_1171(obj, sel, active, flags, outError);
  }

  late final __objc_msgSend_1171Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Bool Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Bool,
        ffi.Long,
        ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1171 =
      __objc_msgSend_1171Ptr
          .asFunction<
            bool Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              bool,
              int,
              ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
            )
          >();

  late final _sel_inputIsAvailable1 = objc.registerName("inputIsAvailable");
  late final _sel_currentHardwareSampleRate1 = objc.registerName(
    "currentHardwareSampleRate",
  );
  late final _sel_currentHardwareInputNumberOfChannels1 = objc.registerName(
    "currentHardwareInputNumberOfChannels",
  );
  late final _sel_currentHardwareOutputNumberOfChannels1 = objc.registerName(
    "currentHardwareOutputNumberOfChannels",
  );
  late final _sel_setPreferredHardwareSampleRate_error_1 = objc.registerName(
    "setPreferredHardwareSampleRate:error:",
  );
  late final _sel_preferredHardwareSampleRate1 = objc.registerName(
    "preferredHardwareSampleRate",
  );
  late final _class_AVAudioPlayer1 = objc.getClass("AVAudioPlayer");
  late final _sel_initWithData_error_1 = objc.registerName(
    "initWithData:error:",
  );
  instancetype _objc_msgSend_1172(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> data,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError,
  ) {
    return __objc_msgSend_1172(obj, sel, data, outError);
  }

  late final __objc_msgSend_1172Ptr = _lookup<
    ffi.NativeFunction<
      instancetype Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1172 =
      __objc_msgSend_1172Ptr
          .asFunction<
            instancetype Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
            )
          >();

  late final _sel_initWithContentsOfURL_fileTypeHint_error_1 = objc
      .registerName("initWithContentsOfURL:fileTypeHint:error:");
  instancetype _objc_msgSend_1173(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> url,
    ffi.Pointer<objc.ObjCObject> utiString,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError,
  ) {
    return __objc_msgSend_1173(obj, sel, url, utiString, outError);
  }

  late final __objc_msgSend_1173Ptr = _lookup<
    ffi.NativeFunction<
      instancetype Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1173 =
      __objc_msgSend_1173Ptr
          .asFunction<
            instancetype Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
            )
          >();

  late final _sel_initWithData_fileTypeHint_error_1 = objc.registerName(
    "initWithData:fileTypeHint:error:",
  );
  instancetype _objc_msgSend_1174(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<objc.ObjCObject> data,
    ffi.Pointer<objc.ObjCObject> utiString,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError,
  ) {
    return __objc_msgSend_1174(obj, sel, data, utiString, outError);
  }

  late final __objc_msgSend_1174Ptr = _lookup<
    ffi.NativeFunction<
      instancetype Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1174 =
      __objc_msgSend_1174Ptr
          .asFunction<
            instancetype Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
            )
          >();

  late final _sel_prepareToPlay1 = objc.registerName("prepareToPlay");
  late final _sel_play1 = objc.registerName("play");
  late final _sel_playAtTime_1 = objc.registerName("playAtTime:");
  bool _objc_msgSend_1175(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    double time,
  ) {
    return __objc_msgSend_1175(obj, sel, time);
  }

  late final __objc_msgSend_1175Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Bool Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Double,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1175 =
      __objc_msgSend_1175Ptr
          .asFunction<
            bool Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              double,
            )
          >();

  late final _sel_isPlaying1 = objc.registerName("isPlaying");
  late final _sel_numberOfChannels1 = objc.registerName("numberOfChannels");
  late final _sel_currentDevice1 = objc.registerName("currentDevice");
  late final _sel_setCurrentDevice_1 = objc.registerName("setCurrentDevice:");
  late final _sel_url1 = objc.registerName("url");
  late final _sel_pan1 = objc.registerName("pan");
  late final _sel_setPan_1 = objc.registerName("setPan:");
  late final _sel_volume1 = objc.registerName("volume");
  late final _sel_setVolume_1 = objc.registerName("setVolume:");
  late final _sel_setVolume_fadeDuration_1 = objc.registerName(
    "setVolume:fadeDuration:",
  );
  void _objc_msgSend_1176(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    double volume,
    double duration,
  ) {
    return __objc_msgSend_1176(obj, sel, volume, duration);
  }

  late final __objc_msgSend_1176Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Float,
        ffi.Double,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1176 =
      __objc_msgSend_1176Ptr
          .asFunction<
            void Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              double,
              double,
            )
          >();

  late final _sel_enableRate1 = objc.registerName("enableRate");
  late final _sel_setEnableRate_1 = objc.registerName("setEnableRate:");
  late final _sel_rate1 = objc.registerName("rate");
  late final _sel_setRate_1 = objc.registerName("setRate:");
  late final _sel_currentTime1 = objc.registerName("currentTime");
  late final _sel_setCurrentTime_1 = objc.registerName("setCurrentTime:");
  late final _sel_deviceCurrentTime1 = objc.registerName("deviceCurrentTime");
  late final _sel_numberOfLoops1 = objc.registerName("numberOfLoops");
  late final _sel_setNumberOfLoops_1 = objc.registerName("setNumberOfLoops:");
  late final _sel_settings1 = objc.registerName("settings");
  late final _class_AVAudioFormat1 = objc.getClass("AVAudioFormat");
  late final _sel_initWithStreamDescription_1 = objc.registerName(
    "initWithStreamDescription:",
  );
  instancetype _objc_msgSend_1177(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<AudioStreamBasicDescription> asbd,
  ) {
    return __objc_msgSend_1177(obj, sel, asbd);
  }

  late final __objc_msgSend_1177Ptr = _lookup<
    ffi.NativeFunction<
      instancetype Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<AudioStreamBasicDescription>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1177 =
      __objc_msgSend_1177Ptr
          .asFunction<
            instancetype Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<AudioStreamBasicDescription>,
            )
          >();

  late final _class_AVAudioChannelLayout1 = objc.getClass(
    "AVAudioChannelLayout",
  );
  late final _sel_initWithLayoutTag_1 = objc.registerName("initWithLayoutTag:");
  instancetype _objc_msgSend_1178(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int layoutTag,
  ) {
    return __objc_msgSend_1178(obj, sel, layoutTag);
  }

  late final __objc_msgSend_1178Ptr = _lookup<
    ffi.NativeFunction<
      instancetype Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.UnsignedInt,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1178 =
      __objc_msgSend_1178Ptr
          .asFunction<
            instancetype Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
            )
          >();

  late final _sel_initWithLayout_1 = objc.registerName("initWithLayout:");
  instancetype _objc_msgSend_1179(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<AudioChannelLayout> layout,
  ) {
    return __objc_msgSend_1179(obj, sel, layout);
  }

  late final __objc_msgSend_1179Ptr = _lookup<
    ffi.NativeFunction<
      instancetype Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<AudioChannelLayout>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1179 =
      __objc_msgSend_1179Ptr
          .asFunction<
            instancetype Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<AudioChannelLayout>,
            )
          >();

  late final _sel_isEqual_1 = objc.registerName("isEqual:");
  late final _sel_layoutWithLayoutTag_1 = objc.registerName(
    "layoutWithLayoutTag:",
  );
  instancetype _objc_msgSend_1180(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int layoutTag,
  ) {
    return __objc_msgSend_1180(obj, sel, layoutTag);
  }

  late final __objc_msgSend_1180Ptr = _lookup<
    ffi.NativeFunction<
      instancetype Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.UnsignedInt,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1180 =
      __objc_msgSend_1180Ptr
          .asFunction<
            instancetype Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
            )
          >();

  late final _sel_layoutWithLayout_1 = objc.registerName("layoutWithLayout:");
  late final _sel_layoutTag1 = objc.registerName("layoutTag");
  late final _sel_layout1 = objc.registerName("layout");
  ffi.Pointer<AudioChannelLayout> _objc_msgSend_1181(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_1181(obj, sel);
  }

  late final __objc_msgSend_1181Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<AudioChannelLayout> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1181 =
      __objc_msgSend_1181Ptr
          .asFunction<
            ffi.Pointer<AudioChannelLayout> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_channelCount1 = objc.registerName("channelCount");
  int _objc_msgSend_1182(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_1182(obj, sel);
  }

  late final __objc_msgSend_1182Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Uint32 Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1182 =
      __objc_msgSend_1182Ptr
          .asFunction<
            int Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_initWithStreamDescription_channelLayout_1 = objc.registerName(
    "initWithStreamDescription:channelLayout:",
  );
  instancetype _objc_msgSend_1183(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<AudioStreamBasicDescription> asbd,
    ffi.Pointer<objc.ObjCObject> layout,
  ) {
    return __objc_msgSend_1183(obj, sel, asbd, layout);
  }

  late final __objc_msgSend_1183Ptr = _lookup<
    ffi.NativeFunction<
      instancetype Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<AudioStreamBasicDescription>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1183 =
      __objc_msgSend_1183Ptr
          .asFunction<
            instancetype Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<AudioStreamBasicDescription>,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_initStandardFormatWithSampleRate_channels_1 = objc
      .registerName("initStandardFormatWithSampleRate:channels:");
  instancetype _objc_msgSend_1184(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    double sampleRate,
    int channels,
  ) {
    return __objc_msgSend_1184(obj, sel, sampleRate, channels);
  }

  late final __objc_msgSend_1184Ptr = _lookup<
    ffi.NativeFunction<
      instancetype Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Double,
        ffi.Uint32,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1184 =
      __objc_msgSend_1184Ptr
          .asFunction<
            instancetype Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              double,
              int,
            )
          >();

  late final _sel_initStandardFormatWithSampleRate_channelLayout_1 = objc
      .registerName("initStandardFormatWithSampleRate:channelLayout:");
  instancetype _objc_msgSend_1185(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    double sampleRate,
    ffi.Pointer<objc.ObjCObject> layout,
  ) {
    return __objc_msgSend_1185(obj, sel, sampleRate, layout);
  }

  late final __objc_msgSend_1185Ptr = _lookup<
    ffi.NativeFunction<
      instancetype Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Double,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1185 =
      __objc_msgSend_1185Ptr
          .asFunction<
            instancetype Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              double,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_initWithCommonFormat_sampleRate_channels_interleaved_1 = objc
      .registerName("initWithCommonFormat:sampleRate:channels:interleaved:");
  instancetype _objc_msgSend_1186(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int format,
    double sampleRate,
    int channels,
    bool interleaved,
  ) {
    return __objc_msgSend_1186(
      obj,
      sel,
      format,
      sampleRate,
      channels,
      interleaved,
    );
  }

  late final __objc_msgSend_1186Ptr = _lookup<
    ffi.NativeFunction<
      instancetype Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Int32,
        ffi.Double,
        ffi.Uint32,
        ffi.Bool,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1186 =
      __objc_msgSend_1186Ptr
          .asFunction<
            instancetype Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
              double,
              int,
              bool,
            )
          >();

  late final _sel_initWithCommonFormat_sampleRate_interleaved_channelLayout_1 =
      objc.registerName(
        "initWithCommonFormat:sampleRate:interleaved:channelLayout:",
      );
  instancetype _objc_msgSend_1187(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int format,
    double sampleRate,
    bool interleaved,
    ffi.Pointer<objc.ObjCObject> layout,
  ) {
    return __objc_msgSend_1187(
      obj,
      sel,
      format,
      sampleRate,
      interleaved,
      layout,
    );
  }

  late final __objc_msgSend_1187Ptr = _lookup<
    ffi.NativeFunction<
      instancetype Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Int32,
        ffi.Double,
        ffi.Bool,
        ffi.Pointer<objc.ObjCObject>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1187 =
      __objc_msgSend_1187Ptr
          .asFunction<
            instancetype Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
              double,
              bool,
              ffi.Pointer<objc.ObjCObject>,
            )
          >();

  late final _sel_initWithSettings_1 = objc.registerName("initWithSettings:");
  late final _sel_initWithCMAudioFormatDescription_1 = objc.registerName(
    "initWithCMAudioFormatDescription:",
  );
  instancetype _objc_msgSend_1188(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    ffi.Pointer<opaqueCMFormatDescription> formatDescription,
  ) {
    return __objc_msgSend_1188(obj, sel, formatDescription);
  }

  late final __objc_msgSend_1188Ptr = _lookup<
    ffi.NativeFunction<
      instancetype Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.Pointer<opaqueCMFormatDescription>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1188 =
      __objc_msgSend_1188Ptr
          .asFunction<
            instancetype Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              ffi.Pointer<opaqueCMFormatDescription>,
            )
          >();

  late final _sel_isStandard1 = objc.registerName("isStandard");
  late final _sel_commonFormat1 = objc.registerName("commonFormat");
  int _objc_msgSend_1189(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_1189(obj, sel);
  }

  late final __objc_msgSend_1189Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Int32 Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1189 =
      __objc_msgSend_1189Ptr
          .asFunction<
            int Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_isInterleaved1 = objc.registerName("isInterleaved");
  late final _sel_streamDescription1 = objc.registerName("streamDescription");
  ffi.Pointer<AudioStreamBasicDescription> _objc_msgSend_1190(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_1190(obj, sel);
  }

  late final __objc_msgSend_1190Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<AudioStreamBasicDescription> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1190 =
      __objc_msgSend_1190Ptr
          .asFunction<
            ffi.Pointer<AudioStreamBasicDescription> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_channelLayout1 = objc.registerName("channelLayout");
  ffi.Pointer<objc.ObjCObject> _objc_msgSend_1191(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_1191(obj, sel);
  }

  late final __objc_msgSend_1191Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1191 =
      __objc_msgSend_1191Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_magicCookie1 = objc.registerName("magicCookie");
  late final _sel_setMagicCookie_1 = objc.registerName("setMagicCookie:");
  late final _sel_formatDescription1 = objc.registerName("formatDescription");
  ffi.Pointer<opaqueCMFormatDescription> _objc_msgSend_1192(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_1192(obj, sel);
  }

  late final __objc_msgSend_1192Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<opaqueCMFormatDescription> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1192 =
      __objc_msgSend_1192Ptr
          .asFunction<
            ffi.Pointer<opaqueCMFormatDescription> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  ffi.Pointer<objc.ObjCObject> _objc_msgSend_1193(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return __objc_msgSend_1193(obj, sel);
  }

  late final __objc_msgSend_1193Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1193 =
      __objc_msgSend_1193Ptr
          .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
            )
          >();

  late final _sel_isMeteringEnabled1 = objc.registerName("isMeteringEnabled");
  late final _sel_setMeteringEnabled_1 = objc.registerName(
    "setMeteringEnabled:",
  );
  late final _sel_updateMeters1 = objc.registerName("updateMeters");
  late final _sel_peakPowerForChannel_1 = objc.registerName(
    "peakPowerForChannel:",
  );
  double _objc_msgSend_1194(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int channelNumber,
  ) {
    return __objc_msgSend_1194(obj, sel, channelNumber);
  }

  late final __objc_msgSend_1194Ptr = _lookup<
    ffi.NativeFunction<
      ffi.Float Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.UnsignedLong,
      )
    >
  >('objc_msgSend');
  late final __objc_msgSend_1194 =
      __objc_msgSend_1194Ptr
          .asFunction<
            double Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
            )
          >();

  double _objc_msgSend_1194_fpret(
    ffi.Pointer<objc.ObjCObject> obj,
    ffi.Pointer<objc.ObjCSelector> sel,
    int channelNumber,
  ) {
    return __objc_msgSend_1194_fpret(obj, sel, channelNumber);
  }

  late final __objc_msgSend_1194_fpretPtr = _lookup<
    ffi.NativeFunction<
      ffi.Float Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCSelector>,
        ffi.UnsignedLong,
      )
    >
  >('objc_msgSend_fpret');
  late final __objc_msgSend_1194_fpret =
      __objc_msgSend_1194_fpretPtr
          .asFunction<
            double Function(
              ffi.Pointer<objc.ObjCObject>,
              ffi.Pointer<objc.ObjCSelector>,
              int,
            )
          >();

  late final _sel_averagePowerForChannel_1 = objc.registerName(
    "averagePowerForChannel:",
  );
  late final _sel_channelAssignments1 = objc.registerName("channelAssignments");
  late final _sel_setChannelAssignments_1 = objc.registerName(
    "setChannelAssignments:",
  );
}

class NSObject extends objc.ObjCObjectBase {
  NSObject._(
    ffi.Pointer<objc.ObjCObject> pointer,
    this._lib, {
    bool retain = false,
    bool release = false,
  }) : super(pointer, retain: retain, release: release);

  AVFAudio _lib;

  /// Returns a [NSObject] that points to the same underlying object as [other].
  static NSObject castFrom<T extends objc.ObjCObjectBase>(
    AVFAudio lib,
    T other,
  ) {
    return NSObject._(other.pointer, lib, retain: true, release: true);
  }

  /// Returns a [NSObject] that wraps the given raw object pointer.
  static NSObject castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCObject> other, {
    bool retain = false,
    bool release = false,
  }) {
    return NSObject._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSObject].
  static bool isInstance(AVFAudio lib, objc.ObjCObjectBase obj) {
    return lib._objc_msgSend_0(
      obj.pointer,
      lib._sel_isKindOfClass_1,
      lib._class_NSObject1,
    );
  }

  static void load(AVFAudio _lib) {
    _lib._objc_msgSend_1(_lib._class_NSObject1, _lib._sel_load1);
  }

  static void initialize(AVFAudio _lib) {
    _lib._objc_msgSend_1(_lib._class_NSObject1, _lib._sel_initialize1);
  }

  NSObject init() {
    final _ret = _lib._objc_msgSend_2(this.pointer, _lib._sel_init1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject new1(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSObject1, _lib._sel_new1);
    return NSObject._(_ret, _lib, retain: false, release: true);
  }

  static NSObject allocWithZone_(AVFAudio _lib, ffi.Pointer<_NSZone> zone) {
    final _ret = _lib._objc_msgSend_3(
      _lib._class_NSObject1,
      _lib._sel_allocWithZone_1,
      zone,
    );
    return NSObject._(_ret, _lib, retain: false, release: true);
  }

  static NSObject alloc(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSObject1, _lib._sel_alloc1);
    return NSObject._(_ret, _lib, retain: false, release: true);
  }

  void dealloc() {
    _lib._objc_msgSend_1(this.pointer, _lib._sel_dealloc1);
  }

  void finalize() {
    _lib._objc_msgSend_1(this.pointer, _lib._sel_finalize1);
  }

  NSObject copy() {
    final _ret = _lib._objc_msgSend_2(this.pointer, _lib._sel_copy1);
    return NSObject._(_ret, _lib, retain: false, release: true);
  }

  NSObject mutableCopy() {
    final _ret = _lib._objc_msgSend_2(this.pointer, _lib._sel_mutableCopy1);
    return NSObject._(_ret, _lib, retain: false, release: true);
  }

  static NSObject copyWithZone_(AVFAudio _lib, ffi.Pointer<_NSZone> zone) {
    final _ret = _lib._objc_msgSend_3(
      _lib._class_NSObject1,
      _lib._sel_copyWithZone_1,
      zone,
    );
    return NSObject._(_ret, _lib, retain: false, release: true);
  }

  static NSObject mutableCopyWithZone_(
    AVFAudio _lib,
    ffi.Pointer<_NSZone> zone,
  ) {
    final _ret = _lib._objc_msgSend_3(
      _lib._class_NSObject1,
      _lib._sel_mutableCopyWithZone_1,
      zone,
    );
    return NSObject._(_ret, _lib, retain: false, release: true);
  }

  static bool instancesRespondToSelector_(
    AVFAudio _lib,
    ffi.Pointer<objc.ObjCSelector> aSelector,
  ) {
    return _lib._objc_msgSend_4(
      _lib._class_NSObject1,
      _lib._sel_instancesRespondToSelector_1,
      aSelector,
    );
  }

  static bool conformsToProtocol_(AVFAudio _lib, Protocol protocol) {
    return _lib._objc_msgSend_5(
      _lib._class_NSObject1,
      _lib._sel_conformsToProtocol_1,
      protocol.pointer,
    );
  }

  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> methodForSelector_(
    ffi.Pointer<objc.ObjCSelector> aSelector,
  ) {
    return _lib._objc_msgSend_6(
      this.pointer,
      _lib._sel_methodForSelector_1,
      aSelector,
    );
  }

  static ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>
  instanceMethodForSelector_(
    AVFAudio _lib,
    ffi.Pointer<objc.ObjCSelector> aSelector,
  ) {
    return _lib._objc_msgSend_6(
      _lib._class_NSObject1,
      _lib._sel_instanceMethodForSelector_1,
      aSelector,
    );
  }

  void doesNotRecognizeSelector_(ffi.Pointer<objc.ObjCSelector> aSelector) {
    _lib._objc_msgSend_7(
      this.pointer,
      _lib._sel_doesNotRecognizeSelector_1,
      aSelector,
    );
  }

  NSObject forwardingTargetForSelector_(
    ffi.Pointer<objc.ObjCSelector> aSelector,
  ) {
    final _ret = _lib._objc_msgSend_8(
      this.pointer,
      _lib._sel_forwardingTargetForSelector_1,
      aSelector,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  void forwardInvocation_(NSInvocation anInvocation) {
    _lib._objc_msgSend_421(
      this.pointer,
      _lib._sel_forwardInvocation_1,
      anInvocation.pointer,
    );
  }

  NSMethodSignature methodSignatureForSelector_(
    ffi.Pointer<objc.ObjCSelector> aSelector,
  ) {
    final _ret = _lib._objc_msgSend_422(
      this.pointer,
      _lib._sel_methodSignatureForSelector_1,
      aSelector,
    );
    return NSMethodSignature._(_ret, _lib, retain: true, release: true);
  }

  static NSMethodSignature instanceMethodSignatureForSelector_(
    AVFAudio _lib,
    ffi.Pointer<objc.ObjCSelector> aSelector,
  ) {
    final _ret = _lib._objc_msgSend_422(
      _lib._class_NSObject1,
      _lib._sel_instanceMethodSignatureForSelector_1,
      aSelector,
    );
    return NSMethodSignature._(_ret, _lib, retain: true, release: true);
  }

  bool allowsWeakReference() {
    return _lib._objc_msgSend_12(this.pointer, _lib._sel_allowsWeakReference1);
  }

  bool retainWeakReference() {
    return _lib._objc_msgSend_12(this.pointer, _lib._sel_retainWeakReference1);
  }

  static bool isSubclassOfClass_(AVFAudio _lib, NSObject aClass) {
    return _lib._objc_msgSend_0(
      _lib._class_NSObject1,
      _lib._sel_isSubclassOfClass_1,
      aClass.pointer,
    );
  }

  static bool resolveClassMethod_(
    AVFAudio _lib,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return _lib._objc_msgSend_4(
      _lib._class_NSObject1,
      _lib._sel_resolveClassMethod_1,
      sel,
    );
  }

  static bool resolveInstanceMethod_(
    AVFAudio _lib,
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return _lib._objc_msgSend_4(
      _lib._class_NSObject1,
      _lib._sel_resolveInstanceMethod_1,
      sel,
    );
  }

  static int hash(AVFAudio _lib) {
    return _lib._objc_msgSend_10(_lib._class_NSObject1, _lib._sel_hash1);
  }

  static NSObject superclass(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSObject1,
      _lib._sel_superclass1,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject class1(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSObject1, _lib._sel_class1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSString description(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_21(
      _lib._class_NSObject1,
      _lib._sel_description1,
    );
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  static NSString debugDescription(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_21(
      _lib._class_NSObject1,
      _lib._sel_debugDescription1,
    );
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  static int version(AVFAudio _lib) {
    return _lib._objc_msgSend_83(_lib._class_NSObject1, _lib._sel_version1);
  }

  static void setVersion_(AVFAudio _lib, int aVersion) {
    _lib._objc_msgSend_423(
      _lib._class_NSObject1,
      _lib._sel_setVersion_1,
      aVersion,
    );
  }

  NSObject get classForCoder {
    final _ret = _lib._objc_msgSend_2(this.pointer, _lib._sel_classForCoder1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? replacementObjectForCoder_(NSCoder coder) {
    final _ret = _lib._objc_msgSend_47(
      this.pointer,
      _lib._sel_replacementObjectForCoder_1,
      coder.pointer,
    );
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? awakeAfterUsingCoder_(NSCoder coder) {
    final _ret = _lib._objc_msgSend_47(
      this.pointer,
      _lib._sel_awakeAfterUsingCoder_1,
      coder.pointer,
    );
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: false, release: true);
  }

  static void poseAsClass_(AVFAudio _lib, NSObject aClass) {
    _lib._objc_msgSend_15(
      _lib._class_NSObject1,
      _lib._sel_poseAsClass_1,
      aClass.pointer,
    );
  }

  NSObject get autoContentAccessingProxy {
    final _ret = _lib._objc_msgSend_2(
      this.pointer,
      _lib._sel_autoContentAccessingProxy1,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  void
  attemptRecoveryFromError_optionIndex_delegate_didRecoverSelector_contextInfo_(
    NSError error,
    int recoveryOptionIndex,
    NSObject? delegate,
    ffi.Pointer<objc.ObjCSelector> didRecoverSelector,
    ffi.Pointer<ffi.Void> contextInfo,
  ) {
    _lib._objc_msgSend_424(
      this.pointer,
      _lib._sel_attemptRecoveryFromError_optionIndex_delegate_didRecoverSelector_contextInfo_1,
      error.pointer,
      recoveryOptionIndex,
      delegate?.pointer ?? ffi.nullptr,
      didRecoverSelector,
      contextInfo,
    );
  }

  bool attemptRecoveryFromError_optionIndex_(
    NSError error,
    int recoveryOptionIndex,
  ) {
    return _lib._objc_msgSend_425(
      this.pointer,
      _lib._sel_attemptRecoveryFromError_optionIndex_1,
      error.pointer,
      recoveryOptionIndex,
    );
  }

  void performSelector_withObject_afterDelay_inModes_(
    ffi.Pointer<objc.ObjCSelector> aSelector,
    NSObject? anArgument,
    double delay,
    NSArray modes,
  ) {
    _lib._objc_msgSend_426(
      this.pointer,
      _lib._sel_performSelector_withObject_afterDelay_inModes_1,
      aSelector,
      anArgument?.pointer ?? ffi.nullptr,
      delay,
      modes.pointer,
    );
  }

  void performSelector_withObject_afterDelay_(
    ffi.Pointer<objc.ObjCSelector> aSelector,
    NSObject? anArgument,
    double delay,
  ) {
    _lib._objc_msgSend_427(
      this.pointer,
      _lib._sel_performSelector_withObject_afterDelay_1,
      aSelector,
      anArgument?.pointer ?? ffi.nullptr,
      delay,
    );
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
    AVFAudio _lib,
    NSObject aTarget,
    ffi.Pointer<objc.ObjCSelector> aSelector,
    NSObject? anArgument,
  ) {
    _lib._objc_msgSend_14(
      _lib._class_NSObject1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
      aTarget.pointer,
      aSelector,
      anArgument?.pointer ?? ffi.nullptr,
    );
  }

  static void cancelPreviousPerformRequestsWithTarget_(
    AVFAudio _lib,
    NSObject aTarget,
  ) {
    _lib._objc_msgSend_15(
      _lib._class_NSObject1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_1,
      aTarget.pointer,
    );
  }

  void URL_resourceDataDidBecomeAvailable_(NSURL sender, NSData newBytes) {
    _lib._objc_msgSend_428(
      this.pointer,
      _lib._sel_URL_resourceDataDidBecomeAvailable_1,
      sender.pointer,
      newBytes.pointer,
    );
  }

  void URLResourceDidFinishLoading_(NSURL sender) {
    _lib._objc_msgSend_429(
      this.pointer,
      _lib._sel_URLResourceDidFinishLoading_1,
      sender.pointer,
    );
  }

  void URLResourceDidCancelLoading_(NSURL sender) {
    _lib._objc_msgSend_429(
      this.pointer,
      _lib._sel_URLResourceDidCancelLoading_1,
      sender.pointer,
    );
  }

  void URL_resourceDidFailLoadingWithReason_(NSURL sender, NSString reason) {
    _lib._objc_msgSend_430(
      this.pointer,
      _lib._sel_URL_resourceDidFailLoadingWithReason_1,
      sender.pointer,
      reason.pointer,
    );
  }

  bool fileManager_shouldProceedAfterError_(
    NSFileManager fm,
    NSDictionary errorInfo,
  ) {
    return _lib._objc_msgSend_467(
      this.pointer,
      _lib._sel_fileManager_shouldProceedAfterError_1,
      fm.pointer,
      errorInfo.pointer,
    );
  }

  void fileManager_willProcessPath_(NSFileManager fm, NSString path) {
    _lib._objc_msgSend_468(
      this.pointer,
      _lib._sel_fileManager_willProcessPath_1,
      fm.pointer,
      path.pointer,
    );
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSObject1,
      _lib._sel_accessInstanceVariablesDirectly1,
    );
  }

  NSObject? valueForKey_(NSString key) {
    final _ret = _lib._objc_msgSend_38(
      this.pointer,
      _lib._sel_valueForKey_1,
      key.pointer,
    );
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  void setValue_forKey_(NSObject? value, NSString key) {
    _lib._objc_msgSend_135(
      this.pointer,
      _lib._sel_setValue_forKey_1,
      value?.pointer ?? ffi.nullptr,
      key.pointer,
    );
  }

  bool validateValue_forKey_error_(
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> ioValue,
    NSString inKey,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError,
  ) {
    return _lib._objc_msgSend_243(
      this.pointer,
      _lib._sel_validateValue_forKey_error_1,
      ioValue,
      inKey.pointer,
      outError,
    );
  }

  NSMutableArray mutableArrayValueForKey_(NSString key) {
    final _ret = _lib._objc_msgSend_488(
      this.pointer,
      _lib._sel_mutableArrayValueForKey_1,
      key.pointer,
    );
    return NSMutableArray._(_ret, _lib, retain: true, release: true);
  }

  NSMutableOrderedSet mutableOrderedSetValueForKey_(NSString key) {
    final _ret = _lib._objc_msgSend_506(
      this.pointer,
      _lib._sel_mutableOrderedSetValueForKey_1,
      key.pointer,
    );
    return NSMutableOrderedSet._(_ret, _lib, retain: true, release: true);
  }

  NSMutableSet mutableSetValueForKey_(NSString key) {
    final _ret = _lib._objc_msgSend_507(
      this.pointer,
      _lib._sel_mutableSetValueForKey_1,
      key.pointer,
    );
    return NSMutableSet._(_ret, _lib, retain: true, release: true);
  }

  NSObject? valueForKeyPath_(NSString keyPath) {
    final _ret = _lib._objc_msgSend_38(
      this.pointer,
      _lib._sel_valueForKeyPath_1,
      keyPath.pointer,
    );
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  void setValue_forKeyPath_(NSObject? value, NSString keyPath) {
    _lib._objc_msgSend_135(
      this.pointer,
      _lib._sel_setValue_forKeyPath_1,
      value?.pointer ?? ffi.nullptr,
      keyPath.pointer,
    );
  }

  bool validateValue_forKeyPath_error_(
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> ioValue,
    NSString inKeyPath,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError,
  ) {
    return _lib._objc_msgSend_243(
      this.pointer,
      _lib._sel_validateValue_forKeyPath_error_1,
      ioValue,
      inKeyPath.pointer,
      outError,
    );
  }

  NSMutableArray mutableArrayValueForKeyPath_(NSString keyPath) {
    final _ret = _lib._objc_msgSend_488(
      this.pointer,
      _lib._sel_mutableArrayValueForKeyPath_1,
      keyPath.pointer,
    );
    return NSMutableArray._(_ret, _lib, retain: true, release: true);
  }

  NSMutableOrderedSet mutableOrderedSetValueForKeyPath_(NSString keyPath) {
    final _ret = _lib._objc_msgSend_506(
      this.pointer,
      _lib._sel_mutableOrderedSetValueForKeyPath_1,
      keyPath.pointer,
    );
    return NSMutableOrderedSet._(_ret, _lib, retain: true, release: true);
  }

  NSMutableSet mutableSetValueForKeyPath_(NSString keyPath) {
    final _ret = _lib._objc_msgSend_507(
      this.pointer,
      _lib._sel_mutableSetValueForKeyPath_1,
      keyPath.pointer,
    );
    return NSMutableSet._(_ret, _lib, retain: true, release: true);
  }

  NSObject? valueForUndefinedKey_(NSString key) {
    final _ret = _lib._objc_msgSend_38(
      this.pointer,
      _lib._sel_valueForUndefinedKey_1,
      key.pointer,
    );
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  void setValue_forUndefinedKey_(NSObject? value, NSString key) {
    _lib._objc_msgSend_135(
      this.pointer,
      _lib._sel_setValue_forUndefinedKey_1,
      value?.pointer ?? ffi.nullptr,
      key.pointer,
    );
  }

  void setNilValueForKey_(NSString key) {
    _lib._objc_msgSend_247(
      this.pointer,
      _lib._sel_setNilValueForKey_1,
      key.pointer,
    );
  }

  NSDictionary dictionaryWithValuesForKeys_(NSArray keys) {
    final _ret = _lib._objc_msgSend_508(
      this.pointer,
      _lib._sel_dictionaryWithValuesForKeys_1,
      keys.pointer,
    );
    return NSDictionary._(_ret, _lib, retain: true, release: true);
  }

  void setValuesForKeysWithDictionary_(NSDictionary keyedValues) {
    _lib._objc_msgSend_509(
      this.pointer,
      _lib._sel_setValuesForKeysWithDictionary_1,
      keyedValues.pointer,
    );
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSObject1,
      _lib._sel_useStoredAccessor1,
    );
  }

  NSObject? storedValueForKey_(NSString key) {
    final _ret = _lib._objc_msgSend_38(
      this.pointer,
      _lib._sel_storedValueForKey_1,
      key.pointer,
    );
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  void takeStoredValue_forKey_(NSObject? value, NSString key) {
    _lib._objc_msgSend_135(
      this.pointer,
      _lib._sel_takeStoredValue_forKey_1,
      value?.pointer ?? ffi.nullptr,
      key.pointer,
    );
  }

  void takeValue_forKey_(NSObject? value, NSString key) {
    _lib._objc_msgSend_135(
      this.pointer,
      _lib._sel_takeValue_forKey_1,
      value?.pointer ?? ffi.nullptr,
      key.pointer,
    );
  }

  void takeValue_forKeyPath_(NSObject? value, NSString keyPath) {
    _lib._objc_msgSend_135(
      this.pointer,
      _lib._sel_takeValue_forKeyPath_1,
      value?.pointer ?? ffi.nullptr,
      keyPath.pointer,
    );
  }

  NSObject? handleQueryWithUnboundKey_(NSString key) {
    final _ret = _lib._objc_msgSend_38(
      this.pointer,
      _lib._sel_handleQueryWithUnboundKey_1,
      key.pointer,
    );
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  void handleTakeValue_forUnboundKey_(NSObject? value, NSString key) {
    _lib._objc_msgSend_135(
      this.pointer,
      _lib._sel_handleTakeValue_forUnboundKey_1,
      value?.pointer ?? ffi.nullptr,
      key.pointer,
    );
  }

  void unableToSetNilForKey_(NSString key) {
    _lib._objc_msgSend_247(
      this.pointer,
      _lib._sel_unableToSetNilForKey_1,
      key.pointer,
    );
  }

  NSDictionary valuesForKeys_(NSArray keys) {
    final _ret = _lib._objc_msgSend_508(
      this.pointer,
      _lib._sel_valuesForKeys_1,
      keys.pointer,
    );
    return NSDictionary._(_ret, _lib, retain: true, release: true);
  }

  void takeValuesFromDictionary_(NSDictionary properties) {
    _lib._objc_msgSend_509(
      this.pointer,
      _lib._sel_takeValuesFromDictionary_1,
      properties.pointer,
    );
  }

  void observeValueForKeyPath_ofObject_change_context_(
    NSString? keyPath,
    NSObject? object,
    NSDictionary? change,
    ffi.Pointer<ffi.Void> context,
  ) {
    _lib._objc_msgSend_510(
      this.pointer,
      _lib._sel_observeValueForKeyPath_ofObject_change_context_1,
      keyPath?.pointer ?? ffi.nullptr,
      object?.pointer ?? ffi.nullptr,
      change?.pointer ?? ffi.nullptr,
      context,
    );
  }

  void addObserver_forKeyPath_options_context_(
    NSObject observer,
    NSString keyPath,
    int options,
    ffi.Pointer<ffi.Void> context,
  ) {
    _lib._objc_msgSend_139(
      this.pointer,
      _lib._sel_addObserver_forKeyPath_options_context_1,
      observer.pointer,
      keyPath.pointer,
      options,
      context,
    );
  }

  void removeObserver_forKeyPath_context_(
    NSObject observer,
    NSString keyPath,
    ffi.Pointer<ffi.Void> context,
  ) {
    _lib._objc_msgSend_140(
      this.pointer,
      _lib._sel_removeObserver_forKeyPath_context_1,
      observer.pointer,
      keyPath.pointer,
      context,
    );
  }

  void removeObserver_forKeyPath_(NSObject observer, NSString keyPath) {
    _lib._objc_msgSend_141(
      this.pointer,
      _lib._sel_removeObserver_forKeyPath_1,
      observer.pointer,
      keyPath.pointer,
    );
  }

  void willChangeValueForKey_(NSString key) {
    _lib._objc_msgSend_247(
      this.pointer,
      _lib._sel_willChangeValueForKey_1,
      key.pointer,
    );
  }

  void didChangeValueForKey_(NSString key) {
    _lib._objc_msgSend_247(
      this.pointer,
      _lib._sel_didChangeValueForKey_1,
      key.pointer,
    );
  }

  void willChange_valuesAtIndexes_forKey_(
    int changeKind,
    NSIndexSet indexes,
    NSString key,
  ) {
    _lib._objc_msgSend_511(
      this.pointer,
      _lib._sel_willChange_valuesAtIndexes_forKey_1,
      changeKind,
      indexes.pointer,
      key.pointer,
    );
  }

  void didChange_valuesAtIndexes_forKey_(
    int changeKind,
    NSIndexSet indexes,
    NSString key,
  ) {
    _lib._objc_msgSend_511(
      this.pointer,
      _lib._sel_didChange_valuesAtIndexes_forKey_1,
      changeKind,
      indexes.pointer,
      key.pointer,
    );
  }

  void willChangeValueForKey_withSetMutation_usingObjects_(
    NSString key,
    int mutationKind,
    NSSet objects,
  ) {
    _lib._objc_msgSend_512(
      this.pointer,
      _lib._sel_willChangeValueForKey_withSetMutation_usingObjects_1,
      key.pointer,
      mutationKind,
      objects.pointer,
    );
  }

  void didChangeValueForKey_withSetMutation_usingObjects_(
    NSString key,
    int mutationKind,
    NSSet objects,
  ) {
    _lib._objc_msgSend_512(
      this.pointer,
      _lib._sel_didChangeValueForKey_withSetMutation_usingObjects_1,
      key.pointer,
      mutationKind,
      objects.pointer,
    );
  }

  static NSSet keyPathsForValuesAffectingValueForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    final _ret = _lib._objc_msgSend_63(
      _lib._class_NSObject1,
      _lib._sel_keyPathsForValuesAffectingValueForKey_1,
      key.pointer,
    );
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    return _lib._objc_msgSend_64(
      _lib._class_NSObject1,
      _lib._sel_automaticallyNotifiesObserversForKey_1,
      key.pointer,
    );
  }

  ffi.Pointer<ffi.Void> get observationInfo {
    return _lib._objc_msgSend_20(this.pointer, _lib._sel_observationInfo1);
  }

  set observationInfo(ffi.Pointer<ffi.Void> value) {
    return _lib._objc_msgSend_513(
      this.pointer,
      _lib._sel_setObservationInfo_1,
      value,
    );
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
    AVFAudio _lib,
    NSArray keys,
    NSString dependentKey,
  ) {
    _lib._objc_msgSend_88(
      _lib._class_NSObject1,
      _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
      keys.pointer,
      dependentKey.pointer,
    );
  }

  NSObject? get classForKeyedArchiver {
    final _ret = _lib._objc_msgSend_17(
      this.pointer,
      _lib._sel_classForKeyedArchiver1,
    );
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? replacementObjectForKeyedArchiver_(NSKeyedArchiver archiver) {
    final _ret = _lib._objc_msgSend_528(
      this.pointer,
      _lib._sel_replacementObjectForKeyedArchiver_1,
      archiver.pointer,
    );
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSArray classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_85(
      _lib._class_NSObject1,
      _lib._sel_classFallbacksForKeyedArchiver1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSObject1,
      _lib._sel_classForKeyedUnarchiver1,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  void performSelectorOnMainThread_withObject_waitUntilDone_modes_(
    ffi.Pointer<objc.ObjCSelector> aSelector,
    NSObject? arg,
    bool wait,
    NSArray? array,
  ) {
    _lib._objc_msgSend_529(
      this.pointer,
      _lib._sel_performSelectorOnMainThread_withObject_waitUntilDone_modes_1,
      aSelector,
      arg?.pointer ?? ffi.nullptr,
      wait,
      array?.pointer ?? ffi.nullptr,
    );
  }

  void performSelectorOnMainThread_withObject_waitUntilDone_(
    ffi.Pointer<objc.ObjCSelector> aSelector,
    NSObject? arg,
    bool wait,
  ) {
    _lib._objc_msgSend_530(
      this.pointer,
      _lib._sel_performSelectorOnMainThread_withObject_waitUntilDone_1,
      aSelector,
      arg?.pointer ?? ffi.nullptr,
      wait,
    );
  }

  void performSelector_onThread_withObject_waitUntilDone_modes_(
    ffi.Pointer<objc.ObjCSelector> aSelector,
    NSThread thr,
    NSObject? arg,
    bool wait,
    NSArray? array,
  ) {
    _lib._objc_msgSend_548(
      this.pointer,
      _lib._sel_performSelector_onThread_withObject_waitUntilDone_modes_1,
      aSelector,
      thr.pointer,
      arg?.pointer ?? ffi.nullptr,
      wait,
      array?.pointer ?? ffi.nullptr,
    );
  }

  void performSelector_onThread_withObject_waitUntilDone_(
    ffi.Pointer<objc.ObjCSelector> aSelector,
    NSThread thr,
    NSObject? arg,
    bool wait,
  ) {
    _lib._objc_msgSend_549(
      this.pointer,
      _lib._sel_performSelector_onThread_withObject_waitUntilDone_1,
      aSelector,
      thr.pointer,
      arg?.pointer ?? ffi.nullptr,
      wait,
    );
  }

  void performSelectorInBackground_withObject_(
    ffi.Pointer<objc.ObjCSelector> aSelector,
    NSObject? arg,
  ) {
    _lib._objc_msgSend_90(
      this.pointer,
      _lib._sel_performSelectorInBackground_withObject_1,
      aSelector,
      arg?.pointer ?? ffi.nullptr,
    );
  }

  NSObject? get classForArchiver {
    final _ret = _lib._objc_msgSend_17(
      this.pointer,
      _lib._sel_classForArchiver1,
    );
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? replacementObjectForArchiver_(NSArchiver archiver) {
    final _ret = _lib._objc_msgSend_552(
      this.pointer,
      _lib._sel_replacementObjectForArchiver_1,
      archiver.pointer,
    );
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject get classForPortCoder {
    final _ret = _lib._objc_msgSend_2(
      this.pointer,
      _lib._sel_classForPortCoder1,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? replacementObjectForPortCoder_(NSPortCoder coder) {
    final _ret = _lib._objc_msgSend_597(
      this.pointer,
      _lib._sel_replacementObjectForPortCoder_1,
      coder.pointer,
    );
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSClassDescription get classDescription {
    final _ret = _lib._objc_msgSend_600(
      this.pointer,
      _lib._sel_classDescription1,
    );
    return NSClassDescription._(_ret, _lib, retain: true, release: true);
  }

  NSArray get attributeKeys {
    final _ret = _lib._objc_msgSend_85(this.pointer, _lib._sel_attributeKeys1);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSArray get toOneRelationshipKeys {
    final _ret = _lib._objc_msgSend_85(
      this.pointer,
      _lib._sel_toOneRelationshipKeys1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSArray get toManyRelationshipKeys {
    final _ret = _lib._objc_msgSend_85(
      this.pointer,
      _lib._sel_toManyRelationshipKeys1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSString? inverseForRelationshipKey_(NSString relationshipKey) {
    final _ret = _lib._objc_msgSend_186(
      this.pointer,
      _lib._sel_inverseForRelationshipKey_1,
      relationshipKey.pointer,
    );
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSObject? scriptingValueForSpecifier_(
    NSScriptObjectSpecifier objectSpecifier,
  ) {
    final _ret = _lib._objc_msgSend_649(
      this.pointer,
      _lib._sel_scriptingValueForSpecifier_1,
      objectSpecifier.pointer,
    );
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSDictionary? get scriptingProperties {
    final _ret = _lib._objc_msgSend_390(
      this.pointer,
      _lib._sel_scriptingProperties1,
    );
    return _ret.address == 0
        ? null
        : NSDictionary._(_ret, _lib, retain: true, release: true);
  }

  set scriptingProperties(NSDictionary? value) {
    return _lib._objc_msgSend_634(
      this.pointer,
      _lib._sel_setScriptingProperties_1,
      value?.pointer ?? ffi.nullptr,
    );
  }

  NSObject? copyScriptingValue_forKey_withProperties_(
    NSObject value,
    NSString key,
    NSDictionary properties,
  ) {
    final _ret = _lib._objc_msgSend_650(
      this.pointer,
      _lib._sel_copyScriptingValue_forKey_withProperties_1,
      value.pointer,
      key.pointer,
      properties.pointer,
    );
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: false, release: true);
  }

  NSObject?
  newScriptingObjectOfClass_forValueForKey_withContentsValue_properties_(
    NSObject objectClass,
    NSString key,
    NSObject? contentsValue,
    NSDictionary properties,
  ) {
    final _ret = _lib._objc_msgSend_651(
      this.pointer,
      _lib._sel_newScriptingObjectOfClass_forValueForKey_withContentsValue_properties_1,
      objectClass.pointer,
      key.pointer,
      contentsValue?.pointer ?? ffi.nullptr,
      properties.pointer,
    );
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: false, release: true);
  }

  int get classCode {
    return _lib._objc_msgSend_214(this.pointer, _lib._sel_classCode1);
  }

  NSString? get className {
    final _ret = _lib._objc_msgSend_44(this.pointer, _lib._sel_className1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSObject? valueAtIndex_inPropertyWithKey_(int index, NSString key) {
    final _ret = _lib._objc_msgSend_652(
      this.pointer,
      _lib._sel_valueAtIndex_inPropertyWithKey_1,
      index,
      key.pointer,
    );
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? valueWithName_inPropertyWithKey_(NSString name, NSString key) {
    final _ret = _lib._objc_msgSend_175(
      this.pointer,
      _lib._sel_valueWithName_inPropertyWithKey_1,
      name.pointer,
      key.pointer,
    );
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? valueWithUniqueID_inPropertyWithKey_(
    NSObject uniqueID,
    NSString key,
  ) {
    final _ret = _lib._objc_msgSend_311(
      this.pointer,
      _lib._sel_valueWithUniqueID_inPropertyWithKey_1,
      uniqueID.pointer,
      key.pointer,
    );
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  void insertValue_atIndex_inPropertyWithKey_(
    NSObject value,
    int index,
    NSString key,
  ) {
    _lib._objc_msgSend_653(
      this.pointer,
      _lib._sel_insertValue_atIndex_inPropertyWithKey_1,
      value.pointer,
      index,
      key.pointer,
    );
  }

  void removeValueAtIndex_fromPropertyWithKey_(int index, NSString key) {
    _lib._objc_msgSend_654(
      this.pointer,
      _lib._sel_removeValueAtIndex_fromPropertyWithKey_1,
      index,
      key.pointer,
    );
  }

  void replaceValueAtIndex_inPropertyWithKey_withValue_(
    int index,
    NSString key,
    NSObject value,
  ) {
    _lib._objc_msgSend_655(
      this.pointer,
      _lib._sel_replaceValueAtIndex_inPropertyWithKey_withValue_1,
      index,
      key.pointer,
      value.pointer,
    );
  }

  void insertValue_inPropertyWithKey_(NSObject value, NSString key) {
    _lib._objc_msgSend_656(
      this.pointer,
      _lib._sel_insertValue_inPropertyWithKey_1,
      value.pointer,
      key.pointer,
    );
  }

  NSObject? coerceValue_forKey_(NSObject? value, NSString key) {
    final _ret = _lib._objc_msgSend_657(
      this.pointer,
      _lib._sel_coerceValue_forKey_1,
      value?.pointer ?? ffi.nullptr,
      key.pointer,
    );
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSScriptObjectSpecifier? get objectSpecifier {
    final _ret = _lib._objc_msgSend_632(
      this.pointer,
      _lib._sel_objectSpecifier1,
    );
    return _ret.address == 0
        ? null
        : NSScriptObjectSpecifier._(_ret, _lib, retain: true, release: true);
  }

  NSArray? indicesOfObjectsByEvaluatingObjectSpecifier_(
    NSScriptObjectSpecifier specifier,
  ) {
    final _ret = _lib._objc_msgSend_658(
      this.pointer,
      _lib._sel_indicesOfObjectsByEvaluatingObjectSpecifier_1,
      specifier.pointer,
    );
    return _ret.address == 0
        ? null
        : NSArray._(_ret, _lib, retain: true, release: true);
  }

  bool isEqualTo_(NSObject? object) {
    return _lib._objc_msgSend_217(
      this.pointer,
      _lib._sel_isEqualTo_1,
      object?.pointer ?? ffi.nullptr,
    );
  }

  bool isLessThanOrEqualTo_(NSObject? object) {
    return _lib._objc_msgSend_217(
      this.pointer,
      _lib._sel_isLessThanOrEqualTo_1,
      object?.pointer ?? ffi.nullptr,
    );
  }

  bool isLessThan_(NSObject? object) {
    return _lib._objc_msgSend_217(
      this.pointer,
      _lib._sel_isLessThan_1,
      object?.pointer ?? ffi.nullptr,
    );
  }

  bool isGreaterThanOrEqualTo_(NSObject? object) {
    return _lib._objc_msgSend_217(
      this.pointer,
      _lib._sel_isGreaterThanOrEqualTo_1,
      object?.pointer ?? ffi.nullptr,
    );
  }

  bool isGreaterThan_(NSObject? object) {
    return _lib._objc_msgSend_217(
      this.pointer,
      _lib._sel_isGreaterThan_1,
      object?.pointer ?? ffi.nullptr,
    );
  }

  bool isNotEqualTo_(NSObject? object) {
    return _lib._objc_msgSend_217(
      this.pointer,
      _lib._sel_isNotEqualTo_1,
      object?.pointer ?? ffi.nullptr,
    );
  }

  bool doesContain_(NSObject object) {
    return _lib._objc_msgSend_0(
      this.pointer,
      _lib._sel_doesContain_1,
      object.pointer,
    );
  }

  bool isLike_(NSString object) {
    return _lib._objc_msgSend_64(
      this.pointer,
      _lib._sel_isLike_1,
      object.pointer,
    );
  }

  bool isCaseInsensitiveLike_(NSString object) {
    return _lib._objc_msgSend_64(
      this.pointer,
      _lib._sel_isCaseInsensitiveLike_1,
      object.pointer,
    );
  }

  bool scriptingIsEqualTo_(NSObject object) {
    return _lib._objc_msgSend_0(
      this.pointer,
      _lib._sel_scriptingIsEqualTo_1,
      object.pointer,
    );
  }

  bool scriptingIsLessThanOrEqualTo_(NSObject object) {
    return _lib._objc_msgSend_0(
      this.pointer,
      _lib._sel_scriptingIsLessThanOrEqualTo_1,
      object.pointer,
    );
  }

  bool scriptingIsLessThan_(NSObject object) {
    return _lib._objc_msgSend_0(
      this.pointer,
      _lib._sel_scriptingIsLessThan_1,
      object.pointer,
    );
  }

  bool scriptingIsGreaterThanOrEqualTo_(NSObject object) {
    return _lib._objc_msgSend_0(
      this.pointer,
      _lib._sel_scriptingIsGreaterThanOrEqualTo_1,
      object.pointer,
    );
  }

  bool scriptingIsGreaterThan_(NSObject object) {
    return _lib._objc_msgSend_0(
      this.pointer,
      _lib._sel_scriptingIsGreaterThan_1,
      object.pointer,
    );
  }

  bool scriptingBeginsWith_(NSObject object) {
    return _lib._objc_msgSend_0(
      this.pointer,
      _lib._sel_scriptingBeginsWith_1,
      object.pointer,
    );
  }

  bool scriptingEndsWith_(NSObject object) {
    return _lib._objc_msgSend_0(
      this.pointer,
      _lib._sel_scriptingEndsWith_1,
      object.pointer,
    );
  }

  bool scriptingContains_(NSObject object) {
    return _lib._objc_msgSend_0(
      this.pointer,
      _lib._sel_scriptingContains_1,
      object.pointer,
    );
  }
}

typedef instancetype = ffi.Pointer<objc.ObjCObject>;
typedef Dartinstancetype = NSObject;

final class _NSZone extends ffi.Opaque {}

class Protocol extends objc.ObjCObjectBase {
  Protocol._(
    ffi.Pointer<objc.ObjCObject> pointer,
    this._lib, {
    bool retain = false,
    bool release = false,
  }) : super(pointer, retain: retain, release: release);

  AVFAudio _lib;

  /// Returns a [Protocol] that points to the same underlying object as [other].
  static Protocol castFrom<T extends objc.ObjCObjectBase>(
    AVFAudio lib,
    T other,
  ) {
    return Protocol._(other.pointer, lib, retain: true, release: true);
  }

  /// Returns a [Protocol] that wraps the given raw object pointer.
  static Protocol castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCObject> other, {
    bool retain = false,
    bool release = false,
  }) {
    return Protocol._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [Protocol].
  static bool isInstance(AVFAudio lib, objc.ObjCObjectBase obj) {
    return lib._objc_msgSend_0(
      obj.pointer,
      lib._sel_isKindOfClass_1,
      lib._class_Protocol1,
    );
  }
}

class NSInvocation extends NSObject {
  NSInvocation._(
    ffi.Pointer<objc.ObjCObject> pointer,
    AVFAudio lib, {
    bool retain = false,
    bool release = false,
  }) : super._(pointer, lib, retain: retain, release: release);

  /// Returns a [NSInvocation] that points to the same underlying object as [other].
  static NSInvocation castFrom<T extends objc.ObjCObjectBase>(
    AVFAudio lib,
    T other,
  ) {
    return NSInvocation._(other.pointer, lib, retain: true, release: true);
  }

  /// Returns a [NSInvocation] that wraps the given raw object pointer.
  static NSInvocation castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCObject> other, {
    bool retain = false,
    bool release = false,
  }) {
    return NSInvocation._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSInvocation].
  static bool isInstance(AVFAudio lib, objc.ObjCObjectBase obj) {
    return lib._objc_msgSend_0(
      obj.pointer,
      lib._sel_isKindOfClass_1,
      lib._class_NSInvocation1,
    );
  }

  static NSInvocation invocationWithMethodSignature_(
    AVFAudio _lib,
    NSMethodSignature sig,
  ) {
    final _ret = _lib._objc_msgSend_414(
      _lib._class_NSInvocation1,
      _lib._sel_invocationWithMethodSignature_1,
      sig.pointer,
    );
    return NSInvocation._(_ret, _lib, retain: true, release: true);
  }

  NSMethodSignature get methodSignature {
    final _ret = _lib._objc_msgSend_415(
      this.pointer,
      _lib._sel_methodSignature1,
    );
    return NSMethodSignature._(_ret, _lib, retain: true, release: true);
  }

  void retainArguments() {
    _lib._objc_msgSend_1(this.pointer, _lib._sel_retainArguments1);
  }

  bool get argumentsRetained {
    return _lib._objc_msgSend_12(this.pointer, _lib._sel_argumentsRetained1);
  }

  NSObject? get target {
    final _ret = _lib._objc_msgSend_17(this.pointer, _lib._sel_target1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  set target(NSObject? value) {
    return _lib._objc_msgSend_416(
      this.pointer,
      _lib._sel_setTarget_1,
      value?.pointer ?? ffi.nullptr,
    );
  }

  ffi.Pointer<objc.ObjCSelector> get selector {
    return _lib._objc_msgSend_417(this.pointer, _lib._sel_selector1);
  }

  set selector(ffi.Pointer<objc.ObjCSelector> value) {
    return _lib._objc_msgSend_418(this.pointer, _lib._sel_setSelector_1, value);
  }

  void getReturnValue_(ffi.Pointer<ffi.Void> retLoc) {
    _lib._objc_msgSend_52(this.pointer, _lib._sel_getReturnValue_1, retLoc);
  }

  void setReturnValue_(ffi.Pointer<ffi.Void> retLoc) {
    _lib._objc_msgSend_52(this.pointer, _lib._sel_setReturnValue_1, retLoc);
  }

  void getArgument_atIndex_(ffi.Pointer<ffi.Void> argumentLocation, int idx) {
    _lib._objc_msgSend_419(
      this.pointer,
      _lib._sel_getArgument_atIndex_1,
      argumentLocation,
      idx,
    );
  }

  void setArgument_atIndex_(ffi.Pointer<ffi.Void> argumentLocation, int idx) {
    _lib._objc_msgSend_419(
      this.pointer,
      _lib._sel_setArgument_atIndex_1,
      argumentLocation,
      idx,
    );
  }

  void invoke() {
    _lib._objc_msgSend_1(this.pointer, _lib._sel_invoke1);
  }

  void invokeWithTarget_(NSObject target) {
    _lib._objc_msgSend_15(
      this.pointer,
      _lib._sel_invokeWithTarget_1,
      target.pointer,
    );
  }

  void invokeUsingIMP_(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> imp,
  ) {
    _lib._objc_msgSend_420(this.pointer, _lib._sel_invokeUsingIMP_1, imp);
  }

  @override
  NSInvocation init() {
    final _ret = _lib._objc_msgSend_2(this.pointer, _lib._sel_init1);
    return NSInvocation._(_ret, _lib, retain: true, release: true);
  }

  static NSInvocation new1(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSInvocation1,
      _lib._sel_new1,
    );
    return NSInvocation._(_ret, _lib, retain: false, release: true);
  }

  static NSInvocation allocWithZone_(AVFAudio _lib, ffi.Pointer<_NSZone> zone) {
    final _ret = _lib._objc_msgSend_3(
      _lib._class_NSInvocation1,
      _lib._sel_allocWithZone_1,
      zone,
    );
    return NSInvocation._(_ret, _lib, retain: false, release: true);
  }

  static NSInvocation alloc(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSInvocation1,
      _lib._sel_alloc1,
    );
    return NSInvocation._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
    AVFAudio _lib,
    NSObject aTarget,
    ffi.Pointer<objc.ObjCSelector> aSelector,
    NSObject? anArgument,
  ) {
    _lib._objc_msgSend_14(
      _lib._class_NSInvocation1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
      aTarget.pointer,
      aSelector,
      anArgument?.pointer ?? ffi.nullptr,
    );
  }

  static void cancelPreviousPerformRequestsWithTarget_(
    AVFAudio _lib,
    NSObject aTarget,
  ) {
    _lib._objc_msgSend_15(
      _lib._class_NSInvocation1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_1,
      aTarget.pointer,
    );
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSInvocation1,
      _lib._sel_accessInstanceVariablesDirectly1,
    );
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSInvocation1,
      _lib._sel_useStoredAccessor1,
    );
  }

  static NSSet keyPathsForValuesAffectingValueForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    final _ret = _lib._objc_msgSend_63(
      _lib._class_NSInvocation1,
      _lib._sel_keyPathsForValuesAffectingValueForKey_1,
      key.pointer,
    );
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    return _lib._objc_msgSend_64(
      _lib._class_NSInvocation1,
      _lib._sel_automaticallyNotifiesObserversForKey_1,
      key.pointer,
    );
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
    AVFAudio _lib,
    NSArray keys,
    NSString dependentKey,
  ) {
    _lib._objc_msgSend_88(
      _lib._class_NSInvocation1,
      _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
      keys.pointer,
      dependentKey.pointer,
    );
  }

  static NSArray classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_85(
      _lib._class_NSInvocation1,
      _lib._sel_classFallbacksForKeyedArchiver1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSInvocation1,
      _lib._sel_classForKeyedUnarchiver1,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

class NSMethodSignature extends NSObject {
  NSMethodSignature._(
    ffi.Pointer<objc.ObjCObject> pointer,
    AVFAudio lib, {
    bool retain = false,
    bool release = false,
  }) : super._(pointer, lib, retain: retain, release: release);

  /// Returns a [NSMethodSignature] that points to the same underlying object as [other].
  static NSMethodSignature castFrom<T extends objc.ObjCObjectBase>(
    AVFAudio lib,
    T other,
  ) {
    return NSMethodSignature._(other.pointer, lib, retain: true, release: true);
  }

  /// Returns a [NSMethodSignature] that wraps the given raw object pointer.
  static NSMethodSignature castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCObject> other, {
    bool retain = false,
    bool release = false,
  }) {
    return NSMethodSignature._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSMethodSignature].
  static bool isInstance(AVFAudio lib, objc.ObjCObjectBase obj) {
    return lib._objc_msgSend_0(
      obj.pointer,
      lib._sel_isKindOfClass_1,
      lib._class_NSMethodSignature1,
    );
  }

  static NSMethodSignature? signatureWithObjCTypes_(
    AVFAudio _lib,
    ffi.Pointer<ffi.Char> types,
  ) {
    final _ret = _lib._objc_msgSend_9(
      _lib._class_NSMethodSignature1,
      _lib._sel_signatureWithObjCTypes_1,
      types,
    );
    return _ret.address == 0
        ? null
        : NSMethodSignature._(_ret, _lib, retain: true, release: true);
  }

  int get numberOfArguments {
    return _lib._objc_msgSend_10(this.pointer, _lib._sel_numberOfArguments1);
  }

  ffi.Pointer<ffi.Char> getArgumentTypeAtIndex_(int idx) {
    return _lib._objc_msgSend_11(
      this.pointer,
      _lib._sel_getArgumentTypeAtIndex_1,
      idx,
    );
  }

  int get frameLength {
    return _lib._objc_msgSend_10(this.pointer, _lib._sel_frameLength1);
  }

  bool isOneway() {
    return _lib._objc_msgSend_12(this.pointer, _lib._sel_isOneway1);
  }

  ffi.Pointer<ffi.Char> get methodReturnType {
    return _lib._objc_msgSend_13(this.pointer, _lib._sel_methodReturnType1);
  }

  int get methodReturnLength {
    return _lib._objc_msgSend_10(this.pointer, _lib._sel_methodReturnLength1);
  }

  @override
  NSMethodSignature init() {
    final _ret = _lib._objc_msgSend_2(this.pointer, _lib._sel_init1);
    return NSMethodSignature._(_ret, _lib, retain: true, release: true);
  }

  static NSMethodSignature new1(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSMethodSignature1,
      _lib._sel_new1,
    );
    return NSMethodSignature._(_ret, _lib, retain: false, release: true);
  }

  static NSMethodSignature allocWithZone_(
    AVFAudio _lib,
    ffi.Pointer<_NSZone> zone,
  ) {
    final _ret = _lib._objc_msgSend_3(
      _lib._class_NSMethodSignature1,
      _lib._sel_allocWithZone_1,
      zone,
    );
    return NSMethodSignature._(_ret, _lib, retain: false, release: true);
  }

  static NSMethodSignature alloc(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSMethodSignature1,
      _lib._sel_alloc1,
    );
    return NSMethodSignature._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
    AVFAudio _lib,
    NSObject aTarget,
    ffi.Pointer<objc.ObjCSelector> aSelector,
    NSObject? anArgument,
  ) {
    _lib._objc_msgSend_14(
      _lib._class_NSMethodSignature1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
      aTarget.pointer,
      aSelector,
      anArgument?.pointer ?? ffi.nullptr,
    );
  }

  static void cancelPreviousPerformRequestsWithTarget_(
    AVFAudio _lib,
    NSObject aTarget,
  ) {
    _lib._objc_msgSend_15(
      _lib._class_NSMethodSignature1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_1,
      aTarget.pointer,
    );
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSMethodSignature1,
      _lib._sel_accessInstanceVariablesDirectly1,
    );
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSMethodSignature1,
      _lib._sel_useStoredAccessor1,
    );
  }

  static NSSet keyPathsForValuesAffectingValueForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    final _ret = _lib._objc_msgSend_63(
      _lib._class_NSMethodSignature1,
      _lib._sel_keyPathsForValuesAffectingValueForKey_1,
      key.pointer,
    );
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    return _lib._objc_msgSend_64(
      _lib._class_NSMethodSignature1,
      _lib._sel_automaticallyNotifiesObserversForKey_1,
      key.pointer,
    );
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
    AVFAudio _lib,
    NSArray keys,
    NSString dependentKey,
  ) {
    _lib._objc_msgSend_88(
      _lib._class_NSMethodSignature1,
      _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
      keys.pointer,
      dependentKey.pointer,
    );
  }

  static NSArray classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_85(
      _lib._class_NSMethodSignature1,
      _lib._sel_classFallbacksForKeyedArchiver1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSMethodSignature1,
      _lib._sel_classForKeyedUnarchiver1,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

class NSSet extends NSObject {
  NSSet._(
    ffi.Pointer<objc.ObjCObject> pointer,
    AVFAudio lib, {
    bool retain = false,
    bool release = false,
  }) : super._(pointer, lib, retain: retain, release: release);

  /// Returns a [NSSet] that points to the same underlying object as [other].
  static NSSet castFrom<T extends objc.ObjCObjectBase>(AVFAudio lib, T other) {
    return NSSet._(other.pointer, lib, retain: true, release: true);
  }

  /// Returns a [NSSet] that wraps the given raw object pointer.
  static NSSet castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCObject> other, {
    bool retain = false,
    bool release = false,
  }) {
    return NSSet._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSSet].
  static bool isInstance(AVFAudio lib, objc.ObjCObjectBase obj) {
    return lib._objc_msgSend_0(
      obj.pointer,
      lib._sel_isKindOfClass_1,
      lib._class_NSSet1,
    );
  }

  int get count {
    return _lib._objc_msgSend_10(this.pointer, _lib._sel_count1);
  }

  NSObject? member_(NSObject object) {
    final _ret = _lib._objc_msgSend_16(
      this.pointer,
      _lib._sel_member_1,
      object.pointer,
    );
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSEnumerator objectEnumerator() {
    final _ret = _lib._objc_msgSend_77(
      this.pointer,
      _lib._sel_objectEnumerator1,
    );
    return NSEnumerator._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSSet init() {
    final _ret = _lib._objc_msgSend_2(this.pointer, _lib._sel_init1);
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  NSSet initWithObjects_count_(
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> objects,
    int cnt,
  ) {
    final _ret = _lib._objc_msgSend_66(
      this.pointer,
      _lib._sel_initWithObjects_count_1,
      objects,
      cnt,
    );
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  NSSet? initWithCoder_(NSCoder coder) {
    final _ret = _lib._objc_msgSend_47(
      this.pointer,
      _lib._sel_initWithCoder_1,
      coder.pointer,
    );
    return _ret.address == 0
        ? null
        : NSSet._(_ret, _lib, retain: true, release: true);
  }

  NSArray get allObjects {
    final _ret = _lib._objc_msgSend_85(this.pointer, _lib._sel_allObjects1);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSObject? anyObject() {
    final _ret = _lib._objc_msgSend_17(this.pointer, _lib._sel_anyObject1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  bool containsObject_(NSObject anObject) {
    return _lib._objc_msgSend_0(
      this.pointer,
      _lib._sel_containsObject_1,
      anObject.pointer,
    );
  }

  NSString get description {
    final _ret = _lib._objc_msgSend_21(this.pointer, _lib._sel_description1);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString descriptionWithLocale_(NSObject? locale) {
    final _ret = _lib._objc_msgSend_70(
      this.pointer,
      _lib._sel_descriptionWithLocale_1,
      locale?.pointer ?? ffi.nullptr,
    );
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  bool intersectsSet_(NSSet otherSet) {
    return _lib._objc_msgSend_403(
      this.pointer,
      _lib._sel_intersectsSet_1,
      otherSet.pointer,
    );
  }

  bool isEqualToSet_(NSSet otherSet) {
    return _lib._objc_msgSend_403(
      this.pointer,
      _lib._sel_isEqualToSet_1,
      otherSet.pointer,
    );
  }

  bool isSubsetOfSet_(NSSet otherSet) {
    return _lib._objc_msgSend_403(
      this.pointer,
      _lib._sel_isSubsetOfSet_1,
      otherSet.pointer,
    );
  }

  void makeObjectsPerformSelector_(ffi.Pointer<objc.ObjCSelector> aSelector) {
    _lib._objc_msgSend_7(
      this.pointer,
      _lib._sel_makeObjectsPerformSelector_1,
      aSelector,
    );
  }

  void makeObjectsPerformSelector_withObject_(
    ffi.Pointer<objc.ObjCSelector> aSelector,
    NSObject? argument,
  ) {
    _lib._objc_msgSend_90(
      this.pointer,
      _lib._sel_makeObjectsPerformSelector_withObject_1,
      aSelector,
      argument?.pointer ?? ffi.nullptr,
    );
  }

  NSSet setByAddingObject_(NSObject anObject) {
    final _ret = _lib._objc_msgSend_404(
      this.pointer,
      _lib._sel_setByAddingObject_1,
      anObject.pointer,
    );
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  NSSet setByAddingObjectsFromSet_(NSSet other) {
    final _ret = _lib._objc_msgSend_405(
      this.pointer,
      _lib._sel_setByAddingObjectsFromSet_1,
      other.pointer,
    );
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  NSSet setByAddingObjectsFromArray_(NSArray other) {
    final _ret = _lib._objc_msgSend_406(
      this.pointer,
      _lib._sel_setByAddingObjectsFromArray_1,
      other.pointer,
    );
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  void enumerateObjectsUsingBlock_(
    ObjCBlock_ffiVoid_objcObjCObject_bool block,
  ) {
    _lib._objc_msgSend_407(
      this.pointer,
      _lib._sel_enumerateObjectsUsingBlock_1,
      block.pointer,
    );
  }

  void enumerateObjectsWithOptions_usingBlock_(
    int opts,
    ObjCBlock_ffiVoid_objcObjCObject_bool block,
  ) {
    _lib._objc_msgSend_408(
      this.pointer,
      _lib._sel_enumerateObjectsWithOptions_usingBlock_1,
      opts,
      block.pointer,
    );
  }

  NSSet objectsPassingTest_(ObjCBlock_bool_objcObjCObject_bool predicate) {
    final _ret = _lib._objc_msgSend_409(
      this.pointer,
      _lib._sel_objectsPassingTest_1,
      predicate.pointer,
    );
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  NSSet objectsWithOptions_passingTest_(
    int opts,
    ObjCBlock_bool_objcObjCObject_bool predicate,
  ) {
    final _ret = _lib._objc_msgSend_410(
      this.pointer,
      _lib._sel_objectsWithOptions_passingTest_1,
      opts,
      predicate.pointer,
    );
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  static NSSet set1(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSSet1, _lib._sel_set1);
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  static NSSet setWithObject_(AVFAudio _lib, NSObject object) {
    final _ret = _lib._objc_msgSend_124(
      _lib._class_NSSet1,
      _lib._sel_setWithObject_1,
      object.pointer,
    );
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  static NSSet setWithObjects_count_(
    AVFAudio _lib,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> objects,
    int cnt,
  ) {
    final _ret = _lib._objc_msgSend_66(
      _lib._class_NSSet1,
      _lib._sel_setWithObjects_count_1,
      objects,
      cnt,
    );
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  static NSSet setWithObjects_(AVFAudio _lib, NSObject firstObj) {
    final _ret = _lib._objc_msgSend_124(
      _lib._class_NSSet1,
      _lib._sel_setWithObjects_1,
      firstObj.pointer,
    );
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  static NSSet setWithSet_(AVFAudio _lib, NSSet set) {
    final _ret = _lib._objc_msgSend_411(
      _lib._class_NSSet1,
      _lib._sel_setWithSet_1,
      set.pointer,
    );
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  static NSSet setWithArray_(AVFAudio _lib, NSArray array) {
    final _ret = _lib._objc_msgSend_125(
      _lib._class_NSSet1,
      _lib._sel_setWithArray_1,
      array.pointer,
    );
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  NSSet initWithObjects_(NSObject firstObj) {
    final _ret = _lib._objc_msgSend_124(
      this.pointer,
      _lib._sel_initWithObjects_1,
      firstObj.pointer,
    );
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  NSSet initWithSet_(NSSet set) {
    final _ret = _lib._objc_msgSend_411(
      this.pointer,
      _lib._sel_initWithSet_1,
      set.pointer,
    );
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  NSSet initWithSet_copyItems_(NSSet set, bool flag) {
    final _ret = _lib._objc_msgSend_412(
      this.pointer,
      _lib._sel_initWithSet_copyItems_1,
      set.pointer,
      flag,
    );
    return NSSet._(_ret, _lib, retain: false, release: true);
  }

  NSSet initWithArray_(NSArray array) {
    final _ret = _lib._objc_msgSend_125(
      this.pointer,
      _lib._sel_initWithArray_1,
      array.pointer,
    );
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  NSObject valueForKey_(NSString key) {
    final _ret = _lib._objc_msgSend_31(
      this.pointer,
      _lib._sel_valueForKey_1,
      key.pointer,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  @override
  void setValue_forKey_(NSObject? value, NSString key) {
    _lib._objc_msgSend_135(
      this.pointer,
      _lib._sel_setValue_forKey_1,
      value?.pointer ?? ffi.nullptr,
      key.pointer,
    );
  }

  @override
  void addObserver_forKeyPath_options_context_(
    NSObject observer,
    NSString keyPath,
    int options,
    ffi.Pointer<ffi.Void> context,
  ) {
    _lib._objc_msgSend_139(
      this.pointer,
      _lib._sel_addObserver_forKeyPath_options_context_1,
      observer.pointer,
      keyPath.pointer,
      options,
      context,
    );
  }

  @override
  void removeObserver_forKeyPath_context_(
    NSObject observer,
    NSString keyPath,
    ffi.Pointer<ffi.Void> context,
  ) {
    _lib._objc_msgSend_140(
      this.pointer,
      _lib._sel_removeObserver_forKeyPath_context_1,
      observer.pointer,
      keyPath.pointer,
      context,
    );
  }

  @override
  void removeObserver_forKeyPath_(NSObject observer, NSString keyPath) {
    _lib._objc_msgSend_141(
      this.pointer,
      _lib._sel_removeObserver_forKeyPath_1,
      observer.pointer,
      keyPath.pointer,
    );
  }

  NSArray sortedArrayUsingDescriptors_(NSArray sortDescriptors) {
    final _ret = _lib._objc_msgSend_68(
      this.pointer,
      _lib._sel_sortedArrayUsingDescriptors_1,
      sortDescriptors.pointer,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSSet filteredSetUsingPredicate_(NSPredicate predicate) {
    final _ret = _lib._objc_msgSend_413(
      this.pointer,
      _lib._sel_filteredSetUsingPredicate_1,
      predicate.pointer,
    );
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  static NSSet new1(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSSet1, _lib._sel_new1);
    return NSSet._(_ret, _lib, retain: false, release: true);
  }

  static NSSet allocWithZone_(AVFAudio _lib, ffi.Pointer<_NSZone> zone) {
    final _ret = _lib._objc_msgSend_3(
      _lib._class_NSSet1,
      _lib._sel_allocWithZone_1,
      zone,
    );
    return NSSet._(_ret, _lib, retain: false, release: true);
  }

  static NSSet alloc(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSSet1, _lib._sel_alloc1);
    return NSSet._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
    AVFAudio _lib,
    NSObject aTarget,
    ffi.Pointer<objc.ObjCSelector> aSelector,
    NSObject? anArgument,
  ) {
    _lib._objc_msgSend_14(
      _lib._class_NSSet1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
      aTarget.pointer,
      aSelector,
      anArgument?.pointer ?? ffi.nullptr,
    );
  }

  static void cancelPreviousPerformRequestsWithTarget_(
    AVFAudio _lib,
    NSObject aTarget,
  ) {
    _lib._objc_msgSend_15(
      _lib._class_NSSet1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_1,
      aTarget.pointer,
    );
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSSet1,
      _lib._sel_accessInstanceVariablesDirectly1,
    );
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSSet1,
      _lib._sel_useStoredAccessor1,
    );
  }

  static NSSet keyPathsForValuesAffectingValueForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    final _ret = _lib._objc_msgSend_63(
      _lib._class_NSSet1,
      _lib._sel_keyPathsForValuesAffectingValueForKey_1,
      key.pointer,
    );
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    return _lib._objc_msgSend_64(
      _lib._class_NSSet1,
      _lib._sel_automaticallyNotifiesObserversForKey_1,
      key.pointer,
    );
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
    AVFAudio _lib,
    NSArray keys,
    NSString dependentKey,
  ) {
    _lib._objc_msgSend_88(
      _lib._class_NSSet1,
      _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
      keys.pointer,
      dependentKey.pointer,
    );
  }

  static NSArray classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_85(
      _lib._class_NSSet1,
      _lib._sel_classFallbacksForKeyedArchiver1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSSet1,
      _lib._sel_classForKeyedUnarchiver1,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

class NSEnumerator extends NSObject {
  NSEnumerator._(
    ffi.Pointer<objc.ObjCObject> pointer,
    AVFAudio lib, {
    bool retain = false,
    bool release = false,
  }) : super._(pointer, lib, retain: retain, release: release);

  /// Returns a [NSEnumerator] that points to the same underlying object as [other].
  static NSEnumerator castFrom<T extends objc.ObjCObjectBase>(
    AVFAudio lib,
    T other,
  ) {
    return NSEnumerator._(other.pointer, lib, retain: true, release: true);
  }

  /// Returns a [NSEnumerator] that wraps the given raw object pointer.
  static NSEnumerator castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCObject> other, {
    bool retain = false,
    bool release = false,
  }) {
    return NSEnumerator._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSEnumerator].
  static bool isInstance(AVFAudio lib, objc.ObjCObjectBase obj) {
    return lib._objc_msgSend_0(
      obj.pointer,
      lib._sel_isKindOfClass_1,
      lib._class_NSEnumerator1,
    );
  }

  NSObject? nextObject() {
    final _ret = _lib._objc_msgSend_17(this.pointer, _lib._sel_nextObject1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject get allObjects {
    final _ret = _lib._objc_msgSend_2(this.pointer, _lib._sel_allObjects1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSEnumerator init() {
    final _ret = _lib._objc_msgSend_2(this.pointer, _lib._sel_init1);
    return NSEnumerator._(_ret, _lib, retain: true, release: true);
  }

  static NSEnumerator new1(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSEnumerator1,
      _lib._sel_new1,
    );
    return NSEnumerator._(_ret, _lib, retain: false, release: true);
  }

  static NSEnumerator allocWithZone_(AVFAudio _lib, ffi.Pointer<_NSZone> zone) {
    final _ret = _lib._objc_msgSend_3(
      _lib._class_NSEnumerator1,
      _lib._sel_allocWithZone_1,
      zone,
    );
    return NSEnumerator._(_ret, _lib, retain: false, release: true);
  }

  static NSEnumerator alloc(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSEnumerator1,
      _lib._sel_alloc1,
    );
    return NSEnumerator._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
    AVFAudio _lib,
    NSObject aTarget,
    ffi.Pointer<objc.ObjCSelector> aSelector,
    NSObject? anArgument,
  ) {
    _lib._objc_msgSend_14(
      _lib._class_NSEnumerator1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
      aTarget.pointer,
      aSelector,
      anArgument?.pointer ?? ffi.nullptr,
    );
  }

  static void cancelPreviousPerformRequestsWithTarget_(
    AVFAudio _lib,
    NSObject aTarget,
  ) {
    _lib._objc_msgSend_15(
      _lib._class_NSEnumerator1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_1,
      aTarget.pointer,
    );
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSEnumerator1,
      _lib._sel_accessInstanceVariablesDirectly1,
    );
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSEnumerator1,
      _lib._sel_useStoredAccessor1,
    );
  }

  static NSSet keyPathsForValuesAffectingValueForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    final _ret = _lib._objc_msgSend_63(
      _lib._class_NSEnumerator1,
      _lib._sel_keyPathsForValuesAffectingValueForKey_1,
      key.pointer,
    );
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    return _lib._objc_msgSend_64(
      _lib._class_NSEnumerator1,
      _lib._sel_automaticallyNotifiesObserversForKey_1,
      key.pointer,
    );
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
    AVFAudio _lib,
    NSArray keys,
    NSString dependentKey,
  ) {
    _lib._objc_msgSend_88(
      _lib._class_NSEnumerator1,
      _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
      keys.pointer,
      dependentKey.pointer,
    );
  }

  static NSArray classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_85(
      _lib._class_NSEnumerator1,
      _lib._sel_classFallbacksForKeyedArchiver1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSEnumerator1,
      _lib._sel_classForKeyedUnarchiver1,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

class NSString extends NSObject {
  NSString._(
    ffi.Pointer<objc.ObjCObject> pointer,
    AVFAudio lib, {
    bool retain = false,
    bool release = false,
  }) : super._(pointer, lib, retain: retain, release: release);

  /// Returns a [NSString] that points to the same underlying object as [other].
  static NSString castFrom<T extends objc.ObjCObjectBase>(
    AVFAudio lib,
    T other,
  ) {
    return NSString._(other.pointer, lib, retain: true, release: true);
  }

  /// Returns a [NSString] that wraps the given raw object pointer.
  static NSString castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCObject> other, {
    bool retain = false,
    bool release = false,
  }) {
    return NSString._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSString].
  static bool isInstance(AVFAudio lib, objc.ObjCObjectBase obj) {
    return lib._objc_msgSend_0(
      obj.pointer,
      lib._sel_isKindOfClass_1,
      lib._class_NSString1,
    );
  }

  factory NSString(AVFAudio _lib, String str) {
    final cstr = str.toNativeUtf16();
    final nsstr = stringWithCharacters_length_(_lib, cstr.cast(), str.length);
    pkg_ffi.calloc.free(cstr);
    return nsstr;
  }

  @override
  String toString() {
    final data = dataUsingEncoding_(
      0x94000100 /* NSUTF16LittleEndianStringEncoding */,
    );
    return data!.bytes.cast<pkg_ffi.Utf16>().toDartString(length: length);
  }

  int get length {
    return _lib._objc_msgSend_10(this.pointer, _lib._sel_length1);
  }

  int characterAtIndex_(int index) {
    return _lib._objc_msgSend_18(
      this.pointer,
      _lib._sel_characterAtIndex_1,
      index,
    );
  }

  @override
  NSString init() {
    final _ret = _lib._objc_msgSend_2(this.pointer, _lib._sel_init1);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString? initWithCoder_(NSCoder coder) {
    final _ret = _lib._objc_msgSend_47(
      this.pointer,
      _lib._sel_initWithCoder_1,
      coder.pointer,
    );
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString substringFromIndex_(int from) {
    final _ret = _lib._objc_msgSend_332(
      this.pointer,
      _lib._sel_substringFromIndex_1,
      from,
    );
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString substringToIndex_(int to) {
    final _ret = _lib._objc_msgSend_332(
      this.pointer,
      _lib._sel_substringToIndex_1,
      to,
    );
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString substringWithRange_(_NSRange range) {
    final _ret = _lib._objc_msgSend_333(
      this.pointer,
      _lib._sel_substringWithRange_1,
      range,
    );
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  void getCharacters_range_(
    ffi.Pointer<ffi.UnsignedShort> buffer,
    _NSRange range,
  ) {
    _lib._objc_msgSend_334(
      this.pointer,
      _lib._sel_getCharacters_range_1,
      buffer,
      range,
    );
  }

  int compare_(NSString string) {
    return _lib._objc_msgSend_335(
      this.pointer,
      _lib._sel_compare_1,
      string.pointer,
    );
  }

  int compare_options_(NSString string, int mask) {
    return _lib._objc_msgSend_336(
      this.pointer,
      _lib._sel_compare_options_1,
      string.pointer,
      mask,
    );
  }

  int compare_options_range_(
    NSString string,
    int mask,
    _NSRange rangeOfReceiverToCompare,
  ) {
    return _lib._objc_msgSend_337(
      this.pointer,
      _lib._sel_compare_options_range_1,
      string.pointer,
      mask,
      rangeOfReceiverToCompare,
    );
  }

  int compare_options_range_locale_(
    NSString string,
    int mask,
    _NSRange rangeOfReceiverToCompare,
    NSObject? locale,
  ) {
    return _lib._objc_msgSend_338(
      this.pointer,
      _lib._sel_compare_options_range_locale_1,
      string.pointer,
      mask,
      rangeOfReceiverToCompare,
      locale?.pointer ?? ffi.nullptr,
    );
  }

  int caseInsensitiveCompare_(NSString string) {
    return _lib._objc_msgSend_335(
      this.pointer,
      _lib._sel_caseInsensitiveCompare_1,
      string.pointer,
    );
  }

  int localizedCompare_(NSString string) {
    return _lib._objc_msgSend_335(
      this.pointer,
      _lib._sel_localizedCompare_1,
      string.pointer,
    );
  }

  int localizedCaseInsensitiveCompare_(NSString string) {
    return _lib._objc_msgSend_335(
      this.pointer,
      _lib._sel_localizedCaseInsensitiveCompare_1,
      string.pointer,
    );
  }

  int localizedStandardCompare_(NSString string) {
    return _lib._objc_msgSend_335(
      this.pointer,
      _lib._sel_localizedStandardCompare_1,
      string.pointer,
    );
  }

  bool isEqualToString_(NSString aString) {
    return _lib._objc_msgSend_64(
      this.pointer,
      _lib._sel_isEqualToString_1,
      aString.pointer,
    );
  }

  bool hasPrefix_(NSString str) {
    return _lib._objc_msgSend_64(
      this.pointer,
      _lib._sel_hasPrefix_1,
      str.pointer,
    );
  }

  bool hasSuffix_(NSString str) {
    return _lib._objc_msgSend_64(
      this.pointer,
      _lib._sel_hasSuffix_1,
      str.pointer,
    );
  }

  NSString commonPrefixWithString_options_(NSString str, int mask) {
    final _ret = _lib._objc_msgSend_339(
      this.pointer,
      _lib._sel_commonPrefixWithString_options_1,
      str.pointer,
      mask,
    );
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  bool containsString_(NSString str) {
    return _lib._objc_msgSend_64(
      this.pointer,
      _lib._sel_containsString_1,
      str.pointer,
    );
  }

  bool localizedCaseInsensitiveContainsString_(NSString str) {
    return _lib._objc_msgSend_64(
      this.pointer,
      _lib._sel_localizedCaseInsensitiveContainsString_1,
      str.pointer,
    );
  }

  bool localizedStandardContainsString_(NSString str) {
    return _lib._objc_msgSend_64(
      this.pointer,
      _lib._sel_localizedStandardContainsString_1,
      str.pointer,
    );
  }

  void localizedStandardRangeOfString_(
    ffi.Pointer<_NSRange> stret,
    NSString str,
  ) {
    objc.useMsgSendVariants
        ? _lib._objc_msgSend_340_stret(
          stret,
          this.pointer,
          _lib._sel_localizedStandardRangeOfString_1,
          str.pointer,
        )
        : stret.ref = _lib._objc_msgSend_340(
          this.pointer,
          _lib._sel_localizedStandardRangeOfString_1,
          str.pointer,
        );
  }

  void rangeOfString_(ffi.Pointer<_NSRange> stret, NSString searchString) {
    objc.useMsgSendVariants
        ? _lib._objc_msgSend_340_stret(
          stret,
          this.pointer,
          _lib._sel_rangeOfString_1,
          searchString.pointer,
        )
        : stret.ref = _lib._objc_msgSend_340(
          this.pointer,
          _lib._sel_rangeOfString_1,
          searchString.pointer,
        );
  }

  void rangeOfString_options_(
    ffi.Pointer<_NSRange> stret,
    NSString searchString,
    int mask,
  ) {
    objc.useMsgSendVariants
        ? _lib._objc_msgSend_341_stret(
          stret,
          this.pointer,
          _lib._sel_rangeOfString_options_1,
          searchString.pointer,
          mask,
        )
        : stret.ref = _lib._objc_msgSend_341(
          this.pointer,
          _lib._sel_rangeOfString_options_1,
          searchString.pointer,
          mask,
        );
  }

  void rangeOfString_options_range_(
    ffi.Pointer<_NSRange> stret,
    NSString searchString,
    int mask,
    _NSRange rangeOfReceiverToSearch,
  ) {
    objc.useMsgSendVariants
        ? _lib._objc_msgSend_342_stret(
          stret,
          this.pointer,
          _lib._sel_rangeOfString_options_range_1,
          searchString.pointer,
          mask,
          rangeOfReceiverToSearch,
        )
        : stret.ref = _lib._objc_msgSend_342(
          this.pointer,
          _lib._sel_rangeOfString_options_range_1,
          searchString.pointer,
          mask,
          rangeOfReceiverToSearch,
        );
  }

  void rangeOfString_options_range_locale_(
    ffi.Pointer<_NSRange> stret,
    NSString searchString,
    int mask,
    _NSRange rangeOfReceiverToSearch,
    NSLocale? locale,
  ) {
    objc.useMsgSendVariants
        ? _lib._objc_msgSend_343_stret(
          stret,
          this.pointer,
          _lib._sel_rangeOfString_options_range_locale_1,
          searchString.pointer,
          mask,
          rangeOfReceiverToSearch,
          locale?.pointer ?? ffi.nullptr,
        )
        : stret.ref = _lib._objc_msgSend_343(
          this.pointer,
          _lib._sel_rangeOfString_options_range_locale_1,
          searchString.pointer,
          mask,
          rangeOfReceiverToSearch,
          locale?.pointer ?? ffi.nullptr,
        );
  }

  void rangeOfCharacterFromSet_(
    ffi.Pointer<_NSRange> stret,
    NSCharacterSet searchSet,
  ) {
    objc.useMsgSendVariants
        ? _lib._objc_msgSend_344_stret(
          stret,
          this.pointer,
          _lib._sel_rangeOfCharacterFromSet_1,
          searchSet.pointer,
        )
        : stret.ref = _lib._objc_msgSend_344(
          this.pointer,
          _lib._sel_rangeOfCharacterFromSet_1,
          searchSet.pointer,
        );
  }

  void rangeOfCharacterFromSet_options_(
    ffi.Pointer<_NSRange> stret,
    NSCharacterSet searchSet,
    int mask,
  ) {
    objc.useMsgSendVariants
        ? _lib._objc_msgSend_345_stret(
          stret,
          this.pointer,
          _lib._sel_rangeOfCharacterFromSet_options_1,
          searchSet.pointer,
          mask,
        )
        : stret.ref = _lib._objc_msgSend_345(
          this.pointer,
          _lib._sel_rangeOfCharacterFromSet_options_1,
          searchSet.pointer,
          mask,
        );
  }

  void rangeOfCharacterFromSet_options_range_(
    ffi.Pointer<_NSRange> stret,
    NSCharacterSet searchSet,
    int mask,
    _NSRange rangeOfReceiverToSearch,
  ) {
    objc.useMsgSendVariants
        ? _lib._objc_msgSend_346_stret(
          stret,
          this.pointer,
          _lib._sel_rangeOfCharacterFromSet_options_range_1,
          searchSet.pointer,
          mask,
          rangeOfReceiverToSearch,
        )
        : stret.ref = _lib._objc_msgSend_346(
          this.pointer,
          _lib._sel_rangeOfCharacterFromSet_options_range_1,
          searchSet.pointer,
          mask,
          rangeOfReceiverToSearch,
        );
  }

  void rangeOfComposedCharacterSequenceAtIndex_(
    ffi.Pointer<_NSRange> stret,
    int index,
  ) {
    objc.useMsgSendVariants
        ? _lib._objc_msgSend_347_stret(
          stret,
          this.pointer,
          _lib._sel_rangeOfComposedCharacterSequenceAtIndex_1,
          index,
        )
        : stret.ref = _lib._objc_msgSend_347(
          this.pointer,
          _lib._sel_rangeOfComposedCharacterSequenceAtIndex_1,
          index,
        );
  }

  void rangeOfComposedCharacterSequencesForRange_(
    ffi.Pointer<_NSRange> stret,
    _NSRange range,
  ) {
    objc.useMsgSendVariants
        ? _lib._objc_msgSend_348_stret(
          stret,
          this.pointer,
          _lib._sel_rangeOfComposedCharacterSequencesForRange_1,
          range,
        )
        : stret.ref = _lib._objc_msgSend_348(
          this.pointer,
          _lib._sel_rangeOfComposedCharacterSequencesForRange_1,
          range,
        );
  }

  NSString stringByAppendingString_(NSString aString) {
    final _ret = _lib._objc_msgSend_69(
      this.pointer,
      _lib._sel_stringByAppendingString_1,
      aString.pointer,
    );
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString stringByAppendingFormat_(NSString format) {
    final _ret = _lib._objc_msgSend_69(
      this.pointer,
      _lib._sel_stringByAppendingFormat_1,
      format.pointer,
    );
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  double get doubleValue {
    return objc.useMsgSendVariants
        ? _lib._objc_msgSend_165_fpret(this.pointer, _lib._sel_doubleValue1)
        : _lib._objc_msgSend_165(this.pointer, _lib._sel_doubleValue1);
  }

  double get floatValue {
    return objc.useMsgSendVariants
        ? _lib._objc_msgSend_239_fpret(this.pointer, _lib._sel_floatValue1)
        : _lib._objc_msgSend_239(this.pointer, _lib._sel_floatValue1);
  }

  int get intValue {
    return _lib._objc_msgSend_237(this.pointer, _lib._sel_intValue1);
  }

  int get integerValue {
    return _lib._objc_msgSend_83(this.pointer, _lib._sel_integerValue1);
  }

  int get longLongValue {
    return _lib._objc_msgSend_238(this.pointer, _lib._sel_longLongValue1);
  }

  bool get boolValue {
    return _lib._objc_msgSend_12(this.pointer, _lib._sel_boolValue1);
  }

  NSString get uppercaseString {
    final _ret = _lib._objc_msgSend_21(
      this.pointer,
      _lib._sel_uppercaseString1,
    );
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString get lowercaseString {
    final _ret = _lib._objc_msgSend_21(
      this.pointer,
      _lib._sel_lowercaseString1,
    );
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString get capitalizedString {
    final _ret = _lib._objc_msgSend_21(
      this.pointer,
      _lib._sel_capitalizedString1,
    );
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString get localizedUppercaseString {
    final _ret = _lib._objc_msgSend_21(
      this.pointer,
      _lib._sel_localizedUppercaseString1,
    );
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString get localizedLowercaseString {
    final _ret = _lib._objc_msgSend_21(
      this.pointer,
      _lib._sel_localizedLowercaseString1,
    );
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString get localizedCapitalizedString {
    final _ret = _lib._objc_msgSend_21(
      this.pointer,
      _lib._sel_localizedCapitalizedString1,
    );
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString uppercaseStringWithLocale_(NSLocale? locale) {
    final _ret = _lib._objc_msgSend_349(
      this.pointer,
      _lib._sel_uppercaseStringWithLocale_1,
      locale?.pointer ?? ffi.nullptr,
    );
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString lowercaseStringWithLocale_(NSLocale? locale) {
    final _ret = _lib._objc_msgSend_349(
      this.pointer,
      _lib._sel_lowercaseStringWithLocale_1,
      locale?.pointer ?? ffi.nullptr,
    );
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString capitalizedStringWithLocale_(NSLocale? locale) {
    final _ret = _lib._objc_msgSend_349(
      this.pointer,
      _lib._sel_capitalizedStringWithLocale_1,
      locale?.pointer ?? ffi.nullptr,
    );
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  void getLineStart_end_contentsEnd_forRange_(
    ffi.Pointer<ffi.UnsignedLong> startPtr,
    ffi.Pointer<ffi.UnsignedLong> lineEndPtr,
    ffi.Pointer<ffi.UnsignedLong> contentsEndPtr,
    _NSRange range,
  ) {
    _lib._objc_msgSend_350(
      this.pointer,
      _lib._sel_getLineStart_end_contentsEnd_forRange_1,
      startPtr,
      lineEndPtr,
      contentsEndPtr,
      range,
    );
  }

  void lineRangeForRange_(ffi.Pointer<_NSRange> stret, _NSRange range) {
    objc.useMsgSendVariants
        ? _lib._objc_msgSend_348_stret(
          stret,
          this.pointer,
          _lib._sel_lineRangeForRange_1,
          range,
        )
        : stret.ref = _lib._objc_msgSend_348(
          this.pointer,
          _lib._sel_lineRangeForRange_1,
          range,
        );
  }

  void getParagraphStart_end_contentsEnd_forRange_(
    ffi.Pointer<ffi.UnsignedLong> startPtr,
    ffi.Pointer<ffi.UnsignedLong> parEndPtr,
    ffi.Pointer<ffi.UnsignedLong> contentsEndPtr,
    _NSRange range,
  ) {
    _lib._objc_msgSend_350(
      this.pointer,
      _lib._sel_getParagraphStart_end_contentsEnd_forRange_1,
      startPtr,
      parEndPtr,
      contentsEndPtr,
      range,
    );
  }

  void paragraphRangeForRange_(ffi.Pointer<_NSRange> stret, _NSRange range) {
    objc.useMsgSendVariants
        ? _lib._objc_msgSend_348_stret(
          stret,
          this.pointer,
          _lib._sel_paragraphRangeForRange_1,
          range,
        )
        : stret.ref = _lib._objc_msgSend_348(
          this.pointer,
          _lib._sel_paragraphRangeForRange_1,
          range,
        );
  }

  void enumerateSubstringsInRange_options_usingBlock_(
    _NSRange range,
    int opts,
    ObjCBlock_ffiVoid_NSString_NSRange_NSRange_bool block,
  ) {
    _lib._objc_msgSend_351(
      this.pointer,
      _lib._sel_enumerateSubstringsInRange_options_usingBlock_1,
      range,
      opts,
      block.pointer,
    );
  }

  void enumerateLinesUsingBlock_(ObjCBlock_ffiVoid_NSString_bool block) {
    _lib._objc_msgSend_352(
      this.pointer,
      _lib._sel_enumerateLinesUsingBlock_1,
      block.pointer,
    );
  }

  ffi.Pointer<ffi.Char> get UTF8String {
    return _lib._objc_msgSend_13(this.pointer, _lib._sel_UTF8String1);
  }

  int get fastestEncoding {
    return _lib._objc_msgSend_10(this.pointer, _lib._sel_fastestEncoding1);
  }

  int get smallestEncoding {
    return _lib._objc_msgSend_10(this.pointer, _lib._sel_smallestEncoding1);
  }

  NSData? dataUsingEncoding_allowLossyConversion_(int encoding, bool lossy) {
    final _ret = _lib._objc_msgSend_353(
      this.pointer,
      _lib._sel_dataUsingEncoding_allowLossyConversion_1,
      encoding,
      lossy,
    );
    return _ret.address == 0
        ? null
        : NSData._(_ret, _lib, retain: true, release: true);
  }

  NSData? dataUsingEncoding_(int encoding) {
    final _ret = _lib._objc_msgSend_354(
      this.pointer,
      _lib._sel_dataUsingEncoding_1,
      encoding,
    );
    return _ret.address == 0
        ? null
        : NSData._(_ret, _lib, retain: true, release: true);
  }

  bool canBeConvertedToEncoding_(int encoding) {
    return _lib._objc_msgSend_97(
      this.pointer,
      _lib._sel_canBeConvertedToEncoding_1,
      encoding,
    );
  }

  ffi.Pointer<ffi.Char> cStringUsingEncoding_(int encoding) {
    return _lib._objc_msgSend_11(
      this.pointer,
      _lib._sel_cStringUsingEncoding_1,
      encoding,
    );
  }

  bool getCString_maxLength_encoding_(
    ffi.Pointer<ffi.Char> buffer,
    int maxBufferCount,
    int encoding,
  ) {
    return _lib._objc_msgSend_355(
      this.pointer,
      _lib._sel_getCString_maxLength_encoding_1,
      buffer,
      maxBufferCount,
      encoding,
    );
  }

  bool getBytes_maxLength_usedLength_encoding_options_range_remainingRange_(
    ffi.Pointer<ffi.Void> buffer,
    int maxBufferCount,
    ffi.Pointer<ffi.UnsignedLong> usedBufferCount,
    int encoding,
    int options,
    _NSRange range,
    ffi.Pointer<_NSRange> leftover,
  ) {
    return _lib._objc_msgSend_356(
      this.pointer,
      _lib._sel_getBytes_maxLength_usedLength_encoding_options_range_remainingRange_1,
      buffer,
      maxBufferCount,
      usedBufferCount,
      encoding,
      options,
      range,
      leftover,
    );
  }

  int maximumLengthOfBytesUsingEncoding_(int enc) {
    return _lib._objc_msgSend_94(
      this.pointer,
      _lib._sel_maximumLengthOfBytesUsingEncoding_1,
      enc,
    );
  }

  int lengthOfBytesUsingEncoding_(int enc) {
    return _lib._objc_msgSend_94(
      this.pointer,
      _lib._sel_lengthOfBytesUsingEncoding_1,
      enc,
    );
  }

  static ffi.Pointer<ffi.UnsignedLong> getAvailableStringEncodings(
    AVFAudio _lib,
  ) {
    return _lib._objc_msgSend_357(
      _lib._class_NSString1,
      _lib._sel_availableStringEncodings1,
    );
  }

  static NSString localizedNameOfStringEncoding_(AVFAudio _lib, int encoding) {
    final _ret = _lib._objc_msgSend_332(
      _lib._class_NSString1,
      _lib._sel_localizedNameOfStringEncoding_1,
      encoding,
    );
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  static int getDefaultCStringEncoding(AVFAudio _lib) {
    return _lib._objc_msgSend_10(
      _lib._class_NSString1,
      _lib._sel_defaultCStringEncoding1,
    );
  }

  NSString get decomposedStringWithCanonicalMapping {
    final _ret = _lib._objc_msgSend_21(
      this.pointer,
      _lib._sel_decomposedStringWithCanonicalMapping1,
    );
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString get precomposedStringWithCanonicalMapping {
    final _ret = _lib._objc_msgSend_21(
      this.pointer,
      _lib._sel_precomposedStringWithCanonicalMapping1,
    );
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString get decomposedStringWithCompatibilityMapping {
    final _ret = _lib._objc_msgSend_21(
      this.pointer,
      _lib._sel_decomposedStringWithCompatibilityMapping1,
    );
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString get precomposedStringWithCompatibilityMapping {
    final _ret = _lib._objc_msgSend_21(
      this.pointer,
      _lib._sel_precomposedStringWithCompatibilityMapping1,
    );
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSArray componentsSeparatedByString_(NSString separator) {
    final _ret = _lib._objc_msgSend_358(
      this.pointer,
      _lib._sel_componentsSeparatedByString_1,
      separator.pointer,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSArray componentsSeparatedByCharactersInSet_(NSCharacterSet separator) {
    final _ret = _lib._objc_msgSend_359(
      this.pointer,
      _lib._sel_componentsSeparatedByCharactersInSet_1,
      separator.pointer,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSString stringByTrimmingCharactersInSet_(NSCharacterSet set) {
    final _ret = _lib._objc_msgSend_360(
      this.pointer,
      _lib._sel_stringByTrimmingCharactersInSet_1,
      set.pointer,
    );
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString stringByPaddingToLength_withString_startingAtIndex_(
    int newLength,
    NSString padString,
    int padIndex,
  ) {
    final _ret = _lib._objc_msgSend_361(
      this.pointer,
      _lib._sel_stringByPaddingToLength_withString_startingAtIndex_1,
      newLength,
      padString.pointer,
      padIndex,
    );
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString stringByFoldingWithOptions_locale_(int options, NSLocale? locale) {
    final _ret = _lib._objc_msgSend_362(
      this.pointer,
      _lib._sel_stringByFoldingWithOptions_locale_1,
      options,
      locale?.pointer ?? ffi.nullptr,
    );
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString stringByReplacingOccurrencesOfString_withString_options_range_(
    NSString target,
    NSString replacement,
    int options,
    _NSRange searchRange,
  ) {
    final _ret = _lib._objc_msgSend_363(
      this.pointer,
      _lib._sel_stringByReplacingOccurrencesOfString_withString_options_range_1,
      target.pointer,
      replacement.pointer,
      options,
      searchRange,
    );
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString stringByReplacingOccurrencesOfString_withString_(
    NSString target,
    NSString replacement,
  ) {
    final _ret = _lib._objc_msgSend_364(
      this.pointer,
      _lib._sel_stringByReplacingOccurrencesOfString_withString_1,
      target.pointer,
      replacement.pointer,
    );
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString stringByReplacingCharactersInRange_withString_(
    _NSRange range,
    NSString replacement,
  ) {
    final _ret = _lib._objc_msgSend_365(
      this.pointer,
      _lib._sel_stringByReplacingCharactersInRange_withString_1,
      range,
      replacement.pointer,
    );
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString? stringByApplyingTransform_reverse_(
    NSString transform,
    bool reverse,
  ) {
    final _ret = _lib._objc_msgSend_366(
      this.pointer,
      _lib._sel_stringByApplyingTransform_reverse_1,
      transform.pointer,
      reverse,
    );
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  bool writeToURL_atomically_encoding_error_(
    NSURL url,
    bool useAuxiliaryFile,
    int enc,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    return _lib._objc_msgSend_367(
      this.pointer,
      _lib._sel_writeToURL_atomically_encoding_error_1,
      url.pointer,
      useAuxiliaryFile,
      enc,
      error,
    );
  }

  bool writeToFile_atomically_encoding_error_(
    NSString path,
    bool useAuxiliaryFile,
    int enc,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    return _lib._objc_msgSend_368(
      this.pointer,
      _lib._sel_writeToFile_atomically_encoding_error_1,
      path.pointer,
      useAuxiliaryFile,
      enc,
      error,
    );
  }

  NSString get description {
    final _ret = _lib._objc_msgSend_21(this.pointer, _lib._sel_description1);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  int get hash {
    return _lib._objc_msgSend_10(this.pointer, _lib._sel_hash1);
  }

  NSString initWithCharactersNoCopy_length_freeWhenDone_(
    ffi.Pointer<ffi.UnsignedShort> characters,
    int length,
    bool freeBuffer,
  ) {
    final _ret = _lib._objc_msgSend_369(
      this.pointer,
      _lib._sel_initWithCharactersNoCopy_length_freeWhenDone_1,
      characters,
      length,
      freeBuffer,
    );
    return NSString._(_ret, _lib, retain: false, release: true);
  }

  NSString initWithCharactersNoCopy_length_deallocator_(
    ffi.Pointer<ffi.UnsignedShort> chars,
    int len,
    ObjCBlock_ffiVoid_ffiUnsignedShort_ffiUnsignedLong? deallocator,
  ) {
    final _ret = _lib._objc_msgSend_370(
      this.pointer,
      _lib._sel_initWithCharactersNoCopy_length_deallocator_1,
      chars,
      len,
      deallocator?.pointer ?? ffi.nullptr,
    );
    return NSString._(_ret, _lib, retain: false, release: true);
  }

  NSString initWithCharacters_length_(
    ffi.Pointer<ffi.UnsignedShort> characters,
    int length,
  ) {
    final _ret = _lib._objc_msgSend_371(
      this.pointer,
      _lib._sel_initWithCharacters_length_1,
      characters,
      length,
    );
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString? initWithUTF8String_(ffi.Pointer<ffi.Char> nullTerminatedCString) {
    final _ret = _lib._objc_msgSend_372(
      this.pointer,
      _lib._sel_initWithUTF8String_1,
      nullTerminatedCString,
    );
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString initWithString_(NSString aString) {
    final _ret = _lib._objc_msgSend_31(
      this.pointer,
      _lib._sel_initWithString_1,
      aString.pointer,
    );
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString initWithFormat_(NSString format) {
    final _ret = _lib._objc_msgSend_31(
      this.pointer,
      _lib._sel_initWithFormat_1,
      format.pointer,
    );
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString initWithFormat_arguments_(
    NSString format,
    ffi.Pointer<__va_list_tag> argList,
  ) {
    final _ret = _lib._objc_msgSend_373(
      this.pointer,
      _lib._sel_initWithFormat_arguments_1,
      format.pointer,
      argList,
    );
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString initWithFormat_locale_(NSString format, NSObject? locale) {
    final _ret = _lib._objc_msgSend_374(
      this.pointer,
      _lib._sel_initWithFormat_locale_1,
      format.pointer,
      locale?.pointer ?? ffi.nullptr,
    );
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString initWithFormat_locale_arguments_(
    NSString format,
    NSObject? locale,
    ffi.Pointer<__va_list_tag> argList,
  ) {
    final _ret = _lib._objc_msgSend_375(
      this.pointer,
      _lib._sel_initWithFormat_locale_arguments_1,
      format.pointer,
      locale?.pointer ?? ffi.nullptr,
      argList,
    );
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString? initWithValidatedFormat_validFormatSpecifiers_error_(
    NSString format,
    NSString validFormatSpecifiers,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    final _ret = _lib._objc_msgSend_376(
      this.pointer,
      _lib._sel_initWithValidatedFormat_validFormatSpecifiers_error_1,
      format.pointer,
      validFormatSpecifiers.pointer,
      error,
    );
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString? initWithValidatedFormat_validFormatSpecifiers_locale_error_(
    NSString format,
    NSString validFormatSpecifiers,
    NSObject? locale,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    final _ret = _lib._objc_msgSend_377(
      this.pointer,
      _lib._sel_initWithValidatedFormat_validFormatSpecifiers_locale_error_1,
      format.pointer,
      validFormatSpecifiers.pointer,
      locale?.pointer ?? ffi.nullptr,
      error,
    );
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString? initWithValidatedFormat_validFormatSpecifiers_arguments_error_(
    NSString format,
    NSString validFormatSpecifiers,
    ffi.Pointer<__va_list_tag> argList,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    final _ret = _lib._objc_msgSend_378(
      this.pointer,
      _lib._sel_initWithValidatedFormat_validFormatSpecifiers_arguments_error_1,
      format.pointer,
      validFormatSpecifiers.pointer,
      argList,
      error,
    );
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString?
  initWithValidatedFormat_validFormatSpecifiers_locale_arguments_error_(
    NSString format,
    NSString validFormatSpecifiers,
    NSObject? locale,
    ffi.Pointer<__va_list_tag> argList,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    final _ret = _lib._objc_msgSend_379(
      this.pointer,
      _lib._sel_initWithValidatedFormat_validFormatSpecifiers_locale_arguments_error_1,
      format.pointer,
      validFormatSpecifiers.pointer,
      locale?.pointer ?? ffi.nullptr,
      argList,
      error,
    );
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString? initWithData_encoding_(NSData data, int encoding) {
    final _ret = _lib._objc_msgSend_380(
      this.pointer,
      _lib._sel_initWithData_encoding_1,
      data.pointer,
      encoding,
    );
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString? initWithBytes_length_encoding_(
    ffi.Pointer<ffi.Void> bytes,
    int len,
    int encoding,
  ) {
    final _ret = _lib._objc_msgSend_381(
      this.pointer,
      _lib._sel_initWithBytes_length_encoding_1,
      bytes,
      len,
      encoding,
    );
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString? initWithBytesNoCopy_length_encoding_freeWhenDone_(
    ffi.Pointer<ffi.Void> bytes,
    int len,
    int encoding,
    bool freeBuffer,
  ) {
    final _ret = _lib._objc_msgSend_382(
      this.pointer,
      _lib._sel_initWithBytesNoCopy_length_encoding_freeWhenDone_1,
      bytes,
      len,
      encoding,
      freeBuffer,
    );
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: false, release: true);
  }

  NSString? initWithBytesNoCopy_length_encoding_deallocator_(
    ffi.Pointer<ffi.Void> bytes,
    int len,
    int encoding,
    ObjCBlock_ffiVoid_ffiVoid_ffiUnsignedLong? deallocator,
  ) {
    final _ret = _lib._objc_msgSend_383(
      this.pointer,
      _lib._sel_initWithBytesNoCopy_length_encoding_deallocator_1,
      bytes,
      len,
      encoding,
      deallocator?.pointer ?? ffi.nullptr,
    );
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: false, release: true);
  }

  static NSString string(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSString1, _lib._sel_string1);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  static NSString stringWithString_(AVFAudio _lib, NSString string) {
    final _ret = _lib._objc_msgSend_31(
      _lib._class_NSString1,
      _lib._sel_stringWithString_1,
      string.pointer,
    );
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  static NSString stringWithCharacters_length_(
    AVFAudio _lib,
    ffi.Pointer<ffi.UnsignedShort> characters,
    int length,
  ) {
    final _ret = _lib._objc_msgSend_371(
      _lib._class_NSString1,
      _lib._sel_stringWithCharacters_length_1,
      characters,
      length,
    );
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  static NSString? stringWithUTF8String_(
    AVFAudio _lib,
    ffi.Pointer<ffi.Char> nullTerminatedCString,
  ) {
    final _ret = _lib._objc_msgSend_372(
      _lib._class_NSString1,
      _lib._sel_stringWithUTF8String_1,
      nullTerminatedCString,
    );
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  static NSString stringWithFormat_(AVFAudio _lib, NSString format) {
    final _ret = _lib._objc_msgSend_31(
      _lib._class_NSString1,
      _lib._sel_stringWithFormat_1,
      format.pointer,
    );
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  static NSString localizedStringWithFormat_(AVFAudio _lib, NSString format) {
    final _ret = _lib._objc_msgSend_31(
      _lib._class_NSString1,
      _lib._sel_localizedStringWithFormat_1,
      format.pointer,
    );
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  static NSString? stringWithValidatedFormat_validFormatSpecifiers_error_(
    AVFAudio _lib,
    NSString format,
    NSString validFormatSpecifiers,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    final _ret = _lib._objc_msgSend_376(
      _lib._class_NSString1,
      _lib._sel_stringWithValidatedFormat_validFormatSpecifiers_error_1,
      format.pointer,
      validFormatSpecifiers.pointer,
      error,
    );
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  static NSString?
  localizedStringWithValidatedFormat_validFormatSpecifiers_error_(
    AVFAudio _lib,
    NSString format,
    NSString validFormatSpecifiers,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    final _ret = _lib._objc_msgSend_376(
      _lib._class_NSString1,
      _lib._sel_localizedStringWithValidatedFormat_validFormatSpecifiers_error_1,
      format.pointer,
      validFormatSpecifiers.pointer,
      error,
    );
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString? initWithCString_encoding_(
    ffi.Pointer<ffi.Char> nullTerminatedCString,
    int encoding,
  ) {
    final _ret = _lib._objc_msgSend_384(
      this.pointer,
      _lib._sel_initWithCString_encoding_1,
      nullTerminatedCString,
      encoding,
    );
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  static NSString? stringWithCString_encoding_(
    AVFAudio _lib,
    ffi.Pointer<ffi.Char> cString,
    int enc,
  ) {
    final _ret = _lib._objc_msgSend_384(
      _lib._class_NSString1,
      _lib._sel_stringWithCString_encoding_1,
      cString,
      enc,
    );
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString? initWithContentsOfURL_encoding_error_(
    NSURL url,
    int enc,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    final _ret = _lib._objc_msgSend_385(
      this.pointer,
      _lib._sel_initWithContentsOfURL_encoding_error_1,
      url.pointer,
      enc,
      error,
    );
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString? initWithContentsOfFile_encoding_error_(
    NSString path,
    int enc,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    final _ret = _lib._objc_msgSend_386(
      this.pointer,
      _lib._sel_initWithContentsOfFile_encoding_error_1,
      path.pointer,
      enc,
      error,
    );
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  static NSString? stringWithContentsOfURL_encoding_error_(
    AVFAudio _lib,
    NSURL url,
    int enc,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    final _ret = _lib._objc_msgSend_385(
      _lib._class_NSString1,
      _lib._sel_stringWithContentsOfURL_encoding_error_1,
      url.pointer,
      enc,
      error,
    );
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  static NSString? stringWithContentsOfFile_encoding_error_(
    AVFAudio _lib,
    NSString path,
    int enc,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    final _ret = _lib._objc_msgSend_386(
      _lib._class_NSString1,
      _lib._sel_stringWithContentsOfFile_encoding_error_1,
      path.pointer,
      enc,
      error,
    );
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString? initWithContentsOfURL_usedEncoding_error_(
    NSURL url,
    ffi.Pointer<ffi.UnsignedLong> enc,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    final _ret = _lib._objc_msgSend_387(
      this.pointer,
      _lib._sel_initWithContentsOfURL_usedEncoding_error_1,
      url.pointer,
      enc,
      error,
    );
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString? initWithContentsOfFile_usedEncoding_error_(
    NSString path,
    ffi.Pointer<ffi.UnsignedLong> enc,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    final _ret = _lib._objc_msgSend_388(
      this.pointer,
      _lib._sel_initWithContentsOfFile_usedEncoding_error_1,
      path.pointer,
      enc,
      error,
    );
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  static NSString? stringWithContentsOfURL_usedEncoding_error_(
    AVFAudio _lib,
    NSURL url,
    ffi.Pointer<ffi.UnsignedLong> enc,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    final _ret = _lib._objc_msgSend_387(
      _lib._class_NSString1,
      _lib._sel_stringWithContentsOfURL_usedEncoding_error_1,
      url.pointer,
      enc,
      error,
    );
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  static NSString? stringWithContentsOfFile_usedEncoding_error_(
    AVFAudio _lib,
    NSString path,
    ffi.Pointer<ffi.UnsignedLong> enc,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    final _ret = _lib._objc_msgSend_388(
      _lib._class_NSString1,
      _lib._sel_stringWithContentsOfFile_usedEncoding_error_1,
      path.pointer,
      enc,
      error,
    );
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  static int
  stringEncodingForData_encodingOptions_convertedString_usedLossyConversion_(
    AVFAudio _lib,
    NSData data,
    NSDictionary? opts,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> string,
    ffi.Pointer<ffi.Bool> usedLossyConversion,
  ) {
    return _lib._objc_msgSend_389(
      _lib._class_NSString1,
      _lib._sel_stringEncodingForData_encodingOptions_convertedString_usedLossyConversion_1,
      data.pointer,
      opts?.pointer ?? ffi.nullptr,
      string,
      usedLossyConversion,
    );
  }

  NSObject propertyList() {
    final _ret = _lib._objc_msgSend_2(this.pointer, _lib._sel_propertyList1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSDictionary? propertyListFromStringsFileFormat() {
    final _ret = _lib._objc_msgSend_390(
      this.pointer,
      _lib._sel_propertyListFromStringsFileFormat1,
    );
    return _ret.address == 0
        ? null
        : NSDictionary._(_ret, _lib, retain: true, release: true);
  }

  ffi.Pointer<ffi.Char> cString() {
    return _lib._objc_msgSend_13(this.pointer, _lib._sel_cString1);
  }

  ffi.Pointer<ffi.Char> lossyCString() {
    return _lib._objc_msgSend_13(this.pointer, _lib._sel_lossyCString1);
  }

  int cStringLength() {
    return _lib._objc_msgSend_10(this.pointer, _lib._sel_cStringLength1);
  }

  void getCString_(ffi.Pointer<ffi.Char> bytes) {
    _lib._objc_msgSend_290(this.pointer, _lib._sel_getCString_1, bytes);
  }

  void getCString_maxLength_(ffi.Pointer<ffi.Char> bytes, int maxLength) {
    _lib._objc_msgSend_391(
      this.pointer,
      _lib._sel_getCString_maxLength_1,
      bytes,
      maxLength,
    );
  }

  void getCString_maxLength_range_remainingRange_(
    ffi.Pointer<ffi.Char> bytes,
    int maxLength,
    _NSRange aRange,
    ffi.Pointer<_NSRange> leftoverRange,
  ) {
    _lib._objc_msgSend_392(
      this.pointer,
      _lib._sel_getCString_maxLength_range_remainingRange_1,
      bytes,
      maxLength,
      aRange,
      leftoverRange,
    );
  }

  bool writeToFile_atomically_(NSString path, bool useAuxiliaryFile) {
    return _lib._objc_msgSend_26(
      this.pointer,
      _lib._sel_writeToFile_atomically_1,
      path.pointer,
      useAuxiliaryFile,
    );
  }

  bool writeToURL_atomically_(NSURL url, bool atomically) {
    return _lib._objc_msgSend_134(
      this.pointer,
      _lib._sel_writeToURL_atomically_1,
      url.pointer,
      atomically,
    );
  }

  NSObject? initWithContentsOfFile_(NSString path) {
    final _ret = _lib._objc_msgSend_38(
      this.pointer,
      _lib._sel_initWithContentsOfFile_1,
      path.pointer,
    );
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? initWithContentsOfURL_(NSURL url) {
    final _ret = _lib._objc_msgSend_277(
      this.pointer,
      _lib._sel_initWithContentsOfURL_1,
      url.pointer,
    );
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject? stringWithContentsOfFile_(AVFAudio _lib, NSString path) {
    final _ret = _lib._objc_msgSend_38(
      _lib._class_NSString1,
      _lib._sel_stringWithContentsOfFile_1,
      path.pointer,
    );
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject? stringWithContentsOfURL_(AVFAudio _lib, NSURL url) {
    final _ret = _lib._objc_msgSend_277(
      _lib._class_NSString1,
      _lib._sel_stringWithContentsOfURL_1,
      url.pointer,
    );
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? initWithCStringNoCopy_length_freeWhenDone_(
    ffi.Pointer<ffi.Char> bytes,
    int length,
    bool freeBuffer,
  ) {
    final _ret = _lib._objc_msgSend_393(
      this.pointer,
      _lib._sel_initWithCStringNoCopy_length_freeWhenDone_1,
      bytes,
      length,
      freeBuffer,
    );
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: false, release: true);
  }

  NSObject? initWithCString_length_(ffi.Pointer<ffi.Char> bytes, int length) {
    final _ret = _lib._objc_msgSend_384(
      this.pointer,
      _lib._sel_initWithCString_length_1,
      bytes,
      length,
    );
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? initWithCString_(ffi.Pointer<ffi.Char> bytes) {
    final _ret = _lib._objc_msgSend_372(
      this.pointer,
      _lib._sel_initWithCString_1,
      bytes,
    );
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject? stringWithCString_length_(
    AVFAudio _lib,
    ffi.Pointer<ffi.Char> bytes,
    int length,
  ) {
    final _ret = _lib._objc_msgSend_384(
      _lib._class_NSString1,
      _lib._sel_stringWithCString_length_1,
      bytes,
      length,
    );
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject? stringWithCString_(
    AVFAudio _lib,
    ffi.Pointer<ffi.Char> bytes,
  ) {
    final _ret = _lib._objc_msgSend_372(
      _lib._class_NSString1,
      _lib._sel_stringWithCString_1,
      bytes,
    );
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  void getCharacters_(ffi.Pointer<ffi.UnsignedShort> buffer) {
    _lib._objc_msgSend_394(this.pointer, _lib._sel_getCharacters_1, buffer);
  }

  NSString variantFittingPresentationWidth_(int width) {
    final _ret = _lib._objc_msgSend_395(
      this.pointer,
      _lib._sel_variantFittingPresentationWidth_1,
      width,
    );
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  static NSString pathWithComponents_(AVFAudio _lib, NSArray components) {
    final _ret = _lib._objc_msgSend_396(
      _lib._class_NSString1,
      _lib._sel_pathWithComponents_1,
      components.pointer,
    );
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSArray get pathComponents {
    final _ret = _lib._objc_msgSend_85(this.pointer, _lib._sel_pathComponents1);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  bool get absolutePath {
    return _lib._objc_msgSend_12(this.pointer, _lib._sel_isAbsolutePath1);
  }

  NSString get lastPathComponent {
    final _ret = _lib._objc_msgSend_21(
      this.pointer,
      _lib._sel_lastPathComponent1,
    );
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString get stringByDeletingLastPathComponent {
    final _ret = _lib._objc_msgSend_21(
      this.pointer,
      _lib._sel_stringByDeletingLastPathComponent1,
    );
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString stringByAppendingPathComponent_(NSString str) {
    final _ret = _lib._objc_msgSend_69(
      this.pointer,
      _lib._sel_stringByAppendingPathComponent_1,
      str.pointer,
    );
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString get pathExtension {
    final _ret = _lib._objc_msgSend_21(this.pointer, _lib._sel_pathExtension1);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString get stringByDeletingPathExtension {
    final _ret = _lib._objc_msgSend_21(
      this.pointer,
      _lib._sel_stringByDeletingPathExtension1,
    );
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString? stringByAppendingPathExtension_(NSString str) {
    final _ret = _lib._objc_msgSend_186(
      this.pointer,
      _lib._sel_stringByAppendingPathExtension_1,
      str.pointer,
    );
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString get stringByAbbreviatingWithTildeInPath {
    final _ret = _lib._objc_msgSend_21(
      this.pointer,
      _lib._sel_stringByAbbreviatingWithTildeInPath1,
    );
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString get stringByExpandingTildeInPath {
    final _ret = _lib._objc_msgSend_21(
      this.pointer,
      _lib._sel_stringByExpandingTildeInPath1,
    );
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString get stringByStandardizingPath {
    final _ret = _lib._objc_msgSend_21(
      this.pointer,
      _lib._sel_stringByStandardizingPath1,
    );
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString get stringByResolvingSymlinksInPath {
    final _ret = _lib._objc_msgSend_21(
      this.pointer,
      _lib._sel_stringByResolvingSymlinksInPath1,
    );
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSArray stringsByAppendingPaths_(NSArray paths) {
    final _ret = _lib._objc_msgSend_68(
      this.pointer,
      _lib._sel_stringsByAppendingPaths_1,
      paths.pointer,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  int completePathIntoString_caseSensitive_matchesIntoArray_filterTypes_(
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outputName,
    bool flag,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outputArray,
    NSArray? filterTypes,
  ) {
    return _lib._objc_msgSend_397(
      this.pointer,
      _lib._sel_completePathIntoString_caseSensitive_matchesIntoArray_filterTypes_1,
      outputName,
      flag,
      outputArray,
      filterTypes?.pointer ?? ffi.nullptr,
    );
  }

  ffi.Pointer<ffi.Char> get fileSystemRepresentation {
    return _lib._objc_msgSend_13(
      this.pointer,
      _lib._sel_fileSystemRepresentation1,
    );
  }

  bool getFileSystemRepresentation_maxLength_(
    ffi.Pointer<ffi.Char> cname,
    int max,
  ) {
    return _lib._objc_msgSend_242(
      this.pointer,
      _lib._sel_getFileSystemRepresentation_maxLength_1,
      cname,
      max,
    );
  }

  NSString? stringByAddingPercentEncodingWithAllowedCharacters_(
    NSCharacterSet allowedCharacters,
  ) {
    final _ret = _lib._objc_msgSend_398(
      this.pointer,
      _lib._sel_stringByAddingPercentEncodingWithAllowedCharacters_1,
      allowedCharacters.pointer,
    );
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString? get stringByRemovingPercentEncoding {
    final _ret = _lib._objc_msgSend_44(
      this.pointer,
      _lib._sel_stringByRemovingPercentEncoding1,
    );
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString? stringByAddingPercentEscapesUsingEncoding_(int enc) {
    final _ret = _lib._objc_msgSend_399(
      this.pointer,
      _lib._sel_stringByAddingPercentEscapesUsingEncoding_1,
      enc,
    );
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString? stringByReplacingPercentEscapesUsingEncoding_(int enc) {
    final _ret = _lib._objc_msgSend_399(
      this.pointer,
      _lib._sel_stringByReplacingPercentEscapesUsingEncoding_1,
      enc,
    );
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSArray linguisticTagsInRange_scheme_options_orthography_tokenRanges_(
    _NSRange range,
    NSString scheme,
    int options,
    NSOrthography? orthography,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> tokenRanges,
  ) {
    final _ret = _lib._objc_msgSend_401(
      this.pointer,
      _lib._sel_linguisticTagsInRange_scheme_options_orthography_tokenRanges_1,
      range,
      scheme.pointer,
      options,
      orthography?.pointer ?? ffi.nullptr,
      tokenRanges,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  void enumerateLinguisticTagsInRange_scheme_options_orthography_usingBlock_(
    _NSRange range,
    NSString scheme,
    int options,
    NSOrthography? orthography,
    ObjCBlock_ffiVoid_NSString_NSRange_NSRange_bool block,
  ) {
    _lib._objc_msgSend_402(
      this.pointer,
      _lib._sel_enumerateLinguisticTagsInRange_scheme_options_orthography_usingBlock_1,
      range,
      scheme.pointer,
      options,
      orthography?.pointer ?? ffi.nullptr,
      block.pointer,
    );
  }

  static NSString new1(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSString1, _lib._sel_new1);
    return NSString._(_ret, _lib, retain: false, release: true);
  }

  static NSString allocWithZone_(AVFAudio _lib, ffi.Pointer<_NSZone> zone) {
    final _ret = _lib._objc_msgSend_3(
      _lib._class_NSString1,
      _lib._sel_allocWithZone_1,
      zone,
    );
    return NSString._(_ret, _lib, retain: false, release: true);
  }

  static NSString alloc(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSString1, _lib._sel_alloc1);
    return NSString._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
    AVFAudio _lib,
    NSObject aTarget,
    ffi.Pointer<objc.ObjCSelector> aSelector,
    NSObject? anArgument,
  ) {
    _lib._objc_msgSend_14(
      _lib._class_NSString1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
      aTarget.pointer,
      aSelector,
      anArgument?.pointer ?? ffi.nullptr,
    );
  }

  static void cancelPreviousPerformRequestsWithTarget_(
    AVFAudio _lib,
    NSObject aTarget,
  ) {
    _lib._objc_msgSend_15(
      _lib._class_NSString1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_1,
      aTarget.pointer,
    );
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSString1,
      _lib._sel_accessInstanceVariablesDirectly1,
    );
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSString1,
      _lib._sel_useStoredAccessor1,
    );
  }

  static NSSet keyPathsForValuesAffectingValueForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    final _ret = _lib._objc_msgSend_63(
      _lib._class_NSString1,
      _lib._sel_keyPathsForValuesAffectingValueForKey_1,
      key.pointer,
    );
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    return _lib._objc_msgSend_64(
      _lib._class_NSString1,
      _lib._sel_automaticallyNotifiesObserversForKey_1,
      key.pointer,
    );
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
    AVFAudio _lib,
    NSArray keys,
    NSString dependentKey,
  ) {
    _lib._objc_msgSend_88(
      _lib._class_NSString1,
      _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
      keys.pointer,
      dependentKey.pointer,
    );
  }

  static NSArray classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_85(
      _lib._class_NSString1,
      _lib._sel_classFallbacksForKeyedArchiver1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSString1,
      _lib._sel_classForKeyedUnarchiver1,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

extension StringToNSString on String {
  NSString toNSString(AVFAudio lib) => NSString(lib, this);
}

class NSCoder extends NSObject {
  NSCoder._(
    ffi.Pointer<objc.ObjCObject> pointer,
    AVFAudio lib, {
    bool retain = false,
    bool release = false,
  }) : super._(pointer, lib, retain: retain, release: release);

  /// Returns a [NSCoder] that points to the same underlying object as [other].
  static NSCoder castFrom<T extends objc.ObjCObjectBase>(
    AVFAudio lib,
    T other,
  ) {
    return NSCoder._(other.pointer, lib, retain: true, release: true);
  }

  /// Returns a [NSCoder] that wraps the given raw object pointer.
  static NSCoder castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCObject> other, {
    bool retain = false,
    bool release = false,
  }) {
    return NSCoder._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSCoder].
  static bool isInstance(AVFAudio lib, objc.ObjCObjectBase obj) {
    return lib._objc_msgSend_0(
      obj.pointer,
      lib._sel_isKindOfClass_1,
      lib._class_NSCoder1,
    );
  }

  void encodeValueOfObjCType_at_(
    ffi.Pointer<ffi.Char> type,
    ffi.Pointer<ffi.Void> addr,
  ) {
    _lib._objc_msgSend_19(
      this.pointer,
      _lib._sel_encodeValueOfObjCType_at_1,
      type,
      addr,
    );
  }

  void encodeDataObject_(NSData data) {
    _lib._objc_msgSend_285(
      this.pointer,
      _lib._sel_encodeDataObject_1,
      data.pointer,
    );
  }

  NSData? decodeDataObject() {
    final _ret = _lib._objc_msgSend_286(
      this.pointer,
      _lib._sel_decodeDataObject1,
    );
    return _ret.address == 0
        ? null
        : NSData._(_ret, _lib, retain: true, release: true);
  }

  void decodeValueOfObjCType_at_size_(
    ffi.Pointer<ffi.Char> type,
    ffi.Pointer<ffi.Void> data,
    int size,
  ) {
    _lib._objc_msgSend_287(
      this.pointer,
      _lib._sel_decodeValueOfObjCType_at_size_1,
      type,
      data,
      size,
    );
  }

  int versionForClassName_(NSString className) {
    return _lib._objc_msgSend_288(
      this.pointer,
      _lib._sel_versionForClassName_1,
      className.pointer,
    );
  }

  void encodeObject_(NSObject? object) {
    _lib._objc_msgSend_289(
      this.pointer,
      _lib._sel_encodeObject_1,
      object?.pointer ?? ffi.nullptr,
    );
  }

  void encodeRootObject_(NSObject rootObject) {
    _lib._objc_msgSend_15(
      this.pointer,
      _lib._sel_encodeRootObject_1,
      rootObject.pointer,
    );
  }

  void encodeBycopyObject_(NSObject? anObject) {
    _lib._objc_msgSend_289(
      this.pointer,
      _lib._sel_encodeBycopyObject_1,
      anObject?.pointer ?? ffi.nullptr,
    );
  }

  void encodeByrefObject_(NSObject? anObject) {
    _lib._objc_msgSend_289(
      this.pointer,
      _lib._sel_encodeByrefObject_1,
      anObject?.pointer ?? ffi.nullptr,
    );
  }

  void encodeConditionalObject_(NSObject? object) {
    _lib._objc_msgSend_289(
      this.pointer,
      _lib._sel_encodeConditionalObject_1,
      object?.pointer ?? ffi.nullptr,
    );
  }

  void encodeValuesOfObjCTypes_(ffi.Pointer<ffi.Char> types) {
    _lib._objc_msgSend_290(
      this.pointer,
      _lib._sel_encodeValuesOfObjCTypes_1,
      types,
    );
  }

  void encodeArrayOfObjCType_count_at_(
    ffi.Pointer<ffi.Char> type,
    int count,
    ffi.Pointer<ffi.Void> array,
  ) {
    _lib._objc_msgSend_291(
      this.pointer,
      _lib._sel_encodeArrayOfObjCType_count_at_1,
      type,
      count,
      array,
    );
  }

  void encodeBytes_length_(ffi.Pointer<ffi.Void> byteaddr, int length) {
    _lib._objc_msgSend_22(
      this.pointer,
      _lib._sel_encodeBytes_length_1,
      byteaddr,
      length,
    );
  }

  NSObject? decodeObject() {
    final _ret = _lib._objc_msgSend_17(this.pointer, _lib._sel_decodeObject1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? decodeTopLevelObjectAndReturnError_(
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    final _ret = _lib._objc_msgSend_292(
      this.pointer,
      _lib._sel_decodeTopLevelObjectAndReturnError_1,
      error,
    );
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  void decodeValuesOfObjCTypes_(ffi.Pointer<ffi.Char> types) {
    _lib._objc_msgSend_290(
      this.pointer,
      _lib._sel_decodeValuesOfObjCTypes_1,
      types,
    );
  }

  void decodeArrayOfObjCType_count_at_(
    ffi.Pointer<ffi.Char> itemType,
    int count,
    ffi.Pointer<ffi.Void> array,
  ) {
    _lib._objc_msgSend_291(
      this.pointer,
      _lib._sel_decodeArrayOfObjCType_count_at_1,
      itemType,
      count,
      array,
    );
  }

  ffi.Pointer<ffi.Void> decodeBytesWithReturnedLength_(
    ffi.Pointer<ffi.UnsignedLong> lengthp,
  ) {
    return _lib._objc_msgSend_293(
      this.pointer,
      _lib._sel_decodeBytesWithReturnedLength_1,
      lengthp,
    );
  }

  void encodePropertyList_(NSObject aPropertyList) {
    _lib._objc_msgSend_15(
      this.pointer,
      _lib._sel_encodePropertyList_1,
      aPropertyList.pointer,
    );
  }

  NSObject? decodePropertyList() {
    final _ret = _lib._objc_msgSend_17(
      this.pointer,
      _lib._sel_decodePropertyList1,
    );
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  void setObjectZone_(ffi.Pointer<_NSZone> zone) {
    _lib._objc_msgSend_294(this.pointer, _lib._sel_setObjectZone_1, zone);
  }

  ffi.Pointer<_NSZone> objectZone() {
    return _lib._objc_msgSend_295(this.pointer, _lib._sel_objectZone1);
  }

  int get systemVersion {
    return _lib._objc_msgSend_214(this.pointer, _lib._sel_systemVersion1);
  }

  bool get allowsKeyedCoding {
    return _lib._objc_msgSend_12(this.pointer, _lib._sel_allowsKeyedCoding1);
  }

  void encodeObject_forKey_(NSObject? object, NSString key) {
    _lib._objc_msgSend_135(
      this.pointer,
      _lib._sel_encodeObject_forKey_1,
      object?.pointer ?? ffi.nullptr,
      key.pointer,
    );
  }

  void encodeConditionalObject_forKey_(NSObject? object, NSString key) {
    _lib._objc_msgSend_135(
      this.pointer,
      _lib._sel_encodeConditionalObject_forKey_1,
      object?.pointer ?? ffi.nullptr,
      key.pointer,
    );
  }

  void encodeBool_forKey_(bool value, NSString key) {
    _lib._objc_msgSend_296(
      this.pointer,
      _lib._sel_encodeBool_forKey_1,
      value,
      key.pointer,
    );
  }

  void encodeInt_forKey_(int value, NSString key) {
    _lib._objc_msgSend_297(
      this.pointer,
      _lib._sel_encodeInt_forKey_1,
      value,
      key.pointer,
    );
  }

  void encodeInt32_forKey_(int value, NSString key) {
    _lib._objc_msgSend_298(
      this.pointer,
      _lib._sel_encodeInt32_forKey_1,
      value,
      key.pointer,
    );
  }

  void encodeInt64_forKey_(int value, NSString key) {
    _lib._objc_msgSend_299(
      this.pointer,
      _lib._sel_encodeInt64_forKey_1,
      value,
      key.pointer,
    );
  }

  void encodeFloat_forKey_(double value, NSString key) {
    _lib._objc_msgSend_300(
      this.pointer,
      _lib._sel_encodeFloat_forKey_1,
      value,
      key.pointer,
    );
  }

  void encodeDouble_forKey_(double value, NSString key) {
    _lib._objc_msgSend_301(
      this.pointer,
      _lib._sel_encodeDouble_forKey_1,
      value,
      key.pointer,
    );
  }

  void encodeBytes_length_forKey_(
    ffi.Pointer<ffi.Uint8> bytes,
    int length,
    NSString key,
  ) {
    _lib._objc_msgSend_302(
      this.pointer,
      _lib._sel_encodeBytes_length_forKey_1,
      bytes,
      length,
      key.pointer,
    );
  }

  bool containsValueForKey_(NSString key) {
    return _lib._objc_msgSend_64(
      this.pointer,
      _lib._sel_containsValueForKey_1,
      key.pointer,
    );
  }

  NSObject? decodeObjectForKey_(NSString key) {
    final _ret = _lib._objc_msgSend_38(
      this.pointer,
      _lib._sel_decodeObjectForKey_1,
      key.pointer,
    );
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? decodeTopLevelObjectForKey_error_(
    NSString key,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    final _ret = _lib._objc_msgSend_303(
      this.pointer,
      _lib._sel_decodeTopLevelObjectForKey_error_1,
      key.pointer,
      error,
    );
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  bool decodeBoolForKey_(NSString key) {
    return _lib._objc_msgSend_64(
      this.pointer,
      _lib._sel_decodeBoolForKey_1,
      key.pointer,
    );
  }

  int decodeIntForKey_(NSString key) {
    return _lib._objc_msgSend_304(
      this.pointer,
      _lib._sel_decodeIntForKey_1,
      key.pointer,
    );
  }

  int decodeInt32ForKey_(NSString key) {
    return _lib._objc_msgSend_305(
      this.pointer,
      _lib._sel_decodeInt32ForKey_1,
      key.pointer,
    );
  }

  int decodeInt64ForKey_(NSString key) {
    return _lib._objc_msgSend_306(
      this.pointer,
      _lib._sel_decodeInt64ForKey_1,
      key.pointer,
    );
  }

  double decodeFloatForKey_(NSString key) {
    return objc.useMsgSendVariants
        ? _lib._objc_msgSend_307_fpret(
          this.pointer,
          _lib._sel_decodeFloatForKey_1,
          key.pointer,
        )
        : _lib._objc_msgSend_307(
          this.pointer,
          _lib._sel_decodeFloatForKey_1,
          key.pointer,
        );
  }

  double decodeDoubleForKey_(NSString key) {
    return objc.useMsgSendVariants
        ? _lib._objc_msgSend_308_fpret(
          this.pointer,
          _lib._sel_decodeDoubleForKey_1,
          key.pointer,
        )
        : _lib._objc_msgSend_308(
          this.pointer,
          _lib._sel_decodeDoubleForKey_1,
          key.pointer,
        );
  }

  ffi.Pointer<ffi.Uint8> decodeBytesForKey_returnedLength_(
    NSString key,
    ffi.Pointer<ffi.UnsignedLong> lengthp,
  ) {
    return _lib._objc_msgSend_309(
      this.pointer,
      _lib._sel_decodeBytesForKey_returnedLength_1,
      key.pointer,
      lengthp,
    );
  }

  void encodeInteger_forKey_(int value, NSString key) {
    _lib._objc_msgSend_310(
      this.pointer,
      _lib._sel_encodeInteger_forKey_1,
      value,
      key.pointer,
    );
  }

  int decodeIntegerForKey_(NSString key) {
    return _lib._objc_msgSend_288(
      this.pointer,
      _lib._sel_decodeIntegerForKey_1,
      key.pointer,
    );
  }

  bool get requiresSecureCoding {
    return _lib._objc_msgSend_12(this.pointer, _lib._sel_requiresSecureCoding1);
  }

  NSObject? decodeObjectOfClass_forKey_(NSObject aClass, NSString key) {
    final _ret = _lib._objc_msgSend_311(
      this.pointer,
      _lib._sel_decodeObjectOfClass_forKey_1,
      aClass.pointer,
      key.pointer,
    );
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? decodeTopLevelObjectOfClass_forKey_error_(
    NSObject aClass,
    NSString key,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    final _ret = _lib._objc_msgSend_312(
      this.pointer,
      _lib._sel_decodeTopLevelObjectOfClass_forKey_error_1,
      aClass.pointer,
      key.pointer,
      error,
    );
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSArray? decodeArrayOfObjectsOfClass_forKey_(NSObject cls, NSString key) {
    final _ret = _lib._objc_msgSend_313(
      this.pointer,
      _lib._sel_decodeArrayOfObjectsOfClass_forKey_1,
      cls.pointer,
      key.pointer,
    );
    return _ret.address == 0
        ? null
        : NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSDictionary? decodeDictionaryWithKeysOfClass_objectsOfClass_forKey_(
    NSObject keyCls,
    NSObject objectCls,
    NSString key,
  ) {
    final _ret = _lib._objc_msgSend_314(
      this.pointer,
      _lib._sel_decodeDictionaryWithKeysOfClass_objectsOfClass_forKey_1,
      keyCls.pointer,
      objectCls.pointer,
      key.pointer,
    );
    return _ret.address == 0
        ? null
        : NSDictionary._(_ret, _lib, retain: true, release: true);
  }

  NSObject? decodeObjectOfClasses_forKey_(NSSet? classes, NSString key) {
    final _ret = _lib._objc_msgSend_315(
      this.pointer,
      _lib._sel_decodeObjectOfClasses_forKey_1,
      classes?.pointer ?? ffi.nullptr,
      key.pointer,
    );
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? decodeTopLevelObjectOfClasses_forKey_error_(
    NSSet? classes,
    NSString key,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    final _ret = _lib._objc_msgSend_316(
      this.pointer,
      _lib._sel_decodeTopLevelObjectOfClasses_forKey_error_1,
      classes?.pointer ?? ffi.nullptr,
      key.pointer,
      error,
    );
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSArray? decodeArrayOfObjectsOfClasses_forKey_(NSSet classes, NSString key) {
    final _ret = _lib._objc_msgSend_317(
      this.pointer,
      _lib._sel_decodeArrayOfObjectsOfClasses_forKey_1,
      classes.pointer,
      key.pointer,
    );
    return _ret.address == 0
        ? null
        : NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSDictionary? decodeDictionaryWithKeysOfClasses_objectsOfClasses_forKey_(
    NSSet keyClasses,
    NSSet objectClasses,
    NSString key,
  ) {
    final _ret = _lib._objc_msgSend_318(
      this.pointer,
      _lib._sel_decodeDictionaryWithKeysOfClasses_objectsOfClasses_forKey_1,
      keyClasses.pointer,
      objectClasses.pointer,
      key.pointer,
    );
    return _ret.address == 0
        ? null
        : NSDictionary._(_ret, _lib, retain: true, release: true);
  }

  NSObject? decodePropertyListForKey_(NSString key) {
    final _ret = _lib._objc_msgSend_38(
      this.pointer,
      _lib._sel_decodePropertyListForKey_1,
      key.pointer,
    );
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSSet? get allowedClasses {
    final _ret = _lib._objc_msgSend_319(
      this.pointer,
      _lib._sel_allowedClasses1,
    );
    return _ret.address == 0
        ? null
        : NSSet._(_ret, _lib, retain: true, release: true);
  }

  void failWithError_(NSError error) {
    _lib._objc_msgSend_320(
      this.pointer,
      _lib._sel_failWithError_1,
      error.pointer,
    );
  }

  int get decodingFailurePolicy {
    return _lib._objc_msgSend_321(
      this.pointer,
      _lib._sel_decodingFailurePolicy1,
    );
  }

  NSError? get error {
    final _ret = _lib._objc_msgSend_322(this.pointer, _lib._sel_error1);
    return _ret.address == 0
        ? null
        : NSError._(_ret, _lib, retain: true, release: true);
  }

  void encodeNXObject_(NSObject object) {
    _lib._objc_msgSend_15(
      this.pointer,
      _lib._sel_encodeNXObject_1,
      object.pointer,
    );
  }

  NSObject? decodeNXObject() {
    final _ret = _lib._objc_msgSend_17(this.pointer, _lib._sel_decodeNXObject1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  void decodeValueOfObjCType_at_(
    ffi.Pointer<ffi.Char> type,
    ffi.Pointer<ffi.Void> data,
  ) {
    _lib._objc_msgSend_19(
      this.pointer,
      _lib._sel_decodeValueOfObjCType_at_1,
      type,
      data,
    );
  }

  void encodePoint_(CGPoint point) {
    _lib._objc_msgSend_323(this.pointer, _lib._sel_encodePoint_1, point);
  }

  void decodePoint(ffi.Pointer<CGPoint> stret) {
    objc.useMsgSendVariants
        ? _lib._objc_msgSend_59_stret(
          stret,
          this.pointer,
          _lib._sel_decodePoint1,
        )
        : stret.ref = _lib._objc_msgSend_59(
          this.pointer,
          _lib._sel_decodePoint1,
        );
  }

  void encodeSize_(CGSize size) {
    _lib._objc_msgSend_324(this.pointer, _lib._sel_encodeSize_1, size);
  }

  void decodeSize(ffi.Pointer<CGSize> stret) {
    objc.useMsgSendVariants
        ? _lib._objc_msgSend_60_stret(
          stret,
          this.pointer,
          _lib._sel_decodeSize1,
        )
        : stret.ref = _lib._objc_msgSend_60(
          this.pointer,
          _lib._sel_decodeSize1,
        );
  }

  void encodeRect_(CGRect rect) {
    _lib._objc_msgSend_325(this.pointer, _lib._sel_encodeRect_1, rect);
  }

  void decodeRect(ffi.Pointer<CGRect> stret) {
    objc.useMsgSendVariants
        ? _lib._objc_msgSend_61_stret(
          stret,
          this.pointer,
          _lib._sel_decodeRect1,
        )
        : stret.ref = _lib._objc_msgSend_61(
          this.pointer,
          _lib._sel_decodeRect1,
        );
  }

  void encodePoint_forKey_(CGPoint point, NSString key) {
    _lib._objc_msgSend_326(
      this.pointer,
      _lib._sel_encodePoint_forKey_1,
      point,
      key.pointer,
    );
  }

  void encodeSize_forKey_(CGSize size, NSString key) {
    _lib._objc_msgSend_327(
      this.pointer,
      _lib._sel_encodeSize_forKey_1,
      size,
      key.pointer,
    );
  }

  void encodeRect_forKey_(CGRect rect, NSString key) {
    _lib._objc_msgSend_328(
      this.pointer,
      _lib._sel_encodeRect_forKey_1,
      rect,
      key.pointer,
    );
  }

  void decodePointForKey_(ffi.Pointer<CGPoint> stret, NSString key) {
    objc.useMsgSendVariants
        ? _lib._objc_msgSend_329_stret(
          stret,
          this.pointer,
          _lib._sel_decodePointForKey_1,
          key.pointer,
        )
        : stret.ref = _lib._objc_msgSend_329(
          this.pointer,
          _lib._sel_decodePointForKey_1,
          key.pointer,
        );
  }

  void decodeSizeForKey_(ffi.Pointer<CGSize> stret, NSString key) {
    objc.useMsgSendVariants
        ? _lib._objc_msgSend_330_stret(
          stret,
          this.pointer,
          _lib._sel_decodeSizeForKey_1,
          key.pointer,
        )
        : stret.ref = _lib._objc_msgSend_330(
          this.pointer,
          _lib._sel_decodeSizeForKey_1,
          key.pointer,
        );
  }

  void decodeRectForKey_(ffi.Pointer<CGRect> stret, NSString key) {
    objc.useMsgSendVariants
        ? _lib._objc_msgSend_331_stret(
          stret,
          this.pointer,
          _lib._sel_decodeRectForKey_1,
          key.pointer,
        )
        : stret.ref = _lib._objc_msgSend_331(
          this.pointer,
          _lib._sel_decodeRectForKey_1,
          key.pointer,
        );
  }

  @override
  NSCoder init() {
    final _ret = _lib._objc_msgSend_2(this.pointer, _lib._sel_init1);
    return NSCoder._(_ret, _lib, retain: true, release: true);
  }

  static NSCoder new1(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSCoder1, _lib._sel_new1);
    return NSCoder._(_ret, _lib, retain: false, release: true);
  }

  static NSCoder allocWithZone_(AVFAudio _lib, ffi.Pointer<_NSZone> zone) {
    final _ret = _lib._objc_msgSend_3(
      _lib._class_NSCoder1,
      _lib._sel_allocWithZone_1,
      zone,
    );
    return NSCoder._(_ret, _lib, retain: false, release: true);
  }

  static NSCoder alloc(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSCoder1, _lib._sel_alloc1);
    return NSCoder._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
    AVFAudio _lib,
    NSObject aTarget,
    ffi.Pointer<objc.ObjCSelector> aSelector,
    NSObject? anArgument,
  ) {
    _lib._objc_msgSend_14(
      _lib._class_NSCoder1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
      aTarget.pointer,
      aSelector,
      anArgument?.pointer ?? ffi.nullptr,
    );
  }

  static void cancelPreviousPerformRequestsWithTarget_(
    AVFAudio _lib,
    NSObject aTarget,
  ) {
    _lib._objc_msgSend_15(
      _lib._class_NSCoder1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_1,
      aTarget.pointer,
    );
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSCoder1,
      _lib._sel_accessInstanceVariablesDirectly1,
    );
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSCoder1,
      _lib._sel_useStoredAccessor1,
    );
  }

  static NSSet keyPathsForValuesAffectingValueForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    final _ret = _lib._objc_msgSend_63(
      _lib._class_NSCoder1,
      _lib._sel_keyPathsForValuesAffectingValueForKey_1,
      key.pointer,
    );
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    return _lib._objc_msgSend_64(
      _lib._class_NSCoder1,
      _lib._sel_automaticallyNotifiesObserversForKey_1,
      key.pointer,
    );
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
    AVFAudio _lib,
    NSArray keys,
    NSString dependentKey,
  ) {
    _lib._objc_msgSend_88(
      _lib._class_NSCoder1,
      _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
      keys.pointer,
      dependentKey.pointer,
    );
  }

  static NSArray classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_85(
      _lib._class_NSCoder1,
      _lib._sel_classFallbacksForKeyedArchiver1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSCoder1,
      _lib._sel_classForKeyedUnarchiver1,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

class NSData extends NSObject {
  NSData._(
    ffi.Pointer<objc.ObjCObject> pointer,
    AVFAudio lib, {
    bool retain = false,
    bool release = false,
  }) : super._(pointer, lib, retain: retain, release: release);

  /// Returns a [NSData] that points to the same underlying object as [other].
  static NSData castFrom<T extends objc.ObjCObjectBase>(AVFAudio lib, T other) {
    return NSData._(other.pointer, lib, retain: true, release: true);
  }

  /// Returns a [NSData] that wraps the given raw object pointer.
  static NSData castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCObject> other, {
    bool retain = false,
    bool release = false,
  }) {
    return NSData._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSData].
  static bool isInstance(AVFAudio lib, objc.ObjCObjectBase obj) {
    return lib._objc_msgSend_0(
      obj.pointer,
      lib._sel_isKindOfClass_1,
      lib._class_NSData1,
    );
  }

  int get length {
    return _lib._objc_msgSend_10(this.pointer, _lib._sel_length1);
  }

  ffi.Pointer<ffi.Void> get bytes {
    return _lib._objc_msgSend_20(this.pointer, _lib._sel_bytes1);
  }

  NSString get description {
    final _ret = _lib._objc_msgSend_21(this.pointer, _lib._sel_description1);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  void getBytes_length_(ffi.Pointer<ffi.Void> buffer, int length) {
    _lib._objc_msgSend_22(
      this.pointer,
      _lib._sel_getBytes_length_1,
      buffer,
      length,
    );
  }

  void getBytes_range_(ffi.Pointer<ffi.Void> buffer, _NSRange range) {
    _lib._objc_msgSend_23(
      this.pointer,
      _lib._sel_getBytes_range_1,
      buffer,
      range,
    );
  }

  bool isEqualToData_(NSData other) {
    return _lib._objc_msgSend_24(
      this.pointer,
      _lib._sel_isEqualToData_1,
      other.pointer,
    );
  }

  NSData subdataWithRange_(_NSRange range) {
    final _ret = _lib._objc_msgSend_25(
      this.pointer,
      _lib._sel_subdataWithRange_1,
      range,
    );
    return NSData._(_ret, _lib, retain: true, release: true);
  }

  bool writeToFile_atomically_(NSString path, bool useAuxiliaryFile) {
    return _lib._objc_msgSend_26(
      this.pointer,
      _lib._sel_writeToFile_atomically_1,
      path.pointer,
      useAuxiliaryFile,
    );
  }

  bool writeToURL_atomically_(NSURL url, bool atomically) {
    return _lib._objc_msgSend_134(
      this.pointer,
      _lib._sel_writeToURL_atomically_1,
      url.pointer,
      atomically,
    );
  }

  bool writeToFile_options_error_(
    NSString path,
    int writeOptionsMask,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> errorPtr,
  ) {
    return _lib._objc_msgSend_269(
      this.pointer,
      _lib._sel_writeToFile_options_error_1,
      path.pointer,
      writeOptionsMask,
      errorPtr,
    );
  }

  bool writeToURL_options_error_(
    NSURL url,
    int writeOptionsMask,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> errorPtr,
  ) {
    return _lib._objc_msgSend_270(
      this.pointer,
      _lib._sel_writeToURL_options_error_1,
      url.pointer,
      writeOptionsMask,
      errorPtr,
    );
  }

  void rangeOfData_options_range_(
    ffi.Pointer<_NSRange> stret,
    NSData dataToFind,
    int mask,
    _NSRange searchRange,
  ) {
    objc.useMsgSendVariants
        ? _lib._objc_msgSend_271_stret(
          stret,
          this.pointer,
          _lib._sel_rangeOfData_options_range_1,
          dataToFind.pointer,
          mask,
          searchRange,
        )
        : stret.ref = _lib._objc_msgSend_271(
          this.pointer,
          _lib._sel_rangeOfData_options_range_1,
          dataToFind.pointer,
          mask,
          searchRange,
        );
  }

  void enumerateByteRangesUsingBlock_(
    ObjCBlock_ffiVoid_ffiVoid_NSRange_bool block,
  ) {
    _lib._objc_msgSend_272(
      this.pointer,
      _lib._sel_enumerateByteRangesUsingBlock_1,
      block.pointer,
    );
  }

  static NSData data(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSData1, _lib._sel_data1);
    return NSData._(_ret, _lib, retain: true, release: true);
  }

  static NSData dataWithBytes_length_(
    AVFAudio _lib,
    ffi.Pointer<ffi.Void> bytes,
    int length,
  ) {
    final _ret = _lib._objc_msgSend_273(
      _lib._class_NSData1,
      _lib._sel_dataWithBytes_length_1,
      bytes,
      length,
    );
    return NSData._(_ret, _lib, retain: true, release: true);
  }

  static NSData dataWithBytesNoCopy_length_(
    AVFAudio _lib,
    ffi.Pointer<ffi.Void> bytes,
    int length,
  ) {
    final _ret = _lib._objc_msgSend_273(
      _lib._class_NSData1,
      _lib._sel_dataWithBytesNoCopy_length_1,
      bytes,
      length,
    );
    return NSData._(_ret, _lib, retain: false, release: true);
  }

  static NSData dataWithBytesNoCopy_length_freeWhenDone_(
    AVFAudio _lib,
    ffi.Pointer<ffi.Void> bytes,
    int length,
    bool b,
  ) {
    final _ret = _lib._objc_msgSend_274(
      _lib._class_NSData1,
      _lib._sel_dataWithBytesNoCopy_length_freeWhenDone_1,
      bytes,
      length,
      b,
    );
    return NSData._(_ret, _lib, retain: false, release: true);
  }

  static NSData? dataWithContentsOfFile_options_error_(
    AVFAudio _lib,
    NSString path,
    int readOptionsMask,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> errorPtr,
  ) {
    final _ret = _lib._objc_msgSend_275(
      _lib._class_NSData1,
      _lib._sel_dataWithContentsOfFile_options_error_1,
      path.pointer,
      readOptionsMask,
      errorPtr,
    );
    return _ret.address == 0
        ? null
        : NSData._(_ret, _lib, retain: true, release: true);
  }

  static NSData? dataWithContentsOfURL_options_error_(
    AVFAudio _lib,
    NSURL url,
    int readOptionsMask,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> errorPtr,
  ) {
    final _ret = _lib._objc_msgSend_276(
      _lib._class_NSData1,
      _lib._sel_dataWithContentsOfURL_options_error_1,
      url.pointer,
      readOptionsMask,
      errorPtr,
    );
    return _ret.address == 0
        ? null
        : NSData._(_ret, _lib, retain: true, release: true);
  }

  static NSData? dataWithContentsOfFile_(AVFAudio _lib, NSString path) {
    final _ret = _lib._objc_msgSend_38(
      _lib._class_NSData1,
      _lib._sel_dataWithContentsOfFile_1,
      path.pointer,
    );
    return _ret.address == 0
        ? null
        : NSData._(_ret, _lib, retain: true, release: true);
  }

  static NSData? dataWithContentsOfURL_(AVFAudio _lib, NSURL url) {
    final _ret = _lib._objc_msgSend_277(
      _lib._class_NSData1,
      _lib._sel_dataWithContentsOfURL_1,
      url.pointer,
    );
    return _ret.address == 0
        ? null
        : NSData._(_ret, _lib, retain: true, release: true);
  }

  NSData initWithBytes_length_(ffi.Pointer<ffi.Void> bytes, int length) {
    final _ret = _lib._objc_msgSend_273(
      this.pointer,
      _lib._sel_initWithBytes_length_1,
      bytes,
      length,
    );
    return NSData._(_ret, _lib, retain: true, release: true);
  }

  NSData initWithBytesNoCopy_length_(ffi.Pointer<ffi.Void> bytes, int length) {
    final _ret = _lib._objc_msgSend_273(
      this.pointer,
      _lib._sel_initWithBytesNoCopy_length_1,
      bytes,
      length,
    );
    return NSData._(_ret, _lib, retain: false, release: true);
  }

  NSData initWithBytesNoCopy_length_freeWhenDone_(
    ffi.Pointer<ffi.Void> bytes,
    int length,
    bool b,
  ) {
    final _ret = _lib._objc_msgSend_274(
      this.pointer,
      _lib._sel_initWithBytesNoCopy_length_freeWhenDone_1,
      bytes,
      length,
      b,
    );
    return NSData._(_ret, _lib, retain: false, release: true);
  }

  NSData initWithBytesNoCopy_length_deallocator_(
    ffi.Pointer<ffi.Void> bytes,
    int length,
    ObjCBlock_ffiVoid_ffiVoid_ffiUnsignedLong? deallocator,
  ) {
    final _ret = _lib._objc_msgSend_278(
      this.pointer,
      _lib._sel_initWithBytesNoCopy_length_deallocator_1,
      bytes,
      length,
      deallocator?.pointer ?? ffi.nullptr,
    );
    return NSData._(_ret, _lib, retain: false, release: true);
  }

  NSData? initWithContentsOfFile_options_error_(
    NSString path,
    int readOptionsMask,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> errorPtr,
  ) {
    final _ret = _lib._objc_msgSend_275(
      this.pointer,
      _lib._sel_initWithContentsOfFile_options_error_1,
      path.pointer,
      readOptionsMask,
      errorPtr,
    );
    return _ret.address == 0
        ? null
        : NSData._(_ret, _lib, retain: true, release: true);
  }

  NSData? initWithContentsOfURL_options_error_(
    NSURL url,
    int readOptionsMask,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> errorPtr,
  ) {
    final _ret = _lib._objc_msgSend_276(
      this.pointer,
      _lib._sel_initWithContentsOfURL_options_error_1,
      url.pointer,
      readOptionsMask,
      errorPtr,
    );
    return _ret.address == 0
        ? null
        : NSData._(_ret, _lib, retain: true, release: true);
  }

  NSData? initWithContentsOfFile_(NSString path) {
    final _ret = _lib._objc_msgSend_38(
      this.pointer,
      _lib._sel_initWithContentsOfFile_1,
      path.pointer,
    );
    return _ret.address == 0
        ? null
        : NSData._(_ret, _lib, retain: true, release: true);
  }

  NSData? initWithContentsOfURL_(NSURL url) {
    final _ret = _lib._objc_msgSend_277(
      this.pointer,
      _lib._sel_initWithContentsOfURL_1,
      url.pointer,
    );
    return _ret.address == 0
        ? null
        : NSData._(_ret, _lib, retain: true, release: true);
  }

  NSData initWithData_(NSData data) {
    final _ret = _lib._objc_msgSend_279(
      this.pointer,
      _lib._sel_initWithData_1,
      data.pointer,
    );
    return NSData._(_ret, _lib, retain: true, release: true);
  }

  static NSData dataWithData_(AVFAudio _lib, NSData data) {
    final _ret = _lib._objc_msgSend_279(
      _lib._class_NSData1,
      _lib._sel_dataWithData_1,
      data.pointer,
    );
    return NSData._(_ret, _lib, retain: true, release: true);
  }

  NSData? initWithBase64EncodedString_options_(
    NSString base64String,
    int options,
  ) {
    final _ret = _lib._objc_msgSend_280(
      this.pointer,
      _lib._sel_initWithBase64EncodedString_options_1,
      base64String.pointer,
      options,
    );
    return _ret.address == 0
        ? null
        : NSData._(_ret, _lib, retain: true, release: true);
  }

  NSString base64EncodedStringWithOptions_(int options) {
    final _ret = _lib._objc_msgSend_281(
      this.pointer,
      _lib._sel_base64EncodedStringWithOptions_1,
      options,
    );
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSData? initWithBase64EncodedData_options_(NSData base64Data, int options) {
    final _ret = _lib._objc_msgSend_282(
      this.pointer,
      _lib._sel_initWithBase64EncodedData_options_1,
      base64Data.pointer,
      options,
    );
    return _ret.address == 0
        ? null
        : NSData._(_ret, _lib, retain: true, release: true);
  }

  NSData base64EncodedDataWithOptions_(int options) {
    final _ret = _lib._objc_msgSend_283(
      this.pointer,
      _lib._sel_base64EncodedDataWithOptions_1,
      options,
    );
    return NSData._(_ret, _lib, retain: true, release: true);
  }

  NSData? decompressedDataUsingAlgorithm_error_(
    int algorithm,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    final _ret = _lib._objc_msgSend_284(
      this.pointer,
      _lib._sel_decompressedDataUsingAlgorithm_error_1,
      algorithm,
      error,
    );
    return _ret.address == 0
        ? null
        : NSData._(_ret, _lib, retain: true, release: true);
  }

  NSData? compressedDataUsingAlgorithm_error_(
    int algorithm,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    final _ret = _lib._objc_msgSend_284(
      this.pointer,
      _lib._sel_compressedDataUsingAlgorithm_error_1,
      algorithm,
      error,
    );
    return _ret.address == 0
        ? null
        : NSData._(_ret, _lib, retain: true, release: true);
  }

  void getBytes_(ffi.Pointer<ffi.Void> buffer) {
    _lib._objc_msgSend_52(this.pointer, _lib._sel_getBytes_1, buffer);
  }

  static NSObject? dataWithContentsOfMappedFile_(AVFAudio _lib, NSString path) {
    final _ret = _lib._objc_msgSend_38(
      _lib._class_NSData1,
      _lib._sel_dataWithContentsOfMappedFile_1,
      path.pointer,
    );
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? initWithContentsOfMappedFile_(NSString path) {
    final _ret = _lib._objc_msgSend_38(
      this.pointer,
      _lib._sel_initWithContentsOfMappedFile_1,
      path.pointer,
    );
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? initWithBase64Encoding_(NSString base64String) {
    final _ret = _lib._objc_msgSend_38(
      this.pointer,
      _lib._sel_initWithBase64Encoding_1,
      base64String.pointer,
    );
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSString base64Encoding() {
    final _ret = _lib._objc_msgSend_21(this.pointer, _lib._sel_base64Encoding1);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSData init() {
    final _ret = _lib._objc_msgSend_2(this.pointer, _lib._sel_init1);
    return NSData._(_ret, _lib, retain: true, release: true);
  }

  static NSData new1(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSData1, _lib._sel_new1);
    return NSData._(_ret, _lib, retain: false, release: true);
  }

  static NSData allocWithZone_(AVFAudio _lib, ffi.Pointer<_NSZone> zone) {
    final _ret = _lib._objc_msgSend_3(
      _lib._class_NSData1,
      _lib._sel_allocWithZone_1,
      zone,
    );
    return NSData._(_ret, _lib, retain: false, release: true);
  }

  static NSData alloc(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSData1, _lib._sel_alloc1);
    return NSData._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
    AVFAudio _lib,
    NSObject aTarget,
    ffi.Pointer<objc.ObjCSelector> aSelector,
    NSObject? anArgument,
  ) {
    _lib._objc_msgSend_14(
      _lib._class_NSData1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
      aTarget.pointer,
      aSelector,
      anArgument?.pointer ?? ffi.nullptr,
    );
  }

  static void cancelPreviousPerformRequestsWithTarget_(
    AVFAudio _lib,
    NSObject aTarget,
  ) {
    _lib._objc_msgSend_15(
      _lib._class_NSData1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_1,
      aTarget.pointer,
    );
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSData1,
      _lib._sel_accessInstanceVariablesDirectly1,
    );
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSData1,
      _lib._sel_useStoredAccessor1,
    );
  }

  static NSSet keyPathsForValuesAffectingValueForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    final _ret = _lib._objc_msgSend_63(
      _lib._class_NSData1,
      _lib._sel_keyPathsForValuesAffectingValueForKey_1,
      key.pointer,
    );
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    return _lib._objc_msgSend_64(
      _lib._class_NSData1,
      _lib._sel_automaticallyNotifiesObserversForKey_1,
      key.pointer,
    );
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
    AVFAudio _lib,
    NSArray keys,
    NSString dependentKey,
  ) {
    _lib._objc_msgSend_88(
      _lib._class_NSData1,
      _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
      keys.pointer,
      dependentKey.pointer,
    );
  }

  static NSArray classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_85(
      _lib._class_NSData1,
      _lib._sel_classFallbacksForKeyedArchiver1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSData1,
      _lib._sel_classForKeyedUnarchiver1,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

final class _NSRange extends ffi.Struct {
  @ffi.UnsignedLong()
  external int location;

  @ffi.UnsignedLong()
  external int length;
}

class NSURL extends NSObject {
  NSURL._(
    ffi.Pointer<objc.ObjCObject> pointer,
    AVFAudio lib, {
    bool retain = false,
    bool release = false,
  }) : super._(pointer, lib, retain: retain, release: release);

  /// Returns a [NSURL] that points to the same underlying object as [other].
  static NSURL castFrom<T extends objc.ObjCObjectBase>(AVFAudio lib, T other) {
    return NSURL._(other.pointer, lib, retain: true, release: true);
  }

  /// Returns a [NSURL] that wraps the given raw object pointer.
  static NSURL castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCObject> other, {
    bool retain = false,
    bool release = false,
  }) {
    return NSURL._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSURL].
  static bool isInstance(AVFAudio lib, objc.ObjCObjectBase obj) {
    return lib._objc_msgSend_0(
      obj.pointer,
      lib._sel_isKindOfClass_1,
      lib._class_NSURL1,
    );
  }

  NSURL? initWithScheme_host_path_(
    NSString scheme,
    NSString? host,
    NSString path,
  ) {
    final _ret = _lib._objc_msgSend_27(
      this.pointer,
      _lib._sel_initWithScheme_host_path_1,
      scheme.pointer,
      host?.pointer ?? ffi.nullptr,
      path.pointer,
    );
    return _ret.address == 0
        ? null
        : NSURL._(_ret, _lib, retain: true, release: true);
  }

  NSURL initFileURLWithPath_isDirectory_relativeToURL_(
    NSString path,
    bool isDir,
    NSURL? baseURL,
  ) {
    final _ret = _lib._objc_msgSend_28(
      this.pointer,
      _lib._sel_initFileURLWithPath_isDirectory_relativeToURL_1,
      path.pointer,
      isDir,
      baseURL?.pointer ?? ffi.nullptr,
    );
    return NSURL._(_ret, _lib, retain: true, release: true);
  }

  NSURL initFileURLWithPath_relativeToURL_(NSString path, NSURL? baseURL) {
    final _ret = _lib._objc_msgSend_29(
      this.pointer,
      _lib._sel_initFileURLWithPath_relativeToURL_1,
      path.pointer,
      baseURL?.pointer ?? ffi.nullptr,
    );
    return NSURL._(_ret, _lib, retain: true, release: true);
  }

  NSURL initFileURLWithPath_isDirectory_(NSString path, bool isDir) {
    final _ret = _lib._objc_msgSend_30(
      this.pointer,
      _lib._sel_initFileURLWithPath_isDirectory_1,
      path.pointer,
      isDir,
    );
    return NSURL._(_ret, _lib, retain: true, release: true);
  }

  NSURL initFileURLWithPath_(NSString path) {
    final _ret = _lib._objc_msgSend_31(
      this.pointer,
      _lib._sel_initFileURLWithPath_1,
      path.pointer,
    );
    return NSURL._(_ret, _lib, retain: true, release: true);
  }

  static NSURL fileURLWithPath_isDirectory_relativeToURL_(
    AVFAudio _lib,
    NSString path,
    bool isDir,
    NSURL? baseURL,
  ) {
    final _ret = _lib._objc_msgSend_32(
      _lib._class_NSURL1,
      _lib._sel_fileURLWithPath_isDirectory_relativeToURL_1,
      path.pointer,
      isDir,
      baseURL?.pointer ?? ffi.nullptr,
    );
    return NSURL._(_ret, _lib, retain: true, release: true);
  }

  static NSURL fileURLWithPath_relativeToURL_(
    AVFAudio _lib,
    NSString path,
    NSURL? baseURL,
  ) {
    final _ret = _lib._objc_msgSend_33(
      _lib._class_NSURL1,
      _lib._sel_fileURLWithPath_relativeToURL_1,
      path.pointer,
      baseURL?.pointer ?? ffi.nullptr,
    );
    return NSURL._(_ret, _lib, retain: true, release: true);
  }

  static NSURL fileURLWithPath_isDirectory_(
    AVFAudio _lib,
    NSString path,
    bool isDir,
  ) {
    final _ret = _lib._objc_msgSend_34(
      _lib._class_NSURL1,
      _lib._sel_fileURLWithPath_isDirectory_1,
      path.pointer,
      isDir,
    );
    return NSURL._(_ret, _lib, retain: true, release: true);
  }

  static NSURL fileURLWithPath_(AVFAudio _lib, NSString path) {
    final _ret = _lib._objc_msgSend_35(
      _lib._class_NSURL1,
      _lib._sel_fileURLWithPath_1,
      path.pointer,
    );
    return NSURL._(_ret, _lib, retain: true, release: true);
  }

  NSURL initFileURLWithFileSystemRepresentation_isDirectory_relativeToURL_(
    ffi.Pointer<ffi.Char> path,
    bool isDir,
    NSURL? baseURL,
  ) {
    final _ret = _lib._objc_msgSend_36(
      this.pointer,
      _lib._sel_initFileURLWithFileSystemRepresentation_isDirectory_relativeToURL_1,
      path,
      isDir,
      baseURL?.pointer ?? ffi.nullptr,
    );
    return NSURL._(_ret, _lib, retain: true, release: true);
  }

  static NSURL fileURLWithFileSystemRepresentation_isDirectory_relativeToURL_(
    AVFAudio _lib,
    ffi.Pointer<ffi.Char> path,
    bool isDir,
    NSURL? baseURL,
  ) {
    final _ret = _lib._objc_msgSend_37(
      _lib._class_NSURL1,
      _lib._sel_fileURLWithFileSystemRepresentation_isDirectory_relativeToURL_1,
      path,
      isDir,
      baseURL?.pointer ?? ffi.nullptr,
    );
    return NSURL._(_ret, _lib, retain: true, release: true);
  }

  NSURL? initWithString_(NSString URLString) {
    final _ret = _lib._objc_msgSend_38(
      this.pointer,
      _lib._sel_initWithString_1,
      URLString.pointer,
    );
    return _ret.address == 0
        ? null
        : NSURL._(_ret, _lib, retain: true, release: true);
  }

  NSURL? initWithString_relativeToURL_(NSString URLString, NSURL? baseURL) {
    final _ret = _lib._objc_msgSend_39(
      this.pointer,
      _lib._sel_initWithString_relativeToURL_1,
      URLString.pointer,
      baseURL?.pointer ?? ffi.nullptr,
    );
    return _ret.address == 0
        ? null
        : NSURL._(_ret, _lib, retain: true, release: true);
  }

  static NSURL? URLWithString_(AVFAudio _lib, NSString URLString) {
    final _ret = _lib._objc_msgSend_38(
      _lib._class_NSURL1,
      _lib._sel_URLWithString_1,
      URLString.pointer,
    );
    return _ret.address == 0
        ? null
        : NSURL._(_ret, _lib, retain: true, release: true);
  }

  static NSURL? URLWithString_relativeToURL_(
    AVFAudio _lib,
    NSString URLString,
    NSURL? baseURL,
  ) {
    final _ret = _lib._objc_msgSend_39(
      _lib._class_NSURL1,
      _lib._sel_URLWithString_relativeToURL_1,
      URLString.pointer,
      baseURL?.pointer ?? ffi.nullptr,
    );
    return _ret.address == 0
        ? null
        : NSURL._(_ret, _lib, retain: true, release: true);
  }

  NSURL? initWithString_encodingInvalidCharacters_(
    NSString URLString,
    bool encodingInvalidCharacters,
  ) {
    final _ret = _lib._objc_msgSend_40(
      this.pointer,
      _lib._sel_initWithString_encodingInvalidCharacters_1,
      URLString.pointer,
      encodingInvalidCharacters,
    );
    return _ret.address == 0
        ? null
        : NSURL._(_ret, _lib, retain: true, release: true);
  }

  static NSURL? URLWithString_encodingInvalidCharacters_(
    AVFAudio _lib,
    NSString URLString,
    bool encodingInvalidCharacters,
  ) {
    final _ret = _lib._objc_msgSend_40(
      _lib._class_NSURL1,
      _lib._sel_URLWithString_encodingInvalidCharacters_1,
      URLString.pointer,
      encodingInvalidCharacters,
    );
    return _ret.address == 0
        ? null
        : NSURL._(_ret, _lib, retain: true, release: true);
  }

  NSURL initWithDataRepresentation_relativeToURL_(NSData data, NSURL? baseURL) {
    final _ret = _lib._objc_msgSend_41(
      this.pointer,
      _lib._sel_initWithDataRepresentation_relativeToURL_1,
      data.pointer,
      baseURL?.pointer ?? ffi.nullptr,
    );
    return NSURL._(_ret, _lib, retain: true, release: true);
  }

  static NSURL URLWithDataRepresentation_relativeToURL_(
    AVFAudio _lib,
    NSData data,
    NSURL? baseURL,
  ) {
    final _ret = _lib._objc_msgSend_42(
      _lib._class_NSURL1,
      _lib._sel_URLWithDataRepresentation_relativeToURL_1,
      data.pointer,
      baseURL?.pointer ?? ffi.nullptr,
    );
    return NSURL._(_ret, _lib, retain: true, release: true);
  }

  NSURL initAbsoluteURLWithDataRepresentation_relativeToURL_(
    NSData data,
    NSURL? baseURL,
  ) {
    final _ret = _lib._objc_msgSend_41(
      this.pointer,
      _lib._sel_initAbsoluteURLWithDataRepresentation_relativeToURL_1,
      data.pointer,
      baseURL?.pointer ?? ffi.nullptr,
    );
    return NSURL._(_ret, _lib, retain: true, release: true);
  }

  static NSURL absoluteURLWithDataRepresentation_relativeToURL_(
    AVFAudio _lib,
    NSData data,
    NSURL? baseURL,
  ) {
    final _ret = _lib._objc_msgSend_42(
      _lib._class_NSURL1,
      _lib._sel_absoluteURLWithDataRepresentation_relativeToURL_1,
      data.pointer,
      baseURL?.pointer ?? ffi.nullptr,
    );
    return NSURL._(_ret, _lib, retain: true, release: true);
  }

  NSData get dataRepresentation {
    final _ret = _lib._objc_msgSend_43(
      this.pointer,
      _lib._sel_dataRepresentation1,
    );
    return NSData._(_ret, _lib, retain: true, release: true);
  }

  NSString? get absoluteString {
    final _ret = _lib._objc_msgSend_44(this.pointer, _lib._sel_absoluteString1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString get relativeString {
    final _ret = _lib._objc_msgSend_21(this.pointer, _lib._sel_relativeString1);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSURL? get baseURL {
    final _ret = _lib._objc_msgSend_45(this.pointer, _lib._sel_baseURL1);
    return _ret.address == 0
        ? null
        : NSURL._(_ret, _lib, retain: true, release: true);
  }

  NSURL? get absoluteURL {
    final _ret = _lib._objc_msgSend_45(this.pointer, _lib._sel_absoluteURL1);
    return _ret.address == 0
        ? null
        : NSURL._(_ret, _lib, retain: true, release: true);
  }

  NSString? get scheme {
    final _ret = _lib._objc_msgSend_44(this.pointer, _lib._sel_scheme1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString? get resourceSpecifier {
    final _ret = _lib._objc_msgSend_44(
      this.pointer,
      _lib._sel_resourceSpecifier1,
    );
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString? get host {
    final _ret = _lib._objc_msgSend_44(this.pointer, _lib._sel_host1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSNumber? get port {
    final _ret = _lib._objc_msgSend_215(this.pointer, _lib._sel_port1);
    return _ret.address == 0
        ? null
        : NSNumber._(_ret, _lib, retain: true, release: true);
  }

  NSString? get user {
    final _ret = _lib._objc_msgSend_44(this.pointer, _lib._sel_user1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString? get password {
    final _ret = _lib._objc_msgSend_44(this.pointer, _lib._sel_password1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString? get path {
    final _ret = _lib._objc_msgSend_44(this.pointer, _lib._sel_path1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString? get fragment {
    final _ret = _lib._objc_msgSend_44(this.pointer, _lib._sel_fragment1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString? get parameterString {
    final _ret = _lib._objc_msgSend_44(
      this.pointer,
      _lib._sel_parameterString1,
    );
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString? get query {
    final _ret = _lib._objc_msgSend_44(this.pointer, _lib._sel_query1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString? get relativePath {
    final _ret = _lib._objc_msgSend_44(this.pointer, _lib._sel_relativePath1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  bool get hasDirectoryPath {
    return _lib._objc_msgSend_12(this.pointer, _lib._sel_hasDirectoryPath1);
  }

  bool getFileSystemRepresentation_maxLength_(
    ffi.Pointer<ffi.Char> buffer,
    int maxBufferLength,
  ) {
    return _lib._objc_msgSend_242(
      this.pointer,
      _lib._sel_getFileSystemRepresentation_maxLength_1,
      buffer,
      maxBufferLength,
    );
  }

  ffi.Pointer<ffi.Char> get fileSystemRepresentation {
    return _lib._objc_msgSend_13(
      this.pointer,
      _lib._sel_fileSystemRepresentation1,
    );
  }

  bool get fileURL {
    return _lib._objc_msgSend_12(this.pointer, _lib._sel_isFileURL1);
  }

  NSURL? get standardizedURL {
    final _ret = _lib._objc_msgSend_45(
      this.pointer,
      _lib._sel_standardizedURL1,
    );
    return _ret.address == 0
        ? null
        : NSURL._(_ret, _lib, retain: true, release: true);
  }

  bool isFileReferenceURL() {
    return _lib._objc_msgSend_12(this.pointer, _lib._sel_isFileReferenceURL1);
  }

  NSURL? fileReferenceURL() {
    final _ret = _lib._objc_msgSend_45(
      this.pointer,
      _lib._sel_fileReferenceURL1,
    );
    return _ret.address == 0
        ? null
        : NSURL._(_ret, _lib, retain: true, release: true);
  }

  NSURL? get filePathURL {
    final _ret = _lib._objc_msgSend_45(this.pointer, _lib._sel_filePathURL1);
    return _ret.address == 0
        ? null
        : NSURL._(_ret, _lib, retain: true, release: true);
  }

  bool getResourceValue_forKey_error_(
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> value,
    NSString key,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    return _lib._objc_msgSend_243(
      this.pointer,
      _lib._sel_getResourceValue_forKey_error_1,
      value,
      key.pointer,
      error,
    );
  }

  NSObject? resourceValuesForKeys_error_(
    NSArray keys,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    final _ret = _lib._objc_msgSend_244(
      this.pointer,
      _lib._sel_resourceValuesForKeys_error_1,
      keys.pointer,
      error,
    );
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  bool setResourceValue_forKey_error_(
    NSObject? value,
    NSString key,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    return _lib._objc_msgSend_245(
      this.pointer,
      _lib._sel_setResourceValue_forKey_error_1,
      value?.pointer ?? ffi.nullptr,
      key.pointer,
      error,
    );
  }

  bool setResourceValues_error_(
    NSObject keyedValues,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    return _lib._objc_msgSend_246(
      this.pointer,
      _lib._sel_setResourceValues_error_1,
      keyedValues.pointer,
      error,
    );
  }

  void removeCachedResourceValueForKey_(NSString key) {
    _lib._objc_msgSend_247(
      this.pointer,
      _lib._sel_removeCachedResourceValueForKey_1,
      key.pointer,
    );
  }

  void removeAllCachedResourceValues() {
    _lib._objc_msgSend_1(
      this.pointer,
      _lib._sel_removeAllCachedResourceValues1,
    );
  }

  void setTemporaryResourceValue_forKey_(NSObject? value, NSString key) {
    _lib._objc_msgSend_135(
      this.pointer,
      _lib._sel_setTemporaryResourceValue_forKey_1,
      value?.pointer ?? ffi.nullptr,
      key.pointer,
    );
  }

  NSData?
  bookmarkDataWithOptions_includingResourceValuesForKeys_relativeToURL_error_(
    int options,
    NSArray? keys,
    NSURL? relativeURL,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    final _ret = _lib._objc_msgSend_248(
      this.pointer,
      _lib._sel_bookmarkDataWithOptions_includingResourceValuesForKeys_relativeToURL_error_1,
      options,
      keys?.pointer ?? ffi.nullptr,
      relativeURL?.pointer ?? ffi.nullptr,
      error,
    );
    return _ret.address == 0
        ? null
        : NSData._(_ret, _lib, retain: true, release: true);
  }

  NSURL?
  initByResolvingBookmarkData_options_relativeToURL_bookmarkDataIsStale_error_(
    NSData bookmarkData,
    int options,
    NSURL? relativeURL,
    ffi.Pointer<ffi.Bool> isStale,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    final _ret = _lib._objc_msgSend_249(
      this.pointer,
      _lib._sel_initByResolvingBookmarkData_options_relativeToURL_bookmarkDataIsStale_error_1,
      bookmarkData.pointer,
      options,
      relativeURL?.pointer ?? ffi.nullptr,
      isStale,
      error,
    );
    return _ret.address == 0
        ? null
        : NSURL._(_ret, _lib, retain: true, release: true);
  }

  static NSURL?
  URLByResolvingBookmarkData_options_relativeToURL_bookmarkDataIsStale_error_(
    AVFAudio _lib,
    NSData bookmarkData,
    int options,
    NSURL? relativeURL,
    ffi.Pointer<ffi.Bool> isStale,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    final _ret = _lib._objc_msgSend_249(
      _lib._class_NSURL1,
      _lib._sel_URLByResolvingBookmarkData_options_relativeToURL_bookmarkDataIsStale_error_1,
      bookmarkData.pointer,
      options,
      relativeURL?.pointer ?? ffi.nullptr,
      isStale,
      error,
    );
    return _ret.address == 0
        ? null
        : NSURL._(_ret, _lib, retain: true, release: true);
  }

  static NSObject? resourceValuesForKeys_fromBookmarkData_(
    AVFAudio _lib,
    NSArray keys,
    NSData bookmarkData,
  ) {
    final _ret = _lib._objc_msgSend_250(
      _lib._class_NSURL1,
      _lib._sel_resourceValuesForKeys_fromBookmarkData_1,
      keys.pointer,
      bookmarkData.pointer,
    );
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  static bool writeBookmarkData_toURL_options_error_(
    AVFAudio _lib,
    NSData bookmarkData,
    NSURL bookmarkFileURL,
    int options,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    return _lib._objc_msgSend_251(
      _lib._class_NSURL1,
      _lib._sel_writeBookmarkData_toURL_options_error_1,
      bookmarkData.pointer,
      bookmarkFileURL.pointer,
      options,
      error,
    );
  }

  static NSData? bookmarkDataWithContentsOfURL_error_(
    AVFAudio _lib,
    NSURL bookmarkFileURL,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    final _ret = _lib._objc_msgSend_252(
      _lib._class_NSURL1,
      _lib._sel_bookmarkDataWithContentsOfURL_error_1,
      bookmarkFileURL.pointer,
      error,
    );
    return _ret.address == 0
        ? null
        : NSData._(_ret, _lib, retain: true, release: true);
  }

  static NSURL? URLByResolvingAliasFileAtURL_options_error_(
    AVFAudio _lib,
    NSURL url,
    int options,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    final _ret = _lib._objc_msgSend_253(
      _lib._class_NSURL1,
      _lib._sel_URLByResolvingAliasFileAtURL_options_error_1,
      url.pointer,
      options,
      error,
    );
    return _ret.address == 0
        ? null
        : NSURL._(_ret, _lib, retain: true, release: true);
  }

  bool startAccessingSecurityScopedResource() {
    return _lib._objc_msgSend_12(
      this.pointer,
      _lib._sel_startAccessingSecurityScopedResource1,
    );
  }

  void stopAccessingSecurityScopedResource() {
    _lib._objc_msgSend_1(
      this.pointer,
      _lib._sel_stopAccessingSecurityScopedResource1,
    );
  }

  bool getPromisedItemResourceValue_forKey_error_(
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> value,
    NSString key,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    return _lib._objc_msgSend_243(
      this.pointer,
      _lib._sel_getPromisedItemResourceValue_forKey_error_1,
      value,
      key.pointer,
      error,
    );
  }

  NSDictionary? promisedItemResourceValuesForKeys_error_(
    NSArray keys,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    final _ret = _lib._objc_msgSend_254(
      this.pointer,
      _lib._sel_promisedItemResourceValuesForKeys_error_1,
      keys.pointer,
      error,
    );
    return _ret.address == 0
        ? null
        : NSDictionary._(_ret, _lib, retain: true, release: true);
  }

  bool checkPromisedItemIsReachableAndReturnError_(
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    return _lib._objc_msgSend_255(
      this.pointer,
      _lib._sel_checkPromisedItemIsReachableAndReturnError_1,
      error,
    );
  }

  static NSURL? fileURLWithPathComponents_(AVFAudio _lib, NSArray components) {
    final _ret = _lib._objc_msgSend_256(
      _lib._class_NSURL1,
      _lib._sel_fileURLWithPathComponents_1,
      components.pointer,
    );
    return _ret.address == 0
        ? null
        : NSURL._(_ret, _lib, retain: true, release: true);
  }

  NSArray? get pathComponents {
    final _ret = _lib._objc_msgSend_84(this.pointer, _lib._sel_pathComponents1);
    return _ret.address == 0
        ? null
        : NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSString? get lastPathComponent {
    final _ret = _lib._objc_msgSend_44(
      this.pointer,
      _lib._sel_lastPathComponent1,
    );
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString? get pathExtension {
    final _ret = _lib._objc_msgSend_44(this.pointer, _lib._sel_pathExtension1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSURL? URLByAppendingPathComponent_(NSString pathComponent) {
    final _ret = _lib._objc_msgSend_257(
      this.pointer,
      _lib._sel_URLByAppendingPathComponent_1,
      pathComponent.pointer,
    );
    return _ret.address == 0
        ? null
        : NSURL._(_ret, _lib, retain: true, release: true);
  }

  NSURL? URLByAppendingPathComponent_isDirectory_(
    NSString pathComponent,
    bool isDirectory,
  ) {
    final _ret = _lib._objc_msgSend_258(
      this.pointer,
      _lib._sel_URLByAppendingPathComponent_isDirectory_1,
      pathComponent.pointer,
      isDirectory,
    );
    return _ret.address == 0
        ? null
        : NSURL._(_ret, _lib, retain: true, release: true);
  }

  NSURL? get URLByDeletingLastPathComponent {
    final _ret = _lib._objc_msgSend_45(
      this.pointer,
      _lib._sel_URLByDeletingLastPathComponent1,
    );
    return _ret.address == 0
        ? null
        : NSURL._(_ret, _lib, retain: true, release: true);
  }

  NSURL? URLByAppendingPathExtension_(NSString pathExtension) {
    final _ret = _lib._objc_msgSend_257(
      this.pointer,
      _lib._sel_URLByAppendingPathExtension_1,
      pathExtension.pointer,
    );
    return _ret.address == 0
        ? null
        : NSURL._(_ret, _lib, retain: true, release: true);
  }

  NSURL? get URLByDeletingPathExtension {
    final _ret = _lib._objc_msgSend_45(
      this.pointer,
      _lib._sel_URLByDeletingPathExtension1,
    );
    return _ret.address == 0
        ? null
        : NSURL._(_ret, _lib, retain: true, release: true);
  }

  bool checkResourceIsReachableAndReturnError_(
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    return _lib._objc_msgSend_255(
      this.pointer,
      _lib._sel_checkResourceIsReachableAndReturnError_1,
      error,
    );
  }

  NSURL? get URLByStandardizingPath {
    final _ret = _lib._objc_msgSend_45(
      this.pointer,
      _lib._sel_URLByStandardizingPath1,
    );
    return _ret.address == 0
        ? null
        : NSURL._(_ret, _lib, retain: true, release: true);
  }

  NSURL? get URLByResolvingSymlinksInPath {
    final _ret = _lib._objc_msgSend_45(
      this.pointer,
      _lib._sel_URLByResolvingSymlinksInPath1,
    );
    return _ret.address == 0
        ? null
        : NSURL._(_ret, _lib, retain: true, release: true);
  }

  NSData? resourceDataUsingCache_(bool shouldUseCache) {
    final _ret = _lib._objc_msgSend_259(
      this.pointer,
      _lib._sel_resourceDataUsingCache_1,
      shouldUseCache,
    );
    return _ret.address == 0
        ? null
        : NSData._(_ret, _lib, retain: true, release: true);
  }

  void loadResourceDataNotifyingClient_usingCache_(
    NSObject client,
    bool shouldUseCache,
  ) {
    _lib._objc_msgSend_260(
      this.pointer,
      _lib._sel_loadResourceDataNotifyingClient_usingCache_1,
      client.pointer,
      shouldUseCache,
    );
  }

  NSObject? propertyForKey_(NSString propertyKey) {
    final _ret = _lib._objc_msgSend_38(
      this.pointer,
      _lib._sel_propertyForKey_1,
      propertyKey.pointer,
    );
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  bool setResourceData_(NSData data) {
    return _lib._objc_msgSend_24(
      this.pointer,
      _lib._sel_setResourceData_1,
      data.pointer,
    );
  }

  bool setProperty_forKey_(NSObject property, NSString propertyKey) {
    return _lib._objc_msgSend_261(
      this.pointer,
      _lib._sel_setProperty_forKey_1,
      property.pointer,
      propertyKey.pointer,
    );
  }

  NSURLHandle? URLHandleUsingCache_(bool shouldUseCache) {
    final _ret = _lib._objc_msgSend_268(
      this.pointer,
      _lib._sel_URLHandleUsingCache_1,
      shouldUseCache,
    );
    return _ret.address == 0
        ? null
        : NSURLHandle._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSURL init() {
    final _ret = _lib._objc_msgSend_2(this.pointer, _lib._sel_init1);
    return NSURL._(_ret, _lib, retain: true, release: true);
  }

  static NSURL new1(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSURL1, _lib._sel_new1);
    return NSURL._(_ret, _lib, retain: false, release: true);
  }

  static NSURL allocWithZone_(AVFAudio _lib, ffi.Pointer<_NSZone> zone) {
    final _ret = _lib._objc_msgSend_3(
      _lib._class_NSURL1,
      _lib._sel_allocWithZone_1,
      zone,
    );
    return NSURL._(_ret, _lib, retain: false, release: true);
  }

  static NSURL alloc(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSURL1, _lib._sel_alloc1);
    return NSURL._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
    AVFAudio _lib,
    NSObject aTarget,
    ffi.Pointer<objc.ObjCSelector> aSelector,
    NSObject? anArgument,
  ) {
    _lib._objc_msgSend_14(
      _lib._class_NSURL1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
      aTarget.pointer,
      aSelector,
      anArgument?.pointer ?? ffi.nullptr,
    );
  }

  static void cancelPreviousPerformRequestsWithTarget_(
    AVFAudio _lib,
    NSObject aTarget,
  ) {
    _lib._objc_msgSend_15(
      _lib._class_NSURL1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_1,
      aTarget.pointer,
    );
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSURL1,
      _lib._sel_accessInstanceVariablesDirectly1,
    );
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSURL1,
      _lib._sel_useStoredAccessor1,
    );
  }

  static NSSet keyPathsForValuesAffectingValueForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    final _ret = _lib._objc_msgSend_63(
      _lib._class_NSURL1,
      _lib._sel_keyPathsForValuesAffectingValueForKey_1,
      key.pointer,
    );
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    return _lib._objc_msgSend_64(
      _lib._class_NSURL1,
      _lib._sel_automaticallyNotifiesObserversForKey_1,
      key.pointer,
    );
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
    AVFAudio _lib,
    NSArray keys,
    NSString dependentKey,
  ) {
    _lib._objc_msgSend_88(
      _lib._class_NSURL1,
      _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
      keys.pointer,
      dependentKey.pointer,
    );
  }

  static NSArray classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_85(
      _lib._class_NSURL1,
      _lib._sel_classFallbacksForKeyedArchiver1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSURL1,
      _lib._sel_classForKeyedUnarchiver1,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

class NSNumber extends NSValue {
  NSNumber._(
    ffi.Pointer<objc.ObjCObject> pointer,
    AVFAudio lib, {
    bool retain = false,
    bool release = false,
  }) : super._(pointer, lib, retain: retain, release: release);

  /// Returns a [NSNumber] that points to the same underlying object as [other].
  static NSNumber castFrom<T extends objc.ObjCObjectBase>(
    AVFAudio lib,
    T other,
  ) {
    return NSNumber._(other.pointer, lib, retain: true, release: true);
  }

  /// Returns a [NSNumber] that wraps the given raw object pointer.
  static NSNumber castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCObject> other, {
    bool retain = false,
    bool release = false,
  }) {
    return NSNumber._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSNumber].
  static bool isInstance(AVFAudio lib, objc.ObjCObjectBase obj) {
    return lib._objc_msgSend_0(
      obj.pointer,
      lib._sel_isKindOfClass_1,
      lib._class_NSNumber1,
    );
  }

  @override
  NSNumber? initWithCoder_(NSCoder coder) {
    final _ret = _lib._objc_msgSend_47(
      this.pointer,
      _lib._sel_initWithCoder_1,
      coder.pointer,
    );
    return _ret.address == 0
        ? null
        : NSNumber._(_ret, _lib, retain: true, release: true);
  }

  NSNumber initWithChar_(int value) {
    final _ret = _lib._objc_msgSend_220(
      this.pointer,
      _lib._sel_initWithChar_1,
      value,
    );
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  NSNumber initWithUnsignedChar_(int value) {
    final _ret = _lib._objc_msgSend_221(
      this.pointer,
      _lib._sel_initWithUnsignedChar_1,
      value,
    );
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  NSNumber initWithShort_(int value) {
    final _ret = _lib._objc_msgSend_222(
      this.pointer,
      _lib._sel_initWithShort_1,
      value,
    );
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  NSNumber initWithUnsignedShort_(int value) {
    final _ret = _lib._objc_msgSend_223(
      this.pointer,
      _lib._sel_initWithUnsignedShort_1,
      value,
    );
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  NSNumber initWithInt_(int value) {
    final _ret = _lib._objc_msgSend_224(
      this.pointer,
      _lib._sel_initWithInt_1,
      value,
    );
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  NSNumber initWithUnsignedInt_(int value) {
    final _ret = _lib._objc_msgSend_225(
      this.pointer,
      _lib._sel_initWithUnsignedInt_1,
      value,
    );
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  NSNumber initWithLong_(int value) {
    final _ret = _lib._objc_msgSend_226(
      this.pointer,
      _lib._sel_initWithLong_1,
      value,
    );
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  NSNumber initWithUnsignedLong_(int value) {
    final _ret = _lib._objc_msgSend_227(
      this.pointer,
      _lib._sel_initWithUnsignedLong_1,
      value,
    );
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  NSNumber initWithLongLong_(int value) {
    final _ret = _lib._objc_msgSend_228(
      this.pointer,
      _lib._sel_initWithLongLong_1,
      value,
    );
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  NSNumber initWithUnsignedLongLong_(int value) {
    final _ret = _lib._objc_msgSend_229(
      this.pointer,
      _lib._sel_initWithUnsignedLongLong_1,
      value,
    );
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  NSNumber initWithFloat_(double value) {
    final _ret = _lib._objc_msgSend_230(
      this.pointer,
      _lib._sel_initWithFloat_1,
      value,
    );
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  NSNumber initWithDouble_(double value) {
    final _ret = _lib._objc_msgSend_231(
      this.pointer,
      _lib._sel_initWithDouble_1,
      value,
    );
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  NSNumber initWithBool_(bool value) {
    final _ret = _lib._objc_msgSend_232(
      this.pointer,
      _lib._sel_initWithBool_1,
      value,
    );
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  NSNumber initWithInteger_(int value) {
    final _ret = _lib._objc_msgSend_226(
      this.pointer,
      _lib._sel_initWithInteger_1,
      value,
    );
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  NSNumber initWithUnsignedInteger_(int value) {
    final _ret = _lib._objc_msgSend_227(
      this.pointer,
      _lib._sel_initWithUnsignedInteger_1,
      value,
    );
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  int get charValue {
    return _lib._objc_msgSend_233(this.pointer, _lib._sel_charValue1);
  }

  int get unsignedCharValue {
    return _lib._objc_msgSend_234(this.pointer, _lib._sel_unsignedCharValue1);
  }

  int get shortValue {
    return _lib._objc_msgSend_235(this.pointer, _lib._sel_shortValue1);
  }

  int get unsignedShortValue {
    return _lib._objc_msgSend_236(this.pointer, _lib._sel_unsignedShortValue1);
  }

  int get intValue {
    return _lib._objc_msgSend_237(this.pointer, _lib._sel_intValue1);
  }

  int get unsignedIntValue {
    return _lib._objc_msgSend_214(this.pointer, _lib._sel_unsignedIntValue1);
  }

  int get longValue {
    return _lib._objc_msgSend_83(this.pointer, _lib._sel_longValue1);
  }

  int get unsignedLongValue {
    return _lib._objc_msgSend_10(this.pointer, _lib._sel_unsignedLongValue1);
  }

  int get longLongValue {
    return _lib._objc_msgSend_238(this.pointer, _lib._sel_longLongValue1);
  }

  int get unsignedLongLongValue {
    return _lib._objc_msgSend_164(
      this.pointer,
      _lib._sel_unsignedLongLongValue1,
    );
  }

  double get floatValue {
    return objc.useMsgSendVariants
        ? _lib._objc_msgSend_239_fpret(this.pointer, _lib._sel_floatValue1)
        : _lib._objc_msgSend_239(this.pointer, _lib._sel_floatValue1);
  }

  double get doubleValue {
    return objc.useMsgSendVariants
        ? _lib._objc_msgSend_165_fpret(this.pointer, _lib._sel_doubleValue1)
        : _lib._objc_msgSend_165(this.pointer, _lib._sel_doubleValue1);
  }

  bool get boolValue {
    return _lib._objc_msgSend_12(this.pointer, _lib._sel_boolValue1);
  }

  int get integerValue {
    return _lib._objc_msgSend_83(this.pointer, _lib._sel_integerValue1);
  }

  int get unsignedIntegerValue {
    return _lib._objc_msgSend_10(this.pointer, _lib._sel_unsignedIntegerValue1);
  }

  NSString get stringValue {
    final _ret = _lib._objc_msgSend_21(this.pointer, _lib._sel_stringValue1);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  int compare_(NSNumber otherNumber) {
    return _lib._objc_msgSend_240(
      this.pointer,
      _lib._sel_compare_1,
      otherNumber.pointer,
    );
  }

  bool isEqualToNumber_(NSNumber number) {
    return _lib._objc_msgSend_241(
      this.pointer,
      _lib._sel_isEqualToNumber_1,
      number.pointer,
    );
  }

  NSString descriptionWithLocale_(NSObject? locale) {
    final _ret = _lib._objc_msgSend_70(
      this.pointer,
      _lib._sel_descriptionWithLocale_1,
      locale?.pointer ?? ffi.nullptr,
    );
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  static NSNumber numberWithChar_(AVFAudio _lib, int value) {
    final _ret = _lib._objc_msgSend_220(
      _lib._class_NSNumber1,
      _lib._sel_numberWithChar_1,
      value,
    );
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  static NSNumber numberWithUnsignedChar_(AVFAudio _lib, int value) {
    final _ret = _lib._objc_msgSend_221(
      _lib._class_NSNumber1,
      _lib._sel_numberWithUnsignedChar_1,
      value,
    );
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  static NSNumber numberWithShort_(AVFAudio _lib, int value) {
    final _ret = _lib._objc_msgSend_222(
      _lib._class_NSNumber1,
      _lib._sel_numberWithShort_1,
      value,
    );
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  static NSNumber numberWithUnsignedShort_(AVFAudio _lib, int value) {
    final _ret = _lib._objc_msgSend_223(
      _lib._class_NSNumber1,
      _lib._sel_numberWithUnsignedShort_1,
      value,
    );
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  static NSNumber numberWithInt_(AVFAudio _lib, int value) {
    final _ret = _lib._objc_msgSend_224(
      _lib._class_NSNumber1,
      _lib._sel_numberWithInt_1,
      value,
    );
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  static NSNumber numberWithUnsignedInt_(AVFAudio _lib, int value) {
    final _ret = _lib._objc_msgSend_225(
      _lib._class_NSNumber1,
      _lib._sel_numberWithUnsignedInt_1,
      value,
    );
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  static NSNumber numberWithLong_(AVFAudio _lib, int value) {
    final _ret = _lib._objc_msgSend_226(
      _lib._class_NSNumber1,
      _lib._sel_numberWithLong_1,
      value,
    );
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  static NSNumber numberWithUnsignedLong_(AVFAudio _lib, int value) {
    final _ret = _lib._objc_msgSend_227(
      _lib._class_NSNumber1,
      _lib._sel_numberWithUnsignedLong_1,
      value,
    );
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  static NSNumber numberWithLongLong_(AVFAudio _lib, int value) {
    final _ret = _lib._objc_msgSend_228(
      _lib._class_NSNumber1,
      _lib._sel_numberWithLongLong_1,
      value,
    );
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  static NSNumber numberWithUnsignedLongLong_(AVFAudio _lib, int value) {
    final _ret = _lib._objc_msgSend_229(
      _lib._class_NSNumber1,
      _lib._sel_numberWithUnsignedLongLong_1,
      value,
    );
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  static NSNumber numberWithFloat_(AVFAudio _lib, double value) {
    final _ret = _lib._objc_msgSend_230(
      _lib._class_NSNumber1,
      _lib._sel_numberWithFloat_1,
      value,
    );
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  static NSNumber numberWithDouble_(AVFAudio _lib, double value) {
    final _ret = _lib._objc_msgSend_231(
      _lib._class_NSNumber1,
      _lib._sel_numberWithDouble_1,
      value,
    );
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  static NSNumber numberWithBool_(AVFAudio _lib, bool value) {
    final _ret = _lib._objc_msgSend_232(
      _lib._class_NSNumber1,
      _lib._sel_numberWithBool_1,
      value,
    );
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  static NSNumber numberWithInteger_(AVFAudio _lib, int value) {
    final _ret = _lib._objc_msgSend_226(
      _lib._class_NSNumber1,
      _lib._sel_numberWithInteger_1,
      value,
    );
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  static NSNumber numberWithUnsignedInteger_(AVFAudio _lib, int value) {
    final _ret = _lib._objc_msgSend_227(
      _lib._class_NSNumber1,
      _lib._sel_numberWithUnsignedInteger_1,
      value,
    );
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSNumber initWithBytes_objCType_(
    ffi.Pointer<ffi.Void> value,
    ffi.Pointer<ffi.Char> type,
  ) {
    final _ret = _lib._objc_msgSend_46(
      this.pointer,
      _lib._sel_initWithBytes_objCType_1,
      value,
      type,
    );
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  static NSValue valueWithBytes_objCType_(
    AVFAudio _lib,
    ffi.Pointer<ffi.Void> value,
    ffi.Pointer<ffi.Char> type,
  ) {
    final _ret = _lib._objc_msgSend_48(
      _lib._class_NSNumber1,
      _lib._sel_valueWithBytes_objCType_1,
      value,
      type,
    );
    return NSValue._(_ret, _lib, retain: true, release: true);
  }

  static NSValue value_withObjCType_(
    AVFAudio _lib,
    ffi.Pointer<ffi.Void> value,
    ffi.Pointer<ffi.Char> type,
  ) {
    final _ret = _lib._objc_msgSend_48(
      _lib._class_NSNumber1,
      _lib._sel_value_withObjCType_1,
      value,
      type,
    );
    return NSValue._(_ret, _lib, retain: true, release: true);
  }

  static NSValue valueWithNonretainedObject_(
    AVFAudio _lib,
    NSObject? anObject,
  ) {
    final _ret = _lib._objc_msgSend_49(
      _lib._class_NSNumber1,
      _lib._sel_valueWithNonretainedObject_1,
      anObject?.pointer ?? ffi.nullptr,
    );
    return NSValue._(_ret, _lib, retain: true, release: true);
  }

  static NSValue valueWithPointer_(
    AVFAudio _lib,
    ffi.Pointer<ffi.Void> pointer,
  ) {
    final _ret = _lib._objc_msgSend_50(
      _lib._class_NSNumber1,
      _lib._sel_valueWithPointer_1,
      pointer,
    );
    return NSValue._(_ret, _lib, retain: true, release: true);
  }

  static NSValue valueWithRange_(AVFAudio _lib, _NSRange range) {
    final _ret = _lib._objc_msgSend_53(
      _lib._class_NSNumber1,
      _lib._sel_valueWithRange_1,
      range,
    );
    return NSValue._(_ret, _lib, retain: true, release: true);
  }

  static NSValue valueWithPoint_(AVFAudio _lib, CGPoint point) {
    final _ret = _lib._objc_msgSend_55(
      _lib._class_NSNumber1,
      _lib._sel_valueWithPoint_1,
      point,
    );
    return NSValue._(_ret, _lib, retain: true, release: true);
  }

  static NSValue valueWithSize_(AVFAudio _lib, CGSize size) {
    final _ret = _lib._objc_msgSend_56(
      _lib._class_NSNumber1,
      _lib._sel_valueWithSize_1,
      size,
    );
    return NSValue._(_ret, _lib, retain: true, release: true);
  }

  static NSValue valueWithRect_(AVFAudio _lib, CGRect rect) {
    final _ret = _lib._objc_msgSend_57(
      _lib._class_NSNumber1,
      _lib._sel_valueWithRect_1,
      rect,
    );
    return NSValue._(_ret, _lib, retain: true, release: true);
  }

  static NSValue valueWithEdgeInsets_(AVFAudio _lib, NSEdgeInsets insets) {
    final _ret = _lib._objc_msgSend_58(
      _lib._class_NSNumber1,
      _lib._sel_valueWithEdgeInsets_1,
      insets,
    );
    return NSValue._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSNumber init() {
    final _ret = _lib._objc_msgSend_2(this.pointer, _lib._sel_init1);
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  static NSNumber new1(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSNumber1, _lib._sel_new1);
    return NSNumber._(_ret, _lib, retain: false, release: true);
  }

  static NSNumber allocWithZone_(AVFAudio _lib, ffi.Pointer<_NSZone> zone) {
    final _ret = _lib._objc_msgSend_3(
      _lib._class_NSNumber1,
      _lib._sel_allocWithZone_1,
      zone,
    );
    return NSNumber._(_ret, _lib, retain: false, release: true);
  }

  static NSNumber alloc(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSNumber1, _lib._sel_alloc1);
    return NSNumber._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
    AVFAudio _lib,
    NSObject aTarget,
    ffi.Pointer<objc.ObjCSelector> aSelector,
    NSObject? anArgument,
  ) {
    _lib._objc_msgSend_14(
      _lib._class_NSNumber1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
      aTarget.pointer,
      aSelector,
      anArgument?.pointer ?? ffi.nullptr,
    );
  }

  static void cancelPreviousPerformRequestsWithTarget_(
    AVFAudio _lib,
    NSObject aTarget,
  ) {
    _lib._objc_msgSend_15(
      _lib._class_NSNumber1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_1,
      aTarget.pointer,
    );
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSNumber1,
      _lib._sel_accessInstanceVariablesDirectly1,
    );
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSNumber1,
      _lib._sel_useStoredAccessor1,
    );
  }

  static NSSet keyPathsForValuesAffectingValueForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    final _ret = _lib._objc_msgSend_63(
      _lib._class_NSNumber1,
      _lib._sel_keyPathsForValuesAffectingValueForKey_1,
      key.pointer,
    );
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    return _lib._objc_msgSend_64(
      _lib._class_NSNumber1,
      _lib._sel_automaticallyNotifiesObserversForKey_1,
      key.pointer,
    );
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
    AVFAudio _lib,
    NSArray keys,
    NSString dependentKey,
  ) {
    _lib._objc_msgSend_88(
      _lib._class_NSNumber1,
      _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
      keys.pointer,
      dependentKey.pointer,
    );
  }

  static NSArray classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_85(
      _lib._class_NSNumber1,
      _lib._sel_classFallbacksForKeyedArchiver1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSNumber1,
      _lib._sel_classForKeyedUnarchiver1,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

class NSValue extends NSObject {
  NSValue._(
    ffi.Pointer<objc.ObjCObject> pointer,
    AVFAudio lib, {
    bool retain = false,
    bool release = false,
  }) : super._(pointer, lib, retain: retain, release: release);

  /// Returns a [NSValue] that points to the same underlying object as [other].
  static NSValue castFrom<T extends objc.ObjCObjectBase>(
    AVFAudio lib,
    T other,
  ) {
    return NSValue._(other.pointer, lib, retain: true, release: true);
  }

  /// Returns a [NSValue] that wraps the given raw object pointer.
  static NSValue castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCObject> other, {
    bool retain = false,
    bool release = false,
  }) {
    return NSValue._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSValue].
  static bool isInstance(AVFAudio lib, objc.ObjCObjectBase obj) {
    return lib._objc_msgSend_0(
      obj.pointer,
      lib._sel_isKindOfClass_1,
      lib._class_NSValue1,
    );
  }

  void getValue_size_(ffi.Pointer<ffi.Void> value, int size) {
    _lib._objc_msgSend_22(this.pointer, _lib._sel_getValue_size_1, value, size);
  }

  ffi.Pointer<ffi.Char> get objCType {
    return _lib._objc_msgSend_13(this.pointer, _lib._sel_objCType1);
  }

  NSValue initWithBytes_objCType_(
    ffi.Pointer<ffi.Void> value,
    ffi.Pointer<ffi.Char> type,
  ) {
    final _ret = _lib._objc_msgSend_46(
      this.pointer,
      _lib._sel_initWithBytes_objCType_1,
      value,
      type,
    );
    return NSValue._(_ret, _lib, retain: true, release: true);
  }

  NSValue? initWithCoder_(NSCoder coder) {
    final _ret = _lib._objc_msgSend_47(
      this.pointer,
      _lib._sel_initWithCoder_1,
      coder.pointer,
    );
    return _ret.address == 0
        ? null
        : NSValue._(_ret, _lib, retain: true, release: true);
  }

  static NSValue valueWithBytes_objCType_(
    AVFAudio _lib,
    ffi.Pointer<ffi.Void> value,
    ffi.Pointer<ffi.Char> type,
  ) {
    final _ret = _lib._objc_msgSend_48(
      _lib._class_NSValue1,
      _lib._sel_valueWithBytes_objCType_1,
      value,
      type,
    );
    return NSValue._(_ret, _lib, retain: true, release: true);
  }

  static NSValue value_withObjCType_(
    AVFAudio _lib,
    ffi.Pointer<ffi.Void> value,
    ffi.Pointer<ffi.Char> type,
  ) {
    final _ret = _lib._objc_msgSend_48(
      _lib._class_NSValue1,
      _lib._sel_value_withObjCType_1,
      value,
      type,
    );
    return NSValue._(_ret, _lib, retain: true, release: true);
  }

  static NSValue valueWithNonretainedObject_(
    AVFAudio _lib,
    NSObject? anObject,
  ) {
    final _ret = _lib._objc_msgSend_49(
      _lib._class_NSValue1,
      _lib._sel_valueWithNonretainedObject_1,
      anObject?.pointer ?? ffi.nullptr,
    );
    return NSValue._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get nonretainedObjectValue {
    final _ret = _lib._objc_msgSend_17(
      this.pointer,
      _lib._sel_nonretainedObjectValue1,
    );
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSValue valueWithPointer_(
    AVFAudio _lib,
    ffi.Pointer<ffi.Void> pointer,
  ) {
    final _ret = _lib._objc_msgSend_50(
      _lib._class_NSValue1,
      _lib._sel_valueWithPointer_1,
      pointer,
    );
    return NSValue._(_ret, _lib, retain: true, release: true);
  }

  ffi.Pointer<ffi.Void> get pointerValue {
    return _lib._objc_msgSend_20(this.pointer, _lib._sel_pointerValue1);
  }

  bool isEqualToValue_(NSValue value) {
    return _lib._objc_msgSend_51(
      this.pointer,
      _lib._sel_isEqualToValue_1,
      value.pointer,
    );
  }

  void getValue_(ffi.Pointer<ffi.Void> value) {
    _lib._objc_msgSend_52(this.pointer, _lib._sel_getValue_1, value);
  }

  static NSValue valueWithRange_(AVFAudio _lib, _NSRange range) {
    final _ret = _lib._objc_msgSend_53(
      _lib._class_NSValue1,
      _lib._sel_valueWithRange_1,
      range,
    );
    return NSValue._(_ret, _lib, retain: true, release: true);
  }

  void getRangeValue(ffi.Pointer<_NSRange> stret) {
    objc.useMsgSendVariants
        ? _lib._objc_msgSend_54_stret(
          stret,
          this.pointer,
          _lib._sel_rangeValue1,
        )
        : stret.ref = _lib._objc_msgSend_54(
          this.pointer,
          _lib._sel_rangeValue1,
        );
  }

  static NSValue valueWithPoint_(AVFAudio _lib, CGPoint point) {
    final _ret = _lib._objc_msgSend_55(
      _lib._class_NSValue1,
      _lib._sel_valueWithPoint_1,
      point,
    );
    return NSValue._(_ret, _lib, retain: true, release: true);
  }

  static NSValue valueWithSize_(AVFAudio _lib, CGSize size) {
    final _ret = _lib._objc_msgSend_56(
      _lib._class_NSValue1,
      _lib._sel_valueWithSize_1,
      size,
    );
    return NSValue._(_ret, _lib, retain: true, release: true);
  }

  static NSValue valueWithRect_(AVFAudio _lib, CGRect rect) {
    final _ret = _lib._objc_msgSend_57(
      _lib._class_NSValue1,
      _lib._sel_valueWithRect_1,
      rect,
    );
    return NSValue._(_ret, _lib, retain: true, release: true);
  }

  static NSValue valueWithEdgeInsets_(AVFAudio _lib, NSEdgeInsets insets) {
    final _ret = _lib._objc_msgSend_58(
      _lib._class_NSValue1,
      _lib._sel_valueWithEdgeInsets_1,
      insets,
    );
    return NSValue._(_ret, _lib, retain: true, release: true);
  }

  void getPointValue(ffi.Pointer<CGPoint> stret) {
    objc.useMsgSendVariants
        ? _lib._objc_msgSend_59_stret(
          stret,
          this.pointer,
          _lib._sel_pointValue1,
        )
        : stret.ref = _lib._objc_msgSend_59(
          this.pointer,
          _lib._sel_pointValue1,
        );
  }

  void getSizeValue(ffi.Pointer<CGSize> stret) {
    objc.useMsgSendVariants
        ? _lib._objc_msgSend_60_stret(stret, this.pointer, _lib._sel_sizeValue1)
        : stret.ref = _lib._objc_msgSend_60(this.pointer, _lib._sel_sizeValue1);
  }

  void getRectValue(ffi.Pointer<CGRect> stret) {
    objc.useMsgSendVariants
        ? _lib._objc_msgSend_61_stret(stret, this.pointer, _lib._sel_rectValue1)
        : stret.ref = _lib._objc_msgSend_61(this.pointer, _lib._sel_rectValue1);
  }

  void getEdgeInsetsValue(ffi.Pointer<NSEdgeInsets> stret) {
    objc.useMsgSendVariants
        ? _lib._objc_msgSend_62_stret(
          stret,
          this.pointer,
          _lib._sel_edgeInsetsValue1,
        )
        : stret.ref = _lib._objc_msgSend_62(
          this.pointer,
          _lib._sel_edgeInsetsValue1,
        );
  }

  @override
  NSValue init() {
    final _ret = _lib._objc_msgSend_2(this.pointer, _lib._sel_init1);
    return NSValue._(_ret, _lib, retain: true, release: true);
  }

  static NSValue new1(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSValue1, _lib._sel_new1);
    return NSValue._(_ret, _lib, retain: false, release: true);
  }

  static NSValue allocWithZone_(AVFAudio _lib, ffi.Pointer<_NSZone> zone) {
    final _ret = _lib._objc_msgSend_3(
      _lib._class_NSValue1,
      _lib._sel_allocWithZone_1,
      zone,
    );
    return NSValue._(_ret, _lib, retain: false, release: true);
  }

  static NSValue alloc(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSValue1, _lib._sel_alloc1);
    return NSValue._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
    AVFAudio _lib,
    NSObject aTarget,
    ffi.Pointer<objc.ObjCSelector> aSelector,
    NSObject? anArgument,
  ) {
    _lib._objc_msgSend_14(
      _lib._class_NSValue1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
      aTarget.pointer,
      aSelector,
      anArgument?.pointer ?? ffi.nullptr,
    );
  }

  static void cancelPreviousPerformRequestsWithTarget_(
    AVFAudio _lib,
    NSObject aTarget,
  ) {
    _lib._objc_msgSend_15(
      _lib._class_NSValue1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_1,
      aTarget.pointer,
    );
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSValue1,
      _lib._sel_accessInstanceVariablesDirectly1,
    );
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSValue1,
      _lib._sel_useStoredAccessor1,
    );
  }

  static NSSet keyPathsForValuesAffectingValueForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    final _ret = _lib._objc_msgSend_63(
      _lib._class_NSValue1,
      _lib._sel_keyPathsForValuesAffectingValueForKey_1,
      key.pointer,
    );
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    return _lib._objc_msgSend_64(
      _lib._class_NSValue1,
      _lib._sel_automaticallyNotifiesObserversForKey_1,
      key.pointer,
    );
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
    AVFAudio _lib,
    NSArray keys,
    NSString dependentKey,
  ) {
    _lib._objc_msgSend_88(
      _lib._class_NSValue1,
      _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
      keys.pointer,
      dependentKey.pointer,
    );
  }

  static NSArray classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_85(
      _lib._class_NSValue1,
      _lib._sel_classFallbacksForKeyedArchiver1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSValue1,
      _lib._sel_classForKeyedUnarchiver1,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

final class CGPoint extends ffi.Struct {
  @ffi.Double()
  external double x;

  @ffi.Double()
  external double y;
}

final class CGSize extends ffi.Struct {
  @ffi.Double()
  external double width;

  @ffi.Double()
  external double height;
}

final class CGRect extends ffi.Struct {
  external CGPoint origin;

  external CGSize size;
}

final class NSEdgeInsets extends ffi.Struct {
  @ffi.Double()
  external double top;

  @ffi.Double()
  external double left;

  @ffi.Double()
  external double bottom;

  @ffi.Double()
  external double right;
}

class NSArray extends NSObject {
  NSArray._(
    ffi.Pointer<objc.ObjCObject> pointer,
    AVFAudio lib, {
    bool retain = false,
    bool release = false,
  }) : super._(pointer, lib, retain: retain, release: release);

  /// Returns a [NSArray] that points to the same underlying object as [other].
  static NSArray castFrom<T extends objc.ObjCObjectBase>(
    AVFAudio lib,
    T other,
  ) {
    return NSArray._(other.pointer, lib, retain: true, release: true);
  }

  /// Returns a [NSArray] that wraps the given raw object pointer.
  static NSArray castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCObject> other, {
    bool retain = false,
    bool release = false,
  }) {
    return NSArray._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSArray].
  static bool isInstance(AVFAudio lib, objc.ObjCObjectBase obj) {
    return lib._objc_msgSend_0(
      obj.pointer,
      lib._sel_isKindOfClass_1,
      lib._class_NSArray1,
    );
  }

  int get count {
    return _lib._objc_msgSend_10(this.pointer, _lib._sel_count1);
  }

  NSObject objectAtIndex_(int index) {
    final _ret = _lib._objc_msgSend_65(
      this.pointer,
      _lib._sel_objectAtIndex_1,
      index,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSArray init() {
    final _ret = _lib._objc_msgSend_2(this.pointer, _lib._sel_init1);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSArray initWithObjects_count_(
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> objects,
    int cnt,
  ) {
    final _ret = _lib._objc_msgSend_66(
      this.pointer,
      _lib._sel_initWithObjects_count_1,
      objects,
      cnt,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSArray? initWithCoder_(NSCoder coder) {
    final _ret = _lib._objc_msgSend_47(
      this.pointer,
      _lib._sel_initWithCoder_1,
      coder.pointer,
    );
    return _ret.address == 0
        ? null
        : NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSArray arrayByAddingObject_(NSObject anObject) {
    final _ret = _lib._objc_msgSend_67(
      this.pointer,
      _lib._sel_arrayByAddingObject_1,
      anObject.pointer,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSArray arrayByAddingObjectsFromArray_(NSArray otherArray) {
    final _ret = _lib._objc_msgSend_68(
      this.pointer,
      _lib._sel_arrayByAddingObjectsFromArray_1,
      otherArray.pointer,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSString componentsJoinedByString_(NSString separator) {
    final _ret = _lib._objc_msgSend_69(
      this.pointer,
      _lib._sel_componentsJoinedByString_1,
      separator.pointer,
    );
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  bool containsObject_(NSObject anObject) {
    return _lib._objc_msgSend_0(
      this.pointer,
      _lib._sel_containsObject_1,
      anObject.pointer,
    );
  }

  NSString get description {
    final _ret = _lib._objc_msgSend_21(this.pointer, _lib._sel_description1);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString descriptionWithLocale_(NSObject? locale) {
    final _ret = _lib._objc_msgSend_70(
      this.pointer,
      _lib._sel_descriptionWithLocale_1,
      locale?.pointer ?? ffi.nullptr,
    );
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString descriptionWithLocale_indent_(NSObject? locale, int level) {
    final _ret = _lib._objc_msgSend_71(
      this.pointer,
      _lib._sel_descriptionWithLocale_indent_1,
      locale?.pointer ?? ffi.nullptr,
      level,
    );
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSObject? firstObjectCommonWithArray_(NSArray otherArray) {
    final _ret = _lib._objc_msgSend_72(
      this.pointer,
      _lib._sel_firstObjectCommonWithArray_1,
      otherArray.pointer,
    );
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  void getObjects_range_(
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> objects,
    _NSRange range,
  ) {
    _lib._objc_msgSend_73(
      this.pointer,
      _lib._sel_getObjects_range_1,
      objects,
      range,
    );
  }

  int indexOfObject_(NSObject anObject) {
    return _lib._objc_msgSend_74(
      this.pointer,
      _lib._sel_indexOfObject_1,
      anObject.pointer,
    );
  }

  int indexOfObject_inRange_(NSObject anObject, _NSRange range) {
    return _lib._objc_msgSend_75(
      this.pointer,
      _lib._sel_indexOfObject_inRange_1,
      anObject.pointer,
      range,
    );
  }

  int indexOfObjectIdenticalTo_(NSObject anObject) {
    return _lib._objc_msgSend_74(
      this.pointer,
      _lib._sel_indexOfObjectIdenticalTo_1,
      anObject.pointer,
    );
  }

  int indexOfObjectIdenticalTo_inRange_(NSObject anObject, _NSRange range) {
    return _lib._objc_msgSend_75(
      this.pointer,
      _lib._sel_indexOfObjectIdenticalTo_inRange_1,
      anObject.pointer,
      range,
    );
  }

  bool isEqualToArray_(NSArray otherArray) {
    return _lib._objc_msgSend_76(
      this.pointer,
      _lib._sel_isEqualToArray_1,
      otherArray.pointer,
    );
  }

  NSObject? get firstObject {
    final _ret = _lib._objc_msgSend_17(this.pointer, _lib._sel_firstObject1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get lastObject {
    final _ret = _lib._objc_msgSend_17(this.pointer, _lib._sel_lastObject1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSEnumerator objectEnumerator() {
    final _ret = _lib._objc_msgSend_77(
      this.pointer,
      _lib._sel_objectEnumerator1,
    );
    return NSEnumerator._(_ret, _lib, retain: true, release: true);
  }

  NSEnumerator reverseObjectEnumerator() {
    final _ret = _lib._objc_msgSend_77(
      this.pointer,
      _lib._sel_reverseObjectEnumerator1,
    );
    return NSEnumerator._(_ret, _lib, retain: true, release: true);
  }

  NSData get sortedArrayHint {
    final _ret = _lib._objc_msgSend_43(
      this.pointer,
      _lib._sel_sortedArrayHint1,
    );
    return NSData._(_ret, _lib, retain: true, release: true);
  }

  NSArray sortedArrayUsingFunction_context_(
    ffi.Pointer<
      ffi.NativeFunction<
        ffi.Long Function(
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<ffi.Void>,
        )
      >
    > comparator,
    ffi.Pointer<ffi.Void> context,
  ) {
    final _ret = _lib._objc_msgSend_78(
      this.pointer,
      _lib._sel_sortedArrayUsingFunction_context_1,
      comparator,
      context,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSArray sortedArrayUsingFunction_context_hint_(
    ffi.Pointer<
      ffi.NativeFunction<
        ffi.Long Function(
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<ffi.Void>,
        )
      >
    > comparator,
    ffi.Pointer<ffi.Void> context,
    NSData? hint,
  ) {
    final _ret = _lib._objc_msgSend_79(
      this.pointer,
      _lib._sel_sortedArrayUsingFunction_context_hint_1,
      comparator,
      context,
      hint?.pointer ?? ffi.nullptr,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSArray sortedArrayUsingSelector_(ffi.Pointer<objc.ObjCSelector> comparator) {
    final _ret = _lib._objc_msgSend_80(
      this.pointer,
      _lib._sel_sortedArrayUsingSelector_1,
      comparator,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSArray subarrayWithRange_(_NSRange range) {
    final _ret = _lib._objc_msgSend_81(
      this.pointer,
      _lib._sel_subarrayWithRange_1,
      range,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  bool writeToURL_error_(
    NSURL url,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    return _lib._objc_msgSend_89(
      this.pointer,
      _lib._sel_writeToURL_error_1,
      url.pointer,
      error,
    );
  }

  void makeObjectsPerformSelector_(ffi.Pointer<objc.ObjCSelector> aSelector) {
    _lib._objc_msgSend_7(
      this.pointer,
      _lib._sel_makeObjectsPerformSelector_1,
      aSelector,
    );
  }

  void makeObjectsPerformSelector_withObject_(
    ffi.Pointer<objc.ObjCSelector> aSelector,
    NSObject? argument,
  ) {
    _lib._objc_msgSend_90(
      this.pointer,
      _lib._sel_makeObjectsPerformSelector_withObject_1,
      aSelector,
      argument?.pointer ?? ffi.nullptr,
    );
  }

  NSArray objectsAtIndexes_(NSIndexSet indexes) {
    final _ret = _lib._objc_msgSend_111(
      this.pointer,
      _lib._sel_objectsAtIndexes_1,
      indexes.pointer,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSObject objectAtIndexedSubscript_(int idx) {
    final _ret = _lib._objc_msgSend_65(
      this.pointer,
      _lib._sel_objectAtIndexedSubscript_1,
      idx,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  void enumerateObjectsUsingBlock_(
    ObjCBlock_ffiVoid_objcObjCObject_ffiUnsignedLong_bool block,
  ) {
    _lib._objc_msgSend_112(
      this.pointer,
      _lib._sel_enumerateObjectsUsingBlock_1,
      block.pointer,
    );
  }

  void enumerateObjectsWithOptions_usingBlock_(
    int opts,
    ObjCBlock_ffiVoid_objcObjCObject_ffiUnsignedLong_bool block,
  ) {
    _lib._objc_msgSend_113(
      this.pointer,
      _lib._sel_enumerateObjectsWithOptions_usingBlock_1,
      opts,
      block.pointer,
    );
  }

  void enumerateObjectsAtIndexes_options_usingBlock_(
    NSIndexSet s,
    int opts,
    ObjCBlock_ffiVoid_objcObjCObject_ffiUnsignedLong_bool block,
  ) {
    _lib._objc_msgSend_114(
      this.pointer,
      _lib._sel_enumerateObjectsAtIndexes_options_usingBlock_1,
      s.pointer,
      opts,
      block.pointer,
    );
  }

  int indexOfObjectPassingTest_(
    ObjCBlock_bool_objcObjCObject_ffiUnsignedLong_bool predicate,
  ) {
    return _lib._objc_msgSend_115(
      this.pointer,
      _lib._sel_indexOfObjectPassingTest_1,
      predicate.pointer,
    );
  }

  int indexOfObjectWithOptions_passingTest_(
    int opts,
    ObjCBlock_bool_objcObjCObject_ffiUnsignedLong_bool predicate,
  ) {
    return _lib._objc_msgSend_116(
      this.pointer,
      _lib._sel_indexOfObjectWithOptions_passingTest_1,
      opts,
      predicate.pointer,
    );
  }

  int indexOfObjectAtIndexes_options_passingTest_(
    NSIndexSet s,
    int opts,
    ObjCBlock_bool_objcObjCObject_ffiUnsignedLong_bool predicate,
  ) {
    return _lib._objc_msgSend_117(
      this.pointer,
      _lib._sel_indexOfObjectAtIndexes_options_passingTest_1,
      s.pointer,
      opts,
      predicate.pointer,
    );
  }

  NSIndexSet indexesOfObjectsPassingTest_(
    ObjCBlock_bool_objcObjCObject_ffiUnsignedLong_bool predicate,
  ) {
    final _ret = _lib._objc_msgSend_118(
      this.pointer,
      _lib._sel_indexesOfObjectsPassingTest_1,
      predicate.pointer,
    );
    return NSIndexSet._(_ret, _lib, retain: true, release: true);
  }

  NSIndexSet indexesOfObjectsWithOptions_passingTest_(
    int opts,
    ObjCBlock_bool_objcObjCObject_ffiUnsignedLong_bool predicate,
  ) {
    final _ret = _lib._objc_msgSend_119(
      this.pointer,
      _lib._sel_indexesOfObjectsWithOptions_passingTest_1,
      opts,
      predicate.pointer,
    );
    return NSIndexSet._(_ret, _lib, retain: true, release: true);
  }

  NSIndexSet indexesOfObjectsAtIndexes_options_passingTest_(
    NSIndexSet s,
    int opts,
    ObjCBlock_bool_objcObjCObject_ffiUnsignedLong_bool predicate,
  ) {
    final _ret = _lib._objc_msgSend_120(
      this.pointer,
      _lib._sel_indexesOfObjectsAtIndexes_options_passingTest_1,
      s.pointer,
      opts,
      predicate.pointer,
    );
    return NSIndexSet._(_ret, _lib, retain: true, release: true);
  }

  NSArray sortedArrayUsingComparator_(
    ObjCBlock_NSComparisonResult_objcObjCObject_objcObjCObject cmptr,
  ) {
    final _ret = _lib._objc_msgSend_121(
      this.pointer,
      _lib._sel_sortedArrayUsingComparator_1,
      cmptr.pointer,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSArray sortedArrayWithOptions_usingComparator_(
    int opts,
    ObjCBlock_NSComparisonResult_objcObjCObject_objcObjCObject cmptr,
  ) {
    final _ret = _lib._objc_msgSend_122(
      this.pointer,
      _lib._sel_sortedArrayWithOptions_usingComparator_1,
      opts,
      cmptr.pointer,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  int indexOfObject_inSortedRange_options_usingComparator_(
    NSObject obj,
    _NSRange r,
    int opts,
    ObjCBlock_NSComparisonResult_objcObjCObject_objcObjCObject cmp,
  ) {
    return _lib._objc_msgSend_123(
      this.pointer,
      _lib._sel_indexOfObject_inSortedRange_options_usingComparator_1,
      obj.pointer,
      r,
      opts,
      cmp.pointer,
    );
  }

  static NSArray array(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSArray1, _lib._sel_array1);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSArray arrayWithObject_(AVFAudio _lib, NSObject anObject) {
    final _ret = _lib._objc_msgSend_124(
      _lib._class_NSArray1,
      _lib._sel_arrayWithObject_1,
      anObject.pointer,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSArray arrayWithObjects_count_(
    AVFAudio _lib,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> objects,
    int cnt,
  ) {
    final _ret = _lib._objc_msgSend_66(
      _lib._class_NSArray1,
      _lib._sel_arrayWithObjects_count_1,
      objects,
      cnt,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSArray arrayWithObjects_(AVFAudio _lib, NSObject firstObj) {
    final _ret = _lib._objc_msgSend_124(
      _lib._class_NSArray1,
      _lib._sel_arrayWithObjects_1,
      firstObj.pointer,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSArray arrayWithArray_(AVFAudio _lib, NSArray array) {
    final _ret = _lib._objc_msgSend_125(
      _lib._class_NSArray1,
      _lib._sel_arrayWithArray_1,
      array.pointer,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSArray initWithObjects_(NSObject firstObj) {
    final _ret = _lib._objc_msgSend_124(
      this.pointer,
      _lib._sel_initWithObjects_1,
      firstObj.pointer,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSArray initWithArray_(NSArray array) {
    final _ret = _lib._objc_msgSend_125(
      this.pointer,
      _lib._sel_initWithArray_1,
      array.pointer,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSArray initWithArray_copyItems_(NSArray array, bool flag) {
    final _ret = _lib._objc_msgSend_126(
      this.pointer,
      _lib._sel_initWithArray_copyItems_1,
      array.pointer,
      flag,
    );
    return NSArray._(_ret, _lib, retain: false, release: true);
  }

  NSArray? initWithContentsOfURL_error_(
    NSURL url,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    final _ret = _lib._objc_msgSend_127(
      this.pointer,
      _lib._sel_initWithContentsOfURL_error_1,
      url.pointer,
      error,
    );
    return _ret.address == 0
        ? null
        : NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSArray? arrayWithContentsOfURL_error_(
    AVFAudio _lib,
    NSURL url,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    final _ret = _lib._objc_msgSend_127(
      _lib._class_NSArray1,
      _lib._sel_arrayWithContentsOfURL_error_1,
      url.pointer,
      error,
    );
    return _ret.address == 0
        ? null
        : NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSObject differenceFromArray_withOptions_usingEquivalenceTest_(
    NSArray other,
    int options,
    ObjCBlock_bool_objcObjCObject_objcObjCObject block,
  ) {
    final _ret = _lib._objc_msgSend_128(
      this.pointer,
      _lib._sel_differenceFromArray_withOptions_usingEquivalenceTest_1,
      other.pointer,
      options,
      block.pointer,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject differenceFromArray_withOptions_(NSArray other, int options) {
    final _ret = _lib._objc_msgSend_129(
      this.pointer,
      _lib._sel_differenceFromArray_withOptions_1,
      other.pointer,
      options,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject differenceFromArray_(NSArray other) {
    final _ret = _lib._objc_msgSend_125(
      this.pointer,
      _lib._sel_differenceFromArray_1,
      other.pointer,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSArray? arrayByApplyingDifference_(NSObject difference) {
    final _ret = _lib._objc_msgSend_130(
      this.pointer,
      _lib._sel_arrayByApplyingDifference_1,
      difference.pointer,
    );
    return _ret.address == 0
        ? null
        : NSArray._(_ret, _lib, retain: true, release: true);
  }

  void getObjects_(ffi.Pointer<ffi.Pointer<objc.ObjCObject>> objects) {
    _lib._objc_msgSend_131(this.pointer, _lib._sel_getObjects_1, objects);
  }

  static NSArray? arrayWithContentsOfFile_(AVFAudio _lib, NSString path) {
    final _ret = _lib._objc_msgSend_132(
      _lib._class_NSArray1,
      _lib._sel_arrayWithContentsOfFile_1,
      path.pointer,
    );
    return _ret.address == 0
        ? null
        : NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSArray? arrayWithContentsOfURL_(AVFAudio _lib, NSURL url) {
    final _ret = _lib._objc_msgSend_133(
      _lib._class_NSArray1,
      _lib._sel_arrayWithContentsOfURL_1,
      url.pointer,
    );
    return _ret.address == 0
        ? null
        : NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSArray? initWithContentsOfFile_(NSString path) {
    final _ret = _lib._objc_msgSend_132(
      this.pointer,
      _lib._sel_initWithContentsOfFile_1,
      path.pointer,
    );
    return _ret.address == 0
        ? null
        : NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSArray? initWithContentsOfURL_(NSURL url) {
    final _ret = _lib._objc_msgSend_133(
      this.pointer,
      _lib._sel_initWithContentsOfURL_1,
      url.pointer,
    );
    return _ret.address == 0
        ? null
        : NSArray._(_ret, _lib, retain: true, release: true);
  }

  bool writeToFile_atomically_(NSString path, bool useAuxiliaryFile) {
    return _lib._objc_msgSend_26(
      this.pointer,
      _lib._sel_writeToFile_atomically_1,
      path.pointer,
      useAuxiliaryFile,
    );
  }

  bool writeToURL_atomically_(NSURL url, bool atomically) {
    return _lib._objc_msgSend_134(
      this.pointer,
      _lib._sel_writeToURL_atomically_1,
      url.pointer,
      atomically,
    );
  }

  NSArray pathsMatchingExtensions_(NSArray filterTypes) {
    final _ret = _lib._objc_msgSend_68(
      this.pointer,
      _lib._sel_pathsMatchingExtensions_1,
      filterTypes.pointer,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSObject valueForKey_(NSString key) {
    final _ret = _lib._objc_msgSend_31(
      this.pointer,
      _lib._sel_valueForKey_1,
      key.pointer,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  @override
  void setValue_forKey_(NSObject? value, NSString key) {
    _lib._objc_msgSend_135(
      this.pointer,
      _lib._sel_setValue_forKey_1,
      value?.pointer ?? ffi.nullptr,
      key.pointer,
    );
  }

  void addObserver_toObjectsAtIndexes_forKeyPath_options_context_(
    NSObject observer,
    NSIndexSet indexes,
    NSString keyPath,
    int options,
    ffi.Pointer<ffi.Void> context,
  ) {
    _lib._objc_msgSend_136(
      this.pointer,
      _lib._sel_addObserver_toObjectsAtIndexes_forKeyPath_options_context_1,
      observer.pointer,
      indexes.pointer,
      keyPath.pointer,
      options,
      context,
    );
  }

  void removeObserver_fromObjectsAtIndexes_forKeyPath_context_(
    NSObject observer,
    NSIndexSet indexes,
    NSString keyPath,
    ffi.Pointer<ffi.Void> context,
  ) {
    _lib._objc_msgSend_137(
      this.pointer,
      _lib._sel_removeObserver_fromObjectsAtIndexes_forKeyPath_context_1,
      observer.pointer,
      indexes.pointer,
      keyPath.pointer,
      context,
    );
  }

  void removeObserver_fromObjectsAtIndexes_forKeyPath_(
    NSObject observer,
    NSIndexSet indexes,
    NSString keyPath,
  ) {
    _lib._objc_msgSend_138(
      this.pointer,
      _lib._sel_removeObserver_fromObjectsAtIndexes_forKeyPath_1,
      observer.pointer,
      indexes.pointer,
      keyPath.pointer,
    );
  }

  @override
  void addObserver_forKeyPath_options_context_(
    NSObject observer,
    NSString keyPath,
    int options,
    ffi.Pointer<ffi.Void> context,
  ) {
    _lib._objc_msgSend_139(
      this.pointer,
      _lib._sel_addObserver_forKeyPath_options_context_1,
      observer.pointer,
      keyPath.pointer,
      options,
      context,
    );
  }

  @override
  void removeObserver_forKeyPath_context_(
    NSObject observer,
    NSString keyPath,
    ffi.Pointer<ffi.Void> context,
  ) {
    _lib._objc_msgSend_140(
      this.pointer,
      _lib._sel_removeObserver_forKeyPath_context_1,
      observer.pointer,
      keyPath.pointer,
      context,
    );
  }

  @override
  void removeObserver_forKeyPath_(NSObject observer, NSString keyPath) {
    _lib._objc_msgSend_141(
      this.pointer,
      _lib._sel_removeObserver_forKeyPath_1,
      observer.pointer,
      keyPath.pointer,
    );
  }

  NSArray sortedArrayUsingDescriptors_(NSArray sortDescriptors) {
    final _ret = _lib._objc_msgSend_68(
      this.pointer,
      _lib._sel_sortedArrayUsingDescriptors_1,
      sortDescriptors.pointer,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSArray filteredArrayUsingPredicate_(NSPredicate predicate) {
    final _ret = _lib._objc_msgSend_219(
      this.pointer,
      _lib._sel_filteredArrayUsingPredicate_1,
      predicate.pointer,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSArray new1(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSArray1, _lib._sel_new1);
    return NSArray._(_ret, _lib, retain: false, release: true);
  }

  static NSArray allocWithZone_(AVFAudio _lib, ffi.Pointer<_NSZone> zone) {
    final _ret = _lib._objc_msgSend_3(
      _lib._class_NSArray1,
      _lib._sel_allocWithZone_1,
      zone,
    );
    return NSArray._(_ret, _lib, retain: false, release: true);
  }

  static NSArray alloc(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSArray1, _lib._sel_alloc1);
    return NSArray._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
    AVFAudio _lib,
    NSObject aTarget,
    ffi.Pointer<objc.ObjCSelector> aSelector,
    NSObject? anArgument,
  ) {
    _lib._objc_msgSend_14(
      _lib._class_NSArray1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
      aTarget.pointer,
      aSelector,
      anArgument?.pointer ?? ffi.nullptr,
    );
  }

  static void cancelPreviousPerformRequestsWithTarget_(
    AVFAudio _lib,
    NSObject aTarget,
  ) {
    _lib._objc_msgSend_15(
      _lib._class_NSArray1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_1,
      aTarget.pointer,
    );
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSArray1,
      _lib._sel_accessInstanceVariablesDirectly1,
    );
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSArray1,
      _lib._sel_useStoredAccessor1,
    );
  }

  static NSSet keyPathsForValuesAffectingValueForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    final _ret = _lib._objc_msgSend_63(
      _lib._class_NSArray1,
      _lib._sel_keyPathsForValuesAffectingValueForKey_1,
      key.pointer,
    );
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    return _lib._objc_msgSend_64(
      _lib._class_NSArray1,
      _lib._sel_automaticallyNotifiesObserversForKey_1,
      key.pointer,
    );
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
    AVFAudio _lib,
    NSArray keys,
    NSString dependentKey,
  ) {
    _lib._objc_msgSend_88(
      _lib._class_NSArray1,
      _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
      keys.pointer,
      dependentKey.pointer,
    );
  }

  static NSArray classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_85(
      _lib._class_NSArray1,
      _lib._sel_classFallbacksForKeyedArchiver1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSArray1,
      _lib._sel_classForKeyedUnarchiver1,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

class NSError extends NSObject {
  NSError._(
    ffi.Pointer<objc.ObjCObject> pointer,
    AVFAudio lib, {
    bool retain = false,
    bool release = false,
  }) : super._(pointer, lib, retain: retain, release: release);

  /// Returns a [NSError] that points to the same underlying object as [other].
  static NSError castFrom<T extends objc.ObjCObjectBase>(
    AVFAudio lib,
    T other,
  ) {
    return NSError._(other.pointer, lib, retain: true, release: true);
  }

  /// Returns a [NSError] that wraps the given raw object pointer.
  static NSError castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCObject> other, {
    bool retain = false,
    bool release = false,
  }) {
    return NSError._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSError].
  static bool isInstance(AVFAudio lib, objc.ObjCObjectBase obj) {
    return lib._objc_msgSend_0(
      obj.pointer,
      lib._sel_isKindOfClass_1,
      lib._class_NSError1,
    );
  }

  NSError initWithDomain_code_userInfo_(
    NSString domain,
    int code,
    NSObject? dict,
  ) {
    final _ret = _lib._objc_msgSend_82(
      this.pointer,
      _lib._sel_initWithDomain_code_userInfo_1,
      domain.pointer,
      code,
      dict?.pointer ?? ffi.nullptr,
    );
    return NSError._(_ret, _lib, retain: true, release: true);
  }

  static NSError errorWithDomain_code_userInfo_(
    AVFAudio _lib,
    NSString domain,
    int code,
    NSObject? dict,
  ) {
    final _ret = _lib._objc_msgSend_82(
      _lib._class_NSError1,
      _lib._sel_errorWithDomain_code_userInfo_1,
      domain.pointer,
      code,
      dict?.pointer ?? ffi.nullptr,
    );
    return NSError._(_ret, _lib, retain: true, release: true);
  }

  NSString get domain {
    final _ret = _lib._objc_msgSend_21(this.pointer, _lib._sel_domain1);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  int get code {
    return _lib._objc_msgSend_83(this.pointer, _lib._sel_code1);
  }

  NSObject get userInfo {
    final _ret = _lib._objc_msgSend_2(this.pointer, _lib._sel_userInfo1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSString get localizedDescription {
    final _ret = _lib._objc_msgSend_21(
      this.pointer,
      _lib._sel_localizedDescription1,
    );
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString? get localizedFailureReason {
    final _ret = _lib._objc_msgSend_44(
      this.pointer,
      _lib._sel_localizedFailureReason1,
    );
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString? get localizedRecoverySuggestion {
    final _ret = _lib._objc_msgSend_44(
      this.pointer,
      _lib._sel_localizedRecoverySuggestion1,
    );
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSArray? get localizedRecoveryOptions {
    final _ret = _lib._objc_msgSend_84(
      this.pointer,
      _lib._sel_localizedRecoveryOptions1,
    );
    return _ret.address == 0
        ? null
        : NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get recoveryAttempter {
    final _ret = _lib._objc_msgSend_17(
      this.pointer,
      _lib._sel_recoveryAttempter1,
    );
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSString? get helpAnchor {
    final _ret = _lib._objc_msgSend_44(this.pointer, _lib._sel_helpAnchor1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSArray get underlyingErrors {
    final _ret = _lib._objc_msgSend_85(
      this.pointer,
      _lib._sel_underlyingErrors1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  static void setUserInfoValueProviderForDomain_provider_(
    AVFAudio _lib,
    NSString errorDomain,
    ObjCBlock_objcObjCObject_NSError_NSString? provider,
  ) {
    _lib._objc_msgSend_86(
      _lib._class_NSError1,
      _lib._sel_setUserInfoValueProviderForDomain_provider_1,
      errorDomain.pointer,
      provider?.pointer ?? ffi.nullptr,
    );
  }

  static ObjCBlock_objcObjCObject_NSError_NSString?
  userInfoValueProviderForDomain_(
    AVFAudio _lib,
    NSError err,
    NSString userInfoKey,
    NSString errorDomain,
  ) {
    final _ret = _lib._objc_msgSend_87(
      _lib._class_NSError1,
      _lib._sel_userInfoValueProviderForDomain_1,
      err.pointer,
      userInfoKey.pointer,
      errorDomain.pointer,
    );
    return _ret.address == 0
        ? null
        : ObjCBlock_objcObjCObject_NSError_NSString._(
          _ret,
          _lib,
          retain: true,
          release: true,
        );
  }

  @override
  NSError init() {
    final _ret = _lib._objc_msgSend_2(this.pointer, _lib._sel_init1);
    return NSError._(_ret, _lib, retain: true, release: true);
  }

  static NSError new1(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSError1, _lib._sel_new1);
    return NSError._(_ret, _lib, retain: false, release: true);
  }

  static NSError allocWithZone_(AVFAudio _lib, ffi.Pointer<_NSZone> zone) {
    final _ret = _lib._objc_msgSend_3(
      _lib._class_NSError1,
      _lib._sel_allocWithZone_1,
      zone,
    );
    return NSError._(_ret, _lib, retain: false, release: true);
  }

  static NSError alloc(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSError1, _lib._sel_alloc1);
    return NSError._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
    AVFAudio _lib,
    NSObject aTarget,
    ffi.Pointer<objc.ObjCSelector> aSelector,
    NSObject? anArgument,
  ) {
    _lib._objc_msgSend_14(
      _lib._class_NSError1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
      aTarget.pointer,
      aSelector,
      anArgument?.pointer ?? ffi.nullptr,
    );
  }

  static void cancelPreviousPerformRequestsWithTarget_(
    AVFAudio _lib,
    NSObject aTarget,
  ) {
    _lib._objc_msgSend_15(
      _lib._class_NSError1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_1,
      aTarget.pointer,
    );
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSError1,
      _lib._sel_accessInstanceVariablesDirectly1,
    );
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSError1,
      _lib._sel_useStoredAccessor1,
    );
  }

  static NSSet keyPathsForValuesAffectingValueForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    final _ret = _lib._objc_msgSend_63(
      _lib._class_NSError1,
      _lib._sel_keyPathsForValuesAffectingValueForKey_1,
      key.pointer,
    );
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    return _lib._objc_msgSend_64(
      _lib._class_NSError1,
      _lib._sel_automaticallyNotifiesObserversForKey_1,
      key.pointer,
    );
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
    AVFAudio _lib,
    NSArray keys,
    NSString dependentKey,
  ) {
    _lib._objc_msgSend_88(
      _lib._class_NSError1,
      _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
      keys.pointer,
      dependentKey.pointer,
    );
  }

  static NSArray classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_85(
      _lib._class_NSError1,
      _lib._sel_classFallbacksForKeyedArchiver1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSError1,
      _lib._sel_classForKeyedUnarchiver1,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

ffi.Pointer<objc.ObjCObject>
_ObjCBlock_objcObjCObject_NSError_NSString_fnPtrTrampoline(
  ffi.Pointer<objc.ObjCBlock> block,
  ffi.Pointer<objc.ObjCObject> arg0,
  ffi.Pointer<objc.ObjCObject> arg1,
) => block.ref.target
    .cast<
      ffi.NativeFunction<
        ffi.Pointer<objc.ObjCObject> Function(
          ffi.Pointer<objc.ObjCObject> arg0,
          ffi.Pointer<objc.ObjCObject> arg1,
        )
      >
    >()
    .asFunction<
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >()(arg0, arg1);
final _ObjCBlock_objcObjCObject_NSError_NSString_closureRegistry =
    <
      int,
      ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >{};
int _ObjCBlock_objcObjCObject_NSError_NSString_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void>
_ObjCBlock_objcObjCObject_NSError_NSString_registerClosure(
  ffi.Pointer<objc.ObjCObject> Function(
    ffi.Pointer<objc.ObjCObject>,
    ffi.Pointer<objc.ObjCObject>,
  ) fn,
) {
  final id = ++_ObjCBlock_objcObjCObject_NSError_NSString_closureRegistryIndex;
  _ObjCBlock_objcObjCObject_NSError_NSString_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

ffi.Pointer<objc.ObjCObject>
_ObjCBlock_objcObjCObject_NSError_NSString_closureTrampoline(
  ffi.Pointer<objc.ObjCBlock> block,
  ffi.Pointer<objc.ObjCObject> arg0,
  ffi.Pointer<objc.ObjCObject> arg1,
) => _ObjCBlock_objcObjCObject_NSError_NSString_closureRegistry[block
    .ref
    .target
    .address]!(arg0, arg1);

class ObjCBlock_objcObjCObject_NSError_NSString extends objc.ObjCBlockBase {
  ObjCBlock_objcObjCObject_NSError_NSString._(
    ffi.Pointer<objc.ObjCBlock> pointer,
    this._lib, {
    bool retain = false,
    bool release = true,
  }) : super(pointer, retain: retain, release: release);

  AVFAudio _lib;

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_objcObjCObject_NSError_NSString castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCBlock> pointer, {
    bool retain = false,
    bool release = false,
  }) {
    return ObjCBlock_objcObjCObject_NSError_NSString._(
      pointer,
      lib,
      retain: retain,
      release: release,
    );
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_objcObjCObject_NSError_NSString.fromFunctionPointer(
    AVFAudio lib,
    ffi.Pointer<
      ffi.NativeFunction<
        ffi.Pointer<objc.ObjCObject> Function(
          ffi.Pointer<objc.ObjCObject> arg0,
          ffi.Pointer<objc.ObjCObject> arg1,
        )
      >
    > ptr,
  ) : this._(objc.newBlock(
        _cFuncTrampoline ??=
            ffi.Pointer.fromFunction<
              ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCBlock>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
              )
            >(
              _ObjCBlock_objcObjCObject_NSError_NSString_fnPtrTrampoline,
            ).cast(),
        ptr.cast(),
      ), lib);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_objcObjCObject_NSError_NSString.fromFunction(
    AVFAudio lib,
    NSObject? Function(NSError, NSString) fn,
  ) : this._(objc.newBlock(
        _dartFuncTrampoline ??=
            ffi.Pointer.fromFunction<
              ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCBlock>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
              )
            >(
              _ObjCBlock_objcObjCObject_NSError_NSString_closureTrampoline,
            ).cast(),
        _ObjCBlock_objcObjCObject_NSError_NSString_registerClosure((
          ffi.Pointer<objc.ObjCObject> arg0,
          ffi.Pointer<objc.ObjCObject> arg1,
        ) =>
            fn(
                  NSError._(arg0, lib, retain: true, release: true),
                  NSString._(arg1, lib, retain: true, release: true),
                )?.retainAndReturnPointer() ??
                ffi.nullptr),
      ), lib);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  NSObject? call(NSError arg0, NSString arg1) =>
      pointer.ref.invoke
                  .cast<
                    ffi.NativeFunction<
                      ffi.Pointer<objc.ObjCObject> Function(
                        ffi.Pointer<objc.ObjCBlock> block,
                        ffi.Pointer<objc.ObjCObject> arg0,
                        ffi.Pointer<objc.ObjCObject> arg1,
                      )
                    >
                  >()
                  .asFunction<
                    ffi.Pointer<objc.ObjCObject> Function(
                      ffi.Pointer<objc.ObjCBlock>,
                      ffi.Pointer<objc.ObjCObject>,
                      ffi.Pointer<objc.ObjCObject>,
                    )
                  >()(pointer, arg0.pointer, arg1.pointer)
                  .address ==
              0
          ? null
          : NSObject._(pointer.ref.invoke
              .cast<
                ffi.NativeFunction<
                  ffi.Pointer<objc.ObjCObject> Function(
                    ffi.Pointer<objc.ObjCBlock> block,
                    ffi.Pointer<objc.ObjCObject> arg0,
                    ffi.Pointer<objc.ObjCObject> arg1,
                  )
                >
              >()
              .asFunction<
                ffi.Pointer<objc.ObjCObject> Function(
                  ffi.Pointer<objc.ObjCBlock>,
                  ffi.Pointer<objc.ObjCObject>,
                  ffi.Pointer<objc.ObjCObject>,
                )
              >()(
            pointer,
            arg0.pointer,
            arg1.pointer,
          ), _lib, retain: false, release: true);
}

class NSIndexSet extends NSObject {
  NSIndexSet._(
    ffi.Pointer<objc.ObjCObject> pointer,
    AVFAudio lib, {
    bool retain = false,
    bool release = false,
  }) : super._(pointer, lib, retain: retain, release: release);

  /// Returns a [NSIndexSet] that points to the same underlying object as [other].
  static NSIndexSet castFrom<T extends objc.ObjCObjectBase>(
    AVFAudio lib,
    T other,
  ) {
    return NSIndexSet._(other.pointer, lib, retain: true, release: true);
  }

  /// Returns a [NSIndexSet] that wraps the given raw object pointer.
  static NSIndexSet castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCObject> other, {
    bool retain = false,
    bool release = false,
  }) {
    return NSIndexSet._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSIndexSet].
  static bool isInstance(AVFAudio lib, objc.ObjCObjectBase obj) {
    return lib._objc_msgSend_0(
      obj.pointer,
      lib._sel_isKindOfClass_1,
      lib._class_NSIndexSet1,
    );
  }

  static NSIndexSet indexSet(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSIndexSet1,
      _lib._sel_indexSet1,
    );
    return NSIndexSet._(_ret, _lib, retain: true, release: true);
  }

  static NSIndexSet indexSetWithIndex_(AVFAudio _lib, int value) {
    final _ret = _lib._objc_msgSend_65(
      _lib._class_NSIndexSet1,
      _lib._sel_indexSetWithIndex_1,
      value,
    );
    return NSIndexSet._(_ret, _lib, retain: true, release: true);
  }

  static NSIndexSet indexSetWithIndexesInRange_(AVFAudio _lib, _NSRange range) {
    final _ret = _lib._objc_msgSend_91(
      _lib._class_NSIndexSet1,
      _lib._sel_indexSetWithIndexesInRange_1,
      range,
    );
    return NSIndexSet._(_ret, _lib, retain: true, release: true);
  }

  NSIndexSet initWithIndexesInRange_(_NSRange range) {
    final _ret = _lib._objc_msgSend_91(
      this.pointer,
      _lib._sel_initWithIndexesInRange_1,
      range,
    );
    return NSIndexSet._(_ret, _lib, retain: true, release: true);
  }

  NSIndexSet initWithIndexSet_(NSIndexSet indexSet) {
    final _ret = _lib._objc_msgSend_92(
      this.pointer,
      _lib._sel_initWithIndexSet_1,
      indexSet.pointer,
    );
    return NSIndexSet._(_ret, _lib, retain: true, release: true);
  }

  NSIndexSet initWithIndex_(int value) {
    final _ret = _lib._objc_msgSend_65(
      this.pointer,
      _lib._sel_initWithIndex_1,
      value,
    );
    return NSIndexSet._(_ret, _lib, retain: true, release: true);
  }

  bool isEqualToIndexSet_(NSIndexSet indexSet) {
    return _lib._objc_msgSend_93(
      this.pointer,
      _lib._sel_isEqualToIndexSet_1,
      indexSet.pointer,
    );
  }

  int get count {
    return _lib._objc_msgSend_10(this.pointer, _lib._sel_count1);
  }

  int get firstIndex {
    return _lib._objc_msgSend_10(this.pointer, _lib._sel_firstIndex1);
  }

  int get lastIndex {
    return _lib._objc_msgSend_10(this.pointer, _lib._sel_lastIndex1);
  }

  int indexGreaterThanIndex_(int value) {
    return _lib._objc_msgSend_94(
      this.pointer,
      _lib._sel_indexGreaterThanIndex_1,
      value,
    );
  }

  int indexLessThanIndex_(int value) {
    return _lib._objc_msgSend_94(
      this.pointer,
      _lib._sel_indexLessThanIndex_1,
      value,
    );
  }

  int indexGreaterThanOrEqualToIndex_(int value) {
    return _lib._objc_msgSend_94(
      this.pointer,
      _lib._sel_indexGreaterThanOrEqualToIndex_1,
      value,
    );
  }

  int indexLessThanOrEqualToIndex_(int value) {
    return _lib._objc_msgSend_94(
      this.pointer,
      _lib._sel_indexLessThanOrEqualToIndex_1,
      value,
    );
  }

  int getIndexes_maxCount_inIndexRange_(
    ffi.Pointer<ffi.UnsignedLong> indexBuffer,
    int bufferSize,
    ffi.Pointer<_NSRange> range,
  ) {
    return _lib._objc_msgSend_95(
      this.pointer,
      _lib._sel_getIndexes_maxCount_inIndexRange_1,
      indexBuffer,
      bufferSize,
      range,
    );
  }

  int countOfIndexesInRange_(_NSRange range) {
    return _lib._objc_msgSend_96(
      this.pointer,
      _lib._sel_countOfIndexesInRange_1,
      range,
    );
  }

  bool containsIndex_(int value) {
    return _lib._objc_msgSend_97(
      this.pointer,
      _lib._sel_containsIndex_1,
      value,
    );
  }

  bool containsIndexesInRange_(_NSRange range) {
    return _lib._objc_msgSend_98(
      this.pointer,
      _lib._sel_containsIndexesInRange_1,
      range,
    );
  }

  bool containsIndexes_(NSIndexSet indexSet) {
    return _lib._objc_msgSend_93(
      this.pointer,
      _lib._sel_containsIndexes_1,
      indexSet.pointer,
    );
  }

  bool intersectsIndexesInRange_(_NSRange range) {
    return _lib._objc_msgSend_98(
      this.pointer,
      _lib._sel_intersectsIndexesInRange_1,
      range,
    );
  }

  void enumerateIndexesUsingBlock_(
    ObjCBlock_ffiVoid_ffiUnsignedLong_bool block,
  ) {
    _lib._objc_msgSend_99(
      this.pointer,
      _lib._sel_enumerateIndexesUsingBlock_1,
      block.pointer,
    );
  }

  void enumerateIndexesWithOptions_usingBlock_(
    int opts,
    ObjCBlock_ffiVoid_ffiUnsignedLong_bool block,
  ) {
    _lib._objc_msgSend_100(
      this.pointer,
      _lib._sel_enumerateIndexesWithOptions_usingBlock_1,
      opts,
      block.pointer,
    );
  }

  void enumerateIndexesInRange_options_usingBlock_(
    _NSRange range,
    int opts,
    ObjCBlock_ffiVoid_ffiUnsignedLong_bool block,
  ) {
    _lib._objc_msgSend_101(
      this.pointer,
      _lib._sel_enumerateIndexesInRange_options_usingBlock_1,
      range,
      opts,
      block.pointer,
    );
  }

  int indexPassingTest_(ObjCBlock_bool_ffiUnsignedLong_bool predicate) {
    return _lib._objc_msgSend_102(
      this.pointer,
      _lib._sel_indexPassingTest_1,
      predicate.pointer,
    );
  }

  int indexWithOptions_passingTest_(
    int opts,
    ObjCBlock_bool_ffiUnsignedLong_bool predicate,
  ) {
    return _lib._objc_msgSend_103(
      this.pointer,
      _lib._sel_indexWithOptions_passingTest_1,
      opts,
      predicate.pointer,
    );
  }

  int indexInRange_options_passingTest_(
    _NSRange range,
    int opts,
    ObjCBlock_bool_ffiUnsignedLong_bool predicate,
  ) {
    return _lib._objc_msgSend_104(
      this.pointer,
      _lib._sel_indexInRange_options_passingTest_1,
      range,
      opts,
      predicate.pointer,
    );
  }

  NSIndexSet indexesPassingTest_(
    ObjCBlock_bool_ffiUnsignedLong_bool predicate,
  ) {
    final _ret = _lib._objc_msgSend_105(
      this.pointer,
      _lib._sel_indexesPassingTest_1,
      predicate.pointer,
    );
    return NSIndexSet._(_ret, _lib, retain: true, release: true);
  }

  NSIndexSet indexesWithOptions_passingTest_(
    int opts,
    ObjCBlock_bool_ffiUnsignedLong_bool predicate,
  ) {
    final _ret = _lib._objc_msgSend_106(
      this.pointer,
      _lib._sel_indexesWithOptions_passingTest_1,
      opts,
      predicate.pointer,
    );
    return NSIndexSet._(_ret, _lib, retain: true, release: true);
  }

  NSIndexSet indexesInRange_options_passingTest_(
    _NSRange range,
    int opts,
    ObjCBlock_bool_ffiUnsignedLong_bool predicate,
  ) {
    final _ret = _lib._objc_msgSend_107(
      this.pointer,
      _lib._sel_indexesInRange_options_passingTest_1,
      range,
      opts,
      predicate.pointer,
    );
    return NSIndexSet._(_ret, _lib, retain: true, release: true);
  }

  void enumerateRangesUsingBlock_(ObjCBlock_ffiVoid_NSRange_bool block) {
    _lib._objc_msgSend_108(
      this.pointer,
      _lib._sel_enumerateRangesUsingBlock_1,
      block.pointer,
    );
  }

  void enumerateRangesWithOptions_usingBlock_(
    int opts,
    ObjCBlock_ffiVoid_NSRange_bool block,
  ) {
    _lib._objc_msgSend_109(
      this.pointer,
      _lib._sel_enumerateRangesWithOptions_usingBlock_1,
      opts,
      block.pointer,
    );
  }

  void enumerateRangesInRange_options_usingBlock_(
    _NSRange range,
    int opts,
    ObjCBlock_ffiVoid_NSRange_bool block,
  ) {
    _lib._objc_msgSend_110(
      this.pointer,
      _lib._sel_enumerateRangesInRange_options_usingBlock_1,
      range,
      opts,
      block.pointer,
    );
  }

  @override
  NSIndexSet init() {
    final _ret = _lib._objc_msgSend_2(this.pointer, _lib._sel_init1);
    return NSIndexSet._(_ret, _lib, retain: true, release: true);
  }

  static NSIndexSet new1(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSIndexSet1, _lib._sel_new1);
    return NSIndexSet._(_ret, _lib, retain: false, release: true);
  }

  static NSIndexSet allocWithZone_(AVFAudio _lib, ffi.Pointer<_NSZone> zone) {
    final _ret = _lib._objc_msgSend_3(
      _lib._class_NSIndexSet1,
      _lib._sel_allocWithZone_1,
      zone,
    );
    return NSIndexSet._(_ret, _lib, retain: false, release: true);
  }

  static NSIndexSet alloc(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSIndexSet1,
      _lib._sel_alloc1,
    );
    return NSIndexSet._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
    AVFAudio _lib,
    NSObject aTarget,
    ffi.Pointer<objc.ObjCSelector> aSelector,
    NSObject? anArgument,
  ) {
    _lib._objc_msgSend_14(
      _lib._class_NSIndexSet1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
      aTarget.pointer,
      aSelector,
      anArgument?.pointer ?? ffi.nullptr,
    );
  }

  static void cancelPreviousPerformRequestsWithTarget_(
    AVFAudio _lib,
    NSObject aTarget,
  ) {
    _lib._objc_msgSend_15(
      _lib._class_NSIndexSet1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_1,
      aTarget.pointer,
    );
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSIndexSet1,
      _lib._sel_accessInstanceVariablesDirectly1,
    );
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSIndexSet1,
      _lib._sel_useStoredAccessor1,
    );
  }

  static NSSet keyPathsForValuesAffectingValueForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    final _ret = _lib._objc_msgSend_63(
      _lib._class_NSIndexSet1,
      _lib._sel_keyPathsForValuesAffectingValueForKey_1,
      key.pointer,
    );
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    return _lib._objc_msgSend_64(
      _lib._class_NSIndexSet1,
      _lib._sel_automaticallyNotifiesObserversForKey_1,
      key.pointer,
    );
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
    AVFAudio _lib,
    NSArray keys,
    NSString dependentKey,
  ) {
    _lib._objc_msgSend_88(
      _lib._class_NSIndexSet1,
      _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
      keys.pointer,
      dependentKey.pointer,
    );
  }

  static NSArray classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_85(
      _lib._class_NSIndexSet1,
      _lib._sel_classFallbacksForKeyedArchiver1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSIndexSet1,
      _lib._sel_classForKeyedUnarchiver1,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

void _ObjCBlock_ffiVoid_ffiUnsignedLong_bool_fnPtrTrampoline(
  ffi.Pointer<objc.ObjCBlock> block,
  int arg0,
  ffi.Pointer<ffi.Bool> arg1,
) => block.ref.target
    .cast<
      ffi.NativeFunction<
        ffi.Void Function(ffi.UnsignedLong arg0, ffi.Pointer<ffi.Bool> arg1)
      >
    >()
    .asFunction<void Function(int, ffi.Pointer<ffi.Bool>)>()(arg0, arg1);
final _ObjCBlock_ffiVoid_ffiUnsignedLong_bool_closureRegistry =
    <int, void Function(int, ffi.Pointer<ffi.Bool>)>{};
int _ObjCBlock_ffiVoid_ffiUnsignedLong_bool_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void> _ObjCBlock_ffiVoid_ffiUnsignedLong_bool_registerClosure(
  void Function(int, ffi.Pointer<ffi.Bool>) fn,
) {
  final id = ++_ObjCBlock_ffiVoid_ffiUnsignedLong_bool_closureRegistryIndex;
  _ObjCBlock_ffiVoid_ffiUnsignedLong_bool_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

void _ObjCBlock_ffiVoid_ffiUnsignedLong_bool_closureTrampoline(
  ffi.Pointer<objc.ObjCBlock> block,
  int arg0,
  ffi.Pointer<ffi.Bool> arg1,
) => _ObjCBlock_ffiVoid_ffiUnsignedLong_bool_closureRegistry[block
    .ref
    .target
    .address]!(arg0, arg1);

class ObjCBlock_ffiVoid_ffiUnsignedLong_bool extends objc.ObjCBlockBase {
  ObjCBlock_ffiVoid_ffiUnsignedLong_bool._(
    ffi.Pointer<objc.ObjCBlock> pointer,
    this._lib, {
    bool retain = false,
    bool release = true,
  }) : super(pointer, retain: retain, release: release);

  AVFAudio _lib;

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_ffiVoid_ffiUnsignedLong_bool castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCBlock> pointer, {
    bool retain = false,
    bool release = false,
  }) {
    return ObjCBlock_ffiVoid_ffiUnsignedLong_bool._(
      pointer,
      lib,
      retain: retain,
      release: release,
    );
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_ffiUnsignedLong_bool.fromFunctionPointer(
    AVFAudio lib,
    ffi.Pointer<
      ffi.NativeFunction<
        ffi.Void Function(ffi.UnsignedLong arg0, ffi.Pointer<ffi.Bool> arg1)
      >
    > ptr,
  ) : this._(objc.newBlock(
        _cFuncTrampoline ??=
            ffi.Pointer.fromFunction<
              ffi.Void Function(
                ffi.Pointer<objc.ObjCBlock>,
                ffi.UnsignedLong,
                ffi.Pointer<ffi.Bool>,
              )
            >(_ObjCBlock_ffiVoid_ffiUnsignedLong_bool_fnPtrTrampoline).cast(),
        ptr.cast(),
      ), lib);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_ffiUnsignedLong_bool.fromFunction(
    AVFAudio lib,
    void Function(int, ffi.Pointer<ffi.Bool>) fn,
  ) : this._(objc.newBlock(
        _dartFuncTrampoline ??=
            ffi.Pointer.fromFunction<
              ffi.Void Function(
                ffi.Pointer<objc.ObjCBlock>,
                ffi.UnsignedLong,
                ffi.Pointer<ffi.Bool>,
              )
            >(_ObjCBlock_ffiVoid_ffiUnsignedLong_bool_closureTrampoline).cast(),
        _ObjCBlock_ffiVoid_ffiUnsignedLong_bool_registerClosure((
          int arg0,
          ffi.Pointer<ffi.Bool> arg1,
        ) => fn(arg0, arg1)),
      ), lib);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_ffiUnsignedLong_bool.listener(
    AVFAudio lib,
    void Function(int, ffi.Pointer<ffi.Bool>) fn,
  ) : this._(objc.newBlock(
        (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
              ffi.Void Function(
                ffi.Pointer<objc.ObjCBlock>,
                ffi.UnsignedLong,
                ffi.Pointer<ffi.Bool>,
              )
            >.listener(
              _ObjCBlock_ffiVoid_ffiUnsignedLong_bool_closureTrampoline,
            )..keepIsolateAlive = false)
            .nativeFunction
            .cast(),
        _ObjCBlock_ffiVoid_ffiUnsignedLong_bool_registerClosure((
          int arg0,
          ffi.Pointer<ffi.Bool> arg1,
        ) => fn(arg0, arg1)),
      ), lib);
  static ffi.NativeCallable<
    ffi.Void Function(
      ffi.Pointer<objc.ObjCBlock>,
      ffi.UnsignedLong,
      ffi.Pointer<ffi.Bool>,
    )
  >? _dartFuncListenerTrampoline;

  void call(int arg0, ffi.Pointer<ffi.Bool> arg1) => pointer.ref.invoke
      .cast<
        ffi.NativeFunction<
          ffi.Void Function(
            ffi.Pointer<objc.ObjCBlock> block,
            ffi.UnsignedLong arg0,
            ffi.Pointer<ffi.Bool> arg1,
          )
        >
      >()
      .asFunction<
        void Function(ffi.Pointer<objc.ObjCBlock>, int, ffi.Pointer<ffi.Bool>)
      >()(pointer, arg0, arg1);
}

abstract class NSEnumerationOptions {
  static const int NSEnumerationConcurrent = 1;
  static const int NSEnumerationReverse = 2;
}

bool _ObjCBlock_bool_ffiUnsignedLong_bool_fnPtrTrampoline(
  ffi.Pointer<objc.ObjCBlock> block,
  int arg0,
  ffi.Pointer<ffi.Bool> arg1,
) => block.ref.target
    .cast<
      ffi.NativeFunction<
        ffi.Bool Function(ffi.UnsignedLong arg0, ffi.Pointer<ffi.Bool> arg1)
      >
    >()
    .asFunction<bool Function(int, ffi.Pointer<ffi.Bool>)>()(arg0, arg1);
final _ObjCBlock_bool_ffiUnsignedLong_bool_closureRegistry =
    <int, bool Function(int, ffi.Pointer<ffi.Bool>)>{};
int _ObjCBlock_bool_ffiUnsignedLong_bool_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void> _ObjCBlock_bool_ffiUnsignedLong_bool_registerClosure(
  bool Function(int, ffi.Pointer<ffi.Bool>) fn,
) {
  final id = ++_ObjCBlock_bool_ffiUnsignedLong_bool_closureRegistryIndex;
  _ObjCBlock_bool_ffiUnsignedLong_bool_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

bool _ObjCBlock_bool_ffiUnsignedLong_bool_closureTrampoline(
  ffi.Pointer<objc.ObjCBlock> block,
  int arg0,
  ffi.Pointer<ffi.Bool> arg1,
) => _ObjCBlock_bool_ffiUnsignedLong_bool_closureRegistry[block
    .ref
    .target
    .address]!(arg0, arg1);

class ObjCBlock_bool_ffiUnsignedLong_bool extends objc.ObjCBlockBase {
  ObjCBlock_bool_ffiUnsignedLong_bool._(
    ffi.Pointer<objc.ObjCBlock> pointer,
    this._lib, {
    bool retain = false,
    bool release = true,
  }) : super(pointer, retain: retain, release: release);

  AVFAudio _lib;

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_bool_ffiUnsignedLong_bool castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCBlock> pointer, {
    bool retain = false,
    bool release = false,
  }) {
    return ObjCBlock_bool_ffiUnsignedLong_bool._(
      pointer,
      lib,
      retain: retain,
      release: release,
    );
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_bool_ffiUnsignedLong_bool.fromFunctionPointer(
    AVFAudio lib,
    ffi.Pointer<
      ffi.NativeFunction<
        ffi.Bool Function(ffi.UnsignedLong arg0, ffi.Pointer<ffi.Bool> arg1)
      >
    > ptr,
  ) : this._(objc.newBlock(
        _cFuncTrampoline ??=
            ffi.Pointer.fromFunction<
              ffi.Bool Function(
                ffi.Pointer<objc.ObjCBlock>,
                ffi.UnsignedLong,
                ffi.Pointer<ffi.Bool>,
              )
            >(
              _ObjCBlock_bool_ffiUnsignedLong_bool_fnPtrTrampoline,
              false,
            ).cast(),
        ptr.cast(),
      ), lib);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_bool_ffiUnsignedLong_bool.fromFunction(
    AVFAudio lib,
    bool Function(int, ffi.Pointer<ffi.Bool>) fn,
  ) : this._(objc.newBlock(
        _dartFuncTrampoline ??=
            ffi.Pointer.fromFunction<
              ffi.Bool Function(
                ffi.Pointer<objc.ObjCBlock>,
                ffi.UnsignedLong,
                ffi.Pointer<ffi.Bool>,
              )
            >(
              _ObjCBlock_bool_ffiUnsignedLong_bool_closureTrampoline,
              false,
            ).cast(),
        _ObjCBlock_bool_ffiUnsignedLong_bool_registerClosure((
          int arg0,
          ffi.Pointer<ffi.Bool> arg1,
        ) => fn(arg0, arg1)),
      ), lib);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  bool call(int arg0, ffi.Pointer<ffi.Bool> arg1) => pointer.ref.invoke
      .cast<
        ffi.NativeFunction<
          ffi.Bool Function(
            ffi.Pointer<objc.ObjCBlock> block,
            ffi.UnsignedLong arg0,
            ffi.Pointer<ffi.Bool> arg1,
          )
        >
      >()
      .asFunction<
        bool Function(ffi.Pointer<objc.ObjCBlock>, int, ffi.Pointer<ffi.Bool>)
      >()(pointer, arg0, arg1);
}

void _ObjCBlock_ffiVoid_NSRange_bool_fnPtrTrampoline(
  ffi.Pointer<objc.ObjCBlock> block,
  _NSRange arg0,
  ffi.Pointer<ffi.Bool> arg1,
) => block.ref.target
    .cast<
      ffi.NativeFunction<
        ffi.Void Function(_NSRange arg0, ffi.Pointer<ffi.Bool> arg1)
      >
    >()
    .asFunction<void Function(_NSRange, ffi.Pointer<ffi.Bool>)>()(arg0, arg1);
final _ObjCBlock_ffiVoid_NSRange_bool_closureRegistry =
    <int, void Function(_NSRange, ffi.Pointer<ffi.Bool>)>{};
int _ObjCBlock_ffiVoid_NSRange_bool_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void> _ObjCBlock_ffiVoid_NSRange_bool_registerClosure(
  void Function(_NSRange, ffi.Pointer<ffi.Bool>) fn,
) {
  final id = ++_ObjCBlock_ffiVoid_NSRange_bool_closureRegistryIndex;
  _ObjCBlock_ffiVoid_NSRange_bool_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

void _ObjCBlock_ffiVoid_NSRange_bool_closureTrampoline(
  ffi.Pointer<objc.ObjCBlock> block,
  _NSRange arg0,
  ffi.Pointer<ffi.Bool> arg1,
) => _ObjCBlock_ffiVoid_NSRange_bool_closureRegistry[block.ref.target.address]!(
  arg0,
  arg1,
);

class ObjCBlock_ffiVoid_NSRange_bool extends objc.ObjCBlockBase {
  ObjCBlock_ffiVoid_NSRange_bool._(
    ffi.Pointer<objc.ObjCBlock> pointer,
    this._lib, {
    bool retain = false,
    bool release = true,
  }) : super(pointer, retain: retain, release: release);

  AVFAudio _lib;

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_ffiVoid_NSRange_bool castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCBlock> pointer, {
    bool retain = false,
    bool release = false,
  }) {
    return ObjCBlock_ffiVoid_NSRange_bool._(
      pointer,
      lib,
      retain: retain,
      release: release,
    );
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSRange_bool.fromFunctionPointer(
    AVFAudio lib,
    ffi.Pointer<
      ffi.NativeFunction<
        ffi.Void Function(_NSRange arg0, ffi.Pointer<ffi.Bool> arg1)
      >
    > ptr,
  ) : this._(objc.newBlock(
        _cFuncTrampoline ??=
            ffi.Pointer.fromFunction<
              ffi.Void Function(
                ffi.Pointer<objc.ObjCBlock>,
                _NSRange,
                ffi.Pointer<ffi.Bool>,
              )
            >(_ObjCBlock_ffiVoid_NSRange_bool_fnPtrTrampoline).cast(),
        ptr.cast(),
      ), lib);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSRange_bool.fromFunction(
    AVFAudio lib,
    void Function(_NSRange, ffi.Pointer<ffi.Bool>) fn,
  ) : this._(objc.newBlock(
        _dartFuncTrampoline ??=
            ffi.Pointer.fromFunction<
              ffi.Void Function(
                ffi.Pointer<objc.ObjCBlock>,
                _NSRange,
                ffi.Pointer<ffi.Bool>,
              )
            >(_ObjCBlock_ffiVoid_NSRange_bool_closureTrampoline).cast(),
        _ObjCBlock_ffiVoid_NSRange_bool_registerClosure((
          _NSRange arg0,
          ffi.Pointer<ffi.Bool> arg1,
        ) => fn(arg0, arg1)),
      ), lib);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_NSRange_bool.listener(
    AVFAudio lib,
    void Function(_NSRange, ffi.Pointer<ffi.Bool>) fn,
  ) : this._(objc.newBlock(
        (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
              ffi.Void Function(
                ffi.Pointer<objc.ObjCBlock>,
                _NSRange,
                ffi.Pointer<ffi.Bool>,
              )
            >.listener(
              _ObjCBlock_ffiVoid_NSRange_bool_closureTrampoline,
            )..keepIsolateAlive = false)
            .nativeFunction
            .cast(),
        _ObjCBlock_ffiVoid_NSRange_bool_registerClosure((
          _NSRange arg0,
          ffi.Pointer<ffi.Bool> arg1,
        ) => fn(arg0, arg1)),
      ), lib);
  static ffi.NativeCallable<
    ffi.Void Function(
      ffi.Pointer<objc.ObjCBlock>,
      _NSRange,
      ffi.Pointer<ffi.Bool>,
    )
  >? _dartFuncListenerTrampoline;

  void call(_NSRange arg0, ffi.Pointer<ffi.Bool> arg1) => pointer.ref.invoke
      .cast<
        ffi.NativeFunction<
          ffi.Void Function(
            ffi.Pointer<objc.ObjCBlock> block,
            _NSRange arg0,
            ffi.Pointer<ffi.Bool> arg1,
          )
        >
      >()
      .asFunction<
        void Function(
          ffi.Pointer<objc.ObjCBlock>,
          _NSRange,
          ffi.Pointer<ffi.Bool>,
        )
      >()(pointer, arg0, arg1);
}

void _ObjCBlock_ffiVoid_objcObjCObject_ffiUnsignedLong_bool_fnPtrTrampoline(
  ffi.Pointer<objc.ObjCBlock> block,
  ffi.Pointer<objc.ObjCObject> arg0,
  int arg1,
  ffi.Pointer<ffi.Bool> arg2,
) => block.ref.target
    .cast<
      ffi.NativeFunction<
        ffi.Void Function(
          ffi.Pointer<objc.ObjCObject> arg0,
          ffi.UnsignedLong arg1,
          ffi.Pointer<ffi.Bool> arg2,
        )
      >
    >()
    .asFunction<
      void Function(ffi.Pointer<objc.ObjCObject>, int, ffi.Pointer<ffi.Bool>)
    >()(arg0, arg1, arg2);
final _ObjCBlock_ffiVoid_objcObjCObject_ffiUnsignedLong_bool_closureRegistry =
    <
      int,
      void Function(ffi.Pointer<objc.ObjCObject>, int, ffi.Pointer<ffi.Bool>)
    >{};
int
_ObjCBlock_ffiVoid_objcObjCObject_ffiUnsignedLong_bool_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void>
_ObjCBlock_ffiVoid_objcObjCObject_ffiUnsignedLong_bool_registerClosure(
  void Function(ffi.Pointer<objc.ObjCObject>, int, ffi.Pointer<ffi.Bool>) fn,
) {
  final id =
      ++_ObjCBlock_ffiVoid_objcObjCObject_ffiUnsignedLong_bool_closureRegistryIndex;
  _ObjCBlock_ffiVoid_objcObjCObject_ffiUnsignedLong_bool_closureRegistry[id] =
      fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

void _ObjCBlock_ffiVoid_objcObjCObject_ffiUnsignedLong_bool_closureTrampoline(
  ffi.Pointer<objc.ObjCBlock> block,
  ffi.Pointer<objc.ObjCObject> arg0,
  int arg1,
  ffi.Pointer<ffi.Bool> arg2,
) =>
    _ObjCBlock_ffiVoid_objcObjCObject_ffiUnsignedLong_bool_closureRegistry[block
        .ref
        .target
        .address]!(arg0, arg1, arg2);

class ObjCBlock_ffiVoid_objcObjCObject_ffiUnsignedLong_bool
    extends objc.ObjCBlockBase {
  ObjCBlock_ffiVoid_objcObjCObject_ffiUnsignedLong_bool._(
    ffi.Pointer<objc.ObjCBlock> pointer,
    this._lib, {
    bool retain = false,
    bool release = true,
  }) : super(pointer, retain: retain, release: release);

  AVFAudio _lib;

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_ffiVoid_objcObjCObject_ffiUnsignedLong_bool castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCBlock> pointer, {
    bool retain = false,
    bool release = false,
  }) {
    return ObjCBlock_ffiVoid_objcObjCObject_ffiUnsignedLong_bool._(
      pointer,
      lib,
      retain: retain,
      release: release,
    );
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_objcObjCObject_ffiUnsignedLong_bool.fromFunctionPointer(
    AVFAudio lib,
    ffi.Pointer<
      ffi.NativeFunction<
        ffi.Void Function(
          ffi.Pointer<objc.ObjCObject> arg0,
          ffi.UnsignedLong arg1,
          ffi.Pointer<ffi.Bool> arg2,
        )
      >
    > ptr,
  ) : this._(objc.newBlock(
        _cFuncTrampoline ??=
            ffi.Pointer.fromFunction<
              ffi.Void Function(
                ffi.Pointer<objc.ObjCBlock>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.UnsignedLong,
                ffi.Pointer<ffi.Bool>,
              )
            >(
              _ObjCBlock_ffiVoid_objcObjCObject_ffiUnsignedLong_bool_fnPtrTrampoline,
            ).cast(),
        ptr.cast(),
      ), lib);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_objcObjCObject_ffiUnsignedLong_bool.fromFunction(
    AVFAudio lib,
    void Function(NSObject, int, ffi.Pointer<ffi.Bool>) fn,
  ) : this._(objc.newBlock(
        _dartFuncTrampoline ??=
            ffi.Pointer.fromFunction<
              ffi.Void Function(
                ffi.Pointer<objc.ObjCBlock>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.UnsignedLong,
                ffi.Pointer<ffi.Bool>,
              )
            >(
              _ObjCBlock_ffiVoid_objcObjCObject_ffiUnsignedLong_bool_closureTrampoline,
            ).cast(),
        _ObjCBlock_ffiVoid_objcObjCObject_ffiUnsignedLong_bool_registerClosure((
          ffi.Pointer<objc.ObjCObject> arg0,
          int arg1,
          ffi.Pointer<ffi.Bool> arg2,
        ) => fn(NSObject._(
          arg0,
          lib,
          retain: true,
          release: true,
        ), arg1, arg2)),
      ), lib);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_objcObjCObject_ffiUnsignedLong_bool.listener(
    AVFAudio lib,
    void Function(NSObject, int, ffi.Pointer<ffi.Bool>) fn,
  ) : this._(objc.newBlock(
        (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
              ffi.Void Function(
                ffi.Pointer<objc.ObjCBlock>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.UnsignedLong,
                ffi.Pointer<ffi.Bool>,
              )
            >.listener(
              _ObjCBlock_ffiVoid_objcObjCObject_ffiUnsignedLong_bool_closureTrampoline,
            )..keepIsolateAlive = false)
            .nativeFunction
            .cast(),
        _ObjCBlock_ffiVoid_objcObjCObject_ffiUnsignedLong_bool_registerClosure((
          ffi.Pointer<objc.ObjCObject> arg0,
          int arg1,
          ffi.Pointer<ffi.Bool> arg2,
        ) => fn(NSObject._(
          arg0,
          lib,
          retain: true,
          release: true,
        ), arg1, arg2)),
      ), lib);
  static ffi.NativeCallable<
    ffi.Void Function(
      ffi.Pointer<objc.ObjCBlock>,
      ffi.Pointer<objc.ObjCObject>,
      ffi.UnsignedLong,
      ffi.Pointer<ffi.Bool>,
    )
  >? _dartFuncListenerTrampoline;

  void call(NSObject arg0, int arg1, ffi.Pointer<ffi.Bool> arg2) => pointer
      .ref
      .invoke
      .cast<
        ffi.NativeFunction<
          ffi.Void Function(
            ffi.Pointer<objc.ObjCBlock> block,
            ffi.Pointer<objc.ObjCObject> arg0,
            ffi.UnsignedLong arg1,
            ffi.Pointer<ffi.Bool> arg2,
          )
        >
      >()
      .asFunction<
        void Function(
          ffi.Pointer<objc.ObjCBlock>,
          ffi.Pointer<objc.ObjCObject>,
          int,
          ffi.Pointer<ffi.Bool>,
        )
      >()(pointer, arg0.pointer, arg1, arg2);
}

bool _ObjCBlock_bool_objcObjCObject_ffiUnsignedLong_bool_fnPtrTrampoline(
  ffi.Pointer<objc.ObjCBlock> block,
  ffi.Pointer<objc.ObjCObject> arg0,
  int arg1,
  ffi.Pointer<ffi.Bool> arg2,
) => block.ref.target
    .cast<
      ffi.NativeFunction<
        ffi.Bool Function(
          ffi.Pointer<objc.ObjCObject> arg0,
          ffi.UnsignedLong arg1,
          ffi.Pointer<ffi.Bool> arg2,
        )
      >
    >()
    .asFunction<
      bool Function(ffi.Pointer<objc.ObjCObject>, int, ffi.Pointer<ffi.Bool>)
    >()(arg0, arg1, arg2);
final _ObjCBlock_bool_objcObjCObject_ffiUnsignedLong_bool_closureRegistry =
    <
      int,
      bool Function(ffi.Pointer<objc.ObjCObject>, int, ffi.Pointer<ffi.Bool>)
    >{};
int _ObjCBlock_bool_objcObjCObject_ffiUnsignedLong_bool_closureRegistryIndex =
    0;
ffi.Pointer<ffi.Void>
_ObjCBlock_bool_objcObjCObject_ffiUnsignedLong_bool_registerClosure(
  bool Function(ffi.Pointer<objc.ObjCObject>, int, ffi.Pointer<ffi.Bool>) fn,
) {
  final id =
      ++_ObjCBlock_bool_objcObjCObject_ffiUnsignedLong_bool_closureRegistryIndex;
  _ObjCBlock_bool_objcObjCObject_ffiUnsignedLong_bool_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

bool _ObjCBlock_bool_objcObjCObject_ffiUnsignedLong_bool_closureTrampoline(
  ffi.Pointer<objc.ObjCBlock> block,
  ffi.Pointer<objc.ObjCObject> arg0,
  int arg1,
  ffi.Pointer<ffi.Bool> arg2,
) => _ObjCBlock_bool_objcObjCObject_ffiUnsignedLong_bool_closureRegistry[block
    .ref
    .target
    .address]!(arg0, arg1, arg2);

class ObjCBlock_bool_objcObjCObject_ffiUnsignedLong_bool
    extends objc.ObjCBlockBase {
  ObjCBlock_bool_objcObjCObject_ffiUnsignedLong_bool._(
    ffi.Pointer<objc.ObjCBlock> pointer,
    this._lib, {
    bool retain = false,
    bool release = true,
  }) : super(pointer, retain: retain, release: release);

  AVFAudio _lib;

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_bool_objcObjCObject_ffiUnsignedLong_bool castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCBlock> pointer, {
    bool retain = false,
    bool release = false,
  }) {
    return ObjCBlock_bool_objcObjCObject_ffiUnsignedLong_bool._(
      pointer,
      lib,
      retain: retain,
      release: release,
    );
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_bool_objcObjCObject_ffiUnsignedLong_bool.fromFunctionPointer(
    AVFAudio lib,
    ffi.Pointer<
      ffi.NativeFunction<
        ffi.Bool Function(
          ffi.Pointer<objc.ObjCObject> arg0,
          ffi.UnsignedLong arg1,
          ffi.Pointer<ffi.Bool> arg2,
        )
      >
    > ptr,
  ) : this._(objc.newBlock(
        _cFuncTrampoline ??=
            ffi.Pointer.fromFunction<
              ffi.Bool Function(
                ffi.Pointer<objc.ObjCBlock>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.UnsignedLong,
                ffi.Pointer<ffi.Bool>,
              )
            >(
              _ObjCBlock_bool_objcObjCObject_ffiUnsignedLong_bool_fnPtrTrampoline,
              false,
            ).cast(),
        ptr.cast(),
      ), lib);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_bool_objcObjCObject_ffiUnsignedLong_bool.fromFunction(
    AVFAudio lib,
    bool Function(NSObject, int, ffi.Pointer<ffi.Bool>) fn,
  ) : this._(objc.newBlock(
        _dartFuncTrampoline ??=
            ffi.Pointer.fromFunction<
              ffi.Bool Function(
                ffi.Pointer<objc.ObjCBlock>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.UnsignedLong,
                ffi.Pointer<ffi.Bool>,
              )
            >(
              _ObjCBlock_bool_objcObjCObject_ffiUnsignedLong_bool_closureTrampoline,
              false,
            ).cast(),
        _ObjCBlock_bool_objcObjCObject_ffiUnsignedLong_bool_registerClosure((
          ffi.Pointer<objc.ObjCObject> arg0,
          int arg1,
          ffi.Pointer<ffi.Bool> arg2,
        ) => fn(NSObject._(
          arg0,
          lib,
          retain: true,
          release: true,
        ), arg1, arg2)),
      ), lib);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  bool call(NSObject arg0, int arg1, ffi.Pointer<ffi.Bool> arg2) => pointer
      .ref
      .invoke
      .cast<
        ffi.NativeFunction<
          ffi.Bool Function(
            ffi.Pointer<objc.ObjCBlock> block,
            ffi.Pointer<objc.ObjCObject> arg0,
            ffi.UnsignedLong arg1,
            ffi.Pointer<ffi.Bool> arg2,
          )
        >
      >()
      .asFunction<
        bool Function(
          ffi.Pointer<objc.ObjCBlock>,
          ffi.Pointer<objc.ObjCObject>,
          int,
          ffi.Pointer<ffi.Bool>,
        )
      >()(pointer, arg0.pointer, arg1, arg2);
}

int _ObjCBlock_NSComparisonResult_objcObjCObject_objcObjCObject_fnPtrTrampoline(
  ffi.Pointer<objc.ObjCBlock> block,
  ffi.Pointer<objc.ObjCObject> arg0,
  ffi.Pointer<objc.ObjCObject> arg1,
) => block.ref.target
    .cast<
      ffi.NativeFunction<
        ffi.Int32 Function(
          ffi.Pointer<objc.ObjCObject> arg0,
          ffi.Pointer<objc.ObjCObject> arg1,
        )
      >
    >()
    .asFunction<
      int Function(ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)
    >()(arg0, arg1);
final _ObjCBlock_NSComparisonResult_objcObjCObject_objcObjCObject_closureRegistry =
    <
      int,
      int Function(ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)
    >{};
int
_ObjCBlock_NSComparisonResult_objcObjCObject_objcObjCObject_closureRegistryIndex =
    0;
ffi.Pointer<ffi.Void>
_ObjCBlock_NSComparisonResult_objcObjCObject_objcObjCObject_registerClosure(
  int Function(ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>) fn,
) {
  final id =
      ++_ObjCBlock_NSComparisonResult_objcObjCObject_objcObjCObject_closureRegistryIndex;
  _ObjCBlock_NSComparisonResult_objcObjCObject_objcObjCObject_closureRegistry[id] =
      fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

int
_ObjCBlock_NSComparisonResult_objcObjCObject_objcObjCObject_closureTrampoline(
  ffi.Pointer<objc.ObjCBlock> block,
  ffi.Pointer<objc.ObjCObject> arg0,
  ffi.Pointer<objc.ObjCObject> arg1,
) =>
    _ObjCBlock_NSComparisonResult_objcObjCObject_objcObjCObject_closureRegistry[block
        .ref
        .target
        .address]!(arg0, arg1);

class ObjCBlock_NSComparisonResult_objcObjCObject_objcObjCObject
    extends objc.ObjCBlockBase {
  ObjCBlock_NSComparisonResult_objcObjCObject_objcObjCObject._(
    ffi.Pointer<objc.ObjCBlock> pointer,
    this._lib, {
    bool retain = false,
    bool release = true,
  }) : super(pointer, retain: retain, release: release);

  AVFAudio _lib;

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_NSComparisonResult_objcObjCObject_objcObjCObject
  castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCBlock> pointer, {
    bool retain = false,
    bool release = false,
  }) {
    return ObjCBlock_NSComparisonResult_objcObjCObject_objcObjCObject._(
      pointer,
      lib,
      retain: retain,
      release: release,
    );
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_NSComparisonResult_objcObjCObject_objcObjCObject.fromFunctionPointer(
    AVFAudio lib,
    ffi.Pointer<
      ffi.NativeFunction<
        ffi.Int32 Function(
          ffi.Pointer<objc.ObjCObject> arg0,
          ffi.Pointer<objc.ObjCObject> arg1,
        )
      >
    > ptr,
  ) : this._(objc.newBlock(
        _cFuncTrampoline ??=
            ffi.Pointer.fromFunction<
              ffi.Int32 Function(
                ffi.Pointer<objc.ObjCBlock>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
              )
            >(
              _ObjCBlock_NSComparisonResult_objcObjCObject_objcObjCObject_fnPtrTrampoline,
              0,
            ).cast(),
        ptr.cast(),
      ), lib);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_NSComparisonResult_objcObjCObject_objcObjCObject.fromFunction(
    AVFAudio lib,
    int Function(NSObject, NSObject) fn,
  ) : this._(objc.newBlock(
        _dartFuncTrampoline ??=
            ffi.Pointer.fromFunction<
              ffi.Int32 Function(
                ffi.Pointer<objc.ObjCBlock>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
              )
            >(
              _ObjCBlock_NSComparisonResult_objcObjCObject_objcObjCObject_closureTrampoline,
              0,
            ).cast(),
        _ObjCBlock_NSComparisonResult_objcObjCObject_objcObjCObject_registerClosure(
          (
            ffi.Pointer<objc.ObjCObject> arg0,
            ffi.Pointer<objc.ObjCObject> arg1,
          ) => fn(
            NSObject._(arg0, lib, retain: true, release: true),
            NSObject._(arg1, lib, retain: true, release: true),
          ),
        ),
      ), lib);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  int call(NSObject arg0, NSObject arg1) => pointer.ref.invoke
      .cast<
        ffi.NativeFunction<
          ffi.Int32 Function(
            ffi.Pointer<objc.ObjCBlock> block,
            ffi.Pointer<objc.ObjCObject> arg0,
            ffi.Pointer<objc.ObjCObject> arg1,
          )
        >
      >()
      .asFunction<
        int Function(
          ffi.Pointer<objc.ObjCBlock>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCObject>,
        )
      >()(pointer, arg0.pointer, arg1.pointer);
}

abstract class NSComparisonResult {
  static const int NSOrderedAscending = -1;
  static const int NSOrderedSame = 0;
  static const int NSOrderedDescending = 1;
}

abstract class NSSortOptions {
  static const int NSSortConcurrent = 1;
  static const int NSSortStable = 16;
}

abstract class NSBinarySearchingOptions {
  static const int NSBinarySearchingFirstEqual = 256;
  static const int NSBinarySearchingLastEqual = 512;
  static const int NSBinarySearchingInsertionIndex = 1024;
}

abstract class NSOrderedCollectionDifferenceCalculationOptions {
  static const int NSOrderedCollectionDifferenceCalculationOmitInsertedObjects =
      1;
  static const int NSOrderedCollectionDifferenceCalculationOmitRemovedObjects =
      2;
  static const int NSOrderedCollectionDifferenceCalculationInferMoves = 4;
}

bool _ObjCBlock_bool_objcObjCObject_objcObjCObject_fnPtrTrampoline(
  ffi.Pointer<objc.ObjCBlock> block,
  ffi.Pointer<objc.ObjCObject> arg0,
  ffi.Pointer<objc.ObjCObject> arg1,
) => block.ref.target
    .cast<
      ffi.NativeFunction<
        ffi.Bool Function(
          ffi.Pointer<objc.ObjCObject> arg0,
          ffi.Pointer<objc.ObjCObject> arg1,
        )
      >
    >()
    .asFunction<
      bool Function(ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)
    >()(arg0, arg1);
final _ObjCBlock_bool_objcObjCObject_objcObjCObject_closureRegistry =
    <
      int,
      bool Function(ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)
    >{};
int _ObjCBlock_bool_objcObjCObject_objcObjCObject_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void>
_ObjCBlock_bool_objcObjCObject_objcObjCObject_registerClosure(
  bool Function(ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>) fn,
) {
  final id =
      ++_ObjCBlock_bool_objcObjCObject_objcObjCObject_closureRegistryIndex;
  _ObjCBlock_bool_objcObjCObject_objcObjCObject_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

bool _ObjCBlock_bool_objcObjCObject_objcObjCObject_closureTrampoline(
  ffi.Pointer<objc.ObjCBlock> block,
  ffi.Pointer<objc.ObjCObject> arg0,
  ffi.Pointer<objc.ObjCObject> arg1,
) => _ObjCBlock_bool_objcObjCObject_objcObjCObject_closureRegistry[block
    .ref
    .target
    .address]!(arg0, arg1);

class ObjCBlock_bool_objcObjCObject_objcObjCObject extends objc.ObjCBlockBase {
  ObjCBlock_bool_objcObjCObject_objcObjCObject._(
    ffi.Pointer<objc.ObjCBlock> pointer,
    this._lib, {
    bool retain = false,
    bool release = true,
  }) : super(pointer, retain: retain, release: release);

  AVFAudio _lib;

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_bool_objcObjCObject_objcObjCObject castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCBlock> pointer, {
    bool retain = false,
    bool release = false,
  }) {
    return ObjCBlock_bool_objcObjCObject_objcObjCObject._(
      pointer,
      lib,
      retain: retain,
      release: release,
    );
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_bool_objcObjCObject_objcObjCObject.fromFunctionPointer(
    AVFAudio lib,
    ffi.Pointer<
      ffi.NativeFunction<
        ffi.Bool Function(
          ffi.Pointer<objc.ObjCObject> arg0,
          ffi.Pointer<objc.ObjCObject> arg1,
        )
      >
    > ptr,
  ) : this._(objc.newBlock(
        _cFuncTrampoline ??=
            ffi.Pointer.fromFunction<
              ffi.Bool Function(
                ffi.Pointer<objc.ObjCBlock>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
              )
            >(
              _ObjCBlock_bool_objcObjCObject_objcObjCObject_fnPtrTrampoline,
              false,
            ).cast(),
        ptr.cast(),
      ), lib);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_bool_objcObjCObject_objcObjCObject.fromFunction(
    AVFAudio lib,
    bool Function(NSObject, NSObject) fn,
  ) : this._(objc.newBlock(
        _dartFuncTrampoline ??=
            ffi.Pointer.fromFunction<
              ffi.Bool Function(
                ffi.Pointer<objc.ObjCBlock>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
              )
            >(
              _ObjCBlock_bool_objcObjCObject_objcObjCObject_closureTrampoline,
              false,
            ).cast(),
        _ObjCBlock_bool_objcObjCObject_objcObjCObject_registerClosure((
          ffi.Pointer<objc.ObjCObject> arg0,
          ffi.Pointer<objc.ObjCObject> arg1,
        ) => fn(
          NSObject._(arg0, lib, retain: true, release: true),
          NSObject._(arg1, lib, retain: true, release: true),
        )),
      ), lib);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  bool call(NSObject arg0, NSObject arg1) => pointer.ref.invoke
      .cast<
        ffi.NativeFunction<
          ffi.Bool Function(
            ffi.Pointer<objc.ObjCBlock> block,
            ffi.Pointer<objc.ObjCObject> arg0,
            ffi.Pointer<objc.ObjCObject> arg1,
          )
        >
      >()
      .asFunction<
        bool Function(
          ffi.Pointer<objc.ObjCBlock>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCObject>,
        )
      >()(pointer, arg0.pointer, arg1.pointer);
}

abstract class NSKeyValueObservingOptions {
  static const int NSKeyValueObservingOptionNew = 1;
  static const int NSKeyValueObservingOptionOld = 2;
  static const int NSKeyValueObservingOptionInitial = 4;
  static const int NSKeyValueObservingOptionPrior = 8;
}

class NSPredicate extends NSObject {
  NSPredicate._(
    ffi.Pointer<objc.ObjCObject> pointer,
    AVFAudio lib, {
    bool retain = false,
    bool release = false,
  }) : super._(pointer, lib, retain: retain, release: release);

  /// Returns a [NSPredicate] that points to the same underlying object as [other].
  static NSPredicate castFrom<T extends objc.ObjCObjectBase>(
    AVFAudio lib,
    T other,
  ) {
    return NSPredicate._(other.pointer, lib, retain: true, release: true);
  }

  /// Returns a [NSPredicate] that wraps the given raw object pointer.
  static NSPredicate castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCObject> other, {
    bool retain = false,
    bool release = false,
  }) {
    return NSPredicate._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSPredicate].
  static bool isInstance(AVFAudio lib, objc.ObjCObjectBase obj) {
    return lib._objc_msgSend_0(
      obj.pointer,
      lib._sel_isKindOfClass_1,
      lib._class_NSPredicate1,
    );
  }

  static NSPredicate predicateWithFormat_argumentArray_(
    AVFAudio _lib,
    NSString predicateFormat,
    NSArray? arguments,
  ) {
    final _ret = _lib._objc_msgSend_142(
      _lib._class_NSPredicate1,
      _lib._sel_predicateWithFormat_argumentArray_1,
      predicateFormat.pointer,
      arguments?.pointer ?? ffi.nullptr,
    );
    return NSPredicate._(_ret, _lib, retain: true, release: true);
  }

  static NSPredicate predicateWithFormat_(
    AVFAudio _lib,
    NSString predicateFormat,
  ) {
    final _ret = _lib._objc_msgSend_143(
      _lib._class_NSPredicate1,
      _lib._sel_predicateWithFormat_1,
      predicateFormat.pointer,
    );
    return NSPredicate._(_ret, _lib, retain: true, release: true);
  }

  static NSPredicate predicateWithFormat_arguments_(
    AVFAudio _lib,
    NSString predicateFormat,
    ffi.Pointer<__va_list_tag> argList,
  ) {
    final _ret = _lib._objc_msgSend_144(
      _lib._class_NSPredicate1,
      _lib._sel_predicateWithFormat_arguments_1,
      predicateFormat.pointer,
      argList,
    );
    return NSPredicate._(_ret, _lib, retain: true, release: true);
  }

  static NSPredicate? predicateFromMetadataQueryString_(
    AVFAudio _lib,
    NSString queryString,
  ) {
    final _ret = _lib._objc_msgSend_145(
      _lib._class_NSPredicate1,
      _lib._sel_predicateFromMetadataQueryString_1,
      queryString.pointer,
    );
    return _ret.address == 0
        ? null
        : NSPredicate._(_ret, _lib, retain: true, release: true);
  }

  static NSPredicate predicateWithValue_(AVFAudio _lib, bool value) {
    final _ret = _lib._objc_msgSend_146(
      _lib._class_NSPredicate1,
      _lib._sel_predicateWithValue_1,
      value,
    );
    return NSPredicate._(_ret, _lib, retain: true, release: true);
  }

  static NSPredicate predicateWithBlock_(
    AVFAudio _lib,
    ObjCBlock_bool_objcObjCObject_NSDictionary block,
  ) {
    final _ret = _lib._objc_msgSend_216(
      _lib._class_NSPredicate1,
      _lib._sel_predicateWithBlock_1,
      block.pointer,
    );
    return NSPredicate._(_ret, _lib, retain: true, release: true);
  }

  NSString get predicateFormat {
    final _ret = _lib._objc_msgSend_21(
      this.pointer,
      _lib._sel_predicateFormat1,
    );
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSPredicate predicateWithSubstitutionVariables_(NSDictionary variables) {
    final _ret = _lib._objc_msgSend_159(
      this.pointer,
      _lib._sel_predicateWithSubstitutionVariables_1,
      variables.pointer,
    );
    return NSPredicate._(_ret, _lib, retain: true, release: true);
  }

  bool evaluateWithObject_(NSObject? object) {
    return _lib._objc_msgSend_217(
      this.pointer,
      _lib._sel_evaluateWithObject_1,
      object?.pointer ?? ffi.nullptr,
    );
  }

  bool evaluateWithObject_substitutionVariables_(
    NSObject? object,
    NSDictionary? bindings,
  ) {
    return _lib._objc_msgSend_218(
      this.pointer,
      _lib._sel_evaluateWithObject_substitutionVariables_1,
      object?.pointer ?? ffi.nullptr,
      bindings?.pointer ?? ffi.nullptr,
    );
  }

  void allowEvaluation() {
    _lib._objc_msgSend_1(this.pointer, _lib._sel_allowEvaluation1);
  }

  @override
  NSPredicate init() {
    final _ret = _lib._objc_msgSend_2(this.pointer, _lib._sel_init1);
    return NSPredicate._(_ret, _lib, retain: true, release: true);
  }

  static NSPredicate new1(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSPredicate1, _lib._sel_new1);
    return NSPredicate._(_ret, _lib, retain: false, release: true);
  }

  static NSPredicate allocWithZone_(AVFAudio _lib, ffi.Pointer<_NSZone> zone) {
    final _ret = _lib._objc_msgSend_3(
      _lib._class_NSPredicate1,
      _lib._sel_allocWithZone_1,
      zone,
    );
    return NSPredicate._(_ret, _lib, retain: false, release: true);
  }

  static NSPredicate alloc(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSPredicate1,
      _lib._sel_alloc1,
    );
    return NSPredicate._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
    AVFAudio _lib,
    NSObject aTarget,
    ffi.Pointer<objc.ObjCSelector> aSelector,
    NSObject? anArgument,
  ) {
    _lib._objc_msgSend_14(
      _lib._class_NSPredicate1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
      aTarget.pointer,
      aSelector,
      anArgument?.pointer ?? ffi.nullptr,
    );
  }

  static void cancelPreviousPerformRequestsWithTarget_(
    AVFAudio _lib,
    NSObject aTarget,
  ) {
    _lib._objc_msgSend_15(
      _lib._class_NSPredicate1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_1,
      aTarget.pointer,
    );
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSPredicate1,
      _lib._sel_accessInstanceVariablesDirectly1,
    );
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSPredicate1,
      _lib._sel_useStoredAccessor1,
    );
  }

  static NSSet keyPathsForValuesAffectingValueForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    final _ret = _lib._objc_msgSend_63(
      _lib._class_NSPredicate1,
      _lib._sel_keyPathsForValuesAffectingValueForKey_1,
      key.pointer,
    );
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    return _lib._objc_msgSend_64(
      _lib._class_NSPredicate1,
      _lib._sel_automaticallyNotifiesObserversForKey_1,
      key.pointer,
    );
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
    AVFAudio _lib,
    NSArray keys,
    NSString dependentKey,
  ) {
    _lib._objc_msgSend_88(
      _lib._class_NSPredicate1,
      _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
      keys.pointer,
      dependentKey.pointer,
    );
  }

  static NSArray classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_85(
      _lib._class_NSPredicate1,
      _lib._sel_classFallbacksForKeyedArchiver1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSPredicate1,
      _lib._sel_classForKeyedUnarchiver1,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

final class __va_list_tag extends ffi.Struct {
  @ffi.UnsignedInt()
  external int gp_offset;

  @ffi.UnsignedInt()
  external int fp_offset;

  external ffi.Pointer<ffi.Void> overflow_arg_area;

  external ffi.Pointer<ffi.Void> reg_save_area;
}

bool _ObjCBlock_bool_objcObjCObject_NSDictionary_fnPtrTrampoline(
  ffi.Pointer<objc.ObjCBlock> block,
  ffi.Pointer<objc.ObjCObject> arg0,
  ffi.Pointer<objc.ObjCObject> arg1,
) => block.ref.target
    .cast<
      ffi.NativeFunction<
        ffi.Bool Function(
          ffi.Pointer<objc.ObjCObject> arg0,
          ffi.Pointer<objc.ObjCObject> arg1,
        )
      >
    >()
    .asFunction<
      bool Function(ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)
    >()(arg0, arg1);
final _ObjCBlock_bool_objcObjCObject_NSDictionary_closureRegistry =
    <
      int,
      bool Function(ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)
    >{};
int _ObjCBlock_bool_objcObjCObject_NSDictionary_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void>
_ObjCBlock_bool_objcObjCObject_NSDictionary_registerClosure(
  bool Function(ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>) fn,
) {
  final id = ++_ObjCBlock_bool_objcObjCObject_NSDictionary_closureRegistryIndex;
  _ObjCBlock_bool_objcObjCObject_NSDictionary_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

bool _ObjCBlock_bool_objcObjCObject_NSDictionary_closureTrampoline(
  ffi.Pointer<objc.ObjCBlock> block,
  ffi.Pointer<objc.ObjCObject> arg0,
  ffi.Pointer<objc.ObjCObject> arg1,
) => _ObjCBlock_bool_objcObjCObject_NSDictionary_closureRegistry[block
    .ref
    .target
    .address]!(arg0, arg1);

class ObjCBlock_bool_objcObjCObject_NSDictionary extends objc.ObjCBlockBase {
  ObjCBlock_bool_objcObjCObject_NSDictionary._(
    ffi.Pointer<objc.ObjCBlock> pointer,
    this._lib, {
    bool retain = false,
    bool release = true,
  }) : super(pointer, retain: retain, release: release);

  AVFAudio _lib;

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_bool_objcObjCObject_NSDictionary castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCBlock> pointer, {
    bool retain = false,
    bool release = false,
  }) {
    return ObjCBlock_bool_objcObjCObject_NSDictionary._(
      pointer,
      lib,
      retain: retain,
      release: release,
    );
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_bool_objcObjCObject_NSDictionary.fromFunctionPointer(
    AVFAudio lib,
    ffi.Pointer<
      ffi.NativeFunction<
        ffi.Bool Function(
          ffi.Pointer<objc.ObjCObject> arg0,
          ffi.Pointer<objc.ObjCObject> arg1,
        )
      >
    > ptr,
  ) : this._(objc.newBlock(
        _cFuncTrampoline ??=
            ffi.Pointer.fromFunction<
              ffi.Bool Function(
                ffi.Pointer<objc.ObjCBlock>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
              )
            >(
              _ObjCBlock_bool_objcObjCObject_NSDictionary_fnPtrTrampoline,
              false,
            ).cast(),
        ptr.cast(),
      ), lib);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_bool_objcObjCObject_NSDictionary.fromFunction(
    AVFAudio lib,
    bool Function(NSObject?, NSDictionary?) fn,
  ) : this._(objc.newBlock(
        _dartFuncTrampoline ??=
            ffi.Pointer.fromFunction<
              ffi.Bool Function(
                ffi.Pointer<objc.ObjCBlock>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
              )
            >(
              _ObjCBlock_bool_objcObjCObject_NSDictionary_closureTrampoline,
              false,
            ).cast(),
        _ObjCBlock_bool_objcObjCObject_NSDictionary_registerClosure((
          ffi.Pointer<objc.ObjCObject> arg0,
          ffi.Pointer<objc.ObjCObject> arg1,
        ) => fn(
          arg0.address == 0
              ? null
              : NSObject._(arg0, lib, retain: true, release: true),
          arg1.address == 0
              ? null
              : NSDictionary._(arg1, lib, retain: true, release: true),
        )),
      ), lib);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  bool call(NSObject? arg0, NSDictionary? arg1) => pointer.ref.invoke
      .cast<
        ffi.NativeFunction<
          ffi.Bool Function(
            ffi.Pointer<objc.ObjCBlock> block,
            ffi.Pointer<objc.ObjCObject> arg0,
            ffi.Pointer<objc.ObjCObject> arg1,
          )
        >
      >()
      .asFunction<
        bool Function(
          ffi.Pointer<objc.ObjCBlock>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCObject>,
        )
      >()(pointer, arg0?.pointer ?? ffi.nullptr, arg1?.pointer ?? ffi.nullptr);
}

class NSDictionary extends NSObject {
  NSDictionary._(
    ffi.Pointer<objc.ObjCObject> pointer,
    AVFAudio lib, {
    bool retain = false,
    bool release = false,
  }) : super._(pointer, lib, retain: retain, release: release);

  /// Returns a [NSDictionary] that points to the same underlying object as [other].
  static NSDictionary castFrom<T extends objc.ObjCObjectBase>(
    AVFAudio lib,
    T other,
  ) {
    return NSDictionary._(other.pointer, lib, retain: true, release: true);
  }

  /// Returns a [NSDictionary] that wraps the given raw object pointer.
  static NSDictionary castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCObject> other, {
    bool retain = false,
    bool release = false,
  }) {
    return NSDictionary._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSDictionary].
  static bool isInstance(AVFAudio lib, objc.ObjCObjectBase obj) {
    return lib._objc_msgSend_0(
      obj.pointer,
      lib._sel_isKindOfClass_1,
      lib._class_NSDictionary1,
    );
  }

  int get count {
    return _lib._objc_msgSend_10(this.pointer, _lib._sel_count1);
  }

  NSObject? objectForKey_(NSObject aKey) {
    final _ret = _lib._objc_msgSend_16(
      this.pointer,
      _lib._sel_objectForKey_1,
      aKey.pointer,
    );
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSEnumerator keyEnumerator() {
    final _ret = _lib._objc_msgSend_77(this.pointer, _lib._sel_keyEnumerator1);
    return NSEnumerator._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSDictionary init() {
    final _ret = _lib._objc_msgSend_2(this.pointer, _lib._sel_init1);
    return NSDictionary._(_ret, _lib, retain: true, release: true);
  }

  NSDictionary initWithObjects_forKeys_count_(
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> objects,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> keys,
    int cnt,
  ) {
    final _ret = _lib._objc_msgSend_147(
      this.pointer,
      _lib._sel_initWithObjects_forKeys_count_1,
      objects,
      keys,
      cnt,
    );
    return NSDictionary._(_ret, _lib, retain: true, release: true);
  }

  NSDictionary? initWithCoder_(NSCoder coder) {
    final _ret = _lib._objc_msgSend_47(
      this.pointer,
      _lib._sel_initWithCoder_1,
      coder.pointer,
    );
    return _ret.address == 0
        ? null
        : NSDictionary._(_ret, _lib, retain: true, release: true);
  }

  NSArray get allKeys {
    final _ret = _lib._objc_msgSend_85(this.pointer, _lib._sel_allKeys1);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSArray allKeysForObject_(NSObject anObject) {
    final _ret = _lib._objc_msgSend_67(
      this.pointer,
      _lib._sel_allKeysForObject_1,
      anObject.pointer,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSArray get allValues {
    final _ret = _lib._objc_msgSend_85(this.pointer, _lib._sel_allValues1);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSString get description {
    final _ret = _lib._objc_msgSend_21(this.pointer, _lib._sel_description1);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString get descriptionInStringsFileFormat {
    final _ret = _lib._objc_msgSend_21(
      this.pointer,
      _lib._sel_descriptionInStringsFileFormat1,
    );
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString descriptionWithLocale_(NSObject? locale) {
    final _ret = _lib._objc_msgSend_70(
      this.pointer,
      _lib._sel_descriptionWithLocale_1,
      locale?.pointer ?? ffi.nullptr,
    );
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString descriptionWithLocale_indent_(NSObject? locale, int level) {
    final _ret = _lib._objc_msgSend_71(
      this.pointer,
      _lib._sel_descriptionWithLocale_indent_1,
      locale?.pointer ?? ffi.nullptr,
      level,
    );
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  bool isEqualToDictionary_(NSDictionary otherDictionary) {
    return _lib._objc_msgSend_148(
      this.pointer,
      _lib._sel_isEqualToDictionary_1,
      otherDictionary.pointer,
    );
  }

  NSEnumerator objectEnumerator() {
    final _ret = _lib._objc_msgSend_77(
      this.pointer,
      _lib._sel_objectEnumerator1,
    );
    return NSEnumerator._(_ret, _lib, retain: true, release: true);
  }

  NSArray objectsForKeys_notFoundMarker_(NSArray keys, NSObject marker) {
    final _ret = _lib._objc_msgSend_149(
      this.pointer,
      _lib._sel_objectsForKeys_notFoundMarker_1,
      keys.pointer,
      marker.pointer,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  bool writeToURL_error_(
    NSURL url,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    return _lib._objc_msgSend_89(
      this.pointer,
      _lib._sel_writeToURL_error_1,
      url.pointer,
      error,
    );
  }

  NSArray keysSortedByValueUsingSelector_(
    ffi.Pointer<objc.ObjCSelector> comparator,
  ) {
    final _ret = _lib._objc_msgSend_80(
      this.pointer,
      _lib._sel_keysSortedByValueUsingSelector_1,
      comparator,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  void getObjects_andKeys_count_(
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> objects,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> keys,
    int count,
  ) {
    _lib._objc_msgSend_150(
      this.pointer,
      _lib._sel_getObjects_andKeys_count_1,
      objects,
      keys,
      count,
    );
  }

  NSObject? objectForKeyedSubscript_(NSObject key) {
    final _ret = _lib._objc_msgSend_16(
      this.pointer,
      _lib._sel_objectForKeyedSubscript_1,
      key.pointer,
    );
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  void enumerateKeysAndObjectsUsingBlock_(
    ObjCBlock_ffiVoid_objcObjCObject_objcObjCObject_bool block,
  ) {
    _lib._objc_msgSend_151(
      this.pointer,
      _lib._sel_enumerateKeysAndObjectsUsingBlock_1,
      block.pointer,
    );
  }

  void enumerateKeysAndObjectsWithOptions_usingBlock_(
    int opts,
    ObjCBlock_ffiVoid_objcObjCObject_objcObjCObject_bool block,
  ) {
    _lib._objc_msgSend_152(
      this.pointer,
      _lib._sel_enumerateKeysAndObjectsWithOptions_usingBlock_1,
      opts,
      block.pointer,
    );
  }

  NSArray keysSortedByValueUsingComparator_(
    ObjCBlock_NSComparisonResult_objcObjCObject_objcObjCObject cmptr,
  ) {
    final _ret = _lib._objc_msgSend_121(
      this.pointer,
      _lib._sel_keysSortedByValueUsingComparator_1,
      cmptr.pointer,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSArray keysSortedByValueWithOptions_usingComparator_(
    int opts,
    ObjCBlock_NSComparisonResult_objcObjCObject_objcObjCObject cmptr,
  ) {
    final _ret = _lib._objc_msgSend_122(
      this.pointer,
      _lib._sel_keysSortedByValueWithOptions_usingComparator_1,
      opts,
      cmptr.pointer,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSObject keysOfEntriesPassingTest_(
    ObjCBlock_bool_objcObjCObject_objcObjCObject_bool predicate,
  ) {
    final _ret = _lib._objc_msgSend_153(
      this.pointer,
      _lib._sel_keysOfEntriesPassingTest_1,
      predicate.pointer,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject keysOfEntriesWithOptions_passingTest_(
    int opts,
    ObjCBlock_bool_objcObjCObject_objcObjCObject_bool predicate,
  ) {
    final _ret = _lib._objc_msgSend_154(
      this.pointer,
      _lib._sel_keysOfEntriesWithOptions_passingTest_1,
      opts,
      predicate.pointer,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  void getObjects_andKeys_(
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> objects,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> keys,
  ) {
    _lib._objc_msgSend_155(
      this.pointer,
      _lib._sel_getObjects_andKeys_1,
      objects,
      keys,
    );
  }

  static NSDictionary? dictionaryWithContentsOfFile_(
    AVFAudio _lib,
    NSString path,
  ) {
    final _ret = _lib._objc_msgSend_156(
      _lib._class_NSDictionary1,
      _lib._sel_dictionaryWithContentsOfFile_1,
      path.pointer,
    );
    return _ret.address == 0
        ? null
        : NSDictionary._(_ret, _lib, retain: true, release: true);
  }

  static NSDictionary? dictionaryWithContentsOfURL_(AVFAudio _lib, NSURL url) {
    final _ret = _lib._objc_msgSend_157(
      _lib._class_NSDictionary1,
      _lib._sel_dictionaryWithContentsOfURL_1,
      url.pointer,
    );
    return _ret.address == 0
        ? null
        : NSDictionary._(_ret, _lib, retain: true, release: true);
  }

  NSDictionary? initWithContentsOfFile_(NSString path) {
    final _ret = _lib._objc_msgSend_156(
      this.pointer,
      _lib._sel_initWithContentsOfFile_1,
      path.pointer,
    );
    return _ret.address == 0
        ? null
        : NSDictionary._(_ret, _lib, retain: true, release: true);
  }

  NSDictionary? initWithContentsOfURL_(NSURL url) {
    final _ret = _lib._objc_msgSend_157(
      this.pointer,
      _lib._sel_initWithContentsOfURL_1,
      url.pointer,
    );
    return _ret.address == 0
        ? null
        : NSDictionary._(_ret, _lib, retain: true, release: true);
  }

  bool writeToFile_atomically_(NSString path, bool useAuxiliaryFile) {
    return _lib._objc_msgSend_26(
      this.pointer,
      _lib._sel_writeToFile_atomically_1,
      path.pointer,
      useAuxiliaryFile,
    );
  }

  bool writeToURL_atomically_(NSURL url, bool atomically) {
    return _lib._objc_msgSend_134(
      this.pointer,
      _lib._sel_writeToURL_atomically_1,
      url.pointer,
      atomically,
    );
  }

  static NSDictionary dictionary(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSDictionary1,
      _lib._sel_dictionary1,
    );
    return NSDictionary._(_ret, _lib, retain: true, release: true);
  }

  static NSDictionary dictionaryWithObject_forKey_(
    AVFAudio _lib,
    NSObject object,
    NSObject key,
  ) {
    final _ret = _lib._objc_msgSend_158(
      _lib._class_NSDictionary1,
      _lib._sel_dictionaryWithObject_forKey_1,
      object.pointer,
      key.pointer,
    );
    return NSDictionary._(_ret, _lib, retain: true, release: true);
  }

  static NSDictionary dictionaryWithObjects_forKeys_count_(
    AVFAudio _lib,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> objects,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> keys,
    int cnt,
  ) {
    final _ret = _lib._objc_msgSend_147(
      _lib._class_NSDictionary1,
      _lib._sel_dictionaryWithObjects_forKeys_count_1,
      objects,
      keys,
      cnt,
    );
    return NSDictionary._(_ret, _lib, retain: true, release: true);
  }

  static NSDictionary dictionaryWithObjectsAndKeys_(
    AVFAudio _lib,
    NSObject firstObject,
  ) {
    final _ret = _lib._objc_msgSend_124(
      _lib._class_NSDictionary1,
      _lib._sel_dictionaryWithObjectsAndKeys_1,
      firstObject.pointer,
    );
    return NSDictionary._(_ret, _lib, retain: true, release: true);
  }

  static NSDictionary dictionaryWithDictionary_(
    AVFAudio _lib,
    NSDictionary dict,
  ) {
    final _ret = _lib._objc_msgSend_159(
      _lib._class_NSDictionary1,
      _lib._sel_dictionaryWithDictionary_1,
      dict.pointer,
    );
    return NSDictionary._(_ret, _lib, retain: true, release: true);
  }

  static NSDictionary dictionaryWithObjects_forKeys_(
    AVFAudio _lib,
    NSArray objects,
    NSArray keys,
  ) {
    final _ret = _lib._objc_msgSend_160(
      _lib._class_NSDictionary1,
      _lib._sel_dictionaryWithObjects_forKeys_1,
      objects.pointer,
      keys.pointer,
    );
    return NSDictionary._(_ret, _lib, retain: true, release: true);
  }

  NSDictionary initWithObjectsAndKeys_(NSObject firstObject) {
    final _ret = _lib._objc_msgSend_124(
      this.pointer,
      _lib._sel_initWithObjectsAndKeys_1,
      firstObject.pointer,
    );
    return NSDictionary._(_ret, _lib, retain: true, release: true);
  }

  NSDictionary initWithDictionary_(NSDictionary otherDictionary) {
    final _ret = _lib._objc_msgSend_159(
      this.pointer,
      _lib._sel_initWithDictionary_1,
      otherDictionary.pointer,
    );
    return NSDictionary._(_ret, _lib, retain: true, release: true);
  }

  NSDictionary initWithDictionary_copyItems_(
    NSDictionary otherDictionary,
    bool flag,
  ) {
    final _ret = _lib._objc_msgSend_161(
      this.pointer,
      _lib._sel_initWithDictionary_copyItems_1,
      otherDictionary.pointer,
      flag,
    );
    return NSDictionary._(_ret, _lib, retain: false, release: true);
  }

  NSDictionary initWithObjects_forKeys_(NSArray objects, NSArray keys) {
    final _ret = _lib._objc_msgSend_160(
      this.pointer,
      _lib._sel_initWithObjects_forKeys_1,
      objects.pointer,
      keys.pointer,
    );
    return NSDictionary._(_ret, _lib, retain: true, release: true);
  }

  NSDictionary? initWithContentsOfURL_error_(
    NSURL url,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    final _ret = _lib._objc_msgSend_162(
      this.pointer,
      _lib._sel_initWithContentsOfURL_error_1,
      url.pointer,
      error,
    );
    return _ret.address == 0
        ? null
        : NSDictionary._(_ret, _lib, retain: true, release: true);
  }

  static NSDictionary? dictionaryWithContentsOfURL_error_(
    AVFAudio _lib,
    NSURL url,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    final _ret = _lib._objc_msgSend_162(
      _lib._class_NSDictionary1,
      _lib._sel_dictionaryWithContentsOfURL_error_1,
      url.pointer,
      error,
    );
    return _ret.address == 0
        ? null
        : NSDictionary._(_ret, _lib, retain: true, release: true);
  }

  static NSObject sharedKeySetForKeys_(AVFAudio _lib, NSArray keys) {
    final _ret = _lib._objc_msgSend_125(
      _lib._class_NSDictionary1,
      _lib._sel_sharedKeySetForKeys_1,
      keys.pointer,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  int countByEnumeratingWithState_objects_count_(
    ffi.Pointer<NSFastEnumerationState> state,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> buffer,
    int len,
  ) {
    return _lib._objc_msgSend_163(
      this.pointer,
      _lib._sel_countByEnumeratingWithState_objects_count_1,
      state,
      buffer,
      len,
    );
  }

  int fileSize() {
    return _lib._objc_msgSend_164(this.pointer, _lib._sel_fileSize1);
  }

  NSDate? fileModificationDate() {
    final _ret = _lib._objc_msgSend_183(
      this.pointer,
      _lib._sel_fileModificationDate1,
    );
    return _ret.address == 0
        ? null
        : NSDate._(_ret, _lib, retain: true, release: true);
  }

  NSString? fileType() {
    final _ret = _lib._objc_msgSend_44(this.pointer, _lib._sel_fileType1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  int filePosixPermissions() {
    return _lib._objc_msgSend_10(this.pointer, _lib._sel_filePosixPermissions1);
  }

  NSString? fileOwnerAccountName() {
    final _ret = _lib._objc_msgSend_44(
      this.pointer,
      _lib._sel_fileOwnerAccountName1,
    );
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString? fileGroupOwnerAccountName() {
    final _ret = _lib._objc_msgSend_44(
      this.pointer,
      _lib._sel_fileGroupOwnerAccountName1,
    );
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  int fileSystemNumber() {
    return _lib._objc_msgSend_83(this.pointer, _lib._sel_fileSystemNumber1);
  }

  int fileSystemFileNumber() {
    return _lib._objc_msgSend_10(this.pointer, _lib._sel_fileSystemFileNumber1);
  }

  bool fileExtensionHidden() {
    return _lib._objc_msgSend_12(this.pointer, _lib._sel_fileExtensionHidden1);
  }

  int fileHFSCreatorCode() {
    return _lib._objc_msgSend_214(this.pointer, _lib._sel_fileHFSCreatorCode1);
  }

  int fileHFSTypeCode() {
    return _lib._objc_msgSend_214(this.pointer, _lib._sel_fileHFSTypeCode1);
  }

  bool fileIsImmutable() {
    return _lib._objc_msgSend_12(this.pointer, _lib._sel_fileIsImmutable1);
  }

  bool fileIsAppendOnly() {
    return _lib._objc_msgSend_12(this.pointer, _lib._sel_fileIsAppendOnly1);
  }

  NSDate? fileCreationDate() {
    final _ret = _lib._objc_msgSend_183(
      this.pointer,
      _lib._sel_fileCreationDate1,
    );
    return _ret.address == 0
        ? null
        : NSDate._(_ret, _lib, retain: true, release: true);
  }

  NSNumber? fileOwnerAccountID() {
    final _ret = _lib._objc_msgSend_215(
      this.pointer,
      _lib._sel_fileOwnerAccountID1,
    );
    return _ret.address == 0
        ? null
        : NSNumber._(_ret, _lib, retain: true, release: true);
  }

  NSNumber? fileGroupOwnerAccountID() {
    final _ret = _lib._objc_msgSend_215(
      this.pointer,
      _lib._sel_fileGroupOwnerAccountID1,
    );
    return _ret.address == 0
        ? null
        : NSNumber._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSObject? valueForKey_(NSString key) {
    final _ret = _lib._objc_msgSend_38(
      this.pointer,
      _lib._sel_valueForKey_1,
      key.pointer,
    );
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSDictionary new1(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSDictionary1,
      _lib._sel_new1,
    );
    return NSDictionary._(_ret, _lib, retain: false, release: true);
  }

  static NSDictionary allocWithZone_(AVFAudio _lib, ffi.Pointer<_NSZone> zone) {
    final _ret = _lib._objc_msgSend_3(
      _lib._class_NSDictionary1,
      _lib._sel_allocWithZone_1,
      zone,
    );
    return NSDictionary._(_ret, _lib, retain: false, release: true);
  }

  static NSDictionary alloc(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSDictionary1,
      _lib._sel_alloc1,
    );
    return NSDictionary._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
    AVFAudio _lib,
    NSObject aTarget,
    ffi.Pointer<objc.ObjCSelector> aSelector,
    NSObject? anArgument,
  ) {
    _lib._objc_msgSend_14(
      _lib._class_NSDictionary1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
      aTarget.pointer,
      aSelector,
      anArgument?.pointer ?? ffi.nullptr,
    );
  }

  static void cancelPreviousPerformRequestsWithTarget_(
    AVFAudio _lib,
    NSObject aTarget,
  ) {
    _lib._objc_msgSend_15(
      _lib._class_NSDictionary1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_1,
      aTarget.pointer,
    );
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSDictionary1,
      _lib._sel_accessInstanceVariablesDirectly1,
    );
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSDictionary1,
      _lib._sel_useStoredAccessor1,
    );
  }

  static NSSet keyPathsForValuesAffectingValueForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    final _ret = _lib._objc_msgSend_63(
      _lib._class_NSDictionary1,
      _lib._sel_keyPathsForValuesAffectingValueForKey_1,
      key.pointer,
    );
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    return _lib._objc_msgSend_64(
      _lib._class_NSDictionary1,
      _lib._sel_automaticallyNotifiesObserversForKey_1,
      key.pointer,
    );
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
    AVFAudio _lib,
    NSArray keys,
    NSString dependentKey,
  ) {
    _lib._objc_msgSend_88(
      _lib._class_NSDictionary1,
      _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
      keys.pointer,
      dependentKey.pointer,
    );
  }

  static NSArray classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_85(
      _lib._class_NSDictionary1,
      _lib._sel_classFallbacksForKeyedArchiver1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSDictionary1,
      _lib._sel_classForKeyedUnarchiver1,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

void _ObjCBlock_ffiVoid_objcObjCObject_objcObjCObject_bool_fnPtrTrampoline(
  ffi.Pointer<objc.ObjCBlock> block,
  ffi.Pointer<objc.ObjCObject> arg0,
  ffi.Pointer<objc.ObjCObject> arg1,
  ffi.Pointer<ffi.Bool> arg2,
) => block.ref.target
    .cast<
      ffi.NativeFunction<
        ffi.Void Function(
          ffi.Pointer<objc.ObjCObject> arg0,
          ffi.Pointer<objc.ObjCObject> arg1,
          ffi.Pointer<ffi.Bool> arg2,
        )
      >
    >()
    .asFunction<
      void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<ffi.Bool>,
      )
    >()(arg0, arg1, arg2);
final _ObjCBlock_ffiVoid_objcObjCObject_objcObjCObject_bool_closureRegistry =
    <
      int,
      void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<ffi.Bool>,
      )
    >{};
int _ObjCBlock_ffiVoid_objcObjCObject_objcObjCObject_bool_closureRegistryIndex =
    0;
ffi.Pointer<ffi.Void>
_ObjCBlock_ffiVoid_objcObjCObject_objcObjCObject_bool_registerClosure(
  void Function(
    ffi.Pointer<objc.ObjCObject>,
    ffi.Pointer<objc.ObjCObject>,
    ffi.Pointer<ffi.Bool>,
  ) fn,
) {
  final id =
      ++_ObjCBlock_ffiVoid_objcObjCObject_objcObjCObject_bool_closureRegistryIndex;
  _ObjCBlock_ffiVoid_objcObjCObject_objcObjCObject_bool_closureRegistry[id] =
      fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

void _ObjCBlock_ffiVoid_objcObjCObject_objcObjCObject_bool_closureTrampoline(
  ffi.Pointer<objc.ObjCBlock> block,
  ffi.Pointer<objc.ObjCObject> arg0,
  ffi.Pointer<objc.ObjCObject> arg1,
  ffi.Pointer<ffi.Bool> arg2,
) => _ObjCBlock_ffiVoid_objcObjCObject_objcObjCObject_bool_closureRegistry[block
    .ref
    .target
    .address]!(arg0, arg1, arg2);

class ObjCBlock_ffiVoid_objcObjCObject_objcObjCObject_bool
    extends objc.ObjCBlockBase {
  ObjCBlock_ffiVoid_objcObjCObject_objcObjCObject_bool._(
    ffi.Pointer<objc.ObjCBlock> pointer,
    this._lib, {
    bool retain = false,
    bool release = true,
  }) : super(pointer, retain: retain, release: release);

  AVFAudio _lib;

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_ffiVoid_objcObjCObject_objcObjCObject_bool castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCBlock> pointer, {
    bool retain = false,
    bool release = false,
  }) {
    return ObjCBlock_ffiVoid_objcObjCObject_objcObjCObject_bool._(
      pointer,
      lib,
      retain: retain,
      release: release,
    );
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_objcObjCObject_objcObjCObject_bool.fromFunctionPointer(
    AVFAudio lib,
    ffi.Pointer<
      ffi.NativeFunction<
        ffi.Void Function(
          ffi.Pointer<objc.ObjCObject> arg0,
          ffi.Pointer<objc.ObjCObject> arg1,
          ffi.Pointer<ffi.Bool> arg2,
        )
      >
    > ptr,
  ) : this._(objc.newBlock(
        _cFuncTrampoline ??=
            ffi.Pointer.fromFunction<
              ffi.Void Function(
                ffi.Pointer<objc.ObjCBlock>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<ffi.Bool>,
              )
            >(
              _ObjCBlock_ffiVoid_objcObjCObject_objcObjCObject_bool_fnPtrTrampoline,
            ).cast(),
        ptr.cast(),
      ), lib);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_objcObjCObject_objcObjCObject_bool.fromFunction(
    AVFAudio lib,
    void Function(NSObject, NSObject, ffi.Pointer<ffi.Bool>) fn,
  ) : this._(objc.newBlock(
        _dartFuncTrampoline ??=
            ffi.Pointer.fromFunction<
              ffi.Void Function(
                ffi.Pointer<objc.ObjCBlock>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<ffi.Bool>,
              )
            >(
              _ObjCBlock_ffiVoid_objcObjCObject_objcObjCObject_bool_closureTrampoline,
            ).cast(),
        _ObjCBlock_ffiVoid_objcObjCObject_objcObjCObject_bool_registerClosure((
          ffi.Pointer<objc.ObjCObject> arg0,
          ffi.Pointer<objc.ObjCObject> arg1,
          ffi.Pointer<ffi.Bool> arg2,
        ) => fn(
          NSObject._(arg0, lib, retain: true, release: true),
          NSObject._(arg1, lib, retain: true, release: true),
          arg2,
        )),
      ), lib);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_objcObjCObject_objcObjCObject_bool.listener(
    AVFAudio lib,
    void Function(NSObject, NSObject, ffi.Pointer<ffi.Bool>) fn,
  ) : this._(objc.newBlock(
        (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
              ffi.Void Function(
                ffi.Pointer<objc.ObjCBlock>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<ffi.Bool>,
              )
            >.listener(
              _ObjCBlock_ffiVoid_objcObjCObject_objcObjCObject_bool_closureTrampoline,
            )..keepIsolateAlive = false)
            .nativeFunction
            .cast(),
        _ObjCBlock_ffiVoid_objcObjCObject_objcObjCObject_bool_registerClosure((
          ffi.Pointer<objc.ObjCObject> arg0,
          ffi.Pointer<objc.ObjCObject> arg1,
          ffi.Pointer<ffi.Bool> arg2,
        ) => fn(
          NSObject._(arg0, lib, retain: true, release: true),
          NSObject._(arg1, lib, retain: true, release: true),
          arg2,
        )),
      ), lib);
  static ffi.NativeCallable<
    ffi.Void Function(
      ffi.Pointer<objc.ObjCBlock>,
      ffi.Pointer<objc.ObjCObject>,
      ffi.Pointer<objc.ObjCObject>,
      ffi.Pointer<ffi.Bool>,
    )
  >? _dartFuncListenerTrampoline;

  void call(NSObject arg0, NSObject arg1, ffi.Pointer<ffi.Bool> arg2) => pointer
      .ref
      .invoke
      .cast<
        ffi.NativeFunction<
          ffi.Void Function(
            ffi.Pointer<objc.ObjCBlock> block,
            ffi.Pointer<objc.ObjCObject> arg0,
            ffi.Pointer<objc.ObjCObject> arg1,
            ffi.Pointer<ffi.Bool> arg2,
          )
        >
      >()
      .asFunction<
        void Function(
          ffi.Pointer<objc.ObjCBlock>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<ffi.Bool>,
        )
      >()(pointer, arg0.pointer, arg1.pointer, arg2);
}

bool _ObjCBlock_bool_objcObjCObject_objcObjCObject_bool_fnPtrTrampoline(
  ffi.Pointer<objc.ObjCBlock> block,
  ffi.Pointer<objc.ObjCObject> arg0,
  ffi.Pointer<objc.ObjCObject> arg1,
  ffi.Pointer<ffi.Bool> arg2,
) => block.ref.target
    .cast<
      ffi.NativeFunction<
        ffi.Bool Function(
          ffi.Pointer<objc.ObjCObject> arg0,
          ffi.Pointer<objc.ObjCObject> arg1,
          ffi.Pointer<ffi.Bool> arg2,
        )
      >
    >()
    .asFunction<
      bool Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<ffi.Bool>,
      )
    >()(arg0, arg1, arg2);
final _ObjCBlock_bool_objcObjCObject_objcObjCObject_bool_closureRegistry =
    <
      int,
      bool Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<ffi.Bool>,
      )
    >{};
int _ObjCBlock_bool_objcObjCObject_objcObjCObject_bool_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void>
_ObjCBlock_bool_objcObjCObject_objcObjCObject_bool_registerClosure(
  bool Function(
    ffi.Pointer<objc.ObjCObject>,
    ffi.Pointer<objc.ObjCObject>,
    ffi.Pointer<ffi.Bool>,
  ) fn,
) {
  final id =
      ++_ObjCBlock_bool_objcObjCObject_objcObjCObject_bool_closureRegistryIndex;
  _ObjCBlock_bool_objcObjCObject_objcObjCObject_bool_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

bool _ObjCBlock_bool_objcObjCObject_objcObjCObject_bool_closureTrampoline(
  ffi.Pointer<objc.ObjCBlock> block,
  ffi.Pointer<objc.ObjCObject> arg0,
  ffi.Pointer<objc.ObjCObject> arg1,
  ffi.Pointer<ffi.Bool> arg2,
) => _ObjCBlock_bool_objcObjCObject_objcObjCObject_bool_closureRegistry[block
    .ref
    .target
    .address]!(arg0, arg1, arg2);

class ObjCBlock_bool_objcObjCObject_objcObjCObject_bool
    extends objc.ObjCBlockBase {
  ObjCBlock_bool_objcObjCObject_objcObjCObject_bool._(
    ffi.Pointer<objc.ObjCBlock> pointer,
    this._lib, {
    bool retain = false,
    bool release = true,
  }) : super(pointer, retain: retain, release: release);

  AVFAudio _lib;

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_bool_objcObjCObject_objcObjCObject_bool castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCBlock> pointer, {
    bool retain = false,
    bool release = false,
  }) {
    return ObjCBlock_bool_objcObjCObject_objcObjCObject_bool._(
      pointer,
      lib,
      retain: retain,
      release: release,
    );
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_bool_objcObjCObject_objcObjCObject_bool.fromFunctionPointer(
    AVFAudio lib,
    ffi.Pointer<
      ffi.NativeFunction<
        ffi.Bool Function(
          ffi.Pointer<objc.ObjCObject> arg0,
          ffi.Pointer<objc.ObjCObject> arg1,
          ffi.Pointer<ffi.Bool> arg2,
        )
      >
    > ptr,
  ) : this._(objc.newBlock(
        _cFuncTrampoline ??=
            ffi.Pointer.fromFunction<
              ffi.Bool Function(
                ffi.Pointer<objc.ObjCBlock>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<ffi.Bool>,
              )
            >(
              _ObjCBlock_bool_objcObjCObject_objcObjCObject_bool_fnPtrTrampoline,
              false,
            ).cast(),
        ptr.cast(),
      ), lib);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_bool_objcObjCObject_objcObjCObject_bool.fromFunction(
    AVFAudio lib,
    bool Function(NSObject, NSObject, ffi.Pointer<ffi.Bool>) fn,
  ) : this._(objc.newBlock(
        _dartFuncTrampoline ??=
            ffi.Pointer.fromFunction<
              ffi.Bool Function(
                ffi.Pointer<objc.ObjCBlock>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<ffi.Bool>,
              )
            >(
              _ObjCBlock_bool_objcObjCObject_objcObjCObject_bool_closureTrampoline,
              false,
            ).cast(),
        _ObjCBlock_bool_objcObjCObject_objcObjCObject_bool_registerClosure((
          ffi.Pointer<objc.ObjCObject> arg0,
          ffi.Pointer<objc.ObjCObject> arg1,
          ffi.Pointer<ffi.Bool> arg2,
        ) => fn(
          NSObject._(arg0, lib, retain: true, release: true),
          NSObject._(arg1, lib, retain: true, release: true),
          arg2,
        )),
      ), lib);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  bool call(NSObject arg0, NSObject arg1, ffi.Pointer<ffi.Bool> arg2) => pointer
      .ref
      .invoke
      .cast<
        ffi.NativeFunction<
          ffi.Bool Function(
            ffi.Pointer<objc.ObjCBlock> block,
            ffi.Pointer<objc.ObjCObject> arg0,
            ffi.Pointer<objc.ObjCObject> arg1,
            ffi.Pointer<ffi.Bool> arg2,
          )
        >
      >()
      .asFunction<
        bool Function(
          ffi.Pointer<objc.ObjCBlock>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<ffi.Bool>,
        )
      >()(pointer, arg0.pointer, arg1.pointer, arg2);
}

final class NSFastEnumerationState extends ffi.Struct {
  @ffi.UnsignedLong()
  external int state;

  external ffi.Pointer<ffi.Pointer<objc.ObjCObject>> itemsPtr;

  external ffi.Pointer<ffi.UnsignedLong> mutationsPtr;

  @ffi.Array.multi([5])
  external ffi.Array<ffi.UnsignedLong> extra;
}

class NSDate extends NSObject {
  NSDate._(
    ffi.Pointer<objc.ObjCObject> pointer,
    AVFAudio lib, {
    bool retain = false,
    bool release = false,
  }) : super._(pointer, lib, retain: retain, release: release);

  /// Returns a [NSDate] that points to the same underlying object as [other].
  static NSDate castFrom<T extends objc.ObjCObjectBase>(AVFAudio lib, T other) {
    return NSDate._(other.pointer, lib, retain: true, release: true);
  }

  /// Returns a [NSDate] that wraps the given raw object pointer.
  static NSDate castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCObject> other, {
    bool retain = false,
    bool release = false,
  }) {
    return NSDate._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSDate].
  static bool isInstance(AVFAudio lib, objc.ObjCObjectBase obj) {
    return lib._objc_msgSend_0(
      obj.pointer,
      lib._sel_isKindOfClass_1,
      lib._class_NSDate1,
    );
  }

  double get timeIntervalSinceReferenceDate {
    return objc.useMsgSendVariants
        ? _lib._objc_msgSend_165_fpret(
          this.pointer,
          _lib._sel_timeIntervalSinceReferenceDate1,
        )
        : _lib._objc_msgSend_165(
          this.pointer,
          _lib._sel_timeIntervalSinceReferenceDate1,
        );
  }

  @override
  NSDate init() {
    final _ret = _lib._objc_msgSend_2(this.pointer, _lib._sel_init1);
    return NSDate._(_ret, _lib, retain: true, release: true);
  }

  NSDate initWithTimeIntervalSinceReferenceDate_(double ti) {
    final _ret = _lib._objc_msgSend_166(
      this.pointer,
      _lib._sel_initWithTimeIntervalSinceReferenceDate_1,
      ti,
    );
    return NSDate._(_ret, _lib, retain: true, release: true);
  }

  NSDate? initWithCoder_(NSCoder coder) {
    final _ret = _lib._objc_msgSend_47(
      this.pointer,
      _lib._sel_initWithCoder_1,
      coder.pointer,
    );
    return _ret.address == 0
        ? null
        : NSDate._(_ret, _lib, retain: true, release: true);
  }

  double timeIntervalSinceDate_(NSDate anotherDate) {
    return objc.useMsgSendVariants
        ? _lib._objc_msgSend_167_fpret(
          this.pointer,
          _lib._sel_timeIntervalSinceDate_1,
          anotherDate.pointer,
        )
        : _lib._objc_msgSend_167(
          this.pointer,
          _lib._sel_timeIntervalSinceDate_1,
          anotherDate.pointer,
        );
  }

  double get timeIntervalSinceNow {
    return objc.useMsgSendVariants
        ? _lib._objc_msgSend_165_fpret(
          this.pointer,
          _lib._sel_timeIntervalSinceNow1,
        )
        : _lib._objc_msgSend_165(this.pointer, _lib._sel_timeIntervalSinceNow1);
  }

  double get timeIntervalSince1970 {
    return objc.useMsgSendVariants
        ? _lib._objc_msgSend_165_fpret(
          this.pointer,
          _lib._sel_timeIntervalSince19701,
        )
        : _lib._objc_msgSend_165(
          this.pointer,
          _lib._sel_timeIntervalSince19701,
        );
  }

  NSObject addTimeInterval_(double seconds) {
    final _ret = _lib._objc_msgSend_166(
      this.pointer,
      _lib._sel_addTimeInterval_1,
      seconds,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSDate dateByAddingTimeInterval_(double ti) {
    final _ret = _lib._objc_msgSend_166(
      this.pointer,
      _lib._sel_dateByAddingTimeInterval_1,
      ti,
    );
    return NSDate._(_ret, _lib, retain: true, release: true);
  }

  NSDate earlierDate_(NSDate anotherDate) {
    final _ret = _lib._objc_msgSend_168(
      this.pointer,
      _lib._sel_earlierDate_1,
      anotherDate.pointer,
    );
    return NSDate._(_ret, _lib, retain: true, release: true);
  }

  NSDate laterDate_(NSDate anotherDate) {
    final _ret = _lib._objc_msgSend_168(
      this.pointer,
      _lib._sel_laterDate_1,
      anotherDate.pointer,
    );
    return NSDate._(_ret, _lib, retain: true, release: true);
  }

  int compare_(NSDate other) {
    return _lib._objc_msgSend_169(
      this.pointer,
      _lib._sel_compare_1,
      other.pointer,
    );
  }

  bool isEqualToDate_(NSDate otherDate) {
    return _lib._objc_msgSend_170(
      this.pointer,
      _lib._sel_isEqualToDate_1,
      otherDate.pointer,
    );
  }

  NSString get description {
    final _ret = _lib._objc_msgSend_21(this.pointer, _lib._sel_description1);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString descriptionWithLocale_(NSObject? locale) {
    final _ret = _lib._objc_msgSend_70(
      this.pointer,
      _lib._sel_descriptionWithLocale_1,
      locale?.pointer ?? ffi.nullptr,
    );
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  static NSDate date(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSDate1, _lib._sel_date1);
    return NSDate._(_ret, _lib, retain: true, release: true);
  }

  static NSDate dateWithTimeIntervalSinceNow_(AVFAudio _lib, double secs) {
    final _ret = _lib._objc_msgSend_166(
      _lib._class_NSDate1,
      _lib._sel_dateWithTimeIntervalSinceNow_1,
      secs,
    );
    return NSDate._(_ret, _lib, retain: true, release: true);
  }

  static NSDate dateWithTimeIntervalSinceReferenceDate_(
    AVFAudio _lib,
    double ti,
  ) {
    final _ret = _lib._objc_msgSend_166(
      _lib._class_NSDate1,
      _lib._sel_dateWithTimeIntervalSinceReferenceDate_1,
      ti,
    );
    return NSDate._(_ret, _lib, retain: true, release: true);
  }

  static NSDate dateWithTimeIntervalSince1970_(AVFAudio _lib, double secs) {
    final _ret = _lib._objc_msgSend_166(
      _lib._class_NSDate1,
      _lib._sel_dateWithTimeIntervalSince1970_1,
      secs,
    );
    return NSDate._(_ret, _lib, retain: true, release: true);
  }

  static NSDate dateWithTimeInterval_sinceDate_(
    AVFAudio _lib,
    double secsToBeAdded,
    NSDate date,
  ) {
    final _ret = _lib._objc_msgSend_171(
      _lib._class_NSDate1,
      _lib._sel_dateWithTimeInterval_sinceDate_1,
      secsToBeAdded,
      date.pointer,
    );
    return NSDate._(_ret, _lib, retain: true, release: true);
  }

  static NSDate getDistantFuture(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_172(
      _lib._class_NSDate1,
      _lib._sel_distantFuture1,
    );
    return NSDate._(_ret, _lib, retain: true, release: true);
  }

  static NSDate getDistantPast(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_172(
      _lib._class_NSDate1,
      _lib._sel_distantPast1,
    );
    return NSDate._(_ret, _lib, retain: true, release: true);
  }

  static NSDate getNow(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_172(_lib._class_NSDate1, _lib._sel_now1);
    return NSDate._(_ret, _lib, retain: true, release: true);
  }

  NSDate initWithTimeIntervalSinceNow_(double secs) {
    final _ret = _lib._objc_msgSend_166(
      this.pointer,
      _lib._sel_initWithTimeIntervalSinceNow_1,
      secs,
    );
    return NSDate._(_ret, _lib, retain: true, release: true);
  }

  NSDate initWithTimeIntervalSince1970_(double secs) {
    final _ret = _lib._objc_msgSend_166(
      this.pointer,
      _lib._sel_initWithTimeIntervalSince1970_1,
      secs,
    );
    return NSDate._(_ret, _lib, retain: true, release: true);
  }

  NSDate initWithTimeInterval_sinceDate_(double secsToBeAdded, NSDate date) {
    final _ret = _lib._objc_msgSend_171(
      this.pointer,
      _lib._sel_initWithTimeInterval_sinceDate_1,
      secsToBeAdded,
      date.pointer,
    );
    return NSDate._(_ret, _lib, retain: true, release: true);
  }

  static NSObject? dateWithNaturalLanguageString_locale_(
    AVFAudio _lib,
    NSString string,
    NSObject? locale,
  ) {
    final _ret = _lib._objc_msgSend_173(
      _lib._class_NSDate1,
      _lib._sel_dateWithNaturalLanguageString_locale_1,
      string.pointer,
      locale?.pointer ?? ffi.nullptr,
    );
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject? dateWithNaturalLanguageString_(
    AVFAudio _lib,
    NSString string,
  ) {
    final _ret = _lib._objc_msgSend_38(
      _lib._class_NSDate1,
      _lib._sel_dateWithNaturalLanguageString_1,
      string.pointer,
    );
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject dateWithString_(AVFAudio _lib, NSString aString) {
    final _ret = _lib._objc_msgSend_31(
      _lib._class_NSDate1,
      _lib._sel_dateWithString_1,
      aString.pointer,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSCalendarDate dateWithCalendarFormat_timeZone_(
    NSString? format,
    NSTimeZone? aTimeZone,
  ) {
    final _ret = _lib._objc_msgSend_212(
      this.pointer,
      _lib._sel_dateWithCalendarFormat_timeZone_1,
      format?.pointer ?? ffi.nullptr,
      aTimeZone?.pointer ?? ffi.nullptr,
    );
    return NSCalendarDate._(_ret, _lib, retain: true, release: true);
  }

  NSString? descriptionWithCalendarFormat_timeZone_locale_(
    NSString? format,
    NSTimeZone? aTimeZone,
    NSObject? locale,
  ) {
    final _ret = _lib._objc_msgSend_213(
      this.pointer,
      _lib._sel_descriptionWithCalendarFormat_timeZone_locale_1,
      format?.pointer ?? ffi.nullptr,
      aTimeZone?.pointer ?? ffi.nullptr,
      locale?.pointer ?? ffi.nullptr,
    );
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSObject? initWithString_(NSString description) {
    final _ret = _lib._objc_msgSend_38(
      this.pointer,
      _lib._sel_initWithString_1,
      description.pointer,
    );
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSDate new1(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSDate1, _lib._sel_new1);
    return NSDate._(_ret, _lib, retain: false, release: true);
  }

  static NSDate allocWithZone_(AVFAudio _lib, ffi.Pointer<_NSZone> zone) {
    final _ret = _lib._objc_msgSend_3(
      _lib._class_NSDate1,
      _lib._sel_allocWithZone_1,
      zone,
    );
    return NSDate._(_ret, _lib, retain: false, release: true);
  }

  static NSDate alloc(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSDate1, _lib._sel_alloc1);
    return NSDate._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
    AVFAudio _lib,
    NSObject aTarget,
    ffi.Pointer<objc.ObjCSelector> aSelector,
    NSObject? anArgument,
  ) {
    _lib._objc_msgSend_14(
      _lib._class_NSDate1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
      aTarget.pointer,
      aSelector,
      anArgument?.pointer ?? ffi.nullptr,
    );
  }

  static void cancelPreviousPerformRequestsWithTarget_(
    AVFAudio _lib,
    NSObject aTarget,
  ) {
    _lib._objc_msgSend_15(
      _lib._class_NSDate1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_1,
      aTarget.pointer,
    );
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSDate1,
      _lib._sel_accessInstanceVariablesDirectly1,
    );
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSDate1,
      _lib._sel_useStoredAccessor1,
    );
  }

  static NSSet keyPathsForValuesAffectingValueForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    final _ret = _lib._objc_msgSend_63(
      _lib._class_NSDate1,
      _lib._sel_keyPathsForValuesAffectingValueForKey_1,
      key.pointer,
    );
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    return _lib._objc_msgSend_64(
      _lib._class_NSDate1,
      _lib._sel_automaticallyNotifiesObserversForKey_1,
      key.pointer,
    );
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
    AVFAudio _lib,
    NSArray keys,
    NSString dependentKey,
  ) {
    _lib._objc_msgSend_88(
      _lib._class_NSDate1,
      _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
      keys.pointer,
      dependentKey.pointer,
    );
  }

  static NSArray classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_85(
      _lib._class_NSDate1,
      _lib._sel_classFallbacksForKeyedArchiver1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSDate1,
      _lib._sel_classForKeyedUnarchiver1,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

class NSCalendarDate extends NSDate {
  NSCalendarDate._(
    ffi.Pointer<objc.ObjCObject> pointer,
    AVFAudio lib, {
    bool retain = false,
    bool release = false,
  }) : super._(pointer, lib, retain: retain, release: release);

  /// Returns a [NSCalendarDate] that points to the same underlying object as [other].
  static NSCalendarDate castFrom<T extends objc.ObjCObjectBase>(
    AVFAudio lib,
    T other,
  ) {
    return NSCalendarDate._(other.pointer, lib, retain: true, release: true);
  }

  /// Returns a [NSCalendarDate] that wraps the given raw object pointer.
  static NSCalendarDate castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCObject> other, {
    bool retain = false,
    bool release = false,
  }) {
    return NSCalendarDate._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSCalendarDate].
  static bool isInstance(AVFAudio lib, objc.ObjCObjectBase obj) {
    return lib._objc_msgSend_0(
      obj.pointer,
      lib._sel_isKindOfClass_1,
      lib._class_NSCalendarDate1,
    );
  }

  static NSObject calendarDate(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSCalendarDate1,
      _lib._sel_calendarDate1,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject? dateWithString_calendarFormat_locale_(
    AVFAudio _lib,
    NSString description,
    NSString format,
    NSObject? locale,
  ) {
    final _ret = _lib._objc_msgSend_174(
      _lib._class_NSCalendarDate1,
      _lib._sel_dateWithString_calendarFormat_locale_1,
      description.pointer,
      format.pointer,
      locale?.pointer ?? ffi.nullptr,
    );
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject? dateWithString_calendarFormat_(
    AVFAudio _lib,
    NSString description,
    NSString format,
  ) {
    final _ret = _lib._objc_msgSend_175(
      _lib._class_NSCalendarDate1,
      _lib._sel_dateWithString_calendarFormat_1,
      description.pointer,
      format.pointer,
    );
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject dateWithYear_month_day_hour_minute_second_timeZone_(
    AVFAudio _lib,
    int year,
    int month,
    int day,
    int hour,
    int minute,
    int second,
    NSTimeZone? aTimeZone,
  ) {
    final _ret = _lib._objc_msgSend_206(
      _lib._class_NSCalendarDate1,
      _lib._sel_dateWithYear_month_day_hour_minute_second_timeZone_1,
      year,
      month,
      day,
      hour,
      minute,
      second,
      aTimeZone?.pointer ?? ffi.nullptr,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSCalendarDate dateByAddingYears_months_days_hours_minutes_seconds_(
    int year,
    int month,
    int day,
    int hour,
    int minute,
    int second,
  ) {
    final _ret = _lib._objc_msgSend_207(
      this.pointer,
      _lib._sel_dateByAddingYears_months_days_hours_minutes_seconds_1,
      year,
      month,
      day,
      hour,
      minute,
      second,
    );
    return NSCalendarDate._(_ret, _lib, retain: true, release: true);
  }

  int dayOfCommonEra() {
    return _lib._objc_msgSend_83(this.pointer, _lib._sel_dayOfCommonEra1);
  }

  int dayOfMonth() {
    return _lib._objc_msgSend_83(this.pointer, _lib._sel_dayOfMonth1);
  }

  int dayOfWeek() {
    return _lib._objc_msgSend_83(this.pointer, _lib._sel_dayOfWeek1);
  }

  int dayOfYear() {
    return _lib._objc_msgSend_83(this.pointer, _lib._sel_dayOfYear1);
  }

  int hourOfDay() {
    return _lib._objc_msgSend_83(this.pointer, _lib._sel_hourOfDay1);
  }

  int minuteOfHour() {
    return _lib._objc_msgSend_83(this.pointer, _lib._sel_minuteOfHour1);
  }

  int monthOfYear() {
    return _lib._objc_msgSend_83(this.pointer, _lib._sel_monthOfYear1);
  }

  int secondOfMinute() {
    return _lib._objc_msgSend_83(this.pointer, _lib._sel_secondOfMinute1);
  }

  int yearOfCommonEra() {
    return _lib._objc_msgSend_83(this.pointer, _lib._sel_yearOfCommonEra1);
  }

  NSString calendarFormat() {
    final _ret = _lib._objc_msgSend_21(this.pointer, _lib._sel_calendarFormat1);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString descriptionWithCalendarFormat_locale_(
    NSString format,
    NSObject? locale,
  ) {
    final _ret = _lib._objc_msgSend_208(
      this.pointer,
      _lib._sel_descriptionWithCalendarFormat_locale_1,
      format.pointer,
      locale?.pointer ?? ffi.nullptr,
    );
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString descriptionWithCalendarFormat_(NSString format) {
    final _ret = _lib._objc_msgSend_69(
      this.pointer,
      _lib._sel_descriptionWithCalendarFormat_1,
      format.pointer,
    );
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSString descriptionWithLocale_(NSObject? locale) {
    final _ret = _lib._objc_msgSend_70(
      this.pointer,
      _lib._sel_descriptionWithLocale_1,
      locale?.pointer ?? ffi.nullptr,
    );
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSTimeZone timeZone() {
    final _ret = _lib._objc_msgSend_179(this.pointer, _lib._sel_timeZone1);
    return NSTimeZone._(_ret, _lib, retain: true, release: true);
  }

  NSObject? initWithString_calendarFormat_locale_(
    NSString description,
    NSString format,
    NSObject? locale,
  ) {
    final _ret = _lib._objc_msgSend_174(
      this.pointer,
      _lib._sel_initWithString_calendarFormat_locale_1,
      description.pointer,
      format.pointer,
      locale?.pointer ?? ffi.nullptr,
    );
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? initWithString_calendarFormat_(
    NSString description,
    NSString format,
  ) {
    final _ret = _lib._objc_msgSend_175(
      this.pointer,
      _lib._sel_initWithString_calendarFormat_1,
      description.pointer,
      format.pointer,
    );
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSObject? initWithString_(NSString description) {
    final _ret = _lib._objc_msgSend_38(
      this.pointer,
      _lib._sel_initWithString_1,
      description.pointer,
    );
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject initWithYear_month_day_hour_minute_second_timeZone_(
    int year,
    int month,
    int day,
    int hour,
    int minute,
    int second,
    NSTimeZone? aTimeZone,
  ) {
    final _ret = _lib._objc_msgSend_206(
      this.pointer,
      _lib._sel_initWithYear_month_day_hour_minute_second_timeZone_1,
      year,
      month,
      day,
      hour,
      minute,
      second,
      aTimeZone?.pointer ?? ffi.nullptr,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  void setCalendarFormat_(NSString? format) {
    _lib._objc_msgSend_209(
      this.pointer,
      _lib._sel_setCalendarFormat_1,
      format?.pointer ?? ffi.nullptr,
    );
  }

  void setTimeZone_(NSTimeZone? aTimeZone) {
    _lib._objc_msgSend_210(
      this.pointer,
      _lib._sel_setTimeZone_1,
      aTimeZone?.pointer ?? ffi.nullptr,
    );
  }

  void years_months_days_hours_minutes_seconds_sinceDate_(
    ffi.Pointer<ffi.Long> yp,
    ffi.Pointer<ffi.Long> mop,
    ffi.Pointer<ffi.Long> dp,
    ffi.Pointer<ffi.Long> hp,
    ffi.Pointer<ffi.Long> mip,
    ffi.Pointer<ffi.Long> sp,
    NSCalendarDate date,
  ) {
    _lib._objc_msgSend_211(
      this.pointer,
      _lib._sel_years_months_days_hours_minutes_seconds_sinceDate_1,
      yp,
      mop,
      dp,
      hp,
      mip,
      sp,
      date.pointer,
    );
  }

  static NSDate getDistantFuture(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_172(
      _lib._class_NSCalendarDate1,
      _lib._sel_distantFuture1,
    );
    return NSDate._(_ret, _lib, retain: true, release: true);
  }

  static NSDate getDistantPast(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_172(
      _lib._class_NSCalendarDate1,
      _lib._sel_distantPast1,
    );
    return NSDate._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSCalendarDate init() {
    final _ret = _lib._objc_msgSend_2(this.pointer, _lib._sel_init1);
    return NSCalendarDate._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSCalendarDate initWithTimeIntervalSinceReferenceDate_(double ti) {
    final _ret = _lib._objc_msgSend_166(
      this.pointer,
      _lib._sel_initWithTimeIntervalSinceReferenceDate_1,
      ti,
    );
    return NSCalendarDate._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSCalendarDate? initWithCoder_(NSCoder coder) {
    final _ret = _lib._objc_msgSend_47(
      this.pointer,
      _lib._sel_initWithCoder_1,
      coder.pointer,
    );
    return _ret.address == 0
        ? null
        : NSCalendarDate._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSCalendarDate dateByAddingTimeInterval_(double ti) {
    final _ret = _lib._objc_msgSend_166(
      this.pointer,
      _lib._sel_dateByAddingTimeInterval_1,
      ti,
    );
    return NSCalendarDate._(_ret, _lib, retain: true, release: true);
  }

  static NSCalendarDate date(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSCalendarDate1,
      _lib._sel_date1,
    );
    return NSCalendarDate._(_ret, _lib, retain: true, release: true);
  }

  static NSCalendarDate dateWithTimeIntervalSinceNow_(
    AVFAudio _lib,
    double secs,
  ) {
    final _ret = _lib._objc_msgSend_166(
      _lib._class_NSCalendarDate1,
      _lib._sel_dateWithTimeIntervalSinceNow_1,
      secs,
    );
    return NSCalendarDate._(_ret, _lib, retain: true, release: true);
  }

  static NSCalendarDate dateWithTimeIntervalSinceReferenceDate_(
    AVFAudio _lib,
    double ti,
  ) {
    final _ret = _lib._objc_msgSend_166(
      _lib._class_NSCalendarDate1,
      _lib._sel_dateWithTimeIntervalSinceReferenceDate_1,
      ti,
    );
    return NSCalendarDate._(_ret, _lib, retain: true, release: true);
  }

  static NSCalendarDate dateWithTimeIntervalSince1970_(
    AVFAudio _lib,
    double secs,
  ) {
    final _ret = _lib._objc_msgSend_166(
      _lib._class_NSCalendarDate1,
      _lib._sel_dateWithTimeIntervalSince1970_1,
      secs,
    );
    return NSCalendarDate._(_ret, _lib, retain: true, release: true);
  }

  static NSCalendarDate dateWithTimeInterval_sinceDate_(
    AVFAudio _lib,
    double secsToBeAdded,
    NSDate date,
  ) {
    final _ret = _lib._objc_msgSend_171(
      _lib._class_NSCalendarDate1,
      _lib._sel_dateWithTimeInterval_sinceDate_1,
      secsToBeAdded,
      date.pointer,
    );
    return NSCalendarDate._(_ret, _lib, retain: true, release: true);
  }

  static NSDate getNow(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_172(
      _lib._class_NSCalendarDate1,
      _lib._sel_now1,
    );
    return NSDate._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSCalendarDate initWithTimeIntervalSinceNow_(double secs) {
    final _ret = _lib._objc_msgSend_166(
      this.pointer,
      _lib._sel_initWithTimeIntervalSinceNow_1,
      secs,
    );
    return NSCalendarDate._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSCalendarDate initWithTimeIntervalSince1970_(double secs) {
    final _ret = _lib._objc_msgSend_166(
      this.pointer,
      _lib._sel_initWithTimeIntervalSince1970_1,
      secs,
    );
    return NSCalendarDate._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSCalendarDate initWithTimeInterval_sinceDate_(
    double secsToBeAdded,
    NSDate date,
  ) {
    final _ret = _lib._objc_msgSend_171(
      this.pointer,
      _lib._sel_initWithTimeInterval_sinceDate_1,
      secsToBeAdded,
      date.pointer,
    );
    return NSCalendarDate._(_ret, _lib, retain: true, release: true);
  }

  static NSObject? dateWithNaturalLanguageString_locale_(
    AVFAudio _lib,
    NSString string,
    NSObject? locale,
  ) {
    final _ret = _lib._objc_msgSend_173(
      _lib._class_NSCalendarDate1,
      _lib._sel_dateWithNaturalLanguageString_locale_1,
      string.pointer,
      locale?.pointer ?? ffi.nullptr,
    );
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject? dateWithNaturalLanguageString_(
    AVFAudio _lib,
    NSString string,
  ) {
    final _ret = _lib._objc_msgSend_38(
      _lib._class_NSCalendarDate1,
      _lib._sel_dateWithNaturalLanguageString_1,
      string.pointer,
    );
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject dateWithString_(AVFAudio _lib, NSString aString) {
    final _ret = _lib._objc_msgSend_31(
      _lib._class_NSCalendarDate1,
      _lib._sel_dateWithString_1,
      aString.pointer,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSCalendarDate new1(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSCalendarDate1,
      _lib._sel_new1,
    );
    return NSCalendarDate._(_ret, _lib, retain: false, release: true);
  }

  static NSCalendarDate allocWithZone_(
    AVFAudio _lib,
    ffi.Pointer<_NSZone> zone,
  ) {
    final _ret = _lib._objc_msgSend_3(
      _lib._class_NSCalendarDate1,
      _lib._sel_allocWithZone_1,
      zone,
    );
    return NSCalendarDate._(_ret, _lib, retain: false, release: true);
  }

  static NSCalendarDate alloc(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSCalendarDate1,
      _lib._sel_alloc1,
    );
    return NSCalendarDate._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
    AVFAudio _lib,
    NSObject aTarget,
    ffi.Pointer<objc.ObjCSelector> aSelector,
    NSObject? anArgument,
  ) {
    _lib._objc_msgSend_14(
      _lib._class_NSCalendarDate1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
      aTarget.pointer,
      aSelector,
      anArgument?.pointer ?? ffi.nullptr,
    );
  }

  static void cancelPreviousPerformRequestsWithTarget_(
    AVFAudio _lib,
    NSObject aTarget,
  ) {
    _lib._objc_msgSend_15(
      _lib._class_NSCalendarDate1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_1,
      aTarget.pointer,
    );
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSCalendarDate1,
      _lib._sel_accessInstanceVariablesDirectly1,
    );
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSCalendarDate1,
      _lib._sel_useStoredAccessor1,
    );
  }

  static NSSet keyPathsForValuesAffectingValueForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    final _ret = _lib._objc_msgSend_63(
      _lib._class_NSCalendarDate1,
      _lib._sel_keyPathsForValuesAffectingValueForKey_1,
      key.pointer,
    );
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    return _lib._objc_msgSend_64(
      _lib._class_NSCalendarDate1,
      _lib._sel_automaticallyNotifiesObserversForKey_1,
      key.pointer,
    );
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
    AVFAudio _lib,
    NSArray keys,
    NSString dependentKey,
  ) {
    _lib._objc_msgSend_88(
      _lib._class_NSCalendarDate1,
      _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
      keys.pointer,
      dependentKey.pointer,
    );
  }

  static NSArray classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_85(
      _lib._class_NSCalendarDate1,
      _lib._sel_classFallbacksForKeyedArchiver1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSCalendarDate1,
      _lib._sel_classForKeyedUnarchiver1,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

class NSTimeZone extends NSObject {
  NSTimeZone._(
    ffi.Pointer<objc.ObjCObject> pointer,
    AVFAudio lib, {
    bool retain = false,
    bool release = false,
  }) : super._(pointer, lib, retain: retain, release: release);

  /// Returns a [NSTimeZone] that points to the same underlying object as [other].
  static NSTimeZone castFrom<T extends objc.ObjCObjectBase>(
    AVFAudio lib,
    T other,
  ) {
    return NSTimeZone._(other.pointer, lib, retain: true, release: true);
  }

  /// Returns a [NSTimeZone] that wraps the given raw object pointer.
  static NSTimeZone castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCObject> other, {
    bool retain = false,
    bool release = false,
  }) {
    return NSTimeZone._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSTimeZone].
  static bool isInstance(AVFAudio lib, objc.ObjCObjectBase obj) {
    return lib._objc_msgSend_0(
      obj.pointer,
      lib._sel_isKindOfClass_1,
      lib._class_NSTimeZone1,
    );
  }

  NSString get name {
    final _ret = _lib._objc_msgSend_21(this.pointer, _lib._sel_name1);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSData get data {
    final _ret = _lib._objc_msgSend_43(this.pointer, _lib._sel_data1);
    return NSData._(_ret, _lib, retain: true, release: true);
  }

  int secondsFromGMTForDate_(NSDate aDate) {
    return _lib._objc_msgSend_176(
      this.pointer,
      _lib._sel_secondsFromGMTForDate_1,
      aDate.pointer,
    );
  }

  NSString? abbreviationForDate_(NSDate aDate) {
    final _ret = _lib._objc_msgSend_177(
      this.pointer,
      _lib._sel_abbreviationForDate_1,
      aDate.pointer,
    );
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  bool isDaylightSavingTimeForDate_(NSDate aDate) {
    return _lib._objc_msgSend_170(
      this.pointer,
      _lib._sel_isDaylightSavingTimeForDate_1,
      aDate.pointer,
    );
  }

  double daylightSavingTimeOffsetForDate_(NSDate aDate) {
    return objc.useMsgSendVariants
        ? _lib._objc_msgSend_167_fpret(
          this.pointer,
          _lib._sel_daylightSavingTimeOffsetForDate_1,
          aDate.pointer,
        )
        : _lib._objc_msgSend_167(
          this.pointer,
          _lib._sel_daylightSavingTimeOffsetForDate_1,
          aDate.pointer,
        );
  }

  NSDate? nextDaylightSavingTimeTransitionAfterDate_(NSDate aDate) {
    final _ret = _lib._objc_msgSend_178(
      this.pointer,
      _lib._sel_nextDaylightSavingTimeTransitionAfterDate_1,
      aDate.pointer,
    );
    return _ret.address == 0
        ? null
        : NSDate._(_ret, _lib, retain: true, release: true);
  }

  static NSTimeZone getSystemTimeZone(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_179(
      _lib._class_NSTimeZone1,
      _lib._sel_systemTimeZone1,
    );
    return NSTimeZone._(_ret, _lib, retain: true, release: true);
  }

  static void resetSystemTimeZone(AVFAudio _lib) {
    _lib._objc_msgSend_1(
      _lib._class_NSTimeZone1,
      _lib._sel_resetSystemTimeZone1,
    );
  }

  static NSTimeZone getDefaultTimeZone(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_179(
      _lib._class_NSTimeZone1,
      _lib._sel_defaultTimeZone1,
    );
    return NSTimeZone._(_ret, _lib, retain: true, release: true);
  }

  static void setDefaultTimeZone(AVFAudio _lib, NSTimeZone value) {
    return _lib._objc_msgSend_180(
      _lib._class_NSTimeZone1,
      _lib._sel_setDefaultTimeZone_1,
      value.pointer,
    );
  }

  static NSTimeZone getLocalTimeZone(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_179(
      _lib._class_NSTimeZone1,
      _lib._sel_localTimeZone1,
    );
    return NSTimeZone._(_ret, _lib, retain: true, release: true);
  }

  static NSArray getKnownTimeZoneNames(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_85(
      _lib._class_NSTimeZone1,
      _lib._sel_knownTimeZoneNames1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSDictionary getAbbreviationDictionary(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_181(
      _lib._class_NSTimeZone1,
      _lib._sel_abbreviationDictionary1,
    );
    return NSDictionary._(_ret, _lib, retain: true, release: true);
  }

  static void setAbbreviationDictionary(AVFAudio _lib, NSDictionary value) {
    return _lib._objc_msgSend_182(
      _lib._class_NSTimeZone1,
      _lib._sel_setAbbreviationDictionary_1,
      value.pointer,
    );
  }

  static NSString getTimeZoneDataVersion(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_21(
      _lib._class_NSTimeZone1,
      _lib._sel_timeZoneDataVersion1,
    );
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  int get secondsFromGMT {
    return _lib._objc_msgSend_83(this.pointer, _lib._sel_secondsFromGMT1);
  }

  NSString? get abbreviation {
    final _ret = _lib._objc_msgSend_44(this.pointer, _lib._sel_abbreviation1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  bool get daylightSavingTime {
    return _lib._objc_msgSend_12(this.pointer, _lib._sel_isDaylightSavingTime1);
  }

  double get daylightSavingTimeOffset {
    return objc.useMsgSendVariants
        ? _lib._objc_msgSend_165_fpret(
          this.pointer,
          _lib._sel_daylightSavingTimeOffset1,
        )
        : _lib._objc_msgSend_165(
          this.pointer,
          _lib._sel_daylightSavingTimeOffset1,
        );
  }

  NSDate? get nextDaylightSavingTimeTransition {
    final _ret = _lib._objc_msgSend_183(
      this.pointer,
      _lib._sel_nextDaylightSavingTimeTransition1,
    );
    return _ret.address == 0
        ? null
        : NSDate._(_ret, _lib, retain: true, release: true);
  }

  NSString get description {
    final _ret = _lib._objc_msgSend_21(this.pointer, _lib._sel_description1);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  bool isEqualToTimeZone_(NSTimeZone aTimeZone) {
    return _lib._objc_msgSend_184(
      this.pointer,
      _lib._sel_isEqualToTimeZone_1,
      aTimeZone.pointer,
    );
  }

  NSString? localizedName_locale_(int style, NSLocale? locale) {
    final _ret = _lib._objc_msgSend_203(
      this.pointer,
      _lib._sel_localizedName_locale_1,
      style,
      locale?.pointer ?? ffi.nullptr,
    );
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  static NSTimeZone? timeZoneWithName_(AVFAudio _lib, NSString tzName) {
    final _ret = _lib._objc_msgSend_38(
      _lib._class_NSTimeZone1,
      _lib._sel_timeZoneWithName_1,
      tzName.pointer,
    );
    return _ret.address == 0
        ? null
        : NSTimeZone._(_ret, _lib, retain: true, release: true);
  }

  static NSTimeZone? timeZoneWithName_data_(
    AVFAudio _lib,
    NSString tzName,
    NSData? aData,
  ) {
    final _ret = _lib._objc_msgSend_204(
      _lib._class_NSTimeZone1,
      _lib._sel_timeZoneWithName_data_1,
      tzName.pointer,
      aData?.pointer ?? ffi.nullptr,
    );
    return _ret.address == 0
        ? null
        : NSTimeZone._(_ret, _lib, retain: true, release: true);
  }

  NSTimeZone? initWithName_(NSString tzName) {
    final _ret = _lib._objc_msgSend_38(
      this.pointer,
      _lib._sel_initWithName_1,
      tzName.pointer,
    );
    return _ret.address == 0
        ? null
        : NSTimeZone._(_ret, _lib, retain: true, release: true);
  }

  NSTimeZone? initWithName_data_(NSString tzName, NSData? aData) {
    final _ret = _lib._objc_msgSend_204(
      this.pointer,
      _lib._sel_initWithName_data_1,
      tzName.pointer,
      aData?.pointer ?? ffi.nullptr,
    );
    return _ret.address == 0
        ? null
        : NSTimeZone._(_ret, _lib, retain: true, release: true);
  }

  static NSTimeZone timeZoneForSecondsFromGMT_(AVFAudio _lib, int seconds) {
    final _ret = _lib._objc_msgSend_205(
      _lib._class_NSTimeZone1,
      _lib._sel_timeZoneForSecondsFromGMT_1,
      seconds,
    );
    return NSTimeZone._(_ret, _lib, retain: true, release: true);
  }

  static NSTimeZone? timeZoneWithAbbreviation_(
    AVFAudio _lib,
    NSString abbreviation,
  ) {
    final _ret = _lib._objc_msgSend_38(
      _lib._class_NSTimeZone1,
      _lib._sel_timeZoneWithAbbreviation_1,
      abbreviation.pointer,
    );
    return _ret.address == 0
        ? null
        : NSTimeZone._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSTimeZone init() {
    final _ret = _lib._objc_msgSend_2(this.pointer, _lib._sel_init1);
    return NSTimeZone._(_ret, _lib, retain: true, release: true);
  }

  static NSTimeZone new1(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSTimeZone1, _lib._sel_new1);
    return NSTimeZone._(_ret, _lib, retain: false, release: true);
  }

  static NSTimeZone allocWithZone_(AVFAudio _lib, ffi.Pointer<_NSZone> zone) {
    final _ret = _lib._objc_msgSend_3(
      _lib._class_NSTimeZone1,
      _lib._sel_allocWithZone_1,
      zone,
    );
    return NSTimeZone._(_ret, _lib, retain: false, release: true);
  }

  static NSTimeZone alloc(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSTimeZone1,
      _lib._sel_alloc1,
    );
    return NSTimeZone._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
    AVFAudio _lib,
    NSObject aTarget,
    ffi.Pointer<objc.ObjCSelector> aSelector,
    NSObject? anArgument,
  ) {
    _lib._objc_msgSend_14(
      _lib._class_NSTimeZone1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
      aTarget.pointer,
      aSelector,
      anArgument?.pointer ?? ffi.nullptr,
    );
  }

  static void cancelPreviousPerformRequestsWithTarget_(
    AVFAudio _lib,
    NSObject aTarget,
  ) {
    _lib._objc_msgSend_15(
      _lib._class_NSTimeZone1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_1,
      aTarget.pointer,
    );
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSTimeZone1,
      _lib._sel_accessInstanceVariablesDirectly1,
    );
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSTimeZone1,
      _lib._sel_useStoredAccessor1,
    );
  }

  static NSSet keyPathsForValuesAffectingValueForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    final _ret = _lib._objc_msgSend_63(
      _lib._class_NSTimeZone1,
      _lib._sel_keyPathsForValuesAffectingValueForKey_1,
      key.pointer,
    );
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    return _lib._objc_msgSend_64(
      _lib._class_NSTimeZone1,
      _lib._sel_automaticallyNotifiesObserversForKey_1,
      key.pointer,
    );
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
    AVFAudio _lib,
    NSArray keys,
    NSString dependentKey,
  ) {
    _lib._objc_msgSend_88(
      _lib._class_NSTimeZone1,
      _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
      keys.pointer,
      dependentKey.pointer,
    );
  }

  static NSArray classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_85(
      _lib._class_NSTimeZone1,
      _lib._sel_classFallbacksForKeyedArchiver1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSTimeZone1,
      _lib._sel_classForKeyedUnarchiver1,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

abstract class NSTimeZoneNameStyle {
  static const int NSTimeZoneNameStyleStandard = 0;
  static const int NSTimeZoneNameStyleShortStandard = 1;
  static const int NSTimeZoneNameStyleDaylightSaving = 2;
  static const int NSTimeZoneNameStyleShortDaylightSaving = 3;
  static const int NSTimeZoneNameStyleGeneric = 4;
  static const int NSTimeZoneNameStyleShortGeneric = 5;
}

class NSLocale extends NSObject {
  NSLocale._(
    ffi.Pointer<objc.ObjCObject> pointer,
    AVFAudio lib, {
    bool retain = false,
    bool release = false,
  }) : super._(pointer, lib, retain: retain, release: release);

  /// Returns a [NSLocale] that points to the same underlying object as [other].
  static NSLocale castFrom<T extends objc.ObjCObjectBase>(
    AVFAudio lib,
    T other,
  ) {
    return NSLocale._(other.pointer, lib, retain: true, release: true);
  }

  /// Returns a [NSLocale] that wraps the given raw object pointer.
  static NSLocale castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCObject> other, {
    bool retain = false,
    bool release = false,
  }) {
    return NSLocale._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSLocale].
  static bool isInstance(AVFAudio lib, objc.ObjCObjectBase obj) {
    return lib._objc_msgSend_0(
      obj.pointer,
      lib._sel_isKindOfClass_1,
      lib._class_NSLocale1,
    );
  }

  NSObject? objectForKey_(NSString key) {
    final _ret = _lib._objc_msgSend_38(
      this.pointer,
      _lib._sel_objectForKey_1,
      key.pointer,
    );
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSString? displayNameForKey_value_(NSString key, NSObject value) {
    final _ret = _lib._objc_msgSend_185(
      this.pointer,
      _lib._sel_displayNameForKey_value_1,
      key.pointer,
      value.pointer,
    );
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSLocale initWithLocaleIdentifier_(NSString string) {
    final _ret = _lib._objc_msgSend_31(
      this.pointer,
      _lib._sel_initWithLocaleIdentifier_1,
      string.pointer,
    );
    return NSLocale._(_ret, _lib, retain: true, release: true);
  }

  NSLocale? initWithCoder_(NSCoder coder) {
    final _ret = _lib._objc_msgSend_47(
      this.pointer,
      _lib._sel_initWithCoder_1,
      coder.pointer,
    );
    return _ret.address == 0
        ? null
        : NSLocale._(_ret, _lib, retain: true, release: true);
  }

  NSString get localeIdentifier {
    final _ret = _lib._objc_msgSend_21(
      this.pointer,
      _lib._sel_localeIdentifier1,
    );
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString localizedStringForLocaleIdentifier_(NSString localeIdentifier) {
    final _ret = _lib._objc_msgSend_69(
      this.pointer,
      _lib._sel_localizedStringForLocaleIdentifier_1,
      localeIdentifier.pointer,
    );
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString get languageCode {
    final _ret = _lib._objc_msgSend_21(this.pointer, _lib._sel_languageCode1);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString? localizedStringForLanguageCode_(NSString languageCode) {
    final _ret = _lib._objc_msgSend_186(
      this.pointer,
      _lib._sel_localizedStringForLanguageCode_1,
      languageCode.pointer,
    );
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString get languageIdentifier {
    final _ret = _lib._objc_msgSend_21(
      this.pointer,
      _lib._sel_languageIdentifier1,
    );
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString? get countryCode {
    final _ret = _lib._objc_msgSend_44(this.pointer, _lib._sel_countryCode1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString? localizedStringForCountryCode_(NSString countryCode) {
    final _ret = _lib._objc_msgSend_186(
      this.pointer,
      _lib._sel_localizedStringForCountryCode_1,
      countryCode.pointer,
    );
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString? get regionCode {
    final _ret = _lib._objc_msgSend_44(this.pointer, _lib._sel_regionCode1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString? get scriptCode {
    final _ret = _lib._objc_msgSend_44(this.pointer, _lib._sel_scriptCode1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString? localizedStringForScriptCode_(NSString scriptCode) {
    final _ret = _lib._objc_msgSend_186(
      this.pointer,
      _lib._sel_localizedStringForScriptCode_1,
      scriptCode.pointer,
    );
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString? get variantCode {
    final _ret = _lib._objc_msgSend_44(this.pointer, _lib._sel_variantCode1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString? localizedStringForVariantCode_(NSString variantCode) {
    final _ret = _lib._objc_msgSend_186(
      this.pointer,
      _lib._sel_localizedStringForVariantCode_1,
      variantCode.pointer,
    );
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSCharacterSet get exemplarCharacterSet {
    final _ret = _lib._objc_msgSend_187(
      this.pointer,
      _lib._sel_exemplarCharacterSet1,
    );
    return NSCharacterSet._(_ret, _lib, retain: true, release: true);
  }

  NSString get calendarIdentifier {
    final _ret = _lib._objc_msgSend_21(
      this.pointer,
      _lib._sel_calendarIdentifier1,
    );
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString? localizedStringForCalendarIdentifier_(NSString calendarIdentifier) {
    final _ret = _lib._objc_msgSend_186(
      this.pointer,
      _lib._sel_localizedStringForCalendarIdentifier_1,
      calendarIdentifier.pointer,
    );
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString? get collationIdentifier {
    final _ret = _lib._objc_msgSend_44(
      this.pointer,
      _lib._sel_collationIdentifier1,
    );
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString? localizedStringForCollationIdentifier_(
    NSString collationIdentifier,
  ) {
    final _ret = _lib._objc_msgSend_186(
      this.pointer,
      _lib._sel_localizedStringForCollationIdentifier_1,
      collationIdentifier.pointer,
    );
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  bool get usesMetricSystem {
    return _lib._objc_msgSend_12(this.pointer, _lib._sel_usesMetricSystem1);
  }

  NSString get decimalSeparator {
    final _ret = _lib._objc_msgSend_21(
      this.pointer,
      _lib._sel_decimalSeparator1,
    );
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString get groupingSeparator {
    final _ret = _lib._objc_msgSend_21(
      this.pointer,
      _lib._sel_groupingSeparator1,
    );
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString get currencySymbol {
    final _ret = _lib._objc_msgSend_21(this.pointer, _lib._sel_currencySymbol1);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString? get currencyCode {
    final _ret = _lib._objc_msgSend_44(this.pointer, _lib._sel_currencyCode1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString? localizedStringForCurrencyCode_(NSString currencyCode) {
    final _ret = _lib._objc_msgSend_186(
      this.pointer,
      _lib._sel_localizedStringForCurrencyCode_1,
      currencyCode.pointer,
    );
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString get collatorIdentifier {
    final _ret = _lib._objc_msgSend_21(
      this.pointer,
      _lib._sel_collatorIdentifier1,
    );
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString? localizedStringForCollatorIdentifier_(NSString collatorIdentifier) {
    final _ret = _lib._objc_msgSend_186(
      this.pointer,
      _lib._sel_localizedStringForCollatorIdentifier_1,
      collatorIdentifier.pointer,
    );
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString get quotationBeginDelimiter {
    final _ret = _lib._objc_msgSend_21(
      this.pointer,
      _lib._sel_quotationBeginDelimiter1,
    );
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString get quotationEndDelimiter {
    final _ret = _lib._objc_msgSend_21(
      this.pointer,
      _lib._sel_quotationEndDelimiter1,
    );
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString get alternateQuotationBeginDelimiter {
    final _ret = _lib._objc_msgSend_21(
      this.pointer,
      _lib._sel_alternateQuotationBeginDelimiter1,
    );
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString get alternateQuotationEndDelimiter {
    final _ret = _lib._objc_msgSend_21(
      this.pointer,
      _lib._sel_alternateQuotationEndDelimiter1,
    );
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  static NSLocale getAutoupdatingCurrentLocale(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_197(
      _lib._class_NSLocale1,
      _lib._sel_autoupdatingCurrentLocale1,
    );
    return NSLocale._(_ret, _lib, retain: true, release: true);
  }

  static NSLocale getCurrentLocale(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_197(
      _lib._class_NSLocale1,
      _lib._sel_currentLocale1,
    );
    return NSLocale._(_ret, _lib, retain: true, release: true);
  }

  static NSLocale getSystemLocale(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_197(
      _lib._class_NSLocale1,
      _lib._sel_systemLocale1,
    );
    return NSLocale._(_ret, _lib, retain: true, release: true);
  }

  static NSLocale localeWithLocaleIdentifier_(AVFAudio _lib, NSString ident) {
    final _ret = _lib._objc_msgSend_31(
      _lib._class_NSLocale1,
      _lib._sel_localeWithLocaleIdentifier_1,
      ident.pointer,
    );
    return NSLocale._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSLocale init() {
    final _ret = _lib._objc_msgSend_2(this.pointer, _lib._sel_init1);
    return NSLocale._(_ret, _lib, retain: true, release: true);
  }

  static NSArray getAvailableLocaleIdentifiers(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_85(
      _lib._class_NSLocale1,
      _lib._sel_availableLocaleIdentifiers1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSArray getISOLanguageCodes(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_85(
      _lib._class_NSLocale1,
      _lib._sel_ISOLanguageCodes1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSArray getISOCountryCodes(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_85(
      _lib._class_NSLocale1,
      _lib._sel_ISOCountryCodes1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSArray getISOCurrencyCodes(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_85(
      _lib._class_NSLocale1,
      _lib._sel_ISOCurrencyCodes1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSArray getCommonISOCurrencyCodes(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_85(
      _lib._class_NSLocale1,
      _lib._sel_commonISOCurrencyCodes1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSArray getPreferredLanguages(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_85(
      _lib._class_NSLocale1,
      _lib._sel_preferredLanguages1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSDictionary componentsFromLocaleIdentifier_(
    AVFAudio _lib,
    NSString string,
  ) {
    final _ret = _lib._objc_msgSend_198(
      _lib._class_NSLocale1,
      _lib._sel_componentsFromLocaleIdentifier_1,
      string.pointer,
    );
    return NSDictionary._(_ret, _lib, retain: true, release: true);
  }

  static NSString localeIdentifierFromComponents_(
    AVFAudio _lib,
    NSDictionary dict,
  ) {
    final _ret = _lib._objc_msgSend_199(
      _lib._class_NSLocale1,
      _lib._sel_localeIdentifierFromComponents_1,
      dict.pointer,
    );
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  static NSString canonicalLocaleIdentifierFromString_(
    AVFAudio _lib,
    NSString string,
  ) {
    final _ret = _lib._objc_msgSend_69(
      _lib._class_NSLocale1,
      _lib._sel_canonicalLocaleIdentifierFromString_1,
      string.pointer,
    );
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  static NSString canonicalLanguageIdentifierFromString_(
    AVFAudio _lib,
    NSString string,
  ) {
    final _ret = _lib._objc_msgSend_69(
      _lib._class_NSLocale1,
      _lib._sel_canonicalLanguageIdentifierFromString_1,
      string.pointer,
    );
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  static NSString? localeIdentifierFromWindowsLocaleCode_(
    AVFAudio _lib,
    int lcid,
  ) {
    final _ret = _lib._objc_msgSend_200(
      _lib._class_NSLocale1,
      _lib._sel_localeIdentifierFromWindowsLocaleCode_1,
      lcid,
    );
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  static int windowsLocaleCodeFromLocaleIdentifier_(
    AVFAudio _lib,
    NSString localeIdentifier,
  ) {
    return _lib._objc_msgSend_201(
      _lib._class_NSLocale1,
      _lib._sel_windowsLocaleCodeFromLocaleIdentifier_1,
      localeIdentifier.pointer,
    );
  }

  static int characterDirectionForLanguage_(
    AVFAudio _lib,
    NSString isoLangCode,
  ) {
    return _lib._objc_msgSend_202(
      _lib._class_NSLocale1,
      _lib._sel_characterDirectionForLanguage_1,
      isoLangCode.pointer,
    );
  }

  static int lineDirectionForLanguage_(AVFAudio _lib, NSString isoLangCode) {
    return _lib._objc_msgSend_202(
      _lib._class_NSLocale1,
      _lib._sel_lineDirectionForLanguage_1,
      isoLangCode.pointer,
    );
  }

  static NSLocale new1(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSLocale1, _lib._sel_new1);
    return NSLocale._(_ret, _lib, retain: false, release: true);
  }

  static NSLocale allocWithZone_(AVFAudio _lib, ffi.Pointer<_NSZone> zone) {
    final _ret = _lib._objc_msgSend_3(
      _lib._class_NSLocale1,
      _lib._sel_allocWithZone_1,
      zone,
    );
    return NSLocale._(_ret, _lib, retain: false, release: true);
  }

  static NSLocale alloc(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSLocale1, _lib._sel_alloc1);
    return NSLocale._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
    AVFAudio _lib,
    NSObject aTarget,
    ffi.Pointer<objc.ObjCSelector> aSelector,
    NSObject? anArgument,
  ) {
    _lib._objc_msgSend_14(
      _lib._class_NSLocale1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
      aTarget.pointer,
      aSelector,
      anArgument?.pointer ?? ffi.nullptr,
    );
  }

  static void cancelPreviousPerformRequestsWithTarget_(
    AVFAudio _lib,
    NSObject aTarget,
  ) {
    _lib._objc_msgSend_15(
      _lib._class_NSLocale1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_1,
      aTarget.pointer,
    );
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSLocale1,
      _lib._sel_accessInstanceVariablesDirectly1,
    );
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSLocale1,
      _lib._sel_useStoredAccessor1,
    );
  }

  static NSSet keyPathsForValuesAffectingValueForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    final _ret = _lib._objc_msgSend_63(
      _lib._class_NSLocale1,
      _lib._sel_keyPathsForValuesAffectingValueForKey_1,
      key.pointer,
    );
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    return _lib._objc_msgSend_64(
      _lib._class_NSLocale1,
      _lib._sel_automaticallyNotifiesObserversForKey_1,
      key.pointer,
    );
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
    AVFAudio _lib,
    NSArray keys,
    NSString dependentKey,
  ) {
    _lib._objc_msgSend_88(
      _lib._class_NSLocale1,
      _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
      keys.pointer,
      dependentKey.pointer,
    );
  }

  static NSArray classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_85(
      _lib._class_NSLocale1,
      _lib._sel_classFallbacksForKeyedArchiver1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSLocale1,
      _lib._sel_classForKeyedUnarchiver1,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

class NSCharacterSet extends NSObject {
  NSCharacterSet._(
    ffi.Pointer<objc.ObjCObject> pointer,
    AVFAudio lib, {
    bool retain = false,
    bool release = false,
  }) : super._(pointer, lib, retain: retain, release: release);

  /// Returns a [NSCharacterSet] that points to the same underlying object as [other].
  static NSCharacterSet castFrom<T extends objc.ObjCObjectBase>(
    AVFAudio lib,
    T other,
  ) {
    return NSCharacterSet._(other.pointer, lib, retain: true, release: true);
  }

  /// Returns a [NSCharacterSet] that wraps the given raw object pointer.
  static NSCharacterSet castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCObject> other, {
    bool retain = false,
    bool release = false,
  }) {
    return NSCharacterSet._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSCharacterSet].
  static bool isInstance(AVFAudio lib, objc.ObjCObjectBase obj) {
    return lib._objc_msgSend_0(
      obj.pointer,
      lib._sel_isKindOfClass_1,
      lib._class_NSCharacterSet1,
    );
  }

  static NSCharacterSet getControlCharacterSet(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_187(
      _lib._class_NSCharacterSet1,
      _lib._sel_controlCharacterSet1,
    );
    return NSCharacterSet._(_ret, _lib, retain: true, release: true);
  }

  static NSCharacterSet getWhitespaceCharacterSet(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_187(
      _lib._class_NSCharacterSet1,
      _lib._sel_whitespaceCharacterSet1,
    );
    return NSCharacterSet._(_ret, _lib, retain: true, release: true);
  }

  static NSCharacterSet getWhitespaceAndNewlineCharacterSet(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_187(
      _lib._class_NSCharacterSet1,
      _lib._sel_whitespaceAndNewlineCharacterSet1,
    );
    return NSCharacterSet._(_ret, _lib, retain: true, release: true);
  }

  static NSCharacterSet getDecimalDigitCharacterSet(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_187(
      _lib._class_NSCharacterSet1,
      _lib._sel_decimalDigitCharacterSet1,
    );
    return NSCharacterSet._(_ret, _lib, retain: true, release: true);
  }

  static NSCharacterSet getLetterCharacterSet(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_187(
      _lib._class_NSCharacterSet1,
      _lib._sel_letterCharacterSet1,
    );
    return NSCharacterSet._(_ret, _lib, retain: true, release: true);
  }

  static NSCharacterSet getLowercaseLetterCharacterSet(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_187(
      _lib._class_NSCharacterSet1,
      _lib._sel_lowercaseLetterCharacterSet1,
    );
    return NSCharacterSet._(_ret, _lib, retain: true, release: true);
  }

  static NSCharacterSet getUppercaseLetterCharacterSet(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_187(
      _lib._class_NSCharacterSet1,
      _lib._sel_uppercaseLetterCharacterSet1,
    );
    return NSCharacterSet._(_ret, _lib, retain: true, release: true);
  }

  static NSCharacterSet getNonBaseCharacterSet(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_187(
      _lib._class_NSCharacterSet1,
      _lib._sel_nonBaseCharacterSet1,
    );
    return NSCharacterSet._(_ret, _lib, retain: true, release: true);
  }

  static NSCharacterSet getAlphanumericCharacterSet(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_187(
      _lib._class_NSCharacterSet1,
      _lib._sel_alphanumericCharacterSet1,
    );
    return NSCharacterSet._(_ret, _lib, retain: true, release: true);
  }

  static NSCharacterSet getDecomposableCharacterSet(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_187(
      _lib._class_NSCharacterSet1,
      _lib._sel_decomposableCharacterSet1,
    );
    return NSCharacterSet._(_ret, _lib, retain: true, release: true);
  }

  static NSCharacterSet getIllegalCharacterSet(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_187(
      _lib._class_NSCharacterSet1,
      _lib._sel_illegalCharacterSet1,
    );
    return NSCharacterSet._(_ret, _lib, retain: true, release: true);
  }

  static NSCharacterSet getPunctuationCharacterSet(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_187(
      _lib._class_NSCharacterSet1,
      _lib._sel_punctuationCharacterSet1,
    );
    return NSCharacterSet._(_ret, _lib, retain: true, release: true);
  }

  static NSCharacterSet getCapitalizedLetterCharacterSet(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_187(
      _lib._class_NSCharacterSet1,
      _lib._sel_capitalizedLetterCharacterSet1,
    );
    return NSCharacterSet._(_ret, _lib, retain: true, release: true);
  }

  static NSCharacterSet getSymbolCharacterSet(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_187(
      _lib._class_NSCharacterSet1,
      _lib._sel_symbolCharacterSet1,
    );
    return NSCharacterSet._(_ret, _lib, retain: true, release: true);
  }

  static NSCharacterSet getNewlineCharacterSet(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_187(
      _lib._class_NSCharacterSet1,
      _lib._sel_newlineCharacterSet1,
    );
    return NSCharacterSet._(_ret, _lib, retain: false, release: true);
  }

  static NSCharacterSet characterSetWithRange_(AVFAudio _lib, _NSRange aRange) {
    final _ret = _lib._objc_msgSend_188(
      _lib._class_NSCharacterSet1,
      _lib._sel_characterSetWithRange_1,
      aRange,
    );
    return NSCharacterSet._(_ret, _lib, retain: true, release: true);
  }

  static NSCharacterSet characterSetWithCharactersInString_(
    AVFAudio _lib,
    NSString aString,
  ) {
    final _ret = _lib._objc_msgSend_189(
      _lib._class_NSCharacterSet1,
      _lib._sel_characterSetWithCharactersInString_1,
      aString.pointer,
    );
    return NSCharacterSet._(_ret, _lib, retain: true, release: true);
  }

  static NSCharacterSet characterSetWithBitmapRepresentation_(
    AVFAudio _lib,
    NSData data,
  ) {
    final _ret = _lib._objc_msgSend_190(
      _lib._class_NSCharacterSet1,
      _lib._sel_characterSetWithBitmapRepresentation_1,
      data.pointer,
    );
    return NSCharacterSet._(_ret, _lib, retain: true, release: true);
  }

  static NSCharacterSet? characterSetWithContentsOfFile_(
    AVFAudio _lib,
    NSString fName,
  ) {
    final _ret = _lib._objc_msgSend_191(
      _lib._class_NSCharacterSet1,
      _lib._sel_characterSetWithContentsOfFile_1,
      fName.pointer,
    );
    return _ret.address == 0
        ? null
        : NSCharacterSet._(_ret, _lib, retain: true, release: true);
  }

  NSCharacterSet initWithCoder_(NSCoder coder) {
    final _ret = _lib._objc_msgSend_192(
      this.pointer,
      _lib._sel_initWithCoder_1,
      coder.pointer,
    );
    return NSCharacterSet._(_ret, _lib, retain: true, release: true);
  }

  bool characterIsMember_(int aCharacter) {
    return _lib._objc_msgSend_193(
      this.pointer,
      _lib._sel_characterIsMember_1,
      aCharacter,
    );
  }

  NSData get bitmapRepresentation {
    final _ret = _lib._objc_msgSend_43(
      this.pointer,
      _lib._sel_bitmapRepresentation1,
    );
    return NSData._(_ret, _lib, retain: true, release: true);
  }

  NSCharacterSet get invertedSet {
    final _ret = _lib._objc_msgSend_187(this.pointer, _lib._sel_invertedSet1);
    return NSCharacterSet._(_ret, _lib, retain: true, release: true);
  }

  bool longCharacterIsMember_(int theLongChar) {
    return _lib._objc_msgSend_194(
      this.pointer,
      _lib._sel_longCharacterIsMember_1,
      theLongChar,
    );
  }

  bool isSupersetOfSet_(NSCharacterSet theOtherSet) {
    return _lib._objc_msgSend_195(
      this.pointer,
      _lib._sel_isSupersetOfSet_1,
      theOtherSet.pointer,
    );
  }

  bool hasMemberInPlane_(int thePlane) {
    return _lib._objc_msgSend_196(
      this.pointer,
      _lib._sel_hasMemberInPlane_1,
      thePlane,
    );
  }

  static NSCharacterSet getURLUserAllowedCharacterSet(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_187(
      _lib._class_NSCharacterSet1,
      _lib._sel_URLUserAllowedCharacterSet1,
    );
    return NSCharacterSet._(_ret, _lib, retain: true, release: true);
  }

  static NSCharacterSet getURLPasswordAllowedCharacterSet(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_187(
      _lib._class_NSCharacterSet1,
      _lib._sel_URLPasswordAllowedCharacterSet1,
    );
    return NSCharacterSet._(_ret, _lib, retain: true, release: true);
  }

  static NSCharacterSet getURLHostAllowedCharacterSet(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_187(
      _lib._class_NSCharacterSet1,
      _lib._sel_URLHostAllowedCharacterSet1,
    );
    return NSCharacterSet._(_ret, _lib, retain: true, release: true);
  }

  static NSCharacterSet getURLPathAllowedCharacterSet(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_187(
      _lib._class_NSCharacterSet1,
      _lib._sel_URLPathAllowedCharacterSet1,
    );
    return NSCharacterSet._(_ret, _lib, retain: true, release: true);
  }

  static NSCharacterSet getURLQueryAllowedCharacterSet(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_187(
      _lib._class_NSCharacterSet1,
      _lib._sel_URLQueryAllowedCharacterSet1,
    );
    return NSCharacterSet._(_ret, _lib, retain: true, release: true);
  }

  static NSCharacterSet getURLFragmentAllowedCharacterSet(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_187(
      _lib._class_NSCharacterSet1,
      _lib._sel_URLFragmentAllowedCharacterSet1,
    );
    return NSCharacterSet._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSCharacterSet init() {
    final _ret = _lib._objc_msgSend_2(this.pointer, _lib._sel_init1);
    return NSCharacterSet._(_ret, _lib, retain: true, release: true);
  }

  static NSCharacterSet new1(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSCharacterSet1,
      _lib._sel_new1,
    );
    return NSCharacterSet._(_ret, _lib, retain: false, release: true);
  }

  static NSCharacterSet allocWithZone_(
    AVFAudio _lib,
    ffi.Pointer<_NSZone> zone,
  ) {
    final _ret = _lib._objc_msgSend_3(
      _lib._class_NSCharacterSet1,
      _lib._sel_allocWithZone_1,
      zone,
    );
    return NSCharacterSet._(_ret, _lib, retain: false, release: true);
  }

  static NSCharacterSet alloc(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSCharacterSet1,
      _lib._sel_alloc1,
    );
    return NSCharacterSet._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
    AVFAudio _lib,
    NSObject aTarget,
    ffi.Pointer<objc.ObjCSelector> aSelector,
    NSObject? anArgument,
  ) {
    _lib._objc_msgSend_14(
      _lib._class_NSCharacterSet1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
      aTarget.pointer,
      aSelector,
      anArgument?.pointer ?? ffi.nullptr,
    );
  }

  static void cancelPreviousPerformRequestsWithTarget_(
    AVFAudio _lib,
    NSObject aTarget,
  ) {
    _lib._objc_msgSend_15(
      _lib._class_NSCharacterSet1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_1,
      aTarget.pointer,
    );
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSCharacterSet1,
      _lib._sel_accessInstanceVariablesDirectly1,
    );
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSCharacterSet1,
      _lib._sel_useStoredAccessor1,
    );
  }

  static NSSet keyPathsForValuesAffectingValueForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    final _ret = _lib._objc_msgSend_63(
      _lib._class_NSCharacterSet1,
      _lib._sel_keyPathsForValuesAffectingValueForKey_1,
      key.pointer,
    );
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    return _lib._objc_msgSend_64(
      _lib._class_NSCharacterSet1,
      _lib._sel_automaticallyNotifiesObserversForKey_1,
      key.pointer,
    );
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
    AVFAudio _lib,
    NSArray keys,
    NSString dependentKey,
  ) {
    _lib._objc_msgSend_88(
      _lib._class_NSCharacterSet1,
      _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
      keys.pointer,
      dependentKey.pointer,
    );
  }

  static NSArray classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_85(
      _lib._class_NSCharacterSet1,
      _lib._sel_classFallbacksForKeyedArchiver1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSCharacterSet1,
      _lib._sel_classForKeyedUnarchiver1,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

abstract class NSLocaleLanguageDirection {
  static const int NSLocaleLanguageDirectionUnknown = 0;
  static const int NSLocaleLanguageDirectionLeftToRight = 1;
  static const int NSLocaleLanguageDirectionRightToLeft = 2;
  static const int NSLocaleLanguageDirectionTopToBottom = 3;
  static const int NSLocaleLanguageDirectionBottomToTop = 4;
}

abstract class NSURLBookmarkCreationOptions {
  static const int NSURLBookmarkCreationPreferFileIDResolution = 256;
  static const int NSURLBookmarkCreationMinimalBookmark = 512;
  static const int NSURLBookmarkCreationSuitableForBookmarkFile = 1024;
  static const int NSURLBookmarkCreationWithSecurityScope = 2048;
  static const int NSURLBookmarkCreationSecurityScopeAllowOnlyReadAccess = 4096;
  static const int NSURLBookmarkCreationWithoutImplicitSecurityScope =
      536870912;
}

abstract class NSURLBookmarkResolutionOptions {
  static const int NSURLBookmarkResolutionWithoutUI = 256;
  static const int NSURLBookmarkResolutionWithoutMounting = 512;
  static const int NSURLBookmarkResolutionWithSecurityScope = 1024;
  static const int NSURLBookmarkResolutionWithoutImplicitStartAccessing = 32768;
}

class NSURLHandle extends NSObject {
  NSURLHandle._(
    ffi.Pointer<objc.ObjCObject> pointer,
    AVFAudio lib, {
    bool retain = false,
    bool release = false,
  }) : super._(pointer, lib, retain: retain, release: release);

  /// Returns a [NSURLHandle] that points to the same underlying object as [other].
  static NSURLHandle castFrom<T extends objc.ObjCObjectBase>(
    AVFAudio lib,
    T other,
  ) {
    return NSURLHandle._(other.pointer, lib, retain: true, release: true);
  }

  /// Returns a [NSURLHandle] that wraps the given raw object pointer.
  static NSURLHandle castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCObject> other, {
    bool retain = false,
    bool release = false,
  }) {
    return NSURLHandle._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSURLHandle].
  static bool isInstance(AVFAudio lib, objc.ObjCObjectBase obj) {
    return lib._objc_msgSend_0(
      obj.pointer,
      lib._sel_isKindOfClass_1,
      lib._class_NSURLHandle1,
    );
  }

  static void registerURLHandleClass_(
    AVFAudio _lib,
    NSObject anURLHandleSubclass,
  ) {
    _lib._objc_msgSend_15(
      _lib._class_NSURLHandle1,
      _lib._sel_registerURLHandleClass_1,
      anURLHandleSubclass.pointer,
    );
  }

  static NSObject URLHandleClassForURL_(AVFAudio _lib, NSURL anURL) {
    final _ret = _lib._objc_msgSend_262(
      _lib._class_NSURLHandle1,
      _lib._sel_URLHandleClassForURL_1,
      anURL.pointer,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  int status() {
    return _lib._objc_msgSend_263(this.pointer, _lib._sel_status1);
  }

  NSString failureReason() {
    final _ret = _lib._objc_msgSend_21(this.pointer, _lib._sel_failureReason1);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  void addClient_(NSObject client) {
    _lib._objc_msgSend_15(this.pointer, _lib._sel_addClient_1, client.pointer);
  }

  void removeClient_(NSObject client) {
    _lib._objc_msgSend_15(
      this.pointer,
      _lib._sel_removeClient_1,
      client.pointer,
    );
  }

  void loadInBackground() {
    _lib._objc_msgSend_1(this.pointer, _lib._sel_loadInBackground1);
  }

  void cancelLoadInBackground() {
    _lib._objc_msgSend_1(this.pointer, _lib._sel_cancelLoadInBackground1);
  }

  NSData resourceData() {
    final _ret = _lib._objc_msgSend_43(this.pointer, _lib._sel_resourceData1);
    return NSData._(_ret, _lib, retain: true, release: true);
  }

  NSData availableResourceData() {
    final _ret = _lib._objc_msgSend_43(
      this.pointer,
      _lib._sel_availableResourceData1,
    );
    return NSData._(_ret, _lib, retain: true, release: true);
  }

  int expectedResourceDataSize() {
    return _lib._objc_msgSend_238(
      this.pointer,
      _lib._sel_expectedResourceDataSize1,
    );
  }

  void flushCachedData() {
    _lib._objc_msgSend_1(this.pointer, _lib._sel_flushCachedData1);
  }

  void backgroundLoadDidFailWithReason_(NSString reason) {
    _lib._objc_msgSend_247(
      this.pointer,
      _lib._sel_backgroundLoadDidFailWithReason_1,
      reason.pointer,
    );
  }

  void didLoadBytes_loadComplete_(NSData newBytes, bool yorn) {
    _lib._objc_msgSend_264(
      this.pointer,
      _lib._sel_didLoadBytes_loadComplete_1,
      newBytes.pointer,
      yorn,
    );
  }

  static bool canInitWithURL_(AVFAudio _lib, NSURL anURL) {
    return _lib._objc_msgSend_265(
      _lib._class_NSURLHandle1,
      _lib._sel_canInitWithURL_1,
      anURL.pointer,
    );
  }

  static NSURLHandle cachedHandleForURL_(AVFAudio _lib, NSURL anURL) {
    final _ret = _lib._objc_msgSend_266(
      _lib._class_NSURLHandle1,
      _lib._sel_cachedHandleForURL_1,
      anURL.pointer,
    );
    return NSURLHandle._(_ret, _lib, retain: true, release: true);
  }

  NSObject initWithURL_cached_(NSURL anURL, bool willCache) {
    final _ret = _lib._objc_msgSend_267(
      this.pointer,
      _lib._sel_initWithURL_cached_1,
      anURL.pointer,
      willCache,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject propertyForKey_(NSString propertyKey) {
    final _ret = _lib._objc_msgSend_31(
      this.pointer,
      _lib._sel_propertyForKey_1,
      propertyKey.pointer,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject propertyForKeyIfAvailable_(NSString propertyKey) {
    final _ret = _lib._objc_msgSend_31(
      this.pointer,
      _lib._sel_propertyForKeyIfAvailable_1,
      propertyKey.pointer,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  bool writeProperty_forKey_(NSObject propertyValue, NSString propertyKey) {
    return _lib._objc_msgSend_261(
      this.pointer,
      _lib._sel_writeProperty_forKey_1,
      propertyValue.pointer,
      propertyKey.pointer,
    );
  }

  bool writeData_(NSData data) {
    return _lib._objc_msgSend_24(
      this.pointer,
      _lib._sel_writeData_1,
      data.pointer,
    );
  }

  NSData loadInForeground() {
    final _ret = _lib._objc_msgSend_43(
      this.pointer,
      _lib._sel_loadInForeground1,
    );
    return NSData._(_ret, _lib, retain: true, release: true);
  }

  void beginLoadInBackground() {
    _lib._objc_msgSend_1(this.pointer, _lib._sel_beginLoadInBackground1);
  }

  void endLoadInBackground() {
    _lib._objc_msgSend_1(this.pointer, _lib._sel_endLoadInBackground1);
  }

  @override
  NSURLHandle init() {
    final _ret = _lib._objc_msgSend_2(this.pointer, _lib._sel_init1);
    return NSURLHandle._(_ret, _lib, retain: true, release: true);
  }

  static NSURLHandle new1(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSURLHandle1, _lib._sel_new1);
    return NSURLHandle._(_ret, _lib, retain: false, release: true);
  }

  static NSURLHandle allocWithZone_(AVFAudio _lib, ffi.Pointer<_NSZone> zone) {
    final _ret = _lib._objc_msgSend_3(
      _lib._class_NSURLHandle1,
      _lib._sel_allocWithZone_1,
      zone,
    );
    return NSURLHandle._(_ret, _lib, retain: false, release: true);
  }

  static NSURLHandle alloc(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSURLHandle1,
      _lib._sel_alloc1,
    );
    return NSURLHandle._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
    AVFAudio _lib,
    NSObject aTarget,
    ffi.Pointer<objc.ObjCSelector> aSelector,
    NSObject? anArgument,
  ) {
    _lib._objc_msgSend_14(
      _lib._class_NSURLHandle1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
      aTarget.pointer,
      aSelector,
      anArgument?.pointer ?? ffi.nullptr,
    );
  }

  static void cancelPreviousPerformRequestsWithTarget_(
    AVFAudio _lib,
    NSObject aTarget,
  ) {
    _lib._objc_msgSend_15(
      _lib._class_NSURLHandle1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_1,
      aTarget.pointer,
    );
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSURLHandle1,
      _lib._sel_accessInstanceVariablesDirectly1,
    );
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSURLHandle1,
      _lib._sel_useStoredAccessor1,
    );
  }

  static NSSet keyPathsForValuesAffectingValueForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    final _ret = _lib._objc_msgSend_63(
      _lib._class_NSURLHandle1,
      _lib._sel_keyPathsForValuesAffectingValueForKey_1,
      key.pointer,
    );
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    return _lib._objc_msgSend_64(
      _lib._class_NSURLHandle1,
      _lib._sel_automaticallyNotifiesObserversForKey_1,
      key.pointer,
    );
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
    AVFAudio _lib,
    NSArray keys,
    NSString dependentKey,
  ) {
    _lib._objc_msgSend_88(
      _lib._class_NSURLHandle1,
      _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
      keys.pointer,
      dependentKey.pointer,
    );
  }

  static NSArray classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_85(
      _lib._class_NSURLHandle1,
      _lib._sel_classFallbacksForKeyedArchiver1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSURLHandle1,
      _lib._sel_classForKeyedUnarchiver1,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

abstract class NSURLHandleStatus {
  static const int NSURLHandleNotLoaded = 0;
  static const int NSURLHandleLoadSucceeded = 1;
  static const int NSURLHandleLoadInProgress = 2;
  static const int NSURLHandleLoadFailed = 3;
}

abstract class NSDataWritingOptions {
  static const int NSDataWritingAtomic = 1;
  static const int NSDataWritingWithoutOverwriting = 2;
  static const int NSDataWritingFileProtectionNone = 268435456;
  static const int NSDataWritingFileProtectionComplete = 536870912;
  static const int NSDataWritingFileProtectionCompleteUnlessOpen = 805306368;
  static const int
  NSDataWritingFileProtectionCompleteUntilFirstUserAuthentication = 1073741824;
  static const int NSDataWritingFileProtectionCompleteWhenUserInactive =
      1342177280;
  static const int NSDataWritingFileProtectionMask = 4026531840;
  static const int NSAtomicWrite = 1;
}

abstract class NSDataSearchOptions {
  static const int NSDataSearchBackwards = 1;
  static const int NSDataSearchAnchored = 2;
}

void _ObjCBlock_ffiVoid_ffiVoid_NSRange_bool_fnPtrTrampoline(
  ffi.Pointer<objc.ObjCBlock> block,
  ffi.Pointer<ffi.Void> arg0,
  _NSRange arg1,
  ffi.Pointer<ffi.Bool> arg2,
) => block.ref.target
    .cast<
      ffi.NativeFunction<
        ffi.Void Function(
          ffi.Pointer<ffi.Void> arg0,
          _NSRange arg1,
          ffi.Pointer<ffi.Bool> arg2,
        )
      >
    >()
    .asFunction<
      void Function(ffi.Pointer<ffi.Void>, _NSRange, ffi.Pointer<ffi.Bool>)
    >()(arg0, arg1, arg2);
final _ObjCBlock_ffiVoid_ffiVoid_NSRange_bool_closureRegistry =
    <
      int,
      void Function(ffi.Pointer<ffi.Void>, _NSRange, ffi.Pointer<ffi.Bool>)
    >{};
int _ObjCBlock_ffiVoid_ffiVoid_NSRange_bool_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void> _ObjCBlock_ffiVoid_ffiVoid_NSRange_bool_registerClosure(
  void Function(ffi.Pointer<ffi.Void>, _NSRange, ffi.Pointer<ffi.Bool>) fn,
) {
  final id = ++_ObjCBlock_ffiVoid_ffiVoid_NSRange_bool_closureRegistryIndex;
  _ObjCBlock_ffiVoid_ffiVoid_NSRange_bool_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

void _ObjCBlock_ffiVoid_ffiVoid_NSRange_bool_closureTrampoline(
  ffi.Pointer<objc.ObjCBlock> block,
  ffi.Pointer<ffi.Void> arg0,
  _NSRange arg1,
  ffi.Pointer<ffi.Bool> arg2,
) => _ObjCBlock_ffiVoid_ffiVoid_NSRange_bool_closureRegistry[block
    .ref
    .target
    .address]!(arg0, arg1, arg2);

class ObjCBlock_ffiVoid_ffiVoid_NSRange_bool extends objc.ObjCBlockBase {
  ObjCBlock_ffiVoid_ffiVoid_NSRange_bool._(
    ffi.Pointer<objc.ObjCBlock> pointer,
    this._lib, {
    bool retain = false,
    bool release = true,
  }) : super(pointer, retain: retain, release: release);

  AVFAudio _lib;

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_ffiVoid_ffiVoid_NSRange_bool castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCBlock> pointer, {
    bool retain = false,
    bool release = false,
  }) {
    return ObjCBlock_ffiVoid_ffiVoid_NSRange_bool._(
      pointer,
      lib,
      retain: retain,
      release: release,
    );
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_ffiVoid_NSRange_bool.fromFunctionPointer(
    AVFAudio lib,
    ffi.Pointer<
      ffi.NativeFunction<
        ffi.Void Function(
          ffi.Pointer<ffi.Void> arg0,
          _NSRange arg1,
          ffi.Pointer<ffi.Bool> arg2,
        )
      >
    > ptr,
  ) : this._(objc.newBlock(
        _cFuncTrampoline ??=
            ffi.Pointer.fromFunction<
              ffi.Void Function(
                ffi.Pointer<objc.ObjCBlock>,
                ffi.Pointer<ffi.Void>,
                _NSRange,
                ffi.Pointer<ffi.Bool>,
              )
            >(_ObjCBlock_ffiVoid_ffiVoid_NSRange_bool_fnPtrTrampoline).cast(),
        ptr.cast(),
      ), lib);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_ffiVoid_NSRange_bool.fromFunction(
    AVFAudio lib,
    void Function(ffi.Pointer<ffi.Void>, _NSRange, ffi.Pointer<ffi.Bool>) fn,
  ) : this._(objc.newBlock(
        _dartFuncTrampoline ??=
            ffi.Pointer.fromFunction<
              ffi.Void Function(
                ffi.Pointer<objc.ObjCBlock>,
                ffi.Pointer<ffi.Void>,
                _NSRange,
                ffi.Pointer<ffi.Bool>,
              )
            >(_ObjCBlock_ffiVoid_ffiVoid_NSRange_bool_closureTrampoline).cast(),
        _ObjCBlock_ffiVoid_ffiVoid_NSRange_bool_registerClosure((
          ffi.Pointer<ffi.Void> arg0,
          _NSRange arg1,
          ffi.Pointer<ffi.Bool> arg2,
        ) => fn(arg0, arg1, arg2)),
      ), lib);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_ffiVoid_NSRange_bool.listener(
    AVFAudio lib,
    void Function(ffi.Pointer<ffi.Void>, _NSRange, ffi.Pointer<ffi.Bool>) fn,
  ) : this._(objc.newBlock(
        (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
              ffi.Void Function(
                ffi.Pointer<objc.ObjCBlock>,
                ffi.Pointer<ffi.Void>,
                _NSRange,
                ffi.Pointer<ffi.Bool>,
              )
            >.listener(
              _ObjCBlock_ffiVoid_ffiVoid_NSRange_bool_closureTrampoline,
            )..keepIsolateAlive = false)
            .nativeFunction
            .cast(),
        _ObjCBlock_ffiVoid_ffiVoid_NSRange_bool_registerClosure((
          ffi.Pointer<ffi.Void> arg0,
          _NSRange arg1,
          ffi.Pointer<ffi.Bool> arg2,
        ) => fn(arg0, arg1, arg2)),
      ), lib);
  static ffi.NativeCallable<
    ffi.Void Function(
      ffi.Pointer<objc.ObjCBlock>,
      ffi.Pointer<ffi.Void>,
      _NSRange,
      ffi.Pointer<ffi.Bool>,
    )
  >? _dartFuncListenerTrampoline;

  void call(
    ffi.Pointer<ffi.Void> arg0,
    _NSRange arg1,
    ffi.Pointer<ffi.Bool> arg2,
  ) => pointer.ref.invoke
      .cast<
        ffi.NativeFunction<
          ffi.Void Function(
            ffi.Pointer<objc.ObjCBlock> block,
            ffi.Pointer<ffi.Void> arg0,
            _NSRange arg1,
            ffi.Pointer<ffi.Bool> arg2,
          )
        >
      >()
      .asFunction<
        void Function(
          ffi.Pointer<objc.ObjCBlock>,
          ffi.Pointer<ffi.Void>,
          _NSRange,
          ffi.Pointer<ffi.Bool>,
        )
      >()(pointer, arg0, arg1, arg2);
}

abstract class NSDataReadingOptions {
  static const int NSDataReadingMappedIfSafe = 1;
  static const int NSDataReadingUncached = 2;
  static const int NSDataReadingMappedAlways = 8;
  static const int NSDataReadingMapped = 1;
  static const int NSMappedRead = 1;
  static const int NSUncachedRead = 2;
}

void _ObjCBlock_ffiVoid_ffiVoid_ffiUnsignedLong_fnPtrTrampoline(
  ffi.Pointer<objc.ObjCBlock> block,
  ffi.Pointer<ffi.Void> arg0,
  int arg1,
) => block.ref.target
    .cast<
      ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<ffi.Void> arg0, ffi.UnsignedLong arg1)
      >
    >()
    .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>()(arg0, arg1);
final _ObjCBlock_ffiVoid_ffiVoid_ffiUnsignedLong_closureRegistry =
    <int, void Function(ffi.Pointer<ffi.Void>, int)>{};
int _ObjCBlock_ffiVoid_ffiVoid_ffiUnsignedLong_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void>
_ObjCBlock_ffiVoid_ffiVoid_ffiUnsignedLong_registerClosure(
  void Function(ffi.Pointer<ffi.Void>, int) fn,
) {
  final id = ++_ObjCBlock_ffiVoid_ffiVoid_ffiUnsignedLong_closureRegistryIndex;
  _ObjCBlock_ffiVoid_ffiVoid_ffiUnsignedLong_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

void _ObjCBlock_ffiVoid_ffiVoid_ffiUnsignedLong_closureTrampoline(
  ffi.Pointer<objc.ObjCBlock> block,
  ffi.Pointer<ffi.Void> arg0,
  int arg1,
) => _ObjCBlock_ffiVoid_ffiVoid_ffiUnsignedLong_closureRegistry[block
    .ref
    .target
    .address]!(arg0, arg1);

class ObjCBlock_ffiVoid_ffiVoid_ffiUnsignedLong extends objc.ObjCBlockBase {
  ObjCBlock_ffiVoid_ffiVoid_ffiUnsignedLong._(
    ffi.Pointer<objc.ObjCBlock> pointer,
    this._lib, {
    bool retain = false,
    bool release = true,
  }) : super(pointer, retain: retain, release: release);

  AVFAudio _lib;

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_ffiVoid_ffiVoid_ffiUnsignedLong castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCBlock> pointer, {
    bool retain = false,
    bool release = false,
  }) {
    return ObjCBlock_ffiVoid_ffiVoid_ffiUnsignedLong._(
      pointer,
      lib,
      retain: retain,
      release: release,
    );
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_ffiVoid_ffiUnsignedLong.fromFunctionPointer(
    AVFAudio lib,
    ffi.Pointer<
      ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<ffi.Void> arg0, ffi.UnsignedLong arg1)
      >
    > ptr,
  ) : this._(objc.newBlock(
        _cFuncTrampoline ??=
            ffi.Pointer.fromFunction<
              ffi.Void Function(
                ffi.Pointer<objc.ObjCBlock>,
                ffi.Pointer<ffi.Void>,
                ffi.UnsignedLong,
              )
            >(
              _ObjCBlock_ffiVoid_ffiVoid_ffiUnsignedLong_fnPtrTrampoline,
            ).cast(),
        ptr.cast(),
      ), lib);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_ffiVoid_ffiUnsignedLong.fromFunction(
    AVFAudio lib,
    void Function(ffi.Pointer<ffi.Void>, int) fn,
  ) : this._(objc.newBlock(
        _dartFuncTrampoline ??=
            ffi.Pointer.fromFunction<
              ffi.Void Function(
                ffi.Pointer<objc.ObjCBlock>,
                ffi.Pointer<ffi.Void>,
                ffi.UnsignedLong,
              )
            >(
              _ObjCBlock_ffiVoid_ffiVoid_ffiUnsignedLong_closureTrampoline,
            ).cast(),
        _ObjCBlock_ffiVoid_ffiVoid_ffiUnsignedLong_registerClosure((
          ffi.Pointer<ffi.Void> arg0,
          int arg1,
        ) => fn(arg0, arg1)),
      ), lib);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_ffiVoid_ffiUnsignedLong.listener(
    AVFAudio lib,
    void Function(ffi.Pointer<ffi.Void>, int) fn,
  ) : this._(objc.newBlock(
        (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
              ffi.Void Function(
                ffi.Pointer<objc.ObjCBlock>,
                ffi.Pointer<ffi.Void>,
                ffi.UnsignedLong,
              )
            >.listener(
              _ObjCBlock_ffiVoid_ffiVoid_ffiUnsignedLong_closureTrampoline,
            )..keepIsolateAlive = false)
            .nativeFunction
            .cast(),
        _ObjCBlock_ffiVoid_ffiVoid_ffiUnsignedLong_registerClosure((
          ffi.Pointer<ffi.Void> arg0,
          int arg1,
        ) => fn(arg0, arg1)),
      ), lib);
  static ffi.NativeCallable<
    ffi.Void Function(
      ffi.Pointer<objc.ObjCBlock>,
      ffi.Pointer<ffi.Void>,
      ffi.UnsignedLong,
    )
  >? _dartFuncListenerTrampoline;

  void call(ffi.Pointer<ffi.Void> arg0, int arg1) => pointer.ref.invoke
      .cast<
        ffi.NativeFunction<
          ffi.Void Function(
            ffi.Pointer<objc.ObjCBlock> block,
            ffi.Pointer<ffi.Void> arg0,
            ffi.UnsignedLong arg1,
          )
        >
      >()
      .asFunction<
        void Function(ffi.Pointer<objc.ObjCBlock>, ffi.Pointer<ffi.Void>, int)
      >()(pointer, arg0, arg1);
}

abstract class NSDataBase64DecodingOptions {
  static const int NSDataBase64DecodingIgnoreUnknownCharacters = 1;
}

abstract class NSDataBase64EncodingOptions {
  static const int NSDataBase64Encoding64CharacterLineLength = 1;
  static const int NSDataBase64Encoding76CharacterLineLength = 2;
  static const int NSDataBase64EncodingEndLineWithCarriageReturn = 16;
  static const int NSDataBase64EncodingEndLineWithLineFeed = 32;
}

abstract class NSDataCompressionAlgorithm {
  static const int NSDataCompressionAlgorithmLZFSE = 0;
  static const int NSDataCompressionAlgorithmLZ4 = 1;
  static const int NSDataCompressionAlgorithmLZMA = 2;
  static const int NSDataCompressionAlgorithmZlib = 3;
}

abstract class NSDecodingFailurePolicy {
  static const int NSDecodingFailurePolicyRaiseException = 0;
  static const int NSDecodingFailurePolicySetErrorAndReturn = 1;
}

abstract class NSStringCompareOptions {
  static const int NSCaseInsensitiveSearch = 1;
  static const int NSLiteralSearch = 2;
  static const int NSBackwardsSearch = 4;
  static const int NSAnchoredSearch = 8;
  static const int NSNumericSearch = 64;
  static const int NSDiacriticInsensitiveSearch = 128;
  static const int NSWidthInsensitiveSearch = 256;
  static const int NSForcedOrderingSearch = 512;
  static const int NSRegularExpressionSearch = 1024;
}

abstract class NSStringEnumerationOptions {
  static const int NSStringEnumerationByLines = 0;
  static const int NSStringEnumerationByParagraphs = 1;
  static const int NSStringEnumerationByComposedCharacterSequences = 2;
  static const int NSStringEnumerationByWords = 3;
  static const int NSStringEnumerationBySentences = 4;
  static const int NSStringEnumerationByCaretPositions = 5;
  static const int NSStringEnumerationByDeletionClusters = 6;
  static const int NSStringEnumerationReverse = 256;
  static const int NSStringEnumerationSubstringNotRequired = 512;
  static const int NSStringEnumerationLocalized = 1024;
}

void _ObjCBlock_ffiVoid_NSString_NSRange_NSRange_bool_fnPtrTrampoline(
  ffi.Pointer<objc.ObjCBlock> block,
  ffi.Pointer<objc.ObjCObject> arg0,
  _NSRange arg1,
  _NSRange arg2,
  ffi.Pointer<ffi.Bool> arg3,
) => block.ref.target
    .cast<
      ffi.NativeFunction<
        ffi.Void Function(
          ffi.Pointer<objc.ObjCObject> arg0,
          _NSRange arg1,
          _NSRange arg2,
          ffi.Pointer<ffi.Bool> arg3,
        )
      >
    >()
    .asFunction<
      void Function(
        ffi.Pointer<objc.ObjCObject>,
        _NSRange,
        _NSRange,
        ffi.Pointer<ffi.Bool>,
      )
    >()(arg0, arg1, arg2, arg3);
final _ObjCBlock_ffiVoid_NSString_NSRange_NSRange_bool_closureRegistry =
    <
      int,
      void Function(
        ffi.Pointer<objc.ObjCObject>,
        _NSRange,
        _NSRange,
        ffi.Pointer<ffi.Bool>,
      )
    >{};
int _ObjCBlock_ffiVoid_NSString_NSRange_NSRange_bool_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void>
_ObjCBlock_ffiVoid_NSString_NSRange_NSRange_bool_registerClosure(
  void Function(
    ffi.Pointer<objc.ObjCObject>,
    _NSRange,
    _NSRange,
    ffi.Pointer<ffi.Bool>,
  ) fn,
) {
  final id =
      ++_ObjCBlock_ffiVoid_NSString_NSRange_NSRange_bool_closureRegistryIndex;
  _ObjCBlock_ffiVoid_NSString_NSRange_NSRange_bool_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

void _ObjCBlock_ffiVoid_NSString_NSRange_NSRange_bool_closureTrampoline(
  ffi.Pointer<objc.ObjCBlock> block,
  ffi.Pointer<objc.ObjCObject> arg0,
  _NSRange arg1,
  _NSRange arg2,
  ffi.Pointer<ffi.Bool> arg3,
) => _ObjCBlock_ffiVoid_NSString_NSRange_NSRange_bool_closureRegistry[block
    .ref
    .target
    .address]!(arg0, arg1, arg2, arg3);

class ObjCBlock_ffiVoid_NSString_NSRange_NSRange_bool
    extends objc.ObjCBlockBase {
  ObjCBlock_ffiVoid_NSString_NSRange_NSRange_bool._(
    ffi.Pointer<objc.ObjCBlock> pointer,
    this._lib, {
    bool retain = false,
    bool release = true,
  }) : super(pointer, retain: retain, release: release);

  AVFAudio _lib;

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_ffiVoid_NSString_NSRange_NSRange_bool castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCBlock> pointer, {
    bool retain = false,
    bool release = false,
  }) {
    return ObjCBlock_ffiVoid_NSString_NSRange_NSRange_bool._(
      pointer,
      lib,
      retain: retain,
      release: release,
    );
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSString_NSRange_NSRange_bool.fromFunctionPointer(
    AVFAudio lib,
    ffi.Pointer<
      ffi.NativeFunction<
        ffi.Void Function(
          ffi.Pointer<objc.ObjCObject> arg0,
          _NSRange arg1,
          _NSRange arg2,
          ffi.Pointer<ffi.Bool> arg3,
        )
      >
    > ptr,
  ) : this._(objc.newBlock(
        _cFuncTrampoline ??=
            ffi.Pointer.fromFunction<
              ffi.Void Function(
                ffi.Pointer<objc.ObjCBlock>,
                ffi.Pointer<objc.ObjCObject>,
                _NSRange,
                _NSRange,
                ffi.Pointer<ffi.Bool>,
              )
            >(
              _ObjCBlock_ffiVoid_NSString_NSRange_NSRange_bool_fnPtrTrampoline,
            ).cast(),
        ptr.cast(),
      ), lib);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSString_NSRange_NSRange_bool.fromFunction(
    AVFAudio lib,
    void Function(NSString?, _NSRange, _NSRange, ffi.Pointer<ffi.Bool>) fn,
  ) : this._(objc.newBlock(
        _dartFuncTrampoline ??=
            ffi.Pointer.fromFunction<
              ffi.Void Function(
                ffi.Pointer<objc.ObjCBlock>,
                ffi.Pointer<objc.ObjCObject>,
                _NSRange,
                _NSRange,
                ffi.Pointer<ffi.Bool>,
              )
            >(
              _ObjCBlock_ffiVoid_NSString_NSRange_NSRange_bool_closureTrampoline,
            ).cast(),
        _ObjCBlock_ffiVoid_NSString_NSRange_NSRange_bool_registerClosure((
          ffi.Pointer<objc.ObjCObject> arg0,
          _NSRange arg1,
          _NSRange arg2,
          ffi.Pointer<ffi.Bool> arg3,
        ) => fn(
          arg0.address == 0
              ? null
              : NSString._(arg0, lib, retain: true, release: true),
          arg1,
          arg2,
          arg3,
        )),
      ), lib);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_NSString_NSRange_NSRange_bool.listener(
    AVFAudio lib,
    void Function(NSString?, _NSRange, _NSRange, ffi.Pointer<ffi.Bool>) fn,
  ) : this._(objc.newBlock(
        (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
              ffi.Void Function(
                ffi.Pointer<objc.ObjCBlock>,
                ffi.Pointer<objc.ObjCObject>,
                _NSRange,
                _NSRange,
                ffi.Pointer<ffi.Bool>,
              )
            >.listener(
              _ObjCBlock_ffiVoid_NSString_NSRange_NSRange_bool_closureTrampoline,
            )..keepIsolateAlive = false)
            .nativeFunction
            .cast(),
        _ObjCBlock_ffiVoid_NSString_NSRange_NSRange_bool_registerClosure((
          ffi.Pointer<objc.ObjCObject> arg0,
          _NSRange arg1,
          _NSRange arg2,
          ffi.Pointer<ffi.Bool> arg3,
        ) => fn(
          arg0.address == 0
              ? null
              : NSString._(arg0, lib, retain: true, release: true),
          arg1,
          arg2,
          arg3,
        )),
      ), lib);
  static ffi.NativeCallable<
    ffi.Void Function(
      ffi.Pointer<objc.ObjCBlock>,
      ffi.Pointer<objc.ObjCObject>,
      _NSRange,
      _NSRange,
      ffi.Pointer<ffi.Bool>,
    )
  >? _dartFuncListenerTrampoline;

  void call(
    NSString? arg0,
    _NSRange arg1,
    _NSRange arg2,
    ffi.Pointer<ffi.Bool> arg3,
  ) => pointer.ref.invoke
      .cast<
        ffi.NativeFunction<
          ffi.Void Function(
            ffi.Pointer<objc.ObjCBlock> block,
            ffi.Pointer<objc.ObjCObject> arg0,
            _NSRange arg1,
            _NSRange arg2,
            ffi.Pointer<ffi.Bool> arg3,
          )
        >
      >()
      .asFunction<
        void Function(
          ffi.Pointer<objc.ObjCBlock>,
          ffi.Pointer<objc.ObjCObject>,
          _NSRange,
          _NSRange,
          ffi.Pointer<ffi.Bool>,
        )
      >()(pointer, arg0?.pointer ?? ffi.nullptr, arg1, arg2, arg3);
}

void _ObjCBlock_ffiVoid_NSString_bool_fnPtrTrampoline(
  ffi.Pointer<objc.ObjCBlock> block,
  ffi.Pointer<objc.ObjCObject> arg0,
  ffi.Pointer<ffi.Bool> arg1,
) => block.ref.target
    .cast<
      ffi.NativeFunction<
        ffi.Void Function(
          ffi.Pointer<objc.ObjCObject> arg0,
          ffi.Pointer<ffi.Bool> arg1,
        )
      >
    >()
    .asFunction<
      void Function(ffi.Pointer<objc.ObjCObject>, ffi.Pointer<ffi.Bool>)
    >()(arg0, arg1);
final _ObjCBlock_ffiVoid_NSString_bool_closureRegistry =
    <int, void Function(ffi.Pointer<objc.ObjCObject>, ffi.Pointer<ffi.Bool>)>{};
int _ObjCBlock_ffiVoid_NSString_bool_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void> _ObjCBlock_ffiVoid_NSString_bool_registerClosure(
  void Function(ffi.Pointer<objc.ObjCObject>, ffi.Pointer<ffi.Bool>) fn,
) {
  final id = ++_ObjCBlock_ffiVoid_NSString_bool_closureRegistryIndex;
  _ObjCBlock_ffiVoid_NSString_bool_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

void _ObjCBlock_ffiVoid_NSString_bool_closureTrampoline(
  ffi.Pointer<objc.ObjCBlock> block,
  ffi.Pointer<objc.ObjCObject> arg0,
  ffi.Pointer<ffi.Bool> arg1,
) => _ObjCBlock_ffiVoid_NSString_bool_closureRegistry[block
    .ref
    .target
    .address]!(arg0, arg1);

class ObjCBlock_ffiVoid_NSString_bool extends objc.ObjCBlockBase {
  ObjCBlock_ffiVoid_NSString_bool._(
    ffi.Pointer<objc.ObjCBlock> pointer,
    this._lib, {
    bool retain = false,
    bool release = true,
  }) : super(pointer, retain: retain, release: release);

  AVFAudio _lib;

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_ffiVoid_NSString_bool castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCBlock> pointer, {
    bool retain = false,
    bool release = false,
  }) {
    return ObjCBlock_ffiVoid_NSString_bool._(
      pointer,
      lib,
      retain: retain,
      release: release,
    );
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSString_bool.fromFunctionPointer(
    AVFAudio lib,
    ffi.Pointer<
      ffi.NativeFunction<
        ffi.Void Function(
          ffi.Pointer<objc.ObjCObject> arg0,
          ffi.Pointer<ffi.Bool> arg1,
        )
      >
    > ptr,
  ) : this._(objc.newBlock(
        _cFuncTrampoline ??=
            ffi.Pointer.fromFunction<
              ffi.Void Function(
                ffi.Pointer<objc.ObjCBlock>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<ffi.Bool>,
              )
            >(_ObjCBlock_ffiVoid_NSString_bool_fnPtrTrampoline).cast(),
        ptr.cast(),
      ), lib);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSString_bool.fromFunction(
    AVFAudio lib,
    void Function(NSString, ffi.Pointer<ffi.Bool>) fn,
  ) : this._(objc.newBlock(
        _dartFuncTrampoline ??=
            ffi.Pointer.fromFunction<
              ffi.Void Function(
                ffi.Pointer<objc.ObjCBlock>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<ffi.Bool>,
              )
            >(_ObjCBlock_ffiVoid_NSString_bool_closureTrampoline).cast(),
        _ObjCBlock_ffiVoid_NSString_bool_registerClosure((
          ffi.Pointer<objc.ObjCObject> arg0,
          ffi.Pointer<ffi.Bool> arg1,
        ) => fn(NSString._(arg0, lib, retain: true, release: true), arg1)),
      ), lib);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_NSString_bool.listener(
    AVFAudio lib,
    void Function(NSString, ffi.Pointer<ffi.Bool>) fn,
  ) : this._(objc.newBlock(
        (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
              ffi.Void Function(
                ffi.Pointer<objc.ObjCBlock>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<ffi.Bool>,
              )
            >.listener(
              _ObjCBlock_ffiVoid_NSString_bool_closureTrampoline,
            )..keepIsolateAlive = false)
            .nativeFunction
            .cast(),
        _ObjCBlock_ffiVoid_NSString_bool_registerClosure((
          ffi.Pointer<objc.ObjCObject> arg0,
          ffi.Pointer<ffi.Bool> arg1,
        ) => fn(NSString._(arg0, lib, retain: true, release: true), arg1)),
      ), lib);
  static ffi.NativeCallable<
    ffi.Void Function(
      ffi.Pointer<objc.ObjCBlock>,
      ffi.Pointer<objc.ObjCObject>,
      ffi.Pointer<ffi.Bool>,
    )
  >? _dartFuncListenerTrampoline;

  void call(NSString arg0, ffi.Pointer<ffi.Bool> arg1) => pointer.ref.invoke
      .cast<
        ffi.NativeFunction<
          ffi.Void Function(
            ffi.Pointer<objc.ObjCBlock> block,
            ffi.Pointer<objc.ObjCObject> arg0,
            ffi.Pointer<ffi.Bool> arg1,
          )
        >
      >()
      .asFunction<
        void Function(
          ffi.Pointer<objc.ObjCBlock>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<ffi.Bool>,
        )
      >()(pointer, arg0.pointer, arg1);
}

abstract class NSStringEncodingConversionOptions {
  static const int NSStringEncodingConversionAllowLossy = 1;
  static const int NSStringEncodingConversionExternalRepresentation = 2;
}

void _ObjCBlock_ffiVoid_ffiUnsignedShort_ffiUnsignedLong_fnPtrTrampoline(
  ffi.Pointer<objc.ObjCBlock> block,
  ffi.Pointer<ffi.UnsignedShort> arg0,
  int arg1,
) => block.ref.target
    .cast<
      ffi.NativeFunction<
        ffi.Void Function(
          ffi.Pointer<ffi.UnsignedShort> arg0,
          ffi.UnsignedLong arg1,
        )
      >
    >()
    .asFunction<void Function(ffi.Pointer<ffi.UnsignedShort>, int)>()(
  arg0,
  arg1,
);
final _ObjCBlock_ffiVoid_ffiUnsignedShort_ffiUnsignedLong_closureRegistry =
    <int, void Function(ffi.Pointer<ffi.UnsignedShort>, int)>{};
int _ObjCBlock_ffiVoid_ffiUnsignedShort_ffiUnsignedLong_closureRegistryIndex =
    0;
ffi.Pointer<ffi.Void>
_ObjCBlock_ffiVoid_ffiUnsignedShort_ffiUnsignedLong_registerClosure(
  void Function(ffi.Pointer<ffi.UnsignedShort>, int) fn,
) {
  final id =
      ++_ObjCBlock_ffiVoid_ffiUnsignedShort_ffiUnsignedLong_closureRegistryIndex;
  _ObjCBlock_ffiVoid_ffiUnsignedShort_ffiUnsignedLong_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

void _ObjCBlock_ffiVoid_ffiUnsignedShort_ffiUnsignedLong_closureTrampoline(
  ffi.Pointer<objc.ObjCBlock> block,
  ffi.Pointer<ffi.UnsignedShort> arg0,
  int arg1,
) => _ObjCBlock_ffiVoid_ffiUnsignedShort_ffiUnsignedLong_closureRegistry[block
    .ref
    .target
    .address]!(arg0, arg1);

class ObjCBlock_ffiVoid_ffiUnsignedShort_ffiUnsignedLong
    extends objc.ObjCBlockBase {
  ObjCBlock_ffiVoid_ffiUnsignedShort_ffiUnsignedLong._(
    ffi.Pointer<objc.ObjCBlock> pointer,
    this._lib, {
    bool retain = false,
    bool release = true,
  }) : super(pointer, retain: retain, release: release);

  AVFAudio _lib;

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_ffiVoid_ffiUnsignedShort_ffiUnsignedLong castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCBlock> pointer, {
    bool retain = false,
    bool release = false,
  }) {
    return ObjCBlock_ffiVoid_ffiUnsignedShort_ffiUnsignedLong._(
      pointer,
      lib,
      retain: retain,
      release: release,
    );
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_ffiUnsignedShort_ffiUnsignedLong.fromFunctionPointer(
    AVFAudio lib,
    ffi.Pointer<
      ffi.NativeFunction<
        ffi.Void Function(
          ffi.Pointer<ffi.UnsignedShort> arg0,
          ffi.UnsignedLong arg1,
        )
      >
    > ptr,
  ) : this._(objc.newBlock(
        _cFuncTrampoline ??=
            ffi.Pointer.fromFunction<
              ffi.Void Function(
                ffi.Pointer<objc.ObjCBlock>,
                ffi.Pointer<ffi.UnsignedShort>,
                ffi.UnsignedLong,
              )
            >(
              _ObjCBlock_ffiVoid_ffiUnsignedShort_ffiUnsignedLong_fnPtrTrampoline,
            ).cast(),
        ptr.cast(),
      ), lib);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_ffiUnsignedShort_ffiUnsignedLong.fromFunction(
    AVFAudio lib,
    void Function(ffi.Pointer<ffi.UnsignedShort>, int) fn,
  ) : this._(objc.newBlock(
        _dartFuncTrampoline ??=
            ffi.Pointer.fromFunction<
              ffi.Void Function(
                ffi.Pointer<objc.ObjCBlock>,
                ffi.Pointer<ffi.UnsignedShort>,
                ffi.UnsignedLong,
              )
            >(
              _ObjCBlock_ffiVoid_ffiUnsignedShort_ffiUnsignedLong_closureTrampoline,
            ).cast(),
        _ObjCBlock_ffiVoid_ffiUnsignedShort_ffiUnsignedLong_registerClosure((
          ffi.Pointer<ffi.UnsignedShort> arg0,
          int arg1,
        ) => fn(arg0, arg1)),
      ), lib);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_ffiUnsignedShort_ffiUnsignedLong.listener(
    AVFAudio lib,
    void Function(ffi.Pointer<ffi.UnsignedShort>, int) fn,
  ) : this._(objc.newBlock(
        (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
              ffi.Void Function(
                ffi.Pointer<objc.ObjCBlock>,
                ffi.Pointer<ffi.UnsignedShort>,
                ffi.UnsignedLong,
              )
            >.listener(
              _ObjCBlock_ffiVoid_ffiUnsignedShort_ffiUnsignedLong_closureTrampoline,
            )..keepIsolateAlive = false)
            .nativeFunction
            .cast(),
        _ObjCBlock_ffiVoid_ffiUnsignedShort_ffiUnsignedLong_registerClosure((
          ffi.Pointer<ffi.UnsignedShort> arg0,
          int arg1,
        ) => fn(arg0, arg1)),
      ), lib);
  static ffi.NativeCallable<
    ffi.Void Function(
      ffi.Pointer<objc.ObjCBlock>,
      ffi.Pointer<ffi.UnsignedShort>,
      ffi.UnsignedLong,
    )
  >? _dartFuncListenerTrampoline;

  void call(ffi.Pointer<ffi.UnsignedShort> arg0, int arg1) => pointer.ref.invoke
      .cast<
        ffi.NativeFunction<
          ffi.Void Function(
            ffi.Pointer<objc.ObjCBlock> block,
            ffi.Pointer<ffi.UnsignedShort> arg0,
            ffi.UnsignedLong arg1,
          )
        >
      >()
      .asFunction<
        void Function(
          ffi.Pointer<objc.ObjCBlock>,
          ffi.Pointer<ffi.UnsignedShort>,
          int,
        )
      >()(pointer, arg0, arg1);
}

abstract class NSLinguisticTaggerOptions {
  static const int NSLinguisticTaggerOmitWords = 1;
  static const int NSLinguisticTaggerOmitPunctuation = 2;
  static const int NSLinguisticTaggerOmitWhitespace = 4;
  static const int NSLinguisticTaggerOmitOther = 8;
  static const int NSLinguisticTaggerJoinNames = 16;
}

class NSOrthography extends NSObject {
  NSOrthography._(
    ffi.Pointer<objc.ObjCObject> pointer,
    AVFAudio lib, {
    bool retain = false,
    bool release = false,
  }) : super._(pointer, lib, retain: retain, release: release);

  /// Returns a [NSOrthography] that points to the same underlying object as [other].
  static NSOrthography castFrom<T extends objc.ObjCObjectBase>(
    AVFAudio lib,
    T other,
  ) {
    return NSOrthography._(other.pointer, lib, retain: true, release: true);
  }

  /// Returns a [NSOrthography] that wraps the given raw object pointer.
  static NSOrthography castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCObject> other, {
    bool retain = false,
    bool release = false,
  }) {
    return NSOrthography._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSOrthography].
  static bool isInstance(AVFAudio lib, objc.ObjCObjectBase obj) {
    return lib._objc_msgSend_0(
      obj.pointer,
      lib._sel_isKindOfClass_1,
      lib._class_NSOrthography1,
    );
  }

  NSString get dominantScript {
    final _ret = _lib._objc_msgSend_21(this.pointer, _lib._sel_dominantScript1);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSDictionary get languageMap {
    final _ret = _lib._objc_msgSend_181(this.pointer, _lib._sel_languageMap1);
    return NSDictionary._(_ret, _lib, retain: true, release: true);
  }

  NSOrthography initWithDominantScript_languageMap_(
    NSString script,
    NSDictionary map,
  ) {
    final _ret = _lib._objc_msgSend_400(
      this.pointer,
      _lib._sel_initWithDominantScript_languageMap_1,
      script.pointer,
      map.pointer,
    );
    return NSOrthography._(_ret, _lib, retain: true, release: true);
  }

  NSOrthography? initWithCoder_(NSCoder coder) {
    final _ret = _lib._objc_msgSend_47(
      this.pointer,
      _lib._sel_initWithCoder_1,
      coder.pointer,
    );
    return _ret.address == 0
        ? null
        : NSOrthography._(_ret, _lib, retain: true, release: true);
  }

  NSArray? languagesForScript_(NSString script) {
    final _ret = _lib._objc_msgSend_132(
      this.pointer,
      _lib._sel_languagesForScript_1,
      script.pointer,
    );
    return _ret.address == 0
        ? null
        : NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSString? dominantLanguageForScript_(NSString script) {
    final _ret = _lib._objc_msgSend_186(
      this.pointer,
      _lib._sel_dominantLanguageForScript_1,
      script.pointer,
    );
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString get dominantLanguage {
    final _ret = _lib._objc_msgSend_21(
      this.pointer,
      _lib._sel_dominantLanguage1,
    );
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSArray get allScripts {
    final _ret = _lib._objc_msgSend_85(this.pointer, _lib._sel_allScripts1);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSArray get allLanguages {
    final _ret = _lib._objc_msgSend_85(this.pointer, _lib._sel_allLanguages1);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSOrthography defaultOrthographyForLanguage_(
    AVFAudio _lib,
    NSString language,
  ) {
    final _ret = _lib._objc_msgSend_31(
      _lib._class_NSOrthography1,
      _lib._sel_defaultOrthographyForLanguage_1,
      language.pointer,
    );
    return NSOrthography._(_ret, _lib, retain: true, release: true);
  }

  static NSOrthography orthographyWithDominantScript_languageMap_(
    AVFAudio _lib,
    NSString script,
    NSDictionary map,
  ) {
    final _ret = _lib._objc_msgSend_400(
      _lib._class_NSOrthography1,
      _lib._sel_orthographyWithDominantScript_languageMap_1,
      script.pointer,
      map.pointer,
    );
    return NSOrthography._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSOrthography init() {
    final _ret = _lib._objc_msgSend_2(this.pointer, _lib._sel_init1);
    return NSOrthography._(_ret, _lib, retain: true, release: true);
  }

  static NSOrthography new1(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSOrthography1,
      _lib._sel_new1,
    );
    return NSOrthography._(_ret, _lib, retain: false, release: true);
  }

  static NSOrthography allocWithZone_(
    AVFAudio _lib,
    ffi.Pointer<_NSZone> zone,
  ) {
    final _ret = _lib._objc_msgSend_3(
      _lib._class_NSOrthography1,
      _lib._sel_allocWithZone_1,
      zone,
    );
    return NSOrthography._(_ret, _lib, retain: false, release: true);
  }

  static NSOrthography alloc(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSOrthography1,
      _lib._sel_alloc1,
    );
    return NSOrthography._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
    AVFAudio _lib,
    NSObject aTarget,
    ffi.Pointer<objc.ObjCSelector> aSelector,
    NSObject? anArgument,
  ) {
    _lib._objc_msgSend_14(
      _lib._class_NSOrthography1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
      aTarget.pointer,
      aSelector,
      anArgument?.pointer ?? ffi.nullptr,
    );
  }

  static void cancelPreviousPerformRequestsWithTarget_(
    AVFAudio _lib,
    NSObject aTarget,
  ) {
    _lib._objc_msgSend_15(
      _lib._class_NSOrthography1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_1,
      aTarget.pointer,
    );
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSOrthography1,
      _lib._sel_accessInstanceVariablesDirectly1,
    );
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSOrthography1,
      _lib._sel_useStoredAccessor1,
    );
  }

  static NSSet keyPathsForValuesAffectingValueForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    final _ret = _lib._objc_msgSend_63(
      _lib._class_NSOrthography1,
      _lib._sel_keyPathsForValuesAffectingValueForKey_1,
      key.pointer,
    );
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    return _lib._objc_msgSend_64(
      _lib._class_NSOrthography1,
      _lib._sel_automaticallyNotifiesObserversForKey_1,
      key.pointer,
    );
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
    AVFAudio _lib,
    NSArray keys,
    NSString dependentKey,
  ) {
    _lib._objc_msgSend_88(
      _lib._class_NSOrthography1,
      _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
      keys.pointer,
      dependentKey.pointer,
    );
  }

  static NSArray classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_85(
      _lib._class_NSOrthography1,
      _lib._sel_classFallbacksForKeyedArchiver1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSOrthography1,
      _lib._sel_classForKeyedUnarchiver1,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

void _ObjCBlock_ffiVoid_objcObjCObject_bool_fnPtrTrampoline(
  ffi.Pointer<objc.ObjCBlock> block,
  ffi.Pointer<objc.ObjCObject> arg0,
  ffi.Pointer<ffi.Bool> arg1,
) => block.ref.target
    .cast<
      ffi.NativeFunction<
        ffi.Void Function(
          ffi.Pointer<objc.ObjCObject> arg0,
          ffi.Pointer<ffi.Bool> arg1,
        )
      >
    >()
    .asFunction<
      void Function(ffi.Pointer<objc.ObjCObject>, ffi.Pointer<ffi.Bool>)
    >()(arg0, arg1);
final _ObjCBlock_ffiVoid_objcObjCObject_bool_closureRegistry =
    <int, void Function(ffi.Pointer<objc.ObjCObject>, ffi.Pointer<ffi.Bool>)>{};
int _ObjCBlock_ffiVoid_objcObjCObject_bool_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void> _ObjCBlock_ffiVoid_objcObjCObject_bool_registerClosure(
  void Function(ffi.Pointer<objc.ObjCObject>, ffi.Pointer<ffi.Bool>) fn,
) {
  final id = ++_ObjCBlock_ffiVoid_objcObjCObject_bool_closureRegistryIndex;
  _ObjCBlock_ffiVoid_objcObjCObject_bool_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

void _ObjCBlock_ffiVoid_objcObjCObject_bool_closureTrampoline(
  ffi.Pointer<objc.ObjCBlock> block,
  ffi.Pointer<objc.ObjCObject> arg0,
  ffi.Pointer<ffi.Bool> arg1,
) => _ObjCBlock_ffiVoid_objcObjCObject_bool_closureRegistry[block
    .ref
    .target
    .address]!(arg0, arg1);

class ObjCBlock_ffiVoid_objcObjCObject_bool extends objc.ObjCBlockBase {
  ObjCBlock_ffiVoid_objcObjCObject_bool._(
    ffi.Pointer<objc.ObjCBlock> pointer,
    this._lib, {
    bool retain = false,
    bool release = true,
  }) : super(pointer, retain: retain, release: release);

  AVFAudio _lib;

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_ffiVoid_objcObjCObject_bool castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCBlock> pointer, {
    bool retain = false,
    bool release = false,
  }) {
    return ObjCBlock_ffiVoid_objcObjCObject_bool._(
      pointer,
      lib,
      retain: retain,
      release: release,
    );
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_objcObjCObject_bool.fromFunctionPointer(
    AVFAudio lib,
    ffi.Pointer<
      ffi.NativeFunction<
        ffi.Void Function(
          ffi.Pointer<objc.ObjCObject> arg0,
          ffi.Pointer<ffi.Bool> arg1,
        )
      >
    > ptr,
  ) : this._(objc.newBlock(
        _cFuncTrampoline ??=
            ffi.Pointer.fromFunction<
              ffi.Void Function(
                ffi.Pointer<objc.ObjCBlock>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<ffi.Bool>,
              )
            >(_ObjCBlock_ffiVoid_objcObjCObject_bool_fnPtrTrampoline).cast(),
        ptr.cast(),
      ), lib);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_objcObjCObject_bool.fromFunction(
    AVFAudio lib,
    void Function(NSObject, ffi.Pointer<ffi.Bool>) fn,
  ) : this._(objc.newBlock(
        _dartFuncTrampoline ??=
            ffi.Pointer.fromFunction<
              ffi.Void Function(
                ffi.Pointer<objc.ObjCBlock>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<ffi.Bool>,
              )
            >(_ObjCBlock_ffiVoid_objcObjCObject_bool_closureTrampoline).cast(),
        _ObjCBlock_ffiVoid_objcObjCObject_bool_registerClosure((
          ffi.Pointer<objc.ObjCObject> arg0,
          ffi.Pointer<ffi.Bool> arg1,
        ) => fn(NSObject._(arg0, lib, retain: true, release: true), arg1)),
      ), lib);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_objcObjCObject_bool.listener(
    AVFAudio lib,
    void Function(NSObject, ffi.Pointer<ffi.Bool>) fn,
  ) : this._(objc.newBlock(
        (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
              ffi.Void Function(
                ffi.Pointer<objc.ObjCBlock>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<ffi.Bool>,
              )
            >.listener(
              _ObjCBlock_ffiVoid_objcObjCObject_bool_closureTrampoline,
            )..keepIsolateAlive = false)
            .nativeFunction
            .cast(),
        _ObjCBlock_ffiVoid_objcObjCObject_bool_registerClosure((
          ffi.Pointer<objc.ObjCObject> arg0,
          ffi.Pointer<ffi.Bool> arg1,
        ) => fn(NSObject._(arg0, lib, retain: true, release: true), arg1)),
      ), lib);
  static ffi.NativeCallable<
    ffi.Void Function(
      ffi.Pointer<objc.ObjCBlock>,
      ffi.Pointer<objc.ObjCObject>,
      ffi.Pointer<ffi.Bool>,
    )
  >? _dartFuncListenerTrampoline;

  void call(NSObject arg0, ffi.Pointer<ffi.Bool> arg1) => pointer.ref.invoke
      .cast<
        ffi.NativeFunction<
          ffi.Void Function(
            ffi.Pointer<objc.ObjCBlock> block,
            ffi.Pointer<objc.ObjCObject> arg0,
            ffi.Pointer<ffi.Bool> arg1,
          )
        >
      >()
      .asFunction<
        void Function(
          ffi.Pointer<objc.ObjCBlock>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<ffi.Bool>,
        )
      >()(pointer, arg0.pointer, arg1);
}

bool _ObjCBlock_bool_objcObjCObject_bool_fnPtrTrampoline(
  ffi.Pointer<objc.ObjCBlock> block,
  ffi.Pointer<objc.ObjCObject> arg0,
  ffi.Pointer<ffi.Bool> arg1,
) => block.ref.target
    .cast<
      ffi.NativeFunction<
        ffi.Bool Function(
          ffi.Pointer<objc.ObjCObject> arg0,
          ffi.Pointer<ffi.Bool> arg1,
        )
      >
    >()
    .asFunction<
      bool Function(ffi.Pointer<objc.ObjCObject>, ffi.Pointer<ffi.Bool>)
    >()(arg0, arg1);
final _ObjCBlock_bool_objcObjCObject_bool_closureRegistry =
    <int, bool Function(ffi.Pointer<objc.ObjCObject>, ffi.Pointer<ffi.Bool>)>{};
int _ObjCBlock_bool_objcObjCObject_bool_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void> _ObjCBlock_bool_objcObjCObject_bool_registerClosure(
  bool Function(ffi.Pointer<objc.ObjCObject>, ffi.Pointer<ffi.Bool>) fn,
) {
  final id = ++_ObjCBlock_bool_objcObjCObject_bool_closureRegistryIndex;
  _ObjCBlock_bool_objcObjCObject_bool_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

bool _ObjCBlock_bool_objcObjCObject_bool_closureTrampoline(
  ffi.Pointer<objc.ObjCBlock> block,
  ffi.Pointer<objc.ObjCObject> arg0,
  ffi.Pointer<ffi.Bool> arg1,
) => _ObjCBlock_bool_objcObjCObject_bool_closureRegistry[block
    .ref
    .target
    .address]!(arg0, arg1);

class ObjCBlock_bool_objcObjCObject_bool extends objc.ObjCBlockBase {
  ObjCBlock_bool_objcObjCObject_bool._(
    ffi.Pointer<objc.ObjCBlock> pointer,
    this._lib, {
    bool retain = false,
    bool release = true,
  }) : super(pointer, retain: retain, release: release);

  AVFAudio _lib;

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_bool_objcObjCObject_bool castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCBlock> pointer, {
    bool retain = false,
    bool release = false,
  }) {
    return ObjCBlock_bool_objcObjCObject_bool._(
      pointer,
      lib,
      retain: retain,
      release: release,
    );
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_bool_objcObjCObject_bool.fromFunctionPointer(
    AVFAudio lib,
    ffi.Pointer<
      ffi.NativeFunction<
        ffi.Bool Function(
          ffi.Pointer<objc.ObjCObject> arg0,
          ffi.Pointer<ffi.Bool> arg1,
        )
      >
    > ptr,
  ) : this._(objc.newBlock(
        _cFuncTrampoline ??=
            ffi.Pointer.fromFunction<
              ffi.Bool Function(
                ffi.Pointer<objc.ObjCBlock>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<ffi.Bool>,
              )
            >(
              _ObjCBlock_bool_objcObjCObject_bool_fnPtrTrampoline,
              false,
            ).cast(),
        ptr.cast(),
      ), lib);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_bool_objcObjCObject_bool.fromFunction(
    AVFAudio lib,
    bool Function(NSObject, ffi.Pointer<ffi.Bool>) fn,
  ) : this._(objc.newBlock(
        _dartFuncTrampoline ??=
            ffi.Pointer.fromFunction<
              ffi.Bool Function(
                ffi.Pointer<objc.ObjCBlock>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<ffi.Bool>,
              )
            >(
              _ObjCBlock_bool_objcObjCObject_bool_closureTrampoline,
              false,
            ).cast(),
        _ObjCBlock_bool_objcObjCObject_bool_registerClosure((
          ffi.Pointer<objc.ObjCObject> arg0,
          ffi.Pointer<ffi.Bool> arg1,
        ) => fn(NSObject._(arg0, lib, retain: true, release: true), arg1)),
      ), lib);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  bool call(NSObject arg0, ffi.Pointer<ffi.Bool> arg1) => pointer.ref.invoke
      .cast<
        ffi.NativeFunction<
          ffi.Bool Function(
            ffi.Pointer<objc.ObjCBlock> block,
            ffi.Pointer<objc.ObjCObject> arg0,
            ffi.Pointer<ffi.Bool> arg1,
          )
        >
      >()
      .asFunction<
        bool Function(
          ffi.Pointer<objc.ObjCBlock>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<ffi.Bool>,
        )
      >()(pointer, arg0.pointer, arg1);
}

class NSFileManager extends NSObject {
  NSFileManager._(
    ffi.Pointer<objc.ObjCObject> pointer,
    AVFAudio lib, {
    bool retain = false,
    bool release = false,
  }) : super._(pointer, lib, retain: retain, release: release);

  /// Returns a [NSFileManager] that points to the same underlying object as [other].
  static NSFileManager castFrom<T extends objc.ObjCObjectBase>(
    AVFAudio lib,
    T other,
  ) {
    return NSFileManager._(other.pointer, lib, retain: true, release: true);
  }

  /// Returns a [NSFileManager] that wraps the given raw object pointer.
  static NSFileManager castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCObject> other, {
    bool retain = false,
    bool release = false,
  }) {
    return NSFileManager._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSFileManager].
  static bool isInstance(AVFAudio lib, objc.ObjCObjectBase obj) {
    return lib._objc_msgSend_0(
      obj.pointer,
      lib._sel_isKindOfClass_1,
      lib._class_NSFileManager1,
    );
  }

  static NSFileManager getDefaultManager(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_431(
      _lib._class_NSFileManager1,
      _lib._sel_defaultManager1,
    );
    return NSFileManager._(_ret, _lib, retain: true, release: true);
  }

  NSArray? mountedVolumeURLsIncludingResourceValuesForKeys_options_(
    NSArray? propertyKeys,
    int options,
  ) {
    final _ret = _lib._objc_msgSend_432(
      this.pointer,
      _lib._sel_mountedVolumeURLsIncludingResourceValuesForKeys_options_1,
      propertyKeys?.pointer ?? ffi.nullptr,
      options,
    );
    return _ret.address == 0
        ? null
        : NSArray._(_ret, _lib, retain: true, release: true);
  }

  void unmountVolumeAtURL_options_completionHandler_(
    NSURL url,
    int mask,
    ObjCBlock_ffiVoid_NSError completionHandler,
  ) {
    _lib._objc_msgSend_433(
      this.pointer,
      _lib._sel_unmountVolumeAtURL_options_completionHandler_1,
      url.pointer,
      mask,
      completionHandler.pointer,
    );
  }

  NSArray? contentsOfDirectoryAtURL_includingPropertiesForKeys_options_error_(
    NSURL url,
    NSArray? keys,
    int mask,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    final _ret = _lib._objc_msgSend_434(
      this.pointer,
      _lib._sel_contentsOfDirectoryAtURL_includingPropertiesForKeys_options_error_1,
      url.pointer,
      keys?.pointer ?? ffi.nullptr,
      mask,
      error,
    );
    return _ret.address == 0
        ? null
        : NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSArray URLsForDirectory_inDomains_(int directory, int domainMask) {
    final _ret = _lib._objc_msgSend_435(
      this.pointer,
      _lib._sel_URLsForDirectory_inDomains_1,
      directory,
      domainMask,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSURL? URLForDirectory_inDomain_appropriateForURL_create_error_(
    int directory,
    int domain,
    NSURL? url,
    bool shouldCreate,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    final _ret = _lib._objc_msgSend_436(
      this.pointer,
      _lib._sel_URLForDirectory_inDomain_appropriateForURL_create_error_1,
      directory,
      domain,
      url?.pointer ?? ffi.nullptr,
      shouldCreate,
      error,
    );
    return _ret.address == 0
        ? null
        : NSURL._(_ret, _lib, retain: true, release: true);
  }

  bool getRelationship_ofDirectoryAtURL_toItemAtURL_error_(
    ffi.Pointer<ffi.Int32> outRelationship,
    NSURL directoryURL,
    NSURL otherURL,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    return _lib._objc_msgSend_437(
      this.pointer,
      _lib._sel_getRelationship_ofDirectoryAtURL_toItemAtURL_error_1,
      outRelationship,
      directoryURL.pointer,
      otherURL.pointer,
      error,
    );
  }

  bool getRelationship_ofDirectory_inDomain_toItemAtURL_error_(
    ffi.Pointer<ffi.Int32> outRelationship,
    int directory,
    int domainMask,
    NSURL url,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    return _lib._objc_msgSend_438(
      this.pointer,
      _lib._sel_getRelationship_ofDirectory_inDomain_toItemAtURL_error_1,
      outRelationship,
      directory,
      domainMask,
      url.pointer,
      error,
    );
  }

  bool createDirectoryAtURL_withIntermediateDirectories_attributes_error_(
    NSURL url,
    bool createIntermediates,
    NSDictionary? attributes,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    return _lib._objc_msgSend_439(
      this.pointer,
      _lib._sel_createDirectoryAtURL_withIntermediateDirectories_attributes_error_1,
      url.pointer,
      createIntermediates,
      attributes?.pointer ?? ffi.nullptr,
      error,
    );
  }

  bool createSymbolicLinkAtURL_withDestinationURL_error_(
    NSURL url,
    NSURL destURL,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    return _lib._objc_msgSend_440(
      this.pointer,
      _lib._sel_createSymbolicLinkAtURL_withDestinationURL_error_1,
      url.pointer,
      destURL.pointer,
      error,
    );
  }

  NSObject? get delegate {
    final _ret = _lib._objc_msgSend_17(this.pointer, _lib._sel_delegate1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  set delegate(NSObject? value) {
    return _lib._objc_msgSend_416(
      this.pointer,
      _lib._sel_setDelegate_1,
      value?.pointer ?? ffi.nullptr,
    );
  }

  bool setAttributes_ofItemAtPath_error_(
    NSDictionary attributes,
    NSString path,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    return _lib._objc_msgSend_441(
      this.pointer,
      _lib._sel_setAttributes_ofItemAtPath_error_1,
      attributes.pointer,
      path.pointer,
      error,
    );
  }

  bool createDirectoryAtPath_withIntermediateDirectories_attributes_error_(
    NSString path,
    bool createIntermediates,
    NSDictionary? attributes,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    return _lib._objc_msgSend_442(
      this.pointer,
      _lib._sel_createDirectoryAtPath_withIntermediateDirectories_attributes_error_1,
      path.pointer,
      createIntermediates,
      attributes?.pointer ?? ffi.nullptr,
      error,
    );
  }

  NSArray? contentsOfDirectoryAtPath_error_(
    NSString path,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    final _ret = _lib._objc_msgSend_443(
      this.pointer,
      _lib._sel_contentsOfDirectoryAtPath_error_1,
      path.pointer,
      error,
    );
    return _ret.address == 0
        ? null
        : NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSArray? subpathsOfDirectoryAtPath_error_(
    NSString path,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    final _ret = _lib._objc_msgSend_443(
      this.pointer,
      _lib._sel_subpathsOfDirectoryAtPath_error_1,
      path.pointer,
      error,
    );
    return _ret.address == 0
        ? null
        : NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSDictionary? attributesOfItemAtPath_error_(
    NSString path,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    final _ret = _lib._objc_msgSend_444(
      this.pointer,
      _lib._sel_attributesOfItemAtPath_error_1,
      path.pointer,
      error,
    );
    return _ret.address == 0
        ? null
        : NSDictionary._(_ret, _lib, retain: true, release: true);
  }

  NSDictionary? attributesOfFileSystemForPath_error_(
    NSString path,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    final _ret = _lib._objc_msgSend_444(
      this.pointer,
      _lib._sel_attributesOfFileSystemForPath_error_1,
      path.pointer,
      error,
    );
    return _ret.address == 0
        ? null
        : NSDictionary._(_ret, _lib, retain: true, release: true);
  }

  bool createSymbolicLinkAtPath_withDestinationPath_error_(
    NSString path,
    NSString destPath,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    return _lib._objc_msgSend_445(
      this.pointer,
      _lib._sel_createSymbolicLinkAtPath_withDestinationPath_error_1,
      path.pointer,
      destPath.pointer,
      error,
    );
  }

  NSString? destinationOfSymbolicLinkAtPath_error_(
    NSString path,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    final _ret = _lib._objc_msgSend_446(
      this.pointer,
      _lib._sel_destinationOfSymbolicLinkAtPath_error_1,
      path.pointer,
      error,
    );
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  bool copyItemAtPath_toPath_error_(
    NSString srcPath,
    NSString dstPath,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    return _lib._objc_msgSend_445(
      this.pointer,
      _lib._sel_copyItemAtPath_toPath_error_1,
      srcPath.pointer,
      dstPath.pointer,
      error,
    );
  }

  bool moveItemAtPath_toPath_error_(
    NSString srcPath,
    NSString dstPath,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    return _lib._objc_msgSend_445(
      this.pointer,
      _lib._sel_moveItemAtPath_toPath_error_1,
      srcPath.pointer,
      dstPath.pointer,
      error,
    );
  }

  bool linkItemAtPath_toPath_error_(
    NSString srcPath,
    NSString dstPath,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    return _lib._objc_msgSend_445(
      this.pointer,
      _lib._sel_linkItemAtPath_toPath_error_1,
      srcPath.pointer,
      dstPath.pointer,
      error,
    );
  }

  bool removeItemAtPath_error_(
    NSString path,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    return _lib._objc_msgSend_447(
      this.pointer,
      _lib._sel_removeItemAtPath_error_1,
      path.pointer,
      error,
    );
  }

  bool copyItemAtURL_toURL_error_(
    NSURL srcURL,
    NSURL dstURL,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    return _lib._objc_msgSend_440(
      this.pointer,
      _lib._sel_copyItemAtURL_toURL_error_1,
      srcURL.pointer,
      dstURL.pointer,
      error,
    );
  }

  bool moveItemAtURL_toURL_error_(
    NSURL srcURL,
    NSURL dstURL,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    return _lib._objc_msgSend_440(
      this.pointer,
      _lib._sel_moveItemAtURL_toURL_error_1,
      srcURL.pointer,
      dstURL.pointer,
      error,
    );
  }

  bool linkItemAtURL_toURL_error_(
    NSURL srcURL,
    NSURL dstURL,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    return _lib._objc_msgSend_440(
      this.pointer,
      _lib._sel_linkItemAtURL_toURL_error_1,
      srcURL.pointer,
      dstURL.pointer,
      error,
    );
  }

  bool removeItemAtURL_error_(
    NSURL URL,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    return _lib._objc_msgSend_89(
      this.pointer,
      _lib._sel_removeItemAtURL_error_1,
      URL.pointer,
      error,
    );
  }

  bool trashItemAtURL_resultingItemURL_error_(
    NSURL url,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outResultingURL,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    return _lib._objc_msgSend_448(
      this.pointer,
      _lib._sel_trashItemAtURL_resultingItemURL_error_1,
      url.pointer,
      outResultingURL,
      error,
    );
  }

  NSDictionary? fileAttributesAtPath_traverseLink_(NSString path, bool yorn) {
    final _ret = _lib._objc_msgSend_449(
      this.pointer,
      _lib._sel_fileAttributesAtPath_traverseLink_1,
      path.pointer,
      yorn,
    );
    return _ret.address == 0
        ? null
        : NSDictionary._(_ret, _lib, retain: true, release: true);
  }

  bool changeFileAttributes_atPath_(NSDictionary attributes, NSString path) {
    return _lib._objc_msgSend_450(
      this.pointer,
      _lib._sel_changeFileAttributes_atPath_1,
      attributes.pointer,
      path.pointer,
    );
  }

  NSArray? directoryContentsAtPath_(NSString path) {
    final _ret = _lib._objc_msgSend_132(
      this.pointer,
      _lib._sel_directoryContentsAtPath_1,
      path.pointer,
    );
    return _ret.address == 0
        ? null
        : NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSDictionary? fileSystemAttributesAtPath_(NSString path) {
    final _ret = _lib._objc_msgSend_156(
      this.pointer,
      _lib._sel_fileSystemAttributesAtPath_1,
      path.pointer,
    );
    return _ret.address == 0
        ? null
        : NSDictionary._(_ret, _lib, retain: true, release: true);
  }

  NSString? pathContentOfSymbolicLinkAtPath_(NSString path) {
    final _ret = _lib._objc_msgSend_186(
      this.pointer,
      _lib._sel_pathContentOfSymbolicLinkAtPath_1,
      path.pointer,
    );
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  bool createSymbolicLinkAtPath_pathContent_(
    NSString path,
    NSString otherpath,
  ) {
    return _lib._objc_msgSend_451(
      this.pointer,
      _lib._sel_createSymbolicLinkAtPath_pathContent_1,
      path.pointer,
      otherpath.pointer,
    );
  }

  bool createDirectoryAtPath_attributes_(
    NSString path,
    NSDictionary attributes,
  ) {
    return _lib._objc_msgSend_452(
      this.pointer,
      _lib._sel_createDirectoryAtPath_attributes_1,
      path.pointer,
      attributes.pointer,
    );
  }

  bool linkPath_toPath_handler_(
    NSString src,
    NSString dest,
    NSObject? handler,
  ) {
    return _lib._objc_msgSend_453(
      this.pointer,
      _lib._sel_linkPath_toPath_handler_1,
      src.pointer,
      dest.pointer,
      handler?.pointer ?? ffi.nullptr,
    );
  }

  bool copyPath_toPath_handler_(
    NSString src,
    NSString dest,
    NSObject? handler,
  ) {
    return _lib._objc_msgSend_453(
      this.pointer,
      _lib._sel_copyPath_toPath_handler_1,
      src.pointer,
      dest.pointer,
      handler?.pointer ?? ffi.nullptr,
    );
  }

  bool movePath_toPath_handler_(
    NSString src,
    NSString dest,
    NSObject? handler,
  ) {
    return _lib._objc_msgSend_453(
      this.pointer,
      _lib._sel_movePath_toPath_handler_1,
      src.pointer,
      dest.pointer,
      handler?.pointer ?? ffi.nullptr,
    );
  }

  bool removeFileAtPath_handler_(NSString path, NSObject? handler) {
    return _lib._objc_msgSend_454(
      this.pointer,
      _lib._sel_removeFileAtPath_handler_1,
      path.pointer,
      handler?.pointer ?? ffi.nullptr,
    );
  }

  NSString get currentDirectoryPath {
    final _ret = _lib._objc_msgSend_21(
      this.pointer,
      _lib._sel_currentDirectoryPath1,
    );
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  bool changeCurrentDirectoryPath_(NSString path) {
    return _lib._objc_msgSend_64(
      this.pointer,
      _lib._sel_changeCurrentDirectoryPath_1,
      path.pointer,
    );
  }

  bool fileExistsAtPath_(NSString path) {
    return _lib._objc_msgSend_64(
      this.pointer,
      _lib._sel_fileExistsAtPath_1,
      path.pointer,
    );
  }

  bool fileExistsAtPath_isDirectory_(
    NSString path,
    ffi.Pointer<ffi.Bool> isDirectory,
  ) {
    return _lib._objc_msgSend_455(
      this.pointer,
      _lib._sel_fileExistsAtPath_isDirectory_1,
      path.pointer,
      isDirectory,
    );
  }

  bool isReadableFileAtPath_(NSString path) {
    return _lib._objc_msgSend_64(
      this.pointer,
      _lib._sel_isReadableFileAtPath_1,
      path.pointer,
    );
  }

  bool isWritableFileAtPath_(NSString path) {
    return _lib._objc_msgSend_64(
      this.pointer,
      _lib._sel_isWritableFileAtPath_1,
      path.pointer,
    );
  }

  bool isExecutableFileAtPath_(NSString path) {
    return _lib._objc_msgSend_64(
      this.pointer,
      _lib._sel_isExecutableFileAtPath_1,
      path.pointer,
    );
  }

  bool isDeletableFileAtPath_(NSString path) {
    return _lib._objc_msgSend_64(
      this.pointer,
      _lib._sel_isDeletableFileAtPath_1,
      path.pointer,
    );
  }

  bool contentsEqualAtPath_andPath_(NSString path1, NSString path2) {
    return _lib._objc_msgSend_451(
      this.pointer,
      _lib._sel_contentsEqualAtPath_andPath_1,
      path1.pointer,
      path2.pointer,
    );
  }

  NSString displayNameAtPath_(NSString path) {
    final _ret = _lib._objc_msgSend_69(
      this.pointer,
      _lib._sel_displayNameAtPath_1,
      path.pointer,
    );
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSArray? componentsToDisplayForPath_(NSString path) {
    final _ret = _lib._objc_msgSend_132(
      this.pointer,
      _lib._sel_componentsToDisplayForPath_1,
      path.pointer,
    );
    return _ret.address == 0
        ? null
        : NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSObject? enumeratorAtPath_(NSString path) {
    final _ret = _lib._objc_msgSend_38(
      this.pointer,
      _lib._sel_enumeratorAtPath_1,
      path.pointer,
    );
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? enumeratorAtURL_includingPropertiesForKeys_options_errorHandler_(
    NSURL url,
    NSArray? keys,
    int mask,
    ObjCBlock_bool_NSURL_NSError? handler,
  ) {
    final _ret = _lib._objc_msgSend_456(
      this.pointer,
      _lib._sel_enumeratorAtURL_includingPropertiesForKeys_options_errorHandler_1,
      url.pointer,
      keys?.pointer ?? ffi.nullptr,
      mask,
      handler?.pointer ?? ffi.nullptr,
    );
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSArray? subpathsAtPath_(NSString path) {
    final _ret = _lib._objc_msgSend_132(
      this.pointer,
      _lib._sel_subpathsAtPath_1,
      path.pointer,
    );
    return _ret.address == 0
        ? null
        : NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSData? contentsAtPath_(NSString path) {
    final _ret = _lib._objc_msgSend_457(
      this.pointer,
      _lib._sel_contentsAtPath_1,
      path.pointer,
    );
    return _ret.address == 0
        ? null
        : NSData._(_ret, _lib, retain: true, release: true);
  }

  bool createFileAtPath_contents_attributes_(
    NSString path,
    NSData? data,
    NSDictionary? attr,
  ) {
    return _lib._objc_msgSend_458(
      this.pointer,
      _lib._sel_createFileAtPath_contents_attributes_1,
      path.pointer,
      data?.pointer ?? ffi.nullptr,
      attr?.pointer ?? ffi.nullptr,
    );
  }

  ffi.Pointer<ffi.Char> fileSystemRepresentationWithPath_(NSString path) {
    return _lib._objc_msgSend_459(
      this.pointer,
      _lib._sel_fileSystemRepresentationWithPath_1,
      path.pointer,
    );
  }

  NSString stringWithFileSystemRepresentation_length_(
    ffi.Pointer<ffi.Char> str,
    int len,
  ) {
    final _ret = _lib._objc_msgSend_460(
      this.pointer,
      _lib._sel_stringWithFileSystemRepresentation_length_1,
      str,
      len,
    );
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  bool
  replaceItemAtURL_withItemAtURL_backupItemName_options_resultingItemURL_error_(
    NSURL originalItemURL,
    NSURL newItemURL,
    NSString? backupItemName,
    int options,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> resultingURL,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    return _lib._objc_msgSend_461(
      this.pointer,
      _lib._sel_replaceItemAtURL_withItemAtURL_backupItemName_options_resultingItemURL_error_1,
      originalItemURL.pointer,
      newItemURL.pointer,
      backupItemName?.pointer ?? ffi.nullptr,
      options,
      resultingURL,
      error,
    );
  }

  bool setUbiquitous_itemAtURL_destinationURL_error_(
    bool flag,
    NSURL url,
    NSURL destinationURL,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    return _lib._objc_msgSend_462(
      this.pointer,
      _lib._sel_setUbiquitous_itemAtURL_destinationURL_error_1,
      flag,
      url.pointer,
      destinationURL.pointer,
      error,
    );
  }

  bool isUbiquitousItemAtURL_(NSURL url) {
    return _lib._objc_msgSend_265(
      this.pointer,
      _lib._sel_isUbiquitousItemAtURL_1,
      url.pointer,
    );
  }

  bool startDownloadingUbiquitousItemAtURL_error_(
    NSURL url,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    return _lib._objc_msgSend_89(
      this.pointer,
      _lib._sel_startDownloadingUbiquitousItemAtURL_error_1,
      url.pointer,
      error,
    );
  }

  bool evictUbiquitousItemAtURL_error_(
    NSURL url,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    return _lib._objc_msgSend_89(
      this.pointer,
      _lib._sel_evictUbiquitousItemAtURL_error_1,
      url.pointer,
      error,
    );
  }

  NSURL? URLForUbiquityContainerIdentifier_(NSString? containerIdentifier) {
    final _ret = _lib._objc_msgSend_463(
      this.pointer,
      _lib._sel_URLForUbiquityContainerIdentifier_1,
      containerIdentifier?.pointer ?? ffi.nullptr,
    );
    return _ret.address == 0
        ? null
        : NSURL._(_ret, _lib, retain: true, release: true);
  }

  NSURL? URLForPublishingUbiquitousItemAtURL_expirationDate_error_(
    NSURL url,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outDate,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    final _ret = _lib._objc_msgSend_464(
      this.pointer,
      _lib._sel_URLForPublishingUbiquitousItemAtURL_expirationDate_error_1,
      url.pointer,
      outDate,
      error,
    );
    return _ret.address == 0
        ? null
        : NSURL._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get ubiquityIdentityToken {
    final _ret = _lib._objc_msgSend_17(
      this.pointer,
      _lib._sel_ubiquityIdentityToken1,
    );
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  void getFileProviderServicesForItemAtURL_completionHandler_(
    NSURL url,
    ObjCBlock_ffiVoid_NSDictionary_NSError completionHandler,
  ) {
    _lib._objc_msgSend_465(
      this.pointer,
      _lib._sel_getFileProviderServicesForItemAtURL_completionHandler_1,
      url.pointer,
      completionHandler.pointer,
    );
  }

  NSURL? containerURLForSecurityApplicationGroupIdentifier_(
    NSString groupIdentifier,
  ) {
    final _ret = _lib._objc_msgSend_257(
      this.pointer,
      _lib._sel_containerURLForSecurityApplicationGroupIdentifier_1,
      groupIdentifier.pointer,
    );
    return _ret.address == 0
        ? null
        : NSURL._(_ret, _lib, retain: true, release: true);
  }

  NSURL get homeDirectoryForCurrentUser {
    final _ret = _lib._objc_msgSend_466(
      this.pointer,
      _lib._sel_homeDirectoryForCurrentUser1,
    );
    return NSURL._(_ret, _lib, retain: true, release: true);
  }

  NSURL get temporaryDirectory {
    final _ret = _lib._objc_msgSend_466(
      this.pointer,
      _lib._sel_temporaryDirectory1,
    );
    return NSURL._(_ret, _lib, retain: true, release: true);
  }

  NSURL? homeDirectoryForUser_(NSString userName) {
    final _ret = _lib._objc_msgSend_257(
      this.pointer,
      _lib._sel_homeDirectoryForUser_1,
      userName.pointer,
    );
    return _ret.address == 0
        ? null
        : NSURL._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSFileManager init() {
    final _ret = _lib._objc_msgSend_2(this.pointer, _lib._sel_init1);
    return NSFileManager._(_ret, _lib, retain: true, release: true);
  }

  static NSFileManager new1(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSFileManager1,
      _lib._sel_new1,
    );
    return NSFileManager._(_ret, _lib, retain: false, release: true);
  }

  static NSFileManager allocWithZone_(
    AVFAudio _lib,
    ffi.Pointer<_NSZone> zone,
  ) {
    final _ret = _lib._objc_msgSend_3(
      _lib._class_NSFileManager1,
      _lib._sel_allocWithZone_1,
      zone,
    );
    return NSFileManager._(_ret, _lib, retain: false, release: true);
  }

  static NSFileManager alloc(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSFileManager1,
      _lib._sel_alloc1,
    );
    return NSFileManager._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
    AVFAudio _lib,
    NSObject aTarget,
    ffi.Pointer<objc.ObjCSelector> aSelector,
    NSObject? anArgument,
  ) {
    _lib._objc_msgSend_14(
      _lib._class_NSFileManager1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
      aTarget.pointer,
      aSelector,
      anArgument?.pointer ?? ffi.nullptr,
    );
  }

  static void cancelPreviousPerformRequestsWithTarget_(
    AVFAudio _lib,
    NSObject aTarget,
  ) {
    _lib._objc_msgSend_15(
      _lib._class_NSFileManager1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_1,
      aTarget.pointer,
    );
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSFileManager1,
      _lib._sel_accessInstanceVariablesDirectly1,
    );
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSFileManager1,
      _lib._sel_useStoredAccessor1,
    );
  }

  static NSSet keyPathsForValuesAffectingValueForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    final _ret = _lib._objc_msgSend_63(
      _lib._class_NSFileManager1,
      _lib._sel_keyPathsForValuesAffectingValueForKey_1,
      key.pointer,
    );
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    return _lib._objc_msgSend_64(
      _lib._class_NSFileManager1,
      _lib._sel_automaticallyNotifiesObserversForKey_1,
      key.pointer,
    );
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
    AVFAudio _lib,
    NSArray keys,
    NSString dependentKey,
  ) {
    _lib._objc_msgSend_88(
      _lib._class_NSFileManager1,
      _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
      keys.pointer,
      dependentKey.pointer,
    );
  }

  static NSArray classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_85(
      _lib._class_NSFileManager1,
      _lib._sel_classFallbacksForKeyedArchiver1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSFileManager1,
      _lib._sel_classForKeyedUnarchiver1,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

abstract class NSVolumeEnumerationOptions {
  static const int NSVolumeEnumerationSkipHiddenVolumes = 2;
  static const int NSVolumeEnumerationProduceFileReferenceURLs = 4;
}

abstract class NSFileManagerUnmountOptions {
  static const int NSFileManagerUnmountAllPartitionsAndEjectDisk = 1;
  static const int NSFileManagerUnmountWithoutUI = 2;
}

void _ObjCBlock_ffiVoid_NSError_fnPtrTrampoline(
  ffi.Pointer<objc.ObjCBlock> block,
  ffi.Pointer<objc.ObjCObject> arg0,
) => block.ref.target
    .cast<
      ffi.NativeFunction<ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0)>
    >()
    .asFunction<void Function(ffi.Pointer<objc.ObjCObject>)>()(arg0);
final _ObjCBlock_ffiVoid_NSError_closureRegistry =
    <int, void Function(ffi.Pointer<objc.ObjCObject>)>{};
int _ObjCBlock_ffiVoid_NSError_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void> _ObjCBlock_ffiVoid_NSError_registerClosure(
  void Function(ffi.Pointer<objc.ObjCObject>) fn,
) {
  final id = ++_ObjCBlock_ffiVoid_NSError_closureRegistryIndex;
  _ObjCBlock_ffiVoid_NSError_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

void _ObjCBlock_ffiVoid_NSError_closureTrampoline(
  ffi.Pointer<objc.ObjCBlock> block,
  ffi.Pointer<objc.ObjCObject> arg0,
) => _ObjCBlock_ffiVoid_NSError_closureRegistry[block.ref.target.address]!(
  arg0,
);

class ObjCBlock_ffiVoid_NSError extends objc.ObjCBlockBase {
  ObjCBlock_ffiVoid_NSError._(
    ffi.Pointer<objc.ObjCBlock> pointer,
    this._lib, {
    bool retain = false,
    bool release = true,
  }) : super(pointer, retain: retain, release: release);

  AVFAudio _lib;

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_ffiVoid_NSError castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCBlock> pointer, {
    bool retain = false,
    bool release = false,
  }) {
    return ObjCBlock_ffiVoid_NSError._(
      pointer,
      lib,
      retain: retain,
      release: release,
    );
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSError.fromFunctionPointer(
    AVFAudio lib,
    ffi.Pointer<
      ffi.NativeFunction<ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0)>
    > ptr,
  ) : this._(objc.newBlock(
        _cFuncTrampoline ??=
            ffi.Pointer.fromFunction<
              ffi.Void Function(
                ffi.Pointer<objc.ObjCBlock>,
                ffi.Pointer<objc.ObjCObject>,
              )
            >(_ObjCBlock_ffiVoid_NSError_fnPtrTrampoline).cast(),
        ptr.cast(),
      ), lib);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSError.fromFunction(
    AVFAudio lib,
    void Function(NSError?) fn,
  ) : this._(objc.newBlock(
        _dartFuncTrampoline ??=
            ffi.Pointer.fromFunction<
              ffi.Void Function(
                ffi.Pointer<objc.ObjCBlock>,
                ffi.Pointer<objc.ObjCObject>,
              )
            >(_ObjCBlock_ffiVoid_NSError_closureTrampoline).cast(),
        _ObjCBlock_ffiVoid_NSError_registerClosure((
          ffi.Pointer<objc.ObjCObject> arg0,
        ) => fn(
          arg0.address == 0
              ? null
              : NSError._(arg0, lib, retain: true, release: true),
        )),
      ), lib);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_NSError.listener(AVFAudio lib, void Function(NSError?) fn)
    : this._(objc.newBlock(
        (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
              ffi.Void Function(
                ffi.Pointer<objc.ObjCBlock>,
                ffi.Pointer<objc.ObjCObject>,
              )
            >.listener(
              _ObjCBlock_ffiVoid_NSError_closureTrampoline,
            )..keepIsolateAlive = false)
            .nativeFunction
            .cast(),
        _ObjCBlock_ffiVoid_NSError_registerClosure((
          ffi.Pointer<objc.ObjCObject> arg0,
        ) => fn(
          arg0.address == 0
              ? null
              : NSError._(arg0, lib, retain: true, release: true),
        )),
      ), lib);
  static ffi.NativeCallable<
    ffi.Void Function(ffi.Pointer<objc.ObjCBlock>, ffi.Pointer<objc.ObjCObject>)
  >? _dartFuncListenerTrampoline;

  void call(NSError? arg0) => pointer.ref.invoke
      .cast<
        ffi.NativeFunction<
          ffi.Void Function(
            ffi.Pointer<objc.ObjCBlock> block,
            ffi.Pointer<objc.ObjCObject> arg0,
          )
        >
      >()
      .asFunction<
        void Function(ffi.Pointer<objc.ObjCBlock>, ffi.Pointer<objc.ObjCObject>)
      >()(pointer, arg0?.pointer ?? ffi.nullptr);
}

abstract class NSDirectoryEnumerationOptions {
  static const int NSDirectoryEnumerationSkipsSubdirectoryDescendants = 1;
  static const int NSDirectoryEnumerationSkipsPackageDescendants = 2;
  static const int NSDirectoryEnumerationSkipsHiddenFiles = 4;
  static const int NSDirectoryEnumerationIncludesDirectoriesPostOrder = 8;
  static const int NSDirectoryEnumerationProducesRelativePathURLs = 16;
}

abstract class NSSearchPathDirectory {
  static const int NSApplicationDirectory = 1;
  static const int NSDemoApplicationDirectory = 2;
  static const int NSDeveloperApplicationDirectory = 3;
  static const int NSAdminApplicationDirectory = 4;
  static const int NSLibraryDirectory = 5;
  static const int NSDeveloperDirectory = 6;
  static const int NSUserDirectory = 7;
  static const int NSDocumentationDirectory = 8;
  static const int NSDocumentDirectory = 9;
  static const int NSCoreServiceDirectory = 10;
  static const int NSAutosavedInformationDirectory = 11;
  static const int NSDesktopDirectory = 12;
  static const int NSCachesDirectory = 13;
  static const int NSApplicationSupportDirectory = 14;
  static const int NSDownloadsDirectory = 15;
  static const int NSInputMethodsDirectory = 16;
  static const int NSMoviesDirectory = 17;
  static const int NSMusicDirectory = 18;
  static const int NSPicturesDirectory = 19;
  static const int NSPrinterDescriptionDirectory = 20;
  static const int NSSharedPublicDirectory = 21;
  static const int NSPreferencePanesDirectory = 22;
  static const int NSApplicationScriptsDirectory = 23;
  static const int NSItemReplacementDirectory = 99;
  static const int NSAllApplicationsDirectory = 100;
  static const int NSAllLibrariesDirectory = 101;
  static const int NSTrashDirectory = 102;
}

abstract class NSSearchPathDomainMask {
  static const int NSUserDomainMask = 1;
  static const int NSLocalDomainMask = 2;
  static const int NSNetworkDomainMask = 4;
  static const int NSSystemDomainMask = 8;
  static const int NSAllDomainsMask = 65535;
}

abstract class NSURLRelationship {
  static const int NSURLRelationshipContains = 0;
  static const int NSURLRelationshipSame = 1;
  static const int NSURLRelationshipOther = 2;
}

bool _ObjCBlock_bool_NSURL_NSError_fnPtrTrampoline(
  ffi.Pointer<objc.ObjCBlock> block,
  ffi.Pointer<objc.ObjCObject> arg0,
  ffi.Pointer<objc.ObjCObject> arg1,
) => block.ref.target
    .cast<
      ffi.NativeFunction<
        ffi.Bool Function(
          ffi.Pointer<objc.ObjCObject> arg0,
          ffi.Pointer<objc.ObjCObject> arg1,
        )
      >
    >()
    .asFunction<
      bool Function(ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)
    >()(arg0, arg1);
final _ObjCBlock_bool_NSURL_NSError_closureRegistry =
    <
      int,
      bool Function(ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)
    >{};
int _ObjCBlock_bool_NSURL_NSError_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void> _ObjCBlock_bool_NSURL_NSError_registerClosure(
  bool Function(ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>) fn,
) {
  final id = ++_ObjCBlock_bool_NSURL_NSError_closureRegistryIndex;
  _ObjCBlock_bool_NSURL_NSError_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

bool _ObjCBlock_bool_NSURL_NSError_closureTrampoline(
  ffi.Pointer<objc.ObjCBlock> block,
  ffi.Pointer<objc.ObjCObject> arg0,
  ffi.Pointer<objc.ObjCObject> arg1,
) => _ObjCBlock_bool_NSURL_NSError_closureRegistry[block.ref.target.address]!(
  arg0,
  arg1,
);

class ObjCBlock_bool_NSURL_NSError extends objc.ObjCBlockBase {
  ObjCBlock_bool_NSURL_NSError._(
    ffi.Pointer<objc.ObjCBlock> pointer,
    this._lib, {
    bool retain = false,
    bool release = true,
  }) : super(pointer, retain: retain, release: release);

  AVFAudio _lib;

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_bool_NSURL_NSError castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCBlock> pointer, {
    bool retain = false,
    bool release = false,
  }) {
    return ObjCBlock_bool_NSURL_NSError._(
      pointer,
      lib,
      retain: retain,
      release: release,
    );
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_bool_NSURL_NSError.fromFunctionPointer(
    AVFAudio lib,
    ffi.Pointer<
      ffi.NativeFunction<
        ffi.Bool Function(
          ffi.Pointer<objc.ObjCObject> arg0,
          ffi.Pointer<objc.ObjCObject> arg1,
        )
      >
    > ptr,
  ) : this._(objc.newBlock(
        _cFuncTrampoline ??=
            ffi.Pointer.fromFunction<
              ffi.Bool Function(
                ffi.Pointer<objc.ObjCBlock>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
              )
            >(_ObjCBlock_bool_NSURL_NSError_fnPtrTrampoline, false).cast(),
        ptr.cast(),
      ), lib);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_bool_NSURL_NSError.fromFunction(
    AVFAudio lib,
    bool Function(NSURL, NSError) fn,
  ) : this._(objc.newBlock(
        _dartFuncTrampoline ??=
            ffi.Pointer.fromFunction<
              ffi.Bool Function(
                ffi.Pointer<objc.ObjCBlock>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
              )
            >(_ObjCBlock_bool_NSURL_NSError_closureTrampoline, false).cast(),
        _ObjCBlock_bool_NSURL_NSError_registerClosure((
          ffi.Pointer<objc.ObjCObject> arg0,
          ffi.Pointer<objc.ObjCObject> arg1,
        ) => fn(
          NSURL._(arg0, lib, retain: true, release: true),
          NSError._(arg1, lib, retain: true, release: true),
        )),
      ), lib);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  bool call(NSURL arg0, NSError arg1) => pointer.ref.invoke
      .cast<
        ffi.NativeFunction<
          ffi.Bool Function(
            ffi.Pointer<objc.ObjCBlock> block,
            ffi.Pointer<objc.ObjCObject> arg0,
            ffi.Pointer<objc.ObjCObject> arg1,
          )
        >
      >()
      .asFunction<
        bool Function(
          ffi.Pointer<objc.ObjCBlock>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCObject>,
        )
      >()(pointer, arg0.pointer, arg1.pointer);
}

abstract class NSFileManagerItemReplacementOptions {
  static const int NSFileManagerItemReplacementUsingNewMetadataOnly = 1;
  static const int NSFileManagerItemReplacementWithoutDeletingBackupItem = 2;
}

void _ObjCBlock_ffiVoid_NSDictionary_NSError_fnPtrTrampoline(
  ffi.Pointer<objc.ObjCBlock> block,
  ffi.Pointer<objc.ObjCObject> arg0,
  ffi.Pointer<objc.ObjCObject> arg1,
) => block.ref.target
    .cast<
      ffi.NativeFunction<
        ffi.Void Function(
          ffi.Pointer<objc.ObjCObject> arg0,
          ffi.Pointer<objc.ObjCObject> arg1,
        )
      >
    >()
    .asFunction<
      void Function(ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)
    >()(arg0, arg1);
final _ObjCBlock_ffiVoid_NSDictionary_NSError_closureRegistry =
    <
      int,
      void Function(ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)
    >{};
int _ObjCBlock_ffiVoid_NSDictionary_NSError_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void> _ObjCBlock_ffiVoid_NSDictionary_NSError_registerClosure(
  void Function(ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>) fn,
) {
  final id = ++_ObjCBlock_ffiVoid_NSDictionary_NSError_closureRegistryIndex;
  _ObjCBlock_ffiVoid_NSDictionary_NSError_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

void _ObjCBlock_ffiVoid_NSDictionary_NSError_closureTrampoline(
  ffi.Pointer<objc.ObjCBlock> block,
  ffi.Pointer<objc.ObjCObject> arg0,
  ffi.Pointer<objc.ObjCObject> arg1,
) => _ObjCBlock_ffiVoid_NSDictionary_NSError_closureRegistry[block
    .ref
    .target
    .address]!(arg0, arg1);

class ObjCBlock_ffiVoid_NSDictionary_NSError extends objc.ObjCBlockBase {
  ObjCBlock_ffiVoid_NSDictionary_NSError._(
    ffi.Pointer<objc.ObjCBlock> pointer,
    this._lib, {
    bool retain = false,
    bool release = true,
  }) : super(pointer, retain: retain, release: release);

  AVFAudio _lib;

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_ffiVoid_NSDictionary_NSError castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCBlock> pointer, {
    bool retain = false,
    bool release = false,
  }) {
    return ObjCBlock_ffiVoid_NSDictionary_NSError._(
      pointer,
      lib,
      retain: retain,
      release: release,
    );
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSDictionary_NSError.fromFunctionPointer(
    AVFAudio lib,
    ffi.Pointer<
      ffi.NativeFunction<
        ffi.Void Function(
          ffi.Pointer<objc.ObjCObject> arg0,
          ffi.Pointer<objc.ObjCObject> arg1,
        )
      >
    > ptr,
  ) : this._(objc.newBlock(
        _cFuncTrampoline ??=
            ffi.Pointer.fromFunction<
              ffi.Void Function(
                ffi.Pointer<objc.ObjCBlock>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
              )
            >(_ObjCBlock_ffiVoid_NSDictionary_NSError_fnPtrTrampoline).cast(),
        ptr.cast(),
      ), lib);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSDictionary_NSError.fromFunction(
    AVFAudio lib,
    void Function(NSDictionary?, NSError?) fn,
  ) : this._(objc.newBlock(
        _dartFuncTrampoline ??=
            ffi.Pointer.fromFunction<
              ffi.Void Function(
                ffi.Pointer<objc.ObjCBlock>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
              )
            >(_ObjCBlock_ffiVoid_NSDictionary_NSError_closureTrampoline).cast(),
        _ObjCBlock_ffiVoid_NSDictionary_NSError_registerClosure((
          ffi.Pointer<objc.ObjCObject> arg0,
          ffi.Pointer<objc.ObjCObject> arg1,
        ) => fn(
          arg0.address == 0
              ? null
              : NSDictionary._(arg0, lib, retain: true, release: true),
          arg1.address == 0
              ? null
              : NSError._(arg1, lib, retain: true, release: true),
        )),
      ), lib);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_NSDictionary_NSError.listener(
    AVFAudio lib,
    void Function(NSDictionary?, NSError?) fn,
  ) : this._(objc.newBlock(
        (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
              ffi.Void Function(
                ffi.Pointer<objc.ObjCBlock>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
              )
            >.listener(
              _ObjCBlock_ffiVoid_NSDictionary_NSError_closureTrampoline,
            )..keepIsolateAlive = false)
            .nativeFunction
            .cast(),
        _ObjCBlock_ffiVoid_NSDictionary_NSError_registerClosure((
          ffi.Pointer<objc.ObjCObject> arg0,
          ffi.Pointer<objc.ObjCObject> arg1,
        ) => fn(
          arg0.address == 0
              ? null
              : NSDictionary._(arg0, lib, retain: true, release: true),
          arg1.address == 0
              ? null
              : NSError._(arg1, lib, retain: true, release: true),
        )),
      ), lib);
  static ffi.NativeCallable<
    ffi.Void Function(
      ffi.Pointer<objc.ObjCBlock>,
      ffi.Pointer<objc.ObjCObject>,
      ffi.Pointer<objc.ObjCObject>,
    )
  >? _dartFuncListenerTrampoline;

  void call(NSDictionary? arg0, NSError? arg1) => pointer.ref.invoke
      .cast<
        ffi.NativeFunction<
          ffi.Void Function(
            ffi.Pointer<objc.ObjCBlock> block,
            ffi.Pointer<objc.ObjCObject> arg0,
            ffi.Pointer<objc.ObjCObject> arg1,
          )
        >
      >()
      .asFunction<
        void Function(
          ffi.Pointer<objc.ObjCBlock>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCObject>,
        )
      >()(pointer, arg0?.pointer ?? ffi.nullptr, arg1?.pointer ?? ffi.nullptr);
}

class NSMutableArray extends NSArray {
  NSMutableArray._(
    ffi.Pointer<objc.ObjCObject> pointer,
    AVFAudio lib, {
    bool retain = false,
    bool release = false,
  }) : super._(pointer, lib, retain: retain, release: release);

  /// Returns a [NSMutableArray] that points to the same underlying object as [other].
  static NSMutableArray castFrom<T extends objc.ObjCObjectBase>(
    AVFAudio lib,
    T other,
  ) {
    return NSMutableArray._(other.pointer, lib, retain: true, release: true);
  }

  /// Returns a [NSMutableArray] that wraps the given raw object pointer.
  static NSMutableArray castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCObject> other, {
    bool retain = false,
    bool release = false,
  }) {
    return NSMutableArray._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSMutableArray].
  static bool isInstance(AVFAudio lib, objc.ObjCObjectBase obj) {
    return lib._objc_msgSend_0(
      obj.pointer,
      lib._sel_isKindOfClass_1,
      lib._class_NSMutableArray1,
    );
  }

  void addObject_(NSObject anObject) {
    _lib._objc_msgSend_15(
      this.pointer,
      _lib._sel_addObject_1,
      anObject.pointer,
    );
  }

  void insertObject_atIndex_(NSObject anObject, int index) {
    _lib._objc_msgSend_469(
      this.pointer,
      _lib._sel_insertObject_atIndex_1,
      anObject.pointer,
      index,
    );
  }

  void removeLastObject() {
    _lib._objc_msgSend_1(this.pointer, _lib._sel_removeLastObject1);
  }

  void removeObjectAtIndex_(int index) {
    _lib._objc_msgSend_470(
      this.pointer,
      _lib._sel_removeObjectAtIndex_1,
      index,
    );
  }

  void replaceObjectAtIndex_withObject_(int index, NSObject anObject) {
    _lib._objc_msgSend_471(
      this.pointer,
      _lib._sel_replaceObjectAtIndex_withObject_1,
      index,
      anObject.pointer,
    );
  }

  @override
  NSMutableArray init() {
    final _ret = _lib._objc_msgSend_2(this.pointer, _lib._sel_init1);
    return NSMutableArray._(_ret, _lib, retain: true, release: true);
  }

  NSMutableArray initWithCapacity_(int numItems) {
    final _ret = _lib._objc_msgSend_65(
      this.pointer,
      _lib._sel_initWithCapacity_1,
      numItems,
    );
    return NSMutableArray._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSMutableArray? initWithCoder_(NSCoder coder) {
    final _ret = _lib._objc_msgSend_47(
      this.pointer,
      _lib._sel_initWithCoder_1,
      coder.pointer,
    );
    return _ret.address == 0
        ? null
        : NSMutableArray._(_ret, _lib, retain: true, release: true);
  }

  void addObjectsFromArray_(NSArray otherArray) {
    _lib._objc_msgSend_472(
      this.pointer,
      _lib._sel_addObjectsFromArray_1,
      otherArray.pointer,
    );
  }

  void exchangeObjectAtIndex_withObjectAtIndex_(int idx1, int idx2) {
    _lib._objc_msgSend_473(
      this.pointer,
      _lib._sel_exchangeObjectAtIndex_withObjectAtIndex_1,
      idx1,
      idx2,
    );
  }

  void removeAllObjects() {
    _lib._objc_msgSend_1(this.pointer, _lib._sel_removeAllObjects1);
  }

  void removeObject_inRange_(NSObject anObject, _NSRange range) {
    _lib._objc_msgSend_474(
      this.pointer,
      _lib._sel_removeObject_inRange_1,
      anObject.pointer,
      range,
    );
  }

  void removeObject_(NSObject anObject) {
    _lib._objc_msgSend_15(
      this.pointer,
      _lib._sel_removeObject_1,
      anObject.pointer,
    );
  }

  void removeObjectIdenticalTo_inRange_(NSObject anObject, _NSRange range) {
    _lib._objc_msgSend_474(
      this.pointer,
      _lib._sel_removeObjectIdenticalTo_inRange_1,
      anObject.pointer,
      range,
    );
  }

  void removeObjectIdenticalTo_(NSObject anObject) {
    _lib._objc_msgSend_15(
      this.pointer,
      _lib._sel_removeObjectIdenticalTo_1,
      anObject.pointer,
    );
  }

  void removeObjectsFromIndices_numIndices_(
    ffi.Pointer<ffi.UnsignedLong> indices,
    int cnt,
  ) {
    _lib._objc_msgSend_475(
      this.pointer,
      _lib._sel_removeObjectsFromIndices_numIndices_1,
      indices,
      cnt,
    );
  }

  void removeObjectsInArray_(NSArray otherArray) {
    _lib._objc_msgSend_472(
      this.pointer,
      _lib._sel_removeObjectsInArray_1,
      otherArray.pointer,
    );
  }

  void removeObjectsInRange_(_NSRange range) {
    _lib._objc_msgSend_476(
      this.pointer,
      _lib._sel_removeObjectsInRange_1,
      range,
    );
  }

  void replaceObjectsInRange_withObjectsFromArray_range_(
    _NSRange range,
    NSArray otherArray,
    _NSRange otherRange,
  ) {
    _lib._objc_msgSend_477(
      this.pointer,
      _lib._sel_replaceObjectsInRange_withObjectsFromArray_range_1,
      range,
      otherArray.pointer,
      otherRange,
    );
  }

  void replaceObjectsInRange_withObjectsFromArray_(
    _NSRange range,
    NSArray otherArray,
  ) {
    _lib._objc_msgSend_478(
      this.pointer,
      _lib._sel_replaceObjectsInRange_withObjectsFromArray_1,
      range,
      otherArray.pointer,
    );
  }

  void setArray_(NSArray otherArray) {
    _lib._objc_msgSend_472(
      this.pointer,
      _lib._sel_setArray_1,
      otherArray.pointer,
    );
  }

  void sortUsingFunction_context_(
    ffi.Pointer<
      ffi.NativeFunction<
        ffi.Long Function(
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<ffi.Void>,
        )
      >
    > compare,
    ffi.Pointer<ffi.Void> context,
  ) {
    _lib._objc_msgSend_479(
      this.pointer,
      _lib._sel_sortUsingFunction_context_1,
      compare,
      context,
    );
  }

  void sortUsingSelector_(ffi.Pointer<objc.ObjCSelector> comparator) {
    _lib._objc_msgSend_7(
      this.pointer,
      _lib._sel_sortUsingSelector_1,
      comparator,
    );
  }

  void insertObjects_atIndexes_(NSArray objects, NSIndexSet indexes) {
    _lib._objc_msgSend_480(
      this.pointer,
      _lib._sel_insertObjects_atIndexes_1,
      objects.pointer,
      indexes.pointer,
    );
  }

  void removeObjectsAtIndexes_(NSIndexSet indexes) {
    _lib._objc_msgSend_481(
      this.pointer,
      _lib._sel_removeObjectsAtIndexes_1,
      indexes.pointer,
    );
  }

  void replaceObjectsAtIndexes_withObjects_(
    NSIndexSet indexes,
    NSArray objects,
  ) {
    _lib._objc_msgSend_482(
      this.pointer,
      _lib._sel_replaceObjectsAtIndexes_withObjects_1,
      indexes.pointer,
      objects.pointer,
    );
  }

  void setObject_atIndexedSubscript_(NSObject obj, int idx) {
    _lib._objc_msgSend_469(
      this.pointer,
      _lib._sel_setObject_atIndexedSubscript_1,
      obj.pointer,
      idx,
    );
  }

  void sortUsingComparator_(
    ObjCBlock_NSComparisonResult_objcObjCObject_objcObjCObject cmptr,
  ) {
    _lib._objc_msgSend_483(
      this.pointer,
      _lib._sel_sortUsingComparator_1,
      cmptr.pointer,
    );
  }

  void sortWithOptions_usingComparator_(
    int opts,
    ObjCBlock_NSComparisonResult_objcObjCObject_objcObjCObject cmptr,
  ) {
    _lib._objc_msgSend_484(
      this.pointer,
      _lib._sel_sortWithOptions_usingComparator_1,
      opts,
      cmptr.pointer,
    );
  }

  static NSMutableArray arrayWithCapacity_(AVFAudio _lib, int numItems) {
    final _ret = _lib._objc_msgSend_65(
      _lib._class_NSMutableArray1,
      _lib._sel_arrayWithCapacity_1,
      numItems,
    );
    return NSMutableArray._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableArray? arrayWithContentsOfFile_(
    AVFAudio _lib,
    NSString path,
  ) {
    final _ret = _lib._objc_msgSend_485(
      _lib._class_NSMutableArray1,
      _lib._sel_arrayWithContentsOfFile_1,
      path.pointer,
    );
    return _ret.address == 0
        ? null
        : NSMutableArray._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableArray? arrayWithContentsOfURL_(AVFAudio _lib, NSURL url) {
    final _ret = _lib._objc_msgSend_486(
      _lib._class_NSMutableArray1,
      _lib._sel_arrayWithContentsOfURL_1,
      url.pointer,
    );
    return _ret.address == 0
        ? null
        : NSMutableArray._(_ret, _lib, retain: true, release: true);
  }

  NSMutableArray? initWithContentsOfFile_(NSString path) {
    final _ret = _lib._objc_msgSend_485(
      this.pointer,
      _lib._sel_initWithContentsOfFile_1,
      path.pointer,
    );
    return _ret.address == 0
        ? null
        : NSMutableArray._(_ret, _lib, retain: true, release: true);
  }

  NSMutableArray? initWithContentsOfURL_(NSURL url) {
    final _ret = _lib._objc_msgSend_486(
      this.pointer,
      _lib._sel_initWithContentsOfURL_1,
      url.pointer,
    );
    return _ret.address == 0
        ? null
        : NSMutableArray._(_ret, _lib, retain: true, release: true);
  }

  void applyDifference_(NSObject difference) {
    _lib._objc_msgSend_15(
      this.pointer,
      _lib._sel_applyDifference_1,
      difference.pointer,
    );
  }

  void sortUsingDescriptors_(NSArray sortDescriptors) {
    _lib._objc_msgSend_472(
      this.pointer,
      _lib._sel_sortUsingDescriptors_1,
      sortDescriptors.pointer,
    );
  }

  void filterUsingPredicate_(NSPredicate predicate) {
    _lib._objc_msgSend_487(
      this.pointer,
      _lib._sel_filterUsingPredicate_1,
      predicate.pointer,
    );
  }

  @override
  NSMutableArray initWithObjects_count_(
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> objects,
    int cnt,
  ) {
    final _ret = _lib._objc_msgSend_66(
      this.pointer,
      _lib._sel_initWithObjects_count_1,
      objects,
      cnt,
    );
    return NSMutableArray._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableArray array(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSMutableArray1,
      _lib._sel_array1,
    );
    return NSMutableArray._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableArray arrayWithObject_(AVFAudio _lib, NSObject anObject) {
    final _ret = _lib._objc_msgSend_124(
      _lib._class_NSMutableArray1,
      _lib._sel_arrayWithObject_1,
      anObject.pointer,
    );
    return NSMutableArray._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableArray arrayWithObjects_count_(
    AVFAudio _lib,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> objects,
    int cnt,
  ) {
    final _ret = _lib._objc_msgSend_66(
      _lib._class_NSMutableArray1,
      _lib._sel_arrayWithObjects_count_1,
      objects,
      cnt,
    );
    return NSMutableArray._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableArray arrayWithObjects_(AVFAudio _lib, NSObject firstObj) {
    final _ret = _lib._objc_msgSend_124(
      _lib._class_NSMutableArray1,
      _lib._sel_arrayWithObjects_1,
      firstObj.pointer,
    );
    return NSMutableArray._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableArray arrayWithArray_(AVFAudio _lib, NSArray array) {
    final _ret = _lib._objc_msgSend_125(
      _lib._class_NSMutableArray1,
      _lib._sel_arrayWithArray_1,
      array.pointer,
    );
    return NSMutableArray._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSMutableArray initWithObjects_(NSObject firstObj) {
    final _ret = _lib._objc_msgSend_124(
      this.pointer,
      _lib._sel_initWithObjects_1,
      firstObj.pointer,
    );
    return NSMutableArray._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSMutableArray initWithArray_(NSArray array) {
    final _ret = _lib._objc_msgSend_125(
      this.pointer,
      _lib._sel_initWithArray_1,
      array.pointer,
    );
    return NSMutableArray._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSMutableArray initWithArray_copyItems_(NSArray array, bool flag) {
    final _ret = _lib._objc_msgSend_126(
      this.pointer,
      _lib._sel_initWithArray_copyItems_1,
      array.pointer,
      flag,
    );
    return NSMutableArray._(_ret, _lib, retain: false, release: true);
  }

  static NSArray? arrayWithContentsOfURL_error_(
    AVFAudio _lib,
    NSURL url,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    final _ret = _lib._objc_msgSend_127(
      _lib._class_NSMutableArray1,
      _lib._sel_arrayWithContentsOfURL_error_1,
      url.pointer,
      error,
    );
    return _ret.address == 0
        ? null
        : NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableArray new1(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSMutableArray1,
      _lib._sel_new1,
    );
    return NSMutableArray._(_ret, _lib, retain: false, release: true);
  }

  static NSMutableArray allocWithZone_(
    AVFAudio _lib,
    ffi.Pointer<_NSZone> zone,
  ) {
    final _ret = _lib._objc_msgSend_3(
      _lib._class_NSMutableArray1,
      _lib._sel_allocWithZone_1,
      zone,
    );
    return NSMutableArray._(_ret, _lib, retain: false, release: true);
  }

  static NSMutableArray alloc(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSMutableArray1,
      _lib._sel_alloc1,
    );
    return NSMutableArray._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
    AVFAudio _lib,
    NSObject aTarget,
    ffi.Pointer<objc.ObjCSelector> aSelector,
    NSObject? anArgument,
  ) {
    _lib._objc_msgSend_14(
      _lib._class_NSMutableArray1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
      aTarget.pointer,
      aSelector,
      anArgument?.pointer ?? ffi.nullptr,
    );
  }

  static void cancelPreviousPerformRequestsWithTarget_(
    AVFAudio _lib,
    NSObject aTarget,
  ) {
    _lib._objc_msgSend_15(
      _lib._class_NSMutableArray1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_1,
      aTarget.pointer,
    );
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSMutableArray1,
      _lib._sel_accessInstanceVariablesDirectly1,
    );
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSMutableArray1,
      _lib._sel_useStoredAccessor1,
    );
  }

  static NSSet keyPathsForValuesAffectingValueForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    final _ret = _lib._objc_msgSend_63(
      _lib._class_NSMutableArray1,
      _lib._sel_keyPathsForValuesAffectingValueForKey_1,
      key.pointer,
    );
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    return _lib._objc_msgSend_64(
      _lib._class_NSMutableArray1,
      _lib._sel_automaticallyNotifiesObserversForKey_1,
      key.pointer,
    );
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
    AVFAudio _lib,
    NSArray keys,
    NSString dependentKey,
  ) {
    _lib._objc_msgSend_88(
      _lib._class_NSMutableArray1,
      _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
      keys.pointer,
      dependentKey.pointer,
    );
  }

  static NSArray classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_85(
      _lib._class_NSMutableArray1,
      _lib._sel_classFallbacksForKeyedArchiver1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSMutableArray1,
      _lib._sel_classForKeyedUnarchiver1,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

class NSMutableOrderedSet extends NSOrderedSet {
  NSMutableOrderedSet._(
    ffi.Pointer<objc.ObjCObject> pointer,
    AVFAudio lib, {
    bool retain = false,
    bool release = false,
  }) : super._(pointer, lib, retain: retain, release: release);

  /// Returns a [NSMutableOrderedSet] that points to the same underlying object as [other].
  static NSMutableOrderedSet castFrom<T extends objc.ObjCObjectBase>(
    AVFAudio lib,
    T other,
  ) {
    return NSMutableOrderedSet._(
      other.pointer,
      lib,
      retain: true,
      release: true,
    );
  }

  /// Returns a [NSMutableOrderedSet] that wraps the given raw object pointer.
  static NSMutableOrderedSet castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCObject> other, {
    bool retain = false,
    bool release = false,
  }) {
    return NSMutableOrderedSet._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSMutableOrderedSet].
  static bool isInstance(AVFAudio lib, objc.ObjCObjectBase obj) {
    return lib._objc_msgSend_0(
      obj.pointer,
      lib._sel_isKindOfClass_1,
      lib._class_NSMutableOrderedSet1,
    );
  }

  void insertObject_atIndex_(NSObject object, int idx) {
    _lib._objc_msgSend_469(
      this.pointer,
      _lib._sel_insertObject_atIndex_1,
      object.pointer,
      idx,
    );
  }

  void removeObjectAtIndex_(int idx) {
    _lib._objc_msgSend_470(this.pointer, _lib._sel_removeObjectAtIndex_1, idx);
  }

  void replaceObjectAtIndex_withObject_(int idx, NSObject object) {
    _lib._objc_msgSend_471(
      this.pointer,
      _lib._sel_replaceObjectAtIndex_withObject_1,
      idx,
      object.pointer,
    );
  }

  @override
  NSMutableOrderedSet? initWithCoder_(NSCoder coder) {
    final _ret = _lib._objc_msgSend_47(
      this.pointer,
      _lib._sel_initWithCoder_1,
      coder.pointer,
    );
    return _ret.address == 0
        ? null
        : NSMutableOrderedSet._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSMutableOrderedSet init() {
    final _ret = _lib._objc_msgSend_2(this.pointer, _lib._sel_init1);
    return NSMutableOrderedSet._(_ret, _lib, retain: true, release: true);
  }

  NSMutableOrderedSet initWithCapacity_(int numItems) {
    final _ret = _lib._objc_msgSend_65(
      this.pointer,
      _lib._sel_initWithCapacity_1,
      numItems,
    );
    return NSMutableOrderedSet._(_ret, _lib, retain: true, release: true);
  }

  void addObject_(NSObject object) {
    _lib._objc_msgSend_15(this.pointer, _lib._sel_addObject_1, object.pointer);
  }

  void addObjects_count_(
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> objects,
    int count,
  ) {
    _lib._objc_msgSend_500(
      this.pointer,
      _lib._sel_addObjects_count_1,
      objects,
      count,
    );
  }

  void addObjectsFromArray_(NSArray array) {
    _lib._objc_msgSend_472(
      this.pointer,
      _lib._sel_addObjectsFromArray_1,
      array.pointer,
    );
  }

  void exchangeObjectAtIndex_withObjectAtIndex_(int idx1, int idx2) {
    _lib._objc_msgSend_473(
      this.pointer,
      _lib._sel_exchangeObjectAtIndex_withObjectAtIndex_1,
      idx1,
      idx2,
    );
  }

  void moveObjectsAtIndexes_toIndex_(NSIndexSet indexes, int idx) {
    _lib._objc_msgSend_501(
      this.pointer,
      _lib._sel_moveObjectsAtIndexes_toIndex_1,
      indexes.pointer,
      idx,
    );
  }

  void insertObjects_atIndexes_(NSArray objects, NSIndexSet indexes) {
    _lib._objc_msgSend_480(
      this.pointer,
      _lib._sel_insertObjects_atIndexes_1,
      objects.pointer,
      indexes.pointer,
    );
  }

  void setObject_atIndex_(NSObject obj, int idx) {
    _lib._objc_msgSend_469(
      this.pointer,
      _lib._sel_setObject_atIndex_1,
      obj.pointer,
      idx,
    );
  }

  void setObject_atIndexedSubscript_(NSObject obj, int idx) {
    _lib._objc_msgSend_469(
      this.pointer,
      _lib._sel_setObject_atIndexedSubscript_1,
      obj.pointer,
      idx,
    );
  }

  void replaceObjectsInRange_withObjects_count_(
    _NSRange range,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> objects,
    int count,
  ) {
    _lib._objc_msgSend_502(
      this.pointer,
      _lib._sel_replaceObjectsInRange_withObjects_count_1,
      range,
      objects,
      count,
    );
  }

  void replaceObjectsAtIndexes_withObjects_(
    NSIndexSet indexes,
    NSArray objects,
  ) {
    _lib._objc_msgSend_482(
      this.pointer,
      _lib._sel_replaceObjectsAtIndexes_withObjects_1,
      indexes.pointer,
      objects.pointer,
    );
  }

  void removeObjectsInRange_(_NSRange range) {
    _lib._objc_msgSend_476(
      this.pointer,
      _lib._sel_removeObjectsInRange_1,
      range,
    );
  }

  void removeObjectsAtIndexes_(NSIndexSet indexes) {
    _lib._objc_msgSend_481(
      this.pointer,
      _lib._sel_removeObjectsAtIndexes_1,
      indexes.pointer,
    );
  }

  void removeAllObjects() {
    _lib._objc_msgSend_1(this.pointer, _lib._sel_removeAllObjects1);
  }

  void removeObject_(NSObject object) {
    _lib._objc_msgSend_15(
      this.pointer,
      _lib._sel_removeObject_1,
      object.pointer,
    );
  }

  void removeObjectsInArray_(NSArray array) {
    _lib._objc_msgSend_472(
      this.pointer,
      _lib._sel_removeObjectsInArray_1,
      array.pointer,
    );
  }

  void intersectOrderedSet_(NSOrderedSet other) {
    _lib._objc_msgSend_503(
      this.pointer,
      _lib._sel_intersectOrderedSet_1,
      other.pointer,
    );
  }

  void minusOrderedSet_(NSOrderedSet other) {
    _lib._objc_msgSend_503(
      this.pointer,
      _lib._sel_minusOrderedSet_1,
      other.pointer,
    );
  }

  void unionOrderedSet_(NSOrderedSet other) {
    _lib._objc_msgSend_503(
      this.pointer,
      _lib._sel_unionOrderedSet_1,
      other.pointer,
    );
  }

  void intersectSet_(NSSet other) {
    _lib._objc_msgSend_504(
      this.pointer,
      _lib._sel_intersectSet_1,
      other.pointer,
    );
  }

  void minusSet_(NSSet other) {
    _lib._objc_msgSend_504(this.pointer, _lib._sel_minusSet_1, other.pointer);
  }

  void unionSet_(NSSet other) {
    _lib._objc_msgSend_504(this.pointer, _lib._sel_unionSet_1, other.pointer);
  }

  void sortUsingComparator_(
    ObjCBlock_NSComparisonResult_objcObjCObject_objcObjCObject cmptr,
  ) {
    _lib._objc_msgSend_483(
      this.pointer,
      _lib._sel_sortUsingComparator_1,
      cmptr.pointer,
    );
  }

  void sortWithOptions_usingComparator_(
    int opts,
    ObjCBlock_NSComparisonResult_objcObjCObject_objcObjCObject cmptr,
  ) {
    _lib._objc_msgSend_484(
      this.pointer,
      _lib._sel_sortWithOptions_usingComparator_1,
      opts,
      cmptr.pointer,
    );
  }

  void sortRange_options_usingComparator_(
    _NSRange range,
    int opts,
    ObjCBlock_NSComparisonResult_objcObjCObject_objcObjCObject cmptr,
  ) {
    _lib._objc_msgSend_505(
      this.pointer,
      _lib._sel_sortRange_options_usingComparator_1,
      range,
      opts,
      cmptr.pointer,
    );
  }

  static NSMutableOrderedSet orderedSetWithCapacity_(
    AVFAudio _lib,
    int numItems,
  ) {
    final _ret = _lib._objc_msgSend_65(
      _lib._class_NSMutableOrderedSet1,
      _lib._sel_orderedSetWithCapacity_1,
      numItems,
    );
    return NSMutableOrderedSet._(_ret, _lib, retain: true, release: true);
  }

  void applyDifference_(NSObject difference) {
    _lib._objc_msgSend_15(
      this.pointer,
      _lib._sel_applyDifference_1,
      difference.pointer,
    );
  }

  void sortUsingDescriptors_(NSArray sortDescriptors) {
    _lib._objc_msgSend_472(
      this.pointer,
      _lib._sel_sortUsingDescriptors_1,
      sortDescriptors.pointer,
    );
  }

  void filterUsingPredicate_(NSPredicate p) {
    _lib._objc_msgSend_487(
      this.pointer,
      _lib._sel_filterUsingPredicate_1,
      p.pointer,
    );
  }

  @override
  NSMutableOrderedSet initWithObjects_count_(
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> objects,
    int cnt,
  ) {
    final _ret = _lib._objc_msgSend_66(
      this.pointer,
      _lib._sel_initWithObjects_count_1,
      objects,
      cnt,
    );
    return NSMutableOrderedSet._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableOrderedSet orderedSet(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSMutableOrderedSet1,
      _lib._sel_orderedSet1,
    );
    return NSMutableOrderedSet._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableOrderedSet orderedSetWithObject_(
    AVFAudio _lib,
    NSObject object,
  ) {
    final _ret = _lib._objc_msgSend_124(
      _lib._class_NSMutableOrderedSet1,
      _lib._sel_orderedSetWithObject_1,
      object.pointer,
    );
    return NSMutableOrderedSet._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableOrderedSet orderedSetWithObjects_count_(
    AVFAudio _lib,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> objects,
    int cnt,
  ) {
    final _ret = _lib._objc_msgSend_66(
      _lib._class_NSMutableOrderedSet1,
      _lib._sel_orderedSetWithObjects_count_1,
      objects,
      cnt,
    );
    return NSMutableOrderedSet._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableOrderedSet orderedSetWithObjects_(
    AVFAudio _lib,
    NSObject firstObj,
  ) {
    final _ret = _lib._objc_msgSend_124(
      _lib._class_NSMutableOrderedSet1,
      _lib._sel_orderedSetWithObjects_1,
      firstObj.pointer,
    );
    return NSMutableOrderedSet._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableOrderedSet orderedSetWithOrderedSet_(
    AVFAudio _lib,
    NSOrderedSet set,
  ) {
    final _ret = _lib._objc_msgSend_492(
      _lib._class_NSMutableOrderedSet1,
      _lib._sel_orderedSetWithOrderedSet_1,
      set.pointer,
    );
    return NSMutableOrderedSet._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableOrderedSet orderedSetWithOrderedSet_range_copyItems_(
    AVFAudio _lib,
    NSOrderedSet set,
    _NSRange range,
    bool flag,
  ) {
    final _ret = _lib._objc_msgSend_493(
      _lib._class_NSMutableOrderedSet1,
      _lib._sel_orderedSetWithOrderedSet_range_copyItems_1,
      set.pointer,
      range,
      flag,
    );
    return NSMutableOrderedSet._(_ret, _lib, retain: false, release: true);
  }

  static NSMutableOrderedSet orderedSetWithArray_(
    AVFAudio _lib,
    NSArray array,
  ) {
    final _ret = _lib._objc_msgSend_125(
      _lib._class_NSMutableOrderedSet1,
      _lib._sel_orderedSetWithArray_1,
      array.pointer,
    );
    return NSMutableOrderedSet._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableOrderedSet orderedSetWithArray_range_copyItems_(
    AVFAudio _lib,
    NSArray array,
    _NSRange range,
    bool flag,
  ) {
    final _ret = _lib._objc_msgSend_494(
      _lib._class_NSMutableOrderedSet1,
      _lib._sel_orderedSetWithArray_range_copyItems_1,
      array.pointer,
      range,
      flag,
    );
    return NSMutableOrderedSet._(_ret, _lib, retain: false, release: true);
  }

  static NSMutableOrderedSet orderedSetWithSet_(AVFAudio _lib, NSSet set) {
    final _ret = _lib._objc_msgSend_411(
      _lib._class_NSMutableOrderedSet1,
      _lib._sel_orderedSetWithSet_1,
      set.pointer,
    );
    return NSMutableOrderedSet._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableOrderedSet orderedSetWithSet_copyItems_(
    AVFAudio _lib,
    NSSet set,
    bool flag,
  ) {
    final _ret = _lib._objc_msgSend_412(
      _lib._class_NSMutableOrderedSet1,
      _lib._sel_orderedSetWithSet_copyItems_1,
      set.pointer,
      flag,
    );
    return NSMutableOrderedSet._(_ret, _lib, retain: false, release: true);
  }

  @override
  NSMutableOrderedSet initWithObject_(NSObject object) {
    final _ret = _lib._objc_msgSend_124(
      this.pointer,
      _lib._sel_initWithObject_1,
      object.pointer,
    );
    return NSMutableOrderedSet._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSMutableOrderedSet initWithObjects_(NSObject firstObj) {
    final _ret = _lib._objc_msgSend_124(
      this.pointer,
      _lib._sel_initWithObjects_1,
      firstObj.pointer,
    );
    return NSMutableOrderedSet._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSMutableOrderedSet initWithOrderedSet_(NSOrderedSet set) {
    final _ret = _lib._objc_msgSend_492(
      this.pointer,
      _lib._sel_initWithOrderedSet_1,
      set.pointer,
    );
    return NSMutableOrderedSet._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSMutableOrderedSet initWithOrderedSet_copyItems_(
    NSOrderedSet set,
    bool flag,
  ) {
    final _ret = _lib._objc_msgSend_495(
      this.pointer,
      _lib._sel_initWithOrderedSet_copyItems_1,
      set.pointer,
      flag,
    );
    return NSMutableOrderedSet._(_ret, _lib, retain: false, release: true);
  }

  @override
  NSMutableOrderedSet initWithOrderedSet_range_copyItems_(
    NSOrderedSet set,
    _NSRange range,
    bool flag,
  ) {
    final _ret = _lib._objc_msgSend_493(
      this.pointer,
      _lib._sel_initWithOrderedSet_range_copyItems_1,
      set.pointer,
      range,
      flag,
    );
    return NSMutableOrderedSet._(_ret, _lib, retain: false, release: true);
  }

  @override
  NSMutableOrderedSet initWithArray_(NSArray array) {
    final _ret = _lib._objc_msgSend_125(
      this.pointer,
      _lib._sel_initWithArray_1,
      array.pointer,
    );
    return NSMutableOrderedSet._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSMutableOrderedSet initWithArray_copyItems_(NSArray set, bool flag) {
    final _ret = _lib._objc_msgSend_126(
      this.pointer,
      _lib._sel_initWithArray_copyItems_1,
      set.pointer,
      flag,
    );
    return NSMutableOrderedSet._(_ret, _lib, retain: false, release: true);
  }

  @override
  NSMutableOrderedSet initWithArray_range_copyItems_(
    NSArray set,
    _NSRange range,
    bool flag,
  ) {
    final _ret = _lib._objc_msgSend_494(
      this.pointer,
      _lib._sel_initWithArray_range_copyItems_1,
      set.pointer,
      range,
      flag,
    );
    return NSMutableOrderedSet._(_ret, _lib, retain: false, release: true);
  }

  @override
  NSMutableOrderedSet initWithSet_(NSSet set) {
    final _ret = _lib._objc_msgSend_411(
      this.pointer,
      _lib._sel_initWithSet_1,
      set.pointer,
    );
    return NSMutableOrderedSet._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSMutableOrderedSet initWithSet_copyItems_(NSSet set, bool flag) {
    final _ret = _lib._objc_msgSend_412(
      this.pointer,
      _lib._sel_initWithSet_copyItems_1,
      set.pointer,
      flag,
    );
    return NSMutableOrderedSet._(_ret, _lib, retain: false, release: true);
  }

  static NSMutableOrderedSet new1(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSMutableOrderedSet1,
      _lib._sel_new1,
    );
    return NSMutableOrderedSet._(_ret, _lib, retain: false, release: true);
  }

  static NSMutableOrderedSet allocWithZone_(
    AVFAudio _lib,
    ffi.Pointer<_NSZone> zone,
  ) {
    final _ret = _lib._objc_msgSend_3(
      _lib._class_NSMutableOrderedSet1,
      _lib._sel_allocWithZone_1,
      zone,
    );
    return NSMutableOrderedSet._(_ret, _lib, retain: false, release: true);
  }

  static NSMutableOrderedSet alloc(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSMutableOrderedSet1,
      _lib._sel_alloc1,
    );
    return NSMutableOrderedSet._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
    AVFAudio _lib,
    NSObject aTarget,
    ffi.Pointer<objc.ObjCSelector> aSelector,
    NSObject? anArgument,
  ) {
    _lib._objc_msgSend_14(
      _lib._class_NSMutableOrderedSet1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
      aTarget.pointer,
      aSelector,
      anArgument?.pointer ?? ffi.nullptr,
    );
  }

  static void cancelPreviousPerformRequestsWithTarget_(
    AVFAudio _lib,
    NSObject aTarget,
  ) {
    _lib._objc_msgSend_15(
      _lib._class_NSMutableOrderedSet1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_1,
      aTarget.pointer,
    );
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSMutableOrderedSet1,
      _lib._sel_accessInstanceVariablesDirectly1,
    );
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSMutableOrderedSet1,
      _lib._sel_useStoredAccessor1,
    );
  }

  static NSSet keyPathsForValuesAffectingValueForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    final _ret = _lib._objc_msgSend_63(
      _lib._class_NSMutableOrderedSet1,
      _lib._sel_keyPathsForValuesAffectingValueForKey_1,
      key.pointer,
    );
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    return _lib._objc_msgSend_64(
      _lib._class_NSMutableOrderedSet1,
      _lib._sel_automaticallyNotifiesObserversForKey_1,
      key.pointer,
    );
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
    AVFAudio _lib,
    NSArray keys,
    NSString dependentKey,
  ) {
    _lib._objc_msgSend_88(
      _lib._class_NSMutableOrderedSet1,
      _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
      keys.pointer,
      dependentKey.pointer,
    );
  }

  static NSArray classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_85(
      _lib._class_NSMutableOrderedSet1,
      _lib._sel_classFallbacksForKeyedArchiver1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSMutableOrderedSet1,
      _lib._sel_classForKeyedUnarchiver1,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

class NSOrderedSet extends NSObject {
  NSOrderedSet._(
    ffi.Pointer<objc.ObjCObject> pointer,
    AVFAudio lib, {
    bool retain = false,
    bool release = false,
  }) : super._(pointer, lib, retain: retain, release: release);

  /// Returns a [NSOrderedSet] that points to the same underlying object as [other].
  static NSOrderedSet castFrom<T extends objc.ObjCObjectBase>(
    AVFAudio lib,
    T other,
  ) {
    return NSOrderedSet._(other.pointer, lib, retain: true, release: true);
  }

  /// Returns a [NSOrderedSet] that wraps the given raw object pointer.
  static NSOrderedSet castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCObject> other, {
    bool retain = false,
    bool release = false,
  }) {
    return NSOrderedSet._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSOrderedSet].
  static bool isInstance(AVFAudio lib, objc.ObjCObjectBase obj) {
    return lib._objc_msgSend_0(
      obj.pointer,
      lib._sel_isKindOfClass_1,
      lib._class_NSOrderedSet1,
    );
  }

  int get count {
    return _lib._objc_msgSend_10(this.pointer, _lib._sel_count1);
  }

  NSObject objectAtIndex_(int idx) {
    final _ret = _lib._objc_msgSend_65(
      this.pointer,
      _lib._sel_objectAtIndex_1,
      idx,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  int indexOfObject_(NSObject object) {
    return _lib._objc_msgSend_74(
      this.pointer,
      _lib._sel_indexOfObject_1,
      object.pointer,
    );
  }

  @override
  NSOrderedSet init() {
    final _ret = _lib._objc_msgSend_2(this.pointer, _lib._sel_init1);
    return NSOrderedSet._(_ret, _lib, retain: true, release: true);
  }

  NSOrderedSet initWithObjects_count_(
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> objects,
    int cnt,
  ) {
    final _ret = _lib._objc_msgSend_66(
      this.pointer,
      _lib._sel_initWithObjects_count_1,
      objects,
      cnt,
    );
    return NSOrderedSet._(_ret, _lib, retain: true, release: true);
  }

  NSOrderedSet? initWithCoder_(NSCoder coder) {
    final _ret = _lib._objc_msgSend_47(
      this.pointer,
      _lib._sel_initWithCoder_1,
      coder.pointer,
    );
    return _ret.address == 0
        ? null
        : NSOrderedSet._(_ret, _lib, retain: true, release: true);
  }

  void getObjects_range_(
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> objects,
    _NSRange range,
  ) {
    _lib._objc_msgSend_73(
      this.pointer,
      _lib._sel_getObjects_range_1,
      objects,
      range,
    );
  }

  NSArray objectsAtIndexes_(NSIndexSet indexes) {
    final _ret = _lib._objc_msgSend_111(
      this.pointer,
      _lib._sel_objectsAtIndexes_1,
      indexes.pointer,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get firstObject {
    final _ret = _lib._objc_msgSend_17(this.pointer, _lib._sel_firstObject1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get lastObject {
    final _ret = _lib._objc_msgSend_17(this.pointer, _lib._sel_lastObject1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  bool isEqualToOrderedSet_(NSOrderedSet other) {
    return _lib._objc_msgSend_489(
      this.pointer,
      _lib._sel_isEqualToOrderedSet_1,
      other.pointer,
    );
  }

  bool containsObject_(NSObject object) {
    return _lib._objc_msgSend_0(
      this.pointer,
      _lib._sel_containsObject_1,
      object.pointer,
    );
  }

  bool intersectsOrderedSet_(NSOrderedSet other) {
    return _lib._objc_msgSend_489(
      this.pointer,
      _lib._sel_intersectsOrderedSet_1,
      other.pointer,
    );
  }

  bool intersectsSet_(NSSet set) {
    return _lib._objc_msgSend_403(
      this.pointer,
      _lib._sel_intersectsSet_1,
      set.pointer,
    );
  }

  bool isSubsetOfOrderedSet_(NSOrderedSet other) {
    return _lib._objc_msgSend_489(
      this.pointer,
      _lib._sel_isSubsetOfOrderedSet_1,
      other.pointer,
    );
  }

  bool isSubsetOfSet_(NSSet set) {
    return _lib._objc_msgSend_403(
      this.pointer,
      _lib._sel_isSubsetOfSet_1,
      set.pointer,
    );
  }

  NSObject objectAtIndexedSubscript_(int idx) {
    final _ret = _lib._objc_msgSend_65(
      this.pointer,
      _lib._sel_objectAtIndexedSubscript_1,
      idx,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSEnumerator objectEnumerator() {
    final _ret = _lib._objc_msgSend_77(
      this.pointer,
      _lib._sel_objectEnumerator1,
    );
    return NSEnumerator._(_ret, _lib, retain: true, release: true);
  }

  NSEnumerator reverseObjectEnumerator() {
    final _ret = _lib._objc_msgSend_77(
      this.pointer,
      _lib._sel_reverseObjectEnumerator1,
    );
    return NSEnumerator._(_ret, _lib, retain: true, release: true);
  }

  NSOrderedSet get reversedOrderedSet {
    final _ret = _lib._objc_msgSend_490(
      this.pointer,
      _lib._sel_reversedOrderedSet1,
    );
    return NSOrderedSet._(_ret, _lib, retain: true, release: true);
  }

  NSArray get array {
    final _ret = _lib._objc_msgSend_85(this.pointer, _lib._sel_array1);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSSet get set1 {
    final _ret = _lib._objc_msgSend_491(this.pointer, _lib._sel_set1);
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  void enumerateObjectsUsingBlock_(
    ObjCBlock_ffiVoid_objcObjCObject_ffiUnsignedLong_bool block,
  ) {
    _lib._objc_msgSend_112(
      this.pointer,
      _lib._sel_enumerateObjectsUsingBlock_1,
      block.pointer,
    );
  }

  void enumerateObjectsWithOptions_usingBlock_(
    int opts,
    ObjCBlock_ffiVoid_objcObjCObject_ffiUnsignedLong_bool block,
  ) {
    _lib._objc_msgSend_113(
      this.pointer,
      _lib._sel_enumerateObjectsWithOptions_usingBlock_1,
      opts,
      block.pointer,
    );
  }

  void enumerateObjectsAtIndexes_options_usingBlock_(
    NSIndexSet s,
    int opts,
    ObjCBlock_ffiVoid_objcObjCObject_ffiUnsignedLong_bool block,
  ) {
    _lib._objc_msgSend_114(
      this.pointer,
      _lib._sel_enumerateObjectsAtIndexes_options_usingBlock_1,
      s.pointer,
      opts,
      block.pointer,
    );
  }

  int indexOfObjectPassingTest_(
    ObjCBlock_bool_objcObjCObject_ffiUnsignedLong_bool predicate,
  ) {
    return _lib._objc_msgSend_115(
      this.pointer,
      _lib._sel_indexOfObjectPassingTest_1,
      predicate.pointer,
    );
  }

  int indexOfObjectWithOptions_passingTest_(
    int opts,
    ObjCBlock_bool_objcObjCObject_ffiUnsignedLong_bool predicate,
  ) {
    return _lib._objc_msgSend_116(
      this.pointer,
      _lib._sel_indexOfObjectWithOptions_passingTest_1,
      opts,
      predicate.pointer,
    );
  }

  int indexOfObjectAtIndexes_options_passingTest_(
    NSIndexSet s,
    int opts,
    ObjCBlock_bool_objcObjCObject_ffiUnsignedLong_bool predicate,
  ) {
    return _lib._objc_msgSend_117(
      this.pointer,
      _lib._sel_indexOfObjectAtIndexes_options_passingTest_1,
      s.pointer,
      opts,
      predicate.pointer,
    );
  }

  NSIndexSet indexesOfObjectsPassingTest_(
    ObjCBlock_bool_objcObjCObject_ffiUnsignedLong_bool predicate,
  ) {
    final _ret = _lib._objc_msgSend_118(
      this.pointer,
      _lib._sel_indexesOfObjectsPassingTest_1,
      predicate.pointer,
    );
    return NSIndexSet._(_ret, _lib, retain: true, release: true);
  }

  NSIndexSet indexesOfObjectsWithOptions_passingTest_(
    int opts,
    ObjCBlock_bool_objcObjCObject_ffiUnsignedLong_bool predicate,
  ) {
    final _ret = _lib._objc_msgSend_119(
      this.pointer,
      _lib._sel_indexesOfObjectsWithOptions_passingTest_1,
      opts,
      predicate.pointer,
    );
    return NSIndexSet._(_ret, _lib, retain: true, release: true);
  }

  NSIndexSet indexesOfObjectsAtIndexes_options_passingTest_(
    NSIndexSet s,
    int opts,
    ObjCBlock_bool_objcObjCObject_ffiUnsignedLong_bool predicate,
  ) {
    final _ret = _lib._objc_msgSend_120(
      this.pointer,
      _lib._sel_indexesOfObjectsAtIndexes_options_passingTest_1,
      s.pointer,
      opts,
      predicate.pointer,
    );
    return NSIndexSet._(_ret, _lib, retain: true, release: true);
  }

  int indexOfObject_inSortedRange_options_usingComparator_(
    NSObject object,
    _NSRange range,
    int opts,
    ObjCBlock_NSComparisonResult_objcObjCObject_objcObjCObject cmp,
  ) {
    return _lib._objc_msgSend_123(
      this.pointer,
      _lib._sel_indexOfObject_inSortedRange_options_usingComparator_1,
      object.pointer,
      range,
      opts,
      cmp.pointer,
    );
  }

  NSArray sortedArrayUsingComparator_(
    ObjCBlock_NSComparisonResult_objcObjCObject_objcObjCObject cmptr,
  ) {
    final _ret = _lib._objc_msgSend_121(
      this.pointer,
      _lib._sel_sortedArrayUsingComparator_1,
      cmptr.pointer,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSArray sortedArrayWithOptions_usingComparator_(
    int opts,
    ObjCBlock_NSComparisonResult_objcObjCObject_objcObjCObject cmptr,
  ) {
    final _ret = _lib._objc_msgSend_122(
      this.pointer,
      _lib._sel_sortedArrayWithOptions_usingComparator_1,
      opts,
      cmptr.pointer,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSString get description {
    final _ret = _lib._objc_msgSend_21(this.pointer, _lib._sel_description1);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString descriptionWithLocale_(NSObject? locale) {
    final _ret = _lib._objc_msgSend_70(
      this.pointer,
      _lib._sel_descriptionWithLocale_1,
      locale?.pointer ?? ffi.nullptr,
    );
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString descriptionWithLocale_indent_(NSObject? locale, int level) {
    final _ret = _lib._objc_msgSend_71(
      this.pointer,
      _lib._sel_descriptionWithLocale_indent_1,
      locale?.pointer ?? ffi.nullptr,
      level,
    );
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  static NSOrderedSet orderedSet(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSOrderedSet1,
      _lib._sel_orderedSet1,
    );
    return NSOrderedSet._(_ret, _lib, retain: true, release: true);
  }

  static NSOrderedSet orderedSetWithObject_(AVFAudio _lib, NSObject object) {
    final _ret = _lib._objc_msgSend_124(
      _lib._class_NSOrderedSet1,
      _lib._sel_orderedSetWithObject_1,
      object.pointer,
    );
    return NSOrderedSet._(_ret, _lib, retain: true, release: true);
  }

  static NSOrderedSet orderedSetWithObjects_count_(
    AVFAudio _lib,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> objects,
    int cnt,
  ) {
    final _ret = _lib._objc_msgSend_66(
      _lib._class_NSOrderedSet1,
      _lib._sel_orderedSetWithObjects_count_1,
      objects,
      cnt,
    );
    return NSOrderedSet._(_ret, _lib, retain: true, release: true);
  }

  static NSOrderedSet orderedSetWithObjects_(AVFAudio _lib, NSObject firstObj) {
    final _ret = _lib._objc_msgSend_124(
      _lib._class_NSOrderedSet1,
      _lib._sel_orderedSetWithObjects_1,
      firstObj.pointer,
    );
    return NSOrderedSet._(_ret, _lib, retain: true, release: true);
  }

  static NSOrderedSet orderedSetWithOrderedSet_(
    AVFAudio _lib,
    NSOrderedSet set,
  ) {
    final _ret = _lib._objc_msgSend_492(
      _lib._class_NSOrderedSet1,
      _lib._sel_orderedSetWithOrderedSet_1,
      set.pointer,
    );
    return NSOrderedSet._(_ret, _lib, retain: true, release: true);
  }

  static NSOrderedSet orderedSetWithOrderedSet_range_copyItems_(
    AVFAudio _lib,
    NSOrderedSet set,
    _NSRange range,
    bool flag,
  ) {
    final _ret = _lib._objc_msgSend_493(
      _lib._class_NSOrderedSet1,
      _lib._sel_orderedSetWithOrderedSet_range_copyItems_1,
      set.pointer,
      range,
      flag,
    );
    return NSOrderedSet._(_ret, _lib, retain: false, release: true);
  }

  static NSOrderedSet orderedSetWithArray_(AVFAudio _lib, NSArray array) {
    final _ret = _lib._objc_msgSend_125(
      _lib._class_NSOrderedSet1,
      _lib._sel_orderedSetWithArray_1,
      array.pointer,
    );
    return NSOrderedSet._(_ret, _lib, retain: true, release: true);
  }

  static NSOrderedSet orderedSetWithArray_range_copyItems_(
    AVFAudio _lib,
    NSArray array,
    _NSRange range,
    bool flag,
  ) {
    final _ret = _lib._objc_msgSend_494(
      _lib._class_NSOrderedSet1,
      _lib._sel_orderedSetWithArray_range_copyItems_1,
      array.pointer,
      range,
      flag,
    );
    return NSOrderedSet._(_ret, _lib, retain: false, release: true);
  }

  static NSOrderedSet orderedSetWithSet_(AVFAudio _lib, NSSet set) {
    final _ret = _lib._objc_msgSend_411(
      _lib._class_NSOrderedSet1,
      _lib._sel_orderedSetWithSet_1,
      set.pointer,
    );
    return NSOrderedSet._(_ret, _lib, retain: true, release: true);
  }

  static NSOrderedSet orderedSetWithSet_copyItems_(
    AVFAudio _lib,
    NSSet set,
    bool flag,
  ) {
    final _ret = _lib._objc_msgSend_412(
      _lib._class_NSOrderedSet1,
      _lib._sel_orderedSetWithSet_copyItems_1,
      set.pointer,
      flag,
    );
    return NSOrderedSet._(_ret, _lib, retain: false, release: true);
  }

  NSOrderedSet initWithObject_(NSObject object) {
    final _ret = _lib._objc_msgSend_124(
      this.pointer,
      _lib._sel_initWithObject_1,
      object.pointer,
    );
    return NSOrderedSet._(_ret, _lib, retain: true, release: true);
  }

  NSOrderedSet initWithObjects_(NSObject firstObj) {
    final _ret = _lib._objc_msgSend_124(
      this.pointer,
      _lib._sel_initWithObjects_1,
      firstObj.pointer,
    );
    return NSOrderedSet._(_ret, _lib, retain: true, release: true);
  }

  NSOrderedSet initWithOrderedSet_(NSOrderedSet set) {
    final _ret = _lib._objc_msgSend_492(
      this.pointer,
      _lib._sel_initWithOrderedSet_1,
      set.pointer,
    );
    return NSOrderedSet._(_ret, _lib, retain: true, release: true);
  }

  NSOrderedSet initWithOrderedSet_copyItems_(NSOrderedSet set, bool flag) {
    final _ret = _lib._objc_msgSend_495(
      this.pointer,
      _lib._sel_initWithOrderedSet_copyItems_1,
      set.pointer,
      flag,
    );
    return NSOrderedSet._(_ret, _lib, retain: false, release: true);
  }

  NSOrderedSet initWithOrderedSet_range_copyItems_(
    NSOrderedSet set,
    _NSRange range,
    bool flag,
  ) {
    final _ret = _lib._objc_msgSend_493(
      this.pointer,
      _lib._sel_initWithOrderedSet_range_copyItems_1,
      set.pointer,
      range,
      flag,
    );
    return NSOrderedSet._(_ret, _lib, retain: false, release: true);
  }

  NSOrderedSet initWithArray_(NSArray array) {
    final _ret = _lib._objc_msgSend_125(
      this.pointer,
      _lib._sel_initWithArray_1,
      array.pointer,
    );
    return NSOrderedSet._(_ret, _lib, retain: true, release: true);
  }

  NSOrderedSet initWithArray_copyItems_(NSArray set, bool flag) {
    final _ret = _lib._objc_msgSend_126(
      this.pointer,
      _lib._sel_initWithArray_copyItems_1,
      set.pointer,
      flag,
    );
    return NSOrderedSet._(_ret, _lib, retain: false, release: true);
  }

  NSOrderedSet initWithArray_range_copyItems_(
    NSArray set,
    _NSRange range,
    bool flag,
  ) {
    final _ret = _lib._objc_msgSend_494(
      this.pointer,
      _lib._sel_initWithArray_range_copyItems_1,
      set.pointer,
      range,
      flag,
    );
    return NSOrderedSet._(_ret, _lib, retain: false, release: true);
  }

  NSOrderedSet initWithSet_(NSSet set) {
    final _ret = _lib._objc_msgSend_411(
      this.pointer,
      _lib._sel_initWithSet_1,
      set.pointer,
    );
    return NSOrderedSet._(_ret, _lib, retain: true, release: true);
  }

  NSOrderedSet initWithSet_copyItems_(NSSet set, bool flag) {
    final _ret = _lib._objc_msgSend_412(
      this.pointer,
      _lib._sel_initWithSet_copyItems_1,
      set.pointer,
      flag,
    );
    return NSOrderedSet._(_ret, _lib, retain: false, release: true);
  }

  NSObject differenceFromOrderedSet_withOptions_usingEquivalenceTest_(
    NSOrderedSet other,
    int options,
    ObjCBlock_bool_objcObjCObject_objcObjCObject block,
  ) {
    final _ret = _lib._objc_msgSend_496(
      this.pointer,
      _lib._sel_differenceFromOrderedSet_withOptions_usingEquivalenceTest_1,
      other.pointer,
      options,
      block.pointer,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject differenceFromOrderedSet_withOptions_(
    NSOrderedSet other,
    int options,
  ) {
    final _ret = _lib._objc_msgSend_497(
      this.pointer,
      _lib._sel_differenceFromOrderedSet_withOptions_1,
      other.pointer,
      options,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject differenceFromOrderedSet_(NSOrderedSet other) {
    final _ret = _lib._objc_msgSend_492(
      this.pointer,
      _lib._sel_differenceFromOrderedSet_1,
      other.pointer,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSOrderedSet? orderedSetByApplyingDifference_(NSObject difference) {
    final _ret = _lib._objc_msgSend_498(
      this.pointer,
      _lib._sel_orderedSetByApplyingDifference_1,
      difference.pointer,
    );
    return _ret.address == 0
        ? null
        : NSOrderedSet._(_ret, _lib, retain: true, release: true);
  }

  NSObject valueForKey_(NSString key) {
    final _ret = _lib._objc_msgSend_31(
      this.pointer,
      _lib._sel_valueForKey_1,
      key.pointer,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  @override
  void setValue_forKey_(NSObject? value, NSString key) {
    _lib._objc_msgSend_135(
      this.pointer,
      _lib._sel_setValue_forKey_1,
      value?.pointer ?? ffi.nullptr,
      key.pointer,
    );
  }

  @override
  void addObserver_forKeyPath_options_context_(
    NSObject observer,
    NSString keyPath,
    int options,
    ffi.Pointer<ffi.Void> context,
  ) {
    _lib._objc_msgSend_139(
      this.pointer,
      _lib._sel_addObserver_forKeyPath_options_context_1,
      observer.pointer,
      keyPath.pointer,
      options,
      context,
    );
  }

  @override
  void removeObserver_forKeyPath_context_(
    NSObject observer,
    NSString keyPath,
    ffi.Pointer<ffi.Void> context,
  ) {
    _lib._objc_msgSend_140(
      this.pointer,
      _lib._sel_removeObserver_forKeyPath_context_1,
      observer.pointer,
      keyPath.pointer,
      context,
    );
  }

  @override
  void removeObserver_forKeyPath_(NSObject observer, NSString keyPath) {
    _lib._objc_msgSend_141(
      this.pointer,
      _lib._sel_removeObserver_forKeyPath_1,
      observer.pointer,
      keyPath.pointer,
    );
  }

  NSArray sortedArrayUsingDescriptors_(NSArray sortDescriptors) {
    final _ret = _lib._objc_msgSend_68(
      this.pointer,
      _lib._sel_sortedArrayUsingDescriptors_1,
      sortDescriptors.pointer,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSOrderedSet filteredOrderedSetUsingPredicate_(NSPredicate p) {
    final _ret = _lib._objc_msgSend_499(
      this.pointer,
      _lib._sel_filteredOrderedSetUsingPredicate_1,
      p.pointer,
    );
    return NSOrderedSet._(_ret, _lib, retain: true, release: true);
  }

  static NSOrderedSet new1(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSOrderedSet1,
      _lib._sel_new1,
    );
    return NSOrderedSet._(_ret, _lib, retain: false, release: true);
  }

  static NSOrderedSet allocWithZone_(AVFAudio _lib, ffi.Pointer<_NSZone> zone) {
    final _ret = _lib._objc_msgSend_3(
      _lib._class_NSOrderedSet1,
      _lib._sel_allocWithZone_1,
      zone,
    );
    return NSOrderedSet._(_ret, _lib, retain: false, release: true);
  }

  static NSOrderedSet alloc(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSOrderedSet1,
      _lib._sel_alloc1,
    );
    return NSOrderedSet._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
    AVFAudio _lib,
    NSObject aTarget,
    ffi.Pointer<objc.ObjCSelector> aSelector,
    NSObject? anArgument,
  ) {
    _lib._objc_msgSend_14(
      _lib._class_NSOrderedSet1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
      aTarget.pointer,
      aSelector,
      anArgument?.pointer ?? ffi.nullptr,
    );
  }

  static void cancelPreviousPerformRequestsWithTarget_(
    AVFAudio _lib,
    NSObject aTarget,
  ) {
    _lib._objc_msgSend_15(
      _lib._class_NSOrderedSet1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_1,
      aTarget.pointer,
    );
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSOrderedSet1,
      _lib._sel_accessInstanceVariablesDirectly1,
    );
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSOrderedSet1,
      _lib._sel_useStoredAccessor1,
    );
  }

  static NSSet keyPathsForValuesAffectingValueForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    final _ret = _lib._objc_msgSend_63(
      _lib._class_NSOrderedSet1,
      _lib._sel_keyPathsForValuesAffectingValueForKey_1,
      key.pointer,
    );
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    return _lib._objc_msgSend_64(
      _lib._class_NSOrderedSet1,
      _lib._sel_automaticallyNotifiesObserversForKey_1,
      key.pointer,
    );
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
    AVFAudio _lib,
    NSArray keys,
    NSString dependentKey,
  ) {
    _lib._objc_msgSend_88(
      _lib._class_NSOrderedSet1,
      _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
      keys.pointer,
      dependentKey.pointer,
    );
  }

  static NSArray classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_85(
      _lib._class_NSOrderedSet1,
      _lib._sel_classFallbacksForKeyedArchiver1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSOrderedSet1,
      _lib._sel_classForKeyedUnarchiver1,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

class NSMutableSet extends NSSet {
  NSMutableSet._(
    ffi.Pointer<objc.ObjCObject> pointer,
    AVFAudio lib, {
    bool retain = false,
    bool release = false,
  }) : super._(pointer, lib, retain: retain, release: release);

  /// Returns a [NSMutableSet] that points to the same underlying object as [other].
  static NSMutableSet castFrom<T extends objc.ObjCObjectBase>(
    AVFAudio lib,
    T other,
  ) {
    return NSMutableSet._(other.pointer, lib, retain: true, release: true);
  }

  /// Returns a [NSMutableSet] that wraps the given raw object pointer.
  static NSMutableSet castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCObject> other, {
    bool retain = false,
    bool release = false,
  }) {
    return NSMutableSet._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSMutableSet].
  static bool isInstance(AVFAudio lib, objc.ObjCObjectBase obj) {
    return lib._objc_msgSend_0(
      obj.pointer,
      lib._sel_isKindOfClass_1,
      lib._class_NSMutableSet1,
    );
  }

  void addObject_(NSObject object) {
    _lib._objc_msgSend_15(this.pointer, _lib._sel_addObject_1, object.pointer);
  }

  void removeObject_(NSObject object) {
    _lib._objc_msgSend_15(
      this.pointer,
      _lib._sel_removeObject_1,
      object.pointer,
    );
  }

  @override
  NSMutableSet? initWithCoder_(NSCoder coder) {
    final _ret = _lib._objc_msgSend_47(
      this.pointer,
      _lib._sel_initWithCoder_1,
      coder.pointer,
    );
    return _ret.address == 0
        ? null
        : NSMutableSet._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSMutableSet init() {
    final _ret = _lib._objc_msgSend_2(this.pointer, _lib._sel_init1);
    return NSMutableSet._(_ret, _lib, retain: true, release: true);
  }

  NSMutableSet initWithCapacity_(int numItems) {
    final _ret = _lib._objc_msgSend_65(
      this.pointer,
      _lib._sel_initWithCapacity_1,
      numItems,
    );
    return NSMutableSet._(_ret, _lib, retain: true, release: true);
  }

  void addObjectsFromArray_(NSArray array) {
    _lib._objc_msgSend_472(
      this.pointer,
      _lib._sel_addObjectsFromArray_1,
      array.pointer,
    );
  }

  void intersectSet_(NSSet otherSet) {
    _lib._objc_msgSend_504(
      this.pointer,
      _lib._sel_intersectSet_1,
      otherSet.pointer,
    );
  }

  void minusSet_(NSSet otherSet) {
    _lib._objc_msgSend_504(
      this.pointer,
      _lib._sel_minusSet_1,
      otherSet.pointer,
    );
  }

  void removeAllObjects() {
    _lib._objc_msgSend_1(this.pointer, _lib._sel_removeAllObjects1);
  }

  void unionSet_(NSSet otherSet) {
    _lib._objc_msgSend_504(
      this.pointer,
      _lib._sel_unionSet_1,
      otherSet.pointer,
    );
  }

  void setSet_(NSSet otherSet) {
    _lib._objc_msgSend_504(this.pointer, _lib._sel_setSet_1, otherSet.pointer);
  }

  static NSMutableSet setWithCapacity_(AVFAudio _lib, int numItems) {
    final _ret = _lib._objc_msgSend_65(
      _lib._class_NSMutableSet1,
      _lib._sel_setWithCapacity_1,
      numItems,
    );
    return NSMutableSet._(_ret, _lib, retain: true, release: true);
  }

  void filterUsingPredicate_(NSPredicate predicate) {
    _lib._objc_msgSend_487(
      this.pointer,
      _lib._sel_filterUsingPredicate_1,
      predicate.pointer,
    );
  }

  @override
  NSMutableSet initWithObjects_count_(
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> objects,
    int cnt,
  ) {
    final _ret = _lib._objc_msgSend_66(
      this.pointer,
      _lib._sel_initWithObjects_count_1,
      objects,
      cnt,
    );
    return NSMutableSet._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableSet set1(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSMutableSet1,
      _lib._sel_set1,
    );
    return NSMutableSet._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableSet setWithObject_(AVFAudio _lib, NSObject object) {
    final _ret = _lib._objc_msgSend_124(
      _lib._class_NSMutableSet1,
      _lib._sel_setWithObject_1,
      object.pointer,
    );
    return NSMutableSet._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableSet setWithObjects_count_(
    AVFAudio _lib,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> objects,
    int cnt,
  ) {
    final _ret = _lib._objc_msgSend_66(
      _lib._class_NSMutableSet1,
      _lib._sel_setWithObjects_count_1,
      objects,
      cnt,
    );
    return NSMutableSet._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableSet setWithObjects_(AVFAudio _lib, NSObject firstObj) {
    final _ret = _lib._objc_msgSend_124(
      _lib._class_NSMutableSet1,
      _lib._sel_setWithObjects_1,
      firstObj.pointer,
    );
    return NSMutableSet._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableSet setWithSet_(AVFAudio _lib, NSSet set) {
    final _ret = _lib._objc_msgSend_411(
      _lib._class_NSMutableSet1,
      _lib._sel_setWithSet_1,
      set.pointer,
    );
    return NSMutableSet._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableSet setWithArray_(AVFAudio _lib, NSArray array) {
    final _ret = _lib._objc_msgSend_125(
      _lib._class_NSMutableSet1,
      _lib._sel_setWithArray_1,
      array.pointer,
    );
    return NSMutableSet._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSMutableSet initWithObjects_(NSObject firstObj) {
    final _ret = _lib._objc_msgSend_124(
      this.pointer,
      _lib._sel_initWithObjects_1,
      firstObj.pointer,
    );
    return NSMutableSet._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSMutableSet initWithSet_(NSSet set) {
    final _ret = _lib._objc_msgSend_411(
      this.pointer,
      _lib._sel_initWithSet_1,
      set.pointer,
    );
    return NSMutableSet._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSMutableSet initWithSet_copyItems_(NSSet set, bool flag) {
    final _ret = _lib._objc_msgSend_412(
      this.pointer,
      _lib._sel_initWithSet_copyItems_1,
      set.pointer,
      flag,
    );
    return NSMutableSet._(_ret, _lib, retain: false, release: true);
  }

  @override
  NSMutableSet initWithArray_(NSArray array) {
    final _ret = _lib._objc_msgSend_125(
      this.pointer,
      _lib._sel_initWithArray_1,
      array.pointer,
    );
    return NSMutableSet._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableSet new1(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSMutableSet1,
      _lib._sel_new1,
    );
    return NSMutableSet._(_ret, _lib, retain: false, release: true);
  }

  static NSMutableSet allocWithZone_(AVFAudio _lib, ffi.Pointer<_NSZone> zone) {
    final _ret = _lib._objc_msgSend_3(
      _lib._class_NSMutableSet1,
      _lib._sel_allocWithZone_1,
      zone,
    );
    return NSMutableSet._(_ret, _lib, retain: false, release: true);
  }

  static NSMutableSet alloc(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSMutableSet1,
      _lib._sel_alloc1,
    );
    return NSMutableSet._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
    AVFAudio _lib,
    NSObject aTarget,
    ffi.Pointer<objc.ObjCSelector> aSelector,
    NSObject? anArgument,
  ) {
    _lib._objc_msgSend_14(
      _lib._class_NSMutableSet1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
      aTarget.pointer,
      aSelector,
      anArgument?.pointer ?? ffi.nullptr,
    );
  }

  static void cancelPreviousPerformRequestsWithTarget_(
    AVFAudio _lib,
    NSObject aTarget,
  ) {
    _lib._objc_msgSend_15(
      _lib._class_NSMutableSet1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_1,
      aTarget.pointer,
    );
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSMutableSet1,
      _lib._sel_accessInstanceVariablesDirectly1,
    );
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSMutableSet1,
      _lib._sel_useStoredAccessor1,
    );
  }

  static NSSet keyPathsForValuesAffectingValueForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    final _ret = _lib._objc_msgSend_63(
      _lib._class_NSMutableSet1,
      _lib._sel_keyPathsForValuesAffectingValueForKey_1,
      key.pointer,
    );
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    return _lib._objc_msgSend_64(
      _lib._class_NSMutableSet1,
      _lib._sel_automaticallyNotifiesObserversForKey_1,
      key.pointer,
    );
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
    AVFAudio _lib,
    NSArray keys,
    NSString dependentKey,
  ) {
    _lib._objc_msgSend_88(
      _lib._class_NSMutableSet1,
      _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
      keys.pointer,
      dependentKey.pointer,
    );
  }

  static NSArray classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_85(
      _lib._class_NSMutableSet1,
      _lib._sel_classFallbacksForKeyedArchiver1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSMutableSet1,
      _lib._sel_classForKeyedUnarchiver1,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

abstract class NSKeyValueChange {
  static const int NSKeyValueChangeSetting = 1;
  static const int NSKeyValueChangeInsertion = 2;
  static const int NSKeyValueChangeRemoval = 3;
  static const int NSKeyValueChangeReplacement = 4;
}

abstract class NSKeyValueSetMutationKind {
  static const int NSKeyValueUnionSetMutation = 1;
  static const int NSKeyValueMinusSetMutation = 2;
  static const int NSKeyValueIntersectSetMutation = 3;
  static const int NSKeyValueSetSetMutation = 4;
}

class NSKeyedArchiver extends NSCoder {
  NSKeyedArchiver._(
    ffi.Pointer<objc.ObjCObject> pointer,
    AVFAudio lib, {
    bool retain = false,
    bool release = false,
  }) : super._(pointer, lib, retain: retain, release: release);

  /// Returns a [NSKeyedArchiver] that points to the same underlying object as [other].
  static NSKeyedArchiver castFrom<T extends objc.ObjCObjectBase>(
    AVFAudio lib,
    T other,
  ) {
    return NSKeyedArchiver._(other.pointer, lib, retain: true, release: true);
  }

  /// Returns a [NSKeyedArchiver] that wraps the given raw object pointer.
  static NSKeyedArchiver castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCObject> other, {
    bool retain = false,
    bool release = false,
  }) {
    return NSKeyedArchiver._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSKeyedArchiver].
  static bool isInstance(AVFAudio lib, objc.ObjCObjectBase obj) {
    return lib._objc_msgSend_0(
      obj.pointer,
      lib._sel_isKindOfClass_1,
      lib._class_NSKeyedArchiver1,
    );
  }

  NSKeyedArchiver initRequiringSecureCoding_(bool requiresSecureCoding) {
    final _ret = _lib._objc_msgSend_514(
      this.pointer,
      _lib._sel_initRequiringSecureCoding_1,
      requiresSecureCoding,
    );
    return NSKeyedArchiver._(_ret, _lib, retain: true, release: true);
  }

  static NSData? archivedDataWithRootObject_requiringSecureCoding_error_(
    AVFAudio _lib,
    NSObject object,
    bool requiresSecureCoding,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    final _ret = _lib._objc_msgSend_515(
      _lib._class_NSKeyedArchiver1,
      _lib._sel_archivedDataWithRootObject_requiringSecureCoding_error_1,
      object.pointer,
      requiresSecureCoding,
      error,
    );
    return _ret.address == 0
        ? null
        : NSData._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSKeyedArchiver init() {
    final _ret = _lib._objc_msgSend_2(this.pointer, _lib._sel_init1);
    return NSKeyedArchiver._(_ret, _lib, retain: true, release: true);
  }

  NSKeyedArchiver initForWritingWithMutableData_(NSMutableData data) {
    final _ret = _lib._objc_msgSend_521(
      this.pointer,
      _lib._sel_initForWritingWithMutableData_1,
      data.pointer,
    );
    return NSKeyedArchiver._(_ret, _lib, retain: true, release: true);
  }

  static NSData archivedDataWithRootObject_(
    AVFAudio _lib,
    NSObject rootObject,
  ) {
    final _ret = _lib._objc_msgSend_522(
      _lib._class_NSKeyedArchiver1,
      _lib._sel_archivedDataWithRootObject_1,
      rootObject.pointer,
    );
    return NSData._(_ret, _lib, retain: true, release: true);
  }

  static bool archiveRootObject_toFile_(
    AVFAudio _lib,
    NSObject rootObject,
    NSString path,
  ) {
    return _lib._objc_msgSend_261(
      _lib._class_NSKeyedArchiver1,
      _lib._sel_archiveRootObject_toFile_1,
      rootObject.pointer,
      path.pointer,
    );
  }

  NSObject? get delegate {
    final _ret = _lib._objc_msgSend_17(this.pointer, _lib._sel_delegate1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  set delegate(NSObject? value) {
    return _lib._objc_msgSend_416(
      this.pointer,
      _lib._sel_setDelegate_1,
      value?.pointer ?? ffi.nullptr,
    );
  }

  int get outputFormat {
    return _lib._objc_msgSend_523(this.pointer, _lib._sel_outputFormat1);
  }

  set outputFormat(int value) {
    return _lib._objc_msgSend_524(
      this.pointer,
      _lib._sel_setOutputFormat_1,
      value,
    );
  }

  NSData get encodedData {
    final _ret = _lib._objc_msgSend_43(this.pointer, _lib._sel_encodedData1);
    return NSData._(_ret, _lib, retain: true, release: true);
  }

  void finishEncoding() {
    _lib._objc_msgSend_1(this.pointer, _lib._sel_finishEncoding1);
  }

  static void setClassName_forClass_(
    AVFAudio _lib,
    NSString? codedName,
    NSObject cls,
  ) {
    _lib._objc_msgSend_525(
      _lib._class_NSKeyedArchiver1,
      _lib._sel_setClassName_forClass_1,
      codedName?.pointer ?? ffi.nullptr,
      cls.pointer,
    );
  }

  static NSString? classNameForClass_(AVFAudio _lib, NSObject cls) {
    final _ret = _lib._objc_msgSend_526(
      _lib._class_NSKeyedArchiver1,
      _lib._sel_classNameForClass_1,
      cls.pointer,
    );
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  @override
  void encodeObject_forKey_(NSObject? object, NSString key) {
    _lib._objc_msgSend_135(
      this.pointer,
      _lib._sel_encodeObject_forKey_1,
      object?.pointer ?? ffi.nullptr,
      key.pointer,
    );
  }

  @override
  void encodeConditionalObject_forKey_(NSObject? object, NSString key) {
    _lib._objc_msgSend_135(
      this.pointer,
      _lib._sel_encodeConditionalObject_forKey_1,
      object?.pointer ?? ffi.nullptr,
      key.pointer,
    );
  }

  @override
  void encodeBool_forKey_(bool value, NSString key) {
    _lib._objc_msgSend_296(
      this.pointer,
      _lib._sel_encodeBool_forKey_1,
      value,
      key.pointer,
    );
  }

  @override
  void encodeInt_forKey_(int value, NSString key) {
    _lib._objc_msgSend_297(
      this.pointer,
      _lib._sel_encodeInt_forKey_1,
      value,
      key.pointer,
    );
  }

  @override
  void encodeInt32_forKey_(int value, NSString key) {
    _lib._objc_msgSend_298(
      this.pointer,
      _lib._sel_encodeInt32_forKey_1,
      value,
      key.pointer,
    );
  }

  @override
  void encodeInt64_forKey_(int value, NSString key) {
    _lib._objc_msgSend_299(
      this.pointer,
      _lib._sel_encodeInt64_forKey_1,
      value,
      key.pointer,
    );
  }

  @override
  void encodeFloat_forKey_(double value, NSString key) {
    _lib._objc_msgSend_300(
      this.pointer,
      _lib._sel_encodeFloat_forKey_1,
      value,
      key.pointer,
    );
  }

  @override
  void encodeDouble_forKey_(double value, NSString key) {
    _lib._objc_msgSend_301(
      this.pointer,
      _lib._sel_encodeDouble_forKey_1,
      value,
      key.pointer,
    );
  }

  @override
  void encodeBytes_length_forKey_(
    ffi.Pointer<ffi.Uint8> bytes,
    int length,
    NSString key,
  ) {
    _lib._objc_msgSend_302(
      this.pointer,
      _lib._sel_encodeBytes_length_forKey_1,
      bytes,
      length,
      key.pointer,
    );
  }

  @override
  bool get requiresSecureCoding {
    return _lib._objc_msgSend_12(this.pointer, _lib._sel_requiresSecureCoding1);
  }

  set requiresSecureCoding(bool value) {
    return _lib._objc_msgSend_527(
      this.pointer,
      _lib._sel_setRequiresSecureCoding_1,
      value,
    );
  }

  static NSKeyedArchiver new1(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSKeyedArchiver1,
      _lib._sel_new1,
    );
    return NSKeyedArchiver._(_ret, _lib, retain: false, release: true);
  }

  static NSKeyedArchiver allocWithZone_(
    AVFAudio _lib,
    ffi.Pointer<_NSZone> zone,
  ) {
    final _ret = _lib._objc_msgSend_3(
      _lib._class_NSKeyedArchiver1,
      _lib._sel_allocWithZone_1,
      zone,
    );
    return NSKeyedArchiver._(_ret, _lib, retain: false, release: true);
  }

  static NSKeyedArchiver alloc(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSKeyedArchiver1,
      _lib._sel_alloc1,
    );
    return NSKeyedArchiver._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
    AVFAudio _lib,
    NSObject aTarget,
    ffi.Pointer<objc.ObjCSelector> aSelector,
    NSObject? anArgument,
  ) {
    _lib._objc_msgSend_14(
      _lib._class_NSKeyedArchiver1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
      aTarget.pointer,
      aSelector,
      anArgument?.pointer ?? ffi.nullptr,
    );
  }

  static void cancelPreviousPerformRequestsWithTarget_(
    AVFAudio _lib,
    NSObject aTarget,
  ) {
    _lib._objc_msgSend_15(
      _lib._class_NSKeyedArchiver1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_1,
      aTarget.pointer,
    );
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSKeyedArchiver1,
      _lib._sel_accessInstanceVariablesDirectly1,
    );
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSKeyedArchiver1,
      _lib._sel_useStoredAccessor1,
    );
  }

  static NSSet keyPathsForValuesAffectingValueForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    final _ret = _lib._objc_msgSend_63(
      _lib._class_NSKeyedArchiver1,
      _lib._sel_keyPathsForValuesAffectingValueForKey_1,
      key.pointer,
    );
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    return _lib._objc_msgSend_64(
      _lib._class_NSKeyedArchiver1,
      _lib._sel_automaticallyNotifiesObserversForKey_1,
      key.pointer,
    );
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
    AVFAudio _lib,
    NSArray keys,
    NSString dependentKey,
  ) {
    _lib._objc_msgSend_88(
      _lib._class_NSKeyedArchiver1,
      _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
      keys.pointer,
      dependentKey.pointer,
    );
  }

  static NSArray classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_85(
      _lib._class_NSKeyedArchiver1,
      _lib._sel_classFallbacksForKeyedArchiver1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSKeyedArchiver1,
      _lib._sel_classForKeyedUnarchiver1,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

class NSMutableData extends NSData {
  NSMutableData._(
    ffi.Pointer<objc.ObjCObject> pointer,
    AVFAudio lib, {
    bool retain = false,
    bool release = false,
  }) : super._(pointer, lib, retain: retain, release: release);

  /// Returns a [NSMutableData] that points to the same underlying object as [other].
  static NSMutableData castFrom<T extends objc.ObjCObjectBase>(
    AVFAudio lib,
    T other,
  ) {
    return NSMutableData._(other.pointer, lib, retain: true, release: true);
  }

  /// Returns a [NSMutableData] that wraps the given raw object pointer.
  static NSMutableData castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCObject> other, {
    bool retain = false,
    bool release = false,
  }) {
    return NSMutableData._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSMutableData].
  static bool isInstance(AVFAudio lib, objc.ObjCObjectBase obj) {
    return lib._objc_msgSend_0(
      obj.pointer,
      lib._sel_isKindOfClass_1,
      lib._class_NSMutableData1,
    );
  }

  ffi.Pointer<ffi.Void> get mutableBytes {
    return _lib._objc_msgSend_20(this.pointer, _lib._sel_mutableBytes1);
  }

  @override
  int get length {
    return _lib._objc_msgSend_10(this.pointer, _lib._sel_length1);
  }

  set length(int value) {
    return _lib._objc_msgSend_516(this.pointer, _lib._sel_setLength_1, value);
  }

  void appendBytes_length_(ffi.Pointer<ffi.Void> bytes, int length) {
    _lib._objc_msgSend_22(
      this.pointer,
      _lib._sel_appendBytes_length_1,
      bytes,
      length,
    );
  }

  void appendData_(NSData other) {
    _lib._objc_msgSend_285(this.pointer, _lib._sel_appendData_1, other.pointer);
  }

  void increaseLengthBy_(int extraLength) {
    _lib._objc_msgSend_470(
      this.pointer,
      _lib._sel_increaseLengthBy_1,
      extraLength,
    );
  }

  void replaceBytesInRange_withBytes_(
    _NSRange range,
    ffi.Pointer<ffi.Void> bytes,
  ) {
    _lib._objc_msgSend_517(
      this.pointer,
      _lib._sel_replaceBytesInRange_withBytes_1,
      range,
      bytes,
    );
  }

  void resetBytesInRange_(_NSRange range) {
    _lib._objc_msgSend_476(this.pointer, _lib._sel_resetBytesInRange_1, range);
  }

  void setData_(NSData data) {
    _lib._objc_msgSend_285(this.pointer, _lib._sel_setData_1, data.pointer);
  }

  void replaceBytesInRange_withBytes_length_(
    _NSRange range,
    ffi.Pointer<ffi.Void> replacementBytes,
    int replacementLength,
  ) {
    _lib._objc_msgSend_518(
      this.pointer,
      _lib._sel_replaceBytesInRange_withBytes_length_1,
      range,
      replacementBytes,
      replacementLength,
    );
  }

  static NSMutableData? dataWithCapacity_(AVFAudio _lib, int aNumItems) {
    final _ret = _lib._objc_msgSend_519(
      _lib._class_NSMutableData1,
      _lib._sel_dataWithCapacity_1,
      aNumItems,
    );
    return _ret.address == 0
        ? null
        : NSMutableData._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableData? dataWithLength_(AVFAudio _lib, int length) {
    final _ret = _lib._objc_msgSend_519(
      _lib._class_NSMutableData1,
      _lib._sel_dataWithLength_1,
      length,
    );
    return _ret.address == 0
        ? null
        : NSMutableData._(_ret, _lib, retain: true, release: true);
  }

  NSMutableData? initWithCapacity_(int capacity) {
    final _ret = _lib._objc_msgSend_519(
      this.pointer,
      _lib._sel_initWithCapacity_1,
      capacity,
    );
    return _ret.address == 0
        ? null
        : NSMutableData._(_ret, _lib, retain: true, release: true);
  }

  NSMutableData? initWithLength_(int length) {
    final _ret = _lib._objc_msgSend_519(
      this.pointer,
      _lib._sel_initWithLength_1,
      length,
    );
    return _ret.address == 0
        ? null
        : NSMutableData._(_ret, _lib, retain: true, release: true);
  }

  bool decompressUsingAlgorithm_error_(
    int algorithm,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    return _lib._objc_msgSend_520(
      this.pointer,
      _lib._sel_decompressUsingAlgorithm_error_1,
      algorithm,
      error,
    );
  }

  bool compressUsingAlgorithm_error_(
    int algorithm,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    return _lib._objc_msgSend_520(
      this.pointer,
      _lib._sel_compressUsingAlgorithm_error_1,
      algorithm,
      error,
    );
  }

  static NSMutableData data(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSMutableData1,
      _lib._sel_data1,
    );
    return NSMutableData._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableData dataWithBytes_length_(
    AVFAudio _lib,
    ffi.Pointer<ffi.Void> bytes,
    int length,
  ) {
    final _ret = _lib._objc_msgSend_273(
      _lib._class_NSMutableData1,
      _lib._sel_dataWithBytes_length_1,
      bytes,
      length,
    );
    return NSMutableData._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableData dataWithBytesNoCopy_length_(
    AVFAudio _lib,
    ffi.Pointer<ffi.Void> bytes,
    int length,
  ) {
    final _ret = _lib._objc_msgSend_273(
      _lib._class_NSMutableData1,
      _lib._sel_dataWithBytesNoCopy_length_1,
      bytes,
      length,
    );
    return NSMutableData._(_ret, _lib, retain: false, release: true);
  }

  static NSMutableData dataWithBytesNoCopy_length_freeWhenDone_(
    AVFAudio _lib,
    ffi.Pointer<ffi.Void> bytes,
    int length,
    bool b,
  ) {
    final _ret = _lib._objc_msgSend_274(
      _lib._class_NSMutableData1,
      _lib._sel_dataWithBytesNoCopy_length_freeWhenDone_1,
      bytes,
      length,
      b,
    );
    return NSMutableData._(_ret, _lib, retain: false, release: true);
  }

  static NSMutableData? dataWithContentsOfFile_options_error_(
    AVFAudio _lib,
    NSString path,
    int readOptionsMask,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> errorPtr,
  ) {
    final _ret = _lib._objc_msgSend_275(
      _lib._class_NSMutableData1,
      _lib._sel_dataWithContentsOfFile_options_error_1,
      path.pointer,
      readOptionsMask,
      errorPtr,
    );
    return _ret.address == 0
        ? null
        : NSMutableData._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableData? dataWithContentsOfURL_options_error_(
    AVFAudio _lib,
    NSURL url,
    int readOptionsMask,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> errorPtr,
  ) {
    final _ret = _lib._objc_msgSend_276(
      _lib._class_NSMutableData1,
      _lib._sel_dataWithContentsOfURL_options_error_1,
      url.pointer,
      readOptionsMask,
      errorPtr,
    );
    return _ret.address == 0
        ? null
        : NSMutableData._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableData? dataWithContentsOfFile_(AVFAudio _lib, NSString path) {
    final _ret = _lib._objc_msgSend_38(
      _lib._class_NSMutableData1,
      _lib._sel_dataWithContentsOfFile_1,
      path.pointer,
    );
    return _ret.address == 0
        ? null
        : NSMutableData._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableData? dataWithContentsOfURL_(AVFAudio _lib, NSURL url) {
    final _ret = _lib._objc_msgSend_277(
      _lib._class_NSMutableData1,
      _lib._sel_dataWithContentsOfURL_1,
      url.pointer,
    );
    return _ret.address == 0
        ? null
        : NSMutableData._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSMutableData initWithBytes_length_(ffi.Pointer<ffi.Void> bytes, int length) {
    final _ret = _lib._objc_msgSend_273(
      this.pointer,
      _lib._sel_initWithBytes_length_1,
      bytes,
      length,
    );
    return NSMutableData._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSMutableData initWithBytesNoCopy_length_(
    ffi.Pointer<ffi.Void> bytes,
    int length,
  ) {
    final _ret = _lib._objc_msgSend_273(
      this.pointer,
      _lib._sel_initWithBytesNoCopy_length_1,
      bytes,
      length,
    );
    return NSMutableData._(_ret, _lib, retain: false, release: true);
  }

  @override
  NSMutableData initWithBytesNoCopy_length_freeWhenDone_(
    ffi.Pointer<ffi.Void> bytes,
    int length,
    bool b,
  ) {
    final _ret = _lib._objc_msgSend_274(
      this.pointer,
      _lib._sel_initWithBytesNoCopy_length_freeWhenDone_1,
      bytes,
      length,
      b,
    );
    return NSMutableData._(_ret, _lib, retain: false, release: true);
  }

  @override
  NSMutableData initWithBytesNoCopy_length_deallocator_(
    ffi.Pointer<ffi.Void> bytes,
    int length,
    ObjCBlock_ffiVoid_ffiVoid_ffiUnsignedLong? deallocator,
  ) {
    final _ret = _lib._objc_msgSend_278(
      this.pointer,
      _lib._sel_initWithBytesNoCopy_length_deallocator_1,
      bytes,
      length,
      deallocator?.pointer ?? ffi.nullptr,
    );
    return NSMutableData._(_ret, _lib, retain: false, release: true);
  }

  @override
  NSMutableData? initWithContentsOfFile_options_error_(
    NSString path,
    int readOptionsMask,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> errorPtr,
  ) {
    final _ret = _lib._objc_msgSend_275(
      this.pointer,
      _lib._sel_initWithContentsOfFile_options_error_1,
      path.pointer,
      readOptionsMask,
      errorPtr,
    );
    return _ret.address == 0
        ? null
        : NSMutableData._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSMutableData? initWithContentsOfURL_options_error_(
    NSURL url,
    int readOptionsMask,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> errorPtr,
  ) {
    final _ret = _lib._objc_msgSend_276(
      this.pointer,
      _lib._sel_initWithContentsOfURL_options_error_1,
      url.pointer,
      readOptionsMask,
      errorPtr,
    );
    return _ret.address == 0
        ? null
        : NSMutableData._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSMutableData? initWithContentsOfFile_(NSString path) {
    final _ret = _lib._objc_msgSend_38(
      this.pointer,
      _lib._sel_initWithContentsOfFile_1,
      path.pointer,
    );
    return _ret.address == 0
        ? null
        : NSMutableData._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSMutableData? initWithContentsOfURL_(NSURL url) {
    final _ret = _lib._objc_msgSend_277(
      this.pointer,
      _lib._sel_initWithContentsOfURL_1,
      url.pointer,
    );
    return _ret.address == 0
        ? null
        : NSMutableData._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSMutableData initWithData_(NSData data) {
    final _ret = _lib._objc_msgSend_279(
      this.pointer,
      _lib._sel_initWithData_1,
      data.pointer,
    );
    return NSMutableData._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableData dataWithData_(AVFAudio _lib, NSData data) {
    final _ret = _lib._objc_msgSend_279(
      _lib._class_NSMutableData1,
      _lib._sel_dataWithData_1,
      data.pointer,
    );
    return NSMutableData._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSMutableData? initWithBase64EncodedString_options_(
    NSString base64String,
    int options,
  ) {
    final _ret = _lib._objc_msgSend_280(
      this.pointer,
      _lib._sel_initWithBase64EncodedString_options_1,
      base64String.pointer,
      options,
    );
    return _ret.address == 0
        ? null
        : NSMutableData._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSMutableData? initWithBase64EncodedData_options_(
    NSData base64Data,
    int options,
  ) {
    final _ret = _lib._objc_msgSend_282(
      this.pointer,
      _lib._sel_initWithBase64EncodedData_options_1,
      base64Data.pointer,
      options,
    );
    return _ret.address == 0
        ? null
        : NSMutableData._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSMutableData? decompressedDataUsingAlgorithm_error_(
    int algorithm,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    final _ret = _lib._objc_msgSend_284(
      this.pointer,
      _lib._sel_decompressedDataUsingAlgorithm_error_1,
      algorithm,
      error,
    );
    return _ret.address == 0
        ? null
        : NSMutableData._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSMutableData? compressedDataUsingAlgorithm_error_(
    int algorithm,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    final _ret = _lib._objc_msgSend_284(
      this.pointer,
      _lib._sel_compressedDataUsingAlgorithm_error_1,
      algorithm,
      error,
    );
    return _ret.address == 0
        ? null
        : NSMutableData._(_ret, _lib, retain: true, release: true);
  }

  static NSObject? dataWithContentsOfMappedFile_(AVFAudio _lib, NSString path) {
    final _ret = _lib._objc_msgSend_38(
      _lib._class_NSMutableData1,
      _lib._sel_dataWithContentsOfMappedFile_1,
      path.pointer,
    );
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSMutableData init() {
    final _ret = _lib._objc_msgSend_2(this.pointer, _lib._sel_init1);
    return NSMutableData._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableData new1(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSMutableData1,
      _lib._sel_new1,
    );
    return NSMutableData._(_ret, _lib, retain: false, release: true);
  }

  static NSMutableData allocWithZone_(
    AVFAudio _lib,
    ffi.Pointer<_NSZone> zone,
  ) {
    final _ret = _lib._objc_msgSend_3(
      _lib._class_NSMutableData1,
      _lib._sel_allocWithZone_1,
      zone,
    );
    return NSMutableData._(_ret, _lib, retain: false, release: true);
  }

  static NSMutableData alloc(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSMutableData1,
      _lib._sel_alloc1,
    );
    return NSMutableData._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
    AVFAudio _lib,
    NSObject aTarget,
    ffi.Pointer<objc.ObjCSelector> aSelector,
    NSObject? anArgument,
  ) {
    _lib._objc_msgSend_14(
      _lib._class_NSMutableData1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
      aTarget.pointer,
      aSelector,
      anArgument?.pointer ?? ffi.nullptr,
    );
  }

  static void cancelPreviousPerformRequestsWithTarget_(
    AVFAudio _lib,
    NSObject aTarget,
  ) {
    _lib._objc_msgSend_15(
      _lib._class_NSMutableData1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_1,
      aTarget.pointer,
    );
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSMutableData1,
      _lib._sel_accessInstanceVariablesDirectly1,
    );
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSMutableData1,
      _lib._sel_useStoredAccessor1,
    );
  }

  static NSSet keyPathsForValuesAffectingValueForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    final _ret = _lib._objc_msgSend_63(
      _lib._class_NSMutableData1,
      _lib._sel_keyPathsForValuesAffectingValueForKey_1,
      key.pointer,
    );
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    return _lib._objc_msgSend_64(
      _lib._class_NSMutableData1,
      _lib._sel_automaticallyNotifiesObserversForKey_1,
      key.pointer,
    );
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
    AVFAudio _lib,
    NSArray keys,
    NSString dependentKey,
  ) {
    _lib._objc_msgSend_88(
      _lib._class_NSMutableData1,
      _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
      keys.pointer,
      dependentKey.pointer,
    );
  }

  static NSArray classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_85(
      _lib._class_NSMutableData1,
      _lib._sel_classFallbacksForKeyedArchiver1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSMutableData1,
      _lib._sel_classForKeyedUnarchiver1,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

abstract class NSPropertyListFormat {
  static const int NSPropertyListOpenStepFormat = 1;
  static const int NSPropertyListXMLFormat_v1_0 = 100;
  static const int NSPropertyListBinaryFormat_v1_0 = 200;
}

class NSThread extends NSObject {
  NSThread._(
    ffi.Pointer<objc.ObjCObject> pointer,
    AVFAudio lib, {
    bool retain = false,
    bool release = false,
  }) : super._(pointer, lib, retain: retain, release: release);

  /// Returns a [NSThread] that points to the same underlying object as [other].
  static NSThread castFrom<T extends objc.ObjCObjectBase>(
    AVFAudio lib,
    T other,
  ) {
    return NSThread._(other.pointer, lib, retain: true, release: true);
  }

  /// Returns a [NSThread] that wraps the given raw object pointer.
  static NSThread castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCObject> other, {
    bool retain = false,
    bool release = false,
  }) {
    return NSThread._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSThread].
  static bool isInstance(AVFAudio lib, objc.ObjCObjectBase obj) {
    return lib._objc_msgSend_0(
      obj.pointer,
      lib._sel_isKindOfClass_1,
      lib._class_NSThread1,
    );
  }

  static NSThread getCurrentThread(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_531(
      _lib._class_NSThread1,
      _lib._sel_currentThread1,
    );
    return NSThread._(_ret, _lib, retain: true, release: true);
  }

  static void detachNewThreadWithBlock_(
    AVFAudio _lib,
    ObjCBlock_ffiVoid block,
  ) {
    _lib._objc_msgSend_532(
      _lib._class_NSThread1,
      _lib._sel_detachNewThreadWithBlock_1,
      block.pointer,
    );
  }

  static void detachNewThreadSelector_toTarget_withObject_(
    AVFAudio _lib,
    ffi.Pointer<objc.ObjCSelector> selector,
    NSObject target,
    NSObject? argument,
  ) {
    _lib._objc_msgSend_533(
      _lib._class_NSThread1,
      _lib._sel_detachNewThreadSelector_toTarget_withObject_1,
      selector,
      target.pointer,
      argument?.pointer ?? ffi.nullptr,
    );
  }

  static bool isMultiThreaded(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSThread1,
      _lib._sel_isMultiThreaded1,
    );
  }

  NSMutableDictionary get threadDictionary {
    final _ret = _lib._objc_msgSend_539(
      this.pointer,
      _lib._sel_threadDictionary1,
    );
    return NSMutableDictionary._(_ret, _lib, retain: true, release: true);
  }

  static void sleepUntilDate_(AVFAudio _lib, NSDate date) {
    _lib._objc_msgSend_540(
      _lib._class_NSThread1,
      _lib._sel_sleepUntilDate_1,
      date.pointer,
    );
  }

  static void sleepForTimeInterval_(AVFAudio _lib, double ti) {
    _lib._objc_msgSend_541(
      _lib._class_NSThread1,
      _lib._sel_sleepForTimeInterval_1,
      ti,
    );
  }

  static void exit(AVFAudio _lib) {
    _lib._objc_msgSend_1(_lib._class_NSThread1, _lib._sel_exit1);
  }

  double get threadPriority {
    return objc.useMsgSendVariants
        ? _lib._objc_msgSend_165_fpret(this.pointer, _lib._sel_threadPriority1)
        : _lib._objc_msgSend_165(this.pointer, _lib._sel_threadPriority1);
  }

  set threadPriority(double value) {
    return _lib._objc_msgSend_542(
      this.pointer,
      _lib._sel_setThreadPriority_1,
      value,
    );
  }

  int get qualityOfService {
    return _lib._objc_msgSend_543(this.pointer, _lib._sel_qualityOfService1);
  }

  set qualityOfService(int value) {
    return _lib._objc_msgSend_544(
      this.pointer,
      _lib._sel_setQualityOfService_1,
      value,
    );
  }

  static NSArray getCallStackReturnAddresses(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_85(
      _lib._class_NSThread1,
      _lib._sel_callStackReturnAddresses1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSArray getCallStackSymbols(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_85(
      _lib._class_NSThread1,
      _lib._sel_callStackSymbols1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSString? get name {
    final _ret = _lib._objc_msgSend_44(this.pointer, _lib._sel_name1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  set name(NSString? value) {
    return _lib._objc_msgSend_545(
      this.pointer,
      _lib._sel_setName_1,
      value?.pointer ?? ffi.nullptr,
    );
  }

  int get stackSize {
    return _lib._objc_msgSend_10(this.pointer, _lib._sel_stackSize1);
  }

  set stackSize(int value) {
    return _lib._objc_msgSend_516(
      this.pointer,
      _lib._sel_setStackSize_1,
      value,
    );
  }

  bool get isMainThread {
    return _lib._objc_msgSend_12(this.pointer, _lib._sel_isMainThread1);
  }

  static NSThread getMainThread(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_531(
      _lib._class_NSThread1,
      _lib._sel_mainThread1,
    );
    return NSThread._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSThread init() {
    final _ret = _lib._objc_msgSend_2(this.pointer, _lib._sel_init1);
    return NSThread._(_ret, _lib, retain: true, release: true);
  }

  NSThread initWithTarget_selector_object_(
    NSObject target,
    ffi.Pointer<objc.ObjCSelector> selector,
    NSObject? argument,
  ) {
    final _ret = _lib._objc_msgSend_546(
      this.pointer,
      _lib._sel_initWithTarget_selector_object_1,
      target.pointer,
      selector,
      argument?.pointer ?? ffi.nullptr,
    );
    return NSThread._(_ret, _lib, retain: true, release: true);
  }

  NSThread initWithBlock_(ObjCBlock_ffiVoid block) {
    final _ret = _lib._objc_msgSend_547(
      this.pointer,
      _lib._sel_initWithBlock_1,
      block.pointer,
    );
    return NSThread._(_ret, _lib, retain: true, release: true);
  }

  bool get executing {
    return _lib._objc_msgSend_12(this.pointer, _lib._sel_isExecuting1);
  }

  bool get finished {
    return _lib._objc_msgSend_12(this.pointer, _lib._sel_isFinished1);
  }

  bool get cancelled {
    return _lib._objc_msgSend_12(this.pointer, _lib._sel_isCancelled1);
  }

  void cancel() {
    _lib._objc_msgSend_1(this.pointer, _lib._sel_cancel1);
  }

  void start() {
    _lib._objc_msgSend_1(this.pointer, _lib._sel_start1);
  }

  void main() {
    _lib._objc_msgSend_1(this.pointer, _lib._sel_main1);
  }

  static NSThread new1(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSThread1, _lib._sel_new1);
    return NSThread._(_ret, _lib, retain: false, release: true);
  }

  static NSThread allocWithZone_(AVFAudio _lib, ffi.Pointer<_NSZone> zone) {
    final _ret = _lib._objc_msgSend_3(
      _lib._class_NSThread1,
      _lib._sel_allocWithZone_1,
      zone,
    );
    return NSThread._(_ret, _lib, retain: false, release: true);
  }

  static NSThread alloc(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSThread1, _lib._sel_alloc1);
    return NSThread._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
    AVFAudio _lib,
    NSObject aTarget,
    ffi.Pointer<objc.ObjCSelector> aSelector,
    NSObject? anArgument,
  ) {
    _lib._objc_msgSend_14(
      _lib._class_NSThread1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
      aTarget.pointer,
      aSelector,
      anArgument?.pointer ?? ffi.nullptr,
    );
  }

  static void cancelPreviousPerformRequestsWithTarget_(
    AVFAudio _lib,
    NSObject aTarget,
  ) {
    _lib._objc_msgSend_15(
      _lib._class_NSThread1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_1,
      aTarget.pointer,
    );
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSThread1,
      _lib._sel_accessInstanceVariablesDirectly1,
    );
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSThread1,
      _lib._sel_useStoredAccessor1,
    );
  }

  static NSSet keyPathsForValuesAffectingValueForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    final _ret = _lib._objc_msgSend_63(
      _lib._class_NSThread1,
      _lib._sel_keyPathsForValuesAffectingValueForKey_1,
      key.pointer,
    );
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    return _lib._objc_msgSend_64(
      _lib._class_NSThread1,
      _lib._sel_automaticallyNotifiesObserversForKey_1,
      key.pointer,
    );
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
    AVFAudio _lib,
    NSArray keys,
    NSString dependentKey,
  ) {
    _lib._objc_msgSend_88(
      _lib._class_NSThread1,
      _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
      keys.pointer,
      dependentKey.pointer,
    );
  }

  static NSArray classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_85(
      _lib._class_NSThread1,
      _lib._sel_classFallbacksForKeyedArchiver1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSThread1,
      _lib._sel_classForKeyedUnarchiver1,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

void _ObjCBlock_ffiVoid_fnPtrTrampoline(ffi.Pointer<objc.ObjCBlock> block) =>
    block.ref.target
        .cast<ffi.NativeFunction<ffi.Void Function()>>()
        .asFunction<void Function()>()();
final _ObjCBlock_ffiVoid_closureRegistry = <int, void Function()>{};
int _ObjCBlock_ffiVoid_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void> _ObjCBlock_ffiVoid_registerClosure(void Function() fn) {
  final id = ++_ObjCBlock_ffiVoid_closureRegistryIndex;
  _ObjCBlock_ffiVoid_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

void _ObjCBlock_ffiVoid_closureTrampoline(
  ffi.Pointer<objc.ObjCBlock> block,
) => _ObjCBlock_ffiVoid_closureRegistry[block.ref.target.address]!();

class ObjCBlock_ffiVoid extends objc.ObjCBlockBase {
  ObjCBlock_ffiVoid._(
    ffi.Pointer<objc.ObjCBlock> pointer,
    this._lib, {
    bool retain = false,
    bool release = true,
  }) : super(pointer, retain: retain, release: release);

  AVFAudio _lib;

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_ffiVoid castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCBlock> pointer, {
    bool retain = false,
    bool release = false,
  }) {
    return ObjCBlock_ffiVoid._(pointer, lib, retain: retain, release: release);
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid.fromFunctionPointer(
    AVFAudio lib,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> ptr,
  ) : this._(objc.newBlock(
        _cFuncTrampoline ??=
            ffi.Pointer.fromFunction<
              ffi.Void Function(ffi.Pointer<objc.ObjCBlock>)
            >(_ObjCBlock_ffiVoid_fnPtrTrampoline).cast(),
        ptr.cast(),
      ), lib);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid.fromFunction(AVFAudio lib, void Function() fn)
    : this._(objc.newBlock(
        _dartFuncTrampoline ??=
            ffi.Pointer.fromFunction<
              ffi.Void Function(ffi.Pointer<objc.ObjCBlock>)
            >(_ObjCBlock_ffiVoid_closureTrampoline).cast(),
        _ObjCBlock_ffiVoid_registerClosure(() => fn()),
      ), lib);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid.listener(AVFAudio lib, void Function() fn)
    : this._(objc.newBlock(
        (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
              ffi.Void Function(ffi.Pointer<objc.ObjCBlock>)
            >.listener(
              _ObjCBlock_ffiVoid_closureTrampoline,
            )..keepIsolateAlive = false)
            .nativeFunction
            .cast(),
        _ObjCBlock_ffiVoid_registerClosure(() => fn()),
      ), lib);
  static ffi.NativeCallable<ffi.Void Function(ffi.Pointer<objc.ObjCBlock>)>?
  _dartFuncListenerTrampoline;

  void call() => pointer.ref.invoke
      .cast<
        ffi.NativeFunction<ffi.Void Function(ffi.Pointer<objc.ObjCBlock> block)>
      >()
      .asFunction<void Function(ffi.Pointer<objc.ObjCBlock>)>()(pointer);
}

class NSMutableDictionary extends NSDictionary {
  NSMutableDictionary._(
    ffi.Pointer<objc.ObjCObject> pointer,
    AVFAudio lib, {
    bool retain = false,
    bool release = false,
  }) : super._(pointer, lib, retain: retain, release: release);

  /// Returns a [NSMutableDictionary] that points to the same underlying object as [other].
  static NSMutableDictionary castFrom<T extends objc.ObjCObjectBase>(
    AVFAudio lib,
    T other,
  ) {
    return NSMutableDictionary._(
      other.pointer,
      lib,
      retain: true,
      release: true,
    );
  }

  /// Returns a [NSMutableDictionary] that wraps the given raw object pointer.
  static NSMutableDictionary castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCObject> other, {
    bool retain = false,
    bool release = false,
  }) {
    return NSMutableDictionary._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSMutableDictionary].
  static bool isInstance(AVFAudio lib, objc.ObjCObjectBase obj) {
    return lib._objc_msgSend_0(
      obj.pointer,
      lib._sel_isKindOfClass_1,
      lib._class_NSMutableDictionary1,
    );
  }

  void removeObjectForKey_(NSObject aKey) {
    _lib._objc_msgSend_15(
      this.pointer,
      _lib._sel_removeObjectForKey_1,
      aKey.pointer,
    );
  }

  void setObject_forKey_(NSObject anObject, NSObject aKey) {
    _lib._objc_msgSend_534(
      this.pointer,
      _lib._sel_setObject_forKey_1,
      anObject.pointer,
      aKey.pointer,
    );
  }

  @override
  NSMutableDictionary init() {
    final _ret = _lib._objc_msgSend_2(this.pointer, _lib._sel_init1);
    return NSMutableDictionary._(_ret, _lib, retain: true, release: true);
  }

  NSMutableDictionary initWithCapacity_(int numItems) {
    final _ret = _lib._objc_msgSend_65(
      this.pointer,
      _lib._sel_initWithCapacity_1,
      numItems,
    );
    return NSMutableDictionary._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSMutableDictionary? initWithCoder_(NSCoder coder) {
    final _ret = _lib._objc_msgSend_47(
      this.pointer,
      _lib._sel_initWithCoder_1,
      coder.pointer,
    );
    return _ret.address == 0
        ? null
        : NSMutableDictionary._(_ret, _lib, retain: true, release: true);
  }

  void addEntriesFromDictionary_(NSDictionary otherDictionary) {
    _lib._objc_msgSend_509(
      this.pointer,
      _lib._sel_addEntriesFromDictionary_1,
      otherDictionary.pointer,
    );
  }

  void removeAllObjects() {
    _lib._objc_msgSend_1(this.pointer, _lib._sel_removeAllObjects1);
  }

  void removeObjectsForKeys_(NSArray keyArray) {
    _lib._objc_msgSend_472(
      this.pointer,
      _lib._sel_removeObjectsForKeys_1,
      keyArray.pointer,
    );
  }

  void setDictionary_(NSDictionary otherDictionary) {
    _lib._objc_msgSend_509(
      this.pointer,
      _lib._sel_setDictionary_1,
      otherDictionary.pointer,
    );
  }

  void setObject_forKeyedSubscript_(NSObject? obj, NSObject key) {
    _lib._objc_msgSend_535(
      this.pointer,
      _lib._sel_setObject_forKeyedSubscript_1,
      obj?.pointer ?? ffi.nullptr,
      key.pointer,
    );
  }

  static NSMutableDictionary dictionaryWithCapacity_(
    AVFAudio _lib,
    int numItems,
  ) {
    final _ret = _lib._objc_msgSend_65(
      _lib._class_NSMutableDictionary1,
      _lib._sel_dictionaryWithCapacity_1,
      numItems,
    );
    return NSMutableDictionary._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableDictionary? dictionaryWithContentsOfFile_(
    AVFAudio _lib,
    NSString path,
  ) {
    final _ret = _lib._objc_msgSend_536(
      _lib._class_NSMutableDictionary1,
      _lib._sel_dictionaryWithContentsOfFile_1,
      path.pointer,
    );
    return _ret.address == 0
        ? null
        : NSMutableDictionary._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableDictionary? dictionaryWithContentsOfURL_(
    AVFAudio _lib,
    NSURL url,
  ) {
    final _ret = _lib._objc_msgSend_537(
      _lib._class_NSMutableDictionary1,
      _lib._sel_dictionaryWithContentsOfURL_1,
      url.pointer,
    );
    return _ret.address == 0
        ? null
        : NSMutableDictionary._(_ret, _lib, retain: true, release: true);
  }

  NSMutableDictionary? initWithContentsOfFile_(NSString path) {
    final _ret = _lib._objc_msgSend_536(
      this.pointer,
      _lib._sel_initWithContentsOfFile_1,
      path.pointer,
    );
    return _ret.address == 0
        ? null
        : NSMutableDictionary._(_ret, _lib, retain: true, release: true);
  }

  NSMutableDictionary? initWithContentsOfURL_(NSURL url) {
    final _ret = _lib._objc_msgSend_537(
      this.pointer,
      _lib._sel_initWithContentsOfURL_1,
      url.pointer,
    );
    return _ret.address == 0
        ? null
        : NSMutableDictionary._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableDictionary dictionaryWithSharedKeySet_(
    AVFAudio _lib,
    NSObject keyset,
  ) {
    final _ret = _lib._objc_msgSend_538(
      _lib._class_NSMutableDictionary1,
      _lib._sel_dictionaryWithSharedKeySet_1,
      keyset.pointer,
    );
    return NSMutableDictionary._(_ret, _lib, retain: true, release: true);
  }

  void setValue_forKey_(NSObject? value, NSString key) {
    _lib._objc_msgSend_135(
      this.pointer,
      _lib._sel_setValue_forKey_1,
      value?.pointer ?? ffi.nullptr,
      key.pointer,
    );
  }

  @override
  NSMutableDictionary initWithObjects_forKeys_count_(
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> objects,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> keys,
    int cnt,
  ) {
    final _ret = _lib._objc_msgSend_147(
      this.pointer,
      _lib._sel_initWithObjects_forKeys_count_1,
      objects,
      keys,
      cnt,
    );
    return NSMutableDictionary._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableDictionary dictionary(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSMutableDictionary1,
      _lib._sel_dictionary1,
    );
    return NSMutableDictionary._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableDictionary dictionaryWithObject_forKey_(
    AVFAudio _lib,
    NSObject object,
    NSObject key,
  ) {
    final _ret = _lib._objc_msgSend_158(
      _lib._class_NSMutableDictionary1,
      _lib._sel_dictionaryWithObject_forKey_1,
      object.pointer,
      key.pointer,
    );
    return NSMutableDictionary._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableDictionary dictionaryWithObjects_forKeys_count_(
    AVFAudio _lib,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> objects,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> keys,
    int cnt,
  ) {
    final _ret = _lib._objc_msgSend_147(
      _lib._class_NSMutableDictionary1,
      _lib._sel_dictionaryWithObjects_forKeys_count_1,
      objects,
      keys,
      cnt,
    );
    return NSMutableDictionary._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableDictionary dictionaryWithObjectsAndKeys_(
    AVFAudio _lib,
    NSObject firstObject,
  ) {
    final _ret = _lib._objc_msgSend_124(
      _lib._class_NSMutableDictionary1,
      _lib._sel_dictionaryWithObjectsAndKeys_1,
      firstObject.pointer,
    );
    return NSMutableDictionary._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableDictionary dictionaryWithDictionary_(
    AVFAudio _lib,
    NSDictionary dict,
  ) {
    final _ret = _lib._objc_msgSend_159(
      _lib._class_NSMutableDictionary1,
      _lib._sel_dictionaryWithDictionary_1,
      dict.pointer,
    );
    return NSMutableDictionary._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableDictionary dictionaryWithObjects_forKeys_(
    AVFAudio _lib,
    NSArray objects,
    NSArray keys,
  ) {
    final _ret = _lib._objc_msgSend_160(
      _lib._class_NSMutableDictionary1,
      _lib._sel_dictionaryWithObjects_forKeys_1,
      objects.pointer,
      keys.pointer,
    );
    return NSMutableDictionary._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSMutableDictionary initWithObjectsAndKeys_(NSObject firstObject) {
    final _ret = _lib._objc_msgSend_124(
      this.pointer,
      _lib._sel_initWithObjectsAndKeys_1,
      firstObject.pointer,
    );
    return NSMutableDictionary._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSMutableDictionary initWithDictionary_(NSDictionary otherDictionary) {
    final _ret = _lib._objc_msgSend_159(
      this.pointer,
      _lib._sel_initWithDictionary_1,
      otherDictionary.pointer,
    );
    return NSMutableDictionary._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSMutableDictionary initWithDictionary_copyItems_(
    NSDictionary otherDictionary,
    bool flag,
  ) {
    final _ret = _lib._objc_msgSend_161(
      this.pointer,
      _lib._sel_initWithDictionary_copyItems_1,
      otherDictionary.pointer,
      flag,
    );
    return NSMutableDictionary._(_ret, _lib, retain: false, release: true);
  }

  @override
  NSMutableDictionary initWithObjects_forKeys_(NSArray objects, NSArray keys) {
    final _ret = _lib._objc_msgSend_160(
      this.pointer,
      _lib._sel_initWithObjects_forKeys_1,
      objects.pointer,
      keys.pointer,
    );
    return NSMutableDictionary._(_ret, _lib, retain: true, release: true);
  }

  static NSDictionary? dictionaryWithContentsOfURL_error_(
    AVFAudio _lib,
    NSURL url,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    final _ret = _lib._objc_msgSend_162(
      _lib._class_NSMutableDictionary1,
      _lib._sel_dictionaryWithContentsOfURL_error_1,
      url.pointer,
      error,
    );
    return _ret.address == 0
        ? null
        : NSDictionary._(_ret, _lib, retain: true, release: true);
  }

  static NSObject sharedKeySetForKeys_(AVFAudio _lib, NSArray keys) {
    final _ret = _lib._objc_msgSend_125(
      _lib._class_NSMutableDictionary1,
      _lib._sel_sharedKeySetForKeys_1,
      keys.pointer,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableDictionary new1(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSMutableDictionary1,
      _lib._sel_new1,
    );
    return NSMutableDictionary._(_ret, _lib, retain: false, release: true);
  }

  static NSMutableDictionary allocWithZone_(
    AVFAudio _lib,
    ffi.Pointer<_NSZone> zone,
  ) {
    final _ret = _lib._objc_msgSend_3(
      _lib._class_NSMutableDictionary1,
      _lib._sel_allocWithZone_1,
      zone,
    );
    return NSMutableDictionary._(_ret, _lib, retain: false, release: true);
  }

  static NSMutableDictionary alloc(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSMutableDictionary1,
      _lib._sel_alloc1,
    );
    return NSMutableDictionary._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
    AVFAudio _lib,
    NSObject aTarget,
    ffi.Pointer<objc.ObjCSelector> aSelector,
    NSObject? anArgument,
  ) {
    _lib._objc_msgSend_14(
      _lib._class_NSMutableDictionary1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
      aTarget.pointer,
      aSelector,
      anArgument?.pointer ?? ffi.nullptr,
    );
  }

  static void cancelPreviousPerformRequestsWithTarget_(
    AVFAudio _lib,
    NSObject aTarget,
  ) {
    _lib._objc_msgSend_15(
      _lib._class_NSMutableDictionary1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_1,
      aTarget.pointer,
    );
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSMutableDictionary1,
      _lib._sel_accessInstanceVariablesDirectly1,
    );
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSMutableDictionary1,
      _lib._sel_useStoredAccessor1,
    );
  }

  static NSSet keyPathsForValuesAffectingValueForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    final _ret = _lib._objc_msgSend_63(
      _lib._class_NSMutableDictionary1,
      _lib._sel_keyPathsForValuesAffectingValueForKey_1,
      key.pointer,
    );
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    return _lib._objc_msgSend_64(
      _lib._class_NSMutableDictionary1,
      _lib._sel_automaticallyNotifiesObserversForKey_1,
      key.pointer,
    );
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
    AVFAudio _lib,
    NSArray keys,
    NSString dependentKey,
  ) {
    _lib._objc_msgSend_88(
      _lib._class_NSMutableDictionary1,
      _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
      keys.pointer,
      dependentKey.pointer,
    );
  }

  static NSArray classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_85(
      _lib._class_NSMutableDictionary1,
      _lib._sel_classFallbacksForKeyedArchiver1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSMutableDictionary1,
      _lib._sel_classForKeyedUnarchiver1,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

abstract class NSQualityOfService {
  static const int NSQualityOfServiceUserInteractive = 33;
  static const int NSQualityOfServiceUserInitiated = 25;
  static const int NSQualityOfServiceUtility = 17;
  static const int NSQualityOfServiceBackground = 9;
  static const int NSQualityOfServiceDefault = -1;
}

class NSArchiver extends NSCoder {
  NSArchiver._(
    ffi.Pointer<objc.ObjCObject> pointer,
    AVFAudio lib, {
    bool retain = false,
    bool release = false,
  }) : super._(pointer, lib, retain: retain, release: release);

  /// Returns a [NSArchiver] that points to the same underlying object as [other].
  static NSArchiver castFrom<T extends objc.ObjCObjectBase>(
    AVFAudio lib,
    T other,
  ) {
    return NSArchiver._(other.pointer, lib, retain: true, release: true);
  }

  /// Returns a [NSArchiver] that wraps the given raw object pointer.
  static NSArchiver castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCObject> other, {
    bool retain = false,
    bool release = false,
  }) {
    return NSArchiver._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSArchiver].
  static bool isInstance(AVFAudio lib, objc.ObjCObjectBase obj) {
    return lib._objc_msgSend_0(
      obj.pointer,
      lib._sel_isKindOfClass_1,
      lib._class_NSArchiver1,
    );
  }

  NSArchiver initForWritingWithMutableData_(NSMutableData mdata) {
    final _ret = _lib._objc_msgSend_521(
      this.pointer,
      _lib._sel_initForWritingWithMutableData_1,
      mdata.pointer,
    );
    return NSArchiver._(_ret, _lib, retain: true, release: true);
  }

  NSMutableData get archiverData {
    final _ret = _lib._objc_msgSend_550(this.pointer, _lib._sel_archiverData1);
    return NSMutableData._(_ret, _lib, retain: true, release: true);
  }

  @override
  void encodeRootObject_(NSObject rootObject) {
    _lib._objc_msgSend_15(
      this.pointer,
      _lib._sel_encodeRootObject_1,
      rootObject.pointer,
    );
  }

  @override
  void encodeConditionalObject_(NSObject? object) {
    _lib._objc_msgSend_289(
      this.pointer,
      _lib._sel_encodeConditionalObject_1,
      object?.pointer ?? ffi.nullptr,
    );
  }

  static NSData archivedDataWithRootObject_(
    AVFAudio _lib,
    NSObject rootObject,
  ) {
    final _ret = _lib._objc_msgSend_522(
      _lib._class_NSArchiver1,
      _lib._sel_archivedDataWithRootObject_1,
      rootObject.pointer,
    );
    return NSData._(_ret, _lib, retain: true, release: true);
  }

  static bool archiveRootObject_toFile_(
    AVFAudio _lib,
    NSObject rootObject,
    NSString path,
  ) {
    return _lib._objc_msgSend_261(
      _lib._class_NSArchiver1,
      _lib._sel_archiveRootObject_toFile_1,
      rootObject.pointer,
      path.pointer,
    );
  }

  void encodeClassName_intoClassName_(
    NSString trueName,
    NSString inArchiveName,
  ) {
    _lib._objc_msgSend_551(
      this.pointer,
      _lib._sel_encodeClassName_intoClassName_1,
      trueName.pointer,
      inArchiveName.pointer,
    );
  }

  NSString? classNameEncodedForTrueClassName_(NSString trueName) {
    final _ret = _lib._objc_msgSend_186(
      this.pointer,
      _lib._sel_classNameEncodedForTrueClassName_1,
      trueName.pointer,
    );
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  void replaceObject_withObject_(NSObject object, NSObject newObject) {
    _lib._objc_msgSend_534(
      this.pointer,
      _lib._sel_replaceObject_withObject_1,
      object.pointer,
      newObject.pointer,
    );
  }

  @override
  NSArchiver init() {
    final _ret = _lib._objc_msgSend_2(this.pointer, _lib._sel_init1);
    return NSArchiver._(_ret, _lib, retain: true, release: true);
  }

  static NSArchiver new1(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSArchiver1, _lib._sel_new1);
    return NSArchiver._(_ret, _lib, retain: false, release: true);
  }

  static NSArchiver allocWithZone_(AVFAudio _lib, ffi.Pointer<_NSZone> zone) {
    final _ret = _lib._objc_msgSend_3(
      _lib._class_NSArchiver1,
      _lib._sel_allocWithZone_1,
      zone,
    );
    return NSArchiver._(_ret, _lib, retain: false, release: true);
  }

  static NSArchiver alloc(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSArchiver1,
      _lib._sel_alloc1,
    );
    return NSArchiver._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
    AVFAudio _lib,
    NSObject aTarget,
    ffi.Pointer<objc.ObjCSelector> aSelector,
    NSObject? anArgument,
  ) {
    _lib._objc_msgSend_14(
      _lib._class_NSArchiver1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
      aTarget.pointer,
      aSelector,
      anArgument?.pointer ?? ffi.nullptr,
    );
  }

  static void cancelPreviousPerformRequestsWithTarget_(
    AVFAudio _lib,
    NSObject aTarget,
  ) {
    _lib._objc_msgSend_15(
      _lib._class_NSArchiver1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_1,
      aTarget.pointer,
    );
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSArchiver1,
      _lib._sel_accessInstanceVariablesDirectly1,
    );
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSArchiver1,
      _lib._sel_useStoredAccessor1,
    );
  }

  static NSSet keyPathsForValuesAffectingValueForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    final _ret = _lib._objc_msgSend_63(
      _lib._class_NSArchiver1,
      _lib._sel_keyPathsForValuesAffectingValueForKey_1,
      key.pointer,
    );
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    return _lib._objc_msgSend_64(
      _lib._class_NSArchiver1,
      _lib._sel_automaticallyNotifiesObserversForKey_1,
      key.pointer,
    );
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
    AVFAudio _lib,
    NSArray keys,
    NSString dependentKey,
  ) {
    _lib._objc_msgSend_88(
      _lib._class_NSArchiver1,
      _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
      keys.pointer,
      dependentKey.pointer,
    );
  }

  static NSArray classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_85(
      _lib._class_NSArchiver1,
      _lib._sel_classFallbacksForKeyedArchiver1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSArchiver1,
      _lib._sel_classForKeyedUnarchiver1,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

class NSPortCoder extends NSCoder {
  NSPortCoder._(
    ffi.Pointer<objc.ObjCObject> pointer,
    AVFAudio lib, {
    bool retain = false,
    bool release = false,
  }) : super._(pointer, lib, retain: retain, release: release);

  /// Returns a [NSPortCoder] that points to the same underlying object as [other].
  static NSPortCoder castFrom<T extends objc.ObjCObjectBase>(
    AVFAudio lib,
    T other,
  ) {
    return NSPortCoder._(other.pointer, lib, retain: true, release: true);
  }

  /// Returns a [NSPortCoder] that wraps the given raw object pointer.
  static NSPortCoder castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCObject> other, {
    bool retain = false,
    bool release = false,
  }) {
    return NSPortCoder._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSPortCoder].
  static bool isInstance(AVFAudio lib, objc.ObjCObjectBase obj) {
    return lib._objc_msgSend_0(
      obj.pointer,
      lib._sel_isKindOfClass_1,
      lib._class_NSPortCoder1,
    );
  }

  bool isBycopy() {
    return _lib._objc_msgSend_12(this.pointer, _lib._sel_isBycopy1);
  }

  bool isByref() {
    return _lib._objc_msgSend_12(this.pointer, _lib._sel_isByref1);
  }

  void encodePortObject_(NSPort aport) {
    _lib._objc_msgSend_593(
      this.pointer,
      _lib._sel_encodePortObject_1,
      aport.pointer,
    );
  }

  NSPort? decodePortObject() {
    final _ret = _lib._objc_msgSend_594(
      this.pointer,
      _lib._sel_decodePortObject1,
    );
    return _ret.address == 0
        ? null
        : NSPort._(_ret, _lib, retain: true, release: true);
  }

  NSConnection? connection() {
    final _ret = _lib._objc_msgSend_595(this.pointer, _lib._sel_connection1);
    return _ret.address == 0
        ? null
        : NSConnection._(_ret, _lib, retain: true, release: true);
  }

  static NSObject portCoderWithReceivePort_sendPort_components_(
    AVFAudio _lib,
    NSPort? rcvPort,
    NSPort? sndPort,
    NSArray? comps,
  ) {
    final _ret = _lib._objc_msgSend_596(
      _lib._class_NSPortCoder1,
      _lib._sel_portCoderWithReceivePort_sendPort_components_1,
      rcvPort?.pointer ?? ffi.nullptr,
      sndPort?.pointer ?? ffi.nullptr,
      comps?.pointer ?? ffi.nullptr,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject initWithReceivePort_sendPort_components_(
    NSPort? rcvPort,
    NSPort? sndPort,
    NSArray? comps,
  ) {
    final _ret = _lib._objc_msgSend_596(
      this.pointer,
      _lib._sel_initWithReceivePort_sendPort_components_1,
      rcvPort?.pointer ?? ffi.nullptr,
      sndPort?.pointer ?? ffi.nullptr,
      comps?.pointer ?? ffi.nullptr,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  void dispatch() {
    _lib._objc_msgSend_1(this.pointer, _lib._sel_dispatch1);
  }

  @override
  NSPortCoder init() {
    final _ret = _lib._objc_msgSend_2(this.pointer, _lib._sel_init1);
    return NSPortCoder._(_ret, _lib, retain: true, release: true);
  }

  static NSPortCoder new1(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSPortCoder1, _lib._sel_new1);
    return NSPortCoder._(_ret, _lib, retain: false, release: true);
  }

  static NSPortCoder allocWithZone_(AVFAudio _lib, ffi.Pointer<_NSZone> zone) {
    final _ret = _lib._objc_msgSend_3(
      _lib._class_NSPortCoder1,
      _lib._sel_allocWithZone_1,
      zone,
    );
    return NSPortCoder._(_ret, _lib, retain: false, release: true);
  }

  static NSPortCoder alloc(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSPortCoder1,
      _lib._sel_alloc1,
    );
    return NSPortCoder._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
    AVFAudio _lib,
    NSObject aTarget,
    ffi.Pointer<objc.ObjCSelector> aSelector,
    NSObject? anArgument,
  ) {
    _lib._objc_msgSend_14(
      _lib._class_NSPortCoder1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
      aTarget.pointer,
      aSelector,
      anArgument?.pointer ?? ffi.nullptr,
    );
  }

  static void cancelPreviousPerformRequestsWithTarget_(
    AVFAudio _lib,
    NSObject aTarget,
  ) {
    _lib._objc_msgSend_15(
      _lib._class_NSPortCoder1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_1,
      aTarget.pointer,
    );
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSPortCoder1,
      _lib._sel_accessInstanceVariablesDirectly1,
    );
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSPortCoder1,
      _lib._sel_useStoredAccessor1,
    );
  }

  static NSSet keyPathsForValuesAffectingValueForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    final _ret = _lib._objc_msgSend_63(
      _lib._class_NSPortCoder1,
      _lib._sel_keyPathsForValuesAffectingValueForKey_1,
      key.pointer,
    );
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    return _lib._objc_msgSend_64(
      _lib._class_NSPortCoder1,
      _lib._sel_automaticallyNotifiesObserversForKey_1,
      key.pointer,
    );
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
    AVFAudio _lib,
    NSArray keys,
    NSString dependentKey,
  ) {
    _lib._objc_msgSend_88(
      _lib._class_NSPortCoder1,
      _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
      keys.pointer,
      dependentKey.pointer,
    );
  }

  static NSArray classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_85(
      _lib._class_NSPortCoder1,
      _lib._sel_classFallbacksForKeyedArchiver1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSPortCoder1,
      _lib._sel_classForKeyedUnarchiver1,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

class NSPort extends NSObject {
  NSPort._(
    ffi.Pointer<objc.ObjCObject> pointer,
    AVFAudio lib, {
    bool retain = false,
    bool release = false,
  }) : super._(pointer, lib, retain: retain, release: release);

  /// Returns a [NSPort] that points to the same underlying object as [other].
  static NSPort castFrom<T extends objc.ObjCObjectBase>(AVFAudio lib, T other) {
    return NSPort._(other.pointer, lib, retain: true, release: true);
  }

  /// Returns a [NSPort] that wraps the given raw object pointer.
  static NSPort castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCObject> other, {
    bool retain = false,
    bool release = false,
  }) {
    return NSPort._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSPort].
  static bool isInstance(AVFAudio lib, objc.ObjCObjectBase obj) {
    return lib._objc_msgSend_0(
      obj.pointer,
      lib._sel_isKindOfClass_1,
      lib._class_NSPort1,
    );
  }

  static NSPort port(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_553(_lib._class_NSPort1, _lib._sel_port1);
    return NSPort._(_ret, _lib, retain: true, release: true);
  }

  void invalidate() {
    _lib._objc_msgSend_1(this.pointer, _lib._sel_invalidate1);
  }

  bool get valid {
    return _lib._objc_msgSend_12(this.pointer, _lib._sel_isValid1);
  }

  void setDelegate_(NSObject? anObject) {
    _lib._objc_msgSend_289(
      this.pointer,
      _lib._sel_setDelegate_1,
      anObject?.pointer ?? ffi.nullptr,
    );
  }

  NSObject? delegate() {
    final _ret = _lib._objc_msgSend_17(this.pointer, _lib._sel_delegate1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  void scheduleInRunLoop_forMode_(NSRunLoop runLoop, NSString mode) {
    _lib._objc_msgSend_569(
      this.pointer,
      _lib._sel_scheduleInRunLoop_forMode_1,
      runLoop.pointer,
      mode.pointer,
    );
  }

  void removeFromRunLoop_forMode_(NSRunLoop runLoop, NSString mode) {
    _lib._objc_msgSend_569(
      this.pointer,
      _lib._sel_removeFromRunLoop_forMode_1,
      runLoop.pointer,
      mode.pointer,
    );
  }

  int get reservedSpaceLength {
    return _lib._objc_msgSend_10(this.pointer, _lib._sel_reservedSpaceLength1);
  }

  bool sendBeforeDate_components_from_reserved_(
    NSDate limitDate,
    NSMutableArray? components,
    NSPort? receivePort,
    int headerSpaceReserved,
  ) {
    return _lib._objc_msgSend_570(
      this.pointer,
      _lib._sel_sendBeforeDate_components_from_reserved_1,
      limitDate.pointer,
      components?.pointer ?? ffi.nullptr,
      receivePort?.pointer ?? ffi.nullptr,
      headerSpaceReserved,
    );
  }

  bool sendBeforeDate_msgid_components_from_reserved_(
    NSDate limitDate,
    int msgID,
    NSMutableArray? components,
    NSPort? receivePort,
    int headerSpaceReserved,
  ) {
    return _lib._objc_msgSend_571(
      this.pointer,
      _lib._sel_sendBeforeDate_msgid_components_from_reserved_1,
      limitDate.pointer,
      msgID,
      components?.pointer ?? ffi.nullptr,
      receivePort?.pointer ?? ffi.nullptr,
      headerSpaceReserved,
    );
  }

  void addConnection_toRunLoop_forMode_(
    NSConnection conn,
    NSRunLoop runLoop,
    NSString mode,
  ) {
    _lib._objc_msgSend_592(
      this.pointer,
      _lib._sel_addConnection_toRunLoop_forMode_1,
      conn.pointer,
      runLoop.pointer,
      mode.pointer,
    );
  }

  void removeConnection_fromRunLoop_forMode_(
    NSConnection conn,
    NSRunLoop runLoop,
    NSString mode,
  ) {
    _lib._objc_msgSend_592(
      this.pointer,
      _lib._sel_removeConnection_fromRunLoop_forMode_1,
      conn.pointer,
      runLoop.pointer,
      mode.pointer,
    );
  }

  @override
  NSPort init() {
    final _ret = _lib._objc_msgSend_2(this.pointer, _lib._sel_init1);
    return NSPort._(_ret, _lib, retain: true, release: true);
  }

  static NSPort new1(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSPort1, _lib._sel_new1);
    return NSPort._(_ret, _lib, retain: false, release: true);
  }

  static NSPort allocWithZone_(AVFAudio _lib, ffi.Pointer<_NSZone> zone) {
    final _ret = _lib._objc_msgSend_3(
      _lib._class_NSPort1,
      _lib._sel_allocWithZone_1,
      zone,
    );
    return NSPort._(_ret, _lib, retain: false, release: true);
  }

  static NSPort alloc(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSPort1, _lib._sel_alloc1);
    return NSPort._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
    AVFAudio _lib,
    NSObject aTarget,
    ffi.Pointer<objc.ObjCSelector> aSelector,
    NSObject? anArgument,
  ) {
    _lib._objc_msgSend_14(
      _lib._class_NSPort1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
      aTarget.pointer,
      aSelector,
      anArgument?.pointer ?? ffi.nullptr,
    );
  }

  static void cancelPreviousPerformRequestsWithTarget_(
    AVFAudio _lib,
    NSObject aTarget,
  ) {
    _lib._objc_msgSend_15(
      _lib._class_NSPort1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_1,
      aTarget.pointer,
    );
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSPort1,
      _lib._sel_accessInstanceVariablesDirectly1,
    );
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSPort1,
      _lib._sel_useStoredAccessor1,
    );
  }

  static NSSet keyPathsForValuesAffectingValueForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    final _ret = _lib._objc_msgSend_63(
      _lib._class_NSPort1,
      _lib._sel_keyPathsForValuesAffectingValueForKey_1,
      key.pointer,
    );
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    return _lib._objc_msgSend_64(
      _lib._class_NSPort1,
      _lib._sel_automaticallyNotifiesObserversForKey_1,
      key.pointer,
    );
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
    AVFAudio _lib,
    NSArray keys,
    NSString dependentKey,
  ) {
    _lib._objc_msgSend_88(
      _lib._class_NSPort1,
      _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
      keys.pointer,
      dependentKey.pointer,
    );
  }

  static NSArray classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_85(
      _lib._class_NSPort1,
      _lib._sel_classFallbacksForKeyedArchiver1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSPort1,
      _lib._sel_classForKeyedUnarchiver1,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

class NSRunLoop extends NSObject {
  NSRunLoop._(
    ffi.Pointer<objc.ObjCObject> pointer,
    AVFAudio lib, {
    bool retain = false,
    bool release = false,
  }) : super._(pointer, lib, retain: retain, release: release);

  /// Returns a [NSRunLoop] that points to the same underlying object as [other].
  static NSRunLoop castFrom<T extends objc.ObjCObjectBase>(
    AVFAudio lib,
    T other,
  ) {
    return NSRunLoop._(other.pointer, lib, retain: true, release: true);
  }

  /// Returns a [NSRunLoop] that wraps the given raw object pointer.
  static NSRunLoop castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCObject> other, {
    bool retain = false,
    bool release = false,
  }) {
    return NSRunLoop._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSRunLoop].
  static bool isInstance(AVFAudio lib, objc.ObjCObjectBase obj) {
    return lib._objc_msgSend_0(
      obj.pointer,
      lib._sel_isKindOfClass_1,
      lib._class_NSRunLoop1,
    );
  }

  static NSRunLoop getCurrentRunLoop(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_554(
      _lib._class_NSRunLoop1,
      _lib._sel_currentRunLoop1,
    );
    return NSRunLoop._(_ret, _lib, retain: true, release: true);
  }

  static NSRunLoop getMainRunLoop(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_554(
      _lib._class_NSRunLoop1,
      _lib._sel_mainRunLoop1,
    );
    return NSRunLoop._(_ret, _lib, retain: true, release: true);
  }

  NSString? get currentMode {
    final _ret = _lib._objc_msgSend_44(this.pointer, _lib._sel_currentMode1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  ffi.Pointer<__CFRunLoop> getCFRunLoop() {
    return _lib._objc_msgSend_555(this.pointer, _lib._sel_getCFRunLoop1);
  }

  void addTimer_forMode_(NSTimer timer, NSString mode) {
    _lib._objc_msgSend_562(
      this.pointer,
      _lib._sel_addTimer_forMode_1,
      timer.pointer,
      mode.pointer,
    );
  }

  void addPort_forMode_(NSPort aPort, NSString mode) {
    _lib._objc_msgSend_563(
      this.pointer,
      _lib._sel_addPort_forMode_1,
      aPort.pointer,
      mode.pointer,
    );
  }

  void removePort_forMode_(NSPort aPort, NSString mode) {
    _lib._objc_msgSend_563(
      this.pointer,
      _lib._sel_removePort_forMode_1,
      aPort.pointer,
      mode.pointer,
    );
  }

  NSDate? limitDateForMode_(NSString mode) {
    final _ret = _lib._objc_msgSend_564(
      this.pointer,
      _lib._sel_limitDateForMode_1,
      mode.pointer,
    );
    return _ret.address == 0
        ? null
        : NSDate._(_ret, _lib, retain: true, release: true);
  }

  void acceptInputForMode_beforeDate_(NSString mode, NSDate limitDate) {
    _lib._objc_msgSend_565(
      this.pointer,
      _lib._sel_acceptInputForMode_beforeDate_1,
      mode.pointer,
      limitDate.pointer,
    );
  }

  void run() {
    _lib._objc_msgSend_1(this.pointer, _lib._sel_run1);
  }

  void runUntilDate_(NSDate limitDate) {
    _lib._objc_msgSend_540(
      this.pointer,
      _lib._sel_runUntilDate_1,
      limitDate.pointer,
    );
  }

  bool runMode_beforeDate_(NSString mode, NSDate limitDate) {
    return _lib._objc_msgSend_566(
      this.pointer,
      _lib._sel_runMode_beforeDate_1,
      mode.pointer,
      limitDate.pointer,
    );
  }

  void configureAsServer() {
    _lib._objc_msgSend_1(this.pointer, _lib._sel_configureAsServer1);
  }

  void performInModes_block_(NSArray modes, ObjCBlock_ffiVoid block) {
    _lib._objc_msgSend_567(
      this.pointer,
      _lib._sel_performInModes_block_1,
      modes.pointer,
      block.pointer,
    );
  }

  void performBlock_(ObjCBlock_ffiVoid block) {
    _lib._objc_msgSend_532(
      this.pointer,
      _lib._sel_performBlock_1,
      block.pointer,
    );
  }

  void performSelector_target_argument_order_modes_(
    ffi.Pointer<objc.ObjCSelector> aSelector,
    NSObject target,
    NSObject? arg,
    int order,
    NSArray modes,
  ) {
    _lib._objc_msgSend_568(
      this.pointer,
      _lib._sel_performSelector_target_argument_order_modes_1,
      aSelector,
      target.pointer,
      arg?.pointer ?? ffi.nullptr,
      order,
      modes.pointer,
    );
  }

  void cancelPerformSelector_target_argument_(
    ffi.Pointer<objc.ObjCSelector> aSelector,
    NSObject target,
    NSObject? arg,
  ) {
    _lib._objc_msgSend_533(
      this.pointer,
      _lib._sel_cancelPerformSelector_target_argument_1,
      aSelector,
      target.pointer,
      arg?.pointer ?? ffi.nullptr,
    );
  }

  void cancelPerformSelectorsWithTarget_(NSObject target) {
    _lib._objc_msgSend_15(
      this.pointer,
      _lib._sel_cancelPerformSelectorsWithTarget_1,
      target.pointer,
    );
  }

  @override
  NSRunLoop init() {
    final _ret = _lib._objc_msgSend_2(this.pointer, _lib._sel_init1);
    return NSRunLoop._(_ret, _lib, retain: true, release: true);
  }

  static NSRunLoop new1(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSRunLoop1, _lib._sel_new1);
    return NSRunLoop._(_ret, _lib, retain: false, release: true);
  }

  static NSRunLoop allocWithZone_(AVFAudio _lib, ffi.Pointer<_NSZone> zone) {
    final _ret = _lib._objc_msgSend_3(
      _lib._class_NSRunLoop1,
      _lib._sel_allocWithZone_1,
      zone,
    );
    return NSRunLoop._(_ret, _lib, retain: false, release: true);
  }

  static NSRunLoop alloc(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSRunLoop1, _lib._sel_alloc1);
    return NSRunLoop._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
    AVFAudio _lib,
    NSObject aTarget,
    ffi.Pointer<objc.ObjCSelector> aSelector,
    NSObject? anArgument,
  ) {
    _lib._objc_msgSend_14(
      _lib._class_NSRunLoop1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
      aTarget.pointer,
      aSelector,
      anArgument?.pointer ?? ffi.nullptr,
    );
  }

  static void cancelPreviousPerformRequestsWithTarget_(
    AVFAudio _lib,
    NSObject aTarget,
  ) {
    _lib._objc_msgSend_15(
      _lib._class_NSRunLoop1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_1,
      aTarget.pointer,
    );
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSRunLoop1,
      _lib._sel_accessInstanceVariablesDirectly1,
    );
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSRunLoop1,
      _lib._sel_useStoredAccessor1,
    );
  }

  static NSSet keyPathsForValuesAffectingValueForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    final _ret = _lib._objc_msgSend_63(
      _lib._class_NSRunLoop1,
      _lib._sel_keyPathsForValuesAffectingValueForKey_1,
      key.pointer,
    );
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    return _lib._objc_msgSend_64(
      _lib._class_NSRunLoop1,
      _lib._sel_automaticallyNotifiesObserversForKey_1,
      key.pointer,
    );
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
    AVFAudio _lib,
    NSArray keys,
    NSString dependentKey,
  ) {
    _lib._objc_msgSend_88(
      _lib._class_NSRunLoop1,
      _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
      keys.pointer,
      dependentKey.pointer,
    );
  }

  static NSArray classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_85(
      _lib._class_NSRunLoop1,
      _lib._sel_classFallbacksForKeyedArchiver1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSRunLoop1,
      _lib._sel_classForKeyedUnarchiver1,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

final class __CFRunLoop extends ffi.Opaque {}

class NSTimer extends NSObject {
  NSTimer._(
    ffi.Pointer<objc.ObjCObject> pointer,
    AVFAudio lib, {
    bool retain = false,
    bool release = false,
  }) : super._(pointer, lib, retain: retain, release: release);

  /// Returns a [NSTimer] that points to the same underlying object as [other].
  static NSTimer castFrom<T extends objc.ObjCObjectBase>(
    AVFAudio lib,
    T other,
  ) {
    return NSTimer._(other.pointer, lib, retain: true, release: true);
  }

  /// Returns a [NSTimer] that wraps the given raw object pointer.
  static NSTimer castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCObject> other, {
    bool retain = false,
    bool release = false,
  }) {
    return NSTimer._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSTimer].
  static bool isInstance(AVFAudio lib, objc.ObjCObjectBase obj) {
    return lib._objc_msgSend_0(
      obj.pointer,
      lib._sel_isKindOfClass_1,
      lib._class_NSTimer1,
    );
  }

  static NSTimer timerWithTimeInterval_invocation_repeats_(
    AVFAudio _lib,
    double ti,
    NSInvocation invocation,
    bool yesOrNo,
  ) {
    final _ret = _lib._objc_msgSend_556(
      _lib._class_NSTimer1,
      _lib._sel_timerWithTimeInterval_invocation_repeats_1,
      ti,
      invocation.pointer,
      yesOrNo,
    );
    return NSTimer._(_ret, _lib, retain: true, release: true);
  }

  static NSTimer scheduledTimerWithTimeInterval_invocation_repeats_(
    AVFAudio _lib,
    double ti,
    NSInvocation invocation,
    bool yesOrNo,
  ) {
    final _ret = _lib._objc_msgSend_556(
      _lib._class_NSTimer1,
      _lib._sel_scheduledTimerWithTimeInterval_invocation_repeats_1,
      ti,
      invocation.pointer,
      yesOrNo,
    );
    return NSTimer._(_ret, _lib, retain: true, release: true);
  }

  static NSTimer timerWithTimeInterval_target_selector_userInfo_repeats_(
    AVFAudio _lib,
    double ti,
    NSObject aTarget,
    ffi.Pointer<objc.ObjCSelector> aSelector,
    NSObject? userInfo,
    bool yesOrNo,
  ) {
    final _ret = _lib._objc_msgSend_557(
      _lib._class_NSTimer1,
      _lib._sel_timerWithTimeInterval_target_selector_userInfo_repeats_1,
      ti,
      aTarget.pointer,
      aSelector,
      userInfo?.pointer ?? ffi.nullptr,
      yesOrNo,
    );
    return NSTimer._(_ret, _lib, retain: true, release: true);
  }

  static NSTimer
  scheduledTimerWithTimeInterval_target_selector_userInfo_repeats_(
    AVFAudio _lib,
    double ti,
    NSObject aTarget,
    ffi.Pointer<objc.ObjCSelector> aSelector,
    NSObject? userInfo,
    bool yesOrNo,
  ) {
    final _ret = _lib._objc_msgSend_557(
      _lib._class_NSTimer1,
      _lib._sel_scheduledTimerWithTimeInterval_target_selector_userInfo_repeats_1,
      ti,
      aTarget.pointer,
      aSelector,
      userInfo?.pointer ?? ffi.nullptr,
      yesOrNo,
    );
    return NSTimer._(_ret, _lib, retain: true, release: true);
  }

  static NSTimer timerWithTimeInterval_repeats_block_(
    AVFAudio _lib,
    double interval,
    bool repeats,
    ObjCBlock_ffiVoid_NSTimer block,
  ) {
    final _ret = _lib._objc_msgSend_558(
      _lib._class_NSTimer1,
      _lib._sel_timerWithTimeInterval_repeats_block_1,
      interval,
      repeats,
      block.pointer,
    );
    return NSTimer._(_ret, _lib, retain: true, release: true);
  }

  static NSTimer scheduledTimerWithTimeInterval_repeats_block_(
    AVFAudio _lib,
    double interval,
    bool repeats,
    ObjCBlock_ffiVoid_NSTimer block,
  ) {
    final _ret = _lib._objc_msgSend_558(
      _lib._class_NSTimer1,
      _lib._sel_scheduledTimerWithTimeInterval_repeats_block_1,
      interval,
      repeats,
      block.pointer,
    );
    return NSTimer._(_ret, _lib, retain: true, release: true);
  }

  NSTimer initWithFireDate_interval_repeats_block_(
    NSDate date,
    double interval,
    bool repeats,
    ObjCBlock_ffiVoid_NSTimer block,
  ) {
    final _ret = _lib._objc_msgSend_559(
      this.pointer,
      _lib._sel_initWithFireDate_interval_repeats_block_1,
      date.pointer,
      interval,
      repeats,
      block.pointer,
    );
    return NSTimer._(_ret, _lib, retain: true, release: true);
  }

  NSTimer initWithFireDate_interval_target_selector_userInfo_repeats_(
    NSDate date,
    double ti,
    NSObject t,
    ffi.Pointer<objc.ObjCSelector> s,
    NSObject? ui,
    bool rep,
  ) {
    final _ret = _lib._objc_msgSend_560(
      this.pointer,
      _lib._sel_initWithFireDate_interval_target_selector_userInfo_repeats_1,
      date.pointer,
      ti,
      t.pointer,
      s,
      ui?.pointer ?? ffi.nullptr,
      rep,
    );
    return NSTimer._(_ret, _lib, retain: true, release: true);
  }

  void fire() {
    _lib._objc_msgSend_1(this.pointer, _lib._sel_fire1);
  }

  NSDate get fireDate {
    final _ret = _lib._objc_msgSend_172(this.pointer, _lib._sel_fireDate1);
    return NSDate._(_ret, _lib, retain: true, release: true);
  }

  set fireDate(NSDate value) {
    return _lib._objc_msgSend_561(
      this.pointer,
      _lib._sel_setFireDate_1,
      value.pointer,
    );
  }

  double get timeInterval {
    return objc.useMsgSendVariants
        ? _lib._objc_msgSend_165_fpret(this.pointer, _lib._sel_timeInterval1)
        : _lib._objc_msgSend_165(this.pointer, _lib._sel_timeInterval1);
  }

  double get tolerance {
    return objc.useMsgSendVariants
        ? _lib._objc_msgSend_165_fpret(this.pointer, _lib._sel_tolerance1)
        : _lib._objc_msgSend_165(this.pointer, _lib._sel_tolerance1);
  }

  set tolerance(double value) {
    return _lib._objc_msgSend_542(
      this.pointer,
      _lib._sel_setTolerance_1,
      value,
    );
  }

  void invalidate() {
    _lib._objc_msgSend_1(this.pointer, _lib._sel_invalidate1);
  }

  bool get valid {
    return _lib._objc_msgSend_12(this.pointer, _lib._sel_isValid1);
  }

  NSObject? get userInfo {
    final _ret = _lib._objc_msgSend_17(this.pointer, _lib._sel_userInfo1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSTimer init() {
    final _ret = _lib._objc_msgSend_2(this.pointer, _lib._sel_init1);
    return NSTimer._(_ret, _lib, retain: true, release: true);
  }

  static NSTimer new1(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSTimer1, _lib._sel_new1);
    return NSTimer._(_ret, _lib, retain: false, release: true);
  }

  static NSTimer allocWithZone_(AVFAudio _lib, ffi.Pointer<_NSZone> zone) {
    final _ret = _lib._objc_msgSend_3(
      _lib._class_NSTimer1,
      _lib._sel_allocWithZone_1,
      zone,
    );
    return NSTimer._(_ret, _lib, retain: false, release: true);
  }

  static NSTimer alloc(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSTimer1, _lib._sel_alloc1);
    return NSTimer._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
    AVFAudio _lib,
    NSObject aTarget,
    ffi.Pointer<objc.ObjCSelector> aSelector,
    NSObject? anArgument,
  ) {
    _lib._objc_msgSend_14(
      _lib._class_NSTimer1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
      aTarget.pointer,
      aSelector,
      anArgument?.pointer ?? ffi.nullptr,
    );
  }

  static void cancelPreviousPerformRequestsWithTarget_(
    AVFAudio _lib,
    NSObject aTarget,
  ) {
    _lib._objc_msgSend_15(
      _lib._class_NSTimer1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_1,
      aTarget.pointer,
    );
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSTimer1,
      _lib._sel_accessInstanceVariablesDirectly1,
    );
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSTimer1,
      _lib._sel_useStoredAccessor1,
    );
  }

  static NSSet keyPathsForValuesAffectingValueForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    final _ret = _lib._objc_msgSend_63(
      _lib._class_NSTimer1,
      _lib._sel_keyPathsForValuesAffectingValueForKey_1,
      key.pointer,
    );
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    return _lib._objc_msgSend_64(
      _lib._class_NSTimer1,
      _lib._sel_automaticallyNotifiesObserversForKey_1,
      key.pointer,
    );
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
    AVFAudio _lib,
    NSArray keys,
    NSString dependentKey,
  ) {
    _lib._objc_msgSend_88(
      _lib._class_NSTimer1,
      _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
      keys.pointer,
      dependentKey.pointer,
    );
  }

  static NSArray classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_85(
      _lib._class_NSTimer1,
      _lib._sel_classFallbacksForKeyedArchiver1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSTimer1,
      _lib._sel_classForKeyedUnarchiver1,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

void _ObjCBlock_ffiVoid_NSTimer_fnPtrTrampoline(
  ffi.Pointer<objc.ObjCBlock> block,
  ffi.Pointer<objc.ObjCObject> arg0,
) => block.ref.target
    .cast<
      ffi.NativeFunction<ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0)>
    >()
    .asFunction<void Function(ffi.Pointer<objc.ObjCObject>)>()(arg0);
final _ObjCBlock_ffiVoid_NSTimer_closureRegistry =
    <int, void Function(ffi.Pointer<objc.ObjCObject>)>{};
int _ObjCBlock_ffiVoid_NSTimer_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void> _ObjCBlock_ffiVoid_NSTimer_registerClosure(
  void Function(ffi.Pointer<objc.ObjCObject>) fn,
) {
  final id = ++_ObjCBlock_ffiVoid_NSTimer_closureRegistryIndex;
  _ObjCBlock_ffiVoid_NSTimer_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

void _ObjCBlock_ffiVoid_NSTimer_closureTrampoline(
  ffi.Pointer<objc.ObjCBlock> block,
  ffi.Pointer<objc.ObjCObject> arg0,
) => _ObjCBlock_ffiVoid_NSTimer_closureRegistry[block.ref.target.address]!(
  arg0,
);

class ObjCBlock_ffiVoid_NSTimer extends objc.ObjCBlockBase {
  ObjCBlock_ffiVoid_NSTimer._(
    ffi.Pointer<objc.ObjCBlock> pointer,
    this._lib, {
    bool retain = false,
    bool release = true,
  }) : super(pointer, retain: retain, release: release);

  AVFAudio _lib;

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_ffiVoid_NSTimer castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCBlock> pointer, {
    bool retain = false,
    bool release = false,
  }) {
    return ObjCBlock_ffiVoid_NSTimer._(
      pointer,
      lib,
      retain: retain,
      release: release,
    );
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSTimer.fromFunctionPointer(
    AVFAudio lib,
    ffi.Pointer<
      ffi.NativeFunction<ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0)>
    > ptr,
  ) : this._(objc.newBlock(
        _cFuncTrampoline ??=
            ffi.Pointer.fromFunction<
              ffi.Void Function(
                ffi.Pointer<objc.ObjCBlock>,
                ffi.Pointer<objc.ObjCObject>,
              )
            >(_ObjCBlock_ffiVoid_NSTimer_fnPtrTrampoline).cast(),
        ptr.cast(),
      ), lib);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSTimer.fromFunction(
    AVFAudio lib,
    void Function(NSTimer) fn,
  ) : this._(objc.newBlock(
        _dartFuncTrampoline ??=
            ffi.Pointer.fromFunction<
              ffi.Void Function(
                ffi.Pointer<objc.ObjCBlock>,
                ffi.Pointer<objc.ObjCObject>,
              )
            >(_ObjCBlock_ffiVoid_NSTimer_closureTrampoline).cast(),
        _ObjCBlock_ffiVoid_NSTimer_registerClosure((
          ffi.Pointer<objc.ObjCObject> arg0,
        ) => fn(NSTimer._(arg0, lib, retain: true, release: true))),
      ), lib);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_NSTimer.listener(AVFAudio lib, void Function(NSTimer) fn)
    : this._(objc.newBlock(
        (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
              ffi.Void Function(
                ffi.Pointer<objc.ObjCBlock>,
                ffi.Pointer<objc.ObjCObject>,
              )
            >.listener(
              _ObjCBlock_ffiVoid_NSTimer_closureTrampoline,
            )..keepIsolateAlive = false)
            .nativeFunction
            .cast(),
        _ObjCBlock_ffiVoid_NSTimer_registerClosure((
          ffi.Pointer<objc.ObjCObject> arg0,
        ) => fn(NSTimer._(arg0, lib, retain: true, release: true))),
      ), lib);
  static ffi.NativeCallable<
    ffi.Void Function(ffi.Pointer<objc.ObjCBlock>, ffi.Pointer<objc.ObjCObject>)
  >? _dartFuncListenerTrampoline;

  void call(NSTimer arg0) => pointer.ref.invoke
      .cast<
        ffi.NativeFunction<
          ffi.Void Function(
            ffi.Pointer<objc.ObjCBlock> block,
            ffi.Pointer<objc.ObjCObject> arg0,
          )
        >
      >()
      .asFunction<
        void Function(ffi.Pointer<objc.ObjCBlock>, ffi.Pointer<objc.ObjCObject>)
      >()(pointer, arg0.pointer);
}

class NSConnection extends NSObject {
  NSConnection._(
    ffi.Pointer<objc.ObjCObject> pointer,
    AVFAudio lib, {
    bool retain = false,
    bool release = false,
  }) : super._(pointer, lib, retain: retain, release: release);

  /// Returns a [NSConnection] that points to the same underlying object as [other].
  static NSConnection castFrom<T extends objc.ObjCObjectBase>(
    AVFAudio lib,
    T other,
  ) {
    return NSConnection._(other.pointer, lib, retain: true, release: true);
  }

  /// Returns a [NSConnection] that wraps the given raw object pointer.
  static NSConnection castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCObject> other, {
    bool retain = false,
    bool release = false,
  }) {
    return NSConnection._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSConnection].
  static bool isInstance(AVFAudio lib, objc.ObjCObjectBase obj) {
    return lib._objc_msgSend_0(
      obj.pointer,
      lib._sel_isKindOfClass_1,
      lib._class_NSConnection1,
    );
  }

  NSDictionary get statistics {
    final _ret = _lib._objc_msgSend_181(this.pointer, _lib._sel_statistics1);
    return NSDictionary._(_ret, _lib, retain: true, release: true);
  }

  static NSArray allConnections(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_85(
      _lib._class_NSConnection1,
      _lib._sel_allConnections1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSConnection defaultConnection(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_572(
      _lib._class_NSConnection1,
      _lib._sel_defaultConnection1,
    );
    return NSConnection._(_ret, _lib, retain: true, release: true);
  }

  static NSConnection? connectionWithRegisteredName_host_(
    AVFAudio _lib,
    NSString name,
    NSString? hostName,
  ) {
    final _ret = _lib._objc_msgSend_573(
      _lib._class_NSConnection1,
      _lib._sel_connectionWithRegisteredName_host_1,
      name.pointer,
      hostName?.pointer ?? ffi.nullptr,
    );
    return _ret.address == 0
        ? null
        : NSConnection._(_ret, _lib, retain: true, release: true);
  }

  static NSConnection? connectionWithRegisteredName_host_usingNameServer_(
    AVFAudio _lib,
    NSString name,
    NSString? hostName,
    NSPortNameServer server,
  ) {
    final _ret = _lib._objc_msgSend_578(
      _lib._class_NSConnection1,
      _lib._sel_connectionWithRegisteredName_host_usingNameServer_1,
      name.pointer,
      hostName?.pointer ?? ffi.nullptr,
      server.pointer,
    );
    return _ret.address == 0
        ? null
        : NSConnection._(_ret, _lib, retain: true, release: true);
  }

  static NSDistantObject? rootProxyForConnectionWithRegisteredName_host_(
    AVFAudio _lib,
    NSString name,
    NSString? hostName,
  ) {
    final _ret = _lib._objc_msgSend_583(
      _lib._class_NSConnection1,
      _lib._sel_rootProxyForConnectionWithRegisteredName_host_1,
      name.pointer,
      hostName?.pointer ?? ffi.nullptr,
    );
    return _ret.address == 0
        ? null
        : NSDistantObject._(_ret, _lib, retain: true, release: true);
  }

  static NSDistantObject?
  rootProxyForConnectionWithRegisteredName_host_usingNameServer_(
    AVFAudio _lib,
    NSString name,
    NSString? hostName,
    NSPortNameServer server,
  ) {
    final _ret = _lib._objc_msgSend_584(
      _lib._class_NSConnection1,
      _lib._sel_rootProxyForConnectionWithRegisteredName_host_usingNameServer_1,
      name.pointer,
      hostName?.pointer ?? ffi.nullptr,
      server.pointer,
    );
    return _ret.address == 0
        ? null
        : NSDistantObject._(_ret, _lib, retain: true, release: true);
  }

  static NSConnection? serviceConnectionWithName_rootObject_usingNameServer_(
    AVFAudio _lib,
    NSString name,
    NSObject root,
    NSPortNameServer server,
  ) {
    final _ret = _lib._objc_msgSend_585(
      _lib._class_NSConnection1,
      _lib._sel_serviceConnectionWithName_rootObject_usingNameServer_1,
      name.pointer,
      root.pointer,
      server.pointer,
    );
    return _ret.address == 0
        ? null
        : NSConnection._(_ret, _lib, retain: true, release: true);
  }

  static NSConnection? serviceConnectionWithName_rootObject_(
    AVFAudio _lib,
    NSString name,
    NSObject root,
  ) {
    final _ret = _lib._objc_msgSend_586(
      _lib._class_NSConnection1,
      _lib._sel_serviceConnectionWithName_rootObject_1,
      name.pointer,
      root.pointer,
    );
    return _ret.address == 0
        ? null
        : NSConnection._(_ret, _lib, retain: true, release: true);
  }

  double get requestTimeout {
    return objc.useMsgSendVariants
        ? _lib._objc_msgSend_165_fpret(this.pointer, _lib._sel_requestTimeout1)
        : _lib._objc_msgSend_165(this.pointer, _lib._sel_requestTimeout1);
  }

  set requestTimeout(double value) {
    return _lib._objc_msgSend_542(
      this.pointer,
      _lib._sel_setRequestTimeout_1,
      value,
    );
  }

  double get replyTimeout {
    return objc.useMsgSendVariants
        ? _lib._objc_msgSend_165_fpret(this.pointer, _lib._sel_replyTimeout1)
        : _lib._objc_msgSend_165(this.pointer, _lib._sel_replyTimeout1);
  }

  set replyTimeout(double value) {
    return _lib._objc_msgSend_542(
      this.pointer,
      _lib._sel_setReplyTimeout_1,
      value,
    );
  }

  NSObject? get rootObject {
    final _ret = _lib._objc_msgSend_17(this.pointer, _lib._sel_rootObject1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  set rootObject(NSObject? value) {
    return _lib._objc_msgSend_416(
      this.pointer,
      _lib._sel_setRootObject_1,
      value?.pointer ?? ffi.nullptr,
    );
  }

  NSObject? get delegate {
    final _ret = _lib._objc_msgSend_17(this.pointer, _lib._sel_delegate1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  set delegate(NSObject? value) {
    return _lib._objc_msgSend_416(
      this.pointer,
      _lib._sel_setDelegate_1,
      value?.pointer ?? ffi.nullptr,
    );
  }

  bool get independentConversationQueueing {
    return _lib._objc_msgSend_12(
      this.pointer,
      _lib._sel_independentConversationQueueing1,
    );
  }

  set independentConversationQueueing(bool value) {
    return _lib._objc_msgSend_527(
      this.pointer,
      _lib._sel_setIndependentConversationQueueing_1,
      value,
    );
  }

  bool get valid {
    return _lib._objc_msgSend_12(this.pointer, _lib._sel_isValid1);
  }

  NSDistantObject get rootProxy {
    final _ret = _lib._objc_msgSend_587(this.pointer, _lib._sel_rootProxy1);
    return NSDistantObject._(_ret, _lib, retain: true, release: true);
  }

  void invalidate() {
    _lib._objc_msgSend_1(this.pointer, _lib._sel_invalidate1);
  }

  void addRequestMode_(NSString rmode) {
    _lib._objc_msgSend_247(
      this.pointer,
      _lib._sel_addRequestMode_1,
      rmode.pointer,
    );
  }

  void removeRequestMode_(NSString rmode) {
    _lib._objc_msgSend_247(
      this.pointer,
      _lib._sel_removeRequestMode_1,
      rmode.pointer,
    );
  }

  NSArray get requestModes {
    final _ret = _lib._objc_msgSend_85(this.pointer, _lib._sel_requestModes1);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  bool registerName_(NSString? name) {
    return _lib._objc_msgSend_588(
      this.pointer,
      _lib._sel_registerName_1,
      name?.pointer ?? ffi.nullptr,
    );
  }

  bool registerName_withNameServer_(NSString? name, NSPortNameServer server) {
    return _lib._objc_msgSend_589(
      this.pointer,
      _lib._sel_registerName_withNameServer_1,
      name?.pointer ?? ffi.nullptr,
      server.pointer,
    );
  }

  static NSConnection? connectionWithReceivePort_sendPort_(
    AVFAudio _lib,
    NSPort? receivePort,
    NSPort? sendPort,
  ) {
    final _ret = _lib._objc_msgSend_590(
      _lib._class_NSConnection1,
      _lib._sel_connectionWithReceivePort_sendPort_1,
      receivePort?.pointer ?? ffi.nullptr,
      sendPort?.pointer ?? ffi.nullptr,
    );
    return _ret.address == 0
        ? null
        : NSConnection._(_ret, _lib, retain: true, release: true);
  }

  static NSObject? currentConversation(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_17(
      _lib._class_NSConnection1,
      _lib._sel_currentConversation1,
    );
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSConnection? initWithReceivePort_sendPort_(
    NSPort? receivePort,
    NSPort? sendPort,
  ) {
    final _ret = _lib._objc_msgSend_590(
      this.pointer,
      _lib._sel_initWithReceivePort_sendPort_1,
      receivePort?.pointer ?? ffi.nullptr,
      sendPort?.pointer ?? ffi.nullptr,
    );
    return _ret.address == 0
        ? null
        : NSConnection._(_ret, _lib, retain: true, release: true);
  }

  NSPort get sendPort {
    final _ret = _lib._objc_msgSend_553(this.pointer, _lib._sel_sendPort1);
    return NSPort._(_ret, _lib, retain: true, release: true);
  }

  NSPort get receivePort {
    final _ret = _lib._objc_msgSend_553(this.pointer, _lib._sel_receivePort1);
    return NSPort._(_ret, _lib, retain: true, release: true);
  }

  void enableMultipleThreads() {
    _lib._objc_msgSend_1(this.pointer, _lib._sel_enableMultipleThreads1);
  }

  bool get multipleThreadsEnabled {
    return _lib._objc_msgSend_12(
      this.pointer,
      _lib._sel_multipleThreadsEnabled1,
    );
  }

  void addRunLoop_(NSRunLoop runloop) {
    _lib._objc_msgSend_591(
      this.pointer,
      _lib._sel_addRunLoop_1,
      runloop.pointer,
    );
  }

  void removeRunLoop_(NSRunLoop runloop) {
    _lib._objc_msgSend_591(
      this.pointer,
      _lib._sel_removeRunLoop_1,
      runloop.pointer,
    );
  }

  void runInNewThread() {
    _lib._objc_msgSend_1(this.pointer, _lib._sel_runInNewThread1);
  }

  NSArray get remoteObjects {
    final _ret = _lib._objc_msgSend_85(this.pointer, _lib._sel_remoteObjects1);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSArray get localObjects {
    final _ret = _lib._objc_msgSend_85(this.pointer, _lib._sel_localObjects1);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  void dispatchWithComponents_(NSArray components) {
    _lib._objc_msgSend_472(
      this.pointer,
      _lib._sel_dispatchWithComponents_1,
      components.pointer,
    );
  }

  @override
  NSConnection init() {
    final _ret = _lib._objc_msgSend_2(this.pointer, _lib._sel_init1);
    return NSConnection._(_ret, _lib, retain: true, release: true);
  }

  static NSConnection new1(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSConnection1,
      _lib._sel_new1,
    );
    return NSConnection._(_ret, _lib, retain: false, release: true);
  }

  static NSConnection allocWithZone_(AVFAudio _lib, ffi.Pointer<_NSZone> zone) {
    final _ret = _lib._objc_msgSend_3(
      _lib._class_NSConnection1,
      _lib._sel_allocWithZone_1,
      zone,
    );
    return NSConnection._(_ret, _lib, retain: false, release: true);
  }

  static NSConnection alloc(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSConnection1,
      _lib._sel_alloc1,
    );
    return NSConnection._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
    AVFAudio _lib,
    NSObject aTarget,
    ffi.Pointer<objc.ObjCSelector> aSelector,
    NSObject? anArgument,
  ) {
    _lib._objc_msgSend_14(
      _lib._class_NSConnection1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
      aTarget.pointer,
      aSelector,
      anArgument?.pointer ?? ffi.nullptr,
    );
  }

  static void cancelPreviousPerformRequestsWithTarget_(
    AVFAudio _lib,
    NSObject aTarget,
  ) {
    _lib._objc_msgSend_15(
      _lib._class_NSConnection1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_1,
      aTarget.pointer,
    );
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSConnection1,
      _lib._sel_accessInstanceVariablesDirectly1,
    );
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSConnection1,
      _lib._sel_useStoredAccessor1,
    );
  }

  static NSSet keyPathsForValuesAffectingValueForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    final _ret = _lib._objc_msgSend_63(
      _lib._class_NSConnection1,
      _lib._sel_keyPathsForValuesAffectingValueForKey_1,
      key.pointer,
    );
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    return _lib._objc_msgSend_64(
      _lib._class_NSConnection1,
      _lib._sel_automaticallyNotifiesObserversForKey_1,
      key.pointer,
    );
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
    AVFAudio _lib,
    NSArray keys,
    NSString dependentKey,
  ) {
    _lib._objc_msgSend_88(
      _lib._class_NSConnection1,
      _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
      keys.pointer,
      dependentKey.pointer,
    );
  }

  static NSArray classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_85(
      _lib._class_NSConnection1,
      _lib._sel_classFallbacksForKeyedArchiver1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSConnection1,
      _lib._sel_classForKeyedUnarchiver1,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

class NSPortNameServer extends NSObject {
  NSPortNameServer._(
    ffi.Pointer<objc.ObjCObject> pointer,
    AVFAudio lib, {
    bool retain = false,
    bool release = false,
  }) : super._(pointer, lib, retain: retain, release: release);

  /// Returns a [NSPortNameServer] that points to the same underlying object as [other].
  static NSPortNameServer castFrom<T extends objc.ObjCObjectBase>(
    AVFAudio lib,
    T other,
  ) {
    return NSPortNameServer._(other.pointer, lib, retain: true, release: true);
  }

  /// Returns a [NSPortNameServer] that wraps the given raw object pointer.
  static NSPortNameServer castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCObject> other, {
    bool retain = false,
    bool release = false,
  }) {
    return NSPortNameServer._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSPortNameServer].
  static bool isInstance(AVFAudio lib, objc.ObjCObjectBase obj) {
    return lib._objc_msgSend_0(
      obj.pointer,
      lib._sel_isKindOfClass_1,
      lib._class_NSPortNameServer1,
    );
  }

  static NSPortNameServer systemDefaultPortNameServer(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_574(
      _lib._class_NSPortNameServer1,
      _lib._sel_systemDefaultPortNameServer1,
    );
    return NSPortNameServer._(_ret, _lib, retain: true, release: true);
  }

  NSPort? portForName_(NSString name) {
    final _ret = _lib._objc_msgSend_575(
      this.pointer,
      _lib._sel_portForName_1,
      name.pointer,
    );
    return _ret.address == 0
        ? null
        : NSPort._(_ret, _lib, retain: true, release: true);
  }

  NSPort? portForName_host_(NSString name, NSString? host) {
    final _ret = _lib._objc_msgSend_576(
      this.pointer,
      _lib._sel_portForName_host_1,
      name.pointer,
      host?.pointer ?? ffi.nullptr,
    );
    return _ret.address == 0
        ? null
        : NSPort._(_ret, _lib, retain: true, release: true);
  }

  bool registerPort_name_(NSPort port, NSString name) {
    return _lib._objc_msgSend_577(
      this.pointer,
      _lib._sel_registerPort_name_1,
      port.pointer,
      name.pointer,
    );
  }

  bool removePortForName_(NSString name) {
    return _lib._objc_msgSend_64(
      this.pointer,
      _lib._sel_removePortForName_1,
      name.pointer,
    );
  }

  @override
  NSPortNameServer init() {
    final _ret = _lib._objc_msgSend_2(this.pointer, _lib._sel_init1);
    return NSPortNameServer._(_ret, _lib, retain: true, release: true);
  }

  static NSPortNameServer new1(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSPortNameServer1,
      _lib._sel_new1,
    );
    return NSPortNameServer._(_ret, _lib, retain: false, release: true);
  }

  static NSPortNameServer allocWithZone_(
    AVFAudio _lib,
    ffi.Pointer<_NSZone> zone,
  ) {
    final _ret = _lib._objc_msgSend_3(
      _lib._class_NSPortNameServer1,
      _lib._sel_allocWithZone_1,
      zone,
    );
    return NSPortNameServer._(_ret, _lib, retain: false, release: true);
  }

  static NSPortNameServer alloc(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSPortNameServer1,
      _lib._sel_alloc1,
    );
    return NSPortNameServer._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
    AVFAudio _lib,
    NSObject aTarget,
    ffi.Pointer<objc.ObjCSelector> aSelector,
    NSObject? anArgument,
  ) {
    _lib._objc_msgSend_14(
      _lib._class_NSPortNameServer1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
      aTarget.pointer,
      aSelector,
      anArgument?.pointer ?? ffi.nullptr,
    );
  }

  static void cancelPreviousPerformRequestsWithTarget_(
    AVFAudio _lib,
    NSObject aTarget,
  ) {
    _lib._objc_msgSend_15(
      _lib._class_NSPortNameServer1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_1,
      aTarget.pointer,
    );
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSPortNameServer1,
      _lib._sel_accessInstanceVariablesDirectly1,
    );
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSPortNameServer1,
      _lib._sel_useStoredAccessor1,
    );
  }

  static NSSet keyPathsForValuesAffectingValueForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    final _ret = _lib._objc_msgSend_63(
      _lib._class_NSPortNameServer1,
      _lib._sel_keyPathsForValuesAffectingValueForKey_1,
      key.pointer,
    );
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    return _lib._objc_msgSend_64(
      _lib._class_NSPortNameServer1,
      _lib._sel_automaticallyNotifiesObserversForKey_1,
      key.pointer,
    );
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
    AVFAudio _lib,
    NSArray keys,
    NSString dependentKey,
  ) {
    _lib._objc_msgSend_88(
      _lib._class_NSPortNameServer1,
      _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
      keys.pointer,
      dependentKey.pointer,
    );
  }

  static NSArray classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_85(
      _lib._class_NSPortNameServer1,
      _lib._sel_classFallbacksForKeyedArchiver1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSPortNameServer1,
      _lib._sel_classForKeyedUnarchiver1,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

class NSDistantObject extends NSProxy {
  NSDistantObject._(
    ffi.Pointer<objc.ObjCObject> pointer,
    AVFAudio lib, {
    bool retain = false,
    bool release = false,
  }) : super._(pointer, lib, retain: retain, release: release);

  /// Returns a [NSDistantObject] that points to the same underlying object as [other].
  static NSDistantObject castFrom<T extends objc.ObjCObjectBase>(
    AVFAudio lib,
    T other,
  ) {
    return NSDistantObject._(other.pointer, lib, retain: true, release: true);
  }

  /// Returns a [NSDistantObject] that wraps the given raw object pointer.
  static NSDistantObject castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCObject> other, {
    bool retain = false,
    bool release = false,
  }) {
    return NSDistantObject._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSDistantObject].
  static bool isInstance(AVFAudio lib, objc.ObjCObjectBase obj) {
    return lib._objc_msgSend_0(
      obj.pointer,
      lib._sel_isKindOfClass_1,
      lib._class_NSDistantObject1,
    );
  }

  static NSObject? proxyWithTarget_connection_(
    AVFAudio _lib,
    NSObject target,
    NSConnection connection,
  ) {
    final _ret = _lib._objc_msgSend_580(
      _lib._class_NSDistantObject1,
      _lib._sel_proxyWithTarget_connection_1,
      target.pointer,
      connection.pointer,
    );
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSDistantObject? initWithTarget_connection_(
    NSObject target,
    NSConnection connection,
  ) {
    final _ret = _lib._objc_msgSend_580(
      this.pointer,
      _lib._sel_initWithTarget_connection_1,
      target.pointer,
      connection.pointer,
    );
    return _ret.address == 0
        ? null
        : NSDistantObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject proxyWithLocal_connection_(
    AVFAudio _lib,
    NSObject target,
    NSConnection connection,
  ) {
    final _ret = _lib._objc_msgSend_581(
      _lib._class_NSDistantObject1,
      _lib._sel_proxyWithLocal_connection_1,
      target.pointer,
      connection.pointer,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSDistantObject initWithLocal_connection_(
    NSObject target,
    NSConnection connection,
  ) {
    final _ret = _lib._objc_msgSend_581(
      this.pointer,
      _lib._sel_initWithLocal_connection_1,
      target.pointer,
      connection.pointer,
    );
    return NSDistantObject._(_ret, _lib, retain: true, release: true);
  }

  NSDistantObject? initWithCoder_(NSCoder inCoder) {
    final _ret = _lib._objc_msgSend_47(
      this.pointer,
      _lib._sel_initWithCoder_1,
      inCoder.pointer,
    );
    return _ret.address == 0
        ? null
        : NSDistantObject._(_ret, _lib, retain: true, release: true);
  }

  void setProtocolForProxy_(Protocol? proto) {
    _lib._objc_msgSend_582(
      this.pointer,
      _lib._sel_setProtocolForProxy_1,
      proto?.pointer ?? ffi.nullptr,
    );
  }

  NSConnection get connectionForProxy {
    final _ret = _lib._objc_msgSend_572(
      this.pointer,
      _lib._sel_connectionForProxy1,
    );
    return NSConnection._(_ret, _lib, retain: true, release: true);
  }

  static NSObject alloc(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSDistantObject1,
      _lib._sel_alloc1,
    );
    return NSObject._(_ret, _lib, retain: false, release: true);
  }

  static bool respondsToSelector_(
    AVFAudio _lib,
    ffi.Pointer<objc.ObjCSelector> aSelector,
  ) {
    return _lib._objc_msgSend_4(
      _lib._class_NSDistantObject1,
      _lib._sel_respondsToSelector_1,
      aSelector,
    );
  }
}

class NSProxy extends objc.ObjCObjectBase {
  NSProxy._(
    ffi.Pointer<objc.ObjCObject> pointer,
    this._lib, {
    bool retain = false,
    bool release = false,
  }) : super(pointer, retain: retain, release: release);

  AVFAudio _lib;

  /// Returns a [NSProxy] that points to the same underlying object as [other].
  static NSProxy castFrom<T extends objc.ObjCObjectBase>(
    AVFAudio lib,
    T other,
  ) {
    return NSProxy._(other.pointer, lib, retain: true, release: true);
  }

  /// Returns a [NSProxy] that wraps the given raw object pointer.
  static NSProxy castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCObject> other, {
    bool retain = false,
    bool release = false,
  }) {
    return NSProxy._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSProxy].
  static bool isInstance(AVFAudio lib, objc.ObjCObjectBase obj) {
    return lib._objc_msgSend_0(
      obj.pointer,
      lib._sel_isKindOfClass_1,
      lib._class_NSProxy1,
    );
  }

  static NSObject alloc(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSProxy1, _lib._sel_alloc1);
    return NSObject._(_ret, _lib, retain: false, release: true);
  }

  static NSObject allocWithZone_(AVFAudio _lib, ffi.Pointer<_NSZone> zone) {
    final _ret = _lib._objc_msgSend_3(
      _lib._class_NSProxy1,
      _lib._sel_allocWithZone_1,
      zone,
    );
    return NSObject._(_ret, _lib, retain: false, release: true);
  }

  static NSObject class1(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSProxy1, _lib._sel_class1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  void forwardInvocation_(NSInvocation invocation) {
    _lib._objc_msgSend_421(
      this.pointer,
      _lib._sel_forwardInvocation_1,
      invocation.pointer,
    );
  }

  NSMethodSignature? methodSignatureForSelector_(
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    final _ret = _lib._objc_msgSend_579(
      this.pointer,
      _lib._sel_methodSignatureForSelector_1,
      sel,
    );
    return _ret.address == 0
        ? null
        : NSMethodSignature._(_ret, _lib, retain: true, release: true);
  }

  void dealloc() {
    _lib._objc_msgSend_1(this.pointer, _lib._sel_dealloc1);
  }

  void finalize() {
    _lib._objc_msgSend_1(this.pointer, _lib._sel_finalize1);
  }

  NSString get description {
    final _ret = _lib._objc_msgSend_21(this.pointer, _lib._sel_description1);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString get debugDescription {
    final _ret = _lib._objc_msgSend_21(
      this.pointer,
      _lib._sel_debugDescription1,
    );
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  static bool respondsToSelector_(
    AVFAudio _lib,
    ffi.Pointer<objc.ObjCSelector> aSelector,
  ) {
    return _lib._objc_msgSend_4(
      _lib._class_NSProxy1,
      _lib._sel_respondsToSelector_1,
      aSelector,
    );
  }

  bool allowsWeakReference() {
    return _lib._objc_msgSend_12(this.pointer, _lib._sel_allowsWeakReference1);
  }

  bool retainWeakReference() {
    return _lib._objc_msgSend_12(this.pointer, _lib._sel_retainWeakReference1);
  }
}

class NSClassDescription extends NSObject {
  NSClassDescription._(
    ffi.Pointer<objc.ObjCObject> pointer,
    AVFAudio lib, {
    bool retain = false,
    bool release = false,
  }) : super._(pointer, lib, retain: retain, release: release);

  /// Returns a [NSClassDescription] that points to the same underlying object as [other].
  static NSClassDescription castFrom<T extends objc.ObjCObjectBase>(
    AVFAudio lib,
    T other,
  ) {
    return NSClassDescription._(
      other.pointer,
      lib,
      retain: true,
      release: true,
    );
  }

  /// Returns a [NSClassDescription] that wraps the given raw object pointer.
  static NSClassDescription castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCObject> other, {
    bool retain = false,
    bool release = false,
  }) {
    return NSClassDescription._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSClassDescription].
  static bool isInstance(AVFAudio lib, objc.ObjCObjectBase obj) {
    return lib._objc_msgSend_0(
      obj.pointer,
      lib._sel_isKindOfClass_1,
      lib._class_NSClassDescription1,
    );
  }

  static void registerClassDescription_forClass_(
    AVFAudio _lib,
    NSClassDescription description,
    NSObject aClass,
  ) {
    _lib._objc_msgSend_598(
      _lib._class_NSClassDescription1,
      _lib._sel_registerClassDescription_forClass_1,
      description.pointer,
      aClass.pointer,
    );
  }

  static void invalidateClassDescriptionCache(AVFAudio _lib) {
    _lib._objc_msgSend_1(
      _lib._class_NSClassDescription1,
      _lib._sel_invalidateClassDescriptionCache1,
    );
  }

  static NSClassDescription? classDescriptionForClass_(
    AVFAudio _lib,
    NSObject aClass,
  ) {
    final _ret = _lib._objc_msgSend_599(
      _lib._class_NSClassDescription1,
      _lib._sel_classDescriptionForClass_1,
      aClass.pointer,
    );
    return _ret.address == 0
        ? null
        : NSClassDescription._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSArray get attributeKeys {
    final _ret = _lib._objc_msgSend_85(this.pointer, _lib._sel_attributeKeys1);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSArray get toOneRelationshipKeys {
    final _ret = _lib._objc_msgSend_85(
      this.pointer,
      _lib._sel_toOneRelationshipKeys1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSArray get toManyRelationshipKeys {
    final _ret = _lib._objc_msgSend_85(
      this.pointer,
      _lib._sel_toManyRelationshipKeys1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSString? inverseForRelationshipKey_(NSString relationshipKey) {
    final _ret = _lib._objc_msgSend_186(
      this.pointer,
      _lib._sel_inverseForRelationshipKey_1,
      relationshipKey.pointer,
    );
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSClassDescription init() {
    final _ret = _lib._objc_msgSend_2(this.pointer, _lib._sel_init1);
    return NSClassDescription._(_ret, _lib, retain: true, release: true);
  }

  static NSClassDescription new1(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSClassDescription1,
      _lib._sel_new1,
    );
    return NSClassDescription._(_ret, _lib, retain: false, release: true);
  }

  static NSClassDescription allocWithZone_(
    AVFAudio _lib,
    ffi.Pointer<_NSZone> zone,
  ) {
    final _ret = _lib._objc_msgSend_3(
      _lib._class_NSClassDescription1,
      _lib._sel_allocWithZone_1,
      zone,
    );
    return NSClassDescription._(_ret, _lib, retain: false, release: true);
  }

  static NSClassDescription alloc(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSClassDescription1,
      _lib._sel_alloc1,
    );
    return NSClassDescription._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
    AVFAudio _lib,
    NSObject aTarget,
    ffi.Pointer<objc.ObjCSelector> aSelector,
    NSObject? anArgument,
  ) {
    _lib._objc_msgSend_14(
      _lib._class_NSClassDescription1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
      aTarget.pointer,
      aSelector,
      anArgument?.pointer ?? ffi.nullptr,
    );
  }

  static void cancelPreviousPerformRequestsWithTarget_(
    AVFAudio _lib,
    NSObject aTarget,
  ) {
    _lib._objc_msgSend_15(
      _lib._class_NSClassDescription1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_1,
      aTarget.pointer,
    );
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSClassDescription1,
      _lib._sel_accessInstanceVariablesDirectly1,
    );
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSClassDescription1,
      _lib._sel_useStoredAccessor1,
    );
  }

  static NSSet keyPathsForValuesAffectingValueForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    final _ret = _lib._objc_msgSend_63(
      _lib._class_NSClassDescription1,
      _lib._sel_keyPathsForValuesAffectingValueForKey_1,
      key.pointer,
    );
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    return _lib._objc_msgSend_64(
      _lib._class_NSClassDescription1,
      _lib._sel_automaticallyNotifiesObserversForKey_1,
      key.pointer,
    );
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
    AVFAudio _lib,
    NSArray keys,
    NSString dependentKey,
  ) {
    _lib._objc_msgSend_88(
      _lib._class_NSClassDescription1,
      _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
      keys.pointer,
      dependentKey.pointer,
    );
  }

  static NSArray classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_85(
      _lib._class_NSClassDescription1,
      _lib._sel_classFallbacksForKeyedArchiver1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSClassDescription1,
      _lib._sel_classForKeyedUnarchiver1,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

class NSScriptObjectSpecifier extends NSObject {
  NSScriptObjectSpecifier._(
    ffi.Pointer<objc.ObjCObject> pointer,
    AVFAudio lib, {
    bool retain = false,
    bool release = false,
  }) : super._(pointer, lib, retain: retain, release: release);

  /// Returns a [NSScriptObjectSpecifier] that points to the same underlying object as [other].
  static NSScriptObjectSpecifier castFrom<T extends objc.ObjCObjectBase>(
    AVFAudio lib,
    T other,
  ) {
    return NSScriptObjectSpecifier._(
      other.pointer,
      lib,
      retain: true,
      release: true,
    );
  }

  /// Returns a [NSScriptObjectSpecifier] that wraps the given raw object pointer.
  static NSScriptObjectSpecifier castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCObject> other, {
    bool retain = false,
    bool release = false,
  }) {
    return NSScriptObjectSpecifier._(
      other,
      lib,
      retain: retain,
      release: release,
    );
  }

  /// Returns whether [obj] is an instance of [NSScriptObjectSpecifier].
  static bool isInstance(AVFAudio lib, objc.ObjCObjectBase obj) {
    return lib._objc_msgSend_0(
      obj.pointer,
      lib._sel_isKindOfClass_1,
      lib._class_NSScriptObjectSpecifier1,
    );
  }

  static NSScriptObjectSpecifier? objectSpecifierWithDescriptor_(
    AVFAudio _lib,
    NSAppleEventDescriptor descriptor,
  ) {
    final _ret = _lib._objc_msgSend_624(
      _lib._class_NSScriptObjectSpecifier1,
      _lib._sel_objectSpecifierWithDescriptor_1,
      descriptor.pointer,
    );
    return _ret.address == 0
        ? null
        : NSScriptObjectSpecifier._(_ret, _lib, retain: true, release: true);
  }

  NSScriptObjectSpecifier initWithContainerSpecifier_key_(
    NSScriptObjectSpecifier container,
    NSString property,
  ) {
    final _ret = _lib._objc_msgSend_625(
      this.pointer,
      _lib._sel_initWithContainerSpecifier_key_1,
      container.pointer,
      property.pointer,
    );
    return NSScriptObjectSpecifier._(_ret, _lib, retain: true, release: true);
  }

  NSScriptObjectSpecifier
  initWithContainerClassDescription_containerSpecifier_key_(
    NSScriptClassDescription classDesc,
    NSScriptObjectSpecifier? container,
    NSString property,
  ) {
    final _ret = _lib._objc_msgSend_645(
      this.pointer,
      _lib._sel_initWithContainerClassDescription_containerSpecifier_key_1,
      classDesc.pointer,
      container?.pointer ?? ffi.nullptr,
      property.pointer,
    );
    return NSScriptObjectSpecifier._(_ret, _lib, retain: true, release: true);
  }

  NSScriptObjectSpecifier? initWithCoder_(NSCoder inCoder) {
    final _ret = _lib._objc_msgSend_47(
      this.pointer,
      _lib._sel_initWithCoder_1,
      inCoder.pointer,
    );
    return _ret.address == 0
        ? null
        : NSScriptObjectSpecifier._(_ret, _lib, retain: true, release: true);
  }

  NSScriptObjectSpecifier? get childSpecifier {
    final _ret = _lib._objc_msgSend_632(
      this.pointer,
      _lib._sel_childSpecifier1,
    );
    return _ret.address == 0
        ? null
        : NSScriptObjectSpecifier._(_ret, _lib, retain: true, release: true);
  }

  set childSpecifier(NSScriptObjectSpecifier? value) {
    return _lib._objc_msgSend_633(
      this.pointer,
      _lib._sel_setChildSpecifier_1,
      value?.pointer ?? ffi.nullptr,
    );
  }

  NSScriptObjectSpecifier? get containerSpecifier {
    final _ret = _lib._objc_msgSend_632(
      this.pointer,
      _lib._sel_containerSpecifier1,
    );
    return _ret.address == 0
        ? null
        : NSScriptObjectSpecifier._(_ret, _lib, retain: true, release: true);
  }

  set containerSpecifier(NSScriptObjectSpecifier? value) {
    return _lib._objc_msgSend_633(
      this.pointer,
      _lib._sel_setContainerSpecifier_1,
      value?.pointer ?? ffi.nullptr,
    );
  }

  bool get containerIsObjectBeingTested {
    return _lib._objc_msgSend_12(
      this.pointer,
      _lib._sel_containerIsObjectBeingTested1,
    );
  }

  set containerIsObjectBeingTested(bool value) {
    return _lib._objc_msgSend_527(
      this.pointer,
      _lib._sel_setContainerIsObjectBeingTested_1,
      value,
    );
  }

  bool get containerIsRangeContainerObject {
    return _lib._objc_msgSend_12(
      this.pointer,
      _lib._sel_containerIsRangeContainerObject1,
    );
  }

  set containerIsRangeContainerObject(bool value) {
    return _lib._objc_msgSend_527(
      this.pointer,
      _lib._sel_setContainerIsRangeContainerObject_1,
      value,
    );
  }

  NSString get key {
    final _ret = _lib._objc_msgSend_21(this.pointer, _lib._sel_key1);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  set key(NSString value) {
    return _lib._objc_msgSend_646(
      this.pointer,
      _lib._sel_setKey_1,
      value.pointer,
    );
  }

  NSScriptClassDescription? get containerClassDescription {
    final _ret = _lib._objc_msgSend_628(
      this.pointer,
      _lib._sel_containerClassDescription1,
    );
    return _ret.address == 0
        ? null
        : NSScriptClassDescription._(_ret, _lib, retain: true, release: true);
  }

  set containerClassDescription(NSScriptClassDescription? value) {
    return _lib._objc_msgSend_647(
      this.pointer,
      _lib._sel_setContainerClassDescription_1,
      value?.pointer ?? ffi.nullptr,
    );
  }

  NSScriptClassDescription? get keyClassDescription {
    final _ret = _lib._objc_msgSend_628(
      this.pointer,
      _lib._sel_keyClassDescription1,
    );
    return _ret.address == 0
        ? null
        : NSScriptClassDescription._(_ret, _lib, retain: true, release: true);
  }

  ffi.Pointer<ffi.Long> indicesOfObjectsByEvaluatingWithContainer_count_(
    NSObject container,
    ffi.Pointer<ffi.Long> count,
  ) {
    return _lib._objc_msgSend_648(
      this.pointer,
      _lib._sel_indicesOfObjectsByEvaluatingWithContainer_count_1,
      container.pointer,
      count,
    );
  }

  NSObject? objectsByEvaluatingWithContainers_(NSObject containers) {
    final _ret = _lib._objc_msgSend_16(
      this.pointer,
      _lib._sel_objectsByEvaluatingWithContainers_1,
      containers.pointer,
    );
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get objectsByEvaluatingSpecifier {
    final _ret = _lib._objc_msgSend_17(
      this.pointer,
      _lib._sel_objectsByEvaluatingSpecifier1,
    );
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  int get evaluationErrorNumber {
    return _lib._objc_msgSend_83(
      this.pointer,
      _lib._sel_evaluationErrorNumber1,
    );
  }

  set evaluationErrorNumber(int value) {
    return _lib._objc_msgSend_635(
      this.pointer,
      _lib._sel_setEvaluationErrorNumber_1,
      value,
    );
  }

  NSScriptObjectSpecifier? get evaluationErrorSpecifier {
    final _ret = _lib._objc_msgSend_632(
      this.pointer,
      _lib._sel_evaluationErrorSpecifier1,
    );
    return _ret.address == 0
        ? null
        : NSScriptObjectSpecifier._(_ret, _lib, retain: true, release: true);
  }

  NSAppleEventDescriptor? get descriptor {
    final _ret = _lib._objc_msgSend_636(this.pointer, _lib._sel_descriptor1);
    return _ret.address == 0
        ? null
        : NSAppleEventDescriptor._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSScriptObjectSpecifier init() {
    final _ret = _lib._objc_msgSend_2(this.pointer, _lib._sel_init1);
    return NSScriptObjectSpecifier._(_ret, _lib, retain: true, release: true);
  }

  static NSScriptObjectSpecifier new1(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSScriptObjectSpecifier1,
      _lib._sel_new1,
    );
    return NSScriptObjectSpecifier._(_ret, _lib, retain: false, release: true);
  }

  static NSScriptObjectSpecifier allocWithZone_(
    AVFAudio _lib,
    ffi.Pointer<_NSZone> zone,
  ) {
    final _ret = _lib._objc_msgSend_3(
      _lib._class_NSScriptObjectSpecifier1,
      _lib._sel_allocWithZone_1,
      zone,
    );
    return NSScriptObjectSpecifier._(_ret, _lib, retain: false, release: true);
  }

  static NSScriptObjectSpecifier alloc(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSScriptObjectSpecifier1,
      _lib._sel_alloc1,
    );
    return NSScriptObjectSpecifier._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
    AVFAudio _lib,
    NSObject aTarget,
    ffi.Pointer<objc.ObjCSelector> aSelector,
    NSObject? anArgument,
  ) {
    _lib._objc_msgSend_14(
      _lib._class_NSScriptObjectSpecifier1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
      aTarget.pointer,
      aSelector,
      anArgument?.pointer ?? ffi.nullptr,
    );
  }

  static void cancelPreviousPerformRequestsWithTarget_(
    AVFAudio _lib,
    NSObject aTarget,
  ) {
    _lib._objc_msgSend_15(
      _lib._class_NSScriptObjectSpecifier1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_1,
      aTarget.pointer,
    );
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSScriptObjectSpecifier1,
      _lib._sel_accessInstanceVariablesDirectly1,
    );
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSScriptObjectSpecifier1,
      _lib._sel_useStoredAccessor1,
    );
  }

  static NSSet keyPathsForValuesAffectingValueForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    final _ret = _lib._objc_msgSend_63(
      _lib._class_NSScriptObjectSpecifier1,
      _lib._sel_keyPathsForValuesAffectingValueForKey_1,
      key.pointer,
    );
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    return _lib._objc_msgSend_64(
      _lib._class_NSScriptObjectSpecifier1,
      _lib._sel_automaticallyNotifiesObserversForKey_1,
      key.pointer,
    );
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
    AVFAudio _lib,
    NSArray keys,
    NSString dependentKey,
  ) {
    _lib._objc_msgSend_88(
      _lib._class_NSScriptObjectSpecifier1,
      _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
      keys.pointer,
      dependentKey.pointer,
    );
  }

  static NSArray classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_85(
      _lib._class_NSScriptObjectSpecifier1,
      _lib._sel_classFallbacksForKeyedArchiver1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSScriptObjectSpecifier1,
      _lib._sel_classForKeyedUnarchiver1,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

class NSAppleEventDescriptor extends NSObject {
  NSAppleEventDescriptor._(
    ffi.Pointer<objc.ObjCObject> pointer,
    AVFAudio lib, {
    bool retain = false,
    bool release = false,
  }) : super._(pointer, lib, retain: retain, release: release);

  /// Returns a [NSAppleEventDescriptor] that points to the same underlying object as [other].
  static NSAppleEventDescriptor castFrom<T extends objc.ObjCObjectBase>(
    AVFAudio lib,
    T other,
  ) {
    return NSAppleEventDescriptor._(
      other.pointer,
      lib,
      retain: true,
      release: true,
    );
  }

  /// Returns a [NSAppleEventDescriptor] that wraps the given raw object pointer.
  static NSAppleEventDescriptor castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCObject> other, {
    bool retain = false,
    bool release = false,
  }) {
    return NSAppleEventDescriptor._(
      other,
      lib,
      retain: retain,
      release: release,
    );
  }

  /// Returns whether [obj] is an instance of [NSAppleEventDescriptor].
  static bool isInstance(AVFAudio lib, objc.ObjCObjectBase obj) {
    return lib._objc_msgSend_0(
      obj.pointer,
      lib._sel_isKindOfClass_1,
      lib._class_NSAppleEventDescriptor1,
    );
  }

  static NSAppleEventDescriptor nullDescriptor(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_601(
      _lib._class_NSAppleEventDescriptor1,
      _lib._sel_nullDescriptor1,
    );
    return NSAppleEventDescriptor._(_ret, _lib, retain: true, release: true);
  }

  static NSAppleEventDescriptor? descriptorWithDescriptorType_bytes_length_(
    AVFAudio _lib,
    int descriptorType,
    ffi.Pointer<ffi.Void> bytes,
    int byteCount,
  ) {
    final _ret = _lib._objc_msgSend_602(
      _lib._class_NSAppleEventDescriptor1,
      _lib._sel_descriptorWithDescriptorType_bytes_length_1,
      descriptorType,
      bytes,
      byteCount,
    );
    return _ret.address == 0
        ? null
        : NSAppleEventDescriptor._(_ret, _lib, retain: true, release: true);
  }

  static NSAppleEventDescriptor? descriptorWithDescriptorType_data_(
    AVFAudio _lib,
    int descriptorType,
    NSData? data,
  ) {
    final _ret = _lib._objc_msgSend_603(
      _lib._class_NSAppleEventDescriptor1,
      _lib._sel_descriptorWithDescriptorType_data_1,
      descriptorType,
      data?.pointer ?? ffi.nullptr,
    );
    return _ret.address == 0
        ? null
        : NSAppleEventDescriptor._(_ret, _lib, retain: true, release: true);
  }

  static NSAppleEventDescriptor descriptorWithBoolean_(
    AVFAudio _lib,
    int boolean,
  ) {
    final _ret = _lib._objc_msgSend_604(
      _lib._class_NSAppleEventDescriptor1,
      _lib._sel_descriptorWithBoolean_1,
      boolean,
    );
    return NSAppleEventDescriptor._(_ret, _lib, retain: true, release: true);
  }

  static NSAppleEventDescriptor descriptorWithEnumCode_(
    AVFAudio _lib,
    int enumerator,
  ) {
    final _ret = _lib._objc_msgSend_605(
      _lib._class_NSAppleEventDescriptor1,
      _lib._sel_descriptorWithEnumCode_1,
      enumerator,
    );
    return NSAppleEventDescriptor._(_ret, _lib, retain: true, release: true);
  }

  static NSAppleEventDescriptor descriptorWithInt32_(
    AVFAudio _lib,
    int signedInt,
  ) {
    final _ret = _lib._objc_msgSend_606(
      _lib._class_NSAppleEventDescriptor1,
      _lib._sel_descriptorWithInt32_1,
      signedInt,
    );
    return NSAppleEventDescriptor._(_ret, _lib, retain: true, release: true);
  }

  static NSAppleEventDescriptor descriptorWithDouble_(
    AVFAudio _lib,
    double doubleValue,
  ) {
    final _ret = _lib._objc_msgSend_607(
      _lib._class_NSAppleEventDescriptor1,
      _lib._sel_descriptorWithDouble_1,
      doubleValue,
    );
    return NSAppleEventDescriptor._(_ret, _lib, retain: true, release: true);
  }

  static NSAppleEventDescriptor descriptorWithTypeCode_(
    AVFAudio _lib,
    int typeCode,
  ) {
    final _ret = _lib._objc_msgSend_605(
      _lib._class_NSAppleEventDescriptor1,
      _lib._sel_descriptorWithTypeCode_1,
      typeCode,
    );
    return NSAppleEventDescriptor._(_ret, _lib, retain: true, release: true);
  }

  static NSAppleEventDescriptor descriptorWithString_(
    AVFAudio _lib,
    NSString string,
  ) {
    final _ret = _lib._objc_msgSend_608(
      _lib._class_NSAppleEventDescriptor1,
      _lib._sel_descriptorWithString_1,
      string.pointer,
    );
    return NSAppleEventDescriptor._(_ret, _lib, retain: true, release: true);
  }

  static NSAppleEventDescriptor descriptorWithDate_(
    AVFAudio _lib,
    NSDate date,
  ) {
    final _ret = _lib._objc_msgSend_609(
      _lib._class_NSAppleEventDescriptor1,
      _lib._sel_descriptorWithDate_1,
      date.pointer,
    );
    return NSAppleEventDescriptor._(_ret, _lib, retain: true, release: true);
  }

  static NSAppleEventDescriptor descriptorWithFileURL_(
    AVFAudio _lib,
    NSURL fileURL,
  ) {
    final _ret = _lib._objc_msgSend_610(
      _lib._class_NSAppleEventDescriptor1,
      _lib._sel_descriptorWithFileURL_1,
      fileURL.pointer,
    );
    return NSAppleEventDescriptor._(_ret, _lib, retain: true, release: true);
  }

  static NSAppleEventDescriptor
  appleEventWithEventClass_eventID_targetDescriptor_returnID_transactionID_(
    AVFAudio _lib,
    int eventClass,
    int eventID,
    NSAppleEventDescriptor? targetDescriptor,
    int returnID,
    int transactionID,
  ) {
    final _ret = _lib._objc_msgSend_611(
      _lib._class_NSAppleEventDescriptor1,
      _lib._sel_appleEventWithEventClass_eventID_targetDescriptor_returnID_transactionID_1,
      eventClass,
      eventID,
      targetDescriptor?.pointer ?? ffi.nullptr,
      returnID,
      transactionID,
    );
    return NSAppleEventDescriptor._(_ret, _lib, retain: true, release: true);
  }

  static NSAppleEventDescriptor listDescriptor(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_601(
      _lib._class_NSAppleEventDescriptor1,
      _lib._sel_listDescriptor1,
    );
    return NSAppleEventDescriptor._(_ret, _lib, retain: true, release: true);
  }

  static NSAppleEventDescriptor recordDescriptor(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_601(
      _lib._class_NSAppleEventDescriptor1,
      _lib._sel_recordDescriptor1,
    );
    return NSAppleEventDescriptor._(_ret, _lib, retain: true, release: true);
  }

  static NSAppleEventDescriptor currentProcessDescriptor(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_601(
      _lib._class_NSAppleEventDescriptor1,
      _lib._sel_currentProcessDescriptor1,
    );
    return NSAppleEventDescriptor._(_ret, _lib, retain: true, release: true);
  }

  static NSAppleEventDescriptor descriptorWithProcessIdentifier_(
    AVFAudio _lib,
    int processIdentifier,
  ) {
    final _ret = _lib._objc_msgSend_606(
      _lib._class_NSAppleEventDescriptor1,
      _lib._sel_descriptorWithProcessIdentifier_1,
      processIdentifier,
    );
    return NSAppleEventDescriptor._(_ret, _lib, retain: true, release: true);
  }

  static NSAppleEventDescriptor descriptorWithBundleIdentifier_(
    AVFAudio _lib,
    NSString bundleIdentifier,
  ) {
    final _ret = _lib._objc_msgSend_608(
      _lib._class_NSAppleEventDescriptor1,
      _lib._sel_descriptorWithBundleIdentifier_1,
      bundleIdentifier.pointer,
    );
    return NSAppleEventDescriptor._(_ret, _lib, retain: true, release: true);
  }

  static NSAppleEventDescriptor descriptorWithApplicationURL_(
    AVFAudio _lib,
    NSURL applicationURL,
  ) {
    final _ret = _lib._objc_msgSend_610(
      _lib._class_NSAppleEventDescriptor1,
      _lib._sel_descriptorWithApplicationURL_1,
      applicationURL.pointer,
    );
    return NSAppleEventDescriptor._(_ret, _lib, retain: true, release: true);
  }

  NSAppleEventDescriptor initWithAEDescNoCopy_(ffi.Pointer<AEDesc> aeDesc) {
    final _ret = _lib._objc_msgSend_612(
      this.pointer,
      _lib._sel_initWithAEDescNoCopy_1,
      aeDesc,
    );
    return NSAppleEventDescriptor._(_ret, _lib, retain: false, release: true);
  }

  NSAppleEventDescriptor? initWithDescriptorType_bytes_length_(
    int descriptorType,
    ffi.Pointer<ffi.Void> bytes,
    int byteCount,
  ) {
    final _ret = _lib._objc_msgSend_613(
      this.pointer,
      _lib._sel_initWithDescriptorType_bytes_length_1,
      descriptorType,
      bytes,
      byteCount,
    );
    return _ret.address == 0
        ? null
        : NSAppleEventDescriptor._(_ret, _lib, retain: true, release: true);
  }

  NSAppleEventDescriptor? initWithDescriptorType_data_(
    int descriptorType,
    NSData? data,
  ) {
    final _ret = _lib._objc_msgSend_614(
      this.pointer,
      _lib._sel_initWithDescriptorType_data_1,
      descriptorType,
      data?.pointer ?? ffi.nullptr,
    );
    return _ret.address == 0
        ? null
        : NSAppleEventDescriptor._(_ret, _lib, retain: true, release: true);
  }

  NSAppleEventDescriptor
  initWithEventClass_eventID_targetDescriptor_returnID_transactionID_(
    int eventClass,
    int eventID,
    NSAppleEventDescriptor? targetDescriptor,
    int returnID,
    int transactionID,
  ) {
    final _ret = _lib._objc_msgSend_615(
      this.pointer,
      _lib._sel_initWithEventClass_eventID_targetDescriptor_returnID_transactionID_1,
      eventClass,
      eventID,
      targetDescriptor?.pointer ?? ffi.nullptr,
      returnID,
      transactionID,
    );
    return NSAppleEventDescriptor._(_ret, _lib, retain: true, release: true);
  }

  NSAppleEventDescriptor initListDescriptor() {
    final _ret = _lib._objc_msgSend_2(
      this.pointer,
      _lib._sel_initListDescriptor1,
    );
    return NSAppleEventDescriptor._(_ret, _lib, retain: true, release: true);
  }

  NSAppleEventDescriptor initRecordDescriptor() {
    final _ret = _lib._objc_msgSend_2(
      this.pointer,
      _lib._sel_initRecordDescriptor1,
    );
    return NSAppleEventDescriptor._(_ret, _lib, retain: true, release: true);
  }

  ffi.Pointer<AEDesc> get aeDesc {
    return _lib._objc_msgSend_616(this.pointer, _lib._sel_aeDesc1);
  }

  int get descriptorType {
    return _lib._objc_msgSend_214(this.pointer, _lib._sel_descriptorType1);
  }

  NSData get data {
    final _ret = _lib._objc_msgSend_43(this.pointer, _lib._sel_data1);
    return NSData._(_ret, _lib, retain: true, release: true);
  }

  int get booleanValue {
    return _lib._objc_msgSend_234(this.pointer, _lib._sel_booleanValue1);
  }

  int get enumCodeValue {
    return _lib._objc_msgSend_214(this.pointer, _lib._sel_enumCodeValue1);
  }

  int get int32Value {
    return _lib._objc_msgSend_237(this.pointer, _lib._sel_int32Value1);
  }

  double get doubleValue {
    return objc.useMsgSendVariants
        ? _lib._objc_msgSend_165_fpret(this.pointer, _lib._sel_doubleValue1)
        : _lib._objc_msgSend_165(this.pointer, _lib._sel_doubleValue1);
  }

  int get typeCodeValue {
    return _lib._objc_msgSend_214(this.pointer, _lib._sel_typeCodeValue1);
  }

  NSString? get stringValue {
    final _ret = _lib._objc_msgSend_44(this.pointer, _lib._sel_stringValue1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSDate? get dateValue {
    final _ret = _lib._objc_msgSend_183(this.pointer, _lib._sel_dateValue1);
    return _ret.address == 0
        ? null
        : NSDate._(_ret, _lib, retain: true, release: true);
  }

  NSURL? get fileURLValue {
    final _ret = _lib._objc_msgSend_45(this.pointer, _lib._sel_fileURLValue1);
    return _ret.address == 0
        ? null
        : NSURL._(_ret, _lib, retain: true, release: true);
  }

  int get eventClass {
    return _lib._objc_msgSend_214(this.pointer, _lib._sel_eventClass1);
  }

  int get eventID {
    return _lib._objc_msgSend_214(this.pointer, _lib._sel_eventID1);
  }

  int get returnID {
    return _lib._objc_msgSend_235(this.pointer, _lib._sel_returnID1);
  }

  int get transactionID {
    return _lib._objc_msgSend_237(this.pointer, _lib._sel_transactionID1);
  }

  void setParamDescriptor_forKeyword_(
    NSAppleEventDescriptor descriptor,
    int keyword,
  ) {
    _lib._objc_msgSend_617(
      this.pointer,
      _lib._sel_setParamDescriptor_forKeyword_1,
      descriptor.pointer,
      keyword,
    );
  }

  NSAppleEventDescriptor? paramDescriptorForKeyword_(int keyword) {
    final _ret = _lib._objc_msgSend_618(
      this.pointer,
      _lib._sel_paramDescriptorForKeyword_1,
      keyword,
    );
    return _ret.address == 0
        ? null
        : NSAppleEventDescriptor._(_ret, _lib, retain: true, release: true);
  }

  void removeParamDescriptorWithKeyword_(int keyword) {
    _lib._objc_msgSend_619(
      this.pointer,
      _lib._sel_removeParamDescriptorWithKeyword_1,
      keyword,
    );
  }

  void setAttributeDescriptor_forKeyword_(
    NSAppleEventDescriptor descriptor,
    int keyword,
  ) {
    _lib._objc_msgSend_617(
      this.pointer,
      _lib._sel_setAttributeDescriptor_forKeyword_1,
      descriptor.pointer,
      keyword,
    );
  }

  NSAppleEventDescriptor? attributeDescriptorForKeyword_(int keyword) {
    final _ret = _lib._objc_msgSend_618(
      this.pointer,
      _lib._sel_attributeDescriptorForKeyword_1,
      keyword,
    );
    return _ret.address == 0
        ? null
        : NSAppleEventDescriptor._(_ret, _lib, retain: true, release: true);
  }

  NSAppleEventDescriptor? sendEventWithOptions_timeout_error_(
    int sendOptions,
    double timeoutInSeconds,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    final _ret = _lib._objc_msgSend_620(
      this.pointer,
      _lib._sel_sendEventWithOptions_timeout_error_1,
      sendOptions,
      timeoutInSeconds,
      error,
    );
    return _ret.address == 0
        ? null
        : NSAppleEventDescriptor._(_ret, _lib, retain: true, release: true);
  }

  bool get isRecordDescriptor {
    return _lib._objc_msgSend_12(this.pointer, _lib._sel_isRecordDescriptor1);
  }

  int get numberOfItems {
    return _lib._objc_msgSend_83(this.pointer, _lib._sel_numberOfItems1);
  }

  void insertDescriptor_atIndex_(NSAppleEventDescriptor descriptor, int index) {
    _lib._objc_msgSend_621(
      this.pointer,
      _lib._sel_insertDescriptor_atIndex_1,
      descriptor.pointer,
      index,
    );
  }

  NSAppleEventDescriptor? descriptorAtIndex_(int index) {
    final _ret = _lib._objc_msgSend_622(
      this.pointer,
      _lib._sel_descriptorAtIndex_1,
      index,
    );
    return _ret.address == 0
        ? null
        : NSAppleEventDescriptor._(_ret, _lib, retain: true, release: true);
  }

  void removeDescriptorAtIndex_(int index) {
    _lib._objc_msgSend_423(
      this.pointer,
      _lib._sel_removeDescriptorAtIndex_1,
      index,
    );
  }

  void setDescriptor_forKeyword_(
    NSAppleEventDescriptor descriptor,
    int keyword,
  ) {
    _lib._objc_msgSend_617(
      this.pointer,
      _lib._sel_setDescriptor_forKeyword_1,
      descriptor.pointer,
      keyword,
    );
  }

  NSAppleEventDescriptor? descriptorForKeyword_(int keyword) {
    final _ret = _lib._objc_msgSend_618(
      this.pointer,
      _lib._sel_descriptorForKeyword_1,
      keyword,
    );
    return _ret.address == 0
        ? null
        : NSAppleEventDescriptor._(_ret, _lib, retain: true, release: true);
  }

  void removeDescriptorWithKeyword_(int keyword) {
    _lib._objc_msgSend_619(
      this.pointer,
      _lib._sel_removeDescriptorWithKeyword_1,
      keyword,
    );
  }

  int keywordForDescriptorAtIndex_(int index) {
    return _lib._objc_msgSend_623(
      this.pointer,
      _lib._sel_keywordForDescriptorAtIndex_1,
      index,
    );
  }

  NSAppleEventDescriptor? coerceToDescriptorType_(int descriptorType) {
    final _ret = _lib._objc_msgSend_618(
      this.pointer,
      _lib._sel_coerceToDescriptorType_1,
      descriptorType,
    );
    return _ret.address == 0
        ? null
        : NSAppleEventDescriptor._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSAppleEventDescriptor init() {
    final _ret = _lib._objc_msgSend_2(this.pointer, _lib._sel_init1);
    return NSAppleEventDescriptor._(_ret, _lib, retain: true, release: true);
  }

  static NSAppleEventDescriptor new1(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSAppleEventDescriptor1,
      _lib._sel_new1,
    );
    return NSAppleEventDescriptor._(_ret, _lib, retain: false, release: true);
  }

  static NSAppleEventDescriptor allocWithZone_(
    AVFAudio _lib,
    ffi.Pointer<_NSZone> zone,
  ) {
    final _ret = _lib._objc_msgSend_3(
      _lib._class_NSAppleEventDescriptor1,
      _lib._sel_allocWithZone_1,
      zone,
    );
    return NSAppleEventDescriptor._(_ret, _lib, retain: false, release: true);
  }

  static NSAppleEventDescriptor alloc(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSAppleEventDescriptor1,
      _lib._sel_alloc1,
    );
    return NSAppleEventDescriptor._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
    AVFAudio _lib,
    NSObject aTarget,
    ffi.Pointer<objc.ObjCSelector> aSelector,
    NSObject? anArgument,
  ) {
    _lib._objc_msgSend_14(
      _lib._class_NSAppleEventDescriptor1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
      aTarget.pointer,
      aSelector,
      anArgument?.pointer ?? ffi.nullptr,
    );
  }

  static void cancelPreviousPerformRequestsWithTarget_(
    AVFAudio _lib,
    NSObject aTarget,
  ) {
    _lib._objc_msgSend_15(
      _lib._class_NSAppleEventDescriptor1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_1,
      aTarget.pointer,
    );
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSAppleEventDescriptor1,
      _lib._sel_accessInstanceVariablesDirectly1,
    );
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSAppleEventDescriptor1,
      _lib._sel_useStoredAccessor1,
    );
  }

  static NSSet keyPathsForValuesAffectingValueForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    final _ret = _lib._objc_msgSend_63(
      _lib._class_NSAppleEventDescriptor1,
      _lib._sel_keyPathsForValuesAffectingValueForKey_1,
      key.pointer,
    );
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    return _lib._objc_msgSend_64(
      _lib._class_NSAppleEventDescriptor1,
      _lib._sel_automaticallyNotifiesObserversForKey_1,
      key.pointer,
    );
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
    AVFAudio _lib,
    NSArray keys,
    NSString dependentKey,
  ) {
    _lib._objc_msgSend_88(
      _lib._class_NSAppleEventDescriptor1,
      _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
      keys.pointer,
      dependentKey.pointer,
    );
  }

  static NSArray classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_85(
      _lib._class_NSAppleEventDescriptor1,
      _lib._sel_classFallbacksForKeyedArchiver1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSAppleEventDescriptor1,
      _lib._sel_classForKeyedUnarchiver1,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

@ffi.Packed(2)
final class AEDesc extends ffi.Struct {
  @ffi.UnsignedInt()
  external int descriptorType;

  external ffi.Pointer<ffi.Pointer<OpaqueAEDataStorageType>> dataHandle;
}

final class OpaqueAEDataStorageType extends ffi.Opaque {}

abstract class NSAppleEventSendOptions {
  static const int NSAppleEventSendNoReply = 1;
  static const int NSAppleEventSendQueueReply = 2;
  static const int NSAppleEventSendWaitForReply = 3;
  static const int NSAppleEventSendNeverInteract = 16;
  static const int NSAppleEventSendCanInteract = 32;
  static const int NSAppleEventSendAlwaysInteract = 48;
  static const int NSAppleEventSendCanSwitchLayer = 64;
  static const int NSAppleEventSendDontRecord = 4096;
  static const int NSAppleEventSendDontExecute = 8192;
  static const int NSAppleEventSendDontAnnotate = 65536;
  static const int NSAppleEventSendDefaultOptions = 35;
}

class NSScriptClassDescription extends NSClassDescription {
  NSScriptClassDescription._(
    ffi.Pointer<objc.ObjCObject> pointer,
    AVFAudio lib, {
    bool retain = false,
    bool release = false,
  }) : super._(pointer, lib, retain: retain, release: release);

  /// Returns a [NSScriptClassDescription] that points to the same underlying object as [other].
  static NSScriptClassDescription castFrom<T extends objc.ObjCObjectBase>(
    AVFAudio lib,
    T other,
  ) {
    return NSScriptClassDescription._(
      other.pointer,
      lib,
      retain: true,
      release: true,
    );
  }

  /// Returns a [NSScriptClassDescription] that wraps the given raw object pointer.
  static NSScriptClassDescription castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCObject> other, {
    bool retain = false,
    bool release = false,
  }) {
    return NSScriptClassDescription._(
      other,
      lib,
      retain: retain,
      release: release,
    );
  }

  /// Returns whether [obj] is an instance of [NSScriptClassDescription].
  static bool isInstance(AVFAudio lib, objc.ObjCObjectBase obj) {
    return lib._objc_msgSend_0(
      obj.pointer,
      lib._sel_isKindOfClass_1,
      lib._class_NSScriptClassDescription1,
    );
  }

  static NSScriptClassDescription? classDescriptionForClass_(
    AVFAudio _lib,
    NSObject aClass,
  ) {
    final _ret = _lib._objc_msgSend_626(
      _lib._class_NSScriptClassDescription1,
      _lib._sel_classDescriptionForClass_1,
      aClass.pointer,
    );
    return _ret.address == 0
        ? null
        : NSScriptClassDescription._(_ret, _lib, retain: true, release: true);
  }

  NSScriptClassDescription? initWithSuiteName_className_dictionary_(
    NSString suiteName,
    NSString className,
    NSDictionary? classDeclaration,
  ) {
    final _ret = _lib._objc_msgSend_627(
      this.pointer,
      _lib._sel_initWithSuiteName_className_dictionary_1,
      suiteName.pointer,
      className.pointer,
      classDeclaration?.pointer ?? ffi.nullptr,
    );
    return _ret.address == 0
        ? null
        : NSScriptClassDescription._(_ret, _lib, retain: true, release: true);
  }

  NSString? get suiteName {
    final _ret = _lib._objc_msgSend_44(this.pointer, _lib._sel_suiteName1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString? get className {
    final _ret = _lib._objc_msgSend_44(this.pointer, _lib._sel_className1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString? get implementationClassName {
    final _ret = _lib._objc_msgSend_44(
      this.pointer,
      _lib._sel_implementationClassName1,
    );
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSScriptClassDescription? get superclassDescription {
    final _ret = _lib._objc_msgSend_628(
      this.pointer,
      _lib._sel_superclassDescription1,
    );
    return _ret.address == 0
        ? null
        : NSScriptClassDescription._(_ret, _lib, retain: true, release: true);
  }

  int get appleEventCode {
    return _lib._objc_msgSend_214(this.pointer, _lib._sel_appleEventCode1);
  }

  bool matchesAppleEventCode_(int appleEventCode) {
    return _lib._objc_msgSend_194(
      this.pointer,
      _lib._sel_matchesAppleEventCode_1,
      appleEventCode,
    );
  }

  bool supportsCommand_(NSScriptCommandDescription commandDescription) {
    return _lib._objc_msgSend_641(
      this.pointer,
      _lib._sel_supportsCommand_1,
      commandDescription.pointer,
    );
  }

  ffi.Pointer<objc.ObjCSelector> selectorForCommand_(
    NSScriptCommandDescription commandDescription,
  ) {
    return _lib._objc_msgSend_642(
      this.pointer,
      _lib._sel_selectorForCommand_1,
      commandDescription.pointer,
    );
  }

  NSString? typeForKey_(NSString key) {
    final _ret = _lib._objc_msgSend_186(
      this.pointer,
      _lib._sel_typeForKey_1,
      key.pointer,
    );
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSScriptClassDescription? classDescriptionForKey_(NSString key) {
    final _ret = _lib._objc_msgSend_643(
      this.pointer,
      _lib._sel_classDescriptionForKey_1,
      key.pointer,
    );
    return _ret.address == 0
        ? null
        : NSScriptClassDescription._(_ret, _lib, retain: true, release: true);
  }

  int appleEventCodeForKey_(NSString key) {
    return _lib._objc_msgSend_629(
      this.pointer,
      _lib._sel_appleEventCodeForKey_1,
      key.pointer,
    );
  }

  NSString? keyWithAppleEventCode_(int appleEventCode) {
    final _ret = _lib._objc_msgSend_644(
      this.pointer,
      _lib._sel_keyWithAppleEventCode_1,
      appleEventCode,
    );
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString? get defaultSubcontainerAttributeKey {
    final _ret = _lib._objc_msgSend_44(
      this.pointer,
      _lib._sel_defaultSubcontainerAttributeKey1,
    );
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  bool isLocationRequiredToCreateForKey_(NSString toManyRelationshipKey) {
    return _lib._objc_msgSend_64(
      this.pointer,
      _lib._sel_isLocationRequiredToCreateForKey_1,
      toManyRelationshipKey.pointer,
    );
  }

  bool hasPropertyForKey_(NSString key) {
    return _lib._objc_msgSend_64(
      this.pointer,
      _lib._sel_hasPropertyForKey_1,
      key.pointer,
    );
  }

  bool hasOrderedToManyRelationshipForKey_(NSString key) {
    return _lib._objc_msgSend_64(
      this.pointer,
      _lib._sel_hasOrderedToManyRelationshipForKey_1,
      key.pointer,
    );
  }

  bool hasReadablePropertyForKey_(NSString key) {
    return _lib._objc_msgSend_64(
      this.pointer,
      _lib._sel_hasReadablePropertyForKey_1,
      key.pointer,
    );
  }

  bool hasWritablePropertyForKey_(NSString key) {
    return _lib._objc_msgSend_64(
      this.pointer,
      _lib._sel_hasWritablePropertyForKey_1,
      key.pointer,
    );
  }

  bool isReadOnlyKey_(NSString key) {
    return _lib._objc_msgSend_64(
      this.pointer,
      _lib._sel_isReadOnlyKey_1,
      key.pointer,
    );
  }

  static void registerClassDescription_forClass_(
    AVFAudio _lib,
    NSClassDescription description,
    NSObject aClass,
  ) {
    _lib._objc_msgSend_598(
      _lib._class_NSScriptClassDescription1,
      _lib._sel_registerClassDescription_forClass_1,
      description.pointer,
      aClass.pointer,
    );
  }

  static void invalidateClassDescriptionCache(AVFAudio _lib) {
    _lib._objc_msgSend_1(
      _lib._class_NSScriptClassDescription1,
      _lib._sel_invalidateClassDescriptionCache1,
    );
  }

  @override
  NSScriptClassDescription init() {
    final _ret = _lib._objc_msgSend_2(this.pointer, _lib._sel_init1);
    return NSScriptClassDescription._(_ret, _lib, retain: true, release: true);
  }

  static NSScriptClassDescription new1(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSScriptClassDescription1,
      _lib._sel_new1,
    );
    return NSScriptClassDescription._(_ret, _lib, retain: false, release: true);
  }

  static NSScriptClassDescription allocWithZone_(
    AVFAudio _lib,
    ffi.Pointer<_NSZone> zone,
  ) {
    final _ret = _lib._objc_msgSend_3(
      _lib._class_NSScriptClassDescription1,
      _lib._sel_allocWithZone_1,
      zone,
    );
    return NSScriptClassDescription._(_ret, _lib, retain: false, release: true);
  }

  static NSScriptClassDescription alloc(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSScriptClassDescription1,
      _lib._sel_alloc1,
    );
    return NSScriptClassDescription._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
    AVFAudio _lib,
    NSObject aTarget,
    ffi.Pointer<objc.ObjCSelector> aSelector,
    NSObject? anArgument,
  ) {
    _lib._objc_msgSend_14(
      _lib._class_NSScriptClassDescription1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
      aTarget.pointer,
      aSelector,
      anArgument?.pointer ?? ffi.nullptr,
    );
  }

  static void cancelPreviousPerformRequestsWithTarget_(
    AVFAudio _lib,
    NSObject aTarget,
  ) {
    _lib._objc_msgSend_15(
      _lib._class_NSScriptClassDescription1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_1,
      aTarget.pointer,
    );
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSScriptClassDescription1,
      _lib._sel_accessInstanceVariablesDirectly1,
    );
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSScriptClassDescription1,
      _lib._sel_useStoredAccessor1,
    );
  }

  static NSSet keyPathsForValuesAffectingValueForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    final _ret = _lib._objc_msgSend_63(
      _lib._class_NSScriptClassDescription1,
      _lib._sel_keyPathsForValuesAffectingValueForKey_1,
      key.pointer,
    );
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    return _lib._objc_msgSend_64(
      _lib._class_NSScriptClassDescription1,
      _lib._sel_automaticallyNotifiesObserversForKey_1,
      key.pointer,
    );
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
    AVFAudio _lib,
    NSArray keys,
    NSString dependentKey,
  ) {
    _lib._objc_msgSend_88(
      _lib._class_NSScriptClassDescription1,
      _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
      keys.pointer,
      dependentKey.pointer,
    );
  }

  static NSArray classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_85(
      _lib._class_NSScriptClassDescription1,
      _lib._sel_classFallbacksForKeyedArchiver1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSScriptClassDescription1,
      _lib._sel_classForKeyedUnarchiver1,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

class NSScriptCommandDescription extends NSObject {
  NSScriptCommandDescription._(
    ffi.Pointer<objc.ObjCObject> pointer,
    AVFAudio lib, {
    bool retain = false,
    bool release = false,
  }) : super._(pointer, lib, retain: retain, release: release);

  /// Returns a [NSScriptCommandDescription] that points to the same underlying object as [other].
  static NSScriptCommandDescription castFrom<T extends objc.ObjCObjectBase>(
    AVFAudio lib,
    T other,
  ) {
    return NSScriptCommandDescription._(
      other.pointer,
      lib,
      retain: true,
      release: true,
    );
  }

  /// Returns a [NSScriptCommandDescription] that wraps the given raw object pointer.
  static NSScriptCommandDescription castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCObject> other, {
    bool retain = false,
    bool release = false,
  }) {
    return NSScriptCommandDescription._(
      other,
      lib,
      retain: retain,
      release: release,
    );
  }

  /// Returns whether [obj] is an instance of [NSScriptCommandDescription].
  static bool isInstance(AVFAudio lib, objc.ObjCObjectBase obj) {
    return lib._objc_msgSend_0(
      obj.pointer,
      lib._sel_isKindOfClass_1,
      lib._class_NSScriptCommandDescription1,
    );
  }

  @override
  NSObject init() {
    final _ret = _lib._objc_msgSend_2(this.pointer, _lib._sel_init1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSScriptCommandDescription? initWithSuiteName_commandName_dictionary_(
    NSString suiteName,
    NSString commandName,
    NSDictionary? commandDeclaration,
  ) {
    final _ret = _lib._objc_msgSend_627(
      this.pointer,
      _lib._sel_initWithSuiteName_commandName_dictionary_1,
      suiteName.pointer,
      commandName.pointer,
      commandDeclaration?.pointer ?? ffi.nullptr,
    );
    return _ret.address == 0
        ? null
        : NSScriptCommandDescription._(_ret, _lib, retain: true, release: true);
  }

  NSScriptCommandDescription? initWithCoder_(NSCoder inCoder) {
    final _ret = _lib._objc_msgSend_47(
      this.pointer,
      _lib._sel_initWithCoder_1,
      inCoder.pointer,
    );
    return _ret.address == 0
        ? null
        : NSScriptCommandDescription._(_ret, _lib, retain: true, release: true);
  }

  NSString get suiteName {
    final _ret = _lib._objc_msgSend_21(this.pointer, _lib._sel_suiteName1);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString get commandName {
    final _ret = _lib._objc_msgSend_21(this.pointer, _lib._sel_commandName1);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  int get appleEventClassCode {
    return _lib._objc_msgSend_214(this.pointer, _lib._sel_appleEventClassCode1);
  }

  int get appleEventCode {
    return _lib._objc_msgSend_214(this.pointer, _lib._sel_appleEventCode1);
  }

  NSString get commandClassName {
    final _ret = _lib._objc_msgSend_21(
      this.pointer,
      _lib._sel_commandClassName1,
    );
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString? get returnType {
    final _ret = _lib._objc_msgSend_44(this.pointer, _lib._sel_returnType1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  int get appleEventCodeForReturnType {
    return _lib._objc_msgSend_214(
      this.pointer,
      _lib._sel_appleEventCodeForReturnType1,
    );
  }

  NSArray get argumentNames {
    final _ret = _lib._objc_msgSend_85(this.pointer, _lib._sel_argumentNames1);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSString? typeForArgumentWithName_(NSString argumentName) {
    final _ret = _lib._objc_msgSend_186(
      this.pointer,
      _lib._sel_typeForArgumentWithName_1,
      argumentName.pointer,
    );
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  int appleEventCodeForArgumentWithName_(NSString argumentName) {
    return _lib._objc_msgSend_629(
      this.pointer,
      _lib._sel_appleEventCodeForArgumentWithName_1,
      argumentName.pointer,
    );
  }

  bool isOptionalArgumentWithName_(NSString argumentName) {
    return _lib._objc_msgSend_64(
      this.pointer,
      _lib._sel_isOptionalArgumentWithName_1,
      argumentName.pointer,
    );
  }

  NSScriptCommand createCommandInstance() {
    final _ret = _lib._objc_msgSend_639(
      this.pointer,
      _lib._sel_createCommandInstance1,
    );
    return NSScriptCommand._(_ret, _lib, retain: true, release: true);
  }

  NSScriptCommand createCommandInstanceWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _lib._objc_msgSend_640(
      this.pointer,
      _lib._sel_createCommandInstanceWithZone_1,
      zone,
    );
    return NSScriptCommand._(_ret, _lib, retain: true, release: true);
  }

  static NSScriptCommandDescription new1(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSScriptCommandDescription1,
      _lib._sel_new1,
    );
    return NSScriptCommandDescription._(
      _ret,
      _lib,
      retain: false,
      release: true,
    );
  }

  static NSScriptCommandDescription allocWithZone_(
    AVFAudio _lib,
    ffi.Pointer<_NSZone> zone,
  ) {
    final _ret = _lib._objc_msgSend_3(
      _lib._class_NSScriptCommandDescription1,
      _lib._sel_allocWithZone_1,
      zone,
    );
    return NSScriptCommandDescription._(
      _ret,
      _lib,
      retain: false,
      release: true,
    );
  }

  static NSScriptCommandDescription alloc(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSScriptCommandDescription1,
      _lib._sel_alloc1,
    );
    return NSScriptCommandDescription._(
      _ret,
      _lib,
      retain: false,
      release: true,
    );
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
    AVFAudio _lib,
    NSObject aTarget,
    ffi.Pointer<objc.ObjCSelector> aSelector,
    NSObject? anArgument,
  ) {
    _lib._objc_msgSend_14(
      _lib._class_NSScriptCommandDescription1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
      aTarget.pointer,
      aSelector,
      anArgument?.pointer ?? ffi.nullptr,
    );
  }

  static void cancelPreviousPerformRequestsWithTarget_(
    AVFAudio _lib,
    NSObject aTarget,
  ) {
    _lib._objc_msgSend_15(
      _lib._class_NSScriptCommandDescription1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_1,
      aTarget.pointer,
    );
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSScriptCommandDescription1,
      _lib._sel_accessInstanceVariablesDirectly1,
    );
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSScriptCommandDescription1,
      _lib._sel_useStoredAccessor1,
    );
  }

  static NSSet keyPathsForValuesAffectingValueForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    final _ret = _lib._objc_msgSend_63(
      _lib._class_NSScriptCommandDescription1,
      _lib._sel_keyPathsForValuesAffectingValueForKey_1,
      key.pointer,
    );
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    return _lib._objc_msgSend_64(
      _lib._class_NSScriptCommandDescription1,
      _lib._sel_automaticallyNotifiesObserversForKey_1,
      key.pointer,
    );
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
    AVFAudio _lib,
    NSArray keys,
    NSString dependentKey,
  ) {
    _lib._objc_msgSend_88(
      _lib._class_NSScriptCommandDescription1,
      _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
      keys.pointer,
      dependentKey.pointer,
    );
  }

  static NSArray classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_85(
      _lib._class_NSScriptCommandDescription1,
      _lib._sel_classFallbacksForKeyedArchiver1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSScriptCommandDescription1,
      _lib._sel_classForKeyedUnarchiver1,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

class NSScriptCommand extends NSObject {
  NSScriptCommand._(
    ffi.Pointer<objc.ObjCObject> pointer,
    AVFAudio lib, {
    bool retain = false,
    bool release = false,
  }) : super._(pointer, lib, retain: retain, release: release);

  /// Returns a [NSScriptCommand] that points to the same underlying object as [other].
  static NSScriptCommand castFrom<T extends objc.ObjCObjectBase>(
    AVFAudio lib,
    T other,
  ) {
    return NSScriptCommand._(other.pointer, lib, retain: true, release: true);
  }

  /// Returns a [NSScriptCommand] that wraps the given raw object pointer.
  static NSScriptCommand castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCObject> other, {
    bool retain = false,
    bool release = false,
  }) {
    return NSScriptCommand._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSScriptCommand].
  static bool isInstance(AVFAudio lib, objc.ObjCObjectBase obj) {
    return lib._objc_msgSend_0(
      obj.pointer,
      lib._sel_isKindOfClass_1,
      lib._class_NSScriptCommand1,
    );
  }

  NSScriptCommand initWithCommandDescription_(
    NSScriptCommandDescription commandDef,
  ) {
    final _ret = _lib._objc_msgSend_630(
      this.pointer,
      _lib._sel_initWithCommandDescription_1,
      commandDef.pointer,
    );
    return NSScriptCommand._(_ret, _lib, retain: true, release: true);
  }

  NSScriptCommand? initWithCoder_(NSCoder inCoder) {
    final _ret = _lib._objc_msgSend_47(
      this.pointer,
      _lib._sel_initWithCoder_1,
      inCoder.pointer,
    );
    return _ret.address == 0
        ? null
        : NSScriptCommand._(_ret, _lib, retain: true, release: true);
  }

  NSScriptCommandDescription get commandDescription {
    final _ret = _lib._objc_msgSend_631(
      this.pointer,
      _lib._sel_commandDescription1,
    );
    return NSScriptCommandDescription._(
      _ret,
      _lib,
      retain: true,
      release: true,
    );
  }

  NSObject? get directParameter {
    final _ret = _lib._objc_msgSend_17(
      this.pointer,
      _lib._sel_directParameter1,
    );
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  set directParameter(NSObject? value) {
    return _lib._objc_msgSend_416(
      this.pointer,
      _lib._sel_setDirectParameter_1,
      value?.pointer ?? ffi.nullptr,
    );
  }

  NSScriptObjectSpecifier? get receiversSpecifier {
    final _ret = _lib._objc_msgSend_632(
      this.pointer,
      _lib._sel_receiversSpecifier1,
    );
    return _ret.address == 0
        ? null
        : NSScriptObjectSpecifier._(_ret, _lib, retain: true, release: true);
  }

  set receiversSpecifier(NSScriptObjectSpecifier? value) {
    return _lib._objc_msgSend_633(
      this.pointer,
      _lib._sel_setReceiversSpecifier_1,
      value?.pointer ?? ffi.nullptr,
    );
  }

  NSObject? get evaluatedReceivers {
    final _ret = _lib._objc_msgSend_17(
      this.pointer,
      _lib._sel_evaluatedReceivers1,
    );
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSDictionary? get arguments {
    final _ret = _lib._objc_msgSend_390(this.pointer, _lib._sel_arguments1);
    return _ret.address == 0
        ? null
        : NSDictionary._(_ret, _lib, retain: true, release: true);
  }

  set arguments(NSDictionary? value) {
    return _lib._objc_msgSend_634(
      this.pointer,
      _lib._sel_setArguments_1,
      value?.pointer ?? ffi.nullptr,
    );
  }

  NSDictionary? get evaluatedArguments {
    final _ret = _lib._objc_msgSend_390(
      this.pointer,
      _lib._sel_evaluatedArguments1,
    );
    return _ret.address == 0
        ? null
        : NSDictionary._(_ret, _lib, retain: true, release: true);
  }

  bool get wellFormed {
    return _lib._objc_msgSend_12(this.pointer, _lib._sel_isWellFormed1);
  }

  NSObject? performDefaultImplementation() {
    final _ret = _lib._objc_msgSend_17(
      this.pointer,
      _lib._sel_performDefaultImplementation1,
    );
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? executeCommand() {
    final _ret = _lib._objc_msgSend_17(this.pointer, _lib._sel_executeCommand1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  int get scriptErrorNumber {
    return _lib._objc_msgSend_83(this.pointer, _lib._sel_scriptErrorNumber1);
  }

  set scriptErrorNumber(int value) {
    return _lib._objc_msgSend_635(
      this.pointer,
      _lib._sel_setScriptErrorNumber_1,
      value,
    );
  }

  NSAppleEventDescriptor? get scriptErrorOffendingObjectDescriptor {
    final _ret = _lib._objc_msgSend_636(
      this.pointer,
      _lib._sel_scriptErrorOffendingObjectDescriptor1,
    );
    return _ret.address == 0
        ? null
        : NSAppleEventDescriptor._(_ret, _lib, retain: true, release: true);
  }

  set scriptErrorOffendingObjectDescriptor(NSAppleEventDescriptor? value) {
    return _lib._objc_msgSend_637(
      this.pointer,
      _lib._sel_setScriptErrorOffendingObjectDescriptor_1,
      value?.pointer ?? ffi.nullptr,
    );
  }

  NSAppleEventDescriptor? get scriptErrorExpectedTypeDescriptor {
    final _ret = _lib._objc_msgSend_636(
      this.pointer,
      _lib._sel_scriptErrorExpectedTypeDescriptor1,
    );
    return _ret.address == 0
        ? null
        : NSAppleEventDescriptor._(_ret, _lib, retain: true, release: true);
  }

  set scriptErrorExpectedTypeDescriptor(NSAppleEventDescriptor? value) {
    return _lib._objc_msgSend_637(
      this.pointer,
      _lib._sel_setScriptErrorExpectedTypeDescriptor_1,
      value?.pointer ?? ffi.nullptr,
    );
  }

  NSString? get scriptErrorString {
    final _ret = _lib._objc_msgSend_44(
      this.pointer,
      _lib._sel_scriptErrorString1,
    );
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  set scriptErrorString(NSString? value) {
    return _lib._objc_msgSend_545(
      this.pointer,
      _lib._sel_setScriptErrorString_1,
      value?.pointer ?? ffi.nullptr,
    );
  }

  static NSScriptCommand? currentCommand(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_638(
      _lib._class_NSScriptCommand1,
      _lib._sel_currentCommand1,
    );
    return _ret.address == 0
        ? null
        : NSScriptCommand._(_ret, _lib, retain: true, release: true);
  }

  NSAppleEventDescriptor? get appleEvent {
    final _ret = _lib._objc_msgSend_636(this.pointer, _lib._sel_appleEvent1);
    return _ret.address == 0
        ? null
        : NSAppleEventDescriptor._(_ret, _lib, retain: true, release: true);
  }

  void suspendExecution() {
    _lib._objc_msgSend_1(this.pointer, _lib._sel_suspendExecution1);
  }

  void resumeExecutionWithResult_(NSObject? result) {
    _lib._objc_msgSend_289(
      this.pointer,
      _lib._sel_resumeExecutionWithResult_1,
      result?.pointer ?? ffi.nullptr,
    );
  }

  @override
  NSScriptCommand init() {
    final _ret = _lib._objc_msgSend_2(this.pointer, _lib._sel_init1);
    return NSScriptCommand._(_ret, _lib, retain: true, release: true);
  }

  static NSScriptCommand new1(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSScriptCommand1,
      _lib._sel_new1,
    );
    return NSScriptCommand._(_ret, _lib, retain: false, release: true);
  }

  static NSScriptCommand allocWithZone_(
    AVFAudio _lib,
    ffi.Pointer<_NSZone> zone,
  ) {
    final _ret = _lib._objc_msgSend_3(
      _lib._class_NSScriptCommand1,
      _lib._sel_allocWithZone_1,
      zone,
    );
    return NSScriptCommand._(_ret, _lib, retain: false, release: true);
  }

  static NSScriptCommand alloc(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSScriptCommand1,
      _lib._sel_alloc1,
    );
    return NSScriptCommand._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
    AVFAudio _lib,
    NSObject aTarget,
    ffi.Pointer<objc.ObjCSelector> aSelector,
    NSObject? anArgument,
  ) {
    _lib._objc_msgSend_14(
      _lib._class_NSScriptCommand1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
      aTarget.pointer,
      aSelector,
      anArgument?.pointer ?? ffi.nullptr,
    );
  }

  static void cancelPreviousPerformRequestsWithTarget_(
    AVFAudio _lib,
    NSObject aTarget,
  ) {
    _lib._objc_msgSend_15(
      _lib._class_NSScriptCommand1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_1,
      aTarget.pointer,
    );
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSScriptCommand1,
      _lib._sel_accessInstanceVariablesDirectly1,
    );
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSScriptCommand1,
      _lib._sel_useStoredAccessor1,
    );
  }

  static NSSet keyPathsForValuesAffectingValueForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    final _ret = _lib._objc_msgSend_63(
      _lib._class_NSScriptCommand1,
      _lib._sel_keyPathsForValuesAffectingValueForKey_1,
      key.pointer,
    );
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    return _lib._objc_msgSend_64(
      _lib._class_NSScriptCommand1,
      _lib._sel_automaticallyNotifiesObserversForKey_1,
      key.pointer,
    );
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
    AVFAudio _lib,
    NSArray keys,
    NSString dependentKey,
  ) {
    _lib._objc_msgSend_88(
      _lib._class_NSScriptCommand1,
      _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
      keys.pointer,
      dependentKey.pointer,
    );
  }

  static NSArray classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_85(
      _lib._class_NSScriptCommand1,
      _lib._sel_classFallbacksForKeyedArchiver1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSScriptCommand1,
      _lib._sel_classForKeyedUnarchiver1,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

class NSItemProvider extends NSObject {
  NSItemProvider._(
    ffi.Pointer<objc.ObjCObject> pointer,
    AVFAudio lib, {
    bool retain = false,
    bool release = false,
  }) : super._(pointer, lib, retain: retain, release: release);

  /// Returns a [NSItemProvider] that points to the same underlying object as [other].
  static NSItemProvider castFrom<T extends objc.ObjCObjectBase>(
    AVFAudio lib,
    T other,
  ) {
    return NSItemProvider._(other.pointer, lib, retain: true, release: true);
  }

  /// Returns a [NSItemProvider] that wraps the given raw object pointer.
  static NSItemProvider castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCObject> other, {
    bool retain = false,
    bool release = false,
  }) {
    return NSItemProvider._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSItemProvider].
  static bool isInstance(AVFAudio lib, objc.ObjCObjectBase obj) {
    return lib._objc_msgSend_0(
      obj.pointer,
      lib._sel_isKindOfClass_1,
      lib._class_NSItemProvider1,
    );
  }

  @override
  NSItemProvider init() {
    final _ret = _lib._objc_msgSend_2(this.pointer, _lib._sel_init1);
    return NSItemProvider._(_ret, _lib, retain: true, release: true);
  }

  void registerDataRepresentationForTypeIdentifier_visibility_loadHandler_(
    NSString typeIdentifier,
    int visibility,
    ObjCBlock_NSProgress_ffiVoidNSDataNSError loadHandler,
  ) {
    _lib._objc_msgSend_673(
      this.pointer,
      _lib._sel_registerDataRepresentationForTypeIdentifier_visibility_loadHandler_1,
      typeIdentifier.pointer,
      visibility,
      loadHandler.pointer,
    );
  }

  void
  registerFileRepresentationForTypeIdentifier_fileOptions_visibility_loadHandler_(
    NSString typeIdentifier,
    int fileOptions,
    int visibility,
    ObjCBlock_NSProgress_ffiVoidNSURLboolNSError loadHandler,
  ) {
    _lib._objc_msgSend_674(
      this.pointer,
      _lib._sel_registerFileRepresentationForTypeIdentifier_fileOptions_visibility_loadHandler_1,
      typeIdentifier.pointer,
      fileOptions,
      visibility,
      loadHandler.pointer,
    );
  }

  NSArray get registeredTypeIdentifiers {
    final _ret = _lib._objc_msgSend_85(
      this.pointer,
      _lib._sel_registeredTypeIdentifiers1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSArray registeredTypeIdentifiersWithFileOptions_(int fileOptions) {
    final _ret = _lib._objc_msgSend_675(
      this.pointer,
      _lib._sel_registeredTypeIdentifiersWithFileOptions_1,
      fileOptions,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  bool hasItemConformingToTypeIdentifier_(NSString typeIdentifier) {
    return _lib._objc_msgSend_64(
      this.pointer,
      _lib._sel_hasItemConformingToTypeIdentifier_1,
      typeIdentifier.pointer,
    );
  }

  bool hasRepresentationConformingToTypeIdentifier_fileOptions_(
    NSString typeIdentifier,
    int fileOptions,
  ) {
    return _lib._objc_msgSend_676(
      this.pointer,
      _lib._sel_hasRepresentationConformingToTypeIdentifier_fileOptions_1,
      typeIdentifier.pointer,
      fileOptions,
    );
  }

  NSProgress loadDataRepresentationForTypeIdentifier_completionHandler_(
    NSString typeIdentifier,
    ObjCBlock_ffiVoid_NSData_NSError completionHandler,
  ) {
    final _ret = _lib._objc_msgSend_677(
      this.pointer,
      _lib._sel_loadDataRepresentationForTypeIdentifier_completionHandler_1,
      typeIdentifier.pointer,
      completionHandler.pointer,
    );
    return NSProgress._(_ret, _lib, retain: true, release: true);
  }

  NSProgress loadFileRepresentationForTypeIdentifier_completionHandler_(
    NSString typeIdentifier,
    ObjCBlock_ffiVoid_NSURL_NSError completionHandler,
  ) {
    final _ret = _lib._objc_msgSend_678(
      this.pointer,
      _lib._sel_loadFileRepresentationForTypeIdentifier_completionHandler_1,
      typeIdentifier.pointer,
      completionHandler.pointer,
    );
    return NSProgress._(_ret, _lib, retain: true, release: true);
  }

  NSProgress loadInPlaceFileRepresentationForTypeIdentifier_completionHandler_(
    NSString typeIdentifier,
    ObjCBlock_ffiVoid_NSURL_bool_NSError completionHandler,
  ) {
    final _ret = _lib._objc_msgSend_679(
      this.pointer,
      _lib._sel_loadInPlaceFileRepresentationForTypeIdentifier_completionHandler_1,
      typeIdentifier.pointer,
      completionHandler.pointer,
    );
    return NSProgress._(_ret, _lib, retain: true, release: true);
  }

  NSString? get suggestedName {
    final _ret = _lib._objc_msgSend_44(this.pointer, _lib._sel_suggestedName1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  set suggestedName(NSString? value) {
    return _lib._objc_msgSend_545(
      this.pointer,
      _lib._sel_setSuggestedName_1,
      value?.pointer ?? ffi.nullptr,
    );
  }

  NSItemProvider initWithObject_(NSObject object) {
    final _ret = _lib._objc_msgSend_124(
      this.pointer,
      _lib._sel_initWithObject_1,
      object.pointer,
    );
    return NSItemProvider._(_ret, _lib, retain: true, release: true);
  }

  void registerObject_visibility_(NSObject object, int visibility) {
    _lib._objc_msgSend_680(
      this.pointer,
      _lib._sel_registerObject_visibility_1,
      object.pointer,
      visibility,
    );
  }

  void registerObjectOfClass_visibility_loadHandler_(
    NSObject aClass,
    int visibility,
    ObjCBlock_NSProgress_ffiVoidobjcObjCObjectNSError loadHandler,
  ) {
    _lib._objc_msgSend_681(
      this.pointer,
      _lib._sel_registerObjectOfClass_visibility_loadHandler_1,
      aClass.pointer,
      visibility,
      loadHandler.pointer,
    );
  }

  bool canLoadObjectOfClass_(NSObject aClass) {
    return _lib._objc_msgSend_0(
      this.pointer,
      _lib._sel_canLoadObjectOfClass_1,
      aClass.pointer,
    );
  }

  NSProgress loadObjectOfClass_completionHandler_(
    NSObject aClass,
    ObjCBlock_ffiVoid_objcObjCObject_NSError completionHandler,
  ) {
    final _ret = _lib._objc_msgSend_682(
      this.pointer,
      _lib._sel_loadObjectOfClass_completionHandler_1,
      aClass.pointer,
      completionHandler.pointer,
    );
    return NSProgress._(_ret, _lib, retain: true, release: true);
  }

  NSItemProvider initWithItem_typeIdentifier_(
    NSObject? item,
    NSString? typeIdentifier,
  ) {
    final _ret = _lib._objc_msgSend_683(
      this.pointer,
      _lib._sel_initWithItem_typeIdentifier_1,
      item?.pointer ?? ffi.nullptr,
      typeIdentifier?.pointer ?? ffi.nullptr,
    );
    return NSItemProvider._(_ret, _lib, retain: true, release: true);
  }

  NSItemProvider? initWithContentsOfURL_(NSURL fileURL) {
    final _ret = _lib._objc_msgSend_277(
      this.pointer,
      _lib._sel_initWithContentsOfURL_1,
      fileURL.pointer,
    );
    return _ret.address == 0
        ? null
        : NSItemProvider._(_ret, _lib, retain: true, release: true);
  }

  void registerItemForTypeIdentifier_loadHandler_(
    NSString typeIdentifier,
    ObjCBlock_ffiVoid_ffiVoidobjcObjCObjectNSError_objcObjCObject_NSDictionary
    loadHandler,
  ) {
    _lib._objc_msgSend_684(
      this.pointer,
      _lib._sel_registerItemForTypeIdentifier_loadHandler_1,
      typeIdentifier.pointer,
      loadHandler.pointer,
    );
  }

  void loadItemForTypeIdentifier_options_completionHandler_(
    NSString typeIdentifier,
    NSDictionary? options,
    ObjCBlock_ffiVoid_objcObjCObject_NSError1? completionHandler,
  ) {
    _lib._objc_msgSend_685(
      this.pointer,
      _lib._sel_loadItemForTypeIdentifier_options_completionHandler_1,
      typeIdentifier.pointer,
      options?.pointer ?? ffi.nullptr,
      completionHandler?.pointer ?? ffi.nullptr,
    );
  }

  ObjCBlock_ffiVoid_ffiVoidobjcObjCObjectNSError_objcObjCObject_NSDictionary?
  get previewImageHandler {
    final _ret = _lib._objc_msgSend_686(
      this.pointer,
      _lib._sel_previewImageHandler1,
    );
    return _ret.address == 0
        ? null
        : ObjCBlock_ffiVoid_ffiVoidobjcObjCObjectNSError_objcObjCObject_NSDictionary._(
          _ret,
          _lib,
          retain: true,
          release: true,
        );
  }

  set previewImageHandler(
    ObjCBlock_ffiVoid_ffiVoidobjcObjCObjectNSError_objcObjCObject_NSDictionary?
    value,
  ) {
    return _lib._objc_msgSend_687(
      this.pointer,
      _lib._sel_setPreviewImageHandler_1,
      value?.pointer ?? ffi.nullptr,
    );
  }

  void loadPreviewImageWithOptions_completionHandler_(
    NSDictionary options,
    ObjCBlock_ffiVoid_objcObjCObject_NSError1 completionHandler,
  ) {
    _lib._objc_msgSend_688(
      this.pointer,
      _lib._sel_loadPreviewImageWithOptions_completionHandler_1,
      options.pointer,
      completionHandler.pointer,
    );
  }

  static NSItemProvider new1(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSItemProvider1,
      _lib._sel_new1,
    );
    return NSItemProvider._(_ret, _lib, retain: false, release: true);
  }

  static NSItemProvider allocWithZone_(
    AVFAudio _lib,
    ffi.Pointer<_NSZone> zone,
  ) {
    final _ret = _lib._objc_msgSend_3(
      _lib._class_NSItemProvider1,
      _lib._sel_allocWithZone_1,
      zone,
    );
    return NSItemProvider._(_ret, _lib, retain: false, release: true);
  }

  static NSItemProvider alloc(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSItemProvider1,
      _lib._sel_alloc1,
    );
    return NSItemProvider._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
    AVFAudio _lib,
    NSObject aTarget,
    ffi.Pointer<objc.ObjCSelector> aSelector,
    NSObject? anArgument,
  ) {
    _lib._objc_msgSend_14(
      _lib._class_NSItemProvider1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
      aTarget.pointer,
      aSelector,
      anArgument?.pointer ?? ffi.nullptr,
    );
  }

  static void cancelPreviousPerformRequestsWithTarget_(
    AVFAudio _lib,
    NSObject aTarget,
  ) {
    _lib._objc_msgSend_15(
      _lib._class_NSItemProvider1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_1,
      aTarget.pointer,
    );
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSItemProvider1,
      _lib._sel_accessInstanceVariablesDirectly1,
    );
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSItemProvider1,
      _lib._sel_useStoredAccessor1,
    );
  }

  static NSSet keyPathsForValuesAffectingValueForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    final _ret = _lib._objc_msgSend_63(
      _lib._class_NSItemProvider1,
      _lib._sel_keyPathsForValuesAffectingValueForKey_1,
      key.pointer,
    );
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    return _lib._objc_msgSend_64(
      _lib._class_NSItemProvider1,
      _lib._sel_automaticallyNotifiesObserversForKey_1,
      key.pointer,
    );
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
    AVFAudio _lib,
    NSArray keys,
    NSString dependentKey,
  ) {
    _lib._objc_msgSend_88(
      _lib._class_NSItemProvider1,
      _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
      keys.pointer,
      dependentKey.pointer,
    );
  }

  static NSArray classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_85(
      _lib._class_NSItemProvider1,
      _lib._sel_classFallbacksForKeyedArchiver1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSItemProvider1,
      _lib._sel_classForKeyedUnarchiver1,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

abstract class NSItemProviderRepresentationVisibility {
  static const int NSItemProviderRepresentationVisibilityAll = 0;
  static const int NSItemProviderRepresentationVisibilityTeam = 1;
  static const int NSItemProviderRepresentationVisibilityGroup = 2;
  static const int NSItemProviderRepresentationVisibilityOwnProcess = 3;
}

ffi.Pointer<objc.ObjCObject>
_ObjCBlock_NSProgress_ffiVoidNSDataNSError_fnPtrTrampoline(
  ffi.Pointer<objc.ObjCBlock> block,
  ffi.Pointer<objc.ObjCBlock> arg0,
) => block.ref.target
    .cast<
      ffi.NativeFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCBlock> arg0)
      >
    >()
    .asFunction<
      ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCBlock>)
    >()(arg0);
final _ObjCBlock_NSProgress_ffiVoidNSDataNSError_closureRegistry =
    <int, ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCBlock>)>{};
int _ObjCBlock_NSProgress_ffiVoidNSDataNSError_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void>
_ObjCBlock_NSProgress_ffiVoidNSDataNSError_registerClosure(
  ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCBlock>) fn,
) {
  final id = ++_ObjCBlock_NSProgress_ffiVoidNSDataNSError_closureRegistryIndex;
  _ObjCBlock_NSProgress_ffiVoidNSDataNSError_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

ffi.Pointer<objc.ObjCObject>
_ObjCBlock_NSProgress_ffiVoidNSDataNSError_closureTrampoline(
  ffi.Pointer<objc.ObjCBlock> block,
  ffi.Pointer<objc.ObjCBlock> arg0,
) => _ObjCBlock_NSProgress_ffiVoidNSDataNSError_closureRegistry[block
    .ref
    .target
    .address]!(arg0);

class ObjCBlock_NSProgress_ffiVoidNSDataNSError extends objc.ObjCBlockBase {
  ObjCBlock_NSProgress_ffiVoidNSDataNSError._(
    ffi.Pointer<objc.ObjCBlock> pointer,
    this._lib, {
    bool retain = false,
    bool release = true,
  }) : super(pointer, retain: retain, release: release);

  AVFAudio _lib;

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_NSProgress_ffiVoidNSDataNSError castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCBlock> pointer, {
    bool retain = false,
    bool release = false,
  }) {
    return ObjCBlock_NSProgress_ffiVoidNSDataNSError._(
      pointer,
      lib,
      retain: retain,
      release: release,
    );
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_NSProgress_ffiVoidNSDataNSError.fromFunctionPointer(
    AVFAudio lib,
    ffi.Pointer<
      ffi.NativeFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCBlock> arg0)
      >
    > ptr,
  ) : this._(objc.newBlock(
        _cFuncTrampoline ??=
            ffi.Pointer.fromFunction<
              ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCBlock>,
                ffi.Pointer<objc.ObjCBlock>,
              )
            >(
              _ObjCBlock_NSProgress_ffiVoidNSDataNSError_fnPtrTrampoline,
            ).cast(),
        ptr.cast(),
      ), lib);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_NSProgress_ffiVoidNSDataNSError.fromFunction(
    AVFAudio lib,
    NSProgress? Function(ObjCBlock_ffiVoid_NSData_NSError) fn,
  ) : this._(objc.newBlock(
        _dartFuncTrampoline ??=
            ffi.Pointer.fromFunction<
              ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCBlock>,
                ffi.Pointer<objc.ObjCBlock>,
              )
            >(
              _ObjCBlock_NSProgress_ffiVoidNSDataNSError_closureTrampoline,
            ).cast(),
        _ObjCBlock_NSProgress_ffiVoidNSDataNSError_registerClosure((
          ffi.Pointer<objc.ObjCBlock> arg0,
        ) =>
            fn(ObjCBlock_ffiVoid_NSData_NSError._(
                  arg0,
                  lib,
                  retain: true,
                  release: true,
                ))?.retainAndReturnPointer() ??
                ffi.nullptr),
      ), lib);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  NSProgress? call(ObjCBlock_ffiVoid_NSData_NSError arg0) =>
      pointer.ref.invoke
                  .cast<
                    ffi.NativeFunction<
                      ffi.Pointer<objc.ObjCObject> Function(
                        ffi.Pointer<objc.ObjCBlock> block,
                        ffi.Pointer<objc.ObjCBlock> arg0,
                      )
                    >
                  >()
                  .asFunction<
                    ffi.Pointer<objc.ObjCObject> Function(
                      ffi.Pointer<objc.ObjCBlock>,
                      ffi.Pointer<objc.ObjCBlock>,
                    )
                  >()(pointer, arg0.pointer)
                  .address ==
              0
          ? null
          : NSProgress._(pointer.ref.invoke
              .cast<
                ffi.NativeFunction<
                  ffi.Pointer<objc.ObjCObject> Function(
                    ffi.Pointer<objc.ObjCBlock> block,
                    ffi.Pointer<objc.ObjCBlock> arg0,
                  )
                >
              >()
              .asFunction<
                ffi.Pointer<objc.ObjCObject> Function(
                  ffi.Pointer<objc.ObjCBlock>,
                  ffi.Pointer<objc.ObjCBlock>,
                )
              >()(pointer, arg0.pointer), _lib, retain: false, release: true);
}

class NSProgress extends NSObject {
  NSProgress._(
    ffi.Pointer<objc.ObjCObject> pointer,
    AVFAudio lib, {
    bool retain = false,
    bool release = false,
  }) : super._(pointer, lib, retain: retain, release: release);

  /// Returns a [NSProgress] that points to the same underlying object as [other].
  static NSProgress castFrom<T extends objc.ObjCObjectBase>(
    AVFAudio lib,
    T other,
  ) {
    return NSProgress._(other.pointer, lib, retain: true, release: true);
  }

  /// Returns a [NSProgress] that wraps the given raw object pointer.
  static NSProgress castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCObject> other, {
    bool retain = false,
    bool release = false,
  }) {
    return NSProgress._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSProgress].
  static bool isInstance(AVFAudio lib, objc.ObjCObjectBase obj) {
    return lib._objc_msgSend_0(
      obj.pointer,
      lib._sel_isKindOfClass_1,
      lib._class_NSProgress1,
    );
  }

  static NSProgress? currentProgress(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_659(
      _lib._class_NSProgress1,
      _lib._sel_currentProgress1,
    );
    return _ret.address == 0
        ? null
        : NSProgress._(_ret, _lib, retain: true, release: true);
  }

  static NSProgress progressWithTotalUnitCount_(AVFAudio _lib, int unitCount) {
    final _ret = _lib._objc_msgSend_660(
      _lib._class_NSProgress1,
      _lib._sel_progressWithTotalUnitCount_1,
      unitCount,
    );
    return NSProgress._(_ret, _lib, retain: true, release: true);
  }

  static NSProgress discreteProgressWithTotalUnitCount_(
    AVFAudio _lib,
    int unitCount,
  ) {
    final _ret = _lib._objc_msgSend_660(
      _lib._class_NSProgress1,
      _lib._sel_discreteProgressWithTotalUnitCount_1,
      unitCount,
    );
    return NSProgress._(_ret, _lib, retain: true, release: true);
  }

  static NSProgress progressWithTotalUnitCount_parent_pendingUnitCount_(
    AVFAudio _lib,
    int unitCount,
    NSProgress parent,
    int portionOfParentTotalUnitCount,
  ) {
    final _ret = _lib._objc_msgSend_661(
      _lib._class_NSProgress1,
      _lib._sel_progressWithTotalUnitCount_parent_pendingUnitCount_1,
      unitCount,
      parent.pointer,
      portionOfParentTotalUnitCount,
    );
    return NSProgress._(_ret, _lib, retain: true, release: true);
  }

  NSProgress initWithParent_userInfo_(
    NSProgress? parentProgressOrNil,
    NSObject? userInfoOrNil,
  ) {
    final _ret = _lib._objc_msgSend_662(
      this.pointer,
      _lib._sel_initWithParent_userInfo_1,
      parentProgressOrNil?.pointer ?? ffi.nullptr,
      userInfoOrNil?.pointer ?? ffi.nullptr,
    );
    return NSProgress._(_ret, _lib, retain: true, release: true);
  }

  void becomeCurrentWithPendingUnitCount_(int unitCount) {
    _lib._objc_msgSend_663(
      this.pointer,
      _lib._sel_becomeCurrentWithPendingUnitCount_1,
      unitCount,
    );
  }

  void performAsCurrentWithPendingUnitCount_usingBlock_(
    int unitCount,
    ObjCBlock_ffiVoid work,
  ) {
    _lib._objc_msgSend_664(
      this.pointer,
      _lib._sel_performAsCurrentWithPendingUnitCount_usingBlock_1,
      unitCount,
      work.pointer,
    );
  }

  void resignCurrent() {
    _lib._objc_msgSend_1(this.pointer, _lib._sel_resignCurrent1);
  }

  void addChild_withPendingUnitCount_(NSProgress child, int inUnitCount) {
    _lib._objc_msgSend_665(
      this.pointer,
      _lib._sel_addChild_withPendingUnitCount_1,
      child.pointer,
      inUnitCount,
    );
  }

  int get totalUnitCount {
    return _lib._objc_msgSend_666(this.pointer, _lib._sel_totalUnitCount1);
  }

  set totalUnitCount(int value) {
    return _lib._objc_msgSend_667(
      this.pointer,
      _lib._sel_setTotalUnitCount_1,
      value,
    );
  }

  int get completedUnitCount {
    return _lib._objc_msgSend_666(this.pointer, _lib._sel_completedUnitCount1);
  }

  set completedUnitCount(int value) {
    return _lib._objc_msgSend_667(
      this.pointer,
      _lib._sel_setCompletedUnitCount_1,
      value,
    );
  }

  NSString get localizedDescription {
    final _ret = _lib._objc_msgSend_21(
      this.pointer,
      _lib._sel_localizedDescription1,
    );
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  set localizedDescription(NSString value) {
    return _lib._objc_msgSend_646(
      this.pointer,
      _lib._sel_setLocalizedDescription_1,
      value.pointer,
    );
  }

  NSString get localizedAdditionalDescription {
    final _ret = _lib._objc_msgSend_21(
      this.pointer,
      _lib._sel_localizedAdditionalDescription1,
    );
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  set localizedAdditionalDescription(NSString value) {
    return _lib._objc_msgSend_646(
      this.pointer,
      _lib._sel_setLocalizedAdditionalDescription_1,
      value.pointer,
    );
  }

  bool get cancellable {
    return _lib._objc_msgSend_12(this.pointer, _lib._sel_isCancellable1);
  }

  set cancellable(bool value) {
    return _lib._objc_msgSend_527(
      this.pointer,
      _lib._sel_setCancellable_1,
      value,
    );
  }

  bool get pausable {
    return _lib._objc_msgSend_12(this.pointer, _lib._sel_isPausable1);
  }

  set pausable(bool value) {
    return _lib._objc_msgSend_527(this.pointer, _lib._sel_setPausable_1, value);
  }

  bool get cancelled {
    return _lib._objc_msgSend_12(this.pointer, _lib._sel_isCancelled1);
  }

  bool get paused {
    return _lib._objc_msgSend_12(this.pointer, _lib._sel_isPaused1);
  }

  ObjCBlock_ffiVoid? get cancellationHandler {
    final _ret = _lib._objc_msgSend_668(
      this.pointer,
      _lib._sel_cancellationHandler1,
    );
    return _ret.address == 0
        ? null
        : ObjCBlock_ffiVoid._(_ret, _lib, retain: true, release: true);
  }

  set cancellationHandler(ObjCBlock_ffiVoid? value) {
    return _lib._objc_msgSend_669(
      this.pointer,
      _lib._sel_setCancellationHandler_1,
      value?.pointer ?? ffi.nullptr,
    );
  }

  ObjCBlock_ffiVoid? get pausingHandler {
    final _ret = _lib._objc_msgSend_668(
      this.pointer,
      _lib._sel_pausingHandler1,
    );
    return _ret.address == 0
        ? null
        : ObjCBlock_ffiVoid._(_ret, _lib, retain: true, release: true);
  }

  set pausingHandler(ObjCBlock_ffiVoid? value) {
    return _lib._objc_msgSend_669(
      this.pointer,
      _lib._sel_setPausingHandler_1,
      value?.pointer ?? ffi.nullptr,
    );
  }

  ObjCBlock_ffiVoid? get resumingHandler {
    final _ret = _lib._objc_msgSend_668(
      this.pointer,
      _lib._sel_resumingHandler1,
    );
    return _ret.address == 0
        ? null
        : ObjCBlock_ffiVoid._(_ret, _lib, retain: true, release: true);
  }

  set resumingHandler(ObjCBlock_ffiVoid? value) {
    return _lib._objc_msgSend_669(
      this.pointer,
      _lib._sel_setResumingHandler_1,
      value?.pointer ?? ffi.nullptr,
    );
  }

  void setUserInfoObject_forKey_(NSObject? objectOrNil, NSString key) {
    _lib._objc_msgSend_135(
      this.pointer,
      _lib._sel_setUserInfoObject_forKey_1,
      objectOrNil?.pointer ?? ffi.nullptr,
      key.pointer,
    );
  }

  bool get indeterminate {
    return _lib._objc_msgSend_12(this.pointer, _lib._sel_isIndeterminate1);
  }

  double get fractionCompleted {
    return objc.useMsgSendVariants
        ? _lib._objc_msgSend_165_fpret(
          this.pointer,
          _lib._sel_fractionCompleted1,
        )
        : _lib._objc_msgSend_165(this.pointer, _lib._sel_fractionCompleted1);
  }

  bool get finished {
    return _lib._objc_msgSend_12(this.pointer, _lib._sel_isFinished1);
  }

  void cancel() {
    _lib._objc_msgSend_1(this.pointer, _lib._sel_cancel1);
  }

  void pause() {
    _lib._objc_msgSend_1(this.pointer, _lib._sel_pause1);
  }

  void resume() {
    _lib._objc_msgSend_1(this.pointer, _lib._sel_resume1);
  }

  NSObject get userInfo {
    final _ret = _lib._objc_msgSend_2(this.pointer, _lib._sel_userInfo1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSString? get kind {
    final _ret = _lib._objc_msgSend_44(this.pointer, _lib._sel_kind1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  set kind(NSString? value) {
    return _lib._objc_msgSend_545(
      this.pointer,
      _lib._sel_setKind_1,
      value?.pointer ?? ffi.nullptr,
    );
  }

  NSNumber? get estimatedTimeRemaining {
    final _ret = _lib._objc_msgSend_215(
      this.pointer,
      _lib._sel_estimatedTimeRemaining1,
    );
    return _ret.address == 0
        ? null
        : NSNumber._(_ret, _lib, retain: true, release: true);
  }

  set estimatedTimeRemaining(NSNumber? value) {
    return _lib._objc_msgSend_670(
      this.pointer,
      _lib._sel_setEstimatedTimeRemaining_1,
      value?.pointer ?? ffi.nullptr,
    );
  }

  NSNumber? get throughput {
    final _ret = _lib._objc_msgSend_215(this.pointer, _lib._sel_throughput1);
    return _ret.address == 0
        ? null
        : NSNumber._(_ret, _lib, retain: true, release: true);
  }

  set throughput(NSNumber? value) {
    return _lib._objc_msgSend_670(
      this.pointer,
      _lib._sel_setThroughput_1,
      value?.pointer ?? ffi.nullptr,
    );
  }

  NSString? get fileOperationKind {
    final _ret = _lib._objc_msgSend_44(
      this.pointer,
      _lib._sel_fileOperationKind1,
    );
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  set fileOperationKind(NSString? value) {
    return _lib._objc_msgSend_545(
      this.pointer,
      _lib._sel_setFileOperationKind_1,
      value?.pointer ?? ffi.nullptr,
    );
  }

  NSURL? get fileURL {
    final _ret = _lib._objc_msgSend_45(this.pointer, _lib._sel_fileURL1);
    return _ret.address == 0
        ? null
        : NSURL._(_ret, _lib, retain: true, release: true);
  }

  set fileURL(NSURL? value) {
    return _lib._objc_msgSend_671(
      this.pointer,
      _lib._sel_setFileURL_1,
      value?.pointer ?? ffi.nullptr,
    );
  }

  NSNumber? get fileTotalCount {
    final _ret = _lib._objc_msgSend_215(
      this.pointer,
      _lib._sel_fileTotalCount1,
    );
    return _ret.address == 0
        ? null
        : NSNumber._(_ret, _lib, retain: true, release: true);
  }

  set fileTotalCount(NSNumber? value) {
    return _lib._objc_msgSend_670(
      this.pointer,
      _lib._sel_setFileTotalCount_1,
      value?.pointer ?? ffi.nullptr,
    );
  }

  NSNumber? get fileCompletedCount {
    final _ret = _lib._objc_msgSend_215(
      this.pointer,
      _lib._sel_fileCompletedCount1,
    );
    return _ret.address == 0
        ? null
        : NSNumber._(_ret, _lib, retain: true, release: true);
  }

  set fileCompletedCount(NSNumber? value) {
    return _lib._objc_msgSend_670(
      this.pointer,
      _lib._sel_setFileCompletedCount_1,
      value?.pointer ?? ffi.nullptr,
    );
  }

  void publish() {
    _lib._objc_msgSend_1(this.pointer, _lib._sel_publish1);
  }

  void unpublish() {
    _lib._objc_msgSend_1(this.pointer, _lib._sel_unpublish1);
  }

  static NSObject addSubscriberForFileURL_withPublishingHandler_(
    AVFAudio _lib,
    NSURL url,
    ObjCBlock_ffiVoid_NSProgress publishingHandler,
  ) {
    final _ret = _lib._objc_msgSend_672(
      _lib._class_NSProgress1,
      _lib._sel_addSubscriberForFileURL_withPublishingHandler_1,
      url.pointer,
      publishingHandler.pointer,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static void removeSubscriber_(AVFAudio _lib, NSObject subscriber) {
    _lib._objc_msgSend_15(
      _lib._class_NSProgress1,
      _lib._sel_removeSubscriber_1,
      subscriber.pointer,
    );
  }

  bool get old {
    return _lib._objc_msgSend_12(this.pointer, _lib._sel_isOld1);
  }

  @override
  NSProgress init() {
    final _ret = _lib._objc_msgSend_2(this.pointer, _lib._sel_init1);
    return NSProgress._(_ret, _lib, retain: true, release: true);
  }

  static NSProgress new1(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSProgress1, _lib._sel_new1);
    return NSProgress._(_ret, _lib, retain: false, release: true);
  }

  static NSProgress allocWithZone_(AVFAudio _lib, ffi.Pointer<_NSZone> zone) {
    final _ret = _lib._objc_msgSend_3(
      _lib._class_NSProgress1,
      _lib._sel_allocWithZone_1,
      zone,
    );
    return NSProgress._(_ret, _lib, retain: false, release: true);
  }

  static NSProgress alloc(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSProgress1,
      _lib._sel_alloc1,
    );
    return NSProgress._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
    AVFAudio _lib,
    NSObject aTarget,
    ffi.Pointer<objc.ObjCSelector> aSelector,
    NSObject? anArgument,
  ) {
    _lib._objc_msgSend_14(
      _lib._class_NSProgress1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
      aTarget.pointer,
      aSelector,
      anArgument?.pointer ?? ffi.nullptr,
    );
  }

  static void cancelPreviousPerformRequestsWithTarget_(
    AVFAudio _lib,
    NSObject aTarget,
  ) {
    _lib._objc_msgSend_15(
      _lib._class_NSProgress1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_1,
      aTarget.pointer,
    );
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSProgress1,
      _lib._sel_accessInstanceVariablesDirectly1,
    );
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSProgress1,
      _lib._sel_useStoredAccessor1,
    );
  }

  static NSSet keyPathsForValuesAffectingValueForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    final _ret = _lib._objc_msgSend_63(
      _lib._class_NSProgress1,
      _lib._sel_keyPathsForValuesAffectingValueForKey_1,
      key.pointer,
    );
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    return _lib._objc_msgSend_64(
      _lib._class_NSProgress1,
      _lib._sel_automaticallyNotifiesObserversForKey_1,
      key.pointer,
    );
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
    AVFAudio _lib,
    NSArray keys,
    NSString dependentKey,
  ) {
    _lib._objc_msgSend_88(
      _lib._class_NSProgress1,
      _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
      keys.pointer,
      dependentKey.pointer,
    );
  }

  static NSArray classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_85(
      _lib._class_NSProgress1,
      _lib._sel_classFallbacksForKeyedArchiver1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSProgress1,
      _lib._sel_classForKeyedUnarchiver1,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

ffi.Pointer<objc.ObjCBlock> _ObjCBlock_ffiVoid_NSProgress_fnPtrTrampoline(
  ffi.Pointer<objc.ObjCBlock> block,
  ffi.Pointer<objc.ObjCObject> arg0,
) => block.ref.target
    .cast<
      ffi.NativeFunction<
        ffi.Pointer<objc.ObjCBlock> Function(ffi.Pointer<objc.ObjCObject> arg0)
      >
    >()
    .asFunction<
      ffi.Pointer<objc.ObjCBlock> Function(ffi.Pointer<objc.ObjCObject>)
    >()(arg0);
final _ObjCBlock_ffiVoid_NSProgress_closureRegistry =
    <int, ffi.Pointer<objc.ObjCBlock> Function(ffi.Pointer<objc.ObjCObject>)>{};
int _ObjCBlock_ffiVoid_NSProgress_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void> _ObjCBlock_ffiVoid_NSProgress_registerClosure(
  ffi.Pointer<objc.ObjCBlock> Function(ffi.Pointer<objc.ObjCObject>) fn,
) {
  final id = ++_ObjCBlock_ffiVoid_NSProgress_closureRegistryIndex;
  _ObjCBlock_ffiVoid_NSProgress_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

ffi.Pointer<objc.ObjCBlock> _ObjCBlock_ffiVoid_NSProgress_closureTrampoline(
  ffi.Pointer<objc.ObjCBlock> block,
  ffi.Pointer<objc.ObjCObject> arg0,
) => _ObjCBlock_ffiVoid_NSProgress_closureRegistry[block.ref.target.address]!(
  arg0,
);

class ObjCBlock_ffiVoid_NSProgress extends objc.ObjCBlockBase {
  ObjCBlock_ffiVoid_NSProgress._(
    ffi.Pointer<objc.ObjCBlock> pointer,
    this._lib, {
    bool retain = false,
    bool release = true,
  }) : super(pointer, retain: retain, release: release);

  AVFAudio _lib;

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_ffiVoid_NSProgress castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCBlock> pointer, {
    bool retain = false,
    bool release = false,
  }) {
    return ObjCBlock_ffiVoid_NSProgress._(
      pointer,
      lib,
      retain: retain,
      release: release,
    );
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSProgress.fromFunctionPointer(
    AVFAudio lib,
    ffi.Pointer<
      ffi.NativeFunction<
        ffi.Pointer<objc.ObjCBlock> Function(ffi.Pointer<objc.ObjCObject> arg0)
      >
    > ptr,
  ) : this._(objc.newBlock(
        _cFuncTrampoline ??=
            ffi.Pointer.fromFunction<
              ffi.Pointer<objc.ObjCBlock> Function(
                ffi.Pointer<objc.ObjCBlock>,
                ffi.Pointer<objc.ObjCObject>,
              )
            >(_ObjCBlock_ffiVoid_NSProgress_fnPtrTrampoline).cast(),
        ptr.cast(),
      ), lib);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSProgress.fromFunction(
    AVFAudio lib,
    ObjCBlock_ffiVoid? Function(NSProgress) fn,
  ) : this._(objc.newBlock(
        _dartFuncTrampoline ??=
            ffi.Pointer.fromFunction<
              ffi.Pointer<objc.ObjCBlock> Function(
                ffi.Pointer<objc.ObjCBlock>,
                ffi.Pointer<objc.ObjCObject>,
              )
            >(_ObjCBlock_ffiVoid_NSProgress_closureTrampoline).cast(),
        _ObjCBlock_ffiVoid_NSProgress_registerClosure((
          ffi.Pointer<objc.ObjCObject> arg0,
        ) =>
            fn(NSProgress._(
                  arg0,
                  lib,
                  retain: true,
                  release: true,
                ))?.retainAndReturnPointer() ??
                ffi.nullptr),
      ), lib);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  ObjCBlock_ffiVoid? call(NSProgress arg0) =>
      pointer.ref.invoke
                  .cast<
                    ffi.NativeFunction<
                      ffi.Pointer<objc.ObjCBlock> Function(
                        ffi.Pointer<objc.ObjCBlock> block,
                        ffi.Pointer<objc.ObjCObject> arg0,
                      )
                    >
                  >()
                  .asFunction<
                    ffi.Pointer<objc.ObjCBlock> Function(
                      ffi.Pointer<objc.ObjCBlock>,
                      ffi.Pointer<objc.ObjCObject>,
                    )
                  >()(pointer, arg0.pointer)
                  .address ==
              0
          ? null
          : ObjCBlock_ffiVoid._(pointer.ref.invoke
              .cast<
                ffi.NativeFunction<
                  ffi.Pointer<objc.ObjCBlock> Function(
                    ffi.Pointer<objc.ObjCBlock> block,
                    ffi.Pointer<objc.ObjCObject> arg0,
                  )
                >
              >()
              .asFunction<
                ffi.Pointer<objc.ObjCBlock> Function(
                  ffi.Pointer<objc.ObjCBlock>,
                  ffi.Pointer<objc.ObjCObject>,
                )
              >()(pointer, arg0.pointer), _lib, retain: false, release: true);
}

void _ObjCBlock_ffiVoid_NSData_NSError_fnPtrTrampoline(
  ffi.Pointer<objc.ObjCBlock> block,
  ffi.Pointer<objc.ObjCObject> arg0,
  ffi.Pointer<objc.ObjCObject> arg1,
) => block.ref.target
    .cast<
      ffi.NativeFunction<
        ffi.Void Function(
          ffi.Pointer<objc.ObjCObject> arg0,
          ffi.Pointer<objc.ObjCObject> arg1,
        )
      >
    >()
    .asFunction<
      void Function(ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)
    >()(arg0, arg1);
final _ObjCBlock_ffiVoid_NSData_NSError_closureRegistry =
    <
      int,
      void Function(ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)
    >{};
int _ObjCBlock_ffiVoid_NSData_NSError_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void> _ObjCBlock_ffiVoid_NSData_NSError_registerClosure(
  void Function(ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>) fn,
) {
  final id = ++_ObjCBlock_ffiVoid_NSData_NSError_closureRegistryIndex;
  _ObjCBlock_ffiVoid_NSData_NSError_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

void _ObjCBlock_ffiVoid_NSData_NSError_closureTrampoline(
  ffi.Pointer<objc.ObjCBlock> block,
  ffi.Pointer<objc.ObjCObject> arg0,
  ffi.Pointer<objc.ObjCObject> arg1,
) => _ObjCBlock_ffiVoid_NSData_NSError_closureRegistry[block
    .ref
    .target
    .address]!(arg0, arg1);

class ObjCBlock_ffiVoid_NSData_NSError extends objc.ObjCBlockBase {
  ObjCBlock_ffiVoid_NSData_NSError._(
    ffi.Pointer<objc.ObjCBlock> pointer,
    this._lib, {
    bool retain = false,
    bool release = true,
  }) : super(pointer, retain: retain, release: release);

  AVFAudio _lib;

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_ffiVoid_NSData_NSError castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCBlock> pointer, {
    bool retain = false,
    bool release = false,
  }) {
    return ObjCBlock_ffiVoid_NSData_NSError._(
      pointer,
      lib,
      retain: retain,
      release: release,
    );
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSData_NSError.fromFunctionPointer(
    AVFAudio lib,
    ffi.Pointer<
      ffi.NativeFunction<
        ffi.Void Function(
          ffi.Pointer<objc.ObjCObject> arg0,
          ffi.Pointer<objc.ObjCObject> arg1,
        )
      >
    > ptr,
  ) : this._(objc.newBlock(
        _cFuncTrampoline ??=
            ffi.Pointer.fromFunction<
              ffi.Void Function(
                ffi.Pointer<objc.ObjCBlock>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
              )
            >(_ObjCBlock_ffiVoid_NSData_NSError_fnPtrTrampoline).cast(),
        ptr.cast(),
      ), lib);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSData_NSError.fromFunction(
    AVFAudio lib,
    void Function(NSData?, NSError?) fn,
  ) : this._(objc.newBlock(
        _dartFuncTrampoline ??=
            ffi.Pointer.fromFunction<
              ffi.Void Function(
                ffi.Pointer<objc.ObjCBlock>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
              )
            >(_ObjCBlock_ffiVoid_NSData_NSError_closureTrampoline).cast(),
        _ObjCBlock_ffiVoid_NSData_NSError_registerClosure((
          ffi.Pointer<objc.ObjCObject> arg0,
          ffi.Pointer<objc.ObjCObject> arg1,
        ) => fn(
          arg0.address == 0
              ? null
              : NSData._(arg0, lib, retain: true, release: true),
          arg1.address == 0
              ? null
              : NSError._(arg1, lib, retain: true, release: true),
        )),
      ), lib);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_NSData_NSError.listener(
    AVFAudio lib,
    void Function(NSData?, NSError?) fn,
  ) : this._(objc.newBlock(
        (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
              ffi.Void Function(
                ffi.Pointer<objc.ObjCBlock>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
              )
            >.listener(
              _ObjCBlock_ffiVoid_NSData_NSError_closureTrampoline,
            )..keepIsolateAlive = false)
            .nativeFunction
            .cast(),
        _ObjCBlock_ffiVoid_NSData_NSError_registerClosure((
          ffi.Pointer<objc.ObjCObject> arg0,
          ffi.Pointer<objc.ObjCObject> arg1,
        ) => fn(
          arg0.address == 0
              ? null
              : NSData._(arg0, lib, retain: true, release: true),
          arg1.address == 0
              ? null
              : NSError._(arg1, lib, retain: true, release: true),
        )),
      ), lib);
  static ffi.NativeCallable<
    ffi.Void Function(
      ffi.Pointer<objc.ObjCBlock>,
      ffi.Pointer<objc.ObjCObject>,
      ffi.Pointer<objc.ObjCObject>,
    )
  >? _dartFuncListenerTrampoline;

  void call(NSData? arg0, NSError? arg1) => pointer.ref.invoke
      .cast<
        ffi.NativeFunction<
          ffi.Void Function(
            ffi.Pointer<objc.ObjCBlock> block,
            ffi.Pointer<objc.ObjCObject> arg0,
            ffi.Pointer<objc.ObjCObject> arg1,
          )
        >
      >()
      .asFunction<
        void Function(
          ffi.Pointer<objc.ObjCBlock>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCObject>,
        )
      >()(pointer, arg0?.pointer ?? ffi.nullptr, arg1?.pointer ?? ffi.nullptr);
}

abstract class NSItemProviderFileOptions {
  static const int NSItemProviderFileOptionOpenInPlace = 1;
}

ffi.Pointer<objc.ObjCObject>
_ObjCBlock_NSProgress_ffiVoidNSURLboolNSError_fnPtrTrampoline(
  ffi.Pointer<objc.ObjCBlock> block,
  ffi.Pointer<objc.ObjCBlock> arg0,
) => block.ref.target
    .cast<
      ffi.NativeFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCBlock> arg0)
      >
    >()
    .asFunction<
      ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCBlock>)
    >()(arg0);
final _ObjCBlock_NSProgress_ffiVoidNSURLboolNSError_closureRegistry =
    <int, ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCBlock>)>{};
int _ObjCBlock_NSProgress_ffiVoidNSURLboolNSError_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void>
_ObjCBlock_NSProgress_ffiVoidNSURLboolNSError_registerClosure(
  ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCBlock>) fn,
) {
  final id =
      ++_ObjCBlock_NSProgress_ffiVoidNSURLboolNSError_closureRegistryIndex;
  _ObjCBlock_NSProgress_ffiVoidNSURLboolNSError_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

ffi.Pointer<objc.ObjCObject>
_ObjCBlock_NSProgress_ffiVoidNSURLboolNSError_closureTrampoline(
  ffi.Pointer<objc.ObjCBlock> block,
  ffi.Pointer<objc.ObjCBlock> arg0,
) => _ObjCBlock_NSProgress_ffiVoidNSURLboolNSError_closureRegistry[block
    .ref
    .target
    .address]!(arg0);

class ObjCBlock_NSProgress_ffiVoidNSURLboolNSError extends objc.ObjCBlockBase {
  ObjCBlock_NSProgress_ffiVoidNSURLboolNSError._(
    ffi.Pointer<objc.ObjCBlock> pointer,
    this._lib, {
    bool retain = false,
    bool release = true,
  }) : super(pointer, retain: retain, release: release);

  AVFAudio _lib;

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_NSProgress_ffiVoidNSURLboolNSError castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCBlock> pointer, {
    bool retain = false,
    bool release = false,
  }) {
    return ObjCBlock_NSProgress_ffiVoidNSURLboolNSError._(
      pointer,
      lib,
      retain: retain,
      release: release,
    );
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_NSProgress_ffiVoidNSURLboolNSError.fromFunctionPointer(
    AVFAudio lib,
    ffi.Pointer<
      ffi.NativeFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCBlock> arg0)
      >
    > ptr,
  ) : this._(objc.newBlock(
        _cFuncTrampoline ??=
            ffi.Pointer.fromFunction<
              ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCBlock>,
                ffi.Pointer<objc.ObjCBlock>,
              )
            >(
              _ObjCBlock_NSProgress_ffiVoidNSURLboolNSError_fnPtrTrampoline,
            ).cast(),
        ptr.cast(),
      ), lib);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_NSProgress_ffiVoidNSURLboolNSError.fromFunction(
    AVFAudio lib,
    NSProgress? Function(ObjCBlock_ffiVoid_NSURL_bool_NSError) fn,
  ) : this._(objc.newBlock(
        _dartFuncTrampoline ??=
            ffi.Pointer.fromFunction<
              ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCBlock>,
                ffi.Pointer<objc.ObjCBlock>,
              )
            >(
              _ObjCBlock_NSProgress_ffiVoidNSURLboolNSError_closureTrampoline,
            ).cast(),
        _ObjCBlock_NSProgress_ffiVoidNSURLboolNSError_registerClosure((
          ffi.Pointer<objc.ObjCBlock> arg0,
        ) =>
            fn(ObjCBlock_ffiVoid_NSURL_bool_NSError._(
                  arg0,
                  lib,
                  retain: true,
                  release: true,
                ))?.retainAndReturnPointer() ??
                ffi.nullptr),
      ), lib);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  NSProgress? call(ObjCBlock_ffiVoid_NSURL_bool_NSError arg0) =>
      pointer.ref.invoke
                  .cast<
                    ffi.NativeFunction<
                      ffi.Pointer<objc.ObjCObject> Function(
                        ffi.Pointer<objc.ObjCBlock> block,
                        ffi.Pointer<objc.ObjCBlock> arg0,
                      )
                    >
                  >()
                  .asFunction<
                    ffi.Pointer<objc.ObjCObject> Function(
                      ffi.Pointer<objc.ObjCBlock>,
                      ffi.Pointer<objc.ObjCBlock>,
                    )
                  >()(pointer, arg0.pointer)
                  .address ==
              0
          ? null
          : NSProgress._(pointer.ref.invoke
              .cast<
                ffi.NativeFunction<
                  ffi.Pointer<objc.ObjCObject> Function(
                    ffi.Pointer<objc.ObjCBlock> block,
                    ffi.Pointer<objc.ObjCBlock> arg0,
                  )
                >
              >()
              .asFunction<
                ffi.Pointer<objc.ObjCObject> Function(
                  ffi.Pointer<objc.ObjCBlock>,
                  ffi.Pointer<objc.ObjCBlock>,
                )
              >()(pointer, arg0.pointer), _lib, retain: false, release: true);
}

void _ObjCBlock_ffiVoid_NSURL_bool_NSError_fnPtrTrampoline(
  ffi.Pointer<objc.ObjCBlock> block,
  ffi.Pointer<objc.ObjCObject> arg0,
  bool arg1,
  ffi.Pointer<objc.ObjCObject> arg2,
) => block.ref.target
    .cast<
      ffi.NativeFunction<
        ffi.Void Function(
          ffi.Pointer<objc.ObjCObject> arg0,
          ffi.Bool arg1,
          ffi.Pointer<objc.ObjCObject> arg2,
        )
      >
    >()
    .asFunction<
      void Function(
        ffi.Pointer<objc.ObjCObject>,
        bool,
        ffi.Pointer<objc.ObjCObject>,
      )
    >()(arg0, arg1, arg2);
final _ObjCBlock_ffiVoid_NSURL_bool_NSError_closureRegistry =
    <
      int,
      void Function(
        ffi.Pointer<objc.ObjCObject>,
        bool,
        ffi.Pointer<objc.ObjCObject>,
      )
    >{};
int _ObjCBlock_ffiVoid_NSURL_bool_NSError_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void> _ObjCBlock_ffiVoid_NSURL_bool_NSError_registerClosure(
  void Function(
    ffi.Pointer<objc.ObjCObject>,
    bool,
    ffi.Pointer<objc.ObjCObject>,
  ) fn,
) {
  final id = ++_ObjCBlock_ffiVoid_NSURL_bool_NSError_closureRegistryIndex;
  _ObjCBlock_ffiVoid_NSURL_bool_NSError_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

void _ObjCBlock_ffiVoid_NSURL_bool_NSError_closureTrampoline(
  ffi.Pointer<objc.ObjCBlock> block,
  ffi.Pointer<objc.ObjCObject> arg0,
  bool arg1,
  ffi.Pointer<objc.ObjCObject> arg2,
) => _ObjCBlock_ffiVoid_NSURL_bool_NSError_closureRegistry[block
    .ref
    .target
    .address]!(arg0, arg1, arg2);

class ObjCBlock_ffiVoid_NSURL_bool_NSError extends objc.ObjCBlockBase {
  ObjCBlock_ffiVoid_NSURL_bool_NSError._(
    ffi.Pointer<objc.ObjCBlock> pointer,
    this._lib, {
    bool retain = false,
    bool release = true,
  }) : super(pointer, retain: retain, release: release);

  AVFAudio _lib;

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_ffiVoid_NSURL_bool_NSError castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCBlock> pointer, {
    bool retain = false,
    bool release = false,
  }) {
    return ObjCBlock_ffiVoid_NSURL_bool_NSError._(
      pointer,
      lib,
      retain: retain,
      release: release,
    );
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSURL_bool_NSError.fromFunctionPointer(
    AVFAudio lib,
    ffi.Pointer<
      ffi.NativeFunction<
        ffi.Void Function(
          ffi.Pointer<objc.ObjCObject> arg0,
          ffi.Bool arg1,
          ffi.Pointer<objc.ObjCObject> arg2,
        )
      >
    > ptr,
  ) : this._(objc.newBlock(
        _cFuncTrampoline ??=
            ffi.Pointer.fromFunction<
              ffi.Void Function(
                ffi.Pointer<objc.ObjCBlock>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Bool,
                ffi.Pointer<objc.ObjCObject>,
              )
            >(_ObjCBlock_ffiVoid_NSURL_bool_NSError_fnPtrTrampoline).cast(),
        ptr.cast(),
      ), lib);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSURL_bool_NSError.fromFunction(
    AVFAudio lib,
    void Function(NSURL?, bool, NSError?) fn,
  ) : this._(objc.newBlock(
        _dartFuncTrampoline ??=
            ffi.Pointer.fromFunction<
              ffi.Void Function(
                ffi.Pointer<objc.ObjCBlock>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Bool,
                ffi.Pointer<objc.ObjCObject>,
              )
            >(_ObjCBlock_ffiVoid_NSURL_bool_NSError_closureTrampoline).cast(),
        _ObjCBlock_ffiVoid_NSURL_bool_NSError_registerClosure((
          ffi.Pointer<objc.ObjCObject> arg0,
          bool arg1,
          ffi.Pointer<objc.ObjCObject> arg2,
        ) => fn(
          arg0.address == 0
              ? null
              : NSURL._(arg0, lib, retain: true, release: true),
          arg1,
          arg2.address == 0
              ? null
              : NSError._(arg2, lib, retain: true, release: true),
        )),
      ), lib);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_NSURL_bool_NSError.listener(
    AVFAudio lib,
    void Function(NSURL?, bool, NSError?) fn,
  ) : this._(objc.newBlock(
        (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
              ffi.Void Function(
                ffi.Pointer<objc.ObjCBlock>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Bool,
                ffi.Pointer<objc.ObjCObject>,
              )
            >.listener(
              _ObjCBlock_ffiVoid_NSURL_bool_NSError_closureTrampoline,
            )..keepIsolateAlive = false)
            .nativeFunction
            .cast(),
        _ObjCBlock_ffiVoid_NSURL_bool_NSError_registerClosure((
          ffi.Pointer<objc.ObjCObject> arg0,
          bool arg1,
          ffi.Pointer<objc.ObjCObject> arg2,
        ) => fn(
          arg0.address == 0
              ? null
              : NSURL._(arg0, lib, retain: true, release: true),
          arg1,
          arg2.address == 0
              ? null
              : NSError._(arg2, lib, retain: true, release: true),
        )),
      ), lib);
  static ffi.NativeCallable<
    ffi.Void Function(
      ffi.Pointer<objc.ObjCBlock>,
      ffi.Pointer<objc.ObjCObject>,
      ffi.Bool,
      ffi.Pointer<objc.ObjCObject>,
    )
  >? _dartFuncListenerTrampoline;

  void call(NSURL? arg0, bool arg1, NSError? arg2) => pointer.ref.invoke
      .cast<
        ffi.NativeFunction<
          ffi.Void Function(
            ffi.Pointer<objc.ObjCBlock> block,
            ffi.Pointer<objc.ObjCObject> arg0,
            ffi.Bool arg1,
            ffi.Pointer<objc.ObjCObject> arg2,
          )
        >
      >()
      .asFunction<
        void Function(
          ffi.Pointer<objc.ObjCBlock>,
          ffi.Pointer<objc.ObjCObject>,
          bool,
          ffi.Pointer<objc.ObjCObject>,
        )
      >()(
    pointer,
    arg0?.pointer ?? ffi.nullptr,
    arg1,
    arg2?.pointer ?? ffi.nullptr,
  );
}

void _ObjCBlock_ffiVoid_NSURL_NSError_fnPtrTrampoline(
  ffi.Pointer<objc.ObjCBlock> block,
  ffi.Pointer<objc.ObjCObject> arg0,
  ffi.Pointer<objc.ObjCObject> arg1,
) => block.ref.target
    .cast<
      ffi.NativeFunction<
        ffi.Void Function(
          ffi.Pointer<objc.ObjCObject> arg0,
          ffi.Pointer<objc.ObjCObject> arg1,
        )
      >
    >()
    .asFunction<
      void Function(ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)
    >()(arg0, arg1);
final _ObjCBlock_ffiVoid_NSURL_NSError_closureRegistry =
    <
      int,
      void Function(ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)
    >{};
int _ObjCBlock_ffiVoid_NSURL_NSError_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void> _ObjCBlock_ffiVoid_NSURL_NSError_registerClosure(
  void Function(ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>) fn,
) {
  final id = ++_ObjCBlock_ffiVoid_NSURL_NSError_closureRegistryIndex;
  _ObjCBlock_ffiVoid_NSURL_NSError_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

void _ObjCBlock_ffiVoid_NSURL_NSError_closureTrampoline(
  ffi.Pointer<objc.ObjCBlock> block,
  ffi.Pointer<objc.ObjCObject> arg0,
  ffi.Pointer<objc.ObjCObject> arg1,
) => _ObjCBlock_ffiVoid_NSURL_NSError_closureRegistry[block
    .ref
    .target
    .address]!(arg0, arg1);

class ObjCBlock_ffiVoid_NSURL_NSError extends objc.ObjCBlockBase {
  ObjCBlock_ffiVoid_NSURL_NSError._(
    ffi.Pointer<objc.ObjCBlock> pointer,
    this._lib, {
    bool retain = false,
    bool release = true,
  }) : super(pointer, retain: retain, release: release);

  AVFAudio _lib;

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_ffiVoid_NSURL_NSError castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCBlock> pointer, {
    bool retain = false,
    bool release = false,
  }) {
    return ObjCBlock_ffiVoid_NSURL_NSError._(
      pointer,
      lib,
      retain: retain,
      release: release,
    );
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSURL_NSError.fromFunctionPointer(
    AVFAudio lib,
    ffi.Pointer<
      ffi.NativeFunction<
        ffi.Void Function(
          ffi.Pointer<objc.ObjCObject> arg0,
          ffi.Pointer<objc.ObjCObject> arg1,
        )
      >
    > ptr,
  ) : this._(objc.newBlock(
        _cFuncTrampoline ??=
            ffi.Pointer.fromFunction<
              ffi.Void Function(
                ffi.Pointer<objc.ObjCBlock>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
              )
            >(_ObjCBlock_ffiVoid_NSURL_NSError_fnPtrTrampoline).cast(),
        ptr.cast(),
      ), lib);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSURL_NSError.fromFunction(
    AVFAudio lib,
    void Function(NSURL?, NSError?) fn,
  ) : this._(objc.newBlock(
        _dartFuncTrampoline ??=
            ffi.Pointer.fromFunction<
              ffi.Void Function(
                ffi.Pointer<objc.ObjCBlock>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
              )
            >(_ObjCBlock_ffiVoid_NSURL_NSError_closureTrampoline).cast(),
        _ObjCBlock_ffiVoid_NSURL_NSError_registerClosure((
          ffi.Pointer<objc.ObjCObject> arg0,
          ffi.Pointer<objc.ObjCObject> arg1,
        ) => fn(
          arg0.address == 0
              ? null
              : NSURL._(arg0, lib, retain: true, release: true),
          arg1.address == 0
              ? null
              : NSError._(arg1, lib, retain: true, release: true),
        )),
      ), lib);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_NSURL_NSError.listener(
    AVFAudio lib,
    void Function(NSURL?, NSError?) fn,
  ) : this._(objc.newBlock(
        (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
              ffi.Void Function(
                ffi.Pointer<objc.ObjCBlock>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
              )
            >.listener(
              _ObjCBlock_ffiVoid_NSURL_NSError_closureTrampoline,
            )..keepIsolateAlive = false)
            .nativeFunction
            .cast(),
        _ObjCBlock_ffiVoid_NSURL_NSError_registerClosure((
          ffi.Pointer<objc.ObjCObject> arg0,
          ffi.Pointer<objc.ObjCObject> arg1,
        ) => fn(
          arg0.address == 0
              ? null
              : NSURL._(arg0, lib, retain: true, release: true),
          arg1.address == 0
              ? null
              : NSError._(arg1, lib, retain: true, release: true),
        )),
      ), lib);
  static ffi.NativeCallable<
    ffi.Void Function(
      ffi.Pointer<objc.ObjCBlock>,
      ffi.Pointer<objc.ObjCObject>,
      ffi.Pointer<objc.ObjCObject>,
    )
  >? _dartFuncListenerTrampoline;

  void call(NSURL? arg0, NSError? arg1) => pointer.ref.invoke
      .cast<
        ffi.NativeFunction<
          ffi.Void Function(
            ffi.Pointer<objc.ObjCBlock> block,
            ffi.Pointer<objc.ObjCObject> arg0,
            ffi.Pointer<objc.ObjCObject> arg1,
          )
        >
      >()
      .asFunction<
        void Function(
          ffi.Pointer<objc.ObjCBlock>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCObject>,
        )
      >()(pointer, arg0?.pointer ?? ffi.nullptr, arg1?.pointer ?? ffi.nullptr);
}

ffi.Pointer<objc.ObjCObject>
_ObjCBlock_NSProgress_ffiVoidobjcObjCObjectNSError_fnPtrTrampoline(
  ffi.Pointer<objc.ObjCBlock> block,
  ffi.Pointer<objc.ObjCBlock> arg0,
) => block.ref.target
    .cast<
      ffi.NativeFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCBlock> arg0)
      >
    >()
    .asFunction<
      ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCBlock>)
    >()(arg0);
final _ObjCBlock_NSProgress_ffiVoidobjcObjCObjectNSError_closureRegistry =
    <int, ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCBlock>)>{};
int _ObjCBlock_NSProgress_ffiVoidobjcObjCObjectNSError_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void>
_ObjCBlock_NSProgress_ffiVoidobjcObjCObjectNSError_registerClosure(
  ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCBlock>) fn,
) {
  final id =
      ++_ObjCBlock_NSProgress_ffiVoidobjcObjCObjectNSError_closureRegistryIndex;
  _ObjCBlock_NSProgress_ffiVoidobjcObjCObjectNSError_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

ffi.Pointer<objc.ObjCObject>
_ObjCBlock_NSProgress_ffiVoidobjcObjCObjectNSError_closureTrampoline(
  ffi.Pointer<objc.ObjCBlock> block,
  ffi.Pointer<objc.ObjCBlock> arg0,
) => _ObjCBlock_NSProgress_ffiVoidobjcObjCObjectNSError_closureRegistry[block
    .ref
    .target
    .address]!(arg0);

class ObjCBlock_NSProgress_ffiVoidobjcObjCObjectNSError
    extends objc.ObjCBlockBase {
  ObjCBlock_NSProgress_ffiVoidobjcObjCObjectNSError._(
    ffi.Pointer<objc.ObjCBlock> pointer,
    this._lib, {
    bool retain = false,
    bool release = true,
  }) : super(pointer, retain: retain, release: release);

  AVFAudio _lib;

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_NSProgress_ffiVoidobjcObjCObjectNSError castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCBlock> pointer, {
    bool retain = false,
    bool release = false,
  }) {
    return ObjCBlock_NSProgress_ffiVoidobjcObjCObjectNSError._(
      pointer,
      lib,
      retain: retain,
      release: release,
    );
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_NSProgress_ffiVoidobjcObjCObjectNSError.fromFunctionPointer(
    AVFAudio lib,
    ffi.Pointer<
      ffi.NativeFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCBlock> arg0)
      >
    > ptr,
  ) : this._(objc.newBlock(
        _cFuncTrampoline ??=
            ffi.Pointer.fromFunction<
              ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCBlock>,
                ffi.Pointer<objc.ObjCBlock>,
              )
            >(
              _ObjCBlock_NSProgress_ffiVoidobjcObjCObjectNSError_fnPtrTrampoline,
            ).cast(),
        ptr.cast(),
      ), lib);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_NSProgress_ffiVoidobjcObjCObjectNSError.fromFunction(
    AVFAudio lib,
    NSProgress? Function(ObjCBlock_ffiVoid_objcObjCObject_NSError) fn,
  ) : this._(objc.newBlock(
        _dartFuncTrampoline ??=
            ffi.Pointer.fromFunction<
              ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCBlock>,
                ffi.Pointer<objc.ObjCBlock>,
              )
            >(
              _ObjCBlock_NSProgress_ffiVoidobjcObjCObjectNSError_closureTrampoline,
            ).cast(),
        _ObjCBlock_NSProgress_ffiVoidobjcObjCObjectNSError_registerClosure((
          ffi.Pointer<objc.ObjCBlock> arg0,
        ) =>
            fn(ObjCBlock_ffiVoid_objcObjCObject_NSError._(
                  arg0,
                  lib,
                  retain: true,
                  release: true,
                ))?.retainAndReturnPointer() ??
                ffi.nullptr),
      ), lib);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  NSProgress? call(ObjCBlock_ffiVoid_objcObjCObject_NSError arg0) =>
      pointer.ref.invoke
                  .cast<
                    ffi.NativeFunction<
                      ffi.Pointer<objc.ObjCObject> Function(
                        ffi.Pointer<objc.ObjCBlock> block,
                        ffi.Pointer<objc.ObjCBlock> arg0,
                      )
                    >
                  >()
                  .asFunction<
                    ffi.Pointer<objc.ObjCObject> Function(
                      ffi.Pointer<objc.ObjCBlock>,
                      ffi.Pointer<objc.ObjCBlock>,
                    )
                  >()(pointer, arg0.pointer)
                  .address ==
              0
          ? null
          : NSProgress._(pointer.ref.invoke
              .cast<
                ffi.NativeFunction<
                  ffi.Pointer<objc.ObjCObject> Function(
                    ffi.Pointer<objc.ObjCBlock> block,
                    ffi.Pointer<objc.ObjCBlock> arg0,
                  )
                >
              >()
              .asFunction<
                ffi.Pointer<objc.ObjCObject> Function(
                  ffi.Pointer<objc.ObjCBlock>,
                  ffi.Pointer<objc.ObjCBlock>,
                )
              >()(pointer, arg0.pointer), _lib, retain: false, release: true);
}

void _ObjCBlock_ffiVoid_objcObjCObject_NSError_fnPtrTrampoline(
  ffi.Pointer<objc.ObjCBlock> block,
  ffi.Pointer<objc.ObjCObject> arg0,
  ffi.Pointer<objc.ObjCObject> arg1,
) => block.ref.target
    .cast<
      ffi.NativeFunction<
        ffi.Void Function(
          ffi.Pointer<objc.ObjCObject> arg0,
          ffi.Pointer<objc.ObjCObject> arg1,
        )
      >
    >()
    .asFunction<
      void Function(ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)
    >()(arg0, arg1);
final _ObjCBlock_ffiVoid_objcObjCObject_NSError_closureRegistry =
    <
      int,
      void Function(ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)
    >{};
int _ObjCBlock_ffiVoid_objcObjCObject_NSError_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void> _ObjCBlock_ffiVoid_objcObjCObject_NSError_registerClosure(
  void Function(ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>) fn,
) {
  final id = ++_ObjCBlock_ffiVoid_objcObjCObject_NSError_closureRegistryIndex;
  _ObjCBlock_ffiVoid_objcObjCObject_NSError_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

void _ObjCBlock_ffiVoid_objcObjCObject_NSError_closureTrampoline(
  ffi.Pointer<objc.ObjCBlock> block,
  ffi.Pointer<objc.ObjCObject> arg0,
  ffi.Pointer<objc.ObjCObject> arg1,
) => _ObjCBlock_ffiVoid_objcObjCObject_NSError_closureRegistry[block
    .ref
    .target
    .address]!(arg0, arg1);

class ObjCBlock_ffiVoid_objcObjCObject_NSError extends objc.ObjCBlockBase {
  ObjCBlock_ffiVoid_objcObjCObject_NSError._(
    ffi.Pointer<objc.ObjCBlock> pointer,
    this._lib, {
    bool retain = false,
    bool release = true,
  }) : super(pointer, retain: retain, release: release);

  AVFAudio _lib;

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_ffiVoid_objcObjCObject_NSError castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCBlock> pointer, {
    bool retain = false,
    bool release = false,
  }) {
    return ObjCBlock_ffiVoid_objcObjCObject_NSError._(
      pointer,
      lib,
      retain: retain,
      release: release,
    );
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_objcObjCObject_NSError.fromFunctionPointer(
    AVFAudio lib,
    ffi.Pointer<
      ffi.NativeFunction<
        ffi.Void Function(
          ffi.Pointer<objc.ObjCObject> arg0,
          ffi.Pointer<objc.ObjCObject> arg1,
        )
      >
    > ptr,
  ) : this._(objc.newBlock(
        _cFuncTrampoline ??=
            ffi.Pointer.fromFunction<
              ffi.Void Function(
                ffi.Pointer<objc.ObjCBlock>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
              )
            >(_ObjCBlock_ffiVoid_objcObjCObject_NSError_fnPtrTrampoline).cast(),
        ptr.cast(),
      ), lib);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_objcObjCObject_NSError.fromFunction(
    AVFAudio lib,
    void Function(NSObject?, NSError?) fn,
  ) : this._(objc.newBlock(
        _dartFuncTrampoline ??=
            ffi.Pointer.fromFunction<
              ffi.Void Function(
                ffi.Pointer<objc.ObjCBlock>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
              )
            >(
              _ObjCBlock_ffiVoid_objcObjCObject_NSError_closureTrampoline,
            ).cast(),
        _ObjCBlock_ffiVoid_objcObjCObject_NSError_registerClosure((
          ffi.Pointer<objc.ObjCObject> arg0,
          ffi.Pointer<objc.ObjCObject> arg1,
        ) => fn(
          arg0.address == 0
              ? null
              : NSObject._(arg0, lib, retain: true, release: true),
          arg1.address == 0
              ? null
              : NSError._(arg1, lib, retain: true, release: true),
        )),
      ), lib);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_objcObjCObject_NSError.listener(
    AVFAudio lib,
    void Function(NSObject?, NSError?) fn,
  ) : this._(objc.newBlock(
        (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
              ffi.Void Function(
                ffi.Pointer<objc.ObjCBlock>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
              )
            >.listener(
              _ObjCBlock_ffiVoid_objcObjCObject_NSError_closureTrampoline,
            )..keepIsolateAlive = false)
            .nativeFunction
            .cast(),
        _ObjCBlock_ffiVoid_objcObjCObject_NSError_registerClosure((
          ffi.Pointer<objc.ObjCObject> arg0,
          ffi.Pointer<objc.ObjCObject> arg1,
        ) => fn(
          arg0.address == 0
              ? null
              : NSObject._(arg0, lib, retain: true, release: true),
          arg1.address == 0
              ? null
              : NSError._(arg1, lib, retain: true, release: true),
        )),
      ), lib);
  static ffi.NativeCallable<
    ffi.Void Function(
      ffi.Pointer<objc.ObjCBlock>,
      ffi.Pointer<objc.ObjCObject>,
      ffi.Pointer<objc.ObjCObject>,
    )
  >? _dartFuncListenerTrampoline;

  void call(NSObject? arg0, NSError? arg1) => pointer.ref.invoke
      .cast<
        ffi.NativeFunction<
          ffi.Void Function(
            ffi.Pointer<objc.ObjCBlock> block,
            ffi.Pointer<objc.ObjCObject> arg0,
            ffi.Pointer<objc.ObjCObject> arg1,
          )
        >
      >()
      .asFunction<
        void Function(
          ffi.Pointer<objc.ObjCBlock>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCObject>,
        )
      >()(pointer, arg0?.pointer ?? ffi.nullptr, arg1?.pointer ?? ffi.nullptr);
}

void
_ObjCBlock_ffiVoid_ffiVoidobjcObjCObjectNSError_objcObjCObject_NSDictionary_fnPtrTrampoline(
  ffi.Pointer<objc.ObjCBlock> block,
  ffi.Pointer<objc.ObjCBlock> arg0,
  ffi.Pointer<objc.ObjCObject> arg1,
  ffi.Pointer<objc.ObjCObject> arg2,
) => block.ref.target
    .cast<
      ffi.NativeFunction<
        ffi.Void Function(
          ffi.Pointer<objc.ObjCBlock> arg0,
          ffi.Pointer<objc.ObjCObject> arg1,
          ffi.Pointer<objc.ObjCObject> arg2,
        )
      >
    >()
    .asFunction<
      void Function(
        ffi.Pointer<objc.ObjCBlock>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >()(arg0, arg1, arg2);
final _ObjCBlock_ffiVoid_ffiVoidobjcObjCObjectNSError_objcObjCObject_NSDictionary_closureRegistry =
    <
      int,
      void Function(
        ffi.Pointer<objc.ObjCBlock>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >{};
int
_ObjCBlock_ffiVoid_ffiVoidobjcObjCObjectNSError_objcObjCObject_NSDictionary_closureRegistryIndex =
    0;
ffi.Pointer<ffi.Void>
_ObjCBlock_ffiVoid_ffiVoidobjcObjCObjectNSError_objcObjCObject_NSDictionary_registerClosure(
  void Function(
    ffi.Pointer<objc.ObjCBlock>,
    ffi.Pointer<objc.ObjCObject>,
    ffi.Pointer<objc.ObjCObject>,
  ) fn,
) {
  final id =
      ++_ObjCBlock_ffiVoid_ffiVoidobjcObjCObjectNSError_objcObjCObject_NSDictionary_closureRegistryIndex;
  _ObjCBlock_ffiVoid_ffiVoidobjcObjCObjectNSError_objcObjCObject_NSDictionary_closureRegistry[id] =
      fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

void
_ObjCBlock_ffiVoid_ffiVoidobjcObjCObjectNSError_objcObjCObject_NSDictionary_closureTrampoline(
  ffi.Pointer<objc.ObjCBlock> block,
  ffi.Pointer<objc.ObjCBlock> arg0,
  ffi.Pointer<objc.ObjCObject> arg1,
  ffi.Pointer<objc.ObjCObject> arg2,
) =>
    _ObjCBlock_ffiVoid_ffiVoidobjcObjCObjectNSError_objcObjCObject_NSDictionary_closureRegistry[block
        .ref
        .target
        .address]!(arg0, arg1, arg2);

class ObjCBlock_ffiVoid_ffiVoidobjcObjCObjectNSError_objcObjCObject_NSDictionary
    extends objc.ObjCBlockBase {
  ObjCBlock_ffiVoid_ffiVoidobjcObjCObjectNSError_objcObjCObject_NSDictionary._(
    ffi.Pointer<objc.ObjCBlock> pointer,
    this._lib, {
    bool retain = false,
    bool release = true,
  }) : super(pointer, retain: retain, release: release);

  AVFAudio _lib;

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_ffiVoid_ffiVoidobjcObjCObjectNSError_objcObjCObject_NSDictionary
  castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCBlock> pointer, {
    bool retain = false,
    bool release = false,
  }) {
    return ObjCBlock_ffiVoid_ffiVoidobjcObjCObjectNSError_objcObjCObject_NSDictionary._(
      pointer,
      lib,
      retain: retain,
      release: release,
    );
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_ffiVoidobjcObjCObjectNSError_objcObjCObject_NSDictionary.fromFunctionPointer(
    AVFAudio lib,
    ffi.Pointer<
      ffi.NativeFunction<
        ffi.Void Function(
          ffi.Pointer<objc.ObjCBlock> arg0,
          ffi.Pointer<objc.ObjCObject> arg1,
          ffi.Pointer<objc.ObjCObject> arg2,
        )
      >
    > ptr,
  ) : this._(objc.newBlock(
        _cFuncTrampoline ??=
            ffi.Pointer.fromFunction<
              ffi.Void Function(
                ffi.Pointer<objc.ObjCBlock>,
                ffi.Pointer<objc.ObjCBlock>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
              )
            >(
              _ObjCBlock_ffiVoid_ffiVoidobjcObjCObjectNSError_objcObjCObject_NSDictionary_fnPtrTrampoline,
            ).cast(),
        ptr.cast(),
      ), lib);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_ffiVoidobjcObjCObjectNSError_objcObjCObject_NSDictionary.fromFunction(
    AVFAudio lib,
    void Function(
      ObjCBlock_ffiVoid_objcObjCObject_NSError1,
      NSObject,
      NSDictionary,
    ) fn,
  ) : this._(objc.newBlock(
        _dartFuncTrampoline ??=
            ffi.Pointer.fromFunction<
              ffi.Void Function(
                ffi.Pointer<objc.ObjCBlock>,
                ffi.Pointer<objc.ObjCBlock>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
              )
            >(
              _ObjCBlock_ffiVoid_ffiVoidobjcObjCObjectNSError_objcObjCObject_NSDictionary_closureTrampoline,
            ).cast(),
        _ObjCBlock_ffiVoid_ffiVoidobjcObjCObjectNSError_objcObjCObject_NSDictionary_registerClosure(
          (
            ffi.Pointer<objc.ObjCBlock> arg0,
            ffi.Pointer<objc.ObjCObject> arg1,
            ffi.Pointer<objc.ObjCObject> arg2,
          ) => fn(
            ObjCBlock_ffiVoid_objcObjCObject_NSError1._(
              arg0,
              lib,
              retain: true,
              release: true,
            ),
            NSObject._(arg1, lib, retain: true, release: true),
            NSDictionary._(arg2, lib, retain: true, release: true),
          ),
        ),
      ), lib);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_ffiVoidobjcObjCObjectNSError_objcObjCObject_NSDictionary.listener(
    AVFAudio lib,
    void Function(
      ObjCBlock_ffiVoid_objcObjCObject_NSError1,
      NSObject,
      NSDictionary,
    ) fn,
  ) : this._(objc.newBlock(
        (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
              ffi.Void Function(
                ffi.Pointer<objc.ObjCBlock>,
                ffi.Pointer<objc.ObjCBlock>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
              )
            >.listener(
              _ObjCBlock_ffiVoid_ffiVoidobjcObjCObjectNSError_objcObjCObject_NSDictionary_closureTrampoline,
            )..keepIsolateAlive = false)
            .nativeFunction
            .cast(),
        _ObjCBlock_ffiVoid_ffiVoidobjcObjCObjectNSError_objcObjCObject_NSDictionary_registerClosure(
          (
            ffi.Pointer<objc.ObjCBlock> arg0,
            ffi.Pointer<objc.ObjCObject> arg1,
            ffi.Pointer<objc.ObjCObject> arg2,
          ) => fn(
            ObjCBlock_ffiVoid_objcObjCObject_NSError1._(
              arg0,
              lib,
              retain: true,
              release: true,
            ),
            NSObject._(arg1, lib, retain: true, release: true),
            NSDictionary._(arg2, lib, retain: true, release: true),
          ),
        ),
      ), lib);
  static ffi.NativeCallable<
    ffi.Void Function(
      ffi.Pointer<objc.ObjCBlock>,
      ffi.Pointer<objc.ObjCBlock>,
      ffi.Pointer<objc.ObjCObject>,
      ffi.Pointer<objc.ObjCObject>,
    )
  >? _dartFuncListenerTrampoline;

  void call(
    ObjCBlock_ffiVoid_objcObjCObject_NSError1 arg0,
    NSObject arg1,
    NSDictionary arg2,
  ) => pointer.ref.invoke
      .cast<
        ffi.NativeFunction<
          ffi.Void Function(
            ffi.Pointer<objc.ObjCBlock> block,
            ffi.Pointer<objc.ObjCBlock> arg0,
            ffi.Pointer<objc.ObjCObject> arg1,
            ffi.Pointer<objc.ObjCObject> arg2,
          )
        >
      >()
      .asFunction<
        void Function(
          ffi.Pointer<objc.ObjCBlock>,
          ffi.Pointer<objc.ObjCBlock>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCObject>,
        )
      >()(pointer, arg0.pointer, arg1.pointer, arg2.pointer);
}

void _ObjCBlock_ffiVoid_objcObjCObject_NSError1_fnPtrTrampoline(
  ffi.Pointer<objc.ObjCBlock> block,
  ffi.Pointer<objc.ObjCObject> arg0,
  ffi.Pointer<objc.ObjCObject> arg1,
) => block.ref.target
    .cast<
      ffi.NativeFunction<
        ffi.Void Function(
          ffi.Pointer<objc.ObjCObject> arg0,
          ffi.Pointer<objc.ObjCObject> arg1,
        )
      >
    >()
    .asFunction<
      void Function(ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)
    >()(arg0, arg1);
final _ObjCBlock_ffiVoid_objcObjCObject_NSError1_closureRegistry =
    <
      int,
      void Function(ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)
    >{};
int _ObjCBlock_ffiVoid_objcObjCObject_NSError1_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void>
_ObjCBlock_ffiVoid_objcObjCObject_NSError1_registerClosure(
  void Function(ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>) fn,
) {
  final id = ++_ObjCBlock_ffiVoid_objcObjCObject_NSError1_closureRegistryIndex;
  _ObjCBlock_ffiVoid_objcObjCObject_NSError1_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

void _ObjCBlock_ffiVoid_objcObjCObject_NSError1_closureTrampoline(
  ffi.Pointer<objc.ObjCBlock> block,
  ffi.Pointer<objc.ObjCObject> arg0,
  ffi.Pointer<objc.ObjCObject> arg1,
) => _ObjCBlock_ffiVoid_objcObjCObject_NSError1_closureRegistry[block
    .ref
    .target
    .address]!(arg0, arg1);

class ObjCBlock_ffiVoid_objcObjCObject_NSError1 extends objc.ObjCBlockBase {
  ObjCBlock_ffiVoid_objcObjCObject_NSError1._(
    ffi.Pointer<objc.ObjCBlock> pointer,
    this._lib, {
    bool retain = false,
    bool release = true,
  }) : super(pointer, retain: retain, release: release);

  AVFAudio _lib;

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_ffiVoid_objcObjCObject_NSError1 castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCBlock> pointer, {
    bool retain = false,
    bool release = false,
  }) {
    return ObjCBlock_ffiVoid_objcObjCObject_NSError1._(
      pointer,
      lib,
      retain: retain,
      release: release,
    );
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_objcObjCObject_NSError1.fromFunctionPointer(
    AVFAudio lib,
    ffi.Pointer<
      ffi.NativeFunction<
        ffi.Void Function(
          ffi.Pointer<objc.ObjCObject> arg0,
          ffi.Pointer<objc.ObjCObject> arg1,
        )
      >
    > ptr,
  ) : this._(objc.newBlock(
        _cFuncTrampoline ??=
            ffi.Pointer.fromFunction<
              ffi.Void Function(
                ffi.Pointer<objc.ObjCBlock>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
              )
            >(
              _ObjCBlock_ffiVoid_objcObjCObject_NSError1_fnPtrTrampoline,
            ).cast(),
        ptr.cast(),
      ), lib);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_objcObjCObject_NSError1.fromFunction(
    AVFAudio lib,
    void Function(NSObject?, NSError) fn,
  ) : this._(objc.newBlock(
        _dartFuncTrampoline ??=
            ffi.Pointer.fromFunction<
              ffi.Void Function(
                ffi.Pointer<objc.ObjCBlock>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
              )
            >(
              _ObjCBlock_ffiVoid_objcObjCObject_NSError1_closureTrampoline,
            ).cast(),
        _ObjCBlock_ffiVoid_objcObjCObject_NSError1_registerClosure((
          ffi.Pointer<objc.ObjCObject> arg0,
          ffi.Pointer<objc.ObjCObject> arg1,
        ) => fn(
          arg0.address == 0
              ? null
              : NSObject._(arg0, lib, retain: true, release: true),
          NSError._(arg1, lib, retain: true, release: true),
        )),
      ), lib);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_objcObjCObject_NSError1.listener(
    AVFAudio lib,
    void Function(NSObject?, NSError) fn,
  ) : this._(objc.newBlock(
        (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
              ffi.Void Function(
                ffi.Pointer<objc.ObjCBlock>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
              )
            >.listener(
              _ObjCBlock_ffiVoid_objcObjCObject_NSError1_closureTrampoline,
            )..keepIsolateAlive = false)
            .nativeFunction
            .cast(),
        _ObjCBlock_ffiVoid_objcObjCObject_NSError1_registerClosure((
          ffi.Pointer<objc.ObjCObject> arg0,
          ffi.Pointer<objc.ObjCObject> arg1,
        ) => fn(
          arg0.address == 0
              ? null
              : NSObject._(arg0, lib, retain: true, release: true),
          NSError._(arg1, lib, retain: true, release: true),
        )),
      ), lib);
  static ffi.NativeCallable<
    ffi.Void Function(
      ffi.Pointer<objc.ObjCBlock>,
      ffi.Pointer<objc.ObjCObject>,
      ffi.Pointer<objc.ObjCObject>,
    )
  >? _dartFuncListenerTrampoline;

  void call(NSObject? arg0, NSError arg1) => pointer.ref.invoke
      .cast<
        ffi.NativeFunction<
          ffi.Void Function(
            ffi.Pointer<objc.ObjCBlock> block,
            ffi.Pointer<objc.ObjCObject> arg0,
            ffi.Pointer<objc.ObjCObject> arg1,
          )
        >
      >()
      .asFunction<
        void Function(
          ffi.Pointer<objc.ObjCBlock>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCObject>,
        )
      >()(pointer, arg0?.pointer ?? ffi.nullptr, arg1.pointer);
}

class NSMutableString extends NSString {
  NSMutableString._(
    ffi.Pointer<objc.ObjCObject> pointer,
    AVFAudio lib, {
    bool retain = false,
    bool release = false,
  }) : super._(pointer, lib, retain: retain, release: release);

  /// Returns a [NSMutableString] that points to the same underlying object as [other].
  static NSMutableString castFrom<T extends objc.ObjCObjectBase>(
    AVFAudio lib,
    T other,
  ) {
    return NSMutableString._(other.pointer, lib, retain: true, release: true);
  }

  /// Returns a [NSMutableString] that wraps the given raw object pointer.
  static NSMutableString castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCObject> other, {
    bool retain = false,
    bool release = false,
  }) {
    return NSMutableString._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSMutableString].
  static bool isInstance(AVFAudio lib, objc.ObjCObjectBase obj) {
    return lib._objc_msgSend_0(
      obj.pointer,
      lib._sel_isKindOfClass_1,
      lib._class_NSMutableString1,
    );
  }

  void replaceCharactersInRange_withString_(_NSRange range, NSString aString) {
    _lib._objc_msgSend_689(
      this.pointer,
      _lib._sel_replaceCharactersInRange_withString_1,
      range,
      aString.pointer,
    );
  }

  void insertString_atIndex_(NSString aString, int loc) {
    _lib._objc_msgSend_690(
      this.pointer,
      _lib._sel_insertString_atIndex_1,
      aString.pointer,
      loc,
    );
  }

  void deleteCharactersInRange_(_NSRange range) {
    _lib._objc_msgSend_476(
      this.pointer,
      _lib._sel_deleteCharactersInRange_1,
      range,
    );
  }

  void appendString_(NSString aString) {
    _lib._objc_msgSend_247(
      this.pointer,
      _lib._sel_appendString_1,
      aString.pointer,
    );
  }

  void appendFormat_(NSString format) {
    _lib._objc_msgSend_247(
      this.pointer,
      _lib._sel_appendFormat_1,
      format.pointer,
    );
  }

  void setString_(NSString aString) {
    _lib._objc_msgSend_247(
      this.pointer,
      _lib._sel_setString_1,
      aString.pointer,
    );
  }

  int replaceOccurrencesOfString_withString_options_range_(
    NSString target,
    NSString replacement,
    int options,
    _NSRange searchRange,
  ) {
    return _lib._objc_msgSend_691(
      this.pointer,
      _lib._sel_replaceOccurrencesOfString_withString_options_range_1,
      target.pointer,
      replacement.pointer,
      options,
      searchRange,
    );
  }

  bool applyTransform_reverse_range_updatedRange_(
    NSString transform,
    bool reverse,
    _NSRange range,
    ffi.Pointer<_NSRange> resultingRange,
  ) {
    return _lib._objc_msgSend_692(
      this.pointer,
      _lib._sel_applyTransform_reverse_range_updatedRange_1,
      transform.pointer,
      reverse,
      range,
      resultingRange,
    );
  }

  NSMutableString initWithCapacity_(int capacity) {
    final _ret = _lib._objc_msgSend_693(
      this.pointer,
      _lib._sel_initWithCapacity_1,
      capacity,
    );
    return NSMutableString._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableString stringWithCapacity_(AVFAudio _lib, int capacity) {
    final _ret = _lib._objc_msgSend_693(
      _lib._class_NSMutableString1,
      _lib._sel_stringWithCapacity_1,
      capacity,
    );
    return NSMutableString._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSMutableString init() {
    final _ret = _lib._objc_msgSend_2(this.pointer, _lib._sel_init1);
    return NSMutableString._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSMutableString? initWithCoder_(NSCoder coder) {
    final _ret = _lib._objc_msgSend_47(
      this.pointer,
      _lib._sel_initWithCoder_1,
      coder.pointer,
    );
    return _ret.address == 0
        ? null
        : NSMutableString._(_ret, _lib, retain: true, release: true);
  }

  static ffi.Pointer<ffi.UnsignedLong> getAvailableStringEncodings(
    AVFAudio _lib,
  ) {
    return _lib._objc_msgSend_357(
      _lib._class_NSMutableString1,
      _lib._sel_availableStringEncodings1,
    );
  }

  static NSString localizedNameOfStringEncoding_(AVFAudio _lib, int encoding) {
    final _ret = _lib._objc_msgSend_332(
      _lib._class_NSMutableString1,
      _lib._sel_localizedNameOfStringEncoding_1,
      encoding,
    );
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  static int getDefaultCStringEncoding(AVFAudio _lib) {
    return _lib._objc_msgSend_10(
      _lib._class_NSMutableString1,
      _lib._sel_defaultCStringEncoding1,
    );
  }

  @override
  NSMutableString initWithCharactersNoCopy_length_freeWhenDone_(
    ffi.Pointer<ffi.UnsignedShort> characters,
    int length,
    bool freeBuffer,
  ) {
    final _ret = _lib._objc_msgSend_369(
      this.pointer,
      _lib._sel_initWithCharactersNoCopy_length_freeWhenDone_1,
      characters,
      length,
      freeBuffer,
    );
    return NSMutableString._(_ret, _lib, retain: false, release: true);
  }

  @override
  NSMutableString initWithCharactersNoCopy_length_deallocator_(
    ffi.Pointer<ffi.UnsignedShort> chars,
    int len,
    ObjCBlock_ffiVoid_ffiUnsignedShort_ffiUnsignedLong? deallocator,
  ) {
    final _ret = _lib._objc_msgSend_370(
      this.pointer,
      _lib._sel_initWithCharactersNoCopy_length_deallocator_1,
      chars,
      len,
      deallocator?.pointer ?? ffi.nullptr,
    );
    return NSMutableString._(_ret, _lib, retain: false, release: true);
  }

  @override
  NSMutableString initWithCharacters_length_(
    ffi.Pointer<ffi.UnsignedShort> characters,
    int length,
  ) {
    final _ret = _lib._objc_msgSend_371(
      this.pointer,
      _lib._sel_initWithCharacters_length_1,
      characters,
      length,
    );
    return NSMutableString._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSMutableString? initWithUTF8String_(
    ffi.Pointer<ffi.Char> nullTerminatedCString,
  ) {
    final _ret = _lib._objc_msgSend_372(
      this.pointer,
      _lib._sel_initWithUTF8String_1,
      nullTerminatedCString,
    );
    return _ret.address == 0
        ? null
        : NSMutableString._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSMutableString initWithString_(NSString aString) {
    final _ret = _lib._objc_msgSend_31(
      this.pointer,
      _lib._sel_initWithString_1,
      aString.pointer,
    );
    return NSMutableString._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSMutableString initWithFormat_(NSString format) {
    final _ret = _lib._objc_msgSend_31(
      this.pointer,
      _lib._sel_initWithFormat_1,
      format.pointer,
    );
    return NSMutableString._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSMutableString initWithFormat_arguments_(
    NSString format,
    ffi.Pointer<__va_list_tag> argList,
  ) {
    final _ret = _lib._objc_msgSend_373(
      this.pointer,
      _lib._sel_initWithFormat_arguments_1,
      format.pointer,
      argList,
    );
    return NSMutableString._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSMutableString initWithFormat_locale_(NSString format, NSObject? locale) {
    final _ret = _lib._objc_msgSend_374(
      this.pointer,
      _lib._sel_initWithFormat_locale_1,
      format.pointer,
      locale?.pointer ?? ffi.nullptr,
    );
    return NSMutableString._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSMutableString initWithFormat_locale_arguments_(
    NSString format,
    NSObject? locale,
    ffi.Pointer<__va_list_tag> argList,
  ) {
    final _ret = _lib._objc_msgSend_375(
      this.pointer,
      _lib._sel_initWithFormat_locale_arguments_1,
      format.pointer,
      locale?.pointer ?? ffi.nullptr,
      argList,
    );
    return NSMutableString._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSMutableString? initWithValidatedFormat_validFormatSpecifiers_error_(
    NSString format,
    NSString validFormatSpecifiers,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    final _ret = _lib._objc_msgSend_376(
      this.pointer,
      _lib._sel_initWithValidatedFormat_validFormatSpecifiers_error_1,
      format.pointer,
      validFormatSpecifiers.pointer,
      error,
    );
    return _ret.address == 0
        ? null
        : NSMutableString._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSMutableString? initWithValidatedFormat_validFormatSpecifiers_locale_error_(
    NSString format,
    NSString validFormatSpecifiers,
    NSObject? locale,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    final _ret = _lib._objc_msgSend_377(
      this.pointer,
      _lib._sel_initWithValidatedFormat_validFormatSpecifiers_locale_error_1,
      format.pointer,
      validFormatSpecifiers.pointer,
      locale?.pointer ?? ffi.nullptr,
      error,
    );
    return _ret.address == 0
        ? null
        : NSMutableString._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSMutableString?
  initWithValidatedFormat_validFormatSpecifiers_arguments_error_(
    NSString format,
    NSString validFormatSpecifiers,
    ffi.Pointer<__va_list_tag> argList,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    final _ret = _lib._objc_msgSend_378(
      this.pointer,
      _lib._sel_initWithValidatedFormat_validFormatSpecifiers_arguments_error_1,
      format.pointer,
      validFormatSpecifiers.pointer,
      argList,
      error,
    );
    return _ret.address == 0
        ? null
        : NSMutableString._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSMutableString?
  initWithValidatedFormat_validFormatSpecifiers_locale_arguments_error_(
    NSString format,
    NSString validFormatSpecifiers,
    NSObject? locale,
    ffi.Pointer<__va_list_tag> argList,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    final _ret = _lib._objc_msgSend_379(
      this.pointer,
      _lib._sel_initWithValidatedFormat_validFormatSpecifiers_locale_arguments_error_1,
      format.pointer,
      validFormatSpecifiers.pointer,
      locale?.pointer ?? ffi.nullptr,
      argList,
      error,
    );
    return _ret.address == 0
        ? null
        : NSMutableString._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSMutableString? initWithData_encoding_(NSData data, int encoding) {
    final _ret = _lib._objc_msgSend_380(
      this.pointer,
      _lib._sel_initWithData_encoding_1,
      data.pointer,
      encoding,
    );
    return _ret.address == 0
        ? null
        : NSMutableString._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSMutableString? initWithBytes_length_encoding_(
    ffi.Pointer<ffi.Void> bytes,
    int len,
    int encoding,
  ) {
    final _ret = _lib._objc_msgSend_381(
      this.pointer,
      _lib._sel_initWithBytes_length_encoding_1,
      bytes,
      len,
      encoding,
    );
    return _ret.address == 0
        ? null
        : NSMutableString._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSMutableString? initWithBytesNoCopy_length_encoding_freeWhenDone_(
    ffi.Pointer<ffi.Void> bytes,
    int len,
    int encoding,
    bool freeBuffer,
  ) {
    final _ret = _lib._objc_msgSend_382(
      this.pointer,
      _lib._sel_initWithBytesNoCopy_length_encoding_freeWhenDone_1,
      bytes,
      len,
      encoding,
      freeBuffer,
    );
    return _ret.address == 0
        ? null
        : NSMutableString._(_ret, _lib, retain: false, release: true);
  }

  @override
  NSMutableString? initWithBytesNoCopy_length_encoding_deallocator_(
    ffi.Pointer<ffi.Void> bytes,
    int len,
    int encoding,
    ObjCBlock_ffiVoid_ffiVoid_ffiUnsignedLong? deallocator,
  ) {
    final _ret = _lib._objc_msgSend_383(
      this.pointer,
      _lib._sel_initWithBytesNoCopy_length_encoding_deallocator_1,
      bytes,
      len,
      encoding,
      deallocator?.pointer ?? ffi.nullptr,
    );
    return _ret.address == 0
        ? null
        : NSMutableString._(_ret, _lib, retain: false, release: true);
  }

  static NSMutableString string(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSMutableString1,
      _lib._sel_string1,
    );
    return NSMutableString._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableString stringWithString_(AVFAudio _lib, NSString string) {
    final _ret = _lib._objc_msgSend_31(
      _lib._class_NSMutableString1,
      _lib._sel_stringWithString_1,
      string.pointer,
    );
    return NSMutableString._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableString stringWithCharacters_length_(
    AVFAudio _lib,
    ffi.Pointer<ffi.UnsignedShort> characters,
    int length,
  ) {
    final _ret = _lib._objc_msgSend_371(
      _lib._class_NSMutableString1,
      _lib._sel_stringWithCharacters_length_1,
      characters,
      length,
    );
    return NSMutableString._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableString? stringWithUTF8String_(
    AVFAudio _lib,
    ffi.Pointer<ffi.Char> nullTerminatedCString,
  ) {
    final _ret = _lib._objc_msgSend_372(
      _lib._class_NSMutableString1,
      _lib._sel_stringWithUTF8String_1,
      nullTerminatedCString,
    );
    return _ret.address == 0
        ? null
        : NSMutableString._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableString stringWithFormat_(AVFAudio _lib, NSString format) {
    final _ret = _lib._objc_msgSend_31(
      _lib._class_NSMutableString1,
      _lib._sel_stringWithFormat_1,
      format.pointer,
    );
    return NSMutableString._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableString localizedStringWithFormat_(
    AVFAudio _lib,
    NSString format,
  ) {
    final _ret = _lib._objc_msgSend_31(
      _lib._class_NSMutableString1,
      _lib._sel_localizedStringWithFormat_1,
      format.pointer,
    );
    return NSMutableString._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableString?
  stringWithValidatedFormat_validFormatSpecifiers_error_(
    AVFAudio _lib,
    NSString format,
    NSString validFormatSpecifiers,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    final _ret = _lib._objc_msgSend_376(
      _lib._class_NSMutableString1,
      _lib._sel_stringWithValidatedFormat_validFormatSpecifiers_error_1,
      format.pointer,
      validFormatSpecifiers.pointer,
      error,
    );
    return _ret.address == 0
        ? null
        : NSMutableString._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableString?
  localizedStringWithValidatedFormat_validFormatSpecifiers_error_(
    AVFAudio _lib,
    NSString format,
    NSString validFormatSpecifiers,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    final _ret = _lib._objc_msgSend_376(
      _lib._class_NSMutableString1,
      _lib._sel_localizedStringWithValidatedFormat_validFormatSpecifiers_error_1,
      format.pointer,
      validFormatSpecifiers.pointer,
      error,
    );
    return _ret.address == 0
        ? null
        : NSMutableString._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSMutableString? initWithCString_encoding_(
    ffi.Pointer<ffi.Char> nullTerminatedCString,
    int encoding,
  ) {
    final _ret = _lib._objc_msgSend_384(
      this.pointer,
      _lib._sel_initWithCString_encoding_1,
      nullTerminatedCString,
      encoding,
    );
    return _ret.address == 0
        ? null
        : NSMutableString._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableString? stringWithCString_encoding_(
    AVFAudio _lib,
    ffi.Pointer<ffi.Char> cString,
    int enc,
  ) {
    final _ret = _lib._objc_msgSend_384(
      _lib._class_NSMutableString1,
      _lib._sel_stringWithCString_encoding_1,
      cString,
      enc,
    );
    return _ret.address == 0
        ? null
        : NSMutableString._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSMutableString? initWithContentsOfURL_encoding_error_(
    NSURL url,
    int enc,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    final _ret = _lib._objc_msgSend_385(
      this.pointer,
      _lib._sel_initWithContentsOfURL_encoding_error_1,
      url.pointer,
      enc,
      error,
    );
    return _ret.address == 0
        ? null
        : NSMutableString._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSMutableString? initWithContentsOfFile_encoding_error_(
    NSString path,
    int enc,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    final _ret = _lib._objc_msgSend_386(
      this.pointer,
      _lib._sel_initWithContentsOfFile_encoding_error_1,
      path.pointer,
      enc,
      error,
    );
    return _ret.address == 0
        ? null
        : NSMutableString._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableString? stringWithContentsOfURL_encoding_error_(
    AVFAudio _lib,
    NSURL url,
    int enc,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    final _ret = _lib._objc_msgSend_385(
      _lib._class_NSMutableString1,
      _lib._sel_stringWithContentsOfURL_encoding_error_1,
      url.pointer,
      enc,
      error,
    );
    return _ret.address == 0
        ? null
        : NSMutableString._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableString? stringWithContentsOfFile_encoding_error_(
    AVFAudio _lib,
    NSString path,
    int enc,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    final _ret = _lib._objc_msgSend_386(
      _lib._class_NSMutableString1,
      _lib._sel_stringWithContentsOfFile_encoding_error_1,
      path.pointer,
      enc,
      error,
    );
    return _ret.address == 0
        ? null
        : NSMutableString._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSMutableString? initWithContentsOfURL_usedEncoding_error_(
    NSURL url,
    ffi.Pointer<ffi.UnsignedLong> enc,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    final _ret = _lib._objc_msgSend_387(
      this.pointer,
      _lib._sel_initWithContentsOfURL_usedEncoding_error_1,
      url.pointer,
      enc,
      error,
    );
    return _ret.address == 0
        ? null
        : NSMutableString._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSMutableString? initWithContentsOfFile_usedEncoding_error_(
    NSString path,
    ffi.Pointer<ffi.UnsignedLong> enc,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    final _ret = _lib._objc_msgSend_388(
      this.pointer,
      _lib._sel_initWithContentsOfFile_usedEncoding_error_1,
      path.pointer,
      enc,
      error,
    );
    return _ret.address == 0
        ? null
        : NSMutableString._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableString? stringWithContentsOfURL_usedEncoding_error_(
    AVFAudio _lib,
    NSURL url,
    ffi.Pointer<ffi.UnsignedLong> enc,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    final _ret = _lib._objc_msgSend_387(
      _lib._class_NSMutableString1,
      _lib._sel_stringWithContentsOfURL_usedEncoding_error_1,
      url.pointer,
      enc,
      error,
    );
    return _ret.address == 0
        ? null
        : NSMutableString._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableString? stringWithContentsOfFile_usedEncoding_error_(
    AVFAudio _lib,
    NSString path,
    ffi.Pointer<ffi.UnsignedLong> enc,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    final _ret = _lib._objc_msgSend_388(
      _lib._class_NSMutableString1,
      _lib._sel_stringWithContentsOfFile_usedEncoding_error_1,
      path.pointer,
      enc,
      error,
    );
    return _ret.address == 0
        ? null
        : NSMutableString._(_ret, _lib, retain: true, release: true);
  }

  static int
  stringEncodingForData_encodingOptions_convertedString_usedLossyConversion_(
    AVFAudio _lib,
    NSData data,
    NSDictionary? opts,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> string,
    ffi.Pointer<ffi.Bool> usedLossyConversion,
  ) {
    return _lib._objc_msgSend_389(
      _lib._class_NSMutableString1,
      _lib._sel_stringEncodingForData_encodingOptions_convertedString_usedLossyConversion_1,
      data.pointer,
      opts?.pointer ?? ffi.nullptr,
      string,
      usedLossyConversion,
    );
  }

  static NSObject? stringWithContentsOfFile_(AVFAudio _lib, NSString path) {
    final _ret = _lib._objc_msgSend_38(
      _lib._class_NSMutableString1,
      _lib._sel_stringWithContentsOfFile_1,
      path.pointer,
    );
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject? stringWithContentsOfURL_(AVFAudio _lib, NSURL url) {
    final _ret = _lib._objc_msgSend_277(
      _lib._class_NSMutableString1,
      _lib._sel_stringWithContentsOfURL_1,
      url.pointer,
    );
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject? stringWithCString_length_(
    AVFAudio _lib,
    ffi.Pointer<ffi.Char> bytes,
    int length,
  ) {
    final _ret = _lib._objc_msgSend_384(
      _lib._class_NSMutableString1,
      _lib._sel_stringWithCString_length_1,
      bytes,
      length,
    );
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject? stringWithCString_(
    AVFAudio _lib,
    ffi.Pointer<ffi.Char> bytes,
  ) {
    final _ret = _lib._objc_msgSend_372(
      _lib._class_NSMutableString1,
      _lib._sel_stringWithCString_1,
      bytes,
    );
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSString pathWithComponents_(AVFAudio _lib, NSArray components) {
    final _ret = _lib._objc_msgSend_396(
      _lib._class_NSMutableString1,
      _lib._sel_pathWithComponents_1,
      components.pointer,
    );
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableString new1(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSMutableString1,
      _lib._sel_new1,
    );
    return NSMutableString._(_ret, _lib, retain: false, release: true);
  }

  static NSMutableString allocWithZone_(
    AVFAudio _lib,
    ffi.Pointer<_NSZone> zone,
  ) {
    final _ret = _lib._objc_msgSend_3(
      _lib._class_NSMutableString1,
      _lib._sel_allocWithZone_1,
      zone,
    );
    return NSMutableString._(_ret, _lib, retain: false, release: true);
  }

  static NSMutableString alloc(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSMutableString1,
      _lib._sel_alloc1,
    );
    return NSMutableString._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
    AVFAudio _lib,
    NSObject aTarget,
    ffi.Pointer<objc.ObjCSelector> aSelector,
    NSObject? anArgument,
  ) {
    _lib._objc_msgSend_14(
      _lib._class_NSMutableString1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
      aTarget.pointer,
      aSelector,
      anArgument?.pointer ?? ffi.nullptr,
    );
  }

  static void cancelPreviousPerformRequestsWithTarget_(
    AVFAudio _lib,
    NSObject aTarget,
  ) {
    _lib._objc_msgSend_15(
      _lib._class_NSMutableString1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_1,
      aTarget.pointer,
    );
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSMutableString1,
      _lib._sel_accessInstanceVariablesDirectly1,
    );
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSMutableString1,
      _lib._sel_useStoredAccessor1,
    );
  }

  static NSSet keyPathsForValuesAffectingValueForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    final _ret = _lib._objc_msgSend_63(
      _lib._class_NSMutableString1,
      _lib._sel_keyPathsForValuesAffectingValueForKey_1,
      key.pointer,
    );
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    return _lib._objc_msgSend_64(
      _lib._class_NSMutableString1,
      _lib._sel_automaticallyNotifiesObserversForKey_1,
      key.pointer,
    );
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
    AVFAudio _lib,
    NSArray keys,
    NSString dependentKey,
  ) {
    _lib._objc_msgSend_88(
      _lib._class_NSMutableString1,
      _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
      keys.pointer,
      dependentKey.pointer,
    );
  }

  static NSArray classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_85(
      _lib._class_NSMutableString1,
      _lib._sel_classFallbacksForKeyedArchiver1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSMutableString1,
      _lib._sel_classForKeyedUnarchiver1,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

class NSNotification extends NSObject {
  NSNotification._(
    ffi.Pointer<objc.ObjCObject> pointer,
    AVFAudio lib, {
    bool retain = false,
    bool release = false,
  }) : super._(pointer, lib, retain: retain, release: release);

  /// Returns a [NSNotification] that points to the same underlying object as [other].
  static NSNotification castFrom<T extends objc.ObjCObjectBase>(
    AVFAudio lib,
    T other,
  ) {
    return NSNotification._(other.pointer, lib, retain: true, release: true);
  }

  /// Returns a [NSNotification] that wraps the given raw object pointer.
  static NSNotification castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCObject> other, {
    bool retain = false,
    bool release = false,
  }) {
    return NSNotification._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSNotification].
  static bool isInstance(AVFAudio lib, objc.ObjCObjectBase obj) {
    return lib._objc_msgSend_0(
      obj.pointer,
      lib._sel_isKindOfClass_1,
      lib._class_NSNotification1,
    );
  }

  NSString get name {
    final _ret = _lib._objc_msgSend_21(this.pointer, _lib._sel_name1);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get object {
    final _ret = _lib._objc_msgSend_17(this.pointer, _lib._sel_object1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSDictionary? get userInfo {
    final _ret = _lib._objc_msgSend_390(this.pointer, _lib._sel_userInfo1);
    return _ret.address == 0
        ? null
        : NSDictionary._(_ret, _lib, retain: true, release: true);
  }

  NSNotification initWithName_object_userInfo_(
    NSString name,
    NSObject? object,
    NSDictionary? userInfo,
  ) {
    final _ret = _lib._objc_msgSend_694(
      this.pointer,
      _lib._sel_initWithName_object_userInfo_1,
      name.pointer,
      object?.pointer ?? ffi.nullptr,
      userInfo?.pointer ?? ffi.nullptr,
    );
    return NSNotification._(_ret, _lib, retain: true, release: true);
  }

  NSNotification? initWithCoder_(NSCoder coder) {
    final _ret = _lib._objc_msgSend_47(
      this.pointer,
      _lib._sel_initWithCoder_1,
      coder.pointer,
    );
    return _ret.address == 0
        ? null
        : NSNotification._(_ret, _lib, retain: true, release: true);
  }

  static NSNotification notificationWithName_object_(
    AVFAudio _lib,
    NSString aName,
    NSObject? anObject,
  ) {
    final _ret = _lib._objc_msgSend_374(
      _lib._class_NSNotification1,
      _lib._sel_notificationWithName_object_1,
      aName.pointer,
      anObject?.pointer ?? ffi.nullptr,
    );
    return NSNotification._(_ret, _lib, retain: true, release: true);
  }

  static NSNotification notificationWithName_object_userInfo_(
    AVFAudio _lib,
    NSString aName,
    NSObject? anObject,
    NSDictionary? aUserInfo,
  ) {
    final _ret = _lib._objc_msgSend_694(
      _lib._class_NSNotification1,
      _lib._sel_notificationWithName_object_userInfo_1,
      aName.pointer,
      anObject?.pointer ?? ffi.nullptr,
      aUserInfo?.pointer ?? ffi.nullptr,
    );
    return NSNotification._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSNotification init() {
    final _ret = _lib._objc_msgSend_2(this.pointer, _lib._sel_init1);
    return NSNotification._(_ret, _lib, retain: true, release: true);
  }

  static NSNotification new1(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSNotification1,
      _lib._sel_new1,
    );
    return NSNotification._(_ret, _lib, retain: false, release: true);
  }

  static NSNotification allocWithZone_(
    AVFAudio _lib,
    ffi.Pointer<_NSZone> zone,
  ) {
    final _ret = _lib._objc_msgSend_3(
      _lib._class_NSNotification1,
      _lib._sel_allocWithZone_1,
      zone,
    );
    return NSNotification._(_ret, _lib, retain: false, release: true);
  }

  static NSNotification alloc(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSNotification1,
      _lib._sel_alloc1,
    );
    return NSNotification._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
    AVFAudio _lib,
    NSObject aTarget,
    ffi.Pointer<objc.ObjCSelector> aSelector,
    NSObject? anArgument,
  ) {
    _lib._objc_msgSend_14(
      _lib._class_NSNotification1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
      aTarget.pointer,
      aSelector,
      anArgument?.pointer ?? ffi.nullptr,
    );
  }

  static void cancelPreviousPerformRequestsWithTarget_(
    AVFAudio _lib,
    NSObject aTarget,
  ) {
    _lib._objc_msgSend_15(
      _lib._class_NSNotification1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_1,
      aTarget.pointer,
    );
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSNotification1,
      _lib._sel_accessInstanceVariablesDirectly1,
    );
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSNotification1,
      _lib._sel_useStoredAccessor1,
    );
  }

  static NSSet keyPathsForValuesAffectingValueForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    final _ret = _lib._objc_msgSend_63(
      _lib._class_NSNotification1,
      _lib._sel_keyPathsForValuesAffectingValueForKey_1,
      key.pointer,
    );
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    return _lib._objc_msgSend_64(
      _lib._class_NSNotification1,
      _lib._sel_automaticallyNotifiesObserversForKey_1,
      key.pointer,
    );
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
    AVFAudio _lib,
    NSArray keys,
    NSString dependentKey,
  ) {
    _lib._objc_msgSend_88(
      _lib._class_NSNotification1,
      _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
      keys.pointer,
      dependentKey.pointer,
    );
  }

  static NSArray classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_85(
      _lib._class_NSNotification1,
      _lib._sel_classFallbacksForKeyedArchiver1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSNotification1,
      _lib._sel_classForKeyedUnarchiver1,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

class NSBundle extends NSObject {
  NSBundle._(
    ffi.Pointer<objc.ObjCObject> pointer,
    AVFAudio lib, {
    bool retain = false,
    bool release = false,
  }) : super._(pointer, lib, retain: retain, release: release);

  /// Returns a [NSBundle] that points to the same underlying object as [other].
  static NSBundle castFrom<T extends objc.ObjCObjectBase>(
    AVFAudio lib,
    T other,
  ) {
    return NSBundle._(other.pointer, lib, retain: true, release: true);
  }

  /// Returns a [NSBundle] that wraps the given raw object pointer.
  static NSBundle castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCObject> other, {
    bool retain = false,
    bool release = false,
  }) {
    return NSBundle._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSBundle].
  static bool isInstance(AVFAudio lib, objc.ObjCObjectBase obj) {
    return lib._objc_msgSend_0(
      obj.pointer,
      lib._sel_isKindOfClass_1,
      lib._class_NSBundle1,
    );
  }

  static NSBundle getMainBundle(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_695(
      _lib._class_NSBundle1,
      _lib._sel_mainBundle1,
    );
    return NSBundle._(_ret, _lib, retain: true, release: true);
  }

  static NSBundle? bundleWithPath_(AVFAudio _lib, NSString path) {
    final _ret = _lib._objc_msgSend_38(
      _lib._class_NSBundle1,
      _lib._sel_bundleWithPath_1,
      path.pointer,
    );
    return _ret.address == 0
        ? null
        : NSBundle._(_ret, _lib, retain: true, release: true);
  }

  NSBundle? initWithPath_(NSString path) {
    final _ret = _lib._objc_msgSend_38(
      this.pointer,
      _lib._sel_initWithPath_1,
      path.pointer,
    );
    return _ret.address == 0
        ? null
        : NSBundle._(_ret, _lib, retain: true, release: true);
  }

  static NSBundle? bundleWithURL_(AVFAudio _lib, NSURL url) {
    final _ret = _lib._objc_msgSend_277(
      _lib._class_NSBundle1,
      _lib._sel_bundleWithURL_1,
      url.pointer,
    );
    return _ret.address == 0
        ? null
        : NSBundle._(_ret, _lib, retain: true, release: true);
  }

  NSBundle? initWithURL_(NSURL url) {
    final _ret = _lib._objc_msgSend_277(
      this.pointer,
      _lib._sel_initWithURL_1,
      url.pointer,
    );
    return _ret.address == 0
        ? null
        : NSBundle._(_ret, _lib, retain: true, release: true);
  }

  static NSBundle bundleForClass_(AVFAudio _lib, NSObject aClass) {
    final _ret = _lib._objc_msgSend_696(
      _lib._class_NSBundle1,
      _lib._sel_bundleForClass_1,
      aClass.pointer,
    );
    return NSBundle._(_ret, _lib, retain: true, release: true);
  }

  static NSBundle? bundleWithIdentifier_(AVFAudio _lib, NSString identifier) {
    final _ret = _lib._objc_msgSend_697(
      _lib._class_NSBundle1,
      _lib._sel_bundleWithIdentifier_1,
      identifier.pointer,
    );
    return _ret.address == 0
        ? null
        : NSBundle._(_ret, _lib, retain: true, release: true);
  }

  static NSArray getAllBundles(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_85(
      _lib._class_NSBundle1,
      _lib._sel_allBundles1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSArray getAllFrameworks(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_85(
      _lib._class_NSBundle1,
      _lib._sel_allFrameworks1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  bool load() {
    return _lib._objc_msgSend_12(this.pointer, _lib._sel_load1);
  }

  bool get loaded {
    return _lib._objc_msgSend_12(this.pointer, _lib._sel_isLoaded1);
  }

  bool unload() {
    return _lib._objc_msgSend_12(this.pointer, _lib._sel_unload1);
  }

  bool preflightAndReturnError_(
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    return _lib._objc_msgSend_255(
      this.pointer,
      _lib._sel_preflightAndReturnError_1,
      error,
    );
  }

  bool loadAndReturnError_(ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    return _lib._objc_msgSend_255(
      this.pointer,
      _lib._sel_loadAndReturnError_1,
      error,
    );
  }

  NSURL get bundleURL {
    final _ret = _lib._objc_msgSend_466(this.pointer, _lib._sel_bundleURL1);
    return NSURL._(_ret, _lib, retain: true, release: true);
  }

  NSURL? get resourceURL {
    final _ret = _lib._objc_msgSend_45(this.pointer, _lib._sel_resourceURL1);
    return _ret.address == 0
        ? null
        : NSURL._(_ret, _lib, retain: true, release: true);
  }

  NSURL? get executableURL {
    final _ret = _lib._objc_msgSend_45(this.pointer, _lib._sel_executableURL1);
    return _ret.address == 0
        ? null
        : NSURL._(_ret, _lib, retain: true, release: true);
  }

  NSURL? URLForAuxiliaryExecutable_(NSString executableName) {
    final _ret = _lib._objc_msgSend_257(
      this.pointer,
      _lib._sel_URLForAuxiliaryExecutable_1,
      executableName.pointer,
    );
    return _ret.address == 0
        ? null
        : NSURL._(_ret, _lib, retain: true, release: true);
  }

  NSURL? get privateFrameworksURL {
    final _ret = _lib._objc_msgSend_45(
      this.pointer,
      _lib._sel_privateFrameworksURL1,
    );
    return _ret.address == 0
        ? null
        : NSURL._(_ret, _lib, retain: true, release: true);
  }

  NSURL? get sharedFrameworksURL {
    final _ret = _lib._objc_msgSend_45(
      this.pointer,
      _lib._sel_sharedFrameworksURL1,
    );
    return _ret.address == 0
        ? null
        : NSURL._(_ret, _lib, retain: true, release: true);
  }

  NSURL? get sharedSupportURL {
    final _ret = _lib._objc_msgSend_45(
      this.pointer,
      _lib._sel_sharedSupportURL1,
    );
    return _ret.address == 0
        ? null
        : NSURL._(_ret, _lib, retain: true, release: true);
  }

  NSURL? get builtInPlugInsURL {
    final _ret = _lib._objc_msgSend_45(
      this.pointer,
      _lib._sel_builtInPlugInsURL1,
    );
    return _ret.address == 0
        ? null
        : NSURL._(_ret, _lib, retain: true, release: true);
  }

  NSURL? get appStoreReceiptURL {
    final _ret = _lib._objc_msgSend_45(
      this.pointer,
      _lib._sel_appStoreReceiptURL1,
    );
    return _ret.address == 0
        ? null
        : NSURL._(_ret, _lib, retain: true, release: true);
  }

  NSString get bundlePath {
    final _ret = _lib._objc_msgSend_21(this.pointer, _lib._sel_bundlePath1);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString? get resourcePath {
    final _ret = _lib._objc_msgSend_44(this.pointer, _lib._sel_resourcePath1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString? get executablePath {
    final _ret = _lib._objc_msgSend_44(this.pointer, _lib._sel_executablePath1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString? pathForAuxiliaryExecutable_(NSString executableName) {
    final _ret = _lib._objc_msgSend_186(
      this.pointer,
      _lib._sel_pathForAuxiliaryExecutable_1,
      executableName.pointer,
    );
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString? get privateFrameworksPath {
    final _ret = _lib._objc_msgSend_44(
      this.pointer,
      _lib._sel_privateFrameworksPath1,
    );
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString? get sharedFrameworksPath {
    final _ret = _lib._objc_msgSend_44(
      this.pointer,
      _lib._sel_sharedFrameworksPath1,
    );
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString? get sharedSupportPath {
    final _ret = _lib._objc_msgSend_44(
      this.pointer,
      _lib._sel_sharedSupportPath1,
    );
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString? get builtInPlugInsPath {
    final _ret = _lib._objc_msgSend_44(
      this.pointer,
      _lib._sel_builtInPlugInsPath1,
    );
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  static NSURL? URLForResource_withExtension_subdirectory_inBundleWithURL_(
    AVFAudio _lib,
    NSString? name,
    NSString? ext,
    NSString? subpath,
    NSURL bundleURL,
  ) {
    final _ret = _lib._objc_msgSend_698(
      _lib._class_NSBundle1,
      _lib._sel_URLForResource_withExtension_subdirectory_inBundleWithURL_1,
      name?.pointer ?? ffi.nullptr,
      ext?.pointer ?? ffi.nullptr,
      subpath?.pointer ?? ffi.nullptr,
      bundleURL.pointer,
    );
    return _ret.address == 0
        ? null
        : NSURL._(_ret, _lib, retain: true, release: true);
  }

  static NSArray? URLsForResourcesWithExtension_subdirectory_inBundleWithURL_(
    AVFAudio _lib,
    NSString? ext,
    NSString? subpath,
    NSURL bundleURL,
  ) {
    final _ret = _lib._objc_msgSend_699(
      _lib._class_NSBundle1,
      _lib._sel_URLsForResourcesWithExtension_subdirectory_inBundleWithURL_1,
      ext?.pointer ?? ffi.nullptr,
      subpath?.pointer ?? ffi.nullptr,
      bundleURL.pointer,
    );
    return _ret.address == 0
        ? null
        : NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSURL? URLForResource_withExtension_(NSString? name, NSString? ext) {
    final _ret = _lib._objc_msgSend_700(
      this.pointer,
      _lib._sel_URLForResource_withExtension_1,
      name?.pointer ?? ffi.nullptr,
      ext?.pointer ?? ffi.nullptr,
    );
    return _ret.address == 0
        ? null
        : NSURL._(_ret, _lib, retain: true, release: true);
  }

  NSURL? URLForResource_withExtension_subdirectory_(
    NSString? name,
    NSString? ext,
    NSString? subpath,
  ) {
    final _ret = _lib._objc_msgSend_701(
      this.pointer,
      _lib._sel_URLForResource_withExtension_subdirectory_1,
      name?.pointer ?? ffi.nullptr,
      ext?.pointer ?? ffi.nullptr,
      subpath?.pointer ?? ffi.nullptr,
    );
    return _ret.address == 0
        ? null
        : NSURL._(_ret, _lib, retain: true, release: true);
  }

  NSURL? URLForResource_withExtension_subdirectory_localization_(
    NSString? name,
    NSString? ext,
    NSString? subpath,
    NSString? localizationName,
  ) {
    final _ret = _lib._objc_msgSend_702(
      this.pointer,
      _lib._sel_URLForResource_withExtension_subdirectory_localization_1,
      name?.pointer ?? ffi.nullptr,
      ext?.pointer ?? ffi.nullptr,
      subpath?.pointer ?? ffi.nullptr,
      localizationName?.pointer ?? ffi.nullptr,
    );
    return _ret.address == 0
        ? null
        : NSURL._(_ret, _lib, retain: true, release: true);
  }

  NSArray? URLsForResourcesWithExtension_subdirectory_(
    NSString? ext,
    NSString? subpath,
  ) {
    final _ret = _lib._objc_msgSend_703(
      this.pointer,
      _lib._sel_URLsForResourcesWithExtension_subdirectory_1,
      ext?.pointer ?? ffi.nullptr,
      subpath?.pointer ?? ffi.nullptr,
    );
    return _ret.address == 0
        ? null
        : NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSArray? URLsForResourcesWithExtension_subdirectory_localization_(
    NSString? ext,
    NSString? subpath,
    NSString? localizationName,
  ) {
    final _ret = _lib._objc_msgSend_704(
      this.pointer,
      _lib._sel_URLsForResourcesWithExtension_subdirectory_localization_1,
      ext?.pointer ?? ffi.nullptr,
      subpath?.pointer ?? ffi.nullptr,
      localizationName?.pointer ?? ffi.nullptr,
    );
    return _ret.address == 0
        ? null
        : NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSString? pathForResource_ofType_inDirectory_(
    AVFAudio _lib,
    NSString? name,
    NSString? ext,
    NSString bundlePath,
  ) {
    final _ret = _lib._objc_msgSend_705(
      _lib._class_NSBundle1,
      _lib._sel_pathForResource_ofType_inDirectory_1,
      name?.pointer ?? ffi.nullptr,
      ext?.pointer ?? ffi.nullptr,
      bundlePath.pointer,
    );
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  static NSArray pathsForResourcesOfType_inDirectory_(
    AVFAudio _lib,
    NSString? ext,
    NSString bundlePath,
  ) {
    final _ret = _lib._objc_msgSend_706(
      _lib._class_NSBundle1,
      _lib._sel_pathsForResourcesOfType_inDirectory_1,
      ext?.pointer ?? ffi.nullptr,
      bundlePath.pointer,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSString? pathForResource_ofType_(NSString? name, NSString? ext) {
    final _ret = _lib._objc_msgSend_707(
      this.pointer,
      _lib._sel_pathForResource_ofType_1,
      name?.pointer ?? ffi.nullptr,
      ext?.pointer ?? ffi.nullptr,
    );
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString? pathForResource_ofType_inDirectory_forLocalization_(
    NSString? name,
    NSString? ext,
    NSString? subpath,
    NSString? localizationName,
  ) {
    final _ret = _lib._objc_msgSend_708(
      this.pointer,
      _lib._sel_pathForResource_ofType_inDirectory_forLocalization_1,
      name?.pointer ?? ffi.nullptr,
      ext?.pointer ?? ffi.nullptr,
      subpath?.pointer ?? ffi.nullptr,
      localizationName?.pointer ?? ffi.nullptr,
    );
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSArray pathsForResourcesOfType_inDirectory_forLocalization_(
    NSString? ext,
    NSString? subpath,
    NSString? localizationName,
  ) {
    final _ret = _lib._objc_msgSend_709(
      this.pointer,
      _lib._sel_pathsForResourcesOfType_inDirectory_forLocalization_1,
      ext?.pointer ?? ffi.nullptr,
      subpath?.pointer ?? ffi.nullptr,
      localizationName?.pointer ?? ffi.nullptr,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSString localizedStringForKey_value_table_(
    NSString key,
    NSString? value,
    NSString? tableName,
  ) {
    final _ret = _lib._objc_msgSend_710(
      this.pointer,
      _lib._sel_localizedStringForKey_value_table_1,
      key.pointer,
      value?.pointer ?? ffi.nullptr,
      tableName?.pointer ?? ffi.nullptr,
    );
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSAttributedString localizedAttributedStringForKey_value_table_(
    NSString key,
    NSString? value,
    NSString? tableName,
  ) {
    final _ret = _lib._objc_msgSend_736(
      this.pointer,
      _lib._sel_localizedAttributedStringForKey_value_table_1,
      key.pointer,
      value?.pointer ?? ffi.nullptr,
      tableName?.pointer ?? ffi.nullptr,
    );
    return NSAttributedString._(_ret, _lib, retain: true, release: true);
  }

  NSString? get bundleIdentifier {
    final _ret = _lib._objc_msgSend_44(
      this.pointer,
      _lib._sel_bundleIdentifier1,
    );
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSDictionary? get infoDictionary {
    final _ret = _lib._objc_msgSend_390(
      this.pointer,
      _lib._sel_infoDictionary1,
    );
    return _ret.address == 0
        ? null
        : NSDictionary._(_ret, _lib, retain: true, release: true);
  }

  NSDictionary? get localizedInfoDictionary {
    final _ret = _lib._objc_msgSend_390(
      this.pointer,
      _lib._sel_localizedInfoDictionary1,
    );
    return _ret.address == 0
        ? null
        : NSDictionary._(_ret, _lib, retain: true, release: true);
  }

  NSObject? objectForInfoDictionaryKey_(NSString key) {
    final _ret = _lib._objc_msgSend_38(
      this.pointer,
      _lib._sel_objectForInfoDictionaryKey_1,
      key.pointer,
    );
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? classNamed_(NSString className) {
    final _ret = _lib._objc_msgSend_38(
      this.pointer,
      _lib._sel_classNamed_1,
      className.pointer,
    );
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get principalClass {
    final _ret = _lib._objc_msgSend_17(this.pointer, _lib._sel_principalClass1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSArray get preferredLocalizations {
    final _ret = _lib._objc_msgSend_85(
      this.pointer,
      _lib._sel_preferredLocalizations1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSArray get localizations {
    final _ret = _lib._objc_msgSend_85(this.pointer, _lib._sel_localizations1);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSString? get developmentLocalization {
    final _ret = _lib._objc_msgSend_44(
      this.pointer,
      _lib._sel_developmentLocalization1,
    );
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  static NSArray preferredLocalizationsFromArray_(
    AVFAudio _lib,
    NSArray localizationsArray,
  ) {
    final _ret = _lib._objc_msgSend_68(
      _lib._class_NSBundle1,
      _lib._sel_preferredLocalizationsFromArray_1,
      localizationsArray.pointer,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSArray preferredLocalizationsFromArray_forPreferences_(
    AVFAudio _lib,
    NSArray localizationsArray,
    NSArray? preferencesArray,
  ) {
    final _ret = _lib._objc_msgSend_737(
      _lib._class_NSBundle1,
      _lib._sel_preferredLocalizationsFromArray_forPreferences_1,
      localizationsArray.pointer,
      preferencesArray?.pointer ?? ffi.nullptr,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSArray? get executableArchitectures {
    final _ret = _lib._objc_msgSend_84(
      this.pointer,
      _lib._sel_executableArchitectures1,
    );
    return _ret.address == 0
        ? null
        : NSArray._(_ret, _lib, retain: true, release: true);
  }

  void setPreservationPriority_forTags_(double priority, NSSet tags) {
    _lib._objc_msgSend_738(
      this.pointer,
      _lib._sel_setPreservationPriority_forTags_1,
      priority,
      tags.pointer,
    );
  }

  double preservationPriorityForTag_(NSString tag) {
    return objc.useMsgSendVariants
        ? _lib._objc_msgSend_308_fpret(
          this.pointer,
          _lib._sel_preservationPriorityForTag_1,
          tag.pointer,
        )
        : _lib._objc_msgSend_308(
          this.pointer,
          _lib._sel_preservationPriorityForTag_1,
          tag.pointer,
        );
  }

  @override
  NSBundle init() {
    final _ret = _lib._objc_msgSend_2(this.pointer, _lib._sel_init1);
    return NSBundle._(_ret, _lib, retain: true, release: true);
  }

  static NSBundle new1(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSBundle1, _lib._sel_new1);
    return NSBundle._(_ret, _lib, retain: false, release: true);
  }

  static NSBundle allocWithZone_(AVFAudio _lib, ffi.Pointer<_NSZone> zone) {
    final _ret = _lib._objc_msgSend_3(
      _lib._class_NSBundle1,
      _lib._sel_allocWithZone_1,
      zone,
    );
    return NSBundle._(_ret, _lib, retain: false, release: true);
  }

  static NSBundle alloc(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSBundle1, _lib._sel_alloc1);
    return NSBundle._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
    AVFAudio _lib,
    NSObject aTarget,
    ffi.Pointer<objc.ObjCSelector> aSelector,
    NSObject? anArgument,
  ) {
    _lib._objc_msgSend_14(
      _lib._class_NSBundle1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
      aTarget.pointer,
      aSelector,
      anArgument?.pointer ?? ffi.nullptr,
    );
  }

  static void cancelPreviousPerformRequestsWithTarget_(
    AVFAudio _lib,
    NSObject aTarget,
  ) {
    _lib._objc_msgSend_15(
      _lib._class_NSBundle1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_1,
      aTarget.pointer,
    );
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSBundle1,
      _lib._sel_accessInstanceVariablesDirectly1,
    );
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSBundle1,
      _lib._sel_useStoredAccessor1,
    );
  }

  static NSSet keyPathsForValuesAffectingValueForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    final _ret = _lib._objc_msgSend_63(
      _lib._class_NSBundle1,
      _lib._sel_keyPathsForValuesAffectingValueForKey_1,
      key.pointer,
    );
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    return _lib._objc_msgSend_64(
      _lib._class_NSBundle1,
      _lib._sel_automaticallyNotifiesObserversForKey_1,
      key.pointer,
    );
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
    AVFAudio _lib,
    NSArray keys,
    NSString dependentKey,
  ) {
    _lib._objc_msgSend_88(
      _lib._class_NSBundle1,
      _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
      keys.pointer,
      dependentKey.pointer,
    );
  }

  static NSArray classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_85(
      _lib._class_NSBundle1,
      _lib._sel_classFallbacksForKeyedArchiver1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSBundle1,
      _lib._sel_classForKeyedUnarchiver1,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

class NSAttributedString extends NSObject {
  NSAttributedString._(
    ffi.Pointer<objc.ObjCObject> pointer,
    AVFAudio lib, {
    bool retain = false,
    bool release = false,
  }) : super._(pointer, lib, retain: retain, release: release);

  /// Returns a [NSAttributedString] that points to the same underlying object as [other].
  static NSAttributedString castFrom<T extends objc.ObjCObjectBase>(
    AVFAudio lib,
    T other,
  ) {
    return NSAttributedString._(
      other.pointer,
      lib,
      retain: true,
      release: true,
    );
  }

  /// Returns a [NSAttributedString] that wraps the given raw object pointer.
  static NSAttributedString castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCObject> other, {
    bool retain = false,
    bool release = false,
  }) {
    return NSAttributedString._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSAttributedString].
  static bool isInstance(AVFAudio lib, objc.ObjCObjectBase obj) {
    return lib._objc_msgSend_0(
      obj.pointer,
      lib._sel_isKindOfClass_1,
      lib._class_NSAttributedString1,
    );
  }

  NSString get string {
    final _ret = _lib._objc_msgSend_21(this.pointer, _lib._sel_string1);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSDictionary attributesAtIndex_effectiveRange_(
    int location,
    ffi.Pointer<_NSRange> range,
  ) {
    final _ret = _lib._objc_msgSend_711(
      this.pointer,
      _lib._sel_attributesAtIndex_effectiveRange_1,
      location,
      range,
    );
    return NSDictionary._(_ret, _lib, retain: true, release: true);
  }

  int get length {
    return _lib._objc_msgSend_10(this.pointer, _lib._sel_length1);
  }

  NSObject? attribute_atIndex_effectiveRange_(
    NSString attrName,
    int location,
    ffi.Pointer<_NSRange> range,
  ) {
    final _ret = _lib._objc_msgSend_712(
      this.pointer,
      _lib._sel_attribute_atIndex_effectiveRange_1,
      attrName.pointer,
      location,
      range,
    );
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSAttributedString attributedSubstringFromRange_(_NSRange range) {
    final _ret = _lib._objc_msgSend_713(
      this.pointer,
      _lib._sel_attributedSubstringFromRange_1,
      range,
    );
    return NSAttributedString._(_ret, _lib, retain: true, release: true);
  }

  NSDictionary attributesAtIndex_longestEffectiveRange_inRange_(
    int location,
    ffi.Pointer<_NSRange> range,
    _NSRange rangeLimit,
  ) {
    final _ret = _lib._objc_msgSend_714(
      this.pointer,
      _lib._sel_attributesAtIndex_longestEffectiveRange_inRange_1,
      location,
      range,
      rangeLimit,
    );
    return NSDictionary._(_ret, _lib, retain: true, release: true);
  }

  NSObject? attribute_atIndex_longestEffectiveRange_inRange_(
    NSString attrName,
    int location,
    ffi.Pointer<_NSRange> range,
    _NSRange rangeLimit,
  ) {
    final _ret = _lib._objc_msgSend_715(
      this.pointer,
      _lib._sel_attribute_atIndex_longestEffectiveRange_inRange_1,
      attrName.pointer,
      location,
      range,
      rangeLimit,
    );
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  bool isEqualToAttributedString_(NSAttributedString other) {
    return _lib._objc_msgSend_716(
      this.pointer,
      _lib._sel_isEqualToAttributedString_1,
      other.pointer,
    );
  }

  NSAttributedString initWithString_(NSString str) {
    final _ret = _lib._objc_msgSend_31(
      this.pointer,
      _lib._sel_initWithString_1,
      str.pointer,
    );
    return NSAttributedString._(_ret, _lib, retain: true, release: true);
  }

  NSAttributedString initWithString_attributes_(
    NSString str,
    NSDictionary? attrs,
  ) {
    final _ret = _lib._objc_msgSend_717(
      this.pointer,
      _lib._sel_initWithString_attributes_1,
      str.pointer,
      attrs?.pointer ?? ffi.nullptr,
    );
    return NSAttributedString._(_ret, _lib, retain: true, release: true);
  }

  NSAttributedString initWithAttributedString_(NSAttributedString attrStr) {
    final _ret = _lib._objc_msgSend_718(
      this.pointer,
      _lib._sel_initWithAttributedString_1,
      attrStr.pointer,
    );
    return NSAttributedString._(_ret, _lib, retain: true, release: true);
  }

  void enumerateAttributesInRange_options_usingBlock_(
    _NSRange enumerationRange,
    int opts,
    ObjCBlock_ffiVoid_NSDictionary_NSRange_bool block,
  ) {
    _lib._objc_msgSend_719(
      this.pointer,
      _lib._sel_enumerateAttributesInRange_options_usingBlock_1,
      enumerationRange,
      opts,
      block.pointer,
    );
  }

  void enumerateAttribute_inRange_options_usingBlock_(
    NSString attrName,
    _NSRange enumerationRange,
    int opts,
    ObjCBlock_ffiVoid_objcObjCObject_NSRange_bool block,
  ) {
    _lib._objc_msgSend_720(
      this.pointer,
      _lib._sel_enumerateAttribute_inRange_options_usingBlock_1,
      attrName.pointer,
      enumerationRange,
      opts,
      block.pointer,
    );
  }

  NSAttributedString?
  initWithContentsOfMarkdownFileAtURL_options_baseURL_error_(
    NSURL markdownFile,
    NSAttributedStringMarkdownParsingOptions? options,
    NSURL? baseURL,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    final _ret = _lib._objc_msgSend_725(
      this.pointer,
      _lib._sel_initWithContentsOfMarkdownFileAtURL_options_baseURL_error_1,
      markdownFile.pointer,
      options?.pointer ?? ffi.nullptr,
      baseURL?.pointer ?? ffi.nullptr,
      error,
    );
    return _ret.address == 0
        ? null
        : NSAttributedString._(_ret, _lib, retain: true, release: true);
  }

  NSAttributedString? initWithMarkdown_options_baseURL_error_(
    NSData markdown,
    NSAttributedStringMarkdownParsingOptions? options,
    NSURL? baseURL,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    final _ret = _lib._objc_msgSend_726(
      this.pointer,
      _lib._sel_initWithMarkdown_options_baseURL_error_1,
      markdown.pointer,
      options?.pointer ?? ffi.nullptr,
      baseURL?.pointer ?? ffi.nullptr,
      error,
    );
    return _ret.address == 0
        ? null
        : NSAttributedString._(_ret, _lib, retain: true, release: true);
  }

  NSAttributedString? initWithMarkdownString_options_baseURL_error_(
    NSString markdownString,
    NSAttributedStringMarkdownParsingOptions? options,
    NSURL? baseURL,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    final _ret = _lib._objc_msgSend_727(
      this.pointer,
      _lib._sel_initWithMarkdownString_options_baseURL_error_1,
      markdownString.pointer,
      options?.pointer ?? ffi.nullptr,
      baseURL?.pointer ?? ffi.nullptr,
      error,
    );
    return _ret.address == 0
        ? null
        : NSAttributedString._(_ret, _lib, retain: true, release: true);
  }

  NSAttributedString initWithFormat_options_locale_(
    NSAttributedString format,
    int options,
    NSLocale? locale,
  ) {
    final _ret = _lib._objc_msgSend_728(
      this.pointer,
      _lib._sel_initWithFormat_options_locale_1,
      format.pointer,
      options,
      locale?.pointer ?? ffi.nullptr,
    );
    return NSAttributedString._(_ret, _lib, retain: true, release: true);
  }

  NSAttributedString initWithFormat_options_locale_arguments_(
    NSAttributedString format,
    int options,
    NSLocale? locale,
    ffi.Pointer<__va_list_tag> arguments,
  ) {
    final _ret = _lib._objc_msgSend_729(
      this.pointer,
      _lib._sel_initWithFormat_options_locale_arguments_1,
      format.pointer,
      options,
      locale?.pointer ?? ffi.nullptr,
      arguments,
    );
    return NSAttributedString._(_ret, _lib, retain: true, release: true);
  }

  static NSAttributedString localizedAttributedStringWithFormat_(
    AVFAudio _lib,
    NSAttributedString format,
  ) {
    final _ret = _lib._objc_msgSend_718(
      _lib._class_NSAttributedString1,
      _lib._sel_localizedAttributedStringWithFormat_1,
      format.pointer,
    );
    return NSAttributedString._(_ret, _lib, retain: true, release: true);
  }

  static NSAttributedString localizedAttributedStringWithFormat_options_(
    AVFAudio _lib,
    NSAttributedString format,
    int options,
  ) {
    final _ret = _lib._objc_msgSend_730(
      _lib._class_NSAttributedString1,
      _lib._sel_localizedAttributedStringWithFormat_options_1,
      format.pointer,
      options,
    );
    return NSAttributedString._(_ret, _lib, retain: true, release: true);
  }

  NSAttributedString initWithFormat_options_locale_context_(
    NSAttributedString format,
    int options,
    NSLocale? locale,
    NSDictionary context,
  ) {
    final _ret = _lib._objc_msgSend_731(
      this.pointer,
      _lib._sel_initWithFormat_options_locale_context_1,
      format.pointer,
      options,
      locale?.pointer ?? ffi.nullptr,
      context.pointer,
    );
    return NSAttributedString._(_ret, _lib, retain: true, release: true);
  }

  NSAttributedString initWithFormat_options_locale_context_arguments_(
    NSAttributedString format,
    int options,
    NSLocale? locale,
    NSDictionary context,
    ffi.Pointer<__va_list_tag> arguments,
  ) {
    final _ret = _lib._objc_msgSend_732(
      this.pointer,
      _lib._sel_initWithFormat_options_locale_context_arguments_1,
      format.pointer,
      options,
      locale?.pointer ?? ffi.nullptr,
      context.pointer,
      arguments,
    );
    return NSAttributedString._(_ret, _lib, retain: true, release: true);
  }

  static NSAttributedString localizedAttributedStringWithFormat_context_(
    AVFAudio _lib,
    NSAttributedString format,
    NSDictionary context,
  ) {
    final _ret = _lib._objc_msgSend_733(
      _lib._class_NSAttributedString1,
      _lib._sel_localizedAttributedStringWithFormat_context_1,
      format.pointer,
      context.pointer,
    );
    return NSAttributedString._(_ret, _lib, retain: true, release: true);
  }

  static NSAttributedString
  localizedAttributedStringWithFormat_options_context_(
    AVFAudio _lib,
    NSAttributedString format,
    int options,
    NSDictionary context,
  ) {
    final _ret = _lib._objc_msgSend_734(
      _lib._class_NSAttributedString1,
      _lib._sel_localizedAttributedStringWithFormat_options_context_1,
      format.pointer,
      options,
      context.pointer,
    );
    return NSAttributedString._(_ret, _lib, retain: true, release: true);
  }

  NSAttributedString attributedStringByInflectingString() {
    final _ret = _lib._objc_msgSend_735(
      this.pointer,
      _lib._sel_attributedStringByInflectingString1,
    );
    return NSAttributedString._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSAttributedString init() {
    final _ret = _lib._objc_msgSend_2(this.pointer, _lib._sel_init1);
    return NSAttributedString._(_ret, _lib, retain: true, release: true);
  }

  static NSAttributedString new1(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSAttributedString1,
      _lib._sel_new1,
    );
    return NSAttributedString._(_ret, _lib, retain: false, release: true);
  }

  static NSAttributedString allocWithZone_(
    AVFAudio _lib,
    ffi.Pointer<_NSZone> zone,
  ) {
    final _ret = _lib._objc_msgSend_3(
      _lib._class_NSAttributedString1,
      _lib._sel_allocWithZone_1,
      zone,
    );
    return NSAttributedString._(_ret, _lib, retain: false, release: true);
  }

  static NSAttributedString alloc(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSAttributedString1,
      _lib._sel_alloc1,
    );
    return NSAttributedString._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
    AVFAudio _lib,
    NSObject aTarget,
    ffi.Pointer<objc.ObjCSelector> aSelector,
    NSObject? anArgument,
  ) {
    _lib._objc_msgSend_14(
      _lib._class_NSAttributedString1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
      aTarget.pointer,
      aSelector,
      anArgument?.pointer ?? ffi.nullptr,
    );
  }

  static void cancelPreviousPerformRequestsWithTarget_(
    AVFAudio _lib,
    NSObject aTarget,
  ) {
    _lib._objc_msgSend_15(
      _lib._class_NSAttributedString1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_1,
      aTarget.pointer,
    );
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSAttributedString1,
      _lib._sel_accessInstanceVariablesDirectly1,
    );
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSAttributedString1,
      _lib._sel_useStoredAccessor1,
    );
  }

  static NSSet keyPathsForValuesAffectingValueForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    final _ret = _lib._objc_msgSend_63(
      _lib._class_NSAttributedString1,
      _lib._sel_keyPathsForValuesAffectingValueForKey_1,
      key.pointer,
    );
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    return _lib._objc_msgSend_64(
      _lib._class_NSAttributedString1,
      _lib._sel_automaticallyNotifiesObserversForKey_1,
      key.pointer,
    );
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
    AVFAudio _lib,
    NSArray keys,
    NSString dependentKey,
  ) {
    _lib._objc_msgSend_88(
      _lib._class_NSAttributedString1,
      _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
      keys.pointer,
      dependentKey.pointer,
    );
  }

  static NSArray classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_85(
      _lib._class_NSAttributedString1,
      _lib._sel_classFallbacksForKeyedArchiver1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSAttributedString1,
      _lib._sel_classForKeyedUnarchiver1,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

abstract class NSAttributedStringEnumerationOptions {
  static const int NSAttributedStringEnumerationReverse = 2;
  static const int
  NSAttributedStringEnumerationLongestEffectiveRangeNotRequired = 1048576;
}

void _ObjCBlock_ffiVoid_NSDictionary_NSRange_bool_fnPtrTrampoline(
  ffi.Pointer<objc.ObjCBlock> block,
  ffi.Pointer<objc.ObjCObject> arg0,
  _NSRange arg1,
  ffi.Pointer<ffi.Bool> arg2,
) => block.ref.target
    .cast<
      ffi.NativeFunction<
        ffi.Void Function(
          ffi.Pointer<objc.ObjCObject> arg0,
          _NSRange arg1,
          ffi.Pointer<ffi.Bool> arg2,
        )
      >
    >()
    .asFunction<
      void Function(
        ffi.Pointer<objc.ObjCObject>,
        _NSRange,
        ffi.Pointer<ffi.Bool>,
      )
    >()(arg0, arg1, arg2);
final _ObjCBlock_ffiVoid_NSDictionary_NSRange_bool_closureRegistry =
    <
      int,
      void Function(
        ffi.Pointer<objc.ObjCObject>,
        _NSRange,
        ffi.Pointer<ffi.Bool>,
      )
    >{};
int _ObjCBlock_ffiVoid_NSDictionary_NSRange_bool_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void>
_ObjCBlock_ffiVoid_NSDictionary_NSRange_bool_registerClosure(
  void Function(
    ffi.Pointer<objc.ObjCObject>,
    _NSRange,
    ffi.Pointer<ffi.Bool>,
  ) fn,
) {
  final id =
      ++_ObjCBlock_ffiVoid_NSDictionary_NSRange_bool_closureRegistryIndex;
  _ObjCBlock_ffiVoid_NSDictionary_NSRange_bool_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

void _ObjCBlock_ffiVoid_NSDictionary_NSRange_bool_closureTrampoline(
  ffi.Pointer<objc.ObjCBlock> block,
  ffi.Pointer<objc.ObjCObject> arg0,
  _NSRange arg1,
  ffi.Pointer<ffi.Bool> arg2,
) => _ObjCBlock_ffiVoid_NSDictionary_NSRange_bool_closureRegistry[block
    .ref
    .target
    .address]!(arg0, arg1, arg2);

class ObjCBlock_ffiVoid_NSDictionary_NSRange_bool extends objc.ObjCBlockBase {
  ObjCBlock_ffiVoid_NSDictionary_NSRange_bool._(
    ffi.Pointer<objc.ObjCBlock> pointer,
    this._lib, {
    bool retain = false,
    bool release = true,
  }) : super(pointer, retain: retain, release: release);

  AVFAudio _lib;

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_ffiVoid_NSDictionary_NSRange_bool castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCBlock> pointer, {
    bool retain = false,
    bool release = false,
  }) {
    return ObjCBlock_ffiVoid_NSDictionary_NSRange_bool._(
      pointer,
      lib,
      retain: retain,
      release: release,
    );
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSDictionary_NSRange_bool.fromFunctionPointer(
    AVFAudio lib,
    ffi.Pointer<
      ffi.NativeFunction<
        ffi.Void Function(
          ffi.Pointer<objc.ObjCObject> arg0,
          _NSRange arg1,
          ffi.Pointer<ffi.Bool> arg2,
        )
      >
    > ptr,
  ) : this._(objc.newBlock(
        _cFuncTrampoline ??=
            ffi.Pointer.fromFunction<
              ffi.Void Function(
                ffi.Pointer<objc.ObjCBlock>,
                ffi.Pointer<objc.ObjCObject>,
                _NSRange,
                ffi.Pointer<ffi.Bool>,
              )
            >(
              _ObjCBlock_ffiVoid_NSDictionary_NSRange_bool_fnPtrTrampoline,
            ).cast(),
        ptr.cast(),
      ), lib);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSDictionary_NSRange_bool.fromFunction(
    AVFAudio lib,
    void Function(NSDictionary, _NSRange, ffi.Pointer<ffi.Bool>) fn,
  ) : this._(objc.newBlock(
        _dartFuncTrampoline ??=
            ffi.Pointer.fromFunction<
              ffi.Void Function(
                ffi.Pointer<objc.ObjCBlock>,
                ffi.Pointer<objc.ObjCObject>,
                _NSRange,
                ffi.Pointer<ffi.Bool>,
              )
            >(
              _ObjCBlock_ffiVoid_NSDictionary_NSRange_bool_closureTrampoline,
            ).cast(),
        _ObjCBlock_ffiVoid_NSDictionary_NSRange_bool_registerClosure((
          ffi.Pointer<objc.ObjCObject> arg0,
          _NSRange arg1,
          ffi.Pointer<ffi.Bool> arg2,
        ) => fn(NSDictionary._(
          arg0,
          lib,
          retain: true,
          release: true,
        ), arg1, arg2)),
      ), lib);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_NSDictionary_NSRange_bool.listener(
    AVFAudio lib,
    void Function(NSDictionary, _NSRange, ffi.Pointer<ffi.Bool>) fn,
  ) : this._(objc.newBlock(
        (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
              ffi.Void Function(
                ffi.Pointer<objc.ObjCBlock>,
                ffi.Pointer<objc.ObjCObject>,
                _NSRange,
                ffi.Pointer<ffi.Bool>,
              )
            >.listener(
              _ObjCBlock_ffiVoid_NSDictionary_NSRange_bool_closureTrampoline,
            )..keepIsolateAlive = false)
            .nativeFunction
            .cast(),
        _ObjCBlock_ffiVoid_NSDictionary_NSRange_bool_registerClosure((
          ffi.Pointer<objc.ObjCObject> arg0,
          _NSRange arg1,
          ffi.Pointer<ffi.Bool> arg2,
        ) => fn(NSDictionary._(
          arg0,
          lib,
          retain: true,
          release: true,
        ), arg1, arg2)),
      ), lib);
  static ffi.NativeCallable<
    ffi.Void Function(
      ffi.Pointer<objc.ObjCBlock>,
      ffi.Pointer<objc.ObjCObject>,
      _NSRange,
      ffi.Pointer<ffi.Bool>,
    )
  >? _dartFuncListenerTrampoline;

  void call(
    NSDictionary arg0,
    _NSRange arg1,
    ffi.Pointer<ffi.Bool> arg2,
  ) => pointer.ref.invoke
      .cast<
        ffi.NativeFunction<
          ffi.Void Function(
            ffi.Pointer<objc.ObjCBlock> block,
            ffi.Pointer<objc.ObjCObject> arg0,
            _NSRange arg1,
            ffi.Pointer<ffi.Bool> arg2,
          )
        >
      >()
      .asFunction<
        void Function(
          ffi.Pointer<objc.ObjCBlock>,
          ffi.Pointer<objc.ObjCObject>,
          _NSRange,
          ffi.Pointer<ffi.Bool>,
        )
      >()(pointer, arg0.pointer, arg1, arg2);
}

void _ObjCBlock_ffiVoid_objcObjCObject_NSRange_bool_fnPtrTrampoline(
  ffi.Pointer<objc.ObjCBlock> block,
  ffi.Pointer<objc.ObjCObject> arg0,
  _NSRange arg1,
  ffi.Pointer<ffi.Bool> arg2,
) => block.ref.target
    .cast<
      ffi.NativeFunction<
        ffi.Void Function(
          ffi.Pointer<objc.ObjCObject> arg0,
          _NSRange arg1,
          ffi.Pointer<ffi.Bool> arg2,
        )
      >
    >()
    .asFunction<
      void Function(
        ffi.Pointer<objc.ObjCObject>,
        _NSRange,
        ffi.Pointer<ffi.Bool>,
      )
    >()(arg0, arg1, arg2);
final _ObjCBlock_ffiVoid_objcObjCObject_NSRange_bool_closureRegistry =
    <
      int,
      void Function(
        ffi.Pointer<objc.ObjCObject>,
        _NSRange,
        ffi.Pointer<ffi.Bool>,
      )
    >{};
int _ObjCBlock_ffiVoid_objcObjCObject_NSRange_bool_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void>
_ObjCBlock_ffiVoid_objcObjCObject_NSRange_bool_registerClosure(
  void Function(
    ffi.Pointer<objc.ObjCObject>,
    _NSRange,
    ffi.Pointer<ffi.Bool>,
  ) fn,
) {
  final id =
      ++_ObjCBlock_ffiVoid_objcObjCObject_NSRange_bool_closureRegistryIndex;
  _ObjCBlock_ffiVoid_objcObjCObject_NSRange_bool_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

void _ObjCBlock_ffiVoid_objcObjCObject_NSRange_bool_closureTrampoline(
  ffi.Pointer<objc.ObjCBlock> block,
  ffi.Pointer<objc.ObjCObject> arg0,
  _NSRange arg1,
  ffi.Pointer<ffi.Bool> arg2,
) => _ObjCBlock_ffiVoid_objcObjCObject_NSRange_bool_closureRegistry[block
    .ref
    .target
    .address]!(arg0, arg1, arg2);

class ObjCBlock_ffiVoid_objcObjCObject_NSRange_bool extends objc.ObjCBlockBase {
  ObjCBlock_ffiVoid_objcObjCObject_NSRange_bool._(
    ffi.Pointer<objc.ObjCBlock> pointer,
    this._lib, {
    bool retain = false,
    bool release = true,
  }) : super(pointer, retain: retain, release: release);

  AVFAudio _lib;

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_ffiVoid_objcObjCObject_NSRange_bool castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCBlock> pointer, {
    bool retain = false,
    bool release = false,
  }) {
    return ObjCBlock_ffiVoid_objcObjCObject_NSRange_bool._(
      pointer,
      lib,
      retain: retain,
      release: release,
    );
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_objcObjCObject_NSRange_bool.fromFunctionPointer(
    AVFAudio lib,
    ffi.Pointer<
      ffi.NativeFunction<
        ffi.Void Function(
          ffi.Pointer<objc.ObjCObject> arg0,
          _NSRange arg1,
          ffi.Pointer<ffi.Bool> arg2,
        )
      >
    > ptr,
  ) : this._(objc.newBlock(
        _cFuncTrampoline ??=
            ffi.Pointer.fromFunction<
              ffi.Void Function(
                ffi.Pointer<objc.ObjCBlock>,
                ffi.Pointer<objc.ObjCObject>,
                _NSRange,
                ffi.Pointer<ffi.Bool>,
              )
            >(
              _ObjCBlock_ffiVoid_objcObjCObject_NSRange_bool_fnPtrTrampoline,
            ).cast(),
        ptr.cast(),
      ), lib);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_objcObjCObject_NSRange_bool.fromFunction(
    AVFAudio lib,
    void Function(NSObject?, _NSRange, ffi.Pointer<ffi.Bool>) fn,
  ) : this._(objc.newBlock(
        _dartFuncTrampoline ??=
            ffi.Pointer.fromFunction<
              ffi.Void Function(
                ffi.Pointer<objc.ObjCBlock>,
                ffi.Pointer<objc.ObjCObject>,
                _NSRange,
                ffi.Pointer<ffi.Bool>,
              )
            >(
              _ObjCBlock_ffiVoid_objcObjCObject_NSRange_bool_closureTrampoline,
            ).cast(),
        _ObjCBlock_ffiVoid_objcObjCObject_NSRange_bool_registerClosure((
          ffi.Pointer<objc.ObjCObject> arg0,
          _NSRange arg1,
          ffi.Pointer<ffi.Bool> arg2,
        ) => fn(
          arg0.address == 0
              ? null
              : NSObject._(arg0, lib, retain: true, release: true),
          arg1,
          arg2,
        )),
      ), lib);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_objcObjCObject_NSRange_bool.listener(
    AVFAudio lib,
    void Function(NSObject?, _NSRange, ffi.Pointer<ffi.Bool>) fn,
  ) : this._(objc.newBlock(
        (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
              ffi.Void Function(
                ffi.Pointer<objc.ObjCBlock>,
                ffi.Pointer<objc.ObjCObject>,
                _NSRange,
                ffi.Pointer<ffi.Bool>,
              )
            >.listener(
              _ObjCBlock_ffiVoid_objcObjCObject_NSRange_bool_closureTrampoline,
            )..keepIsolateAlive = false)
            .nativeFunction
            .cast(),
        _ObjCBlock_ffiVoid_objcObjCObject_NSRange_bool_registerClosure((
          ffi.Pointer<objc.ObjCObject> arg0,
          _NSRange arg1,
          ffi.Pointer<ffi.Bool> arg2,
        ) => fn(
          arg0.address == 0
              ? null
              : NSObject._(arg0, lib, retain: true, release: true),
          arg1,
          arg2,
        )),
      ), lib);
  static ffi.NativeCallable<
    ffi.Void Function(
      ffi.Pointer<objc.ObjCBlock>,
      ffi.Pointer<objc.ObjCObject>,
      _NSRange,
      ffi.Pointer<ffi.Bool>,
    )
  >? _dartFuncListenerTrampoline;

  void call(
    NSObject? arg0,
    _NSRange arg1,
    ffi.Pointer<ffi.Bool> arg2,
  ) => pointer.ref.invoke
      .cast<
        ffi.NativeFunction<
          ffi.Void Function(
            ffi.Pointer<objc.ObjCBlock> block,
            ffi.Pointer<objc.ObjCObject> arg0,
            _NSRange arg1,
            ffi.Pointer<ffi.Bool> arg2,
          )
        >
      >()
      .asFunction<
        void Function(
          ffi.Pointer<objc.ObjCBlock>,
          ffi.Pointer<objc.ObjCObject>,
          _NSRange,
          ffi.Pointer<ffi.Bool>,
        )
      >()(pointer, arg0?.pointer ?? ffi.nullptr, arg1, arg2);
}

class NSAttributedStringMarkdownParsingOptions extends NSObject {
  NSAttributedStringMarkdownParsingOptions._(
    ffi.Pointer<objc.ObjCObject> pointer,
    AVFAudio lib, {
    bool retain = false,
    bool release = false,
  }) : super._(pointer, lib, retain: retain, release: release);

  /// Returns a [NSAttributedStringMarkdownParsingOptions] that points to the same underlying object as [other].
  static NSAttributedStringMarkdownParsingOptions castFrom<
    T extends objc.ObjCObjectBase
  >(AVFAudio lib, T other) {
    return NSAttributedStringMarkdownParsingOptions._(
      other.pointer,
      lib,
      retain: true,
      release: true,
    );
  }

  /// Returns a [NSAttributedStringMarkdownParsingOptions] that wraps the given raw object pointer.
  static NSAttributedStringMarkdownParsingOptions castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCObject> other, {
    bool retain = false,
    bool release = false,
  }) {
    return NSAttributedStringMarkdownParsingOptions._(
      other,
      lib,
      retain: retain,
      release: release,
    );
  }

  /// Returns whether [obj] is an instance of [NSAttributedStringMarkdownParsingOptions].
  static bool isInstance(AVFAudio lib, objc.ObjCObjectBase obj) {
    return lib._objc_msgSend_0(
      obj.pointer,
      lib._sel_isKindOfClass_1,
      lib._class_NSAttributedStringMarkdownParsingOptions1,
    );
  }

  @override
  NSAttributedStringMarkdownParsingOptions init() {
    final _ret = _lib._objc_msgSend_2(this.pointer, _lib._sel_init1);
    return NSAttributedStringMarkdownParsingOptions._(
      _ret,
      _lib,
      retain: true,
      release: true,
    );
  }

  bool get allowsExtendedAttributes {
    return _lib._objc_msgSend_12(
      this.pointer,
      _lib._sel_allowsExtendedAttributes1,
    );
  }

  set allowsExtendedAttributes(bool value) {
    return _lib._objc_msgSend_527(
      this.pointer,
      _lib._sel_setAllowsExtendedAttributes_1,
      value,
    );
  }

  int get interpretedSyntax {
    return _lib._objc_msgSend_721(this.pointer, _lib._sel_interpretedSyntax1);
  }

  set interpretedSyntax(int value) {
    return _lib._objc_msgSend_722(
      this.pointer,
      _lib._sel_setInterpretedSyntax_1,
      value,
    );
  }

  int get failurePolicy {
    return _lib._objc_msgSend_723(this.pointer, _lib._sel_failurePolicy1);
  }

  set failurePolicy(int value) {
    return _lib._objc_msgSend_724(
      this.pointer,
      _lib._sel_setFailurePolicy_1,
      value,
    );
  }

  NSString? get languageCode {
    final _ret = _lib._objc_msgSend_44(this.pointer, _lib._sel_languageCode1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  set languageCode(NSString? value) {
    return _lib._objc_msgSend_545(
      this.pointer,
      _lib._sel_setLanguageCode_1,
      value?.pointer ?? ffi.nullptr,
    );
  }

  bool get appliesSourcePositionAttributes {
    return _lib._objc_msgSend_12(
      this.pointer,
      _lib._sel_appliesSourcePositionAttributes1,
    );
  }

  set appliesSourcePositionAttributes(bool value) {
    return _lib._objc_msgSend_527(
      this.pointer,
      _lib._sel_setAppliesSourcePositionAttributes_1,
      value,
    );
  }

  static NSAttributedStringMarkdownParsingOptions new1(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSAttributedStringMarkdownParsingOptions1,
      _lib._sel_new1,
    );
    return NSAttributedStringMarkdownParsingOptions._(
      _ret,
      _lib,
      retain: false,
      release: true,
    );
  }

  static NSAttributedStringMarkdownParsingOptions allocWithZone_(
    AVFAudio _lib,
    ffi.Pointer<_NSZone> zone,
  ) {
    final _ret = _lib._objc_msgSend_3(
      _lib._class_NSAttributedStringMarkdownParsingOptions1,
      _lib._sel_allocWithZone_1,
      zone,
    );
    return NSAttributedStringMarkdownParsingOptions._(
      _ret,
      _lib,
      retain: false,
      release: true,
    );
  }

  static NSAttributedStringMarkdownParsingOptions alloc(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSAttributedStringMarkdownParsingOptions1,
      _lib._sel_alloc1,
    );
    return NSAttributedStringMarkdownParsingOptions._(
      _ret,
      _lib,
      retain: false,
      release: true,
    );
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
    AVFAudio _lib,
    NSObject aTarget,
    ffi.Pointer<objc.ObjCSelector> aSelector,
    NSObject? anArgument,
  ) {
    _lib._objc_msgSend_14(
      _lib._class_NSAttributedStringMarkdownParsingOptions1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
      aTarget.pointer,
      aSelector,
      anArgument?.pointer ?? ffi.nullptr,
    );
  }

  static void cancelPreviousPerformRequestsWithTarget_(
    AVFAudio _lib,
    NSObject aTarget,
  ) {
    _lib._objc_msgSend_15(
      _lib._class_NSAttributedStringMarkdownParsingOptions1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_1,
      aTarget.pointer,
    );
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSAttributedStringMarkdownParsingOptions1,
      _lib._sel_accessInstanceVariablesDirectly1,
    );
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSAttributedStringMarkdownParsingOptions1,
      _lib._sel_useStoredAccessor1,
    );
  }

  static NSSet keyPathsForValuesAffectingValueForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    final _ret = _lib._objc_msgSend_63(
      _lib._class_NSAttributedStringMarkdownParsingOptions1,
      _lib._sel_keyPathsForValuesAffectingValueForKey_1,
      key.pointer,
    );
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    return _lib._objc_msgSend_64(
      _lib._class_NSAttributedStringMarkdownParsingOptions1,
      _lib._sel_automaticallyNotifiesObserversForKey_1,
      key.pointer,
    );
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
    AVFAudio _lib,
    NSArray keys,
    NSString dependentKey,
  ) {
    _lib._objc_msgSend_88(
      _lib._class_NSAttributedStringMarkdownParsingOptions1,
      _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
      keys.pointer,
      dependentKey.pointer,
    );
  }

  static NSArray classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_85(
      _lib._class_NSAttributedStringMarkdownParsingOptions1,
      _lib._sel_classFallbacksForKeyedArchiver1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSAttributedStringMarkdownParsingOptions1,
      _lib._sel_classForKeyedUnarchiver1,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

abstract class NSAttributedStringMarkdownInterpretedSyntax {
  static const int NSAttributedStringMarkdownInterpretedSyntaxFull = 0;
  static const int NSAttributedStringMarkdownInterpretedSyntaxInlineOnly = 1;
  static const int
  NSAttributedStringMarkdownInterpretedSyntaxInlineOnlyPreservingWhitespace = 2;
}

abstract class NSAttributedStringMarkdownParsingFailurePolicy {
  static const int NSAttributedStringMarkdownParsingFailureReturnError = 0;
  static const int
  NSAttributedStringMarkdownParsingFailureReturnPartiallyParsedIfPossible = 1;
}

abstract class NSAttributedStringFormattingOptions {
  static const int
  NSAttributedStringFormattingInsertArgumentAttributesWithoutMerging = 1;
  static const int NSAttributedStringFormattingApplyReplacementIndexAttribute =
      2;
}

class NSMutableAttributedString extends NSAttributedString {
  NSMutableAttributedString._(
    ffi.Pointer<objc.ObjCObject> pointer,
    AVFAudio lib, {
    bool retain = false,
    bool release = false,
  }) : super._(pointer, lib, retain: retain, release: release);

  /// Returns a [NSMutableAttributedString] that points to the same underlying object as [other].
  static NSMutableAttributedString castFrom<T extends objc.ObjCObjectBase>(
    AVFAudio lib,
    T other,
  ) {
    return NSMutableAttributedString._(
      other.pointer,
      lib,
      retain: true,
      release: true,
    );
  }

  /// Returns a [NSMutableAttributedString] that wraps the given raw object pointer.
  static NSMutableAttributedString castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCObject> other, {
    bool retain = false,
    bool release = false,
  }) {
    return NSMutableAttributedString._(
      other,
      lib,
      retain: retain,
      release: release,
    );
  }

  /// Returns whether [obj] is an instance of [NSMutableAttributedString].
  static bool isInstance(AVFAudio lib, objc.ObjCObjectBase obj) {
    return lib._objc_msgSend_0(
      obj.pointer,
      lib._sel_isKindOfClass_1,
      lib._class_NSMutableAttributedString1,
    );
  }

  void replaceCharactersInRange_withString_(_NSRange range, NSString str) {
    _lib._objc_msgSend_689(
      this.pointer,
      _lib._sel_replaceCharactersInRange_withString_1,
      range,
      str.pointer,
    );
  }

  void setAttributes_range_(NSDictionary? attrs, _NSRange range) {
    _lib._objc_msgSend_739(
      this.pointer,
      _lib._sel_setAttributes_range_1,
      attrs?.pointer ?? ffi.nullptr,
      range,
    );
  }

  NSMutableString get mutableString {
    final _ret = _lib._objc_msgSend_740(this.pointer, _lib._sel_mutableString1);
    return NSMutableString._(_ret, _lib, retain: true, release: true);
  }

  void addAttribute_value_range_(
    NSString name,
    NSObject value,
    _NSRange range,
  ) {
    _lib._objc_msgSend_741(
      this.pointer,
      _lib._sel_addAttribute_value_range_1,
      name.pointer,
      value.pointer,
      range,
    );
  }

  void addAttributes_range_(NSDictionary attrs, _NSRange range) {
    _lib._objc_msgSend_742(
      this.pointer,
      _lib._sel_addAttributes_range_1,
      attrs.pointer,
      range,
    );
  }

  void removeAttribute_range_(NSString name, _NSRange range) {
    _lib._objc_msgSend_743(
      this.pointer,
      _lib._sel_removeAttribute_range_1,
      name.pointer,
      range,
    );
  }

  void replaceCharactersInRange_withAttributedString_(
    _NSRange range,
    NSAttributedString attrString,
  ) {
    _lib._objc_msgSend_744(
      this.pointer,
      _lib._sel_replaceCharactersInRange_withAttributedString_1,
      range,
      attrString.pointer,
    );
  }

  void insertAttributedString_atIndex_(NSAttributedString attrString, int loc) {
    _lib._objc_msgSend_745(
      this.pointer,
      _lib._sel_insertAttributedString_atIndex_1,
      attrString.pointer,
      loc,
    );
  }

  void appendAttributedString_(NSAttributedString attrString) {
    _lib._objc_msgSend_746(
      this.pointer,
      _lib._sel_appendAttributedString_1,
      attrString.pointer,
    );
  }

  void deleteCharactersInRange_(_NSRange range) {
    _lib._objc_msgSend_476(
      this.pointer,
      _lib._sel_deleteCharactersInRange_1,
      range,
    );
  }

  void setAttributedString_(NSAttributedString attrString) {
    _lib._objc_msgSend_746(
      this.pointer,
      _lib._sel_setAttributedString_1,
      attrString.pointer,
    );
  }

  void beginEditing() {
    _lib._objc_msgSend_1(this.pointer, _lib._sel_beginEditing1);
  }

  void endEditing() {
    _lib._objc_msgSend_1(this.pointer, _lib._sel_endEditing1);
  }

  void appendLocalizedFormat_(NSAttributedString format) {
    _lib._objc_msgSend_746(
      this.pointer,
      _lib._sel_appendLocalizedFormat_1,
      format.pointer,
    );
  }

  @override
  NSMutableAttributedString initWithString_(NSString str) {
    final _ret = _lib._objc_msgSend_31(
      this.pointer,
      _lib._sel_initWithString_1,
      str.pointer,
    );
    return NSMutableAttributedString._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSMutableAttributedString initWithString_attributes_(
    NSString str,
    NSDictionary? attrs,
  ) {
    final _ret = _lib._objc_msgSend_717(
      this.pointer,
      _lib._sel_initWithString_attributes_1,
      str.pointer,
      attrs?.pointer ?? ffi.nullptr,
    );
    return NSMutableAttributedString._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSMutableAttributedString initWithAttributedString_(
    NSAttributedString attrStr,
  ) {
    final _ret = _lib._objc_msgSend_718(
      this.pointer,
      _lib._sel_initWithAttributedString_1,
      attrStr.pointer,
    );
    return NSMutableAttributedString._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSMutableAttributedString?
  initWithContentsOfMarkdownFileAtURL_options_baseURL_error_(
    NSURL markdownFile,
    NSAttributedStringMarkdownParsingOptions? options,
    NSURL? baseURL,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    final _ret = _lib._objc_msgSend_725(
      this.pointer,
      _lib._sel_initWithContentsOfMarkdownFileAtURL_options_baseURL_error_1,
      markdownFile.pointer,
      options?.pointer ?? ffi.nullptr,
      baseURL?.pointer ?? ffi.nullptr,
      error,
    );
    return _ret.address == 0
        ? null
        : NSMutableAttributedString._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSMutableAttributedString? initWithMarkdown_options_baseURL_error_(
    NSData markdown,
    NSAttributedStringMarkdownParsingOptions? options,
    NSURL? baseURL,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    final _ret = _lib._objc_msgSend_726(
      this.pointer,
      _lib._sel_initWithMarkdown_options_baseURL_error_1,
      markdown.pointer,
      options?.pointer ?? ffi.nullptr,
      baseURL?.pointer ?? ffi.nullptr,
      error,
    );
    return _ret.address == 0
        ? null
        : NSMutableAttributedString._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSMutableAttributedString? initWithMarkdownString_options_baseURL_error_(
    NSString markdownString,
    NSAttributedStringMarkdownParsingOptions? options,
    NSURL? baseURL,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    final _ret = _lib._objc_msgSend_727(
      this.pointer,
      _lib._sel_initWithMarkdownString_options_baseURL_error_1,
      markdownString.pointer,
      options?.pointer ?? ffi.nullptr,
      baseURL?.pointer ?? ffi.nullptr,
      error,
    );
    return _ret.address == 0
        ? null
        : NSMutableAttributedString._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSMutableAttributedString initWithFormat_options_locale_(
    NSAttributedString format,
    int options,
    NSLocale? locale,
  ) {
    final _ret = _lib._objc_msgSend_728(
      this.pointer,
      _lib._sel_initWithFormat_options_locale_1,
      format.pointer,
      options,
      locale?.pointer ?? ffi.nullptr,
    );
    return NSMutableAttributedString._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSMutableAttributedString initWithFormat_options_locale_arguments_(
    NSAttributedString format,
    int options,
    NSLocale? locale,
    ffi.Pointer<__va_list_tag> arguments,
  ) {
    final _ret = _lib._objc_msgSend_729(
      this.pointer,
      _lib._sel_initWithFormat_options_locale_arguments_1,
      format.pointer,
      options,
      locale?.pointer ?? ffi.nullptr,
      arguments,
    );
    return NSMutableAttributedString._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableAttributedString localizedAttributedStringWithFormat_(
    AVFAudio _lib,
    NSAttributedString format,
  ) {
    final _ret = _lib._objc_msgSend_718(
      _lib._class_NSMutableAttributedString1,
      _lib._sel_localizedAttributedStringWithFormat_1,
      format.pointer,
    );
    return NSMutableAttributedString._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableAttributedString localizedAttributedStringWithFormat_options_(
    AVFAudio _lib,
    NSAttributedString format,
    int options,
  ) {
    final _ret = _lib._objc_msgSend_730(
      _lib._class_NSMutableAttributedString1,
      _lib._sel_localizedAttributedStringWithFormat_options_1,
      format.pointer,
      options,
    );
    return NSMutableAttributedString._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSMutableAttributedString initWithFormat_options_locale_context_(
    NSAttributedString format,
    int options,
    NSLocale? locale,
    NSDictionary context,
  ) {
    final _ret = _lib._objc_msgSend_731(
      this.pointer,
      _lib._sel_initWithFormat_options_locale_context_1,
      format.pointer,
      options,
      locale?.pointer ?? ffi.nullptr,
      context.pointer,
    );
    return NSMutableAttributedString._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSMutableAttributedString initWithFormat_options_locale_context_arguments_(
    NSAttributedString format,
    int options,
    NSLocale? locale,
    NSDictionary context,
    ffi.Pointer<__va_list_tag> arguments,
  ) {
    final _ret = _lib._objc_msgSend_732(
      this.pointer,
      _lib._sel_initWithFormat_options_locale_context_arguments_1,
      format.pointer,
      options,
      locale?.pointer ?? ffi.nullptr,
      context.pointer,
      arguments,
    );
    return NSMutableAttributedString._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableAttributedString localizedAttributedStringWithFormat_context_(
    AVFAudio _lib,
    NSAttributedString format,
    NSDictionary context,
  ) {
    final _ret = _lib._objc_msgSend_733(
      _lib._class_NSMutableAttributedString1,
      _lib._sel_localizedAttributedStringWithFormat_context_1,
      format.pointer,
      context.pointer,
    );
    return NSMutableAttributedString._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableAttributedString
  localizedAttributedStringWithFormat_options_context_(
    AVFAudio _lib,
    NSAttributedString format,
    int options,
    NSDictionary context,
  ) {
    final _ret = _lib._objc_msgSend_734(
      _lib._class_NSMutableAttributedString1,
      _lib._sel_localizedAttributedStringWithFormat_options_context_1,
      format.pointer,
      options,
      context.pointer,
    );
    return NSMutableAttributedString._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSMutableAttributedString init() {
    final _ret = _lib._objc_msgSend_2(this.pointer, _lib._sel_init1);
    return NSMutableAttributedString._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableAttributedString new1(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSMutableAttributedString1,
      _lib._sel_new1,
    );
    return NSMutableAttributedString._(
      _ret,
      _lib,
      retain: false,
      release: true,
    );
  }

  static NSMutableAttributedString allocWithZone_(
    AVFAudio _lib,
    ffi.Pointer<_NSZone> zone,
  ) {
    final _ret = _lib._objc_msgSend_3(
      _lib._class_NSMutableAttributedString1,
      _lib._sel_allocWithZone_1,
      zone,
    );
    return NSMutableAttributedString._(
      _ret,
      _lib,
      retain: false,
      release: true,
    );
  }

  static NSMutableAttributedString alloc(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSMutableAttributedString1,
      _lib._sel_alloc1,
    );
    return NSMutableAttributedString._(
      _ret,
      _lib,
      retain: false,
      release: true,
    );
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
    AVFAudio _lib,
    NSObject aTarget,
    ffi.Pointer<objc.ObjCSelector> aSelector,
    NSObject? anArgument,
  ) {
    _lib._objc_msgSend_14(
      _lib._class_NSMutableAttributedString1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
      aTarget.pointer,
      aSelector,
      anArgument?.pointer ?? ffi.nullptr,
    );
  }

  static void cancelPreviousPerformRequestsWithTarget_(
    AVFAudio _lib,
    NSObject aTarget,
  ) {
    _lib._objc_msgSend_15(
      _lib._class_NSMutableAttributedString1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_1,
      aTarget.pointer,
    );
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSMutableAttributedString1,
      _lib._sel_accessInstanceVariablesDirectly1,
    );
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSMutableAttributedString1,
      _lib._sel_useStoredAccessor1,
    );
  }

  static NSSet keyPathsForValuesAffectingValueForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    final _ret = _lib._objc_msgSend_63(
      _lib._class_NSMutableAttributedString1,
      _lib._sel_keyPathsForValuesAffectingValueForKey_1,
      key.pointer,
    );
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    return _lib._objc_msgSend_64(
      _lib._class_NSMutableAttributedString1,
      _lib._sel_automaticallyNotifiesObserversForKey_1,
      key.pointer,
    );
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
    AVFAudio _lib,
    NSArray keys,
    NSString dependentKey,
  ) {
    _lib._objc_msgSend_88(
      _lib._class_NSMutableAttributedString1,
      _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
      keys.pointer,
      dependentKey.pointer,
    );
  }

  static NSArray classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_85(
      _lib._class_NSMutableAttributedString1,
      _lib._sel_classFallbacksForKeyedArchiver1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSMutableAttributedString1,
      _lib._sel_classForKeyedUnarchiver1,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

class NSDateFormatter extends NSFormatter {
  NSDateFormatter._(
    ffi.Pointer<objc.ObjCObject> pointer,
    AVFAudio lib, {
    bool retain = false,
    bool release = false,
  }) : super._(pointer, lib, retain: retain, release: release);

  /// Returns a [NSDateFormatter] that points to the same underlying object as [other].
  static NSDateFormatter castFrom<T extends objc.ObjCObjectBase>(
    AVFAudio lib,
    T other,
  ) {
    return NSDateFormatter._(other.pointer, lib, retain: true, release: true);
  }

  /// Returns a [NSDateFormatter] that wraps the given raw object pointer.
  static NSDateFormatter castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCObject> other, {
    bool retain = false,
    bool release = false,
  }) {
    return NSDateFormatter._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSDateFormatter].
  static bool isInstance(AVFAudio lib, objc.ObjCObjectBase obj) {
    return lib._objc_msgSend_0(
      obj.pointer,
      lib._sel_isKindOfClass_1,
      lib._class_NSDateFormatter1,
    );
  }

  int get formattingContext {
    return _lib._objc_msgSend_752(this.pointer, _lib._sel_formattingContext1);
  }

  set formattingContext(int value) {
    return _lib._objc_msgSend_753(
      this.pointer,
      _lib._sel_setFormattingContext_1,
      value,
    );
  }

  bool getObjectValue_forString_range_error_(
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> obj,
    NSString string,
    ffi.Pointer<_NSRange> rangep,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    return _lib._objc_msgSend_754(
      this.pointer,
      _lib._sel_getObjectValue_forString_range_error_1,
      obj,
      string.pointer,
      rangep,
      error,
    );
  }

  NSString stringFromDate_(NSDate date) {
    final _ret = _lib._objc_msgSend_755(
      this.pointer,
      _lib._sel_stringFromDate_1,
      date.pointer,
    );
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSDate? dateFromString_(NSString string) {
    final _ret = _lib._objc_msgSend_564(
      this.pointer,
      _lib._sel_dateFromString_1,
      string.pointer,
    );
    return _ret.address == 0
        ? null
        : NSDate._(_ret, _lib, retain: true, release: true);
  }

  static NSString localizedStringFromDate_dateStyle_timeStyle_(
    AVFAudio _lib,
    NSDate date,
    int dstyle,
    int tstyle,
  ) {
    final _ret = _lib._objc_msgSend_756(
      _lib._class_NSDateFormatter1,
      _lib._sel_localizedStringFromDate_dateStyle_timeStyle_1,
      date.pointer,
      dstyle,
      tstyle,
    );
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  static NSString? dateFormatFromTemplate_options_locale_(
    AVFAudio _lib,
    NSString tmplate,
    int opts,
    NSLocale? locale,
  ) {
    final _ret = _lib._objc_msgSend_757(
      _lib._class_NSDateFormatter1,
      _lib._sel_dateFormatFromTemplate_options_locale_1,
      tmplate.pointer,
      opts,
      locale?.pointer ?? ffi.nullptr,
    );
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  static int getDefaultFormatterBehavior(AVFAudio _lib) {
    return _lib._objc_msgSend_758(
      _lib._class_NSDateFormatter1,
      _lib._sel_defaultFormatterBehavior1,
    );
  }

  static void setDefaultFormatterBehavior(AVFAudio _lib, int value) {
    return _lib._objc_msgSend_759(
      _lib._class_NSDateFormatter1,
      _lib._sel_setDefaultFormatterBehavior_1,
      value,
    );
  }

  void setLocalizedDateFormatFromTemplate_(NSString dateFormatTemplate) {
    _lib._objc_msgSend_247(
      this.pointer,
      _lib._sel_setLocalizedDateFormatFromTemplate_1,
      dateFormatTemplate.pointer,
    );
  }

  NSString get dateFormat {
    final _ret = _lib._objc_msgSend_21(this.pointer, _lib._sel_dateFormat1);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  set dateFormat(NSString value) {
    return _lib._objc_msgSend_646(
      this.pointer,
      _lib._sel_setDateFormat_1,
      value.pointer,
    );
  }

  int get dateStyle {
    return _lib._objc_msgSend_760(this.pointer, _lib._sel_dateStyle1);
  }

  set dateStyle(int value) {
    return _lib._objc_msgSend_761(
      this.pointer,
      _lib._sel_setDateStyle_1,
      value,
    );
  }

  int get timeStyle {
    return _lib._objc_msgSend_760(this.pointer, _lib._sel_timeStyle1);
  }

  set timeStyle(int value) {
    return _lib._objc_msgSend_761(
      this.pointer,
      _lib._sel_setTimeStyle_1,
      value,
    );
  }

  NSLocale get locale {
    final _ret = _lib._objc_msgSend_197(this.pointer, _lib._sel_locale1);
    return NSLocale._(_ret, _lib, retain: true, release: true);
  }

  set locale(NSLocale value) {
    return _lib._objc_msgSend_762(
      this.pointer,
      _lib._sel_setLocale_1,
      value.pointer,
    );
  }

  bool get generatesCalendarDates {
    return _lib._objc_msgSend_12(
      this.pointer,
      _lib._sel_generatesCalendarDates1,
    );
  }

  set generatesCalendarDates(bool value) {
    return _lib._objc_msgSend_527(
      this.pointer,
      _lib._sel_setGeneratesCalendarDates_1,
      value,
    );
  }

  int get formatterBehavior {
    return _lib._objc_msgSend_758(this.pointer, _lib._sel_formatterBehavior1);
  }

  set formatterBehavior(int value) {
    return _lib._objc_msgSend_759(
      this.pointer,
      _lib._sel_setFormatterBehavior_1,
      value,
    );
  }

  NSTimeZone get timeZone {
    final _ret = _lib._objc_msgSend_179(this.pointer, _lib._sel_timeZone1);
    return NSTimeZone._(_ret, _lib, retain: true, release: true);
  }

  set timeZone(NSTimeZone value) {
    return _lib._objc_msgSend_180(
      this.pointer,
      _lib._sel_setTimeZone_1,
      value.pointer,
    );
  }

  NSCalendar get calendar {
    final _ret = _lib._objc_msgSend_763(this.pointer, _lib._sel_calendar1);
    return NSCalendar._(_ret, _lib, retain: true, release: true);
  }

  set calendar(NSCalendar value) {
    return _lib._objc_msgSend_799(
      this.pointer,
      _lib._sel_setCalendar_1,
      value.pointer,
    );
  }

  bool get lenient {
    return _lib._objc_msgSend_12(this.pointer, _lib._sel_isLenient1);
  }

  set lenient(bool value) {
    return _lib._objc_msgSend_527(this.pointer, _lib._sel_setLenient_1, value);
  }

  NSDate? get twoDigitStartDate {
    final _ret = _lib._objc_msgSend_183(
      this.pointer,
      _lib._sel_twoDigitStartDate1,
    );
    return _ret.address == 0
        ? null
        : NSDate._(_ret, _lib, retain: true, release: true);
  }

  set twoDigitStartDate(NSDate? value) {
    return _lib._objc_msgSend_800(
      this.pointer,
      _lib._sel_setTwoDigitStartDate_1,
      value?.pointer ?? ffi.nullptr,
    );
  }

  NSDate? get defaultDate {
    final _ret = _lib._objc_msgSend_183(this.pointer, _lib._sel_defaultDate1);
    return _ret.address == 0
        ? null
        : NSDate._(_ret, _lib, retain: true, release: true);
  }

  set defaultDate(NSDate? value) {
    return _lib._objc_msgSend_800(
      this.pointer,
      _lib._sel_setDefaultDate_1,
      value?.pointer ?? ffi.nullptr,
    );
  }

  NSArray get eraSymbols {
    final _ret = _lib._objc_msgSend_85(this.pointer, _lib._sel_eraSymbols1);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  set eraSymbols(NSArray value) {
    return _lib._objc_msgSend_801(
      this.pointer,
      _lib._sel_setEraSymbols_1,
      value.pointer,
    );
  }

  NSArray get monthSymbols {
    final _ret = _lib._objc_msgSend_85(this.pointer, _lib._sel_monthSymbols1);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  set monthSymbols(NSArray value) {
    return _lib._objc_msgSend_801(
      this.pointer,
      _lib._sel_setMonthSymbols_1,
      value.pointer,
    );
  }

  NSArray get shortMonthSymbols {
    final _ret = _lib._objc_msgSend_85(
      this.pointer,
      _lib._sel_shortMonthSymbols1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  set shortMonthSymbols(NSArray value) {
    return _lib._objc_msgSend_801(
      this.pointer,
      _lib._sel_setShortMonthSymbols_1,
      value.pointer,
    );
  }

  NSArray get weekdaySymbols {
    final _ret = _lib._objc_msgSend_85(this.pointer, _lib._sel_weekdaySymbols1);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  set weekdaySymbols(NSArray value) {
    return _lib._objc_msgSend_801(
      this.pointer,
      _lib._sel_setWeekdaySymbols_1,
      value.pointer,
    );
  }

  NSArray get shortWeekdaySymbols {
    final _ret = _lib._objc_msgSend_85(
      this.pointer,
      _lib._sel_shortWeekdaySymbols1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  set shortWeekdaySymbols(NSArray value) {
    return _lib._objc_msgSend_801(
      this.pointer,
      _lib._sel_setShortWeekdaySymbols_1,
      value.pointer,
    );
  }

  NSString get AMSymbol {
    final _ret = _lib._objc_msgSend_21(this.pointer, _lib._sel_AMSymbol1);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  set AMSymbol(NSString value) {
    return _lib._objc_msgSend_646(
      this.pointer,
      _lib._sel_setAMSymbol_1,
      value.pointer,
    );
  }

  NSString get PMSymbol {
    final _ret = _lib._objc_msgSend_21(this.pointer, _lib._sel_PMSymbol1);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  set PMSymbol(NSString value) {
    return _lib._objc_msgSend_646(
      this.pointer,
      _lib._sel_setPMSymbol_1,
      value.pointer,
    );
  }

  NSArray get longEraSymbols {
    final _ret = _lib._objc_msgSend_85(this.pointer, _lib._sel_longEraSymbols1);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  set longEraSymbols(NSArray value) {
    return _lib._objc_msgSend_801(
      this.pointer,
      _lib._sel_setLongEraSymbols_1,
      value.pointer,
    );
  }

  NSArray get veryShortMonthSymbols {
    final _ret = _lib._objc_msgSend_85(
      this.pointer,
      _lib._sel_veryShortMonthSymbols1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  set veryShortMonthSymbols(NSArray value) {
    return _lib._objc_msgSend_801(
      this.pointer,
      _lib._sel_setVeryShortMonthSymbols_1,
      value.pointer,
    );
  }

  NSArray get standaloneMonthSymbols {
    final _ret = _lib._objc_msgSend_85(
      this.pointer,
      _lib._sel_standaloneMonthSymbols1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  set standaloneMonthSymbols(NSArray value) {
    return _lib._objc_msgSend_801(
      this.pointer,
      _lib._sel_setStandaloneMonthSymbols_1,
      value.pointer,
    );
  }

  NSArray get shortStandaloneMonthSymbols {
    final _ret = _lib._objc_msgSend_85(
      this.pointer,
      _lib._sel_shortStandaloneMonthSymbols1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  set shortStandaloneMonthSymbols(NSArray value) {
    return _lib._objc_msgSend_801(
      this.pointer,
      _lib._sel_setShortStandaloneMonthSymbols_1,
      value.pointer,
    );
  }

  NSArray get veryShortStandaloneMonthSymbols {
    final _ret = _lib._objc_msgSend_85(
      this.pointer,
      _lib._sel_veryShortStandaloneMonthSymbols1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  set veryShortStandaloneMonthSymbols(NSArray value) {
    return _lib._objc_msgSend_801(
      this.pointer,
      _lib._sel_setVeryShortStandaloneMonthSymbols_1,
      value.pointer,
    );
  }

  NSArray get veryShortWeekdaySymbols {
    final _ret = _lib._objc_msgSend_85(
      this.pointer,
      _lib._sel_veryShortWeekdaySymbols1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  set veryShortWeekdaySymbols(NSArray value) {
    return _lib._objc_msgSend_801(
      this.pointer,
      _lib._sel_setVeryShortWeekdaySymbols_1,
      value.pointer,
    );
  }

  NSArray get standaloneWeekdaySymbols {
    final _ret = _lib._objc_msgSend_85(
      this.pointer,
      _lib._sel_standaloneWeekdaySymbols1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  set standaloneWeekdaySymbols(NSArray value) {
    return _lib._objc_msgSend_801(
      this.pointer,
      _lib._sel_setStandaloneWeekdaySymbols_1,
      value.pointer,
    );
  }

  NSArray get shortStandaloneWeekdaySymbols {
    final _ret = _lib._objc_msgSend_85(
      this.pointer,
      _lib._sel_shortStandaloneWeekdaySymbols1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  set shortStandaloneWeekdaySymbols(NSArray value) {
    return _lib._objc_msgSend_801(
      this.pointer,
      _lib._sel_setShortStandaloneWeekdaySymbols_1,
      value.pointer,
    );
  }

  NSArray get veryShortStandaloneWeekdaySymbols {
    final _ret = _lib._objc_msgSend_85(
      this.pointer,
      _lib._sel_veryShortStandaloneWeekdaySymbols1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  set veryShortStandaloneWeekdaySymbols(NSArray value) {
    return _lib._objc_msgSend_801(
      this.pointer,
      _lib._sel_setVeryShortStandaloneWeekdaySymbols_1,
      value.pointer,
    );
  }

  NSArray get quarterSymbols {
    final _ret = _lib._objc_msgSend_85(this.pointer, _lib._sel_quarterSymbols1);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  set quarterSymbols(NSArray value) {
    return _lib._objc_msgSend_801(
      this.pointer,
      _lib._sel_setQuarterSymbols_1,
      value.pointer,
    );
  }

  NSArray get shortQuarterSymbols {
    final _ret = _lib._objc_msgSend_85(
      this.pointer,
      _lib._sel_shortQuarterSymbols1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  set shortQuarterSymbols(NSArray value) {
    return _lib._objc_msgSend_801(
      this.pointer,
      _lib._sel_setShortQuarterSymbols_1,
      value.pointer,
    );
  }

  NSArray get standaloneQuarterSymbols {
    final _ret = _lib._objc_msgSend_85(
      this.pointer,
      _lib._sel_standaloneQuarterSymbols1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  set standaloneQuarterSymbols(NSArray value) {
    return _lib._objc_msgSend_801(
      this.pointer,
      _lib._sel_setStandaloneQuarterSymbols_1,
      value.pointer,
    );
  }

  NSArray get shortStandaloneQuarterSymbols {
    final _ret = _lib._objc_msgSend_85(
      this.pointer,
      _lib._sel_shortStandaloneQuarterSymbols1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  set shortStandaloneQuarterSymbols(NSArray value) {
    return _lib._objc_msgSend_801(
      this.pointer,
      _lib._sel_setShortStandaloneQuarterSymbols_1,
      value.pointer,
    );
  }

  NSDate? get gregorianStartDate {
    final _ret = _lib._objc_msgSend_183(
      this.pointer,
      _lib._sel_gregorianStartDate1,
    );
    return _ret.address == 0
        ? null
        : NSDate._(_ret, _lib, retain: true, release: true);
  }

  set gregorianStartDate(NSDate? value) {
    return _lib._objc_msgSend_800(
      this.pointer,
      _lib._sel_setGregorianStartDate_1,
      value?.pointer ?? ffi.nullptr,
    );
  }

  bool get doesRelativeDateFormatting {
    return _lib._objc_msgSend_12(
      this.pointer,
      _lib._sel_doesRelativeDateFormatting1,
    );
  }

  set doesRelativeDateFormatting(bool value) {
    return _lib._objc_msgSend_527(
      this.pointer,
      _lib._sel_setDoesRelativeDateFormatting_1,
      value,
    );
  }

  NSObject initWithDateFormat_allowNaturalLanguage_(
    NSString format,
    bool flag,
  ) {
    final _ret = _lib._objc_msgSend_30(
      this.pointer,
      _lib._sel_initWithDateFormat_allowNaturalLanguage_1,
      format.pointer,
      flag,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  bool allowsNaturalLanguage() {
    return _lib._objc_msgSend_12(
      this.pointer,
      _lib._sel_allowsNaturalLanguage1,
    );
  }

  @override
  NSDateFormatter init() {
    final _ret = _lib._objc_msgSend_2(this.pointer, _lib._sel_init1);
    return NSDateFormatter._(_ret, _lib, retain: true, release: true);
  }

  static NSDateFormatter new1(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSDateFormatter1,
      _lib._sel_new1,
    );
    return NSDateFormatter._(_ret, _lib, retain: false, release: true);
  }

  static NSDateFormatter allocWithZone_(
    AVFAudio _lib,
    ffi.Pointer<_NSZone> zone,
  ) {
    final _ret = _lib._objc_msgSend_3(
      _lib._class_NSDateFormatter1,
      _lib._sel_allocWithZone_1,
      zone,
    );
    return NSDateFormatter._(_ret, _lib, retain: false, release: true);
  }

  static NSDateFormatter alloc(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSDateFormatter1,
      _lib._sel_alloc1,
    );
    return NSDateFormatter._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
    AVFAudio _lib,
    NSObject aTarget,
    ffi.Pointer<objc.ObjCSelector> aSelector,
    NSObject? anArgument,
  ) {
    _lib._objc_msgSend_14(
      _lib._class_NSDateFormatter1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
      aTarget.pointer,
      aSelector,
      anArgument?.pointer ?? ffi.nullptr,
    );
  }

  static void cancelPreviousPerformRequestsWithTarget_(
    AVFAudio _lib,
    NSObject aTarget,
  ) {
    _lib._objc_msgSend_15(
      _lib._class_NSDateFormatter1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_1,
      aTarget.pointer,
    );
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSDateFormatter1,
      _lib._sel_accessInstanceVariablesDirectly1,
    );
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSDateFormatter1,
      _lib._sel_useStoredAccessor1,
    );
  }

  static NSSet keyPathsForValuesAffectingValueForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    final _ret = _lib._objc_msgSend_63(
      _lib._class_NSDateFormatter1,
      _lib._sel_keyPathsForValuesAffectingValueForKey_1,
      key.pointer,
    );
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    return _lib._objc_msgSend_64(
      _lib._class_NSDateFormatter1,
      _lib._sel_automaticallyNotifiesObserversForKey_1,
      key.pointer,
    );
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
    AVFAudio _lib,
    NSArray keys,
    NSString dependentKey,
  ) {
    _lib._objc_msgSend_88(
      _lib._class_NSDateFormatter1,
      _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
      keys.pointer,
      dependentKey.pointer,
    );
  }

  static NSArray classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_85(
      _lib._class_NSDateFormatter1,
      _lib._sel_classFallbacksForKeyedArchiver1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSDateFormatter1,
      _lib._sel_classForKeyedUnarchiver1,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

class NSFormatter extends NSObject {
  NSFormatter._(
    ffi.Pointer<objc.ObjCObject> pointer,
    AVFAudio lib, {
    bool retain = false,
    bool release = false,
  }) : super._(pointer, lib, retain: retain, release: release);

  /// Returns a [NSFormatter] that points to the same underlying object as [other].
  static NSFormatter castFrom<T extends objc.ObjCObjectBase>(
    AVFAudio lib,
    T other,
  ) {
    return NSFormatter._(other.pointer, lib, retain: true, release: true);
  }

  /// Returns a [NSFormatter] that wraps the given raw object pointer.
  static NSFormatter castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCObject> other, {
    bool retain = false,
    bool release = false,
  }) {
    return NSFormatter._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSFormatter].
  static bool isInstance(AVFAudio lib, objc.ObjCObjectBase obj) {
    return lib._objc_msgSend_0(
      obj.pointer,
      lib._sel_isKindOfClass_1,
      lib._class_NSFormatter1,
    );
  }

  NSString? stringForObjectValue_(NSObject? obj) {
    final _ret = _lib._objc_msgSend_747(
      this.pointer,
      _lib._sel_stringForObjectValue_1,
      obj?.pointer ?? ffi.nullptr,
    );
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSAttributedString? attributedStringForObjectValue_withDefaultAttributes_(
    NSObject obj,
    NSDictionary? attrs,
  ) {
    final _ret = _lib._objc_msgSend_748(
      this.pointer,
      _lib._sel_attributedStringForObjectValue_withDefaultAttributes_1,
      obj.pointer,
      attrs?.pointer ?? ffi.nullptr,
    );
    return _ret.address == 0
        ? null
        : NSAttributedString._(_ret, _lib, retain: true, release: true);
  }

  NSString? editingStringForObjectValue_(NSObject obj) {
    final _ret = _lib._objc_msgSend_526(
      this.pointer,
      _lib._sel_editingStringForObjectValue_1,
      obj.pointer,
    );
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  bool getObjectValue_forString_errorDescription_(
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> obj,
    NSString string,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    return _lib._objc_msgSend_749(
      this.pointer,
      _lib._sel_getObjectValue_forString_errorDescription_1,
      obj,
      string.pointer,
      error,
    );
  }

  bool isPartialStringValid_newEditingString_errorDescription_(
    NSString partialString,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> newString,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    return _lib._objc_msgSend_750(
      this.pointer,
      _lib._sel_isPartialStringValid_newEditingString_errorDescription_1,
      partialString.pointer,
      newString,
      error,
    );
  }

  bool
  isPartialStringValid_proposedSelectedRange_originalString_originalSelectedRange_errorDescription_(
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> partialStringPtr,
    ffi.Pointer<_NSRange> proposedSelRangePtr,
    NSString origString,
    _NSRange origSelRange,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    return _lib._objc_msgSend_751(
      this.pointer,
      _lib._sel_isPartialStringValid_proposedSelectedRange_originalString_originalSelectedRange_errorDescription_1,
      partialStringPtr,
      proposedSelRangePtr,
      origString.pointer,
      origSelRange,
      error,
    );
  }

  @override
  NSFormatter init() {
    final _ret = _lib._objc_msgSend_2(this.pointer, _lib._sel_init1);
    return NSFormatter._(_ret, _lib, retain: true, release: true);
  }

  static NSFormatter new1(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSFormatter1, _lib._sel_new1);
    return NSFormatter._(_ret, _lib, retain: false, release: true);
  }

  static NSFormatter allocWithZone_(AVFAudio _lib, ffi.Pointer<_NSZone> zone) {
    final _ret = _lib._objc_msgSend_3(
      _lib._class_NSFormatter1,
      _lib._sel_allocWithZone_1,
      zone,
    );
    return NSFormatter._(_ret, _lib, retain: false, release: true);
  }

  static NSFormatter alloc(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSFormatter1,
      _lib._sel_alloc1,
    );
    return NSFormatter._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
    AVFAudio _lib,
    NSObject aTarget,
    ffi.Pointer<objc.ObjCSelector> aSelector,
    NSObject? anArgument,
  ) {
    _lib._objc_msgSend_14(
      _lib._class_NSFormatter1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
      aTarget.pointer,
      aSelector,
      anArgument?.pointer ?? ffi.nullptr,
    );
  }

  static void cancelPreviousPerformRequestsWithTarget_(
    AVFAudio _lib,
    NSObject aTarget,
  ) {
    _lib._objc_msgSend_15(
      _lib._class_NSFormatter1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_1,
      aTarget.pointer,
    );
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSFormatter1,
      _lib._sel_accessInstanceVariablesDirectly1,
    );
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSFormatter1,
      _lib._sel_useStoredAccessor1,
    );
  }

  static NSSet keyPathsForValuesAffectingValueForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    final _ret = _lib._objc_msgSend_63(
      _lib._class_NSFormatter1,
      _lib._sel_keyPathsForValuesAffectingValueForKey_1,
      key.pointer,
    );
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    return _lib._objc_msgSend_64(
      _lib._class_NSFormatter1,
      _lib._sel_automaticallyNotifiesObserversForKey_1,
      key.pointer,
    );
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
    AVFAudio _lib,
    NSArray keys,
    NSString dependentKey,
  ) {
    _lib._objc_msgSend_88(
      _lib._class_NSFormatter1,
      _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
      keys.pointer,
      dependentKey.pointer,
    );
  }

  static NSArray classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_85(
      _lib._class_NSFormatter1,
      _lib._sel_classFallbacksForKeyedArchiver1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSFormatter1,
      _lib._sel_classForKeyedUnarchiver1,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

abstract class NSFormattingContext {
  static const int NSFormattingContextUnknown = 0;
  static const int NSFormattingContextDynamic = 1;
  static const int NSFormattingContextStandalone = 2;
  static const int NSFormattingContextListItem = 3;
  static const int NSFormattingContextBeginningOfSentence = 4;
  static const int NSFormattingContextMiddleOfSentence = 5;
}

abstract class NSDateFormatterStyle {
  static const int NSDateFormatterNoStyle = 0;
  static const int NSDateFormatterShortStyle = 1;
  static const int NSDateFormatterMediumStyle = 2;
  static const int NSDateFormatterLongStyle = 3;
  static const int NSDateFormatterFullStyle = 4;
}

abstract class NSDateFormatterBehavior {
  static const int NSDateFormatterBehaviorDefault = 0;
  static const int NSDateFormatterBehavior10_0 = 1000;
  static const int NSDateFormatterBehavior10_4 = 1040;
}

class NSCalendar extends NSObject {
  NSCalendar._(
    ffi.Pointer<objc.ObjCObject> pointer,
    AVFAudio lib, {
    bool retain = false,
    bool release = false,
  }) : super._(pointer, lib, retain: retain, release: release);

  /// Returns a [NSCalendar] that points to the same underlying object as [other].
  static NSCalendar castFrom<T extends objc.ObjCObjectBase>(
    AVFAudio lib,
    T other,
  ) {
    return NSCalendar._(other.pointer, lib, retain: true, release: true);
  }

  /// Returns a [NSCalendar] that wraps the given raw object pointer.
  static NSCalendar castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCObject> other, {
    bool retain = false,
    bool release = false,
  }) {
    return NSCalendar._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSCalendar].
  static bool isInstance(AVFAudio lib, objc.ObjCObjectBase obj) {
    return lib._objc_msgSend_0(
      obj.pointer,
      lib._sel_isKindOfClass_1,
      lib._class_NSCalendar1,
    );
  }

  static NSCalendar getCurrentCalendar(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_763(
      _lib._class_NSCalendar1,
      _lib._sel_currentCalendar1,
    );
    return NSCalendar._(_ret, _lib, retain: true, release: true);
  }

  static NSCalendar getAutoupdatingCurrentCalendar(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_763(
      _lib._class_NSCalendar1,
      _lib._sel_autoupdatingCurrentCalendar1,
    );
    return NSCalendar._(_ret, _lib, retain: true, release: true);
  }

  static NSCalendar? calendarWithIdentifier_(
    AVFAudio _lib,
    NSString calendarIdentifierConstant,
  ) {
    final _ret = _lib._objc_msgSend_764(
      _lib._class_NSCalendar1,
      _lib._sel_calendarWithIdentifier_1,
      calendarIdentifierConstant.pointer,
    );
    return _ret.address == 0
        ? null
        : NSCalendar._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSCalendar init() {
    final _ret = _lib._objc_msgSend_2(this.pointer, _lib._sel_init1);
    return NSCalendar._(_ret, _lib, retain: true, release: true);
  }

  NSObject? initWithCalendarIdentifier_(NSString ident) {
    final _ret = _lib._objc_msgSend_38(
      this.pointer,
      _lib._sel_initWithCalendarIdentifier_1,
      ident.pointer,
    );
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSString get calendarIdentifier {
    final _ret = _lib._objc_msgSend_21(
      this.pointer,
      _lib._sel_calendarIdentifier1,
    );
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSLocale? get locale {
    final _ret = _lib._objc_msgSend_765(this.pointer, _lib._sel_locale1);
    return _ret.address == 0
        ? null
        : NSLocale._(_ret, _lib, retain: true, release: true);
  }

  set locale(NSLocale? value) {
    return _lib._objc_msgSend_766(
      this.pointer,
      _lib._sel_setLocale_1,
      value?.pointer ?? ffi.nullptr,
    );
  }

  NSTimeZone get timeZone {
    final _ret = _lib._objc_msgSend_179(this.pointer, _lib._sel_timeZone1);
    return NSTimeZone._(_ret, _lib, retain: true, release: true);
  }

  set timeZone(NSTimeZone value) {
    return _lib._objc_msgSend_180(
      this.pointer,
      _lib._sel_setTimeZone_1,
      value.pointer,
    );
  }

  int get firstWeekday {
    return _lib._objc_msgSend_10(this.pointer, _lib._sel_firstWeekday1);
  }

  set firstWeekday(int value) {
    return _lib._objc_msgSend_516(
      this.pointer,
      _lib._sel_setFirstWeekday_1,
      value,
    );
  }

  int get minimumDaysInFirstWeek {
    return _lib._objc_msgSend_10(
      this.pointer,
      _lib._sel_minimumDaysInFirstWeek1,
    );
  }

  set minimumDaysInFirstWeek(int value) {
    return _lib._objc_msgSend_516(
      this.pointer,
      _lib._sel_setMinimumDaysInFirstWeek_1,
      value,
    );
  }

  NSArray get eraSymbols {
    final _ret = _lib._objc_msgSend_85(this.pointer, _lib._sel_eraSymbols1);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSArray get longEraSymbols {
    final _ret = _lib._objc_msgSend_85(this.pointer, _lib._sel_longEraSymbols1);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSArray get monthSymbols {
    final _ret = _lib._objc_msgSend_85(this.pointer, _lib._sel_monthSymbols1);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSArray get shortMonthSymbols {
    final _ret = _lib._objc_msgSend_85(
      this.pointer,
      _lib._sel_shortMonthSymbols1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSArray get veryShortMonthSymbols {
    final _ret = _lib._objc_msgSend_85(
      this.pointer,
      _lib._sel_veryShortMonthSymbols1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSArray get standaloneMonthSymbols {
    final _ret = _lib._objc_msgSend_85(
      this.pointer,
      _lib._sel_standaloneMonthSymbols1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSArray get shortStandaloneMonthSymbols {
    final _ret = _lib._objc_msgSend_85(
      this.pointer,
      _lib._sel_shortStandaloneMonthSymbols1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSArray get veryShortStandaloneMonthSymbols {
    final _ret = _lib._objc_msgSend_85(
      this.pointer,
      _lib._sel_veryShortStandaloneMonthSymbols1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSArray get weekdaySymbols {
    final _ret = _lib._objc_msgSend_85(this.pointer, _lib._sel_weekdaySymbols1);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSArray get shortWeekdaySymbols {
    final _ret = _lib._objc_msgSend_85(
      this.pointer,
      _lib._sel_shortWeekdaySymbols1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSArray get veryShortWeekdaySymbols {
    final _ret = _lib._objc_msgSend_85(
      this.pointer,
      _lib._sel_veryShortWeekdaySymbols1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSArray get standaloneWeekdaySymbols {
    final _ret = _lib._objc_msgSend_85(
      this.pointer,
      _lib._sel_standaloneWeekdaySymbols1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSArray get shortStandaloneWeekdaySymbols {
    final _ret = _lib._objc_msgSend_85(
      this.pointer,
      _lib._sel_shortStandaloneWeekdaySymbols1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSArray get veryShortStandaloneWeekdaySymbols {
    final _ret = _lib._objc_msgSend_85(
      this.pointer,
      _lib._sel_veryShortStandaloneWeekdaySymbols1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSArray get quarterSymbols {
    final _ret = _lib._objc_msgSend_85(this.pointer, _lib._sel_quarterSymbols1);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSArray get shortQuarterSymbols {
    final _ret = _lib._objc_msgSend_85(
      this.pointer,
      _lib._sel_shortQuarterSymbols1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSArray get standaloneQuarterSymbols {
    final _ret = _lib._objc_msgSend_85(
      this.pointer,
      _lib._sel_standaloneQuarterSymbols1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSArray get shortStandaloneQuarterSymbols {
    final _ret = _lib._objc_msgSend_85(
      this.pointer,
      _lib._sel_shortStandaloneQuarterSymbols1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSString get AMSymbol {
    final _ret = _lib._objc_msgSend_21(this.pointer, _lib._sel_AMSymbol1);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString get PMSymbol {
    final _ret = _lib._objc_msgSend_21(this.pointer, _lib._sel_PMSymbol1);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  void minimumRangeOfUnit_(ffi.Pointer<_NSRange> stret, int unit) {
    objc.useMsgSendVariants
        ? _lib._objc_msgSend_767_stret(
          stret,
          this.pointer,
          _lib._sel_minimumRangeOfUnit_1,
          unit,
        )
        : stret.ref = _lib._objc_msgSend_767(
          this.pointer,
          _lib._sel_minimumRangeOfUnit_1,
          unit,
        );
  }

  void maximumRangeOfUnit_(ffi.Pointer<_NSRange> stret, int unit) {
    objc.useMsgSendVariants
        ? _lib._objc_msgSend_767_stret(
          stret,
          this.pointer,
          _lib._sel_maximumRangeOfUnit_1,
          unit,
        )
        : stret.ref = _lib._objc_msgSend_767(
          this.pointer,
          _lib._sel_maximumRangeOfUnit_1,
          unit,
        );
  }

  void rangeOfUnit_inUnit_forDate_(
    ffi.Pointer<_NSRange> stret,
    int smaller,
    int larger,
    NSDate date,
  ) {
    objc.useMsgSendVariants
        ? _lib._objc_msgSend_768_stret(
          stret,
          this.pointer,
          _lib._sel_rangeOfUnit_inUnit_forDate_1,
          smaller,
          larger,
          date.pointer,
        )
        : stret.ref = _lib._objc_msgSend_768(
          this.pointer,
          _lib._sel_rangeOfUnit_inUnit_forDate_1,
          smaller,
          larger,
          date.pointer,
        );
  }

  int ordinalityOfUnit_inUnit_forDate_(int smaller, int larger, NSDate date) {
    return _lib._objc_msgSend_769(
      this.pointer,
      _lib._sel_ordinalityOfUnit_inUnit_forDate_1,
      smaller,
      larger,
      date.pointer,
    );
  }

  bool rangeOfUnit_startDate_interval_forDate_(
    int unit,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> datep,
    ffi.Pointer<ffi.Double> tip,
    NSDate date,
  ) {
    return _lib._objc_msgSend_770(
      this.pointer,
      _lib._sel_rangeOfUnit_startDate_interval_forDate_1,
      unit,
      datep,
      tip,
      date.pointer,
    );
  }

  NSDate? dateFromComponents_(NSDateComponents comps) {
    final _ret = _lib._objc_msgSend_778(
      this.pointer,
      _lib._sel_dateFromComponents_1,
      comps.pointer,
    );
    return _ret.address == 0
        ? null
        : NSDate._(_ret, _lib, retain: true, release: true);
  }

  NSDateComponents components_fromDate_(int unitFlags, NSDate date) {
    final _ret = _lib._objc_msgSend_779(
      this.pointer,
      _lib._sel_components_fromDate_1,
      unitFlags,
      date.pointer,
    );
    return NSDateComponents._(_ret, _lib, retain: true, release: true);
  }

  NSDate? dateByAddingComponents_toDate_options_(
    NSDateComponents comps,
    NSDate date,
    int opts,
  ) {
    final _ret = _lib._objc_msgSend_780(
      this.pointer,
      _lib._sel_dateByAddingComponents_toDate_options_1,
      comps.pointer,
      date.pointer,
      opts,
    );
    return _ret.address == 0
        ? null
        : NSDate._(_ret, _lib, retain: true, release: true);
  }

  NSDateComponents components_fromDate_toDate_options_(
    int unitFlags,
    NSDate startingDate,
    NSDate resultDate,
    int opts,
  ) {
    final _ret = _lib._objc_msgSend_781(
      this.pointer,
      _lib._sel_components_fromDate_toDate_options_1,
      unitFlags,
      startingDate.pointer,
      resultDate.pointer,
      opts,
    );
    return NSDateComponents._(_ret, _lib, retain: true, release: true);
  }

  void getEra_year_month_day_fromDate_(
    ffi.Pointer<ffi.Long> eraValuePointer,
    ffi.Pointer<ffi.Long> yearValuePointer,
    ffi.Pointer<ffi.Long> monthValuePointer,
    ffi.Pointer<ffi.Long> dayValuePointer,
    NSDate date,
  ) {
    _lib._objc_msgSend_782(
      this.pointer,
      _lib._sel_getEra_year_month_day_fromDate_1,
      eraValuePointer,
      yearValuePointer,
      monthValuePointer,
      dayValuePointer,
      date.pointer,
    );
  }

  void getEra_yearForWeekOfYear_weekOfYear_weekday_fromDate_(
    ffi.Pointer<ffi.Long> eraValuePointer,
    ffi.Pointer<ffi.Long> yearValuePointer,
    ffi.Pointer<ffi.Long> weekValuePointer,
    ffi.Pointer<ffi.Long> weekdayValuePointer,
    NSDate date,
  ) {
    _lib._objc_msgSend_782(
      this.pointer,
      _lib._sel_getEra_yearForWeekOfYear_weekOfYear_weekday_fromDate_1,
      eraValuePointer,
      yearValuePointer,
      weekValuePointer,
      weekdayValuePointer,
      date.pointer,
    );
  }

  void getHour_minute_second_nanosecond_fromDate_(
    ffi.Pointer<ffi.Long> hourValuePointer,
    ffi.Pointer<ffi.Long> minuteValuePointer,
    ffi.Pointer<ffi.Long> secondValuePointer,
    ffi.Pointer<ffi.Long> nanosecondValuePointer,
    NSDate date,
  ) {
    _lib._objc_msgSend_782(
      this.pointer,
      _lib._sel_getHour_minute_second_nanosecond_fromDate_1,
      hourValuePointer,
      minuteValuePointer,
      secondValuePointer,
      nanosecondValuePointer,
      date.pointer,
    );
  }

  int component_fromDate_(int unit, NSDate date) {
    return _lib._objc_msgSend_783(
      this.pointer,
      _lib._sel_component_fromDate_1,
      unit,
      date.pointer,
    );
  }

  NSDate? dateWithEra_year_month_day_hour_minute_second_nanosecond_(
    int eraValue,
    int yearValue,
    int monthValue,
    int dayValue,
    int hourValue,
    int minuteValue,
    int secondValue,
    int nanosecondValue,
  ) {
    final _ret = _lib._objc_msgSend_784(
      this.pointer,
      _lib._sel_dateWithEra_year_month_day_hour_minute_second_nanosecond_1,
      eraValue,
      yearValue,
      monthValue,
      dayValue,
      hourValue,
      minuteValue,
      secondValue,
      nanosecondValue,
    );
    return _ret.address == 0
        ? null
        : NSDate._(_ret, _lib, retain: true, release: true);
  }

  NSDate?
  dateWithEra_yearForWeekOfYear_weekOfYear_weekday_hour_minute_second_nanosecond_(
    int eraValue,
    int yearValue,
    int weekValue,
    int weekdayValue,
    int hourValue,
    int minuteValue,
    int secondValue,
    int nanosecondValue,
  ) {
    final _ret = _lib._objc_msgSend_784(
      this.pointer,
      _lib._sel_dateWithEra_yearForWeekOfYear_weekOfYear_weekday_hour_minute_second_nanosecond_1,
      eraValue,
      yearValue,
      weekValue,
      weekdayValue,
      hourValue,
      minuteValue,
      secondValue,
      nanosecondValue,
    );
    return _ret.address == 0
        ? null
        : NSDate._(_ret, _lib, retain: true, release: true);
  }

  NSDate startOfDayForDate_(NSDate date) {
    final _ret = _lib._objc_msgSend_168(
      this.pointer,
      _lib._sel_startOfDayForDate_1,
      date.pointer,
    );
    return NSDate._(_ret, _lib, retain: true, release: true);
  }

  NSDateComponents componentsInTimeZone_fromDate_(
    NSTimeZone timezone,
    NSDate date,
  ) {
    final _ret = _lib._objc_msgSend_785(
      this.pointer,
      _lib._sel_componentsInTimeZone_fromDate_1,
      timezone.pointer,
      date.pointer,
    );
    return NSDateComponents._(_ret, _lib, retain: true, release: true);
  }

  int compareDate_toDate_toUnitGranularity_(
    NSDate date1,
    NSDate date2,
    int unit,
  ) {
    return _lib._objc_msgSend_786(
      this.pointer,
      _lib._sel_compareDate_toDate_toUnitGranularity_1,
      date1.pointer,
      date2.pointer,
      unit,
    );
  }

  bool isDate_equalToDate_toUnitGranularity_(
    NSDate date1,
    NSDate date2,
    int unit,
  ) {
    return _lib._objc_msgSend_787(
      this.pointer,
      _lib._sel_isDate_equalToDate_toUnitGranularity_1,
      date1.pointer,
      date2.pointer,
      unit,
    );
  }

  bool isDate_inSameDayAsDate_(NSDate date1, NSDate date2) {
    return _lib._objc_msgSend_788(
      this.pointer,
      _lib._sel_isDate_inSameDayAsDate_1,
      date1.pointer,
      date2.pointer,
    );
  }

  bool isDateInToday_(NSDate date) {
    return _lib._objc_msgSend_170(
      this.pointer,
      _lib._sel_isDateInToday_1,
      date.pointer,
    );
  }

  bool isDateInYesterday_(NSDate date) {
    return _lib._objc_msgSend_170(
      this.pointer,
      _lib._sel_isDateInYesterday_1,
      date.pointer,
    );
  }

  bool isDateInTomorrow_(NSDate date) {
    return _lib._objc_msgSend_170(
      this.pointer,
      _lib._sel_isDateInTomorrow_1,
      date.pointer,
    );
  }

  bool isDateInWeekend_(NSDate date) {
    return _lib._objc_msgSend_170(
      this.pointer,
      _lib._sel_isDateInWeekend_1,
      date.pointer,
    );
  }

  bool rangeOfWeekendStartDate_interval_containingDate_(
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> datep,
    ffi.Pointer<ffi.Double> tip,
    NSDate date,
  ) {
    return _lib._objc_msgSend_789(
      this.pointer,
      _lib._sel_rangeOfWeekendStartDate_interval_containingDate_1,
      datep,
      tip,
      date.pointer,
    );
  }

  bool nextWeekendStartDate_interval_options_afterDate_(
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> datep,
    ffi.Pointer<ffi.Double> tip,
    int options,
    NSDate date,
  ) {
    return _lib._objc_msgSend_790(
      this.pointer,
      _lib._sel_nextWeekendStartDate_interval_options_afterDate_1,
      datep,
      tip,
      options,
      date.pointer,
    );
  }

  NSDateComponents components_fromDateComponents_toDateComponents_options_(
    int unitFlags,
    NSDateComponents startingDateComp,
    NSDateComponents resultDateComp,
    int options,
  ) {
    final _ret = _lib._objc_msgSend_791(
      this.pointer,
      _lib._sel_components_fromDateComponents_toDateComponents_options_1,
      unitFlags,
      startingDateComp.pointer,
      resultDateComp.pointer,
      options,
    );
    return NSDateComponents._(_ret, _lib, retain: true, release: true);
  }

  NSDate? dateByAddingUnit_value_toDate_options_(
    int unit,
    int value,
    NSDate date,
    int options,
  ) {
    final _ret = _lib._objc_msgSend_792(
      this.pointer,
      _lib._sel_dateByAddingUnit_value_toDate_options_1,
      unit,
      value,
      date.pointer,
      options,
    );
    return _ret.address == 0
        ? null
        : NSDate._(_ret, _lib, retain: true, release: true);
  }

  void enumerateDatesStartingAfterDate_matchingComponents_options_usingBlock_(
    NSDate start,
    NSDateComponents comps,
    int opts,
    ObjCBlock_ffiVoid_NSDate_bool_bool block,
  ) {
    _lib._objc_msgSend_793(
      this.pointer,
      _lib._sel_enumerateDatesStartingAfterDate_matchingComponents_options_usingBlock_1,
      start.pointer,
      comps.pointer,
      opts,
      block.pointer,
    );
  }

  NSDate? nextDateAfterDate_matchingComponents_options_(
    NSDate date,
    NSDateComponents comps,
    int options,
  ) {
    final _ret = _lib._objc_msgSend_794(
      this.pointer,
      _lib._sel_nextDateAfterDate_matchingComponents_options_1,
      date.pointer,
      comps.pointer,
      options,
    );
    return _ret.address == 0
        ? null
        : NSDate._(_ret, _lib, retain: true, release: true);
  }

  NSDate? nextDateAfterDate_matchingUnit_value_options_(
    NSDate date,
    int unit,
    int value,
    int options,
  ) {
    final _ret = _lib._objc_msgSend_795(
      this.pointer,
      _lib._sel_nextDateAfterDate_matchingUnit_value_options_1,
      date.pointer,
      unit,
      value,
      options,
    );
    return _ret.address == 0
        ? null
        : NSDate._(_ret, _lib, retain: true, release: true);
  }

  NSDate? nextDateAfterDate_matchingHour_minute_second_options_(
    NSDate date,
    int hourValue,
    int minuteValue,
    int secondValue,
    int options,
  ) {
    final _ret = _lib._objc_msgSend_796(
      this.pointer,
      _lib._sel_nextDateAfterDate_matchingHour_minute_second_options_1,
      date.pointer,
      hourValue,
      minuteValue,
      secondValue,
      options,
    );
    return _ret.address == 0
        ? null
        : NSDate._(_ret, _lib, retain: true, release: true);
  }

  NSDate? dateBySettingUnit_value_ofDate_options_(
    int unit,
    int v,
    NSDate date,
    int opts,
  ) {
    final _ret = _lib._objc_msgSend_792(
      this.pointer,
      _lib._sel_dateBySettingUnit_value_ofDate_options_1,
      unit,
      v,
      date.pointer,
      opts,
    );
    return _ret.address == 0
        ? null
        : NSDate._(_ret, _lib, retain: true, release: true);
  }

  NSDate? dateBySettingHour_minute_second_ofDate_options_(
    int h,
    int m,
    int s,
    NSDate date,
    int opts,
  ) {
    final _ret = _lib._objc_msgSend_797(
      this.pointer,
      _lib._sel_dateBySettingHour_minute_second_ofDate_options_1,
      h,
      m,
      s,
      date.pointer,
      opts,
    );
    return _ret.address == 0
        ? null
        : NSDate._(_ret, _lib, retain: true, release: true);
  }

  bool date_matchesComponents_(NSDate date, NSDateComponents components) {
    return _lib._objc_msgSend_798(
      this.pointer,
      _lib._sel_date_matchesComponents_1,
      date.pointer,
      components.pointer,
    );
  }

  static NSCalendar new1(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSCalendar1, _lib._sel_new1);
    return NSCalendar._(_ret, _lib, retain: false, release: true);
  }

  static NSCalendar allocWithZone_(AVFAudio _lib, ffi.Pointer<_NSZone> zone) {
    final _ret = _lib._objc_msgSend_3(
      _lib._class_NSCalendar1,
      _lib._sel_allocWithZone_1,
      zone,
    );
    return NSCalendar._(_ret, _lib, retain: false, release: true);
  }

  static NSCalendar alloc(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSCalendar1,
      _lib._sel_alloc1,
    );
    return NSCalendar._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
    AVFAudio _lib,
    NSObject aTarget,
    ffi.Pointer<objc.ObjCSelector> aSelector,
    NSObject? anArgument,
  ) {
    _lib._objc_msgSend_14(
      _lib._class_NSCalendar1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
      aTarget.pointer,
      aSelector,
      anArgument?.pointer ?? ffi.nullptr,
    );
  }

  static void cancelPreviousPerformRequestsWithTarget_(
    AVFAudio _lib,
    NSObject aTarget,
  ) {
    _lib._objc_msgSend_15(
      _lib._class_NSCalendar1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_1,
      aTarget.pointer,
    );
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSCalendar1,
      _lib._sel_accessInstanceVariablesDirectly1,
    );
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSCalendar1,
      _lib._sel_useStoredAccessor1,
    );
  }

  static NSSet keyPathsForValuesAffectingValueForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    final _ret = _lib._objc_msgSend_63(
      _lib._class_NSCalendar1,
      _lib._sel_keyPathsForValuesAffectingValueForKey_1,
      key.pointer,
    );
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    return _lib._objc_msgSend_64(
      _lib._class_NSCalendar1,
      _lib._sel_automaticallyNotifiesObserversForKey_1,
      key.pointer,
    );
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
    AVFAudio _lib,
    NSArray keys,
    NSString dependentKey,
  ) {
    _lib._objc_msgSend_88(
      _lib._class_NSCalendar1,
      _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
      keys.pointer,
      dependentKey.pointer,
    );
  }

  static NSArray classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_85(
      _lib._class_NSCalendar1,
      _lib._sel_classFallbacksForKeyedArchiver1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSCalendar1,
      _lib._sel_classForKeyedUnarchiver1,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

abstract class NSCalendarUnit {
  static const int NSCalendarUnitEra = 2;
  static const int NSCalendarUnitYear = 4;
  static const int NSCalendarUnitMonth = 8;
  static const int NSCalendarUnitDay = 16;
  static const int NSCalendarUnitHour = 32;
  static const int NSCalendarUnitMinute = 64;
  static const int NSCalendarUnitSecond = 128;
  static const int NSCalendarUnitWeekday = 512;
  static const int NSCalendarUnitWeekdayOrdinal = 1024;
  static const int NSCalendarUnitQuarter = 2048;
  static const int NSCalendarUnitWeekOfMonth = 4096;
  static const int NSCalendarUnitWeekOfYear = 8192;
  static const int NSCalendarUnitYearForWeekOfYear = 16384;
  static const int NSCalendarUnitNanosecond = 32768;
  static const int NSCalendarUnitCalendar = 1048576;
  static const int NSCalendarUnitTimeZone = 2097152;
  static const int NSEraCalendarUnit = 2;
  static const int NSYearCalendarUnit = 4;
  static const int NSMonthCalendarUnit = 8;
  static const int NSDayCalendarUnit = 16;
  static const int NSHourCalendarUnit = 32;
  static const int NSMinuteCalendarUnit = 64;
  static const int NSSecondCalendarUnit = 128;
  static const int NSWeekCalendarUnit = 256;
  static const int NSWeekdayCalendarUnit = 512;
  static const int NSWeekdayOrdinalCalendarUnit = 1024;
  static const int NSQuarterCalendarUnit = 2048;
  static const int NSWeekOfMonthCalendarUnit = 4096;
  static const int NSWeekOfYearCalendarUnit = 8192;
  static const int NSYearForWeekOfYearCalendarUnit = 16384;
  static const int NSCalendarCalendarUnit = 1048576;
  static const int NSTimeZoneCalendarUnit = 2097152;
}

class NSDateComponents extends NSObject {
  NSDateComponents._(
    ffi.Pointer<objc.ObjCObject> pointer,
    AVFAudio lib, {
    bool retain = false,
    bool release = false,
  }) : super._(pointer, lib, retain: retain, release: release);

  /// Returns a [NSDateComponents] that points to the same underlying object as [other].
  static NSDateComponents castFrom<T extends objc.ObjCObjectBase>(
    AVFAudio lib,
    T other,
  ) {
    return NSDateComponents._(other.pointer, lib, retain: true, release: true);
  }

  /// Returns a [NSDateComponents] that wraps the given raw object pointer.
  static NSDateComponents castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCObject> other, {
    bool retain = false,
    bool release = false,
  }) {
    return NSDateComponents._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSDateComponents].
  static bool isInstance(AVFAudio lib, objc.ObjCObjectBase obj) {
    return lib._objc_msgSend_0(
      obj.pointer,
      lib._sel_isKindOfClass_1,
      lib._class_NSDateComponents1,
    );
  }

  NSCalendar? get calendar {
    final _ret = _lib._objc_msgSend_771(this.pointer, _lib._sel_calendar1);
    return _ret.address == 0
        ? null
        : NSCalendar._(_ret, _lib, retain: true, release: true);
  }

  set calendar(NSCalendar? value) {
    return _lib._objc_msgSend_772(
      this.pointer,
      _lib._sel_setCalendar_1,
      value?.pointer ?? ffi.nullptr,
    );
  }

  NSTimeZone? get timeZone {
    final _ret = _lib._objc_msgSend_773(this.pointer, _lib._sel_timeZone1);
    return _ret.address == 0
        ? null
        : NSTimeZone._(_ret, _lib, retain: true, release: true);
  }

  set timeZone(NSTimeZone? value) {
    return _lib._objc_msgSend_774(
      this.pointer,
      _lib._sel_setTimeZone_1,
      value?.pointer ?? ffi.nullptr,
    );
  }

  int get era {
    return _lib._objc_msgSend_83(this.pointer, _lib._sel_era1);
  }

  set era(int value) {
    return _lib._objc_msgSend_635(this.pointer, _lib._sel_setEra_1, value);
  }

  int get year {
    return _lib._objc_msgSend_83(this.pointer, _lib._sel_year1);
  }

  set year(int value) {
    return _lib._objc_msgSend_635(this.pointer, _lib._sel_setYear_1, value);
  }

  int get month {
    return _lib._objc_msgSend_83(this.pointer, _lib._sel_month1);
  }

  set month(int value) {
    return _lib._objc_msgSend_635(this.pointer, _lib._sel_setMonth_1, value);
  }

  int get day {
    return _lib._objc_msgSend_83(this.pointer, _lib._sel_day1);
  }

  set day(int value) {
    return _lib._objc_msgSend_635(this.pointer, _lib._sel_setDay_1, value);
  }

  int get hour {
    return _lib._objc_msgSend_83(this.pointer, _lib._sel_hour1);
  }

  set hour(int value) {
    return _lib._objc_msgSend_635(this.pointer, _lib._sel_setHour_1, value);
  }

  int get minute {
    return _lib._objc_msgSend_83(this.pointer, _lib._sel_minute1);
  }

  set minute(int value) {
    return _lib._objc_msgSend_635(this.pointer, _lib._sel_setMinute_1, value);
  }

  int get second {
    return _lib._objc_msgSend_83(this.pointer, _lib._sel_second1);
  }

  set second(int value) {
    return _lib._objc_msgSend_635(this.pointer, _lib._sel_setSecond_1, value);
  }

  int get nanosecond {
    return _lib._objc_msgSend_83(this.pointer, _lib._sel_nanosecond1);
  }

  set nanosecond(int value) {
    return _lib._objc_msgSend_635(
      this.pointer,
      _lib._sel_setNanosecond_1,
      value,
    );
  }

  int get weekday {
    return _lib._objc_msgSend_83(this.pointer, _lib._sel_weekday1);
  }

  set weekday(int value) {
    return _lib._objc_msgSend_635(this.pointer, _lib._sel_setWeekday_1, value);
  }

  int get weekdayOrdinal {
    return _lib._objc_msgSend_83(this.pointer, _lib._sel_weekdayOrdinal1);
  }

  set weekdayOrdinal(int value) {
    return _lib._objc_msgSend_635(
      this.pointer,
      _lib._sel_setWeekdayOrdinal_1,
      value,
    );
  }

  int get quarter {
    return _lib._objc_msgSend_83(this.pointer, _lib._sel_quarter1);
  }

  set quarter(int value) {
    return _lib._objc_msgSend_635(this.pointer, _lib._sel_setQuarter_1, value);
  }

  int get weekOfMonth {
    return _lib._objc_msgSend_83(this.pointer, _lib._sel_weekOfMonth1);
  }

  set weekOfMonth(int value) {
    return _lib._objc_msgSend_635(
      this.pointer,
      _lib._sel_setWeekOfMonth_1,
      value,
    );
  }

  int get weekOfYear {
    return _lib._objc_msgSend_83(this.pointer, _lib._sel_weekOfYear1);
  }

  set weekOfYear(int value) {
    return _lib._objc_msgSend_635(
      this.pointer,
      _lib._sel_setWeekOfYear_1,
      value,
    );
  }

  int get yearForWeekOfYear {
    return _lib._objc_msgSend_83(this.pointer, _lib._sel_yearForWeekOfYear1);
  }

  set yearForWeekOfYear(int value) {
    return _lib._objc_msgSend_635(
      this.pointer,
      _lib._sel_setYearForWeekOfYear_1,
      value,
    );
  }

  bool get leapMonth {
    return _lib._objc_msgSend_12(this.pointer, _lib._sel_isLeapMonth1);
  }

  set leapMonth(bool value) {
    return _lib._objc_msgSend_527(
      this.pointer,
      _lib._sel_setLeapMonth_1,
      value,
    );
  }

  NSDate? get date {
    final _ret = _lib._objc_msgSend_183(this.pointer, _lib._sel_date1);
    return _ret.address == 0
        ? null
        : NSDate._(_ret, _lib, retain: true, release: true);
  }

  int week() {
    return _lib._objc_msgSend_83(this.pointer, _lib._sel_week1);
  }

  void setWeek_(int v) {
    _lib._objc_msgSend_423(this.pointer, _lib._sel_setWeek_1, v);
  }

  void setValue_forComponent_(int value, int unit) {
    _lib._objc_msgSend_775(
      this.pointer,
      _lib._sel_setValue_forComponent_1,
      value,
      unit,
    );
  }

  int valueForComponent_(int unit) {
    return _lib._objc_msgSend_776(
      this.pointer,
      _lib._sel_valueForComponent_1,
      unit,
    );
  }

  bool get validDate {
    return _lib._objc_msgSend_12(this.pointer, _lib._sel_isValidDate1);
  }

  bool isValidDateInCalendar_(NSCalendar calendar) {
    return _lib._objc_msgSend_777(
      this.pointer,
      _lib._sel_isValidDateInCalendar_1,
      calendar.pointer,
    );
  }

  @override
  NSDateComponents init() {
    final _ret = _lib._objc_msgSend_2(this.pointer, _lib._sel_init1);
    return NSDateComponents._(_ret, _lib, retain: true, release: true);
  }

  static NSDateComponents new1(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSDateComponents1,
      _lib._sel_new1,
    );
    return NSDateComponents._(_ret, _lib, retain: false, release: true);
  }

  static NSDateComponents allocWithZone_(
    AVFAudio _lib,
    ffi.Pointer<_NSZone> zone,
  ) {
    final _ret = _lib._objc_msgSend_3(
      _lib._class_NSDateComponents1,
      _lib._sel_allocWithZone_1,
      zone,
    );
    return NSDateComponents._(_ret, _lib, retain: false, release: true);
  }

  static NSDateComponents alloc(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSDateComponents1,
      _lib._sel_alloc1,
    );
    return NSDateComponents._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
    AVFAudio _lib,
    NSObject aTarget,
    ffi.Pointer<objc.ObjCSelector> aSelector,
    NSObject? anArgument,
  ) {
    _lib._objc_msgSend_14(
      _lib._class_NSDateComponents1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
      aTarget.pointer,
      aSelector,
      anArgument?.pointer ?? ffi.nullptr,
    );
  }

  static void cancelPreviousPerformRequestsWithTarget_(
    AVFAudio _lib,
    NSObject aTarget,
  ) {
    _lib._objc_msgSend_15(
      _lib._class_NSDateComponents1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_1,
      aTarget.pointer,
    );
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSDateComponents1,
      _lib._sel_accessInstanceVariablesDirectly1,
    );
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSDateComponents1,
      _lib._sel_useStoredAccessor1,
    );
  }

  static NSSet keyPathsForValuesAffectingValueForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    final _ret = _lib._objc_msgSend_63(
      _lib._class_NSDateComponents1,
      _lib._sel_keyPathsForValuesAffectingValueForKey_1,
      key.pointer,
    );
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    return _lib._objc_msgSend_64(
      _lib._class_NSDateComponents1,
      _lib._sel_automaticallyNotifiesObserversForKey_1,
      key.pointer,
    );
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
    AVFAudio _lib,
    NSArray keys,
    NSString dependentKey,
  ) {
    _lib._objc_msgSend_88(
      _lib._class_NSDateComponents1,
      _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
      keys.pointer,
      dependentKey.pointer,
    );
  }

  static NSArray classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_85(
      _lib._class_NSDateComponents1,
      _lib._sel_classFallbacksForKeyedArchiver1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSDateComponents1,
      _lib._sel_classForKeyedUnarchiver1,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

abstract class NSCalendarOptions {
  static const int NSCalendarWrapComponents = 1;
  static const int NSCalendarMatchStrictly = 2;
  static const int NSCalendarSearchBackwards = 4;
  static const int NSCalendarMatchPreviousTimePreservingSmallerUnits = 256;
  static const int NSCalendarMatchNextTimePreservingSmallerUnits = 512;
  static const int NSCalendarMatchNextTime = 1024;
  static const int NSCalendarMatchFirst = 4096;
  static const int NSCalendarMatchLast = 8192;
}

void _ObjCBlock_ffiVoid_NSDate_bool_bool_fnPtrTrampoline(
  ffi.Pointer<objc.ObjCBlock> block,
  ffi.Pointer<objc.ObjCObject> arg0,
  bool arg1,
  ffi.Pointer<ffi.Bool> arg2,
) => block.ref.target
    .cast<
      ffi.NativeFunction<
        ffi.Void Function(
          ffi.Pointer<objc.ObjCObject> arg0,
          ffi.Bool arg1,
          ffi.Pointer<ffi.Bool> arg2,
        )
      >
    >()
    .asFunction<
      void Function(ffi.Pointer<objc.ObjCObject>, bool, ffi.Pointer<ffi.Bool>)
    >()(arg0, arg1, arg2);
final _ObjCBlock_ffiVoid_NSDate_bool_bool_closureRegistry =
    <
      int,
      void Function(ffi.Pointer<objc.ObjCObject>, bool, ffi.Pointer<ffi.Bool>)
    >{};
int _ObjCBlock_ffiVoid_NSDate_bool_bool_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void> _ObjCBlock_ffiVoid_NSDate_bool_bool_registerClosure(
  void Function(ffi.Pointer<objc.ObjCObject>, bool, ffi.Pointer<ffi.Bool>) fn,
) {
  final id = ++_ObjCBlock_ffiVoid_NSDate_bool_bool_closureRegistryIndex;
  _ObjCBlock_ffiVoid_NSDate_bool_bool_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

void _ObjCBlock_ffiVoid_NSDate_bool_bool_closureTrampoline(
  ffi.Pointer<objc.ObjCBlock> block,
  ffi.Pointer<objc.ObjCObject> arg0,
  bool arg1,
  ffi.Pointer<ffi.Bool> arg2,
) => _ObjCBlock_ffiVoid_NSDate_bool_bool_closureRegistry[block
    .ref
    .target
    .address]!(arg0, arg1, arg2);

class ObjCBlock_ffiVoid_NSDate_bool_bool extends objc.ObjCBlockBase {
  ObjCBlock_ffiVoid_NSDate_bool_bool._(
    ffi.Pointer<objc.ObjCBlock> pointer,
    this._lib, {
    bool retain = false,
    bool release = true,
  }) : super(pointer, retain: retain, release: release);

  AVFAudio _lib;

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_ffiVoid_NSDate_bool_bool castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCBlock> pointer, {
    bool retain = false,
    bool release = false,
  }) {
    return ObjCBlock_ffiVoid_NSDate_bool_bool._(
      pointer,
      lib,
      retain: retain,
      release: release,
    );
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSDate_bool_bool.fromFunctionPointer(
    AVFAudio lib,
    ffi.Pointer<
      ffi.NativeFunction<
        ffi.Void Function(
          ffi.Pointer<objc.ObjCObject> arg0,
          ffi.Bool arg1,
          ffi.Pointer<ffi.Bool> arg2,
        )
      >
    > ptr,
  ) : this._(objc.newBlock(
        _cFuncTrampoline ??=
            ffi.Pointer.fromFunction<
              ffi.Void Function(
                ffi.Pointer<objc.ObjCBlock>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Bool,
                ffi.Pointer<ffi.Bool>,
              )
            >(_ObjCBlock_ffiVoid_NSDate_bool_bool_fnPtrTrampoline).cast(),
        ptr.cast(),
      ), lib);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSDate_bool_bool.fromFunction(
    AVFAudio lib,
    void Function(NSDate?, bool, ffi.Pointer<ffi.Bool>) fn,
  ) : this._(objc.newBlock(
        _dartFuncTrampoline ??=
            ffi.Pointer.fromFunction<
              ffi.Void Function(
                ffi.Pointer<objc.ObjCBlock>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Bool,
                ffi.Pointer<ffi.Bool>,
              )
            >(_ObjCBlock_ffiVoid_NSDate_bool_bool_closureTrampoline).cast(),
        _ObjCBlock_ffiVoid_NSDate_bool_bool_registerClosure((
          ffi.Pointer<objc.ObjCObject> arg0,
          bool arg1,
          ffi.Pointer<ffi.Bool> arg2,
        ) => fn(
          arg0.address == 0
              ? null
              : NSDate._(arg0, lib, retain: true, release: true),
          arg1,
          arg2,
        )),
      ), lib);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_NSDate_bool_bool.listener(
    AVFAudio lib,
    void Function(NSDate?, bool, ffi.Pointer<ffi.Bool>) fn,
  ) : this._(objc.newBlock(
        (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
              ffi.Void Function(
                ffi.Pointer<objc.ObjCBlock>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Bool,
                ffi.Pointer<ffi.Bool>,
              )
            >.listener(
              _ObjCBlock_ffiVoid_NSDate_bool_bool_closureTrampoline,
            )..keepIsolateAlive = false)
            .nativeFunction
            .cast(),
        _ObjCBlock_ffiVoid_NSDate_bool_bool_registerClosure((
          ffi.Pointer<objc.ObjCObject> arg0,
          bool arg1,
          ffi.Pointer<ffi.Bool> arg2,
        ) => fn(
          arg0.address == 0
              ? null
              : NSDate._(arg0, lib, retain: true, release: true),
          arg1,
          arg2,
        )),
      ), lib);
  static ffi.NativeCallable<
    ffi.Void Function(
      ffi.Pointer<objc.ObjCBlock>,
      ffi.Pointer<objc.ObjCObject>,
      ffi.Bool,
      ffi.Pointer<ffi.Bool>,
    )
  >? _dartFuncListenerTrampoline;

  void call(NSDate? arg0, bool arg1, ffi.Pointer<ffi.Bool> arg2) => pointer
      .ref
      .invoke
      .cast<
        ffi.NativeFunction<
          ffi.Void Function(
            ffi.Pointer<objc.ObjCBlock> block,
            ffi.Pointer<objc.ObjCObject> arg0,
            ffi.Bool arg1,
            ffi.Pointer<ffi.Bool> arg2,
          )
        >
      >()
      .asFunction<
        void Function(
          ffi.Pointer<objc.ObjCBlock>,
          ffi.Pointer<objc.ObjCObject>,
          bool,
          ffi.Pointer<ffi.Bool>,
        )
      >()(pointer, arg0?.pointer ?? ffi.nullptr, arg1, arg2);
}

class NSNumberFormatter extends NSFormatter {
  NSNumberFormatter._(
    ffi.Pointer<objc.ObjCObject> pointer,
    AVFAudio lib, {
    bool retain = false,
    bool release = false,
  }) : super._(pointer, lib, retain: retain, release: release);

  /// Returns a [NSNumberFormatter] that points to the same underlying object as [other].
  static NSNumberFormatter castFrom<T extends objc.ObjCObjectBase>(
    AVFAudio lib,
    T other,
  ) {
    return NSNumberFormatter._(other.pointer, lib, retain: true, release: true);
  }

  /// Returns a [NSNumberFormatter] that wraps the given raw object pointer.
  static NSNumberFormatter castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCObject> other, {
    bool retain = false,
    bool release = false,
  }) {
    return NSNumberFormatter._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSNumberFormatter].
  static bool isInstance(AVFAudio lib, objc.ObjCObjectBase obj) {
    return lib._objc_msgSend_0(
      obj.pointer,
      lib._sel_isKindOfClass_1,
      lib._class_NSNumberFormatter1,
    );
  }

  int get formattingContext {
    return _lib._objc_msgSend_752(this.pointer, _lib._sel_formattingContext1);
  }

  set formattingContext(int value) {
    return _lib._objc_msgSend_753(
      this.pointer,
      _lib._sel_setFormattingContext_1,
      value,
    );
  }

  bool getObjectValue_forString_range_error_(
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> obj,
    NSString string,
    ffi.Pointer<_NSRange> rangep,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    return _lib._objc_msgSend_754(
      this.pointer,
      _lib._sel_getObjectValue_forString_range_error_1,
      obj,
      string.pointer,
      rangep,
      error,
    );
  }

  NSString? stringFromNumber_(NSNumber number) {
    final _ret = _lib._objc_msgSend_802(
      this.pointer,
      _lib._sel_stringFromNumber_1,
      number.pointer,
    );
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSNumber? numberFromString_(NSString string) {
    final _ret = _lib._objc_msgSend_803(
      this.pointer,
      _lib._sel_numberFromString_1,
      string.pointer,
    );
    return _ret.address == 0
        ? null
        : NSNumber._(_ret, _lib, retain: true, release: true);
  }

  static NSString localizedStringFromNumber_numberStyle_(
    AVFAudio _lib,
    NSNumber num,
    int nstyle,
  ) {
    final _ret = _lib._objc_msgSend_804(
      _lib._class_NSNumberFormatter1,
      _lib._sel_localizedStringFromNumber_numberStyle_1,
      num.pointer,
      nstyle,
    );
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  static int defaultFormatterBehavior(AVFAudio _lib) {
    return _lib._objc_msgSend_805(
      _lib._class_NSNumberFormatter1,
      _lib._sel_defaultFormatterBehavior1,
    );
  }

  static void setDefaultFormatterBehavior_(AVFAudio _lib, int behavior) {
    _lib._objc_msgSend_806(
      _lib._class_NSNumberFormatter1,
      _lib._sel_setDefaultFormatterBehavior_1,
      behavior,
    );
  }

  int get numberStyle {
    return _lib._objc_msgSend_807(this.pointer, _lib._sel_numberStyle1);
  }

  set numberStyle(int value) {
    return _lib._objc_msgSend_808(
      this.pointer,
      _lib._sel_setNumberStyle_1,
      value,
    );
  }

  NSLocale get locale {
    final _ret = _lib._objc_msgSend_197(this.pointer, _lib._sel_locale1);
    return NSLocale._(_ret, _lib, retain: true, release: true);
  }

  set locale(NSLocale value) {
    return _lib._objc_msgSend_762(
      this.pointer,
      _lib._sel_setLocale_1,
      value.pointer,
    );
  }

  bool get generatesDecimalNumbers {
    return _lib._objc_msgSend_12(
      this.pointer,
      _lib._sel_generatesDecimalNumbers1,
    );
  }

  set generatesDecimalNumbers(bool value) {
    return _lib._objc_msgSend_527(
      this.pointer,
      _lib._sel_setGeneratesDecimalNumbers_1,
      value,
    );
  }

  int get formatterBehavior {
    return _lib._objc_msgSend_805(this.pointer, _lib._sel_formatterBehavior1);
  }

  set formatterBehavior(int value) {
    return _lib._objc_msgSend_809(
      this.pointer,
      _lib._sel_setFormatterBehavior_1,
      value,
    );
  }

  NSString get negativeFormat {
    final _ret = _lib._objc_msgSend_21(this.pointer, _lib._sel_negativeFormat1);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  set negativeFormat(NSString value) {
    return _lib._objc_msgSend_646(
      this.pointer,
      _lib._sel_setNegativeFormat_1,
      value.pointer,
    );
  }

  NSDictionary? get textAttributesForNegativeValues {
    final _ret = _lib._objc_msgSend_390(
      this.pointer,
      _lib._sel_textAttributesForNegativeValues1,
    );
    return _ret.address == 0
        ? null
        : NSDictionary._(_ret, _lib, retain: true, release: true);
  }

  set textAttributesForNegativeValues(NSDictionary? value) {
    return _lib._objc_msgSend_634(
      this.pointer,
      _lib._sel_setTextAttributesForNegativeValues_1,
      value?.pointer ?? ffi.nullptr,
    );
  }

  NSString get positiveFormat {
    final _ret = _lib._objc_msgSend_21(this.pointer, _lib._sel_positiveFormat1);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  set positiveFormat(NSString value) {
    return _lib._objc_msgSend_646(
      this.pointer,
      _lib._sel_setPositiveFormat_1,
      value.pointer,
    );
  }

  NSDictionary? get textAttributesForPositiveValues {
    final _ret = _lib._objc_msgSend_390(
      this.pointer,
      _lib._sel_textAttributesForPositiveValues1,
    );
    return _ret.address == 0
        ? null
        : NSDictionary._(_ret, _lib, retain: true, release: true);
  }

  set textAttributesForPositiveValues(NSDictionary? value) {
    return _lib._objc_msgSend_634(
      this.pointer,
      _lib._sel_setTextAttributesForPositiveValues_1,
      value?.pointer ?? ffi.nullptr,
    );
  }

  bool get allowsFloats {
    return _lib._objc_msgSend_12(this.pointer, _lib._sel_allowsFloats1);
  }

  set allowsFloats(bool value) {
    return _lib._objc_msgSend_527(
      this.pointer,
      _lib._sel_setAllowsFloats_1,
      value,
    );
  }

  NSString get decimalSeparator {
    final _ret = _lib._objc_msgSend_21(
      this.pointer,
      _lib._sel_decimalSeparator1,
    );
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  set decimalSeparator(NSString value) {
    return _lib._objc_msgSend_646(
      this.pointer,
      _lib._sel_setDecimalSeparator_1,
      value.pointer,
    );
  }

  bool get alwaysShowsDecimalSeparator {
    return _lib._objc_msgSend_12(
      this.pointer,
      _lib._sel_alwaysShowsDecimalSeparator1,
    );
  }

  set alwaysShowsDecimalSeparator(bool value) {
    return _lib._objc_msgSend_527(
      this.pointer,
      _lib._sel_setAlwaysShowsDecimalSeparator_1,
      value,
    );
  }

  NSString get currencyDecimalSeparator {
    final _ret = _lib._objc_msgSend_21(
      this.pointer,
      _lib._sel_currencyDecimalSeparator1,
    );
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  set currencyDecimalSeparator(NSString value) {
    return _lib._objc_msgSend_646(
      this.pointer,
      _lib._sel_setCurrencyDecimalSeparator_1,
      value.pointer,
    );
  }

  bool get usesGroupingSeparator {
    return _lib._objc_msgSend_12(
      this.pointer,
      _lib._sel_usesGroupingSeparator1,
    );
  }

  set usesGroupingSeparator(bool value) {
    return _lib._objc_msgSend_527(
      this.pointer,
      _lib._sel_setUsesGroupingSeparator_1,
      value,
    );
  }

  NSString get groupingSeparator {
    final _ret = _lib._objc_msgSend_21(
      this.pointer,
      _lib._sel_groupingSeparator1,
    );
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  set groupingSeparator(NSString value) {
    return _lib._objc_msgSend_646(
      this.pointer,
      _lib._sel_setGroupingSeparator_1,
      value.pointer,
    );
  }

  NSString? get zeroSymbol {
    final _ret = _lib._objc_msgSend_44(this.pointer, _lib._sel_zeroSymbol1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  set zeroSymbol(NSString? value) {
    return _lib._objc_msgSend_545(
      this.pointer,
      _lib._sel_setZeroSymbol_1,
      value?.pointer ?? ffi.nullptr,
    );
  }

  NSDictionary? get textAttributesForZero {
    final _ret = _lib._objc_msgSend_390(
      this.pointer,
      _lib._sel_textAttributesForZero1,
    );
    return _ret.address == 0
        ? null
        : NSDictionary._(_ret, _lib, retain: true, release: true);
  }

  set textAttributesForZero(NSDictionary? value) {
    return _lib._objc_msgSend_634(
      this.pointer,
      _lib._sel_setTextAttributesForZero_1,
      value?.pointer ?? ffi.nullptr,
    );
  }

  NSString get nilSymbol {
    final _ret = _lib._objc_msgSend_21(this.pointer, _lib._sel_nilSymbol1);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  set nilSymbol(NSString value) {
    return _lib._objc_msgSend_646(
      this.pointer,
      _lib._sel_setNilSymbol_1,
      value.pointer,
    );
  }

  NSDictionary? get textAttributesForNil {
    final _ret = _lib._objc_msgSend_390(
      this.pointer,
      _lib._sel_textAttributesForNil1,
    );
    return _ret.address == 0
        ? null
        : NSDictionary._(_ret, _lib, retain: true, release: true);
  }

  set textAttributesForNil(NSDictionary? value) {
    return _lib._objc_msgSend_634(
      this.pointer,
      _lib._sel_setTextAttributesForNil_1,
      value?.pointer ?? ffi.nullptr,
    );
  }

  NSString get notANumberSymbol {
    final _ret = _lib._objc_msgSend_21(
      this.pointer,
      _lib._sel_notANumberSymbol1,
    );
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  set notANumberSymbol(NSString value) {
    return _lib._objc_msgSend_646(
      this.pointer,
      _lib._sel_setNotANumberSymbol_1,
      value.pointer,
    );
  }

  NSDictionary? get textAttributesForNotANumber {
    final _ret = _lib._objc_msgSend_390(
      this.pointer,
      _lib._sel_textAttributesForNotANumber1,
    );
    return _ret.address == 0
        ? null
        : NSDictionary._(_ret, _lib, retain: true, release: true);
  }

  set textAttributesForNotANumber(NSDictionary? value) {
    return _lib._objc_msgSend_634(
      this.pointer,
      _lib._sel_setTextAttributesForNotANumber_1,
      value?.pointer ?? ffi.nullptr,
    );
  }

  NSString get positiveInfinitySymbol {
    final _ret = _lib._objc_msgSend_21(
      this.pointer,
      _lib._sel_positiveInfinitySymbol1,
    );
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  set positiveInfinitySymbol(NSString value) {
    return _lib._objc_msgSend_646(
      this.pointer,
      _lib._sel_setPositiveInfinitySymbol_1,
      value.pointer,
    );
  }

  NSDictionary? get textAttributesForPositiveInfinity {
    final _ret = _lib._objc_msgSend_390(
      this.pointer,
      _lib._sel_textAttributesForPositiveInfinity1,
    );
    return _ret.address == 0
        ? null
        : NSDictionary._(_ret, _lib, retain: true, release: true);
  }

  set textAttributesForPositiveInfinity(NSDictionary? value) {
    return _lib._objc_msgSend_634(
      this.pointer,
      _lib._sel_setTextAttributesForPositiveInfinity_1,
      value?.pointer ?? ffi.nullptr,
    );
  }

  NSString get negativeInfinitySymbol {
    final _ret = _lib._objc_msgSend_21(
      this.pointer,
      _lib._sel_negativeInfinitySymbol1,
    );
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  set negativeInfinitySymbol(NSString value) {
    return _lib._objc_msgSend_646(
      this.pointer,
      _lib._sel_setNegativeInfinitySymbol_1,
      value.pointer,
    );
  }

  NSDictionary? get textAttributesForNegativeInfinity {
    final _ret = _lib._objc_msgSend_390(
      this.pointer,
      _lib._sel_textAttributesForNegativeInfinity1,
    );
    return _ret.address == 0
        ? null
        : NSDictionary._(_ret, _lib, retain: true, release: true);
  }

  set textAttributesForNegativeInfinity(NSDictionary? value) {
    return _lib._objc_msgSend_634(
      this.pointer,
      _lib._sel_setTextAttributesForNegativeInfinity_1,
      value?.pointer ?? ffi.nullptr,
    );
  }

  NSString get positivePrefix {
    final _ret = _lib._objc_msgSend_21(this.pointer, _lib._sel_positivePrefix1);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  set positivePrefix(NSString value) {
    return _lib._objc_msgSend_646(
      this.pointer,
      _lib._sel_setPositivePrefix_1,
      value.pointer,
    );
  }

  NSString get positiveSuffix {
    final _ret = _lib._objc_msgSend_21(this.pointer, _lib._sel_positiveSuffix1);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  set positiveSuffix(NSString value) {
    return _lib._objc_msgSend_646(
      this.pointer,
      _lib._sel_setPositiveSuffix_1,
      value.pointer,
    );
  }

  NSString get negativePrefix {
    final _ret = _lib._objc_msgSend_21(this.pointer, _lib._sel_negativePrefix1);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  set negativePrefix(NSString value) {
    return _lib._objc_msgSend_646(
      this.pointer,
      _lib._sel_setNegativePrefix_1,
      value.pointer,
    );
  }

  NSString get negativeSuffix {
    final _ret = _lib._objc_msgSend_21(this.pointer, _lib._sel_negativeSuffix1);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  set negativeSuffix(NSString value) {
    return _lib._objc_msgSend_646(
      this.pointer,
      _lib._sel_setNegativeSuffix_1,
      value.pointer,
    );
  }

  NSString get currencyCode {
    final _ret = _lib._objc_msgSend_21(this.pointer, _lib._sel_currencyCode1);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  set currencyCode(NSString value) {
    return _lib._objc_msgSend_646(
      this.pointer,
      _lib._sel_setCurrencyCode_1,
      value.pointer,
    );
  }

  NSString get currencySymbol {
    final _ret = _lib._objc_msgSend_21(this.pointer, _lib._sel_currencySymbol1);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  set currencySymbol(NSString value) {
    return _lib._objc_msgSend_646(
      this.pointer,
      _lib._sel_setCurrencySymbol_1,
      value.pointer,
    );
  }

  NSString get internationalCurrencySymbol {
    final _ret = _lib._objc_msgSend_21(
      this.pointer,
      _lib._sel_internationalCurrencySymbol1,
    );
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  set internationalCurrencySymbol(NSString value) {
    return _lib._objc_msgSend_646(
      this.pointer,
      _lib._sel_setInternationalCurrencySymbol_1,
      value.pointer,
    );
  }

  NSString get percentSymbol {
    final _ret = _lib._objc_msgSend_21(this.pointer, _lib._sel_percentSymbol1);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  set percentSymbol(NSString value) {
    return _lib._objc_msgSend_646(
      this.pointer,
      _lib._sel_setPercentSymbol_1,
      value.pointer,
    );
  }

  NSString get perMillSymbol {
    final _ret = _lib._objc_msgSend_21(this.pointer, _lib._sel_perMillSymbol1);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  set perMillSymbol(NSString value) {
    return _lib._objc_msgSend_646(
      this.pointer,
      _lib._sel_setPerMillSymbol_1,
      value.pointer,
    );
  }

  NSString get minusSign {
    final _ret = _lib._objc_msgSend_21(this.pointer, _lib._sel_minusSign1);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  set minusSign(NSString value) {
    return _lib._objc_msgSend_646(
      this.pointer,
      _lib._sel_setMinusSign_1,
      value.pointer,
    );
  }

  NSString get plusSign {
    final _ret = _lib._objc_msgSend_21(this.pointer, _lib._sel_plusSign1);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  set plusSign(NSString value) {
    return _lib._objc_msgSend_646(
      this.pointer,
      _lib._sel_setPlusSign_1,
      value.pointer,
    );
  }

  NSString get exponentSymbol {
    final _ret = _lib._objc_msgSend_21(this.pointer, _lib._sel_exponentSymbol1);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  set exponentSymbol(NSString value) {
    return _lib._objc_msgSend_646(
      this.pointer,
      _lib._sel_setExponentSymbol_1,
      value.pointer,
    );
  }

  int get groupingSize {
    return _lib._objc_msgSend_10(this.pointer, _lib._sel_groupingSize1);
  }

  set groupingSize(int value) {
    return _lib._objc_msgSend_516(
      this.pointer,
      _lib._sel_setGroupingSize_1,
      value,
    );
  }

  int get secondaryGroupingSize {
    return _lib._objc_msgSend_10(
      this.pointer,
      _lib._sel_secondaryGroupingSize1,
    );
  }

  set secondaryGroupingSize(int value) {
    return _lib._objc_msgSend_516(
      this.pointer,
      _lib._sel_setSecondaryGroupingSize_1,
      value,
    );
  }

  NSNumber? get multiplier {
    final _ret = _lib._objc_msgSend_215(this.pointer, _lib._sel_multiplier1);
    return _ret.address == 0
        ? null
        : NSNumber._(_ret, _lib, retain: true, release: true);
  }

  set multiplier(NSNumber? value) {
    return _lib._objc_msgSend_670(
      this.pointer,
      _lib._sel_setMultiplier_1,
      value?.pointer ?? ffi.nullptr,
    );
  }

  int get formatWidth {
    return _lib._objc_msgSend_10(this.pointer, _lib._sel_formatWidth1);
  }

  set formatWidth(int value) {
    return _lib._objc_msgSend_516(
      this.pointer,
      _lib._sel_setFormatWidth_1,
      value,
    );
  }

  NSString get paddingCharacter {
    final _ret = _lib._objc_msgSend_21(
      this.pointer,
      _lib._sel_paddingCharacter1,
    );
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  set paddingCharacter(NSString value) {
    return _lib._objc_msgSend_646(
      this.pointer,
      _lib._sel_setPaddingCharacter_1,
      value.pointer,
    );
  }

  int get paddingPosition {
    return _lib._objc_msgSend_810(this.pointer, _lib._sel_paddingPosition1);
  }

  set paddingPosition(int value) {
    return _lib._objc_msgSend_811(
      this.pointer,
      _lib._sel_setPaddingPosition_1,
      value,
    );
  }

  int get roundingMode {
    return _lib._objc_msgSend_812(this.pointer, _lib._sel_roundingMode1);
  }

  set roundingMode(int value) {
    return _lib._objc_msgSend_813(
      this.pointer,
      _lib._sel_setRoundingMode_1,
      value,
    );
  }

  NSNumber get roundingIncrement {
    final _ret = _lib._objc_msgSend_814(
      this.pointer,
      _lib._sel_roundingIncrement1,
    );
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  set roundingIncrement(NSNumber value) {
    return _lib._objc_msgSend_815(
      this.pointer,
      _lib._sel_setRoundingIncrement_1,
      value.pointer,
    );
  }

  int get minimumIntegerDigits {
    return _lib._objc_msgSend_10(this.pointer, _lib._sel_minimumIntegerDigits1);
  }

  set minimumIntegerDigits(int value) {
    return _lib._objc_msgSend_516(
      this.pointer,
      _lib._sel_setMinimumIntegerDigits_1,
      value,
    );
  }

  int get maximumIntegerDigits {
    return _lib._objc_msgSend_10(this.pointer, _lib._sel_maximumIntegerDigits1);
  }

  set maximumIntegerDigits(int value) {
    return _lib._objc_msgSend_516(
      this.pointer,
      _lib._sel_setMaximumIntegerDigits_1,
      value,
    );
  }

  int get minimumFractionDigits {
    return _lib._objc_msgSend_10(
      this.pointer,
      _lib._sel_minimumFractionDigits1,
    );
  }

  set minimumFractionDigits(int value) {
    return _lib._objc_msgSend_516(
      this.pointer,
      _lib._sel_setMinimumFractionDigits_1,
      value,
    );
  }

  int get maximumFractionDigits {
    return _lib._objc_msgSend_10(
      this.pointer,
      _lib._sel_maximumFractionDigits1,
    );
  }

  set maximumFractionDigits(int value) {
    return _lib._objc_msgSend_516(
      this.pointer,
      _lib._sel_setMaximumFractionDigits_1,
      value,
    );
  }

  NSNumber? get minimum {
    final _ret = _lib._objc_msgSend_215(this.pointer, _lib._sel_minimum1);
    return _ret.address == 0
        ? null
        : NSNumber._(_ret, _lib, retain: true, release: true);
  }

  set minimum(NSNumber? value) {
    return _lib._objc_msgSend_670(
      this.pointer,
      _lib._sel_setMinimum_1,
      value?.pointer ?? ffi.nullptr,
    );
  }

  NSNumber? get maximum {
    final _ret = _lib._objc_msgSend_215(this.pointer, _lib._sel_maximum1);
    return _ret.address == 0
        ? null
        : NSNumber._(_ret, _lib, retain: true, release: true);
  }

  set maximum(NSNumber? value) {
    return _lib._objc_msgSend_670(
      this.pointer,
      _lib._sel_setMaximum_1,
      value?.pointer ?? ffi.nullptr,
    );
  }

  NSString get currencyGroupingSeparator {
    final _ret = _lib._objc_msgSend_21(
      this.pointer,
      _lib._sel_currencyGroupingSeparator1,
    );
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  set currencyGroupingSeparator(NSString value) {
    return _lib._objc_msgSend_646(
      this.pointer,
      _lib._sel_setCurrencyGroupingSeparator_1,
      value.pointer,
    );
  }

  bool get lenient {
    return _lib._objc_msgSend_12(this.pointer, _lib._sel_isLenient1);
  }

  set lenient(bool value) {
    return _lib._objc_msgSend_527(this.pointer, _lib._sel_setLenient_1, value);
  }

  bool get usesSignificantDigits {
    return _lib._objc_msgSend_12(
      this.pointer,
      _lib._sel_usesSignificantDigits1,
    );
  }

  set usesSignificantDigits(bool value) {
    return _lib._objc_msgSend_527(
      this.pointer,
      _lib._sel_setUsesSignificantDigits_1,
      value,
    );
  }

  int get minimumSignificantDigits {
    return _lib._objc_msgSend_10(
      this.pointer,
      _lib._sel_minimumSignificantDigits1,
    );
  }

  set minimumSignificantDigits(int value) {
    return _lib._objc_msgSend_516(
      this.pointer,
      _lib._sel_setMinimumSignificantDigits_1,
      value,
    );
  }

  int get maximumSignificantDigits {
    return _lib._objc_msgSend_10(
      this.pointer,
      _lib._sel_maximumSignificantDigits1,
    );
  }

  set maximumSignificantDigits(int value) {
    return _lib._objc_msgSend_516(
      this.pointer,
      _lib._sel_setMaximumSignificantDigits_1,
      value,
    );
  }

  bool get partialStringValidationEnabled {
    return _lib._objc_msgSend_12(
      this.pointer,
      _lib._sel_isPartialStringValidationEnabled1,
    );
  }

  set partialStringValidationEnabled(bool value) {
    return _lib._objc_msgSend_527(
      this.pointer,
      _lib._sel_setPartialStringValidationEnabled_1,
      value,
    );
  }

  bool get hasThousandSeparators {
    return _lib._objc_msgSend_12(
      this.pointer,
      _lib._sel_hasThousandSeparators1,
    );
  }

  set hasThousandSeparators(bool value) {
    return _lib._objc_msgSend_527(
      this.pointer,
      _lib._sel_setHasThousandSeparators_1,
      value,
    );
  }

  NSString get thousandSeparator {
    final _ret = _lib._objc_msgSend_21(
      this.pointer,
      _lib._sel_thousandSeparator1,
    );
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  set thousandSeparator(NSString value) {
    return _lib._objc_msgSend_646(
      this.pointer,
      _lib._sel_setThousandSeparator_1,
      value.pointer,
    );
  }

  bool get localizesFormat {
    return _lib._objc_msgSend_12(this.pointer, _lib._sel_localizesFormat1);
  }

  set localizesFormat(bool value) {
    return _lib._objc_msgSend_527(
      this.pointer,
      _lib._sel_setLocalizesFormat_1,
      value,
    );
  }

  NSString get format {
    final _ret = _lib._objc_msgSend_21(this.pointer, _lib._sel_format1);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  set format(NSString value) {
    return _lib._objc_msgSend_646(
      this.pointer,
      _lib._sel_setFormat_1,
      value.pointer,
    );
  }

  NSAttributedString get attributedStringForZero {
    final _ret = _lib._objc_msgSend_735(
      this.pointer,
      _lib._sel_attributedStringForZero1,
    );
    return NSAttributedString._(_ret, _lib, retain: true, release: true);
  }

  set attributedStringForZero(NSAttributedString value) {
    return _lib._objc_msgSend_816(
      this.pointer,
      _lib._sel_setAttributedStringForZero_1,
      value.pointer,
    );
  }

  NSAttributedString get attributedStringForNil {
    final _ret = _lib._objc_msgSend_735(
      this.pointer,
      _lib._sel_attributedStringForNil1,
    );
    return NSAttributedString._(_ret, _lib, retain: true, release: true);
  }

  set attributedStringForNil(NSAttributedString value) {
    return _lib._objc_msgSend_816(
      this.pointer,
      _lib._sel_setAttributedStringForNil_1,
      value.pointer,
    );
  }

  NSAttributedString get attributedStringForNotANumber {
    final _ret = _lib._objc_msgSend_735(
      this.pointer,
      _lib._sel_attributedStringForNotANumber1,
    );
    return NSAttributedString._(_ret, _lib, retain: true, release: true);
  }

  set attributedStringForNotANumber(NSAttributedString value) {
    return _lib._objc_msgSend_816(
      this.pointer,
      _lib._sel_setAttributedStringForNotANumber_1,
      value.pointer,
    );
  }

  NSDecimalNumberHandler get roundingBehavior {
    final _ret = _lib._objc_msgSend_817(
      this.pointer,
      _lib._sel_roundingBehavior1,
    );
    return NSDecimalNumberHandler._(_ret, _lib, retain: true, release: true);
  }

  set roundingBehavior(NSDecimalNumberHandler value) {
    return _lib._objc_msgSend_819(
      this.pointer,
      _lib._sel_setRoundingBehavior_1,
      value.pointer,
    );
  }

  @override
  NSNumberFormatter init() {
    final _ret = _lib._objc_msgSend_2(this.pointer, _lib._sel_init1);
    return NSNumberFormatter._(_ret, _lib, retain: true, release: true);
  }

  static NSNumberFormatter new1(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSNumberFormatter1,
      _lib._sel_new1,
    );
    return NSNumberFormatter._(_ret, _lib, retain: false, release: true);
  }

  static NSNumberFormatter allocWithZone_(
    AVFAudio _lib,
    ffi.Pointer<_NSZone> zone,
  ) {
    final _ret = _lib._objc_msgSend_3(
      _lib._class_NSNumberFormatter1,
      _lib._sel_allocWithZone_1,
      zone,
    );
    return NSNumberFormatter._(_ret, _lib, retain: false, release: true);
  }

  static NSNumberFormatter alloc(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSNumberFormatter1,
      _lib._sel_alloc1,
    );
    return NSNumberFormatter._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
    AVFAudio _lib,
    NSObject aTarget,
    ffi.Pointer<objc.ObjCSelector> aSelector,
    NSObject? anArgument,
  ) {
    _lib._objc_msgSend_14(
      _lib._class_NSNumberFormatter1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
      aTarget.pointer,
      aSelector,
      anArgument?.pointer ?? ffi.nullptr,
    );
  }

  static void cancelPreviousPerformRequestsWithTarget_(
    AVFAudio _lib,
    NSObject aTarget,
  ) {
    _lib._objc_msgSend_15(
      _lib._class_NSNumberFormatter1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_1,
      aTarget.pointer,
    );
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSNumberFormatter1,
      _lib._sel_accessInstanceVariablesDirectly1,
    );
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSNumberFormatter1,
      _lib._sel_useStoredAccessor1,
    );
  }

  static NSSet keyPathsForValuesAffectingValueForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    final _ret = _lib._objc_msgSend_63(
      _lib._class_NSNumberFormatter1,
      _lib._sel_keyPathsForValuesAffectingValueForKey_1,
      key.pointer,
    );
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    return _lib._objc_msgSend_64(
      _lib._class_NSNumberFormatter1,
      _lib._sel_automaticallyNotifiesObserversForKey_1,
      key.pointer,
    );
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
    AVFAudio _lib,
    NSArray keys,
    NSString dependentKey,
  ) {
    _lib._objc_msgSend_88(
      _lib._class_NSNumberFormatter1,
      _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
      keys.pointer,
      dependentKey.pointer,
    );
  }

  static NSArray classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_85(
      _lib._class_NSNumberFormatter1,
      _lib._sel_classFallbacksForKeyedArchiver1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSNumberFormatter1,
      _lib._sel_classForKeyedUnarchiver1,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

abstract class NSNumberFormatterStyle {
  static const int NSNumberFormatterNoStyle = 0;
  static const int NSNumberFormatterDecimalStyle = 1;
  static const int NSNumberFormatterCurrencyStyle = 2;
  static const int NSNumberFormatterPercentStyle = 3;
  static const int NSNumberFormatterScientificStyle = 4;
  static const int NSNumberFormatterSpellOutStyle = 5;
  static const int NSNumberFormatterOrdinalStyle = 6;
  static const int NSNumberFormatterCurrencyISOCodeStyle = 8;
  static const int NSNumberFormatterCurrencyPluralStyle = 9;
  static const int NSNumberFormatterCurrencyAccountingStyle = 10;
}

abstract class NSNumberFormatterBehavior {
  static const int NSNumberFormatterBehaviorDefault = 0;
  static const int NSNumberFormatterBehavior10_0 = 1000;
  static const int NSNumberFormatterBehavior10_4 = 1040;
}

abstract class NSNumberFormatterPadPosition {
  static const int NSNumberFormatterPadBeforePrefix = 0;
  static const int NSNumberFormatterPadAfterPrefix = 1;
  static const int NSNumberFormatterPadBeforeSuffix = 2;
  static const int NSNumberFormatterPadAfterSuffix = 3;
}

abstract class NSNumberFormatterRoundingMode {
  static const int NSNumberFormatterRoundCeiling = 0;
  static const int NSNumberFormatterRoundFloor = 1;
  static const int NSNumberFormatterRoundDown = 2;
  static const int NSNumberFormatterRoundUp = 3;
  static const int NSNumberFormatterRoundHalfEven = 4;
  static const int NSNumberFormatterRoundHalfDown = 5;
  static const int NSNumberFormatterRoundHalfUp = 6;
}

class NSDecimalNumberHandler extends NSObject {
  NSDecimalNumberHandler._(
    ffi.Pointer<objc.ObjCObject> pointer,
    AVFAudio lib, {
    bool retain = false,
    bool release = false,
  }) : super._(pointer, lib, retain: retain, release: release);

  /// Returns a [NSDecimalNumberHandler] that points to the same underlying object as [other].
  static NSDecimalNumberHandler castFrom<T extends objc.ObjCObjectBase>(
    AVFAudio lib,
    T other,
  ) {
    return NSDecimalNumberHandler._(
      other.pointer,
      lib,
      retain: true,
      release: true,
    );
  }

  /// Returns a [NSDecimalNumberHandler] that wraps the given raw object pointer.
  static NSDecimalNumberHandler castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCObject> other, {
    bool retain = false,
    bool release = false,
  }) {
    return NSDecimalNumberHandler._(
      other,
      lib,
      retain: retain,
      release: release,
    );
  }

  /// Returns whether [obj] is an instance of [NSDecimalNumberHandler].
  static bool isInstance(AVFAudio lib, objc.ObjCObjectBase obj) {
    return lib._objc_msgSend_0(
      obj.pointer,
      lib._sel_isKindOfClass_1,
      lib._class_NSDecimalNumberHandler1,
    );
  }

  static NSDecimalNumberHandler getDefaultDecimalNumberHandler(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_817(
      _lib._class_NSDecimalNumberHandler1,
      _lib._sel_defaultDecimalNumberHandler1,
    );
    return NSDecimalNumberHandler._(_ret, _lib, retain: true, release: true);
  }

  NSDecimalNumberHandler
  initWithRoundingMode_scale_raiseOnExactness_raiseOnOverflow_raiseOnUnderflow_raiseOnDivideByZero_(
    int roundingMode,
    int scale,
    bool exact,
    bool overflow,
    bool underflow,
    bool divideByZero,
  ) {
    final _ret = _lib._objc_msgSend_818(
      this.pointer,
      _lib._sel_initWithRoundingMode_scale_raiseOnExactness_raiseOnOverflow_raiseOnUnderflow_raiseOnDivideByZero_1,
      roundingMode,
      scale,
      exact,
      overflow,
      underflow,
      divideByZero,
    );
    return NSDecimalNumberHandler._(_ret, _lib, retain: true, release: true);
  }

  static NSDecimalNumberHandler
  decimalNumberHandlerWithRoundingMode_scale_raiseOnExactness_raiseOnOverflow_raiseOnUnderflow_raiseOnDivideByZero_(
    AVFAudio _lib,
    int roundingMode,
    int scale,
    bool exact,
    bool overflow,
    bool underflow,
    bool divideByZero,
  ) {
    final _ret = _lib._objc_msgSend_818(
      _lib._class_NSDecimalNumberHandler1,
      _lib._sel_decimalNumberHandlerWithRoundingMode_scale_raiseOnExactness_raiseOnOverflow_raiseOnUnderflow_raiseOnDivideByZero_1,
      roundingMode,
      scale,
      exact,
      overflow,
      underflow,
      divideByZero,
    );
    return NSDecimalNumberHandler._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSDecimalNumberHandler init() {
    final _ret = _lib._objc_msgSend_2(this.pointer, _lib._sel_init1);
    return NSDecimalNumberHandler._(_ret, _lib, retain: true, release: true);
  }

  static NSDecimalNumberHandler new1(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSDecimalNumberHandler1,
      _lib._sel_new1,
    );
    return NSDecimalNumberHandler._(_ret, _lib, retain: false, release: true);
  }

  static NSDecimalNumberHandler allocWithZone_(
    AVFAudio _lib,
    ffi.Pointer<_NSZone> zone,
  ) {
    final _ret = _lib._objc_msgSend_3(
      _lib._class_NSDecimalNumberHandler1,
      _lib._sel_allocWithZone_1,
      zone,
    );
    return NSDecimalNumberHandler._(_ret, _lib, retain: false, release: true);
  }

  static NSDecimalNumberHandler alloc(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSDecimalNumberHandler1,
      _lib._sel_alloc1,
    );
    return NSDecimalNumberHandler._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
    AVFAudio _lib,
    NSObject aTarget,
    ffi.Pointer<objc.ObjCSelector> aSelector,
    NSObject? anArgument,
  ) {
    _lib._objc_msgSend_14(
      _lib._class_NSDecimalNumberHandler1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
      aTarget.pointer,
      aSelector,
      anArgument?.pointer ?? ffi.nullptr,
    );
  }

  static void cancelPreviousPerformRequestsWithTarget_(
    AVFAudio _lib,
    NSObject aTarget,
  ) {
    _lib._objc_msgSend_15(
      _lib._class_NSDecimalNumberHandler1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_1,
      aTarget.pointer,
    );
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSDecimalNumberHandler1,
      _lib._sel_accessInstanceVariablesDirectly1,
    );
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSDecimalNumberHandler1,
      _lib._sel_useStoredAccessor1,
    );
  }

  static NSSet keyPathsForValuesAffectingValueForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    final _ret = _lib._objc_msgSend_63(
      _lib._class_NSDecimalNumberHandler1,
      _lib._sel_keyPathsForValuesAffectingValueForKey_1,
      key.pointer,
    );
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    return _lib._objc_msgSend_64(
      _lib._class_NSDecimalNumberHandler1,
      _lib._sel_automaticallyNotifiesObserversForKey_1,
      key.pointer,
    );
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
    AVFAudio _lib,
    NSArray keys,
    NSString dependentKey,
  ) {
    _lib._objc_msgSend_88(
      _lib._class_NSDecimalNumberHandler1,
      _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
      keys.pointer,
      dependentKey.pointer,
    );
  }

  static NSArray classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_85(
      _lib._class_NSDecimalNumberHandler1,
      _lib._sel_classFallbacksForKeyedArchiver1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSDecimalNumberHandler1,
      _lib._sel_classForKeyedUnarchiver1,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

abstract class NSRoundingMode {
  static const int NSRoundPlain = 0;
  static const int NSRoundDown = 1;
  static const int NSRoundUp = 2;
  static const int NSRoundBankers = 3;
}

class NSScanner extends NSObject {
  NSScanner._(
    ffi.Pointer<objc.ObjCObject> pointer,
    AVFAudio lib, {
    bool retain = false,
    bool release = false,
  }) : super._(pointer, lib, retain: retain, release: release);

  /// Returns a [NSScanner] that points to the same underlying object as [other].
  static NSScanner castFrom<T extends objc.ObjCObjectBase>(
    AVFAudio lib,
    T other,
  ) {
    return NSScanner._(other.pointer, lib, retain: true, release: true);
  }

  /// Returns a [NSScanner] that wraps the given raw object pointer.
  static NSScanner castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCObject> other, {
    bool retain = false,
    bool release = false,
  }) {
    return NSScanner._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSScanner].
  static bool isInstance(AVFAudio lib, objc.ObjCObjectBase obj) {
    return lib._objc_msgSend_0(
      obj.pointer,
      lib._sel_isKindOfClass_1,
      lib._class_NSScanner1,
    );
  }

  NSString get string {
    final _ret = _lib._objc_msgSend_21(this.pointer, _lib._sel_string1);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  int get scanLocation {
    return _lib._objc_msgSend_10(this.pointer, _lib._sel_scanLocation1);
  }

  set scanLocation(int value) {
    return _lib._objc_msgSend_516(
      this.pointer,
      _lib._sel_setScanLocation_1,
      value,
    );
  }

  NSCharacterSet? get charactersToBeSkipped {
    final _ret = _lib._objc_msgSend_820(
      this.pointer,
      _lib._sel_charactersToBeSkipped1,
    );
    return _ret.address == 0
        ? null
        : NSCharacterSet._(_ret, _lib, retain: true, release: true);
  }

  set charactersToBeSkipped(NSCharacterSet? value) {
    return _lib._objc_msgSend_821(
      this.pointer,
      _lib._sel_setCharactersToBeSkipped_1,
      value?.pointer ?? ffi.nullptr,
    );
  }

  bool get caseSensitive {
    return _lib._objc_msgSend_12(this.pointer, _lib._sel_caseSensitive1);
  }

  set caseSensitive(bool value) {
    return _lib._objc_msgSend_527(
      this.pointer,
      _lib._sel_setCaseSensitive_1,
      value,
    );
  }

  NSObject? get locale {
    final _ret = _lib._objc_msgSend_17(this.pointer, _lib._sel_locale1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  set locale(NSObject? value) {
    return _lib._objc_msgSend_416(
      this.pointer,
      _lib._sel_setLocale_1,
      value?.pointer ?? ffi.nullptr,
    );
  }

  NSScanner initWithString_(NSString string) {
    final _ret = _lib._objc_msgSend_31(
      this.pointer,
      _lib._sel_initWithString_1,
      string.pointer,
    );
    return NSScanner._(_ret, _lib, retain: true, release: true);
  }

  bool scanInt_(ffi.Pointer<ffi.Int> result) {
    return _lib._objc_msgSend_822(this.pointer, _lib._sel_scanInt_1, result);
  }

  bool scanInteger_(ffi.Pointer<ffi.Long> result) {
    return _lib._objc_msgSend_823(
      this.pointer,
      _lib._sel_scanInteger_1,
      result,
    );
  }

  bool scanLongLong_(ffi.Pointer<ffi.LongLong> result) {
    return _lib._objc_msgSend_824(
      this.pointer,
      _lib._sel_scanLongLong_1,
      result,
    );
  }

  bool scanUnsignedLongLong_(ffi.Pointer<ffi.UnsignedLongLong> result) {
    return _lib._objc_msgSend_825(
      this.pointer,
      _lib._sel_scanUnsignedLongLong_1,
      result,
    );
  }

  bool scanFloat_(ffi.Pointer<ffi.Float> result) {
    return _lib._objc_msgSend_826(this.pointer, _lib._sel_scanFloat_1, result);
  }

  bool scanDouble_(ffi.Pointer<ffi.Double> result) {
    return _lib._objc_msgSend_827(this.pointer, _lib._sel_scanDouble_1, result);
  }

  bool scanHexInt_(ffi.Pointer<ffi.UnsignedInt> result) {
    return _lib._objc_msgSend_828(this.pointer, _lib._sel_scanHexInt_1, result);
  }

  bool scanHexLongLong_(ffi.Pointer<ffi.UnsignedLongLong> result) {
    return _lib._objc_msgSend_825(
      this.pointer,
      _lib._sel_scanHexLongLong_1,
      result,
    );
  }

  bool scanHexFloat_(ffi.Pointer<ffi.Float> result) {
    return _lib._objc_msgSend_826(
      this.pointer,
      _lib._sel_scanHexFloat_1,
      result,
    );
  }

  bool scanHexDouble_(ffi.Pointer<ffi.Double> result) {
    return _lib._objc_msgSend_827(
      this.pointer,
      _lib._sel_scanHexDouble_1,
      result,
    );
  }

  bool scanString_intoString_(
    NSString string,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> result,
  ) {
    return _lib._objc_msgSend_829(
      this.pointer,
      _lib._sel_scanString_intoString_1,
      string.pointer,
      result,
    );
  }

  bool scanCharactersFromSet_intoString_(
    NSCharacterSet set,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> result,
  ) {
    return _lib._objc_msgSend_830(
      this.pointer,
      _lib._sel_scanCharactersFromSet_intoString_1,
      set.pointer,
      result,
    );
  }

  bool scanUpToString_intoString_(
    NSString string,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> result,
  ) {
    return _lib._objc_msgSend_829(
      this.pointer,
      _lib._sel_scanUpToString_intoString_1,
      string.pointer,
      result,
    );
  }

  bool scanUpToCharactersFromSet_intoString_(
    NSCharacterSet set,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> result,
  ) {
    return _lib._objc_msgSend_830(
      this.pointer,
      _lib._sel_scanUpToCharactersFromSet_intoString_1,
      set.pointer,
      result,
    );
  }

  bool get atEnd {
    return _lib._objc_msgSend_12(this.pointer, _lib._sel_isAtEnd1);
  }

  static NSScanner scannerWithString_(AVFAudio _lib, NSString string) {
    final _ret = _lib._objc_msgSend_31(
      _lib._class_NSScanner1,
      _lib._sel_scannerWithString_1,
      string.pointer,
    );
    return NSScanner._(_ret, _lib, retain: true, release: true);
  }

  static NSObject localizedScannerWithString_(AVFAudio _lib, NSString string) {
    final _ret = _lib._objc_msgSend_31(
      _lib._class_NSScanner1,
      _lib._sel_localizedScannerWithString_1,
      string.pointer,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  bool scanDecimal_(ffi.Pointer<NSDecimal> dcm) {
    return _lib._objc_msgSend_831(this.pointer, _lib._sel_scanDecimal_1, dcm);
  }

  @override
  NSScanner init() {
    final _ret = _lib._objc_msgSend_2(this.pointer, _lib._sel_init1);
    return NSScanner._(_ret, _lib, retain: true, release: true);
  }

  static NSScanner new1(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSScanner1, _lib._sel_new1);
    return NSScanner._(_ret, _lib, retain: false, release: true);
  }

  static NSScanner allocWithZone_(AVFAudio _lib, ffi.Pointer<_NSZone> zone) {
    final _ret = _lib._objc_msgSend_3(
      _lib._class_NSScanner1,
      _lib._sel_allocWithZone_1,
      zone,
    );
    return NSScanner._(_ret, _lib, retain: false, release: true);
  }

  static NSScanner alloc(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSScanner1, _lib._sel_alloc1);
    return NSScanner._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
    AVFAudio _lib,
    NSObject aTarget,
    ffi.Pointer<objc.ObjCSelector> aSelector,
    NSObject? anArgument,
  ) {
    _lib._objc_msgSend_14(
      _lib._class_NSScanner1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
      aTarget.pointer,
      aSelector,
      anArgument?.pointer ?? ffi.nullptr,
    );
  }

  static void cancelPreviousPerformRequestsWithTarget_(
    AVFAudio _lib,
    NSObject aTarget,
  ) {
    _lib._objc_msgSend_15(
      _lib._class_NSScanner1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_1,
      aTarget.pointer,
    );
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSScanner1,
      _lib._sel_accessInstanceVariablesDirectly1,
    );
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSScanner1,
      _lib._sel_useStoredAccessor1,
    );
  }

  static NSSet keyPathsForValuesAffectingValueForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    final _ret = _lib._objc_msgSend_63(
      _lib._class_NSScanner1,
      _lib._sel_keyPathsForValuesAffectingValueForKey_1,
      key.pointer,
    );
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    return _lib._objc_msgSend_64(
      _lib._class_NSScanner1,
      _lib._sel_automaticallyNotifiesObserversForKey_1,
      key.pointer,
    );
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
    AVFAudio _lib,
    NSArray keys,
    NSString dependentKey,
  ) {
    _lib._objc_msgSend_88(
      _lib._class_NSScanner1,
      _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
      keys.pointer,
      dependentKey.pointer,
    );
  }

  static NSArray classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_85(
      _lib._class_NSScanner1,
      _lib._sel_classFallbacksForKeyedArchiver1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSScanner1,
      _lib._sel_classForKeyedUnarchiver1,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

final class NSDecimal extends ffi.Opaque {}

class NSException extends NSObject {
  NSException._(
    ffi.Pointer<objc.ObjCObject> pointer,
    AVFAudio lib, {
    bool retain = false,
    bool release = false,
  }) : super._(pointer, lib, retain: retain, release: release);

  /// Returns a [NSException] that points to the same underlying object as [other].
  static NSException castFrom<T extends objc.ObjCObjectBase>(
    AVFAudio lib,
    T other,
  ) {
    return NSException._(other.pointer, lib, retain: true, release: true);
  }

  /// Returns a [NSException] that wraps the given raw object pointer.
  static NSException castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCObject> other, {
    bool retain = false,
    bool release = false,
  }) {
    return NSException._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSException].
  static bool isInstance(AVFAudio lib, objc.ObjCObjectBase obj) {
    return lib._objc_msgSend_0(
      obj.pointer,
      lib._sel_isKindOfClass_1,
      lib._class_NSException1,
    );
  }

  static NSException exceptionWithName_reason_userInfo_(
    AVFAudio _lib,
    NSString name,
    NSString? reason,
    NSDictionary? userInfo,
  ) {
    final _ret = _lib._objc_msgSend_832(
      _lib._class_NSException1,
      _lib._sel_exceptionWithName_reason_userInfo_1,
      name.pointer,
      reason?.pointer ?? ffi.nullptr,
      userInfo?.pointer ?? ffi.nullptr,
    );
    return NSException._(_ret, _lib, retain: true, release: true);
  }

  NSException initWithName_reason_userInfo_(
    NSString aName,
    NSString? aReason,
    NSDictionary? aUserInfo,
  ) {
    final _ret = _lib._objc_msgSend_833(
      this.pointer,
      _lib._sel_initWithName_reason_userInfo_1,
      aName.pointer,
      aReason?.pointer ?? ffi.nullptr,
      aUserInfo?.pointer ?? ffi.nullptr,
    );
    return NSException._(_ret, _lib, retain: true, release: true);
  }

  NSString get name {
    final _ret = _lib._objc_msgSend_21(this.pointer, _lib._sel_name1);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString? get reason {
    final _ret = _lib._objc_msgSend_44(this.pointer, _lib._sel_reason1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSDictionary? get userInfo {
    final _ret = _lib._objc_msgSend_390(this.pointer, _lib._sel_userInfo1);
    return _ret.address == 0
        ? null
        : NSDictionary._(_ret, _lib, retain: true, release: true);
  }

  NSArray get callStackReturnAddresses {
    final _ret = _lib._objc_msgSend_85(
      this.pointer,
      _lib._sel_callStackReturnAddresses1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSArray get callStackSymbols {
    final _ret = _lib._objc_msgSend_85(
      this.pointer,
      _lib._sel_callStackSymbols1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  void raise() {
    _lib._objc_msgSend_1(this.pointer, _lib._sel_raise1);
  }

  static void raise_format_(AVFAudio _lib, NSString name, NSString format) {
    _lib._objc_msgSend_551(
      _lib._class_NSException1,
      _lib._sel_raise_format_1,
      name.pointer,
      format.pointer,
    );
  }

  static void raise_format_arguments_(
    AVFAudio _lib,
    NSString name,
    NSString format,
    ffi.Pointer<__va_list_tag> argList,
  ) {
    _lib._objc_msgSend_834(
      _lib._class_NSException1,
      _lib._sel_raise_format_arguments_1,
      name.pointer,
      format.pointer,
      argList,
    );
  }

  @override
  NSException init() {
    final _ret = _lib._objc_msgSend_2(this.pointer, _lib._sel_init1);
    return NSException._(_ret, _lib, retain: true, release: true);
  }

  static NSException new1(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSException1, _lib._sel_new1);
    return NSException._(_ret, _lib, retain: false, release: true);
  }

  static NSException allocWithZone_(AVFAudio _lib, ffi.Pointer<_NSZone> zone) {
    final _ret = _lib._objc_msgSend_3(
      _lib._class_NSException1,
      _lib._sel_allocWithZone_1,
      zone,
    );
    return NSException._(_ret, _lib, retain: false, release: true);
  }

  static NSException alloc(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSException1,
      _lib._sel_alloc1,
    );
    return NSException._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
    AVFAudio _lib,
    NSObject aTarget,
    ffi.Pointer<objc.ObjCSelector> aSelector,
    NSObject? anArgument,
  ) {
    _lib._objc_msgSend_14(
      _lib._class_NSException1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
      aTarget.pointer,
      aSelector,
      anArgument?.pointer ?? ffi.nullptr,
    );
  }

  static void cancelPreviousPerformRequestsWithTarget_(
    AVFAudio _lib,
    NSObject aTarget,
  ) {
    _lib._objc_msgSend_15(
      _lib._class_NSException1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_1,
      aTarget.pointer,
    );
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSException1,
      _lib._sel_accessInstanceVariablesDirectly1,
    );
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSException1,
      _lib._sel_useStoredAccessor1,
    );
  }

  static NSSet keyPathsForValuesAffectingValueForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    final _ret = _lib._objc_msgSend_63(
      _lib._class_NSException1,
      _lib._sel_keyPathsForValuesAffectingValueForKey_1,
      key.pointer,
    );
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    return _lib._objc_msgSend_64(
      _lib._class_NSException1,
      _lib._sel_automaticallyNotifiesObserversForKey_1,
      key.pointer,
    );
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
    AVFAudio _lib,
    NSArray keys,
    NSString dependentKey,
  ) {
    _lib._objc_msgSend_88(
      _lib._class_NSException1,
      _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
      keys.pointer,
      dependentKey.pointer,
    );
  }

  static NSArray classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_85(
      _lib._class_NSException1,
      _lib._sel_classFallbacksForKeyedArchiver1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSException1,
      _lib._sel_classForKeyedUnarchiver1,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

class NSFileHandle extends NSObject {
  NSFileHandle._(
    ffi.Pointer<objc.ObjCObject> pointer,
    AVFAudio lib, {
    bool retain = false,
    bool release = false,
  }) : super._(pointer, lib, retain: retain, release: release);

  /// Returns a [NSFileHandle] that points to the same underlying object as [other].
  static NSFileHandle castFrom<T extends objc.ObjCObjectBase>(
    AVFAudio lib,
    T other,
  ) {
    return NSFileHandle._(other.pointer, lib, retain: true, release: true);
  }

  /// Returns a [NSFileHandle] that wraps the given raw object pointer.
  static NSFileHandle castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCObject> other, {
    bool retain = false,
    bool release = false,
  }) {
    return NSFileHandle._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSFileHandle].
  static bool isInstance(AVFAudio lib, objc.ObjCObjectBase obj) {
    return lib._objc_msgSend_0(
      obj.pointer,
      lib._sel_isKindOfClass_1,
      lib._class_NSFileHandle1,
    );
  }

  NSData get availableData {
    final _ret = _lib._objc_msgSend_43(this.pointer, _lib._sel_availableData1);
    return NSData._(_ret, _lib, retain: true, release: true);
  }

  NSFileHandle initWithFileDescriptor_closeOnDealloc_(int fd, bool closeopt) {
    final _ret = _lib._objc_msgSend_835(
      this.pointer,
      _lib._sel_initWithFileDescriptor_closeOnDealloc_1,
      fd,
      closeopt,
    );
    return NSFileHandle._(_ret, _lib, retain: true, release: true);
  }

  NSFileHandle? initWithCoder_(NSCoder coder) {
    final _ret = _lib._objc_msgSend_47(
      this.pointer,
      _lib._sel_initWithCoder_1,
      coder.pointer,
    );
    return _ret.address == 0
        ? null
        : NSFileHandle._(_ret, _lib, retain: true, release: true);
  }

  NSData? readDataToEndOfFileAndReturnError_(
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    final _ret = _lib._objc_msgSend_836(
      this.pointer,
      _lib._sel_readDataToEndOfFileAndReturnError_1,
      error,
    );
    return _ret.address == 0
        ? null
        : NSData._(_ret, _lib, retain: true, release: true);
  }

  NSData? readDataUpToLength_error_(
    int length,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    final _ret = _lib._objc_msgSend_837(
      this.pointer,
      _lib._sel_readDataUpToLength_error_1,
      length,
      error,
    );
    return _ret.address == 0
        ? null
        : NSData._(_ret, _lib, retain: true, release: true);
  }

  bool writeData_error_(
    NSData data,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    return _lib._objc_msgSend_838(
      this.pointer,
      _lib._sel_writeData_error_1,
      data.pointer,
      error,
    );
  }

  bool getOffset_error_(
    ffi.Pointer<ffi.UnsignedLongLong> offsetInFile,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    return _lib._objc_msgSend_839(
      this.pointer,
      _lib._sel_getOffset_error_1,
      offsetInFile,
      error,
    );
  }

  bool seekToEndReturningOffset_error_(
    ffi.Pointer<ffi.UnsignedLongLong> offsetInFile,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    return _lib._objc_msgSend_839(
      this.pointer,
      _lib._sel_seekToEndReturningOffset_error_1,
      offsetInFile,
      error,
    );
  }

  bool seekToOffset_error_(
    int offset,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    return _lib._objc_msgSend_840(
      this.pointer,
      _lib._sel_seekToOffset_error_1,
      offset,
      error,
    );
  }

  bool truncateAtOffset_error_(
    int offset,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    return _lib._objc_msgSend_840(
      this.pointer,
      _lib._sel_truncateAtOffset_error_1,
      offset,
      error,
    );
  }

  bool synchronizeAndReturnError_(
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    return _lib._objc_msgSend_255(
      this.pointer,
      _lib._sel_synchronizeAndReturnError_1,
      error,
    );
  }

  bool closeAndReturnError_(ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    return _lib._objc_msgSend_255(
      this.pointer,
      _lib._sel_closeAndReturnError_1,
      error,
    );
  }

  static NSFileHandle getFileHandleWithStandardInput(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_841(
      _lib._class_NSFileHandle1,
      _lib._sel_fileHandleWithStandardInput1,
    );
    return NSFileHandle._(_ret, _lib, retain: true, release: true);
  }

  static NSFileHandle getFileHandleWithStandardOutput(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_841(
      _lib._class_NSFileHandle1,
      _lib._sel_fileHandleWithStandardOutput1,
    );
    return NSFileHandle._(_ret, _lib, retain: true, release: true);
  }

  static NSFileHandle getFileHandleWithStandardError(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_841(
      _lib._class_NSFileHandle1,
      _lib._sel_fileHandleWithStandardError1,
    );
    return NSFileHandle._(_ret, _lib, retain: true, release: true);
  }

  static NSFileHandle getFileHandleWithNullDevice(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_841(
      _lib._class_NSFileHandle1,
      _lib._sel_fileHandleWithNullDevice1,
    );
    return NSFileHandle._(_ret, _lib, retain: true, release: true);
  }

  static NSFileHandle? fileHandleForReadingAtPath_(
    AVFAudio _lib,
    NSString path,
  ) {
    final _ret = _lib._objc_msgSend_38(
      _lib._class_NSFileHandle1,
      _lib._sel_fileHandleForReadingAtPath_1,
      path.pointer,
    );
    return _ret.address == 0
        ? null
        : NSFileHandle._(_ret, _lib, retain: true, release: true);
  }

  static NSFileHandle? fileHandleForWritingAtPath_(
    AVFAudio _lib,
    NSString path,
  ) {
    final _ret = _lib._objc_msgSend_38(
      _lib._class_NSFileHandle1,
      _lib._sel_fileHandleForWritingAtPath_1,
      path.pointer,
    );
    return _ret.address == 0
        ? null
        : NSFileHandle._(_ret, _lib, retain: true, release: true);
  }

  static NSFileHandle? fileHandleForUpdatingAtPath_(
    AVFAudio _lib,
    NSString path,
  ) {
    final _ret = _lib._objc_msgSend_38(
      _lib._class_NSFileHandle1,
      _lib._sel_fileHandleForUpdatingAtPath_1,
      path.pointer,
    );
    return _ret.address == 0
        ? null
        : NSFileHandle._(_ret, _lib, retain: true, release: true);
  }

  static NSFileHandle? fileHandleForReadingFromURL_error_(
    AVFAudio _lib,
    NSURL url,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    final _ret = _lib._objc_msgSend_842(
      _lib._class_NSFileHandle1,
      _lib._sel_fileHandleForReadingFromURL_error_1,
      url.pointer,
      error,
    );
    return _ret.address == 0
        ? null
        : NSFileHandle._(_ret, _lib, retain: true, release: true);
  }

  static NSFileHandle? fileHandleForWritingToURL_error_(
    AVFAudio _lib,
    NSURL url,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    final _ret = _lib._objc_msgSend_842(
      _lib._class_NSFileHandle1,
      _lib._sel_fileHandleForWritingToURL_error_1,
      url.pointer,
      error,
    );
    return _ret.address == 0
        ? null
        : NSFileHandle._(_ret, _lib, retain: true, release: true);
  }

  static NSFileHandle? fileHandleForUpdatingURL_error_(
    AVFAudio _lib,
    NSURL url,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    final _ret = _lib._objc_msgSend_842(
      _lib._class_NSFileHandle1,
      _lib._sel_fileHandleForUpdatingURL_error_1,
      url.pointer,
      error,
    );
    return _ret.address == 0
        ? null
        : NSFileHandle._(_ret, _lib, retain: true, release: true);
  }

  void readInBackgroundAndNotifyForModes_(NSArray? modes) {
    _lib._objc_msgSend_843(
      this.pointer,
      _lib._sel_readInBackgroundAndNotifyForModes_1,
      modes?.pointer ?? ffi.nullptr,
    );
  }

  void readInBackgroundAndNotify() {
    _lib._objc_msgSend_1(this.pointer, _lib._sel_readInBackgroundAndNotify1);
  }

  void readToEndOfFileInBackgroundAndNotifyForModes_(NSArray? modes) {
    _lib._objc_msgSend_843(
      this.pointer,
      _lib._sel_readToEndOfFileInBackgroundAndNotifyForModes_1,
      modes?.pointer ?? ffi.nullptr,
    );
  }

  void readToEndOfFileInBackgroundAndNotify() {
    _lib._objc_msgSend_1(
      this.pointer,
      _lib._sel_readToEndOfFileInBackgroundAndNotify1,
    );
  }

  void acceptConnectionInBackgroundAndNotifyForModes_(NSArray? modes) {
    _lib._objc_msgSend_843(
      this.pointer,
      _lib._sel_acceptConnectionInBackgroundAndNotifyForModes_1,
      modes?.pointer ?? ffi.nullptr,
    );
  }

  void acceptConnectionInBackgroundAndNotify() {
    _lib._objc_msgSend_1(
      this.pointer,
      _lib._sel_acceptConnectionInBackgroundAndNotify1,
    );
  }

  void waitForDataInBackgroundAndNotifyForModes_(NSArray? modes) {
    _lib._objc_msgSend_843(
      this.pointer,
      _lib._sel_waitForDataInBackgroundAndNotifyForModes_1,
      modes?.pointer ?? ffi.nullptr,
    );
  }

  void waitForDataInBackgroundAndNotify() {
    _lib._objc_msgSend_1(
      this.pointer,
      _lib._sel_waitForDataInBackgroundAndNotify1,
    );
  }

  ObjCBlock_ffiVoid_NSFileHandle? get readabilityHandler {
    final _ret = _lib._objc_msgSend_844(
      this.pointer,
      _lib._sel_readabilityHandler1,
    );
    return _ret.address == 0
        ? null
        : ObjCBlock_ffiVoid_NSFileHandle._(
          _ret,
          _lib,
          retain: true,
          release: true,
        );
  }

  set readabilityHandler(ObjCBlock_ffiVoid_NSFileHandle? value) {
    return _lib._objc_msgSend_845(
      this.pointer,
      _lib._sel_setReadabilityHandler_1,
      value?.pointer ?? ffi.nullptr,
    );
  }

  ObjCBlock_ffiVoid_NSFileHandle? get writeabilityHandler {
    final _ret = _lib._objc_msgSend_844(
      this.pointer,
      _lib._sel_writeabilityHandler1,
    );
    return _ret.address == 0
        ? null
        : ObjCBlock_ffiVoid_NSFileHandle._(
          _ret,
          _lib,
          retain: true,
          release: true,
        );
  }

  set writeabilityHandler(ObjCBlock_ffiVoid_NSFileHandle? value) {
    return _lib._objc_msgSend_845(
      this.pointer,
      _lib._sel_setWriteabilityHandler_1,
      value?.pointer ?? ffi.nullptr,
    );
  }

  NSFileHandle initWithFileDescriptor_(int fd) {
    final _ret = _lib._objc_msgSend_846(
      this.pointer,
      _lib._sel_initWithFileDescriptor_1,
      fd,
    );
    return NSFileHandle._(_ret, _lib, retain: true, release: true);
  }

  int get fileDescriptor {
    return _lib._objc_msgSend_237(this.pointer, _lib._sel_fileDescriptor1);
  }

  NSData readDataToEndOfFile() {
    final _ret = _lib._objc_msgSend_43(
      this.pointer,
      _lib._sel_readDataToEndOfFile1,
    );
    return NSData._(_ret, _lib, retain: true, release: true);
  }

  NSData readDataOfLength_(int length) {
    final _ret = _lib._objc_msgSend_847(
      this.pointer,
      _lib._sel_readDataOfLength_1,
      length,
    );
    return NSData._(_ret, _lib, retain: true, release: true);
  }

  void writeData_(NSData data) {
    _lib._objc_msgSend_285(this.pointer, _lib._sel_writeData_1, data.pointer);
  }

  int get offsetInFile {
    return _lib._objc_msgSend_164(this.pointer, _lib._sel_offsetInFile1);
  }

  int seekToEndOfFile() {
    return _lib._objc_msgSend_164(this.pointer, _lib._sel_seekToEndOfFile1);
  }

  void seekToFileOffset_(int offset) {
    _lib._objc_msgSend_848(this.pointer, _lib._sel_seekToFileOffset_1, offset);
  }

  void truncateFileAtOffset_(int offset) {
    _lib._objc_msgSend_848(
      this.pointer,
      _lib._sel_truncateFileAtOffset_1,
      offset,
    );
  }

  void synchronizeFile() {
    _lib._objc_msgSend_1(this.pointer, _lib._sel_synchronizeFile1);
  }

  void closeFile() {
    _lib._objc_msgSend_1(this.pointer, _lib._sel_closeFile1);
  }

  @override
  NSFileHandle init() {
    final _ret = _lib._objc_msgSend_2(this.pointer, _lib._sel_init1);
    return NSFileHandle._(_ret, _lib, retain: true, release: true);
  }

  static NSFileHandle new1(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSFileHandle1,
      _lib._sel_new1,
    );
    return NSFileHandle._(_ret, _lib, retain: false, release: true);
  }

  static NSFileHandle allocWithZone_(AVFAudio _lib, ffi.Pointer<_NSZone> zone) {
    final _ret = _lib._objc_msgSend_3(
      _lib._class_NSFileHandle1,
      _lib._sel_allocWithZone_1,
      zone,
    );
    return NSFileHandle._(_ret, _lib, retain: false, release: true);
  }

  static NSFileHandle alloc(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSFileHandle1,
      _lib._sel_alloc1,
    );
    return NSFileHandle._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
    AVFAudio _lib,
    NSObject aTarget,
    ffi.Pointer<objc.ObjCSelector> aSelector,
    NSObject? anArgument,
  ) {
    _lib._objc_msgSend_14(
      _lib._class_NSFileHandle1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
      aTarget.pointer,
      aSelector,
      anArgument?.pointer ?? ffi.nullptr,
    );
  }

  static void cancelPreviousPerformRequestsWithTarget_(
    AVFAudio _lib,
    NSObject aTarget,
  ) {
    _lib._objc_msgSend_15(
      _lib._class_NSFileHandle1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_1,
      aTarget.pointer,
    );
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSFileHandle1,
      _lib._sel_accessInstanceVariablesDirectly1,
    );
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSFileHandle1,
      _lib._sel_useStoredAccessor1,
    );
  }

  static NSSet keyPathsForValuesAffectingValueForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    final _ret = _lib._objc_msgSend_63(
      _lib._class_NSFileHandle1,
      _lib._sel_keyPathsForValuesAffectingValueForKey_1,
      key.pointer,
    );
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    return _lib._objc_msgSend_64(
      _lib._class_NSFileHandle1,
      _lib._sel_automaticallyNotifiesObserversForKey_1,
      key.pointer,
    );
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
    AVFAudio _lib,
    NSArray keys,
    NSString dependentKey,
  ) {
    _lib._objc_msgSend_88(
      _lib._class_NSFileHandle1,
      _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
      keys.pointer,
      dependentKey.pointer,
    );
  }

  static NSArray classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_85(
      _lib._class_NSFileHandle1,
      _lib._sel_classFallbacksForKeyedArchiver1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSFileHandle1,
      _lib._sel_classForKeyedUnarchiver1,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

void _ObjCBlock_ffiVoid_NSFileHandle_fnPtrTrampoline(
  ffi.Pointer<objc.ObjCBlock> block,
  ffi.Pointer<objc.ObjCObject> arg0,
) => block.ref.target
    .cast<
      ffi.NativeFunction<ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0)>
    >()
    .asFunction<void Function(ffi.Pointer<objc.ObjCObject>)>()(arg0);
final _ObjCBlock_ffiVoid_NSFileHandle_closureRegistry =
    <int, void Function(ffi.Pointer<objc.ObjCObject>)>{};
int _ObjCBlock_ffiVoid_NSFileHandle_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void> _ObjCBlock_ffiVoid_NSFileHandle_registerClosure(
  void Function(ffi.Pointer<objc.ObjCObject>) fn,
) {
  final id = ++_ObjCBlock_ffiVoid_NSFileHandle_closureRegistryIndex;
  _ObjCBlock_ffiVoid_NSFileHandle_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

void _ObjCBlock_ffiVoid_NSFileHandle_closureTrampoline(
  ffi.Pointer<objc.ObjCBlock> block,
  ffi.Pointer<objc.ObjCObject> arg0,
) => _ObjCBlock_ffiVoid_NSFileHandle_closureRegistry[block.ref.target.address]!(
  arg0,
);

class ObjCBlock_ffiVoid_NSFileHandle extends objc.ObjCBlockBase {
  ObjCBlock_ffiVoid_NSFileHandle._(
    ffi.Pointer<objc.ObjCBlock> pointer,
    this._lib, {
    bool retain = false,
    bool release = true,
  }) : super(pointer, retain: retain, release: release);

  AVFAudio _lib;

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_ffiVoid_NSFileHandle castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCBlock> pointer, {
    bool retain = false,
    bool release = false,
  }) {
    return ObjCBlock_ffiVoid_NSFileHandle._(
      pointer,
      lib,
      retain: retain,
      release: release,
    );
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSFileHandle.fromFunctionPointer(
    AVFAudio lib,
    ffi.Pointer<
      ffi.NativeFunction<ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0)>
    > ptr,
  ) : this._(objc.newBlock(
        _cFuncTrampoline ??=
            ffi.Pointer.fromFunction<
              ffi.Void Function(
                ffi.Pointer<objc.ObjCBlock>,
                ffi.Pointer<objc.ObjCObject>,
              )
            >(_ObjCBlock_ffiVoid_NSFileHandle_fnPtrTrampoline).cast(),
        ptr.cast(),
      ), lib);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSFileHandle.fromFunction(
    AVFAudio lib,
    void Function(NSFileHandle) fn,
  ) : this._(objc.newBlock(
        _dartFuncTrampoline ??=
            ffi.Pointer.fromFunction<
              ffi.Void Function(
                ffi.Pointer<objc.ObjCBlock>,
                ffi.Pointer<objc.ObjCObject>,
              )
            >(_ObjCBlock_ffiVoid_NSFileHandle_closureTrampoline).cast(),
        _ObjCBlock_ffiVoid_NSFileHandle_registerClosure((
          ffi.Pointer<objc.ObjCObject> arg0,
        ) => fn(NSFileHandle._(arg0, lib, retain: true, release: true))),
      ), lib);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_NSFileHandle.listener(
    AVFAudio lib,
    void Function(NSFileHandle) fn,
  ) : this._(objc.newBlock(
        (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
              ffi.Void Function(
                ffi.Pointer<objc.ObjCBlock>,
                ffi.Pointer<objc.ObjCObject>,
              )
            >.listener(
              _ObjCBlock_ffiVoid_NSFileHandle_closureTrampoline,
            )..keepIsolateAlive = false)
            .nativeFunction
            .cast(),
        _ObjCBlock_ffiVoid_NSFileHandle_registerClosure((
          ffi.Pointer<objc.ObjCObject> arg0,
        ) => fn(NSFileHandle._(arg0, lib, retain: true, release: true))),
      ), lib);
  static ffi.NativeCallable<
    ffi.Void Function(ffi.Pointer<objc.ObjCBlock>, ffi.Pointer<objc.ObjCObject>)
  >? _dartFuncListenerTrampoline;

  void call(NSFileHandle arg0) => pointer.ref.invoke
      .cast<
        ffi.NativeFunction<
          ffi.Void Function(
            ffi.Pointer<objc.ObjCBlock> block,
            ffi.Pointer<objc.ObjCObject> arg0,
          )
        >
      >()
      .asFunction<
        void Function(ffi.Pointer<objc.ObjCBlock>, ffi.Pointer<objc.ObjCObject>)
      >()(pointer, arg0.pointer);
}

class NSHTTPCookieStorage extends NSObject {
  NSHTTPCookieStorage._(
    ffi.Pointer<objc.ObjCObject> pointer,
    AVFAudio lib, {
    bool retain = false,
    bool release = false,
  }) : super._(pointer, lib, retain: retain, release: release);

  /// Returns a [NSHTTPCookieStorage] that points to the same underlying object as [other].
  static NSHTTPCookieStorage castFrom<T extends objc.ObjCObjectBase>(
    AVFAudio lib,
    T other,
  ) {
    return NSHTTPCookieStorage._(
      other.pointer,
      lib,
      retain: true,
      release: true,
    );
  }

  /// Returns a [NSHTTPCookieStorage] that wraps the given raw object pointer.
  static NSHTTPCookieStorage castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCObject> other, {
    bool retain = false,
    bool release = false,
  }) {
    return NSHTTPCookieStorage._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSHTTPCookieStorage].
  static bool isInstance(AVFAudio lib, objc.ObjCObjectBase obj) {
    return lib._objc_msgSend_0(
      obj.pointer,
      lib._sel_isKindOfClass_1,
      lib._class_NSHTTPCookieStorage1,
    );
  }

  static NSHTTPCookieStorage getSharedHTTPCookieStorage(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_849(
      _lib._class_NSHTTPCookieStorage1,
      _lib._sel_sharedHTTPCookieStorage1,
    );
    return NSHTTPCookieStorage._(_ret, _lib, retain: true, release: true);
  }

  static NSHTTPCookieStorage sharedCookieStorageForGroupContainerIdentifier_(
    AVFAudio _lib,
    NSString identifier,
  ) {
    final _ret = _lib._objc_msgSend_850(
      _lib._class_NSHTTPCookieStorage1,
      _lib._sel_sharedCookieStorageForGroupContainerIdentifier_1,
      identifier.pointer,
    );
    return NSHTTPCookieStorage._(_ret, _lib, retain: true, release: true);
  }

  NSArray? get cookies {
    final _ret = _lib._objc_msgSend_84(this.pointer, _lib._sel_cookies1);
    return _ret.address == 0
        ? null
        : NSArray._(_ret, _lib, retain: true, release: true);
  }

  void setCookie_(NSHTTPCookie cookie) {
    _lib._objc_msgSend_854(this.pointer, _lib._sel_setCookie_1, cookie.pointer);
  }

  void deleteCookie_(NSHTTPCookie cookie) {
    _lib._objc_msgSend_854(
      this.pointer,
      _lib._sel_deleteCookie_1,
      cookie.pointer,
    );
  }

  void removeCookiesSinceDate_(NSDate date) {
    _lib._objc_msgSend_540(
      this.pointer,
      _lib._sel_removeCookiesSinceDate_1,
      date.pointer,
    );
  }

  NSArray? cookiesForURL_(NSURL URL) {
    final _ret = _lib._objc_msgSend_133(
      this.pointer,
      _lib._sel_cookiesForURL_1,
      URL.pointer,
    );
    return _ret.address == 0
        ? null
        : NSArray._(_ret, _lib, retain: true, release: true);
  }

  void setCookies_forURL_mainDocumentURL_(
    NSArray cookies,
    NSURL? URL,
    NSURL? mainDocumentURL,
  ) {
    _lib._objc_msgSend_855(
      this.pointer,
      _lib._sel_setCookies_forURL_mainDocumentURL_1,
      cookies.pointer,
      URL?.pointer ?? ffi.nullptr,
      mainDocumentURL?.pointer ?? ffi.nullptr,
    );
  }

  int get cookieAcceptPolicy {
    return _lib._objc_msgSend_856(this.pointer, _lib._sel_cookieAcceptPolicy1);
  }

  set cookieAcceptPolicy(int value) {
    return _lib._objc_msgSend_857(
      this.pointer,
      _lib._sel_setCookieAcceptPolicy_1,
      value,
    );
  }

  NSArray sortedCookiesUsingDescriptors_(NSArray sortOrder) {
    final _ret = _lib._objc_msgSend_68(
      this.pointer,
      _lib._sel_sortedCookiesUsingDescriptors_1,
      sortOrder.pointer,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  void storeCookies_forTask_(NSArray cookies, NSURLSessionTask task) {
    _lib._objc_msgSend_882(
      this.pointer,
      _lib._sel_storeCookies_forTask_1,
      cookies.pointer,
      task.pointer,
    );
  }

  void getCookiesForTask_completionHandler_(
    NSURLSessionTask task,
    ObjCBlock_ffiVoid_NSArray completionHandler,
  ) {
    _lib._objc_msgSend_883(
      this.pointer,
      _lib._sel_getCookiesForTask_completionHandler_1,
      task.pointer,
      completionHandler.pointer,
    );
  }

  @override
  NSHTTPCookieStorage init() {
    final _ret = _lib._objc_msgSend_2(this.pointer, _lib._sel_init1);
    return NSHTTPCookieStorage._(_ret, _lib, retain: true, release: true);
  }

  static NSHTTPCookieStorage new1(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSHTTPCookieStorage1,
      _lib._sel_new1,
    );
    return NSHTTPCookieStorage._(_ret, _lib, retain: false, release: true);
  }

  static NSHTTPCookieStorage allocWithZone_(
    AVFAudio _lib,
    ffi.Pointer<_NSZone> zone,
  ) {
    final _ret = _lib._objc_msgSend_3(
      _lib._class_NSHTTPCookieStorage1,
      _lib._sel_allocWithZone_1,
      zone,
    );
    return NSHTTPCookieStorage._(_ret, _lib, retain: false, release: true);
  }

  static NSHTTPCookieStorage alloc(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSHTTPCookieStorage1,
      _lib._sel_alloc1,
    );
    return NSHTTPCookieStorage._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
    AVFAudio _lib,
    NSObject aTarget,
    ffi.Pointer<objc.ObjCSelector> aSelector,
    NSObject? anArgument,
  ) {
    _lib._objc_msgSend_14(
      _lib._class_NSHTTPCookieStorage1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
      aTarget.pointer,
      aSelector,
      anArgument?.pointer ?? ffi.nullptr,
    );
  }

  static void cancelPreviousPerformRequestsWithTarget_(
    AVFAudio _lib,
    NSObject aTarget,
  ) {
    _lib._objc_msgSend_15(
      _lib._class_NSHTTPCookieStorage1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_1,
      aTarget.pointer,
    );
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSHTTPCookieStorage1,
      _lib._sel_accessInstanceVariablesDirectly1,
    );
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSHTTPCookieStorage1,
      _lib._sel_useStoredAccessor1,
    );
  }

  static NSSet keyPathsForValuesAffectingValueForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    final _ret = _lib._objc_msgSend_63(
      _lib._class_NSHTTPCookieStorage1,
      _lib._sel_keyPathsForValuesAffectingValueForKey_1,
      key.pointer,
    );
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    return _lib._objc_msgSend_64(
      _lib._class_NSHTTPCookieStorage1,
      _lib._sel_automaticallyNotifiesObserversForKey_1,
      key.pointer,
    );
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
    AVFAudio _lib,
    NSArray keys,
    NSString dependentKey,
  ) {
    _lib._objc_msgSend_88(
      _lib._class_NSHTTPCookieStorage1,
      _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
      keys.pointer,
      dependentKey.pointer,
    );
  }

  static NSArray classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_85(
      _lib._class_NSHTTPCookieStorage1,
      _lib._sel_classFallbacksForKeyedArchiver1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSHTTPCookieStorage1,
      _lib._sel_classForKeyedUnarchiver1,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

class NSHTTPCookie extends NSObject {
  NSHTTPCookie._(
    ffi.Pointer<objc.ObjCObject> pointer,
    AVFAudio lib, {
    bool retain = false,
    bool release = false,
  }) : super._(pointer, lib, retain: retain, release: release);

  /// Returns a [NSHTTPCookie] that points to the same underlying object as [other].
  static NSHTTPCookie castFrom<T extends objc.ObjCObjectBase>(
    AVFAudio lib,
    T other,
  ) {
    return NSHTTPCookie._(other.pointer, lib, retain: true, release: true);
  }

  /// Returns a [NSHTTPCookie] that wraps the given raw object pointer.
  static NSHTTPCookie castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCObject> other, {
    bool retain = false,
    bool release = false,
  }) {
    return NSHTTPCookie._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSHTTPCookie].
  static bool isInstance(AVFAudio lib, objc.ObjCObjectBase obj) {
    return lib._objc_msgSend_0(
      obj.pointer,
      lib._sel_isKindOfClass_1,
      lib._class_NSHTTPCookie1,
    );
  }

  NSHTTPCookie? initWithProperties_(NSDictionary properties) {
    final _ret = _lib._objc_msgSend_851(
      this.pointer,
      _lib._sel_initWithProperties_1,
      properties.pointer,
    );
    return _ret.address == 0
        ? null
        : NSHTTPCookie._(_ret, _lib, retain: true, release: true);
  }

  static NSHTTPCookie? cookieWithProperties_(
    AVFAudio _lib,
    NSDictionary properties,
  ) {
    final _ret = _lib._objc_msgSend_852(
      _lib._class_NSHTTPCookie1,
      _lib._sel_cookieWithProperties_1,
      properties.pointer,
    );
    return _ret.address == 0
        ? null
        : NSHTTPCookie._(_ret, _lib, retain: true, release: true);
  }

  static NSDictionary requestHeaderFieldsWithCookies_(
    AVFAudio _lib,
    NSArray cookies,
  ) {
    final _ret = _lib._objc_msgSend_508(
      _lib._class_NSHTTPCookie1,
      _lib._sel_requestHeaderFieldsWithCookies_1,
      cookies.pointer,
    );
    return NSDictionary._(_ret, _lib, retain: true, release: true);
  }

  static NSArray cookiesWithResponseHeaderFields_forURL_(
    AVFAudio _lib,
    NSDictionary headerFields,
    NSURL URL,
  ) {
    final _ret = _lib._objc_msgSend_853(
      _lib._class_NSHTTPCookie1,
      _lib._sel_cookiesWithResponseHeaderFields_forURL_1,
      headerFields.pointer,
      URL.pointer,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSDictionary? get properties {
    final _ret = _lib._objc_msgSend_390(this.pointer, _lib._sel_properties1);
    return _ret.address == 0
        ? null
        : NSDictionary._(_ret, _lib, retain: true, release: true);
  }

  int get version {
    return _lib._objc_msgSend_10(this.pointer, _lib._sel_version1);
  }

  NSString get name {
    final _ret = _lib._objc_msgSend_21(this.pointer, _lib._sel_name1);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString get value {
    final _ret = _lib._objc_msgSend_21(this.pointer, _lib._sel_value1);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSDate? get expiresDate {
    final _ret = _lib._objc_msgSend_183(this.pointer, _lib._sel_expiresDate1);
    return _ret.address == 0
        ? null
        : NSDate._(_ret, _lib, retain: true, release: true);
  }

  bool get sessionOnly {
    return _lib._objc_msgSend_12(this.pointer, _lib._sel_isSessionOnly1);
  }

  NSString get domain {
    final _ret = _lib._objc_msgSend_21(this.pointer, _lib._sel_domain1);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString get path {
    final _ret = _lib._objc_msgSend_21(this.pointer, _lib._sel_path1);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  bool get secure {
    return _lib._objc_msgSend_12(this.pointer, _lib._sel_isSecure1);
  }

  bool get HTTPOnly {
    return _lib._objc_msgSend_12(this.pointer, _lib._sel_isHTTPOnly1);
  }

  NSString? get comment {
    final _ret = _lib._objc_msgSend_44(this.pointer, _lib._sel_comment1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSURL? get commentURL {
    final _ret = _lib._objc_msgSend_45(this.pointer, _lib._sel_commentURL1);
    return _ret.address == 0
        ? null
        : NSURL._(_ret, _lib, retain: true, release: true);
  }

  NSArray? get portList {
    final _ret = _lib._objc_msgSend_84(this.pointer, _lib._sel_portList1);
    return _ret.address == 0
        ? null
        : NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSString? get sameSitePolicy {
    final _ret = _lib._objc_msgSend_44(this.pointer, _lib._sel_sameSitePolicy1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSHTTPCookie init() {
    final _ret = _lib._objc_msgSend_2(this.pointer, _lib._sel_init1);
    return NSHTTPCookie._(_ret, _lib, retain: true, release: true);
  }

  static NSHTTPCookie new1(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSHTTPCookie1,
      _lib._sel_new1,
    );
    return NSHTTPCookie._(_ret, _lib, retain: false, release: true);
  }

  static NSHTTPCookie allocWithZone_(AVFAudio _lib, ffi.Pointer<_NSZone> zone) {
    final _ret = _lib._objc_msgSend_3(
      _lib._class_NSHTTPCookie1,
      _lib._sel_allocWithZone_1,
      zone,
    );
    return NSHTTPCookie._(_ret, _lib, retain: false, release: true);
  }

  static NSHTTPCookie alloc(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSHTTPCookie1,
      _lib._sel_alloc1,
    );
    return NSHTTPCookie._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
    AVFAudio _lib,
    NSObject aTarget,
    ffi.Pointer<objc.ObjCSelector> aSelector,
    NSObject? anArgument,
  ) {
    _lib._objc_msgSend_14(
      _lib._class_NSHTTPCookie1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
      aTarget.pointer,
      aSelector,
      anArgument?.pointer ?? ffi.nullptr,
    );
  }

  static void cancelPreviousPerformRequestsWithTarget_(
    AVFAudio _lib,
    NSObject aTarget,
  ) {
    _lib._objc_msgSend_15(
      _lib._class_NSHTTPCookie1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_1,
      aTarget.pointer,
    );
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSHTTPCookie1,
      _lib._sel_accessInstanceVariablesDirectly1,
    );
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSHTTPCookie1,
      _lib._sel_useStoredAccessor1,
    );
  }

  static NSSet keyPathsForValuesAffectingValueForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    final _ret = _lib._objc_msgSend_63(
      _lib._class_NSHTTPCookie1,
      _lib._sel_keyPathsForValuesAffectingValueForKey_1,
      key.pointer,
    );
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    return _lib._objc_msgSend_64(
      _lib._class_NSHTTPCookie1,
      _lib._sel_automaticallyNotifiesObserversForKey_1,
      key.pointer,
    );
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
    AVFAudio _lib,
    NSArray keys,
    NSString dependentKey,
  ) {
    _lib._objc_msgSend_88(
      _lib._class_NSHTTPCookie1,
      _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
      keys.pointer,
      dependentKey.pointer,
    );
  }

  static NSArray classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_85(
      _lib._class_NSHTTPCookie1,
      _lib._sel_classFallbacksForKeyedArchiver1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSHTTPCookie1,
      _lib._sel_classForKeyedUnarchiver1,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

abstract class NSHTTPCookieAcceptPolicy {
  static const int NSHTTPCookieAcceptPolicyAlways = 0;
  static const int NSHTTPCookieAcceptPolicyNever = 1;
  static const int NSHTTPCookieAcceptPolicyOnlyFromMainDocumentDomain = 2;
}

class NSURLSessionTask extends NSObject {
  NSURLSessionTask._(
    ffi.Pointer<objc.ObjCObject> pointer,
    AVFAudio lib, {
    bool retain = false,
    bool release = false,
  }) : super._(pointer, lib, retain: retain, release: release);

  /// Returns a [NSURLSessionTask] that points to the same underlying object as [other].
  static NSURLSessionTask castFrom<T extends objc.ObjCObjectBase>(
    AVFAudio lib,
    T other,
  ) {
    return NSURLSessionTask._(other.pointer, lib, retain: true, release: true);
  }

  /// Returns a [NSURLSessionTask] that wraps the given raw object pointer.
  static NSURLSessionTask castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCObject> other, {
    bool retain = false,
    bool release = false,
  }) {
    return NSURLSessionTask._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSURLSessionTask].
  static bool isInstance(AVFAudio lib, objc.ObjCObjectBase obj) {
    return lib._objc_msgSend_0(
      obj.pointer,
      lib._sel_isKindOfClass_1,
      lib._class_NSURLSessionTask1,
    );
  }

  int get taskIdentifier {
    return _lib._objc_msgSend_10(this.pointer, _lib._sel_taskIdentifier1);
  }

  NSURLRequest? get originalRequest {
    final _ret = _lib._objc_msgSend_876(
      this.pointer,
      _lib._sel_originalRequest1,
    );
    return _ret.address == 0
        ? null
        : NSURLRequest._(_ret, _lib, retain: true, release: true);
  }

  NSURLRequest? get currentRequest {
    final _ret = _lib._objc_msgSend_876(
      this.pointer,
      _lib._sel_currentRequest1,
    );
    return _ret.address == 0
        ? null
        : NSURLRequest._(_ret, _lib, retain: true, release: true);
  }

  NSURLResponse? get response {
    final _ret = _lib._objc_msgSend_878(this.pointer, _lib._sel_response1);
    return _ret.address == 0
        ? null
        : NSURLResponse._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get delegate {
    final _ret = _lib._objc_msgSend_17(this.pointer, _lib._sel_delegate1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  set delegate(NSObject? value) {
    return _lib._objc_msgSend_416(
      this.pointer,
      _lib._sel_setDelegate_1,
      value?.pointer ?? ffi.nullptr,
    );
  }

  NSProgress get progress {
    final _ret = _lib._objc_msgSend_879(this.pointer, _lib._sel_progress1);
    return NSProgress._(_ret, _lib, retain: true, release: true);
  }

  NSDate? get earliestBeginDate {
    final _ret = _lib._objc_msgSend_183(
      this.pointer,
      _lib._sel_earliestBeginDate1,
    );
    return _ret.address == 0
        ? null
        : NSDate._(_ret, _lib, retain: true, release: true);
  }

  set earliestBeginDate(NSDate? value) {
    return _lib._objc_msgSend_800(
      this.pointer,
      _lib._sel_setEarliestBeginDate_1,
      value?.pointer ?? ffi.nullptr,
    );
  }

  int get countOfBytesClientExpectsToSend {
    return _lib._objc_msgSend_666(
      this.pointer,
      _lib._sel_countOfBytesClientExpectsToSend1,
    );
  }

  set countOfBytesClientExpectsToSend(int value) {
    return _lib._objc_msgSend_667(
      this.pointer,
      _lib._sel_setCountOfBytesClientExpectsToSend_1,
      value,
    );
  }

  int get countOfBytesClientExpectsToReceive {
    return _lib._objc_msgSend_666(
      this.pointer,
      _lib._sel_countOfBytesClientExpectsToReceive1,
    );
  }

  set countOfBytesClientExpectsToReceive(int value) {
    return _lib._objc_msgSend_667(
      this.pointer,
      _lib._sel_setCountOfBytesClientExpectsToReceive_1,
      value,
    );
  }

  int get countOfBytesSent {
    return _lib._objc_msgSend_666(this.pointer, _lib._sel_countOfBytesSent1);
  }

  int get countOfBytesReceived {
    return _lib._objc_msgSend_666(
      this.pointer,
      _lib._sel_countOfBytesReceived1,
    );
  }

  int get countOfBytesExpectedToSend {
    return _lib._objc_msgSend_666(
      this.pointer,
      _lib._sel_countOfBytesExpectedToSend1,
    );
  }

  int get countOfBytesExpectedToReceive {
    return _lib._objc_msgSend_666(
      this.pointer,
      _lib._sel_countOfBytesExpectedToReceive1,
    );
  }

  NSString? get taskDescription {
    final _ret = _lib._objc_msgSend_44(
      this.pointer,
      _lib._sel_taskDescription1,
    );
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  set taskDescription(NSString? value) {
    return _lib._objc_msgSend_545(
      this.pointer,
      _lib._sel_setTaskDescription_1,
      value?.pointer ?? ffi.nullptr,
    );
  }

  void cancel() {
    _lib._objc_msgSend_1(this.pointer, _lib._sel_cancel1);
  }

  int get state {
    return _lib._objc_msgSend_880(this.pointer, _lib._sel_state1);
  }

  NSError? get error {
    final _ret = _lib._objc_msgSend_322(this.pointer, _lib._sel_error1);
    return _ret.address == 0
        ? null
        : NSError._(_ret, _lib, retain: true, release: true);
  }

  void suspend() {
    _lib._objc_msgSend_1(this.pointer, _lib._sel_suspend1);
  }

  void resume() {
    _lib._objc_msgSend_1(this.pointer, _lib._sel_resume1);
  }

  double get priority {
    return objc.useMsgSendVariants
        ? _lib._objc_msgSend_239_fpret(this.pointer, _lib._sel_priority1)
        : _lib._objc_msgSend_239(this.pointer, _lib._sel_priority1);
  }

  set priority(double value) {
    return _lib._objc_msgSend_881(this.pointer, _lib._sel_setPriority_1, value);
  }

  bool get prefersIncrementalDelivery {
    return _lib._objc_msgSend_12(
      this.pointer,
      _lib._sel_prefersIncrementalDelivery1,
    );
  }

  set prefersIncrementalDelivery(bool value) {
    return _lib._objc_msgSend_527(
      this.pointer,
      _lib._sel_setPrefersIncrementalDelivery_1,
      value,
    );
  }

  @override
  NSURLSessionTask init() {
    final _ret = _lib._objc_msgSend_2(this.pointer, _lib._sel_init1);
    return NSURLSessionTask._(_ret, _lib, retain: true, release: true);
  }

  static NSURLSessionTask new1(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSURLSessionTask1,
      _lib._sel_new1,
    );
    return NSURLSessionTask._(_ret, _lib, retain: false, release: true);
  }

  static NSURLSessionTask allocWithZone_(
    AVFAudio _lib,
    ffi.Pointer<_NSZone> zone,
  ) {
    final _ret = _lib._objc_msgSend_3(
      _lib._class_NSURLSessionTask1,
      _lib._sel_allocWithZone_1,
      zone,
    );
    return NSURLSessionTask._(_ret, _lib, retain: false, release: true);
  }

  static NSURLSessionTask alloc(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSURLSessionTask1,
      _lib._sel_alloc1,
    );
    return NSURLSessionTask._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
    AVFAudio _lib,
    NSObject aTarget,
    ffi.Pointer<objc.ObjCSelector> aSelector,
    NSObject? anArgument,
  ) {
    _lib._objc_msgSend_14(
      _lib._class_NSURLSessionTask1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
      aTarget.pointer,
      aSelector,
      anArgument?.pointer ?? ffi.nullptr,
    );
  }

  static void cancelPreviousPerformRequestsWithTarget_(
    AVFAudio _lib,
    NSObject aTarget,
  ) {
    _lib._objc_msgSend_15(
      _lib._class_NSURLSessionTask1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_1,
      aTarget.pointer,
    );
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSURLSessionTask1,
      _lib._sel_accessInstanceVariablesDirectly1,
    );
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSURLSessionTask1,
      _lib._sel_useStoredAccessor1,
    );
  }

  static NSSet keyPathsForValuesAffectingValueForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    final _ret = _lib._objc_msgSend_63(
      _lib._class_NSURLSessionTask1,
      _lib._sel_keyPathsForValuesAffectingValueForKey_1,
      key.pointer,
    );
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    return _lib._objc_msgSend_64(
      _lib._class_NSURLSessionTask1,
      _lib._sel_automaticallyNotifiesObserversForKey_1,
      key.pointer,
    );
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
    AVFAudio _lib,
    NSArray keys,
    NSString dependentKey,
  ) {
    _lib._objc_msgSend_88(
      _lib._class_NSURLSessionTask1,
      _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
      keys.pointer,
      dependentKey.pointer,
    );
  }

  static NSArray classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_85(
      _lib._class_NSURLSessionTask1,
      _lib._sel_classFallbacksForKeyedArchiver1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSURLSessionTask1,
      _lib._sel_classForKeyedUnarchiver1,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

class NSURLRequest extends NSObject {
  NSURLRequest._(
    ffi.Pointer<objc.ObjCObject> pointer,
    AVFAudio lib, {
    bool retain = false,
    bool release = false,
  }) : super._(pointer, lib, retain: retain, release: release);

  /// Returns a [NSURLRequest] that points to the same underlying object as [other].
  static NSURLRequest castFrom<T extends objc.ObjCObjectBase>(
    AVFAudio lib,
    T other,
  ) {
    return NSURLRequest._(other.pointer, lib, retain: true, release: true);
  }

  /// Returns a [NSURLRequest] that wraps the given raw object pointer.
  static NSURLRequest castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCObject> other, {
    bool retain = false,
    bool release = false,
  }) {
    return NSURLRequest._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSURLRequest].
  static bool isInstance(AVFAudio lib, objc.ObjCObjectBase obj) {
    return lib._objc_msgSend_0(
      obj.pointer,
      lib._sel_isKindOfClass_1,
      lib._class_NSURLRequest1,
    );
  }

  static NSURLRequest requestWithURL_(AVFAudio _lib, NSURL URL) {
    final _ret = _lib._objc_msgSend_262(
      _lib._class_NSURLRequest1,
      _lib._sel_requestWithURL_1,
      URL.pointer,
    );
    return NSURLRequest._(_ret, _lib, retain: true, release: true);
  }

  static bool getSupportsSecureCoding(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSURLRequest1,
      _lib._sel_supportsSecureCoding1,
    );
  }

  static NSURLRequest requestWithURL_cachePolicy_timeoutInterval_(
    AVFAudio _lib,
    NSURL URL,
    int cachePolicy,
    double timeoutInterval,
  ) {
    final _ret = _lib._objc_msgSend_858(
      _lib._class_NSURLRequest1,
      _lib._sel_requestWithURL_cachePolicy_timeoutInterval_1,
      URL.pointer,
      cachePolicy,
      timeoutInterval,
    );
    return NSURLRequest._(_ret, _lib, retain: true, release: true);
  }

  NSURLRequest initWithURL_(NSURL URL) {
    final _ret = _lib._objc_msgSend_262(
      this.pointer,
      _lib._sel_initWithURL_1,
      URL.pointer,
    );
    return NSURLRequest._(_ret, _lib, retain: true, release: true);
  }

  NSURLRequest initWithURL_cachePolicy_timeoutInterval_(
    NSURL URL,
    int cachePolicy,
    double timeoutInterval,
  ) {
    final _ret = _lib._objc_msgSend_858(
      this.pointer,
      _lib._sel_initWithURL_cachePolicy_timeoutInterval_1,
      URL.pointer,
      cachePolicy,
      timeoutInterval,
    );
    return NSURLRequest._(_ret, _lib, retain: true, release: true);
  }

  NSURL? get URL {
    final _ret = _lib._objc_msgSend_45(this.pointer, _lib._sel_URL1);
    return _ret.address == 0
        ? null
        : NSURL._(_ret, _lib, retain: true, release: true);
  }

  int get cachePolicy {
    return _lib._objc_msgSend_859(this.pointer, _lib._sel_cachePolicy1);
  }

  double get timeoutInterval {
    return objc.useMsgSendVariants
        ? _lib._objc_msgSend_165_fpret(this.pointer, _lib._sel_timeoutInterval1)
        : _lib._objc_msgSend_165(this.pointer, _lib._sel_timeoutInterval1);
  }

  NSURL? get mainDocumentURL {
    final _ret = _lib._objc_msgSend_45(
      this.pointer,
      _lib._sel_mainDocumentURL1,
    );
    return _ret.address == 0
        ? null
        : NSURL._(_ret, _lib, retain: true, release: true);
  }

  int get networkServiceType {
    return _lib._objc_msgSend_860(this.pointer, _lib._sel_networkServiceType1);
  }

  bool get allowsCellularAccess {
    return _lib._objc_msgSend_12(this.pointer, _lib._sel_allowsCellularAccess1);
  }

  bool get allowsExpensiveNetworkAccess {
    return _lib._objc_msgSend_12(
      this.pointer,
      _lib._sel_allowsExpensiveNetworkAccess1,
    );
  }

  bool get allowsConstrainedNetworkAccess {
    return _lib._objc_msgSend_12(
      this.pointer,
      _lib._sel_allowsConstrainedNetworkAccess1,
    );
  }

  bool get assumesHTTP3Capable {
    return _lib._objc_msgSend_12(this.pointer, _lib._sel_assumesHTTP3Capable1);
  }

  int get attribution {
    return _lib._objc_msgSend_861(this.pointer, _lib._sel_attribution1);
  }

  bool get requiresDNSSECValidation {
    return _lib._objc_msgSend_12(
      this.pointer,
      _lib._sel_requiresDNSSECValidation1,
    );
  }

  NSString? get HTTPMethod {
    final _ret = _lib._objc_msgSend_44(this.pointer, _lib._sel_HTTPMethod1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSDictionary? get allHTTPHeaderFields {
    final _ret = _lib._objc_msgSend_390(
      this.pointer,
      _lib._sel_allHTTPHeaderFields1,
    );
    return _ret.address == 0
        ? null
        : NSDictionary._(_ret, _lib, retain: true, release: true);
  }

  NSString? valueForHTTPHeaderField_(NSString field) {
    final _ret = _lib._objc_msgSend_186(
      this.pointer,
      _lib._sel_valueForHTTPHeaderField_1,
      field.pointer,
    );
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSData? get HTTPBody {
    final _ret = _lib._objc_msgSend_286(this.pointer, _lib._sel_HTTPBody1);
    return _ret.address == 0
        ? null
        : NSData._(_ret, _lib, retain: true, release: true);
  }

  NSInputStream? get HTTPBodyStream {
    final _ret = _lib._objc_msgSend_875(
      this.pointer,
      _lib._sel_HTTPBodyStream1,
    );
    return _ret.address == 0
        ? null
        : NSInputStream._(_ret, _lib, retain: true, release: true);
  }

  bool get HTTPShouldHandleCookies {
    return _lib._objc_msgSend_12(
      this.pointer,
      _lib._sel_HTTPShouldHandleCookies1,
    );
  }

  bool get HTTPShouldUsePipelining {
    return _lib._objc_msgSend_12(
      this.pointer,
      _lib._sel_HTTPShouldUsePipelining1,
    );
  }

  @override
  NSURLRequest init() {
    final _ret = _lib._objc_msgSend_2(this.pointer, _lib._sel_init1);
    return NSURLRequest._(_ret, _lib, retain: true, release: true);
  }

  static NSURLRequest new1(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSURLRequest1,
      _lib._sel_new1,
    );
    return NSURLRequest._(_ret, _lib, retain: false, release: true);
  }

  static NSURLRequest allocWithZone_(AVFAudio _lib, ffi.Pointer<_NSZone> zone) {
    final _ret = _lib._objc_msgSend_3(
      _lib._class_NSURLRequest1,
      _lib._sel_allocWithZone_1,
      zone,
    );
    return NSURLRequest._(_ret, _lib, retain: false, release: true);
  }

  static NSURLRequest alloc(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSURLRequest1,
      _lib._sel_alloc1,
    );
    return NSURLRequest._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
    AVFAudio _lib,
    NSObject aTarget,
    ffi.Pointer<objc.ObjCSelector> aSelector,
    NSObject? anArgument,
  ) {
    _lib._objc_msgSend_14(
      _lib._class_NSURLRequest1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
      aTarget.pointer,
      aSelector,
      anArgument?.pointer ?? ffi.nullptr,
    );
  }

  static void cancelPreviousPerformRequestsWithTarget_(
    AVFAudio _lib,
    NSObject aTarget,
  ) {
    _lib._objc_msgSend_15(
      _lib._class_NSURLRequest1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_1,
      aTarget.pointer,
    );
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSURLRequest1,
      _lib._sel_accessInstanceVariablesDirectly1,
    );
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSURLRequest1,
      _lib._sel_useStoredAccessor1,
    );
  }

  static NSSet keyPathsForValuesAffectingValueForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    final _ret = _lib._objc_msgSend_63(
      _lib._class_NSURLRequest1,
      _lib._sel_keyPathsForValuesAffectingValueForKey_1,
      key.pointer,
    );
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    return _lib._objc_msgSend_64(
      _lib._class_NSURLRequest1,
      _lib._sel_automaticallyNotifiesObserversForKey_1,
      key.pointer,
    );
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
    AVFAudio _lib,
    NSArray keys,
    NSString dependentKey,
  ) {
    _lib._objc_msgSend_88(
      _lib._class_NSURLRequest1,
      _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
      keys.pointer,
      dependentKey.pointer,
    );
  }

  static NSArray classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_85(
      _lib._class_NSURLRequest1,
      _lib._sel_classFallbacksForKeyedArchiver1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSURLRequest1,
      _lib._sel_classForKeyedUnarchiver1,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

abstract class NSURLRequestCachePolicy {
  static const int NSURLRequestUseProtocolCachePolicy = 0;
  static const int NSURLRequestReloadIgnoringLocalCacheData = 1;
  static const int NSURLRequestReloadIgnoringLocalAndRemoteCacheData = 4;
  static const int NSURLRequestReloadIgnoringCacheData = 1;
  static const int NSURLRequestReturnCacheDataElseLoad = 2;
  static const int NSURLRequestReturnCacheDataDontLoad = 3;
  static const int NSURLRequestReloadRevalidatingCacheData = 5;
}

abstract class NSURLRequestNetworkServiceType {
  static const int NSURLNetworkServiceTypeDefault = 0;
  static const int NSURLNetworkServiceTypeVoIP = 1;
  static const int NSURLNetworkServiceTypeVideo = 2;
  static const int NSURLNetworkServiceTypeBackground = 3;
  static const int NSURLNetworkServiceTypeVoice = 4;
  static const int NSURLNetworkServiceTypeResponsiveData = 6;
  static const int NSURLNetworkServiceTypeAVStreaming = 8;
  static const int NSURLNetworkServiceTypeResponsiveAV = 9;
  static const int NSURLNetworkServiceTypeCallSignaling = 11;
}

abstract class NSURLRequestAttribution {
  static const int NSURLRequestAttributionDeveloper = 0;
  static const int NSURLRequestAttributionUser = 1;
}

class NSInputStream extends NSStream {
  NSInputStream._(
    ffi.Pointer<objc.ObjCObject> pointer,
    AVFAudio lib, {
    bool retain = false,
    bool release = false,
  }) : super._(pointer, lib, retain: retain, release: release);

  /// Returns a [NSInputStream] that points to the same underlying object as [other].
  static NSInputStream castFrom<T extends objc.ObjCObjectBase>(
    AVFAudio lib,
    T other,
  ) {
    return NSInputStream._(other.pointer, lib, retain: true, release: true);
  }

  /// Returns a [NSInputStream] that wraps the given raw object pointer.
  static NSInputStream castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCObject> other, {
    bool retain = false,
    bool release = false,
  }) {
    return NSInputStream._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSInputStream].
  static bool isInstance(AVFAudio lib, objc.ObjCObjectBase obj) {
    return lib._objc_msgSend_0(
      obj.pointer,
      lib._sel_isKindOfClass_1,
      lib._class_NSInputStream1,
    );
  }

  int read_maxLength_(ffi.Pointer<ffi.Uint8> buffer, int len) {
    return _lib._objc_msgSend_864(
      this.pointer,
      _lib._sel_read_maxLength_1,
      buffer,
      len,
    );
  }

  bool getBuffer_length_(
    ffi.Pointer<ffi.Pointer<ffi.Uint8>> buffer,
    ffi.Pointer<ffi.UnsignedLong> len,
  ) {
    return _lib._objc_msgSend_873(
      this.pointer,
      _lib._sel_getBuffer_length_1,
      buffer,
      len,
    );
  }

  bool get hasBytesAvailable {
    return _lib._objc_msgSend_12(this.pointer, _lib._sel_hasBytesAvailable1);
  }

  NSInputStream initWithData_(NSData data) {
    final _ret = _lib._objc_msgSend_279(
      this.pointer,
      _lib._sel_initWithData_1,
      data.pointer,
    );
    return NSInputStream._(_ret, _lib, retain: true, release: true);
  }

  NSInputStream? initWithURL_(NSURL url) {
    final _ret = _lib._objc_msgSend_277(
      this.pointer,
      _lib._sel_initWithURL_1,
      url.pointer,
    );
    return _ret.address == 0
        ? null
        : NSInputStream._(_ret, _lib, retain: true, release: true);
  }

  NSInputStream? initWithFileAtPath_(NSString path) {
    final _ret = _lib._objc_msgSend_38(
      this.pointer,
      _lib._sel_initWithFileAtPath_1,
      path.pointer,
    );
    return _ret.address == 0
        ? null
        : NSInputStream._(_ret, _lib, retain: true, release: true);
  }

  static NSInputStream? inputStreamWithData_(AVFAudio _lib, NSData data) {
    final _ret = _lib._objc_msgSend_874(
      _lib._class_NSInputStream1,
      _lib._sel_inputStreamWithData_1,
      data.pointer,
    );
    return _ret.address == 0
        ? null
        : NSInputStream._(_ret, _lib, retain: true, release: true);
  }

  static NSInputStream? inputStreamWithFileAtPath_(
    AVFAudio _lib,
    NSString path,
  ) {
    final _ret = _lib._objc_msgSend_38(
      _lib._class_NSInputStream1,
      _lib._sel_inputStreamWithFileAtPath_1,
      path.pointer,
    );
    return _ret.address == 0
        ? null
        : NSInputStream._(_ret, _lib, retain: true, release: true);
  }

  static NSInputStream? inputStreamWithURL_(AVFAudio _lib, NSURL url) {
    final _ret = _lib._objc_msgSend_277(
      _lib._class_NSInputStream1,
      _lib._sel_inputStreamWithURL_1,
      url.pointer,
    );
    return _ret.address == 0
        ? null
        : NSInputStream._(_ret, _lib, retain: true, release: true);
  }

  static void getStreamsToHostWithName_port_inputStream_outputStream_(
    AVFAudio _lib,
    NSString hostname,
    int port,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> inputStream,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outputStream,
  ) {
    _lib._objc_msgSend_867(
      _lib._class_NSInputStream1,
      _lib._sel_getStreamsToHostWithName_port_inputStream_outputStream_1,
      hostname.pointer,
      port,
      inputStream,
      outputStream,
    );
  }

  static void getStreamsToHost_port_inputStream_outputStream_(
    AVFAudio _lib,
    NSHost host,
    int port,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> inputStream,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outputStream,
  ) {
    _lib._objc_msgSend_871(
      _lib._class_NSInputStream1,
      _lib._sel_getStreamsToHost_port_inputStream_outputStream_1,
      host.pointer,
      port,
      inputStream,
      outputStream,
    );
  }

  static void getBoundStreamsWithBufferSize_inputStream_outputStream_(
    AVFAudio _lib,
    int bufferSize,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> inputStream,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outputStream,
  ) {
    _lib._objc_msgSend_872(
      _lib._class_NSInputStream1,
      _lib._sel_getBoundStreamsWithBufferSize_inputStream_outputStream_1,
      bufferSize,
      inputStream,
      outputStream,
    );
  }

  @override
  NSInputStream init() {
    final _ret = _lib._objc_msgSend_2(this.pointer, _lib._sel_init1);
    return NSInputStream._(_ret, _lib, retain: true, release: true);
  }

  static NSInputStream new1(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSInputStream1,
      _lib._sel_new1,
    );
    return NSInputStream._(_ret, _lib, retain: false, release: true);
  }

  static NSInputStream allocWithZone_(
    AVFAudio _lib,
    ffi.Pointer<_NSZone> zone,
  ) {
    final _ret = _lib._objc_msgSend_3(
      _lib._class_NSInputStream1,
      _lib._sel_allocWithZone_1,
      zone,
    );
    return NSInputStream._(_ret, _lib, retain: false, release: true);
  }

  static NSInputStream alloc(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSInputStream1,
      _lib._sel_alloc1,
    );
    return NSInputStream._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
    AVFAudio _lib,
    NSObject aTarget,
    ffi.Pointer<objc.ObjCSelector> aSelector,
    NSObject? anArgument,
  ) {
    _lib._objc_msgSend_14(
      _lib._class_NSInputStream1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
      aTarget.pointer,
      aSelector,
      anArgument?.pointer ?? ffi.nullptr,
    );
  }

  static void cancelPreviousPerformRequestsWithTarget_(
    AVFAudio _lib,
    NSObject aTarget,
  ) {
    _lib._objc_msgSend_15(
      _lib._class_NSInputStream1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_1,
      aTarget.pointer,
    );
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSInputStream1,
      _lib._sel_accessInstanceVariablesDirectly1,
    );
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSInputStream1,
      _lib._sel_useStoredAccessor1,
    );
  }

  static NSSet keyPathsForValuesAffectingValueForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    final _ret = _lib._objc_msgSend_63(
      _lib._class_NSInputStream1,
      _lib._sel_keyPathsForValuesAffectingValueForKey_1,
      key.pointer,
    );
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    return _lib._objc_msgSend_64(
      _lib._class_NSInputStream1,
      _lib._sel_automaticallyNotifiesObserversForKey_1,
      key.pointer,
    );
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
    AVFAudio _lib,
    NSArray keys,
    NSString dependentKey,
  ) {
    _lib._objc_msgSend_88(
      _lib._class_NSInputStream1,
      _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
      keys.pointer,
      dependentKey.pointer,
    );
  }

  static NSArray classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_85(
      _lib._class_NSInputStream1,
      _lib._sel_classFallbacksForKeyedArchiver1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSInputStream1,
      _lib._sel_classForKeyedUnarchiver1,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

class NSStream extends NSObject {
  NSStream._(
    ffi.Pointer<objc.ObjCObject> pointer,
    AVFAudio lib, {
    bool retain = false,
    bool release = false,
  }) : super._(pointer, lib, retain: retain, release: release);

  /// Returns a [NSStream] that points to the same underlying object as [other].
  static NSStream castFrom<T extends objc.ObjCObjectBase>(
    AVFAudio lib,
    T other,
  ) {
    return NSStream._(other.pointer, lib, retain: true, release: true);
  }

  /// Returns a [NSStream] that wraps the given raw object pointer.
  static NSStream castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCObject> other, {
    bool retain = false,
    bool release = false,
  }) {
    return NSStream._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSStream].
  static bool isInstance(AVFAudio lib, objc.ObjCObjectBase obj) {
    return lib._objc_msgSend_0(
      obj.pointer,
      lib._sel_isKindOfClass_1,
      lib._class_NSStream1,
    );
  }

  void open() {
    _lib._objc_msgSend_1(this.pointer, _lib._sel_open1);
  }

  void close() {
    _lib._objc_msgSend_1(this.pointer, _lib._sel_close1);
  }

  NSObject? get delegate {
    final _ret = _lib._objc_msgSend_17(this.pointer, _lib._sel_delegate1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  set delegate(NSObject? value) {
    return _lib._objc_msgSend_416(
      this.pointer,
      _lib._sel_setDelegate_1,
      value?.pointer ?? ffi.nullptr,
    );
  }

  NSObject? propertyForKey_(NSString key) {
    final _ret = _lib._objc_msgSend_38(
      this.pointer,
      _lib._sel_propertyForKey_1,
      key.pointer,
    );
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  bool setProperty_forKey_(NSObject? property, NSString key) {
    return _lib._objc_msgSend_862(
      this.pointer,
      _lib._sel_setProperty_forKey_1,
      property?.pointer ?? ffi.nullptr,
      key.pointer,
    );
  }

  void scheduleInRunLoop_forMode_(NSRunLoop aRunLoop, NSString mode) {
    _lib._objc_msgSend_569(
      this.pointer,
      _lib._sel_scheduleInRunLoop_forMode_1,
      aRunLoop.pointer,
      mode.pointer,
    );
  }

  void removeFromRunLoop_forMode_(NSRunLoop aRunLoop, NSString mode) {
    _lib._objc_msgSend_569(
      this.pointer,
      _lib._sel_removeFromRunLoop_forMode_1,
      aRunLoop.pointer,
      mode.pointer,
    );
  }

  int get streamStatus {
    return _lib._objc_msgSend_863(this.pointer, _lib._sel_streamStatus1);
  }

  NSError? get streamError {
    final _ret = _lib._objc_msgSend_322(this.pointer, _lib._sel_streamError1);
    return _ret.address == 0
        ? null
        : NSError._(_ret, _lib, retain: true, release: true);
  }

  static void getStreamsToHostWithName_port_inputStream_outputStream_(
    AVFAudio _lib,
    NSString hostname,
    int port,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> inputStream,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outputStream,
  ) {
    _lib._objc_msgSend_867(
      _lib._class_NSStream1,
      _lib._sel_getStreamsToHostWithName_port_inputStream_outputStream_1,
      hostname.pointer,
      port,
      inputStream,
      outputStream,
    );
  }

  static void getStreamsToHost_port_inputStream_outputStream_(
    AVFAudio _lib,
    NSHost host,
    int port,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> inputStream,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outputStream,
  ) {
    _lib._objc_msgSend_871(
      _lib._class_NSStream1,
      _lib._sel_getStreamsToHost_port_inputStream_outputStream_1,
      host.pointer,
      port,
      inputStream,
      outputStream,
    );
  }

  static void getBoundStreamsWithBufferSize_inputStream_outputStream_(
    AVFAudio _lib,
    int bufferSize,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> inputStream,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outputStream,
  ) {
    _lib._objc_msgSend_872(
      _lib._class_NSStream1,
      _lib._sel_getBoundStreamsWithBufferSize_inputStream_outputStream_1,
      bufferSize,
      inputStream,
      outputStream,
    );
  }

  @override
  NSStream init() {
    final _ret = _lib._objc_msgSend_2(this.pointer, _lib._sel_init1);
    return NSStream._(_ret, _lib, retain: true, release: true);
  }

  static NSStream new1(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSStream1, _lib._sel_new1);
    return NSStream._(_ret, _lib, retain: false, release: true);
  }

  static NSStream allocWithZone_(AVFAudio _lib, ffi.Pointer<_NSZone> zone) {
    final _ret = _lib._objc_msgSend_3(
      _lib._class_NSStream1,
      _lib._sel_allocWithZone_1,
      zone,
    );
    return NSStream._(_ret, _lib, retain: false, release: true);
  }

  static NSStream alloc(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSStream1, _lib._sel_alloc1);
    return NSStream._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
    AVFAudio _lib,
    NSObject aTarget,
    ffi.Pointer<objc.ObjCSelector> aSelector,
    NSObject? anArgument,
  ) {
    _lib._objc_msgSend_14(
      _lib._class_NSStream1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
      aTarget.pointer,
      aSelector,
      anArgument?.pointer ?? ffi.nullptr,
    );
  }

  static void cancelPreviousPerformRequestsWithTarget_(
    AVFAudio _lib,
    NSObject aTarget,
  ) {
    _lib._objc_msgSend_15(
      _lib._class_NSStream1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_1,
      aTarget.pointer,
    );
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSStream1,
      _lib._sel_accessInstanceVariablesDirectly1,
    );
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSStream1,
      _lib._sel_useStoredAccessor1,
    );
  }

  static NSSet keyPathsForValuesAffectingValueForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    final _ret = _lib._objc_msgSend_63(
      _lib._class_NSStream1,
      _lib._sel_keyPathsForValuesAffectingValueForKey_1,
      key.pointer,
    );
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    return _lib._objc_msgSend_64(
      _lib._class_NSStream1,
      _lib._sel_automaticallyNotifiesObserversForKey_1,
      key.pointer,
    );
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
    AVFAudio _lib,
    NSArray keys,
    NSString dependentKey,
  ) {
    _lib._objc_msgSend_88(
      _lib._class_NSStream1,
      _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
      keys.pointer,
      dependentKey.pointer,
    );
  }

  static NSArray classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_85(
      _lib._class_NSStream1,
      _lib._sel_classFallbacksForKeyedArchiver1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSStream1,
      _lib._sel_classForKeyedUnarchiver1,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

abstract class NSStreamStatus {
  static const int NSStreamStatusNotOpen = 0;
  static const int NSStreamStatusOpening = 1;
  static const int NSStreamStatusOpen = 2;
  static const int NSStreamStatusReading = 3;
  static const int NSStreamStatusWriting = 4;
  static const int NSStreamStatusAtEnd = 5;
  static const int NSStreamStatusClosed = 6;
  static const int NSStreamStatusError = 7;
}

class NSOutputStream extends NSStream {
  NSOutputStream._(
    ffi.Pointer<objc.ObjCObject> pointer,
    AVFAudio lib, {
    bool retain = false,
    bool release = false,
  }) : super._(pointer, lib, retain: retain, release: release);

  /// Returns a [NSOutputStream] that points to the same underlying object as [other].
  static NSOutputStream castFrom<T extends objc.ObjCObjectBase>(
    AVFAudio lib,
    T other,
  ) {
    return NSOutputStream._(other.pointer, lib, retain: true, release: true);
  }

  /// Returns a [NSOutputStream] that wraps the given raw object pointer.
  static NSOutputStream castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCObject> other, {
    bool retain = false,
    bool release = false,
  }) {
    return NSOutputStream._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSOutputStream].
  static bool isInstance(AVFAudio lib, objc.ObjCObjectBase obj) {
    return lib._objc_msgSend_0(
      obj.pointer,
      lib._sel_isKindOfClass_1,
      lib._class_NSOutputStream1,
    );
  }

  int write_maxLength_(ffi.Pointer<ffi.Uint8> buffer, int len) {
    return _lib._objc_msgSend_864(
      this.pointer,
      _lib._sel_write_maxLength_1,
      buffer,
      len,
    );
  }

  bool get hasSpaceAvailable {
    return _lib._objc_msgSend_12(this.pointer, _lib._sel_hasSpaceAvailable1);
  }

  NSOutputStream initToMemory() {
    final _ret = _lib._objc_msgSend_2(this.pointer, _lib._sel_initToMemory1);
    return NSOutputStream._(_ret, _lib, retain: true, release: true);
  }

  NSOutputStream initToBuffer_capacity_(
    ffi.Pointer<ffi.Uint8> buffer,
    int capacity,
  ) {
    final _ret = _lib._objc_msgSend_865(
      this.pointer,
      _lib._sel_initToBuffer_capacity_1,
      buffer,
      capacity,
    );
    return NSOutputStream._(_ret, _lib, retain: true, release: true);
  }

  NSOutputStream? initWithURL_append_(NSURL url, bool shouldAppend) {
    final _ret = _lib._objc_msgSend_866(
      this.pointer,
      _lib._sel_initWithURL_append_1,
      url.pointer,
      shouldAppend,
    );
    return _ret.address == 0
        ? null
        : NSOutputStream._(_ret, _lib, retain: true, release: true);
  }

  NSOutputStream? initToFileAtPath_append_(NSString path, bool shouldAppend) {
    final _ret = _lib._objc_msgSend_40(
      this.pointer,
      _lib._sel_initToFileAtPath_append_1,
      path.pointer,
      shouldAppend,
    );
    return _ret.address == 0
        ? null
        : NSOutputStream._(_ret, _lib, retain: true, release: true);
  }

  static NSOutputStream outputStreamToMemory(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSOutputStream1,
      _lib._sel_outputStreamToMemory1,
    );
    return NSOutputStream._(_ret, _lib, retain: true, release: true);
  }

  static NSOutputStream outputStreamToBuffer_capacity_(
    AVFAudio _lib,
    ffi.Pointer<ffi.Uint8> buffer,
    int capacity,
  ) {
    final _ret = _lib._objc_msgSend_865(
      _lib._class_NSOutputStream1,
      _lib._sel_outputStreamToBuffer_capacity_1,
      buffer,
      capacity,
    );
    return NSOutputStream._(_ret, _lib, retain: true, release: true);
  }

  static NSOutputStream outputStreamToFileAtPath_append_(
    AVFAudio _lib,
    NSString path,
    bool shouldAppend,
  ) {
    final _ret = _lib._objc_msgSend_30(
      _lib._class_NSOutputStream1,
      _lib._sel_outputStreamToFileAtPath_append_1,
      path.pointer,
      shouldAppend,
    );
    return NSOutputStream._(_ret, _lib, retain: true, release: true);
  }

  static NSOutputStream? outputStreamWithURL_append_(
    AVFAudio _lib,
    NSURL url,
    bool shouldAppend,
  ) {
    final _ret = _lib._objc_msgSend_866(
      _lib._class_NSOutputStream1,
      _lib._sel_outputStreamWithURL_append_1,
      url.pointer,
      shouldAppend,
    );
    return _ret.address == 0
        ? null
        : NSOutputStream._(_ret, _lib, retain: true, release: true);
  }

  static void getStreamsToHostWithName_port_inputStream_outputStream_(
    AVFAudio _lib,
    NSString hostname,
    int port,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> inputStream,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outputStream,
  ) {
    _lib._objc_msgSend_867(
      _lib._class_NSOutputStream1,
      _lib._sel_getStreamsToHostWithName_port_inputStream_outputStream_1,
      hostname.pointer,
      port,
      inputStream,
      outputStream,
    );
  }

  static void getStreamsToHost_port_inputStream_outputStream_(
    AVFAudio _lib,
    NSHost host,
    int port,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> inputStream,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outputStream,
  ) {
    _lib._objc_msgSend_871(
      _lib._class_NSOutputStream1,
      _lib._sel_getStreamsToHost_port_inputStream_outputStream_1,
      host.pointer,
      port,
      inputStream,
      outputStream,
    );
  }

  static void getBoundStreamsWithBufferSize_inputStream_outputStream_(
    AVFAudio _lib,
    int bufferSize,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> inputStream,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outputStream,
  ) {
    _lib._objc_msgSend_872(
      _lib._class_NSOutputStream1,
      _lib._sel_getBoundStreamsWithBufferSize_inputStream_outputStream_1,
      bufferSize,
      inputStream,
      outputStream,
    );
  }

  @override
  NSOutputStream init() {
    final _ret = _lib._objc_msgSend_2(this.pointer, _lib._sel_init1);
    return NSOutputStream._(_ret, _lib, retain: true, release: true);
  }

  static NSOutputStream new1(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSOutputStream1,
      _lib._sel_new1,
    );
    return NSOutputStream._(_ret, _lib, retain: false, release: true);
  }

  static NSOutputStream allocWithZone_(
    AVFAudio _lib,
    ffi.Pointer<_NSZone> zone,
  ) {
    final _ret = _lib._objc_msgSend_3(
      _lib._class_NSOutputStream1,
      _lib._sel_allocWithZone_1,
      zone,
    );
    return NSOutputStream._(_ret, _lib, retain: false, release: true);
  }

  static NSOutputStream alloc(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSOutputStream1,
      _lib._sel_alloc1,
    );
    return NSOutputStream._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
    AVFAudio _lib,
    NSObject aTarget,
    ffi.Pointer<objc.ObjCSelector> aSelector,
    NSObject? anArgument,
  ) {
    _lib._objc_msgSend_14(
      _lib._class_NSOutputStream1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
      aTarget.pointer,
      aSelector,
      anArgument?.pointer ?? ffi.nullptr,
    );
  }

  static void cancelPreviousPerformRequestsWithTarget_(
    AVFAudio _lib,
    NSObject aTarget,
  ) {
    _lib._objc_msgSend_15(
      _lib._class_NSOutputStream1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_1,
      aTarget.pointer,
    );
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSOutputStream1,
      _lib._sel_accessInstanceVariablesDirectly1,
    );
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSOutputStream1,
      _lib._sel_useStoredAccessor1,
    );
  }

  static NSSet keyPathsForValuesAffectingValueForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    final _ret = _lib._objc_msgSend_63(
      _lib._class_NSOutputStream1,
      _lib._sel_keyPathsForValuesAffectingValueForKey_1,
      key.pointer,
    );
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    return _lib._objc_msgSend_64(
      _lib._class_NSOutputStream1,
      _lib._sel_automaticallyNotifiesObserversForKey_1,
      key.pointer,
    );
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
    AVFAudio _lib,
    NSArray keys,
    NSString dependentKey,
  ) {
    _lib._objc_msgSend_88(
      _lib._class_NSOutputStream1,
      _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
      keys.pointer,
      dependentKey.pointer,
    );
  }

  static NSArray classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_85(
      _lib._class_NSOutputStream1,
      _lib._sel_classFallbacksForKeyedArchiver1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSOutputStream1,
      _lib._sel_classForKeyedUnarchiver1,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

class NSHost extends NSObject {
  NSHost._(
    ffi.Pointer<objc.ObjCObject> pointer,
    AVFAudio lib, {
    bool retain = false,
    bool release = false,
  }) : super._(pointer, lib, retain: retain, release: release);

  /// Returns a [NSHost] that points to the same underlying object as [other].
  static NSHost castFrom<T extends objc.ObjCObjectBase>(AVFAudio lib, T other) {
    return NSHost._(other.pointer, lib, retain: true, release: true);
  }

  /// Returns a [NSHost] that wraps the given raw object pointer.
  static NSHost castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCObject> other, {
    bool retain = false,
    bool release = false,
  }) {
    return NSHost._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSHost].
  static bool isInstance(AVFAudio lib, objc.ObjCObjectBase obj) {
    return lib._objc_msgSend_0(
      obj.pointer,
      lib._sel_isKindOfClass_1,
      lib._class_NSHost1,
    );
  }

  static NSHost currentHost(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSHost1,
      _lib._sel_currentHost1,
    );
    return NSHost._(_ret, _lib, retain: true, release: true);
  }

  static NSHost hostWithName_(AVFAudio _lib, NSString? name) {
    final _ret = _lib._objc_msgSend_868(
      _lib._class_NSHost1,
      _lib._sel_hostWithName_1,
      name?.pointer ?? ffi.nullptr,
    );
    return NSHost._(_ret, _lib, retain: true, release: true);
  }

  static NSHost hostWithAddress_(AVFAudio _lib, NSString address) {
    final _ret = _lib._objc_msgSend_31(
      _lib._class_NSHost1,
      _lib._sel_hostWithAddress_1,
      address.pointer,
    );
    return NSHost._(_ret, _lib, retain: true, release: true);
  }

  bool isEqualToHost_(NSHost aHost) {
    return _lib._objc_msgSend_869(
      this.pointer,
      _lib._sel_isEqualToHost_1,
      aHost.pointer,
    );
  }

  NSString? get name {
    final _ret = _lib._objc_msgSend_44(this.pointer, _lib._sel_name1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSArray get names {
    final _ret = _lib._objc_msgSend_85(this.pointer, _lib._sel_names1);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSString? get address {
    final _ret = _lib._objc_msgSend_44(this.pointer, _lib._sel_address1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSArray get addresses {
    final _ret = _lib._objc_msgSend_85(this.pointer, _lib._sel_addresses1);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSString? get localizedName {
    final _ret = _lib._objc_msgSend_44(this.pointer, _lib._sel_localizedName1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  static void setHostCacheEnabled_(AVFAudio _lib, bool flag) {
    _lib._objc_msgSend_870(
      _lib._class_NSHost1,
      _lib._sel_setHostCacheEnabled_1,
      flag,
    );
  }

  static bool isHostCacheEnabled(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSHost1,
      _lib._sel_isHostCacheEnabled1,
    );
  }

  static void flushHostCache(AVFAudio _lib) {
    _lib._objc_msgSend_1(_lib._class_NSHost1, _lib._sel_flushHostCache1);
  }

  @override
  NSHost init() {
    final _ret = _lib._objc_msgSend_2(this.pointer, _lib._sel_init1);
    return NSHost._(_ret, _lib, retain: true, release: true);
  }

  static NSHost new1(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSHost1, _lib._sel_new1);
    return NSHost._(_ret, _lib, retain: false, release: true);
  }

  static NSHost allocWithZone_(AVFAudio _lib, ffi.Pointer<_NSZone> zone) {
    final _ret = _lib._objc_msgSend_3(
      _lib._class_NSHost1,
      _lib._sel_allocWithZone_1,
      zone,
    );
    return NSHost._(_ret, _lib, retain: false, release: true);
  }

  static NSHost alloc(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSHost1, _lib._sel_alloc1);
    return NSHost._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
    AVFAudio _lib,
    NSObject aTarget,
    ffi.Pointer<objc.ObjCSelector> aSelector,
    NSObject? anArgument,
  ) {
    _lib._objc_msgSend_14(
      _lib._class_NSHost1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
      aTarget.pointer,
      aSelector,
      anArgument?.pointer ?? ffi.nullptr,
    );
  }

  static void cancelPreviousPerformRequestsWithTarget_(
    AVFAudio _lib,
    NSObject aTarget,
  ) {
    _lib._objc_msgSend_15(
      _lib._class_NSHost1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_1,
      aTarget.pointer,
    );
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSHost1,
      _lib._sel_accessInstanceVariablesDirectly1,
    );
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSHost1,
      _lib._sel_useStoredAccessor1,
    );
  }

  static NSSet keyPathsForValuesAffectingValueForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    final _ret = _lib._objc_msgSend_63(
      _lib._class_NSHost1,
      _lib._sel_keyPathsForValuesAffectingValueForKey_1,
      key.pointer,
    );
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    return _lib._objc_msgSend_64(
      _lib._class_NSHost1,
      _lib._sel_automaticallyNotifiesObserversForKey_1,
      key.pointer,
    );
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
    AVFAudio _lib,
    NSArray keys,
    NSString dependentKey,
  ) {
    _lib._objc_msgSend_88(
      _lib._class_NSHost1,
      _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
      keys.pointer,
      dependentKey.pointer,
    );
  }

  static NSArray classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_85(
      _lib._class_NSHost1,
      _lib._sel_classFallbacksForKeyedArchiver1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSHost1,
      _lib._sel_classForKeyedUnarchiver1,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

class NSURLResponse extends NSObject {
  NSURLResponse._(
    ffi.Pointer<objc.ObjCObject> pointer,
    AVFAudio lib, {
    bool retain = false,
    bool release = false,
  }) : super._(pointer, lib, retain: retain, release: release);

  /// Returns a [NSURLResponse] that points to the same underlying object as [other].
  static NSURLResponse castFrom<T extends objc.ObjCObjectBase>(
    AVFAudio lib,
    T other,
  ) {
    return NSURLResponse._(other.pointer, lib, retain: true, release: true);
  }

  /// Returns a [NSURLResponse] that wraps the given raw object pointer.
  static NSURLResponse castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCObject> other, {
    bool retain = false,
    bool release = false,
  }) {
    return NSURLResponse._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSURLResponse].
  static bool isInstance(AVFAudio lib, objc.ObjCObjectBase obj) {
    return lib._objc_msgSend_0(
      obj.pointer,
      lib._sel_isKindOfClass_1,
      lib._class_NSURLResponse1,
    );
  }

  NSURLResponse initWithURL_MIMEType_expectedContentLength_textEncodingName_(
    NSURL URL,
    NSString? MIMEType,
    int length,
    NSString? name,
  ) {
    final _ret = _lib._objc_msgSend_877(
      this.pointer,
      _lib._sel_initWithURL_MIMEType_expectedContentLength_textEncodingName_1,
      URL.pointer,
      MIMEType?.pointer ?? ffi.nullptr,
      length,
      name?.pointer ?? ffi.nullptr,
    );
    return NSURLResponse._(_ret, _lib, retain: true, release: true);
  }

  NSURL? get URL {
    final _ret = _lib._objc_msgSend_45(this.pointer, _lib._sel_URL1);
    return _ret.address == 0
        ? null
        : NSURL._(_ret, _lib, retain: true, release: true);
  }

  NSString? get MIMEType {
    final _ret = _lib._objc_msgSend_44(this.pointer, _lib._sel_MIMEType1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  int get expectedContentLength {
    return _lib._objc_msgSend_238(
      this.pointer,
      _lib._sel_expectedContentLength1,
    );
  }

  NSString? get textEncodingName {
    final _ret = _lib._objc_msgSend_44(
      this.pointer,
      _lib._sel_textEncodingName1,
    );
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString? get suggestedFilename {
    final _ret = _lib._objc_msgSend_44(
      this.pointer,
      _lib._sel_suggestedFilename1,
    );
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSURLResponse init() {
    final _ret = _lib._objc_msgSend_2(this.pointer, _lib._sel_init1);
    return NSURLResponse._(_ret, _lib, retain: true, release: true);
  }

  static NSURLResponse new1(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSURLResponse1,
      _lib._sel_new1,
    );
    return NSURLResponse._(_ret, _lib, retain: false, release: true);
  }

  static NSURLResponse allocWithZone_(
    AVFAudio _lib,
    ffi.Pointer<_NSZone> zone,
  ) {
    final _ret = _lib._objc_msgSend_3(
      _lib._class_NSURLResponse1,
      _lib._sel_allocWithZone_1,
      zone,
    );
    return NSURLResponse._(_ret, _lib, retain: false, release: true);
  }

  static NSURLResponse alloc(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSURLResponse1,
      _lib._sel_alloc1,
    );
    return NSURLResponse._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
    AVFAudio _lib,
    NSObject aTarget,
    ffi.Pointer<objc.ObjCSelector> aSelector,
    NSObject? anArgument,
  ) {
    _lib._objc_msgSend_14(
      _lib._class_NSURLResponse1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
      aTarget.pointer,
      aSelector,
      anArgument?.pointer ?? ffi.nullptr,
    );
  }

  static void cancelPreviousPerformRequestsWithTarget_(
    AVFAudio _lib,
    NSObject aTarget,
  ) {
    _lib._objc_msgSend_15(
      _lib._class_NSURLResponse1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_1,
      aTarget.pointer,
    );
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSURLResponse1,
      _lib._sel_accessInstanceVariablesDirectly1,
    );
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSURLResponse1,
      _lib._sel_useStoredAccessor1,
    );
  }

  static NSSet keyPathsForValuesAffectingValueForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    final _ret = _lib._objc_msgSend_63(
      _lib._class_NSURLResponse1,
      _lib._sel_keyPathsForValuesAffectingValueForKey_1,
      key.pointer,
    );
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    return _lib._objc_msgSend_64(
      _lib._class_NSURLResponse1,
      _lib._sel_automaticallyNotifiesObserversForKey_1,
      key.pointer,
    );
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
    AVFAudio _lib,
    NSArray keys,
    NSString dependentKey,
  ) {
    _lib._objc_msgSend_88(
      _lib._class_NSURLResponse1,
      _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
      keys.pointer,
      dependentKey.pointer,
    );
  }

  static NSArray classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_85(
      _lib._class_NSURLResponse1,
      _lib._sel_classFallbacksForKeyedArchiver1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSURLResponse1,
      _lib._sel_classForKeyedUnarchiver1,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

abstract class NSURLSessionTaskState {
  static const int NSURLSessionTaskStateRunning = 0;
  static const int NSURLSessionTaskStateSuspended = 1;
  static const int NSURLSessionTaskStateCanceling = 2;
  static const int NSURLSessionTaskStateCompleted = 3;
}

void _ObjCBlock_ffiVoid_NSArray_fnPtrTrampoline(
  ffi.Pointer<objc.ObjCBlock> block,
  ffi.Pointer<objc.ObjCObject> arg0,
) => block.ref.target
    .cast<
      ffi.NativeFunction<ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0)>
    >()
    .asFunction<void Function(ffi.Pointer<objc.ObjCObject>)>()(arg0);
final _ObjCBlock_ffiVoid_NSArray_closureRegistry =
    <int, void Function(ffi.Pointer<objc.ObjCObject>)>{};
int _ObjCBlock_ffiVoid_NSArray_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void> _ObjCBlock_ffiVoid_NSArray_registerClosure(
  void Function(ffi.Pointer<objc.ObjCObject>) fn,
) {
  final id = ++_ObjCBlock_ffiVoid_NSArray_closureRegistryIndex;
  _ObjCBlock_ffiVoid_NSArray_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

void _ObjCBlock_ffiVoid_NSArray_closureTrampoline(
  ffi.Pointer<objc.ObjCBlock> block,
  ffi.Pointer<objc.ObjCObject> arg0,
) => _ObjCBlock_ffiVoid_NSArray_closureRegistry[block.ref.target.address]!(
  arg0,
);

class ObjCBlock_ffiVoid_NSArray extends objc.ObjCBlockBase {
  ObjCBlock_ffiVoid_NSArray._(
    ffi.Pointer<objc.ObjCBlock> pointer,
    this._lib, {
    bool retain = false,
    bool release = true,
  }) : super(pointer, retain: retain, release: release);

  AVFAudio _lib;

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_ffiVoid_NSArray castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCBlock> pointer, {
    bool retain = false,
    bool release = false,
  }) {
    return ObjCBlock_ffiVoid_NSArray._(
      pointer,
      lib,
      retain: retain,
      release: release,
    );
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSArray.fromFunctionPointer(
    AVFAudio lib,
    ffi.Pointer<
      ffi.NativeFunction<ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0)>
    > ptr,
  ) : this._(objc.newBlock(
        _cFuncTrampoline ??=
            ffi.Pointer.fromFunction<
              ffi.Void Function(
                ffi.Pointer<objc.ObjCBlock>,
                ffi.Pointer<objc.ObjCObject>,
              )
            >(_ObjCBlock_ffiVoid_NSArray_fnPtrTrampoline).cast(),
        ptr.cast(),
      ), lib);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSArray.fromFunction(
    AVFAudio lib,
    void Function(NSArray?) fn,
  ) : this._(objc.newBlock(
        _dartFuncTrampoline ??=
            ffi.Pointer.fromFunction<
              ffi.Void Function(
                ffi.Pointer<objc.ObjCBlock>,
                ffi.Pointer<objc.ObjCObject>,
              )
            >(_ObjCBlock_ffiVoid_NSArray_closureTrampoline).cast(),
        _ObjCBlock_ffiVoid_NSArray_registerClosure((
          ffi.Pointer<objc.ObjCObject> arg0,
        ) => fn(
          arg0.address == 0
              ? null
              : NSArray._(arg0, lib, retain: true, release: true),
        )),
      ), lib);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_NSArray.listener(AVFAudio lib, void Function(NSArray?) fn)
    : this._(objc.newBlock(
        (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
              ffi.Void Function(
                ffi.Pointer<objc.ObjCBlock>,
                ffi.Pointer<objc.ObjCObject>,
              )
            >.listener(
              _ObjCBlock_ffiVoid_NSArray_closureTrampoline,
            )..keepIsolateAlive = false)
            .nativeFunction
            .cast(),
        _ObjCBlock_ffiVoid_NSArray_registerClosure((
          ffi.Pointer<objc.ObjCObject> arg0,
        ) => fn(
          arg0.address == 0
              ? null
              : NSArray._(arg0, lib, retain: true, release: true),
        )),
      ), lib);
  static ffi.NativeCallable<
    ffi.Void Function(ffi.Pointer<objc.ObjCBlock>, ffi.Pointer<objc.ObjCObject>)
  >? _dartFuncListenerTrampoline;

  void call(NSArray? arg0) => pointer.ref.invoke
      .cast<
        ffi.NativeFunction<
          ffi.Void Function(
            ffi.Pointer<objc.ObjCBlock> block,
            ffi.Pointer<objc.ObjCObject> arg0,
          )
        >
      >()
      .asFunction<
        void Function(ffi.Pointer<objc.ObjCBlock>, ffi.Pointer<objc.ObjCObject>)
      >()(pointer, arg0?.pointer ?? ffi.nullptr);
}

class NSIndexPath extends NSObject {
  NSIndexPath._(
    ffi.Pointer<objc.ObjCObject> pointer,
    AVFAudio lib, {
    bool retain = false,
    bool release = false,
  }) : super._(pointer, lib, retain: retain, release: release);

  /// Returns a [NSIndexPath] that points to the same underlying object as [other].
  static NSIndexPath castFrom<T extends objc.ObjCObjectBase>(
    AVFAudio lib,
    T other,
  ) {
    return NSIndexPath._(other.pointer, lib, retain: true, release: true);
  }

  /// Returns a [NSIndexPath] that wraps the given raw object pointer.
  static NSIndexPath castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCObject> other, {
    bool retain = false,
    bool release = false,
  }) {
    return NSIndexPath._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSIndexPath].
  static bool isInstance(AVFAudio lib, objc.ObjCObjectBase obj) {
    return lib._objc_msgSend_0(
      obj.pointer,
      lib._sel_isKindOfClass_1,
      lib._class_NSIndexPath1,
    );
  }

  static NSIndexPath indexPathWithIndex_(AVFAudio _lib, int index) {
    final _ret = _lib._objc_msgSend_65(
      _lib._class_NSIndexPath1,
      _lib._sel_indexPathWithIndex_1,
      index,
    );
    return NSIndexPath._(_ret, _lib, retain: true, release: true);
  }

  static NSIndexPath indexPathWithIndexes_length_(
    AVFAudio _lib,
    ffi.Pointer<ffi.UnsignedLong> indexes,
    int length,
  ) {
    final _ret = _lib._objc_msgSend_884(
      _lib._class_NSIndexPath1,
      _lib._sel_indexPathWithIndexes_length_1,
      indexes,
      length,
    );
    return NSIndexPath._(_ret, _lib, retain: true, release: true);
  }

  NSIndexPath initWithIndexes_length_(
    ffi.Pointer<ffi.UnsignedLong> indexes,
    int length,
  ) {
    final _ret = _lib._objc_msgSend_884(
      this.pointer,
      _lib._sel_initWithIndexes_length_1,
      indexes,
      length,
    );
    return NSIndexPath._(_ret, _lib, retain: true, release: true);
  }

  NSIndexPath initWithIndex_(int index) {
    final _ret = _lib._objc_msgSend_65(
      this.pointer,
      _lib._sel_initWithIndex_1,
      index,
    );
    return NSIndexPath._(_ret, _lib, retain: true, release: true);
  }

  NSIndexPath indexPathByAddingIndex_(int index) {
    final _ret = _lib._objc_msgSend_885(
      this.pointer,
      _lib._sel_indexPathByAddingIndex_1,
      index,
    );
    return NSIndexPath._(_ret, _lib, retain: true, release: true);
  }

  NSIndexPath indexPathByRemovingLastIndex() {
    final _ret = _lib._objc_msgSend_886(
      this.pointer,
      _lib._sel_indexPathByRemovingLastIndex1,
    );
    return NSIndexPath._(_ret, _lib, retain: true, release: true);
  }

  int indexAtPosition_(int position) {
    return _lib._objc_msgSend_94(
      this.pointer,
      _lib._sel_indexAtPosition_1,
      position,
    );
  }

  int get length {
    return _lib._objc_msgSend_10(this.pointer, _lib._sel_length1);
  }

  void getIndexes_range_(
    ffi.Pointer<ffi.UnsignedLong> indexes,
    _NSRange positionRange,
  ) {
    _lib._objc_msgSend_887(
      this.pointer,
      _lib._sel_getIndexes_range_1,
      indexes,
      positionRange,
    );
  }

  int compare_(NSIndexPath otherObject) {
    return _lib._objc_msgSend_888(
      this.pointer,
      _lib._sel_compare_1,
      otherObject.pointer,
    );
  }

  void getIndexes_(ffi.Pointer<ffi.UnsignedLong> indexes) {
    _lib._objc_msgSend_889(this.pointer, _lib._sel_getIndexes_1, indexes);
  }

  @override
  NSIndexPath init() {
    final _ret = _lib._objc_msgSend_2(this.pointer, _lib._sel_init1);
    return NSIndexPath._(_ret, _lib, retain: true, release: true);
  }

  static NSIndexPath new1(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSIndexPath1, _lib._sel_new1);
    return NSIndexPath._(_ret, _lib, retain: false, release: true);
  }

  static NSIndexPath allocWithZone_(AVFAudio _lib, ffi.Pointer<_NSZone> zone) {
    final _ret = _lib._objc_msgSend_3(
      _lib._class_NSIndexPath1,
      _lib._sel_allocWithZone_1,
      zone,
    );
    return NSIndexPath._(_ret, _lib, retain: false, release: true);
  }

  static NSIndexPath alloc(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSIndexPath1,
      _lib._sel_alloc1,
    );
    return NSIndexPath._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
    AVFAudio _lib,
    NSObject aTarget,
    ffi.Pointer<objc.ObjCSelector> aSelector,
    NSObject? anArgument,
  ) {
    _lib._objc_msgSend_14(
      _lib._class_NSIndexPath1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
      aTarget.pointer,
      aSelector,
      anArgument?.pointer ?? ffi.nullptr,
    );
  }

  static void cancelPreviousPerformRequestsWithTarget_(
    AVFAudio _lib,
    NSObject aTarget,
  ) {
    _lib._objc_msgSend_15(
      _lib._class_NSIndexPath1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_1,
      aTarget.pointer,
    );
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSIndexPath1,
      _lib._sel_accessInstanceVariablesDirectly1,
    );
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSIndexPath1,
      _lib._sel_useStoredAccessor1,
    );
  }

  static NSSet keyPathsForValuesAffectingValueForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    final _ret = _lib._objc_msgSend_63(
      _lib._class_NSIndexPath1,
      _lib._sel_keyPathsForValuesAffectingValueForKey_1,
      key.pointer,
    );
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    return _lib._objc_msgSend_64(
      _lib._class_NSIndexPath1,
      _lib._sel_automaticallyNotifiesObserversForKey_1,
      key.pointer,
    );
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
    AVFAudio _lib,
    NSArray keys,
    NSString dependentKey,
  ) {
    _lib._objc_msgSend_88(
      _lib._class_NSIndexPath1,
      _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
      keys.pointer,
      dependentKey.pointer,
    );
  }

  static NSArray classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_85(
      _lib._class_NSIndexPath1,
      _lib._sel_classFallbacksForKeyedArchiver1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSIndexPath1,
      _lib._sel_classForKeyedUnarchiver1,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

class NSInflectionRule extends NSObject {
  NSInflectionRule._(
    ffi.Pointer<objc.ObjCObject> pointer,
    AVFAudio lib, {
    bool retain = false,
    bool release = false,
  }) : super._(pointer, lib, retain: retain, release: release);

  /// Returns a [NSInflectionRule] that points to the same underlying object as [other].
  static NSInflectionRule castFrom<T extends objc.ObjCObjectBase>(
    AVFAudio lib,
    T other,
  ) {
    return NSInflectionRule._(other.pointer, lib, retain: true, release: true);
  }

  /// Returns a [NSInflectionRule] that wraps the given raw object pointer.
  static NSInflectionRule castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCObject> other, {
    bool retain = false,
    bool release = false,
  }) {
    return NSInflectionRule._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSInflectionRule].
  static bool isInstance(AVFAudio lib, objc.ObjCObjectBase obj) {
    return lib._objc_msgSend_0(
      obj.pointer,
      lib._sel_isKindOfClass_1,
      lib._class_NSInflectionRule1,
    );
  }

  @override
  NSObject init() {
    final _ret = _lib._objc_msgSend_2(this.pointer, _lib._sel_init1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSInflectionRule getAutomaticRule(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_890(
      _lib._class_NSInflectionRule1,
      _lib._sel_automaticRule1,
    );
    return NSInflectionRule._(_ret, _lib, retain: true, release: true);
  }

  static bool canInflectLanguage_(AVFAudio _lib, NSString language) {
    return _lib._objc_msgSend_64(
      _lib._class_NSInflectionRule1,
      _lib._sel_canInflectLanguage_1,
      language.pointer,
    );
  }

  static bool getCanInflectPreferredLocalization(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSInflectionRule1,
      _lib._sel_canInflectPreferredLocalization1,
    );
  }

  static NSInflectionRule new1(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSInflectionRule1,
      _lib._sel_new1,
    );
    return NSInflectionRule._(_ret, _lib, retain: false, release: true);
  }

  static NSInflectionRule allocWithZone_(
    AVFAudio _lib,
    ffi.Pointer<_NSZone> zone,
  ) {
    final _ret = _lib._objc_msgSend_3(
      _lib._class_NSInflectionRule1,
      _lib._sel_allocWithZone_1,
      zone,
    );
    return NSInflectionRule._(_ret, _lib, retain: false, release: true);
  }

  static NSInflectionRule alloc(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSInflectionRule1,
      _lib._sel_alloc1,
    );
    return NSInflectionRule._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
    AVFAudio _lib,
    NSObject aTarget,
    ffi.Pointer<objc.ObjCSelector> aSelector,
    NSObject? anArgument,
  ) {
    _lib._objc_msgSend_14(
      _lib._class_NSInflectionRule1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
      aTarget.pointer,
      aSelector,
      anArgument?.pointer ?? ffi.nullptr,
    );
  }

  static void cancelPreviousPerformRequestsWithTarget_(
    AVFAudio _lib,
    NSObject aTarget,
  ) {
    _lib._objc_msgSend_15(
      _lib._class_NSInflectionRule1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_1,
      aTarget.pointer,
    );
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSInflectionRule1,
      _lib._sel_accessInstanceVariablesDirectly1,
    );
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSInflectionRule1,
      _lib._sel_useStoredAccessor1,
    );
  }

  static NSSet keyPathsForValuesAffectingValueForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    final _ret = _lib._objc_msgSend_63(
      _lib._class_NSInflectionRule1,
      _lib._sel_keyPathsForValuesAffectingValueForKey_1,
      key.pointer,
    );
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    return _lib._objc_msgSend_64(
      _lib._class_NSInflectionRule1,
      _lib._sel_automaticallyNotifiesObserversForKey_1,
      key.pointer,
    );
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
    AVFAudio _lib,
    NSArray keys,
    NSString dependentKey,
  ) {
    _lib._objc_msgSend_88(
      _lib._class_NSInflectionRule1,
      _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
      keys.pointer,
      dependentKey.pointer,
    );
  }

  static NSArray classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_85(
      _lib._class_NSInflectionRule1,
      _lib._sel_classFallbacksForKeyedArchiver1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSInflectionRule1,
      _lib._sel_classForKeyedUnarchiver1,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

class NSMorphology extends NSObject {
  NSMorphology._(
    ffi.Pointer<objc.ObjCObject> pointer,
    AVFAudio lib, {
    bool retain = false,
    bool release = false,
  }) : super._(pointer, lib, retain: retain, release: release);

  /// Returns a [NSMorphology] that points to the same underlying object as [other].
  static NSMorphology castFrom<T extends objc.ObjCObjectBase>(
    AVFAudio lib,
    T other,
  ) {
    return NSMorphology._(other.pointer, lib, retain: true, release: true);
  }

  /// Returns a [NSMorphology] that wraps the given raw object pointer.
  static NSMorphology castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCObject> other, {
    bool retain = false,
    bool release = false,
  }) {
    return NSMorphology._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSMorphology].
  static bool isInstance(AVFAudio lib, objc.ObjCObjectBase obj) {
    return lib._objc_msgSend_0(
      obj.pointer,
      lib._sel_isKindOfClass_1,
      lib._class_NSMorphology1,
    );
  }

  int get grammaticalGender {
    return _lib._objc_msgSend_891(this.pointer, _lib._sel_grammaticalGender1);
  }

  set grammaticalGender(int value) {
    return _lib._objc_msgSend_892(
      this.pointer,
      _lib._sel_setGrammaticalGender_1,
      value,
    );
  }

  int get partOfSpeech {
    return _lib._objc_msgSend_893(this.pointer, _lib._sel_partOfSpeech1);
  }

  set partOfSpeech(int value) {
    return _lib._objc_msgSend_894(
      this.pointer,
      _lib._sel_setPartOfSpeech_1,
      value,
    );
  }

  int get number {
    return _lib._objc_msgSend_895(this.pointer, _lib._sel_number1);
  }

  set number(int value) {
    return _lib._objc_msgSend_896(this.pointer, _lib._sel_setNumber_1, value);
  }

  int get grammaticalCase {
    return _lib._objc_msgSend_897(this.pointer, _lib._sel_grammaticalCase1);
  }

  set grammaticalCase(int value) {
    return _lib._objc_msgSend_898(
      this.pointer,
      _lib._sel_setGrammaticalCase_1,
      value,
    );
  }

  int get determination {
    return _lib._objc_msgSend_899(this.pointer, _lib._sel_determination1);
  }

  set determination(int value) {
    return _lib._objc_msgSend_900(
      this.pointer,
      _lib._sel_setDetermination_1,
      value,
    );
  }

  int get grammaticalPerson {
    return _lib._objc_msgSend_901(this.pointer, _lib._sel_grammaticalPerson1);
  }

  set grammaticalPerson(int value) {
    return _lib._objc_msgSend_902(
      this.pointer,
      _lib._sel_setGrammaticalPerson_1,
      value,
    );
  }

  int get pronounType {
    return _lib._objc_msgSend_903(this.pointer, _lib._sel_pronounType1);
  }

  set pronounType(int value) {
    return _lib._objc_msgSend_904(
      this.pointer,
      _lib._sel_setPronounType_1,
      value,
    );
  }

  int get definiteness {
    return _lib._objc_msgSend_905(this.pointer, _lib._sel_definiteness1);
  }

  set definiteness(int value) {
    return _lib._objc_msgSend_906(
      this.pointer,
      _lib._sel_setDefiniteness_1,
      value,
    );
  }

  NSMorphologyCustomPronoun? customPronounForLanguage_(NSString language) {
    final _ret = _lib._objc_msgSend_907(
      this.pointer,
      _lib._sel_customPronounForLanguage_1,
      language.pointer,
    );
    return _ret.address == 0
        ? null
        : NSMorphologyCustomPronoun._(_ret, _lib, retain: true, release: true);
  }

  bool setCustomPronoun_forLanguage_error_(
    NSMorphologyCustomPronoun? features,
    NSString language,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    return _lib._objc_msgSend_908(
      this.pointer,
      _lib._sel_setCustomPronoun_forLanguage_error_1,
      features?.pointer ?? ffi.nullptr,
      language.pointer,
      error,
    );
  }

  bool get unspecified {
    return _lib._objc_msgSend_12(this.pointer, _lib._sel_isUnspecified1);
  }

  static NSMorphology getUserMorphology(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_909(
      _lib._class_NSMorphology1,
      _lib._sel_userMorphology1,
    );
    return NSMorphology._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSMorphology init() {
    final _ret = _lib._objc_msgSend_2(this.pointer, _lib._sel_init1);
    return NSMorphology._(_ret, _lib, retain: true, release: true);
  }

  static NSMorphology new1(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSMorphology1,
      _lib._sel_new1,
    );
    return NSMorphology._(_ret, _lib, retain: false, release: true);
  }

  static NSMorphology allocWithZone_(AVFAudio _lib, ffi.Pointer<_NSZone> zone) {
    final _ret = _lib._objc_msgSend_3(
      _lib._class_NSMorphology1,
      _lib._sel_allocWithZone_1,
      zone,
    );
    return NSMorphology._(_ret, _lib, retain: false, release: true);
  }

  static NSMorphology alloc(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSMorphology1,
      _lib._sel_alloc1,
    );
    return NSMorphology._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
    AVFAudio _lib,
    NSObject aTarget,
    ffi.Pointer<objc.ObjCSelector> aSelector,
    NSObject? anArgument,
  ) {
    _lib._objc_msgSend_14(
      _lib._class_NSMorphology1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
      aTarget.pointer,
      aSelector,
      anArgument?.pointer ?? ffi.nullptr,
    );
  }

  static void cancelPreviousPerformRequestsWithTarget_(
    AVFAudio _lib,
    NSObject aTarget,
  ) {
    _lib._objc_msgSend_15(
      _lib._class_NSMorphology1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_1,
      aTarget.pointer,
    );
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSMorphology1,
      _lib._sel_accessInstanceVariablesDirectly1,
    );
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSMorphology1,
      _lib._sel_useStoredAccessor1,
    );
  }

  static NSSet keyPathsForValuesAffectingValueForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    final _ret = _lib._objc_msgSend_63(
      _lib._class_NSMorphology1,
      _lib._sel_keyPathsForValuesAffectingValueForKey_1,
      key.pointer,
    );
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    return _lib._objc_msgSend_64(
      _lib._class_NSMorphology1,
      _lib._sel_automaticallyNotifiesObserversForKey_1,
      key.pointer,
    );
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
    AVFAudio _lib,
    NSArray keys,
    NSString dependentKey,
  ) {
    _lib._objc_msgSend_88(
      _lib._class_NSMorphology1,
      _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
      keys.pointer,
      dependentKey.pointer,
    );
  }

  static NSArray classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_85(
      _lib._class_NSMorphology1,
      _lib._sel_classFallbacksForKeyedArchiver1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSMorphology1,
      _lib._sel_classForKeyedUnarchiver1,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

abstract class NSGrammaticalGender {
  static const int NSGrammaticalGenderNotSet = 0;
  static const int NSGrammaticalGenderFeminine = 1;
  static const int NSGrammaticalGenderMasculine = 2;
  static const int NSGrammaticalGenderNeuter = 3;
}

abstract class NSGrammaticalPartOfSpeech {
  static const int NSGrammaticalPartOfSpeechNotSet = 0;
  static const int NSGrammaticalPartOfSpeechDeterminer = 1;
  static const int NSGrammaticalPartOfSpeechPronoun = 2;
  static const int NSGrammaticalPartOfSpeechLetter = 3;
  static const int NSGrammaticalPartOfSpeechAdverb = 4;
  static const int NSGrammaticalPartOfSpeechParticle = 5;
  static const int NSGrammaticalPartOfSpeechAdjective = 6;
  static const int NSGrammaticalPartOfSpeechAdposition = 7;
  static const int NSGrammaticalPartOfSpeechVerb = 8;
  static const int NSGrammaticalPartOfSpeechNoun = 9;
  static const int NSGrammaticalPartOfSpeechConjunction = 10;
  static const int NSGrammaticalPartOfSpeechNumeral = 11;
  static const int NSGrammaticalPartOfSpeechInterjection = 12;
  static const int NSGrammaticalPartOfSpeechPreposition = 13;
  static const int NSGrammaticalPartOfSpeechAbbreviation = 14;
}

abstract class NSGrammaticalNumber {
  static const int NSGrammaticalNumberNotSet = 0;
  static const int NSGrammaticalNumberSingular = 1;
  static const int NSGrammaticalNumberZero = 2;
  static const int NSGrammaticalNumberPlural = 3;
  static const int NSGrammaticalNumberPluralTwo = 4;
  static const int NSGrammaticalNumberPluralFew = 5;
  static const int NSGrammaticalNumberPluralMany = 6;
}

abstract class NSGrammaticalCase {
  static const int NSGrammaticalCaseNotSet = 0;
  static const int NSGrammaticalCaseNominative = 1;
  static const int NSGrammaticalCaseAccusative = 2;
  static const int NSGrammaticalCaseDative = 3;
  static const int NSGrammaticalCaseGenitive = 4;
  static const int NSGrammaticalCasePrepositional = 5;
  static const int NSGrammaticalCaseAblative = 6;
  static const int NSGrammaticalCaseAdessive = 7;
  static const int NSGrammaticalCaseAllative = 8;
  static const int NSGrammaticalCaseElative = 9;
  static const int NSGrammaticalCaseIllative = 10;
  static const int NSGrammaticalCaseEssive = 11;
  static const int NSGrammaticalCaseInessive = 12;
  static const int NSGrammaticalCaseLocative = 13;
  static const int NSGrammaticalCaseTranslative = 14;
}

abstract class NSGrammaticalDetermination {
  static const int NSGrammaticalDeterminationNotSet = 0;
  static const int NSGrammaticalDeterminationIndependent = 1;
  static const int NSGrammaticalDeterminationDependent = 2;
}

abstract class NSGrammaticalPerson {
  static const int NSGrammaticalPersonNotSet = 0;
  static const int NSGrammaticalPersonFirst = 1;
  static const int NSGrammaticalPersonSecond = 2;
  static const int NSGrammaticalPersonThird = 3;
}

abstract class NSGrammaticalPronounType {
  static const int NSGrammaticalPronounTypeNotSet = 0;
  static const int NSGrammaticalPronounTypePersonal = 1;
  static const int NSGrammaticalPronounTypeReflexive = 2;
  static const int NSGrammaticalPronounTypePossessive = 3;
}

abstract class NSGrammaticalDefiniteness {
  static const int NSGrammaticalDefinitenessNotSet = 0;
  static const int NSGrammaticalDefinitenessIndefinite = 1;
  static const int NSGrammaticalDefinitenessDefinite = 2;
}

class NSMorphologyCustomPronoun extends NSObject {
  NSMorphologyCustomPronoun._(
    ffi.Pointer<objc.ObjCObject> pointer,
    AVFAudio lib, {
    bool retain = false,
    bool release = false,
  }) : super._(pointer, lib, retain: retain, release: release);

  /// Returns a [NSMorphologyCustomPronoun] that points to the same underlying object as [other].
  static NSMorphologyCustomPronoun castFrom<T extends objc.ObjCObjectBase>(
    AVFAudio lib,
    T other,
  ) {
    return NSMorphologyCustomPronoun._(
      other.pointer,
      lib,
      retain: true,
      release: true,
    );
  }

  /// Returns a [NSMorphologyCustomPronoun] that wraps the given raw object pointer.
  static NSMorphologyCustomPronoun castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCObject> other, {
    bool retain = false,
    bool release = false,
  }) {
    return NSMorphologyCustomPronoun._(
      other,
      lib,
      retain: retain,
      release: release,
    );
  }

  /// Returns whether [obj] is an instance of [NSMorphologyCustomPronoun].
  static bool isInstance(AVFAudio lib, objc.ObjCObjectBase obj) {
    return lib._objc_msgSend_0(
      obj.pointer,
      lib._sel_isKindOfClass_1,
      lib._class_NSMorphologyCustomPronoun1,
    );
  }

  static bool isSupportedForLanguage_(AVFAudio _lib, NSString language) {
    return _lib._objc_msgSend_64(
      _lib._class_NSMorphologyCustomPronoun1,
      _lib._sel_isSupportedForLanguage_1,
      language.pointer,
    );
  }

  static NSArray requiredKeysForLanguage_(AVFAudio _lib, NSString language) {
    final _ret = _lib._objc_msgSend_358(
      _lib._class_NSMorphologyCustomPronoun1,
      _lib._sel_requiredKeysForLanguage_1,
      language.pointer,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSString? get subjectForm {
    final _ret = _lib._objc_msgSend_44(this.pointer, _lib._sel_subjectForm1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  set subjectForm(NSString? value) {
    return _lib._objc_msgSend_545(
      this.pointer,
      _lib._sel_setSubjectForm_1,
      value?.pointer ?? ffi.nullptr,
    );
  }

  NSString? get objectForm {
    final _ret = _lib._objc_msgSend_44(this.pointer, _lib._sel_objectForm1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  set objectForm(NSString? value) {
    return _lib._objc_msgSend_545(
      this.pointer,
      _lib._sel_setObjectForm_1,
      value?.pointer ?? ffi.nullptr,
    );
  }

  NSString? get possessiveForm {
    final _ret = _lib._objc_msgSend_44(this.pointer, _lib._sel_possessiveForm1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  set possessiveForm(NSString? value) {
    return _lib._objc_msgSend_545(
      this.pointer,
      _lib._sel_setPossessiveForm_1,
      value?.pointer ?? ffi.nullptr,
    );
  }

  NSString? get possessiveAdjectiveForm {
    final _ret = _lib._objc_msgSend_44(
      this.pointer,
      _lib._sel_possessiveAdjectiveForm1,
    );
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  set possessiveAdjectiveForm(NSString? value) {
    return _lib._objc_msgSend_545(
      this.pointer,
      _lib._sel_setPossessiveAdjectiveForm_1,
      value?.pointer ?? ffi.nullptr,
    );
  }

  NSString? get reflexiveForm {
    final _ret = _lib._objc_msgSend_44(this.pointer, _lib._sel_reflexiveForm1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  set reflexiveForm(NSString? value) {
    return _lib._objc_msgSend_545(
      this.pointer,
      _lib._sel_setReflexiveForm_1,
      value?.pointer ?? ffi.nullptr,
    );
  }

  @override
  NSMorphologyCustomPronoun init() {
    final _ret = _lib._objc_msgSend_2(this.pointer, _lib._sel_init1);
    return NSMorphologyCustomPronoun._(_ret, _lib, retain: true, release: true);
  }

  static NSMorphologyCustomPronoun new1(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSMorphologyCustomPronoun1,
      _lib._sel_new1,
    );
    return NSMorphologyCustomPronoun._(
      _ret,
      _lib,
      retain: false,
      release: true,
    );
  }

  static NSMorphologyCustomPronoun allocWithZone_(
    AVFAudio _lib,
    ffi.Pointer<_NSZone> zone,
  ) {
    final _ret = _lib._objc_msgSend_3(
      _lib._class_NSMorphologyCustomPronoun1,
      _lib._sel_allocWithZone_1,
      zone,
    );
    return NSMorphologyCustomPronoun._(
      _ret,
      _lib,
      retain: false,
      release: true,
    );
  }

  static NSMorphologyCustomPronoun alloc(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSMorphologyCustomPronoun1,
      _lib._sel_alloc1,
    );
    return NSMorphologyCustomPronoun._(
      _ret,
      _lib,
      retain: false,
      release: true,
    );
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
    AVFAudio _lib,
    NSObject aTarget,
    ffi.Pointer<objc.ObjCSelector> aSelector,
    NSObject? anArgument,
  ) {
    _lib._objc_msgSend_14(
      _lib._class_NSMorphologyCustomPronoun1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
      aTarget.pointer,
      aSelector,
      anArgument?.pointer ?? ffi.nullptr,
    );
  }

  static void cancelPreviousPerformRequestsWithTarget_(
    AVFAudio _lib,
    NSObject aTarget,
  ) {
    _lib._objc_msgSend_15(
      _lib._class_NSMorphologyCustomPronoun1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_1,
      aTarget.pointer,
    );
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSMorphologyCustomPronoun1,
      _lib._sel_accessInstanceVariablesDirectly1,
    );
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSMorphologyCustomPronoun1,
      _lib._sel_useStoredAccessor1,
    );
  }

  static NSSet keyPathsForValuesAffectingValueForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    final _ret = _lib._objc_msgSend_63(
      _lib._class_NSMorphologyCustomPronoun1,
      _lib._sel_keyPathsForValuesAffectingValueForKey_1,
      key.pointer,
    );
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    return _lib._objc_msgSend_64(
      _lib._class_NSMorphologyCustomPronoun1,
      _lib._sel_automaticallyNotifiesObserversForKey_1,
      key.pointer,
    );
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
    AVFAudio _lib,
    NSArray keys,
    NSString dependentKey,
  ) {
    _lib._objc_msgSend_88(
      _lib._class_NSMorphologyCustomPronoun1,
      _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
      keys.pointer,
      dependentKey.pointer,
    );
  }

  static NSArray classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_85(
      _lib._class_NSMorphologyCustomPronoun1,
      _lib._sel_classFallbacksForKeyedArchiver1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSMorphologyCustomPronoun1,
      _lib._sel_classForKeyedUnarchiver1,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

class NSOperationQueue extends NSObject {
  NSOperationQueue._(
    ffi.Pointer<objc.ObjCObject> pointer,
    AVFAudio lib, {
    bool retain = false,
    bool release = false,
  }) : super._(pointer, lib, retain: retain, release: release);

  /// Returns a [NSOperationQueue] that points to the same underlying object as [other].
  static NSOperationQueue castFrom<T extends objc.ObjCObjectBase>(
    AVFAudio lib,
    T other,
  ) {
    return NSOperationQueue._(other.pointer, lib, retain: true, release: true);
  }

  /// Returns a [NSOperationQueue] that wraps the given raw object pointer.
  static NSOperationQueue castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCObject> other, {
    bool retain = false,
    bool release = false,
  }) {
    return NSOperationQueue._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSOperationQueue].
  static bool isInstance(AVFAudio lib, objc.ObjCObjectBase obj) {
    return lib._objc_msgSend_0(
      obj.pointer,
      lib._sel_isKindOfClass_1,
      lib._class_NSOperationQueue1,
    );
  }

  NSProgress get progress {
    final _ret = _lib._objc_msgSend_879(this.pointer, _lib._sel_progress1);
    return NSProgress._(_ret, _lib, retain: true, release: true);
  }

  void addOperation_(NSOperation op) {
    _lib._objc_msgSend_910(this.pointer, _lib._sel_addOperation_1, op.pointer);
  }

  void addOperations_waitUntilFinished_(NSArray ops, bool wait) {
    _lib._objc_msgSend_913(
      this.pointer,
      _lib._sel_addOperations_waitUntilFinished_1,
      ops.pointer,
      wait,
    );
  }

  void addOperationWithBlock_(ObjCBlock_ffiVoid block) {
    _lib._objc_msgSend_532(
      this.pointer,
      _lib._sel_addOperationWithBlock_1,
      block.pointer,
    );
  }

  void addBarrierBlock_(ObjCBlock_ffiVoid barrier) {
    _lib._objc_msgSend_532(
      this.pointer,
      _lib._sel_addBarrierBlock_1,
      barrier.pointer,
    );
  }

  int get maxConcurrentOperationCount {
    return _lib._objc_msgSend_83(
      this.pointer,
      _lib._sel_maxConcurrentOperationCount1,
    );
  }

  set maxConcurrentOperationCount(int value) {
    return _lib._objc_msgSend_635(
      this.pointer,
      _lib._sel_setMaxConcurrentOperationCount_1,
      value,
    );
  }

  bool get suspended {
    return _lib._objc_msgSend_12(this.pointer, _lib._sel_isSuspended1);
  }

  set suspended(bool value) {
    return _lib._objc_msgSend_527(
      this.pointer,
      _lib._sel_setSuspended_1,
      value,
    );
  }

  NSString? get name {
    final _ret = _lib._objc_msgSend_44(this.pointer, _lib._sel_name1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  set name(NSString? value) {
    return _lib._objc_msgSend_545(
      this.pointer,
      _lib._sel_setName_1,
      value?.pointer ?? ffi.nullptr,
    );
  }

  int get qualityOfService {
    return _lib._objc_msgSend_543(this.pointer, _lib._sel_qualityOfService1);
  }

  set qualityOfService(int value) {
    return _lib._objc_msgSend_544(
      this.pointer,
      _lib._sel_setQualityOfService_1,
      value,
    );
  }

  ffi.Pointer<dispatch_queue_s> get underlyingQueue {
    return _lib._objc_msgSend_914(this.pointer, _lib._sel_underlyingQueue1);
  }

  set underlyingQueue(ffi.Pointer<dispatch_queue_s> value) {
    return _lib._objc_msgSend_915(
      this.pointer,
      _lib._sel_setUnderlyingQueue_1,
      value,
    );
  }

  void cancelAllOperations() {
    _lib._objc_msgSend_1(this.pointer, _lib._sel_cancelAllOperations1);
  }

  void waitUntilAllOperationsAreFinished() {
    _lib._objc_msgSend_1(
      this.pointer,
      _lib._sel_waitUntilAllOperationsAreFinished1,
    );
  }

  static NSOperationQueue? getCurrentQueue(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_916(
      _lib._class_NSOperationQueue1,
      _lib._sel_currentQueue1,
    );
    return _ret.address == 0
        ? null
        : NSOperationQueue._(_ret, _lib, retain: true, release: true);
  }

  static NSOperationQueue getMainQueue(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_917(
      _lib._class_NSOperationQueue1,
      _lib._sel_mainQueue1,
    );
    return NSOperationQueue._(_ret, _lib, retain: true, release: true);
  }

  NSArray get operations {
    final _ret = _lib._objc_msgSend_85(this.pointer, _lib._sel_operations1);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  int get operationCount {
    return _lib._objc_msgSend_10(this.pointer, _lib._sel_operationCount1);
  }

  @override
  NSOperationQueue init() {
    final _ret = _lib._objc_msgSend_2(this.pointer, _lib._sel_init1);
    return NSOperationQueue._(_ret, _lib, retain: true, release: true);
  }

  static NSOperationQueue new1(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSOperationQueue1,
      _lib._sel_new1,
    );
    return NSOperationQueue._(_ret, _lib, retain: false, release: true);
  }

  static NSOperationQueue allocWithZone_(
    AVFAudio _lib,
    ffi.Pointer<_NSZone> zone,
  ) {
    final _ret = _lib._objc_msgSend_3(
      _lib._class_NSOperationQueue1,
      _lib._sel_allocWithZone_1,
      zone,
    );
    return NSOperationQueue._(_ret, _lib, retain: false, release: true);
  }

  static NSOperationQueue alloc(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSOperationQueue1,
      _lib._sel_alloc1,
    );
    return NSOperationQueue._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
    AVFAudio _lib,
    NSObject aTarget,
    ffi.Pointer<objc.ObjCSelector> aSelector,
    NSObject? anArgument,
  ) {
    _lib._objc_msgSend_14(
      _lib._class_NSOperationQueue1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
      aTarget.pointer,
      aSelector,
      anArgument?.pointer ?? ffi.nullptr,
    );
  }

  static void cancelPreviousPerformRequestsWithTarget_(
    AVFAudio _lib,
    NSObject aTarget,
  ) {
    _lib._objc_msgSend_15(
      _lib._class_NSOperationQueue1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_1,
      aTarget.pointer,
    );
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSOperationQueue1,
      _lib._sel_accessInstanceVariablesDirectly1,
    );
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSOperationQueue1,
      _lib._sel_useStoredAccessor1,
    );
  }

  static NSSet keyPathsForValuesAffectingValueForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    final _ret = _lib._objc_msgSend_63(
      _lib._class_NSOperationQueue1,
      _lib._sel_keyPathsForValuesAffectingValueForKey_1,
      key.pointer,
    );
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    return _lib._objc_msgSend_64(
      _lib._class_NSOperationQueue1,
      _lib._sel_automaticallyNotifiesObserversForKey_1,
      key.pointer,
    );
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
    AVFAudio _lib,
    NSArray keys,
    NSString dependentKey,
  ) {
    _lib._objc_msgSend_88(
      _lib._class_NSOperationQueue1,
      _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
      keys.pointer,
      dependentKey.pointer,
    );
  }

  static NSArray classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_85(
      _lib._class_NSOperationQueue1,
      _lib._sel_classFallbacksForKeyedArchiver1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSOperationQueue1,
      _lib._sel_classForKeyedUnarchiver1,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

class NSOperation extends NSObject {
  NSOperation._(
    ffi.Pointer<objc.ObjCObject> pointer,
    AVFAudio lib, {
    bool retain = false,
    bool release = false,
  }) : super._(pointer, lib, retain: retain, release: release);

  /// Returns a [NSOperation] that points to the same underlying object as [other].
  static NSOperation castFrom<T extends objc.ObjCObjectBase>(
    AVFAudio lib,
    T other,
  ) {
    return NSOperation._(other.pointer, lib, retain: true, release: true);
  }

  /// Returns a [NSOperation] that wraps the given raw object pointer.
  static NSOperation castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCObject> other, {
    bool retain = false,
    bool release = false,
  }) {
    return NSOperation._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSOperation].
  static bool isInstance(AVFAudio lib, objc.ObjCObjectBase obj) {
    return lib._objc_msgSend_0(
      obj.pointer,
      lib._sel_isKindOfClass_1,
      lib._class_NSOperation1,
    );
  }

  void start() {
    _lib._objc_msgSend_1(this.pointer, _lib._sel_start1);
  }

  void main() {
    _lib._objc_msgSend_1(this.pointer, _lib._sel_main1);
  }

  bool get cancelled {
    return _lib._objc_msgSend_12(this.pointer, _lib._sel_isCancelled1);
  }

  void cancel() {
    _lib._objc_msgSend_1(this.pointer, _lib._sel_cancel1);
  }

  bool get executing {
    return _lib._objc_msgSend_12(this.pointer, _lib._sel_isExecuting1);
  }

  bool get finished {
    return _lib._objc_msgSend_12(this.pointer, _lib._sel_isFinished1);
  }

  bool get concurrent {
    return _lib._objc_msgSend_12(this.pointer, _lib._sel_isConcurrent1);
  }

  bool get asynchronous {
    return _lib._objc_msgSend_12(this.pointer, _lib._sel_isAsynchronous1);
  }

  bool get ready {
    return _lib._objc_msgSend_12(this.pointer, _lib._sel_isReady1);
  }

  void addDependency_(NSOperation op) {
    _lib._objc_msgSend_910(this.pointer, _lib._sel_addDependency_1, op.pointer);
  }

  void removeDependency_(NSOperation op) {
    _lib._objc_msgSend_910(
      this.pointer,
      _lib._sel_removeDependency_1,
      op.pointer,
    );
  }

  NSArray get dependencies {
    final _ret = _lib._objc_msgSend_85(this.pointer, _lib._sel_dependencies1);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  int get queuePriority {
    return _lib._objc_msgSend_911(this.pointer, _lib._sel_queuePriority1);
  }

  set queuePriority(int value) {
    return _lib._objc_msgSend_912(
      this.pointer,
      _lib._sel_setQueuePriority_1,
      value,
    );
  }

  ObjCBlock_ffiVoid? get completionBlock {
    final _ret = _lib._objc_msgSend_668(
      this.pointer,
      _lib._sel_completionBlock1,
    );
    return _ret.address == 0
        ? null
        : ObjCBlock_ffiVoid._(_ret, _lib, retain: true, release: true);
  }

  set completionBlock(ObjCBlock_ffiVoid? value) {
    return _lib._objc_msgSend_669(
      this.pointer,
      _lib._sel_setCompletionBlock_1,
      value?.pointer ?? ffi.nullptr,
    );
  }

  void waitUntilFinished() {
    _lib._objc_msgSend_1(this.pointer, _lib._sel_waitUntilFinished1);
  }

  double get threadPriority {
    return objc.useMsgSendVariants
        ? _lib._objc_msgSend_165_fpret(this.pointer, _lib._sel_threadPriority1)
        : _lib._objc_msgSend_165(this.pointer, _lib._sel_threadPriority1);
  }

  set threadPriority(double value) {
    return _lib._objc_msgSend_542(
      this.pointer,
      _lib._sel_setThreadPriority_1,
      value,
    );
  }

  int get qualityOfService {
    return _lib._objc_msgSend_543(this.pointer, _lib._sel_qualityOfService1);
  }

  set qualityOfService(int value) {
    return _lib._objc_msgSend_544(
      this.pointer,
      _lib._sel_setQualityOfService_1,
      value,
    );
  }

  NSString? get name {
    final _ret = _lib._objc_msgSend_44(this.pointer, _lib._sel_name1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  set name(NSString? value) {
    return _lib._objc_msgSend_545(
      this.pointer,
      _lib._sel_setName_1,
      value?.pointer ?? ffi.nullptr,
    );
  }

  @override
  NSOperation init() {
    final _ret = _lib._objc_msgSend_2(this.pointer, _lib._sel_init1);
    return NSOperation._(_ret, _lib, retain: true, release: true);
  }

  static NSOperation new1(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSOperation1, _lib._sel_new1);
    return NSOperation._(_ret, _lib, retain: false, release: true);
  }

  static NSOperation allocWithZone_(AVFAudio _lib, ffi.Pointer<_NSZone> zone) {
    final _ret = _lib._objc_msgSend_3(
      _lib._class_NSOperation1,
      _lib._sel_allocWithZone_1,
      zone,
    );
    return NSOperation._(_ret, _lib, retain: false, release: true);
  }

  static NSOperation alloc(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSOperation1,
      _lib._sel_alloc1,
    );
    return NSOperation._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
    AVFAudio _lib,
    NSObject aTarget,
    ffi.Pointer<objc.ObjCSelector> aSelector,
    NSObject? anArgument,
  ) {
    _lib._objc_msgSend_14(
      _lib._class_NSOperation1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
      aTarget.pointer,
      aSelector,
      anArgument?.pointer ?? ffi.nullptr,
    );
  }

  static void cancelPreviousPerformRequestsWithTarget_(
    AVFAudio _lib,
    NSObject aTarget,
  ) {
    _lib._objc_msgSend_15(
      _lib._class_NSOperation1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_1,
      aTarget.pointer,
    );
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSOperation1,
      _lib._sel_accessInstanceVariablesDirectly1,
    );
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSOperation1,
      _lib._sel_useStoredAccessor1,
    );
  }

  static NSSet keyPathsForValuesAffectingValueForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    final _ret = _lib._objc_msgSend_63(
      _lib._class_NSOperation1,
      _lib._sel_keyPathsForValuesAffectingValueForKey_1,
      key.pointer,
    );
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    return _lib._objc_msgSend_64(
      _lib._class_NSOperation1,
      _lib._sel_automaticallyNotifiesObserversForKey_1,
      key.pointer,
    );
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
    AVFAudio _lib,
    NSArray keys,
    NSString dependentKey,
  ) {
    _lib._objc_msgSend_88(
      _lib._class_NSOperation1,
      _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
      keys.pointer,
      dependentKey.pointer,
    );
  }

  static NSArray classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_85(
      _lib._class_NSOperation1,
      _lib._sel_classFallbacksForKeyedArchiver1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSOperation1,
      _lib._sel_classForKeyedUnarchiver1,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

abstract class NSOperationQueuePriority {
  static const int NSOperationQueuePriorityVeryLow = -8;
  static const int NSOperationQueuePriorityLow = -4;
  static const int NSOperationQueuePriorityNormal = 0;
  static const int NSOperationQueuePriorityHigh = 4;
  static const int NSOperationQueuePriorityVeryHigh = 8;
}

final class dispatch_queue_s extends ffi.Opaque {}

class NSPointerArray extends NSObject {
  NSPointerArray._(
    ffi.Pointer<objc.ObjCObject> pointer,
    AVFAudio lib, {
    bool retain = false,
    bool release = false,
  }) : super._(pointer, lib, retain: retain, release: release);

  /// Returns a [NSPointerArray] that points to the same underlying object as [other].
  static NSPointerArray castFrom<T extends objc.ObjCObjectBase>(
    AVFAudio lib,
    T other,
  ) {
    return NSPointerArray._(other.pointer, lib, retain: true, release: true);
  }

  /// Returns a [NSPointerArray] that wraps the given raw object pointer.
  static NSPointerArray castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCObject> other, {
    bool retain = false,
    bool release = false,
  }) {
    return NSPointerArray._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSPointerArray].
  static bool isInstance(AVFAudio lib, objc.ObjCObjectBase obj) {
    return lib._objc_msgSend_0(
      obj.pointer,
      lib._sel_isKindOfClass_1,
      lib._class_NSPointerArray1,
    );
  }

  NSPointerArray initWithOptions_(int options) {
    final _ret = _lib._objc_msgSend_918(
      this.pointer,
      _lib._sel_initWithOptions_1,
      options,
    );
    return NSPointerArray._(_ret, _lib, retain: true, release: true);
  }

  NSPointerArray initWithPointerFunctions_(NSPointerFunctions functions) {
    final _ret = _lib._objc_msgSend_932(
      this.pointer,
      _lib._sel_initWithPointerFunctions_1,
      functions.pointer,
    );
    return NSPointerArray._(_ret, _lib, retain: true, release: true);
  }

  static NSPointerArray pointerArrayWithOptions_(AVFAudio _lib, int options) {
    final _ret = _lib._objc_msgSend_933(
      _lib._class_NSPointerArray1,
      _lib._sel_pointerArrayWithOptions_1,
      options,
    );
    return NSPointerArray._(_ret, _lib, retain: true, release: true);
  }

  static NSPointerArray pointerArrayWithPointerFunctions_(
    AVFAudio _lib,
    NSPointerFunctions functions,
  ) {
    final _ret = _lib._objc_msgSend_934(
      _lib._class_NSPointerArray1,
      _lib._sel_pointerArrayWithPointerFunctions_1,
      functions.pointer,
    );
    return NSPointerArray._(_ret, _lib, retain: true, release: true);
  }

  NSPointerFunctions get pointerFunctions {
    final _ret = _lib._objc_msgSend_935(
      this.pointer,
      _lib._sel_pointerFunctions1,
    );
    return NSPointerFunctions._(_ret, _lib, retain: true, release: true);
  }

  ffi.Pointer<ffi.Void> pointerAtIndex_(int index) {
    return _lib._objc_msgSend_936(
      this.pointer,
      _lib._sel_pointerAtIndex_1,
      index,
    );
  }

  void addPointer_(ffi.Pointer<ffi.Void> pointer) {
    _lib._objc_msgSend_52(this.pointer, _lib._sel_addPointer_1, pointer);
  }

  void removePointerAtIndex_(int index) {
    _lib._objc_msgSend_470(
      this.pointer,
      _lib._sel_removePointerAtIndex_1,
      index,
    );
  }

  void insertPointer_atIndex_(ffi.Pointer<ffi.Void> item, int index) {
    _lib._objc_msgSend_22(
      this.pointer,
      _lib._sel_insertPointer_atIndex_1,
      item,
      index,
    );
  }

  void replacePointerAtIndex_withPointer_(
    int index,
    ffi.Pointer<ffi.Void> item,
  ) {
    _lib._objc_msgSend_937(
      this.pointer,
      _lib._sel_replacePointerAtIndex_withPointer_1,
      index,
      item,
    );
  }

  void compact() {
    _lib._objc_msgSend_1(this.pointer, _lib._sel_compact1);
  }

  int get count {
    return _lib._objc_msgSend_10(this.pointer, _lib._sel_count1);
  }

  set count(int value) {
    return _lib._objc_msgSend_516(this.pointer, _lib._sel_setCount_1, value);
  }

  static NSObject pointerArrayWithStrongObjects(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSPointerArray1,
      _lib._sel_pointerArrayWithStrongObjects1,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject pointerArrayWithWeakObjects(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSPointerArray1,
      _lib._sel_pointerArrayWithWeakObjects1,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSPointerArray strongObjectsPointerArray(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_938(
      _lib._class_NSPointerArray1,
      _lib._sel_strongObjectsPointerArray1,
    );
    return NSPointerArray._(_ret, _lib, retain: true, release: true);
  }

  static NSPointerArray weakObjectsPointerArray(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_938(
      _lib._class_NSPointerArray1,
      _lib._sel_weakObjectsPointerArray1,
    );
    return NSPointerArray._(_ret, _lib, retain: true, release: true);
  }

  NSArray get allObjects {
    final _ret = _lib._objc_msgSend_85(this.pointer, _lib._sel_allObjects1);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSPointerArray init() {
    final _ret = _lib._objc_msgSend_2(this.pointer, _lib._sel_init1);
    return NSPointerArray._(_ret, _lib, retain: true, release: true);
  }

  static NSPointerArray new1(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSPointerArray1,
      _lib._sel_new1,
    );
    return NSPointerArray._(_ret, _lib, retain: false, release: true);
  }

  static NSPointerArray allocWithZone_(
    AVFAudio _lib,
    ffi.Pointer<_NSZone> zone,
  ) {
    final _ret = _lib._objc_msgSend_3(
      _lib._class_NSPointerArray1,
      _lib._sel_allocWithZone_1,
      zone,
    );
    return NSPointerArray._(_ret, _lib, retain: false, release: true);
  }

  static NSPointerArray alloc(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSPointerArray1,
      _lib._sel_alloc1,
    );
    return NSPointerArray._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
    AVFAudio _lib,
    NSObject aTarget,
    ffi.Pointer<objc.ObjCSelector> aSelector,
    NSObject? anArgument,
  ) {
    _lib._objc_msgSend_14(
      _lib._class_NSPointerArray1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
      aTarget.pointer,
      aSelector,
      anArgument?.pointer ?? ffi.nullptr,
    );
  }

  static void cancelPreviousPerformRequestsWithTarget_(
    AVFAudio _lib,
    NSObject aTarget,
  ) {
    _lib._objc_msgSend_15(
      _lib._class_NSPointerArray1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_1,
      aTarget.pointer,
    );
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSPointerArray1,
      _lib._sel_accessInstanceVariablesDirectly1,
    );
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSPointerArray1,
      _lib._sel_useStoredAccessor1,
    );
  }

  static NSSet keyPathsForValuesAffectingValueForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    final _ret = _lib._objc_msgSend_63(
      _lib._class_NSPointerArray1,
      _lib._sel_keyPathsForValuesAffectingValueForKey_1,
      key.pointer,
    );
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    return _lib._objc_msgSend_64(
      _lib._class_NSPointerArray1,
      _lib._sel_automaticallyNotifiesObserversForKey_1,
      key.pointer,
    );
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
    AVFAudio _lib,
    NSArray keys,
    NSString dependentKey,
  ) {
    _lib._objc_msgSend_88(
      _lib._class_NSPointerArray1,
      _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
      keys.pointer,
      dependentKey.pointer,
    );
  }

  static NSArray classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_85(
      _lib._class_NSPointerArray1,
      _lib._sel_classFallbacksForKeyedArchiver1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSPointerArray1,
      _lib._sel_classForKeyedUnarchiver1,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

abstract class NSPointerFunctionsOptions {
  static const int NSPointerFunctionsStrongMemory = 0;
  static const int NSPointerFunctionsZeroingWeakMemory = 1;
  static const int NSPointerFunctionsOpaqueMemory = 2;
  static const int NSPointerFunctionsMallocMemory = 3;
  static const int NSPointerFunctionsMachVirtualMemory = 4;
  static const int NSPointerFunctionsWeakMemory = 5;
  static const int NSPointerFunctionsObjectPersonality = 0;
  static const int NSPointerFunctionsOpaquePersonality = 256;
  static const int NSPointerFunctionsObjectPointerPersonality = 512;
  static const int NSPointerFunctionsCStringPersonality = 768;
  static const int NSPointerFunctionsStructPersonality = 1024;
  static const int NSPointerFunctionsIntegerPersonality = 1280;
  static const int NSPointerFunctionsCopyIn = 65536;
}

class NSPointerFunctions extends NSObject {
  NSPointerFunctions._(
    ffi.Pointer<objc.ObjCObject> pointer,
    AVFAudio lib, {
    bool retain = false,
    bool release = false,
  }) : super._(pointer, lib, retain: retain, release: release);

  /// Returns a [NSPointerFunctions] that points to the same underlying object as [other].
  static NSPointerFunctions castFrom<T extends objc.ObjCObjectBase>(
    AVFAudio lib,
    T other,
  ) {
    return NSPointerFunctions._(
      other.pointer,
      lib,
      retain: true,
      release: true,
    );
  }

  /// Returns a [NSPointerFunctions] that wraps the given raw object pointer.
  static NSPointerFunctions castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCObject> other, {
    bool retain = false,
    bool release = false,
  }) {
    return NSPointerFunctions._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSPointerFunctions].
  static bool isInstance(AVFAudio lib, objc.ObjCObjectBase obj) {
    return lib._objc_msgSend_0(
      obj.pointer,
      lib._sel_isKindOfClass_1,
      lib._class_NSPointerFunctions1,
    );
  }

  NSPointerFunctions initWithOptions_(int options) {
    final _ret = _lib._objc_msgSend_918(
      this.pointer,
      _lib._sel_initWithOptions_1,
      options,
    );
    return NSPointerFunctions._(_ret, _lib, retain: true, release: true);
  }

  static NSPointerFunctions pointerFunctionsWithOptions_(
    AVFAudio _lib,
    int options,
  ) {
    final _ret = _lib._objc_msgSend_919(
      _lib._class_NSPointerFunctions1,
      _lib._sel_pointerFunctionsWithOptions_1,
      options,
    );
    return NSPointerFunctions._(_ret, _lib, retain: true, release: true);
  }

  ffi.Pointer<
    ffi.NativeFunction<
      ffi.UnsignedLong Function(
        ffi.Pointer<ffi.Void>,
        ffi.Pointer<
          ffi.NativeFunction<ffi.UnsignedLong Function(ffi.Pointer<ffi.Void>)>
        >,
      )
    >
  >
  get hashFunction {
    return _lib._objc_msgSend_920(this.pointer, _lib._sel_hashFunction1);
  }

  set hashFunction(
    ffi.Pointer<
      ffi.NativeFunction<
        ffi.UnsignedLong Function(
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<
            ffi.NativeFunction<ffi.UnsignedLong Function(ffi.Pointer<ffi.Void>)>
          >,
        )
      >
    > value,
  ) {
    return _lib._objc_msgSend_921(
      this.pointer,
      _lib._sel_setHashFunction_1,
      value,
    );
  }

  ffi.Pointer<
    ffi.NativeFunction<
      ffi.Bool Function(
        ffi.Pointer<ffi.Void>,
        ffi.Pointer<ffi.Void>,
        ffi.Pointer<
          ffi.NativeFunction<ffi.UnsignedLong Function(ffi.Pointer<ffi.Void>)>
        >,
      )
    >
  >
  get isEqualFunction {
    return _lib._objc_msgSend_922(this.pointer, _lib._sel_isEqualFunction1);
  }

  set isEqualFunction(
    ffi.Pointer<
      ffi.NativeFunction<
        ffi.Bool Function(
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<
            ffi.NativeFunction<ffi.UnsignedLong Function(ffi.Pointer<ffi.Void>)>
          >,
        )
      >
    > value,
  ) {
    return _lib._objc_msgSend_923(
      this.pointer,
      _lib._sel_setIsEqualFunction_1,
      value,
    );
  }

  ffi.Pointer<
    ffi.NativeFunction<ffi.UnsignedLong Function(ffi.Pointer<ffi.Void>)>
  >
  get sizeFunction {
    return _lib._objc_msgSend_924(this.pointer, _lib._sel_sizeFunction1);
  }

  set sizeFunction(
    ffi.Pointer<
      ffi.NativeFunction<ffi.UnsignedLong Function(ffi.Pointer<ffi.Void>)>
    > value,
  ) {
    return _lib._objc_msgSend_925(
      this.pointer,
      _lib._sel_setSizeFunction_1,
      value,
    );
  }

  ffi.Pointer<
    ffi.NativeFunction<
      ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<ffi.Void>)
    >
  >
  get descriptionFunction {
    return _lib._objc_msgSend_926(this.pointer, _lib._sel_descriptionFunction1);
  }

  set descriptionFunction(
    ffi.Pointer<
      ffi.NativeFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<ffi.Void>)
      >
    > value,
  ) {
    return _lib._objc_msgSend_927(
      this.pointer,
      _lib._sel_setDescriptionFunction_1,
      value,
    );
  }

  ffi.Pointer<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<ffi.Void>,
        ffi.Pointer<
          ffi.NativeFunction<ffi.UnsignedLong Function(ffi.Pointer<ffi.Void>)>
        >,
      )
    >
  >
  get relinquishFunction {
    return _lib._objc_msgSend_928(this.pointer, _lib._sel_relinquishFunction1);
  }

  set relinquishFunction(
    ffi.Pointer<
      ffi.NativeFunction<
        ffi.Void Function(
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<
            ffi.NativeFunction<ffi.UnsignedLong Function(ffi.Pointer<ffi.Void>)>
          >,
        )
      >
    > value,
  ) {
    return _lib._objc_msgSend_929(
      this.pointer,
      _lib._sel_setRelinquishFunction_1,
      value,
    );
  }

  ffi.Pointer<
    ffi.NativeFunction<
      ffi.Pointer<ffi.Void> Function(
        ffi.Pointer<ffi.Void>,
        ffi.Pointer<
          ffi.NativeFunction<ffi.UnsignedLong Function(ffi.Pointer<ffi.Void>)>
        >,
        ffi.Bool,
      )
    >
  >
  get acquireFunction {
    return _lib._objc_msgSend_930(this.pointer, _lib._sel_acquireFunction1);
  }

  set acquireFunction(
    ffi.Pointer<
      ffi.NativeFunction<
        ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<
            ffi.NativeFunction<ffi.UnsignedLong Function(ffi.Pointer<ffi.Void>)>
          >,
          ffi.Bool,
        )
      >
    > value,
  ) {
    return _lib._objc_msgSend_931(
      this.pointer,
      _lib._sel_setAcquireFunction_1,
      value,
    );
  }

  bool get usesStrongWriteBarrier {
    return _lib._objc_msgSend_12(
      this.pointer,
      _lib._sel_usesStrongWriteBarrier1,
    );
  }

  set usesStrongWriteBarrier(bool value) {
    return _lib._objc_msgSend_527(
      this.pointer,
      _lib._sel_setUsesStrongWriteBarrier_1,
      value,
    );
  }

  bool get usesWeakReadAndWriteBarriers {
    return _lib._objc_msgSend_12(
      this.pointer,
      _lib._sel_usesWeakReadAndWriteBarriers1,
    );
  }

  set usesWeakReadAndWriteBarriers(bool value) {
    return _lib._objc_msgSend_527(
      this.pointer,
      _lib._sel_setUsesWeakReadAndWriteBarriers_1,
      value,
    );
  }

  @override
  NSPointerFunctions init() {
    final _ret = _lib._objc_msgSend_2(this.pointer, _lib._sel_init1);
    return NSPointerFunctions._(_ret, _lib, retain: true, release: true);
  }

  static NSPointerFunctions new1(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSPointerFunctions1,
      _lib._sel_new1,
    );
    return NSPointerFunctions._(_ret, _lib, retain: false, release: true);
  }

  static NSPointerFunctions allocWithZone_(
    AVFAudio _lib,
    ffi.Pointer<_NSZone> zone,
  ) {
    final _ret = _lib._objc_msgSend_3(
      _lib._class_NSPointerFunctions1,
      _lib._sel_allocWithZone_1,
      zone,
    );
    return NSPointerFunctions._(_ret, _lib, retain: false, release: true);
  }

  static NSPointerFunctions alloc(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSPointerFunctions1,
      _lib._sel_alloc1,
    );
    return NSPointerFunctions._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
    AVFAudio _lib,
    NSObject aTarget,
    ffi.Pointer<objc.ObjCSelector> aSelector,
    NSObject? anArgument,
  ) {
    _lib._objc_msgSend_14(
      _lib._class_NSPointerFunctions1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
      aTarget.pointer,
      aSelector,
      anArgument?.pointer ?? ffi.nullptr,
    );
  }

  static void cancelPreviousPerformRequestsWithTarget_(
    AVFAudio _lib,
    NSObject aTarget,
  ) {
    _lib._objc_msgSend_15(
      _lib._class_NSPointerFunctions1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_1,
      aTarget.pointer,
    );
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSPointerFunctions1,
      _lib._sel_accessInstanceVariablesDirectly1,
    );
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSPointerFunctions1,
      _lib._sel_useStoredAccessor1,
    );
  }

  static NSSet keyPathsForValuesAffectingValueForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    final _ret = _lib._objc_msgSend_63(
      _lib._class_NSPointerFunctions1,
      _lib._sel_keyPathsForValuesAffectingValueForKey_1,
      key.pointer,
    );
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    return _lib._objc_msgSend_64(
      _lib._class_NSPointerFunctions1,
      _lib._sel_automaticallyNotifiesObserversForKey_1,
      key.pointer,
    );
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
    AVFAudio _lib,
    NSArray keys,
    NSString dependentKey,
  ) {
    _lib._objc_msgSend_88(
      _lib._class_NSPointerFunctions1,
      _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
      keys.pointer,
      dependentKey.pointer,
    );
  }

  static NSArray classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_85(
      _lib._class_NSPointerFunctions1,
      _lib._sel_classFallbacksForKeyedArchiver1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSPointerFunctions1,
      _lib._sel_classForKeyedUnarchiver1,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

class NSProcessInfo extends NSObject {
  NSProcessInfo._(
    ffi.Pointer<objc.ObjCObject> pointer,
    AVFAudio lib, {
    bool retain = false,
    bool release = false,
  }) : super._(pointer, lib, retain: retain, release: release);

  /// Returns a [NSProcessInfo] that points to the same underlying object as [other].
  static NSProcessInfo castFrom<T extends objc.ObjCObjectBase>(
    AVFAudio lib,
    T other,
  ) {
    return NSProcessInfo._(other.pointer, lib, retain: true, release: true);
  }

  /// Returns a [NSProcessInfo] that wraps the given raw object pointer.
  static NSProcessInfo castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCObject> other, {
    bool retain = false,
    bool release = false,
  }) {
    return NSProcessInfo._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSProcessInfo].
  static bool isInstance(AVFAudio lib, objc.ObjCObjectBase obj) {
    return lib._objc_msgSend_0(
      obj.pointer,
      lib._sel_isKindOfClass_1,
      lib._class_NSProcessInfo1,
    );
  }

  static NSProcessInfo getProcessInfo(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_939(
      _lib._class_NSProcessInfo1,
      _lib._sel_processInfo1,
    );
    return NSProcessInfo._(_ret, _lib, retain: true, release: true);
  }

  NSDictionary get environment {
    final _ret = _lib._objc_msgSend_181(this.pointer, _lib._sel_environment1);
    return NSDictionary._(_ret, _lib, retain: true, release: true);
  }

  NSArray get arguments {
    final _ret = _lib._objc_msgSend_85(this.pointer, _lib._sel_arguments1);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSString get hostName {
    final _ret = _lib._objc_msgSend_21(this.pointer, _lib._sel_hostName1);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString get processName {
    final _ret = _lib._objc_msgSend_21(this.pointer, _lib._sel_processName1);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  set processName(NSString value) {
    return _lib._objc_msgSend_646(
      this.pointer,
      _lib._sel_setProcessName_1,
      value.pointer,
    );
  }

  int get processIdentifier {
    return _lib._objc_msgSend_237(this.pointer, _lib._sel_processIdentifier1);
  }

  NSString get globallyUniqueString {
    final _ret = _lib._objc_msgSend_21(
      this.pointer,
      _lib._sel_globallyUniqueString1,
    );
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  int operatingSystem() {
    return _lib._objc_msgSend_10(this.pointer, _lib._sel_operatingSystem1);
  }

  NSString operatingSystemName() {
    final _ret = _lib._objc_msgSend_21(
      this.pointer,
      _lib._sel_operatingSystemName1,
    );
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString get operatingSystemVersionString {
    final _ret = _lib._objc_msgSend_21(
      this.pointer,
      _lib._sel_operatingSystemVersionString1,
    );
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  void getOperatingSystemVersion(ffi.Pointer<NSOperatingSystemVersion> stret) {
    objc.useMsgSendVariants
        ? _lib._objc_msgSend_940_stret(
          stret,
          this.pointer,
          _lib._sel_operatingSystemVersion1,
        )
        : stret.ref = _lib._objc_msgSend_940(
          this.pointer,
          _lib._sel_operatingSystemVersion1,
        );
  }

  int get processorCount {
    return _lib._objc_msgSend_10(this.pointer, _lib._sel_processorCount1);
  }

  int get activeProcessorCount {
    return _lib._objc_msgSend_10(this.pointer, _lib._sel_activeProcessorCount1);
  }

  int get physicalMemory {
    return _lib._objc_msgSend_164(this.pointer, _lib._sel_physicalMemory1);
  }

  bool isOperatingSystemAtLeastVersion_(NSOperatingSystemVersion version) {
    return _lib._objc_msgSend_941(
      this.pointer,
      _lib._sel_isOperatingSystemAtLeastVersion_1,
      version,
    );
  }

  double get systemUptime {
    return objc.useMsgSendVariants
        ? _lib._objc_msgSend_165_fpret(this.pointer, _lib._sel_systemUptime1)
        : _lib._objc_msgSend_165(this.pointer, _lib._sel_systemUptime1);
  }

  void disableSuddenTermination() {
    _lib._objc_msgSend_1(this.pointer, _lib._sel_disableSuddenTermination1);
  }

  void enableSuddenTermination() {
    _lib._objc_msgSend_1(this.pointer, _lib._sel_enableSuddenTermination1);
  }

  void disableAutomaticTermination_(NSString reason) {
    _lib._objc_msgSend_247(
      this.pointer,
      _lib._sel_disableAutomaticTermination_1,
      reason.pointer,
    );
  }

  void enableAutomaticTermination_(NSString reason) {
    _lib._objc_msgSend_247(
      this.pointer,
      _lib._sel_enableAutomaticTermination_1,
      reason.pointer,
    );
  }

  bool get automaticTerminationSupportEnabled {
    return _lib._objc_msgSend_12(
      this.pointer,
      _lib._sel_automaticTerminationSupportEnabled1,
    );
  }

  set automaticTerminationSupportEnabled(bool value) {
    return _lib._objc_msgSend_527(
      this.pointer,
      _lib._sel_setAutomaticTerminationSupportEnabled_1,
      value,
    );
  }

  NSObject beginActivityWithOptions_reason_(int options, NSString reason) {
    final _ret = _lib._objc_msgSend_942(
      this.pointer,
      _lib._sel_beginActivityWithOptions_reason_1,
      options,
      reason.pointer,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  void endActivity_(NSObject activity) {
    _lib._objc_msgSend_15(
      this.pointer,
      _lib._sel_endActivity_1,
      activity.pointer,
    );
  }

  void performActivityWithOptions_reason_usingBlock_(
    int options,
    NSString reason,
    ObjCBlock_ffiVoid block,
  ) {
    _lib._objc_msgSend_943(
      this.pointer,
      _lib._sel_performActivityWithOptions_reason_usingBlock_1,
      options,
      reason.pointer,
      block.pointer,
    );
  }

  void performExpiringActivityWithReason_usingBlock_(
    NSString reason,
    ObjCBlock_ffiVoid_bool block,
  ) {
    _lib._objc_msgSend_944(
      this.pointer,
      _lib._sel_performExpiringActivityWithReason_usingBlock_1,
      reason.pointer,
      block.pointer,
    );
  }

  NSString get userName {
    final _ret = _lib._objc_msgSend_21(this.pointer, _lib._sel_userName1);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString get fullUserName {
    final _ret = _lib._objc_msgSend_21(this.pointer, _lib._sel_fullUserName1);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  int get thermalState {
    return _lib._objc_msgSend_945(this.pointer, _lib._sel_thermalState1);
  }

  bool get lowPowerModeEnabled {
    return _lib._objc_msgSend_12(
      this.pointer,
      _lib._sel_isLowPowerModeEnabled1,
    );
  }

  bool get macCatalystApp {
    return _lib._objc_msgSend_12(this.pointer, _lib._sel_isMacCatalystApp1);
  }

  bool get iOSAppOnMac {
    return _lib._objc_msgSend_12(this.pointer, _lib._sel_isiOSAppOnMac1);
  }

  @override
  NSProcessInfo init() {
    final _ret = _lib._objc_msgSend_2(this.pointer, _lib._sel_init1);
    return NSProcessInfo._(_ret, _lib, retain: true, release: true);
  }

  static NSProcessInfo new1(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSProcessInfo1,
      _lib._sel_new1,
    );
    return NSProcessInfo._(_ret, _lib, retain: false, release: true);
  }

  static NSProcessInfo allocWithZone_(
    AVFAudio _lib,
    ffi.Pointer<_NSZone> zone,
  ) {
    final _ret = _lib._objc_msgSend_3(
      _lib._class_NSProcessInfo1,
      _lib._sel_allocWithZone_1,
      zone,
    );
    return NSProcessInfo._(_ret, _lib, retain: false, release: true);
  }

  static NSProcessInfo alloc(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSProcessInfo1,
      _lib._sel_alloc1,
    );
    return NSProcessInfo._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
    AVFAudio _lib,
    NSObject aTarget,
    ffi.Pointer<objc.ObjCSelector> aSelector,
    NSObject? anArgument,
  ) {
    _lib._objc_msgSend_14(
      _lib._class_NSProcessInfo1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
      aTarget.pointer,
      aSelector,
      anArgument?.pointer ?? ffi.nullptr,
    );
  }

  static void cancelPreviousPerformRequestsWithTarget_(
    AVFAudio _lib,
    NSObject aTarget,
  ) {
    _lib._objc_msgSend_15(
      _lib._class_NSProcessInfo1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_1,
      aTarget.pointer,
    );
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSProcessInfo1,
      _lib._sel_accessInstanceVariablesDirectly1,
    );
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSProcessInfo1,
      _lib._sel_useStoredAccessor1,
    );
  }

  static NSSet keyPathsForValuesAffectingValueForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    final _ret = _lib._objc_msgSend_63(
      _lib._class_NSProcessInfo1,
      _lib._sel_keyPathsForValuesAffectingValueForKey_1,
      key.pointer,
    );
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    return _lib._objc_msgSend_64(
      _lib._class_NSProcessInfo1,
      _lib._sel_automaticallyNotifiesObserversForKey_1,
      key.pointer,
    );
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
    AVFAudio _lib,
    NSArray keys,
    NSString dependentKey,
  ) {
    _lib._objc_msgSend_88(
      _lib._class_NSProcessInfo1,
      _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
      keys.pointer,
      dependentKey.pointer,
    );
  }

  static NSArray classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_85(
      _lib._class_NSProcessInfo1,
      _lib._sel_classFallbacksForKeyedArchiver1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSProcessInfo1,
      _lib._sel_classForKeyedUnarchiver1,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

final class NSOperatingSystemVersion extends ffi.Struct {
  @ffi.Long()
  external int majorVersion;

  @ffi.Long()
  external int minorVersion;

  @ffi.Long()
  external int patchVersion;
}

abstract class NSActivityOptions {
  static const int NSActivityIdleDisplaySleepDisabled = 1099511627776;
  static const int NSActivityIdleSystemSleepDisabled = 1048576;
  static const int NSActivitySuddenTerminationDisabled = 16384;
  static const int NSActivityAutomaticTerminationDisabled = 32768;
  static const int NSActivityAnimationTrackingEnabled = 35184372088832;
  static const int NSActivityTrackingEnabled = 70368744177664;
  static const int NSActivityUserInitiated = 16777215;
  static const int NSActivityUserInitiatedAllowingIdleSystemSleep = 15728639;
  static const int NSActivityBackground = 255;
  static const int NSActivityLatencyCritical = 1095216660480;
  static const int NSActivityUserInteractive = 1095233437695;
}

void _ObjCBlock_ffiVoid_bool_fnPtrTrampoline(
  ffi.Pointer<objc.ObjCBlock> block,
  bool arg0,
) => block.ref.target
    .cast<ffi.NativeFunction<ffi.Void Function(ffi.Bool arg0)>>()
    .asFunction<void Function(bool)>()(arg0);
final _ObjCBlock_ffiVoid_bool_closureRegistry = <int, void Function(bool)>{};
int _ObjCBlock_ffiVoid_bool_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void> _ObjCBlock_ffiVoid_bool_registerClosure(
  void Function(bool) fn,
) {
  final id = ++_ObjCBlock_ffiVoid_bool_closureRegistryIndex;
  _ObjCBlock_ffiVoid_bool_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

void _ObjCBlock_ffiVoid_bool_closureTrampoline(
  ffi.Pointer<objc.ObjCBlock> block,
  bool arg0,
) => _ObjCBlock_ffiVoid_bool_closureRegistry[block.ref.target.address]!(arg0);

class ObjCBlock_ffiVoid_bool extends objc.ObjCBlockBase {
  ObjCBlock_ffiVoid_bool._(
    ffi.Pointer<objc.ObjCBlock> pointer,
    this._lib, {
    bool retain = false,
    bool release = true,
  }) : super(pointer, retain: retain, release: release);

  AVFAudio _lib;

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_ffiVoid_bool castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCBlock> pointer, {
    bool retain = false,
    bool release = false,
  }) {
    return ObjCBlock_ffiVoid_bool._(
      pointer,
      lib,
      retain: retain,
      release: release,
    );
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_bool.fromFunctionPointer(
    AVFAudio lib,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Bool arg0)>> ptr,
  ) : this._(objc.newBlock(
        _cFuncTrampoline ??=
            ffi.Pointer.fromFunction<
              ffi.Void Function(ffi.Pointer<objc.ObjCBlock>, ffi.Bool)
            >(_ObjCBlock_ffiVoid_bool_fnPtrTrampoline).cast(),
        ptr.cast(),
      ), lib);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_bool.fromFunction(AVFAudio lib, void Function(bool) fn)
    : this._(objc.newBlock(
        _dartFuncTrampoline ??=
            ffi.Pointer.fromFunction<
              ffi.Void Function(ffi.Pointer<objc.ObjCBlock>, ffi.Bool)
            >(_ObjCBlock_ffiVoid_bool_closureTrampoline).cast(),
        _ObjCBlock_ffiVoid_bool_registerClosure((bool arg0) => fn(arg0)),
      ), lib);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_bool.listener(AVFAudio lib, void Function(bool) fn)
    : this._(objc.newBlock(
        (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
              ffi.Void Function(ffi.Pointer<objc.ObjCBlock>, ffi.Bool)
            >.listener(
              _ObjCBlock_ffiVoid_bool_closureTrampoline,
            )..keepIsolateAlive = false)
            .nativeFunction
            .cast(),
        _ObjCBlock_ffiVoid_bool_registerClosure((bool arg0) => fn(arg0)),
      ), lib);
  static ffi.NativeCallable<
    ffi.Void Function(ffi.Pointer<objc.ObjCBlock>, ffi.Bool)
  >? _dartFuncListenerTrampoline;

  void call(bool arg0) => pointer.ref.invoke
      .cast<
        ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<objc.ObjCBlock> block, ffi.Bool arg0)
        >
      >()
      .asFunction<void Function(ffi.Pointer<objc.ObjCBlock>, bool)>()(
    pointer,
    arg0,
  );
}

abstract class NSProcessInfoThermalState {
  static const int NSProcessInfoThermalStateNominal = 0;
  static const int NSProcessInfoThermalStateFair = 1;
  static const int NSProcessInfoThermalStateSerious = 2;
  static const int NSProcessInfoThermalStateCritical = 3;
}

class NSTextCheckingResult extends NSObject {
  NSTextCheckingResult._(
    ffi.Pointer<objc.ObjCObject> pointer,
    AVFAudio lib, {
    bool retain = false,
    bool release = false,
  }) : super._(pointer, lib, retain: retain, release: release);

  /// Returns a [NSTextCheckingResult] that points to the same underlying object as [other].
  static NSTextCheckingResult castFrom<T extends objc.ObjCObjectBase>(
    AVFAudio lib,
    T other,
  ) {
    return NSTextCheckingResult._(
      other.pointer,
      lib,
      retain: true,
      release: true,
    );
  }

  /// Returns a [NSTextCheckingResult] that wraps the given raw object pointer.
  static NSTextCheckingResult castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCObject> other, {
    bool retain = false,
    bool release = false,
  }) {
    return NSTextCheckingResult._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSTextCheckingResult].
  static bool isInstance(AVFAudio lib, objc.ObjCObjectBase obj) {
    return lib._objc_msgSend_0(
      obj.pointer,
      lib._sel_isKindOfClass_1,
      lib._class_NSTextCheckingResult1,
    );
  }

  int get resultType {
    return _lib._objc_msgSend_946(this.pointer, _lib._sel_resultType1);
  }

  void getRange(ffi.Pointer<_NSRange> stret) {
    objc.useMsgSendVariants
        ? _lib._objc_msgSend_54_stret(stret, this.pointer, _lib._sel_range1)
        : stret.ref = _lib._objc_msgSend_54(this.pointer, _lib._sel_range1);
  }

  NSOrthography? get orthography {
    final _ret = _lib._objc_msgSend_947(this.pointer, _lib._sel_orthography1);
    return _ret.address == 0
        ? null
        : NSOrthography._(_ret, _lib, retain: true, release: true);
  }

  NSArray? get grammarDetails {
    final _ret = _lib._objc_msgSend_84(this.pointer, _lib._sel_grammarDetails1);
    return _ret.address == 0
        ? null
        : NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSDate? get date {
    final _ret = _lib._objc_msgSend_183(this.pointer, _lib._sel_date1);
    return _ret.address == 0
        ? null
        : NSDate._(_ret, _lib, retain: true, release: true);
  }

  NSTimeZone? get timeZone {
    final _ret = _lib._objc_msgSend_773(this.pointer, _lib._sel_timeZone1);
    return _ret.address == 0
        ? null
        : NSTimeZone._(_ret, _lib, retain: true, release: true);
  }

  double get duration {
    return objc.useMsgSendVariants
        ? _lib._objc_msgSend_165_fpret(this.pointer, _lib._sel_duration1)
        : _lib._objc_msgSend_165(this.pointer, _lib._sel_duration1);
  }

  NSDictionary? get components {
    final _ret = _lib._objc_msgSend_390(this.pointer, _lib._sel_components1);
    return _ret.address == 0
        ? null
        : NSDictionary._(_ret, _lib, retain: true, release: true);
  }

  NSURL? get URL {
    final _ret = _lib._objc_msgSend_45(this.pointer, _lib._sel_URL1);
    return _ret.address == 0
        ? null
        : NSURL._(_ret, _lib, retain: true, release: true);
  }

  NSString? get replacementString {
    final _ret = _lib._objc_msgSend_44(
      this.pointer,
      _lib._sel_replacementString1,
    );
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSArray? get alternativeStrings {
    final _ret = _lib._objc_msgSend_84(
      this.pointer,
      _lib._sel_alternativeStrings1,
    );
    return _ret.address == 0
        ? null
        : NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSRegularExpression? get regularExpression {
    final _ret = _lib._objc_msgSend_959(
      this.pointer,
      _lib._sel_regularExpression1,
    );
    return _ret.address == 0
        ? null
        : NSRegularExpression._(_ret, _lib, retain: true, release: true);
  }

  NSString? get phoneNumber {
    final _ret = _lib._objc_msgSend_44(this.pointer, _lib._sel_phoneNumber1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  int get numberOfRanges {
    return _lib._objc_msgSend_10(this.pointer, _lib._sel_numberOfRanges1);
  }

  void rangeAtIndex_(ffi.Pointer<_NSRange> stret, int idx) {
    objc.useMsgSendVariants
        ? _lib._objc_msgSend_347_stret(
          stret,
          this.pointer,
          _lib._sel_rangeAtIndex_1,
          idx,
        )
        : stret.ref = _lib._objc_msgSend_347(
          this.pointer,
          _lib._sel_rangeAtIndex_1,
          idx,
        );
  }

  void rangeWithName_(ffi.Pointer<_NSRange> stret, NSString name) {
    objc.useMsgSendVariants
        ? _lib._objc_msgSend_340_stret(
          stret,
          this.pointer,
          _lib._sel_rangeWithName_1,
          name.pointer,
        )
        : stret.ref = _lib._objc_msgSend_340(
          this.pointer,
          _lib._sel_rangeWithName_1,
          name.pointer,
        );
  }

  NSTextCheckingResult resultByAdjustingRangesWithOffset_(int offset) {
    final _ret = _lib._objc_msgSend_960(
      this.pointer,
      _lib._sel_resultByAdjustingRangesWithOffset_1,
      offset,
    );
    return NSTextCheckingResult._(_ret, _lib, retain: true, release: true);
  }

  NSDictionary? get addressComponents {
    final _ret = _lib._objc_msgSend_390(
      this.pointer,
      _lib._sel_addressComponents1,
    );
    return _ret.address == 0
        ? null
        : NSDictionary._(_ret, _lib, retain: true, release: true);
  }

  static NSTextCheckingResult orthographyCheckingResultWithRange_orthography_(
    AVFAudio _lib,
    _NSRange range,
    NSOrthography orthography,
  ) {
    final _ret = _lib._objc_msgSend_961(
      _lib._class_NSTextCheckingResult1,
      _lib._sel_orthographyCheckingResultWithRange_orthography_1,
      range,
      orthography.pointer,
    );
    return NSTextCheckingResult._(_ret, _lib, retain: true, release: true);
  }

  static NSTextCheckingResult spellCheckingResultWithRange_(
    AVFAudio _lib,
    _NSRange range,
  ) {
    final _ret = _lib._objc_msgSend_962(
      _lib._class_NSTextCheckingResult1,
      _lib._sel_spellCheckingResultWithRange_1,
      range,
    );
    return NSTextCheckingResult._(_ret, _lib, retain: true, release: true);
  }

  static NSTextCheckingResult grammarCheckingResultWithRange_details_(
    AVFAudio _lib,
    _NSRange range,
    NSArray details,
  ) {
    final _ret = _lib._objc_msgSend_963(
      _lib._class_NSTextCheckingResult1,
      _lib._sel_grammarCheckingResultWithRange_details_1,
      range,
      details.pointer,
    );
    return NSTextCheckingResult._(_ret, _lib, retain: true, release: true);
  }

  static NSTextCheckingResult dateCheckingResultWithRange_date_(
    AVFAudio _lib,
    _NSRange range,
    NSDate date,
  ) {
    final _ret = _lib._objc_msgSend_964(
      _lib._class_NSTextCheckingResult1,
      _lib._sel_dateCheckingResultWithRange_date_1,
      range,
      date.pointer,
    );
    return NSTextCheckingResult._(_ret, _lib, retain: true, release: true);
  }

  static NSTextCheckingResult
  dateCheckingResultWithRange_date_timeZone_duration_(
    AVFAudio _lib,
    _NSRange range,
    NSDate date,
    NSTimeZone timeZone,
    double duration,
  ) {
    final _ret = _lib._objc_msgSend_965(
      _lib._class_NSTextCheckingResult1,
      _lib._sel_dateCheckingResultWithRange_date_timeZone_duration_1,
      range,
      date.pointer,
      timeZone.pointer,
      duration,
    );
    return NSTextCheckingResult._(_ret, _lib, retain: true, release: true);
  }

  static NSTextCheckingResult addressCheckingResultWithRange_components_(
    AVFAudio _lib,
    _NSRange range,
    NSDictionary components,
  ) {
    final _ret = _lib._objc_msgSend_966(
      _lib._class_NSTextCheckingResult1,
      _lib._sel_addressCheckingResultWithRange_components_1,
      range,
      components.pointer,
    );
    return NSTextCheckingResult._(_ret, _lib, retain: true, release: true);
  }

  static NSTextCheckingResult linkCheckingResultWithRange_URL_(
    AVFAudio _lib,
    _NSRange range,
    NSURL url,
  ) {
    final _ret = _lib._objc_msgSend_967(
      _lib._class_NSTextCheckingResult1,
      _lib._sel_linkCheckingResultWithRange_URL_1,
      range,
      url.pointer,
    );
    return NSTextCheckingResult._(_ret, _lib, retain: true, release: true);
  }

  static NSTextCheckingResult quoteCheckingResultWithRange_replacementString_(
    AVFAudio _lib,
    _NSRange range,
    NSString replacementString,
  ) {
    final _ret = _lib._objc_msgSend_968(
      _lib._class_NSTextCheckingResult1,
      _lib._sel_quoteCheckingResultWithRange_replacementString_1,
      range,
      replacementString.pointer,
    );
    return NSTextCheckingResult._(_ret, _lib, retain: true, release: true);
  }

  static NSTextCheckingResult dashCheckingResultWithRange_replacementString_(
    AVFAudio _lib,
    _NSRange range,
    NSString replacementString,
  ) {
    final _ret = _lib._objc_msgSend_968(
      _lib._class_NSTextCheckingResult1,
      _lib._sel_dashCheckingResultWithRange_replacementString_1,
      range,
      replacementString.pointer,
    );
    return NSTextCheckingResult._(_ret, _lib, retain: true, release: true);
  }

  static NSTextCheckingResult
  replacementCheckingResultWithRange_replacementString_(
    AVFAudio _lib,
    _NSRange range,
    NSString replacementString,
  ) {
    final _ret = _lib._objc_msgSend_968(
      _lib._class_NSTextCheckingResult1,
      _lib._sel_replacementCheckingResultWithRange_replacementString_1,
      range,
      replacementString.pointer,
    );
    return NSTextCheckingResult._(_ret, _lib, retain: true, release: true);
  }

  static NSTextCheckingResult
  correctionCheckingResultWithRange_replacementString_(
    AVFAudio _lib,
    _NSRange range,
    NSString replacementString,
  ) {
    final _ret = _lib._objc_msgSend_968(
      _lib._class_NSTextCheckingResult1,
      _lib._sel_correctionCheckingResultWithRange_replacementString_1,
      range,
      replacementString.pointer,
    );
    return NSTextCheckingResult._(_ret, _lib, retain: true, release: true);
  }

  static NSTextCheckingResult
  correctionCheckingResultWithRange_replacementString_alternativeStrings_(
    AVFAudio _lib,
    _NSRange range,
    NSString replacementString,
    NSArray alternativeStrings,
  ) {
    final _ret = _lib._objc_msgSend_969(
      _lib._class_NSTextCheckingResult1,
      _lib._sel_correctionCheckingResultWithRange_replacementString_alternativeStrings_1,
      range,
      replacementString.pointer,
      alternativeStrings.pointer,
    );
    return NSTextCheckingResult._(_ret, _lib, retain: true, release: true);
  }

  static NSTextCheckingResult
  regularExpressionCheckingResultWithRanges_count_regularExpression_(
    AVFAudio _lib,
    ffi.Pointer<_NSRange> ranges,
    int count,
    NSRegularExpression regularExpression,
  ) {
    final _ret = _lib._objc_msgSend_970(
      _lib._class_NSTextCheckingResult1,
      _lib._sel_regularExpressionCheckingResultWithRanges_count_regularExpression_1,
      ranges,
      count,
      regularExpression.pointer,
    );
    return NSTextCheckingResult._(_ret, _lib, retain: true, release: true);
  }

  static NSTextCheckingResult phoneNumberCheckingResultWithRange_phoneNumber_(
    AVFAudio _lib,
    _NSRange range,
    NSString phoneNumber,
  ) {
    final _ret = _lib._objc_msgSend_968(
      _lib._class_NSTextCheckingResult1,
      _lib._sel_phoneNumberCheckingResultWithRange_phoneNumber_1,
      range,
      phoneNumber.pointer,
    );
    return NSTextCheckingResult._(_ret, _lib, retain: true, release: true);
  }

  static NSTextCheckingResult
  transitInformationCheckingResultWithRange_components_(
    AVFAudio _lib,
    _NSRange range,
    NSDictionary components,
  ) {
    final _ret = _lib._objc_msgSend_966(
      _lib._class_NSTextCheckingResult1,
      _lib._sel_transitInformationCheckingResultWithRange_components_1,
      range,
      components.pointer,
    );
    return NSTextCheckingResult._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSTextCheckingResult init() {
    final _ret = _lib._objc_msgSend_2(this.pointer, _lib._sel_init1);
    return NSTextCheckingResult._(_ret, _lib, retain: true, release: true);
  }

  static NSTextCheckingResult new1(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSTextCheckingResult1,
      _lib._sel_new1,
    );
    return NSTextCheckingResult._(_ret, _lib, retain: false, release: true);
  }

  static NSTextCheckingResult allocWithZone_(
    AVFAudio _lib,
    ffi.Pointer<_NSZone> zone,
  ) {
    final _ret = _lib._objc_msgSend_3(
      _lib._class_NSTextCheckingResult1,
      _lib._sel_allocWithZone_1,
      zone,
    );
    return NSTextCheckingResult._(_ret, _lib, retain: false, release: true);
  }

  static NSTextCheckingResult alloc(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSTextCheckingResult1,
      _lib._sel_alloc1,
    );
    return NSTextCheckingResult._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
    AVFAudio _lib,
    NSObject aTarget,
    ffi.Pointer<objc.ObjCSelector> aSelector,
    NSObject? anArgument,
  ) {
    _lib._objc_msgSend_14(
      _lib._class_NSTextCheckingResult1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
      aTarget.pointer,
      aSelector,
      anArgument?.pointer ?? ffi.nullptr,
    );
  }

  static void cancelPreviousPerformRequestsWithTarget_(
    AVFAudio _lib,
    NSObject aTarget,
  ) {
    _lib._objc_msgSend_15(
      _lib._class_NSTextCheckingResult1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_1,
      aTarget.pointer,
    );
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSTextCheckingResult1,
      _lib._sel_accessInstanceVariablesDirectly1,
    );
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSTextCheckingResult1,
      _lib._sel_useStoredAccessor1,
    );
  }

  static NSSet keyPathsForValuesAffectingValueForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    final _ret = _lib._objc_msgSend_63(
      _lib._class_NSTextCheckingResult1,
      _lib._sel_keyPathsForValuesAffectingValueForKey_1,
      key.pointer,
    );
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    return _lib._objc_msgSend_64(
      _lib._class_NSTextCheckingResult1,
      _lib._sel_automaticallyNotifiesObserversForKey_1,
      key.pointer,
    );
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
    AVFAudio _lib,
    NSArray keys,
    NSString dependentKey,
  ) {
    _lib._objc_msgSend_88(
      _lib._class_NSTextCheckingResult1,
      _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
      keys.pointer,
      dependentKey.pointer,
    );
  }

  static NSArray classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_85(
      _lib._class_NSTextCheckingResult1,
      _lib._sel_classFallbacksForKeyedArchiver1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSTextCheckingResult1,
      _lib._sel_classForKeyedUnarchiver1,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

abstract class NSTextCheckingType {
  static const int NSTextCheckingTypeOrthography = 1;
  static const int NSTextCheckingTypeSpelling = 2;
  static const int NSTextCheckingTypeGrammar = 4;
  static const int NSTextCheckingTypeDate = 8;
  static const int NSTextCheckingTypeAddress = 16;
  static const int NSTextCheckingTypeLink = 32;
  static const int NSTextCheckingTypeQuote = 64;
  static const int NSTextCheckingTypeDash = 128;
  static const int NSTextCheckingTypeReplacement = 256;
  static const int NSTextCheckingTypeCorrection = 512;
  static const int NSTextCheckingTypeRegularExpression = 1024;
  static const int NSTextCheckingTypePhoneNumber = 2048;
  static const int NSTextCheckingTypeTransitInformation = 4096;
}

class NSRegularExpression extends NSObject {
  NSRegularExpression._(
    ffi.Pointer<objc.ObjCObject> pointer,
    AVFAudio lib, {
    bool retain = false,
    bool release = false,
  }) : super._(pointer, lib, retain: retain, release: release);

  /// Returns a [NSRegularExpression] that points to the same underlying object as [other].
  static NSRegularExpression castFrom<T extends objc.ObjCObjectBase>(
    AVFAudio lib,
    T other,
  ) {
    return NSRegularExpression._(
      other.pointer,
      lib,
      retain: true,
      release: true,
    );
  }

  /// Returns a [NSRegularExpression] that wraps the given raw object pointer.
  static NSRegularExpression castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCObject> other, {
    bool retain = false,
    bool release = false,
  }) {
    return NSRegularExpression._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSRegularExpression].
  static bool isInstance(AVFAudio lib, objc.ObjCObjectBase obj) {
    return lib._objc_msgSend_0(
      obj.pointer,
      lib._sel_isKindOfClass_1,
      lib._class_NSRegularExpression1,
    );
  }

  static NSRegularExpression? regularExpressionWithPattern_options_error_(
    AVFAudio _lib,
    NSString pattern,
    int options,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    final _ret = _lib._objc_msgSend_948(
      _lib._class_NSRegularExpression1,
      _lib._sel_regularExpressionWithPattern_options_error_1,
      pattern.pointer,
      options,
      error,
    );
    return _ret.address == 0
        ? null
        : NSRegularExpression._(_ret, _lib, retain: true, release: true);
  }

  NSRegularExpression? initWithPattern_options_error_(
    NSString pattern,
    int options,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    final _ret = _lib._objc_msgSend_949(
      this.pointer,
      _lib._sel_initWithPattern_options_error_1,
      pattern.pointer,
      options,
      error,
    );
    return _ret.address == 0
        ? null
        : NSRegularExpression._(_ret, _lib, retain: true, release: true);
  }

  NSString get pattern {
    final _ret = _lib._objc_msgSend_21(this.pointer, _lib._sel_pattern1);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  int get options {
    return _lib._objc_msgSend_950(this.pointer, _lib._sel_options1);
  }

  int get numberOfCaptureGroups {
    return _lib._objc_msgSend_10(
      this.pointer,
      _lib._sel_numberOfCaptureGroups1,
    );
  }

  static NSString escapedPatternForString_(AVFAudio _lib, NSString string) {
    final _ret = _lib._objc_msgSend_69(
      _lib._class_NSRegularExpression1,
      _lib._sel_escapedPatternForString_1,
      string.pointer,
    );
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  void enumerateMatchesInString_options_range_usingBlock_(
    NSString string,
    int options,
    _NSRange range,
    ObjCBlock_ffiVoid_NSTextCheckingResult_NSMatchingFlags_bool block,
  ) {
    _lib._objc_msgSend_951(
      this.pointer,
      _lib._sel_enumerateMatchesInString_options_range_usingBlock_1,
      string.pointer,
      options,
      range,
      block.pointer,
    );
  }

  NSArray matchesInString_options_range_(
    NSString string,
    int options,
    _NSRange range,
  ) {
    final _ret = _lib._objc_msgSend_952(
      this.pointer,
      _lib._sel_matchesInString_options_range_1,
      string.pointer,
      options,
      range,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  int numberOfMatchesInString_options_range_(
    NSString string,
    int options,
    _NSRange range,
  ) {
    return _lib._objc_msgSend_953(
      this.pointer,
      _lib._sel_numberOfMatchesInString_options_range_1,
      string.pointer,
      options,
      range,
    );
  }

  NSTextCheckingResult? firstMatchInString_options_range_(
    NSString string,
    int options,
    _NSRange range,
  ) {
    final _ret = _lib._objc_msgSend_954(
      this.pointer,
      _lib._sel_firstMatchInString_options_range_1,
      string.pointer,
      options,
      range,
    );
    return _ret.address == 0
        ? null
        : NSTextCheckingResult._(_ret, _lib, retain: true, release: true);
  }

  void rangeOfFirstMatchInString_options_range_(
    ffi.Pointer<_NSRange> stret,
    NSString string,
    int options,
    _NSRange range,
  ) {
    objc.useMsgSendVariants
        ? _lib._objc_msgSend_955_stret(
          stret,
          this.pointer,
          _lib._sel_rangeOfFirstMatchInString_options_range_1,
          string.pointer,
          options,
          range,
        )
        : stret.ref = _lib._objc_msgSend_955(
          this.pointer,
          _lib._sel_rangeOfFirstMatchInString_options_range_1,
          string.pointer,
          options,
          range,
        );
  }

  NSString stringByReplacingMatchesInString_options_range_withTemplate_(
    NSString string,
    int options,
    _NSRange range,
    NSString templ,
  ) {
    final _ret = _lib._objc_msgSend_956(
      this.pointer,
      _lib._sel_stringByReplacingMatchesInString_options_range_withTemplate_1,
      string.pointer,
      options,
      range,
      templ.pointer,
    );
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  int replaceMatchesInString_options_range_withTemplate_(
    NSMutableString string,
    int options,
    _NSRange range,
    NSString templ,
  ) {
    return _lib._objc_msgSend_957(
      this.pointer,
      _lib._sel_replaceMatchesInString_options_range_withTemplate_1,
      string.pointer,
      options,
      range,
      templ.pointer,
    );
  }

  NSString replacementStringForResult_inString_offset_template_(
    NSTextCheckingResult result,
    NSString string,
    int offset,
    NSString templ,
  ) {
    final _ret = _lib._objc_msgSend_958(
      this.pointer,
      _lib._sel_replacementStringForResult_inString_offset_template_1,
      result.pointer,
      string.pointer,
      offset,
      templ.pointer,
    );
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  static NSString escapedTemplateForString_(AVFAudio _lib, NSString string) {
    final _ret = _lib._objc_msgSend_69(
      _lib._class_NSRegularExpression1,
      _lib._sel_escapedTemplateForString_1,
      string.pointer,
    );
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSRegularExpression init() {
    final _ret = _lib._objc_msgSend_2(this.pointer, _lib._sel_init1);
    return NSRegularExpression._(_ret, _lib, retain: true, release: true);
  }

  static NSRegularExpression new1(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSRegularExpression1,
      _lib._sel_new1,
    );
    return NSRegularExpression._(_ret, _lib, retain: false, release: true);
  }

  static NSRegularExpression allocWithZone_(
    AVFAudio _lib,
    ffi.Pointer<_NSZone> zone,
  ) {
    final _ret = _lib._objc_msgSend_3(
      _lib._class_NSRegularExpression1,
      _lib._sel_allocWithZone_1,
      zone,
    );
    return NSRegularExpression._(_ret, _lib, retain: false, release: true);
  }

  static NSRegularExpression alloc(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSRegularExpression1,
      _lib._sel_alloc1,
    );
    return NSRegularExpression._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
    AVFAudio _lib,
    NSObject aTarget,
    ffi.Pointer<objc.ObjCSelector> aSelector,
    NSObject? anArgument,
  ) {
    _lib._objc_msgSend_14(
      _lib._class_NSRegularExpression1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
      aTarget.pointer,
      aSelector,
      anArgument?.pointer ?? ffi.nullptr,
    );
  }

  static void cancelPreviousPerformRequestsWithTarget_(
    AVFAudio _lib,
    NSObject aTarget,
  ) {
    _lib._objc_msgSend_15(
      _lib._class_NSRegularExpression1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_1,
      aTarget.pointer,
    );
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSRegularExpression1,
      _lib._sel_accessInstanceVariablesDirectly1,
    );
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSRegularExpression1,
      _lib._sel_useStoredAccessor1,
    );
  }

  static NSSet keyPathsForValuesAffectingValueForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    final _ret = _lib._objc_msgSend_63(
      _lib._class_NSRegularExpression1,
      _lib._sel_keyPathsForValuesAffectingValueForKey_1,
      key.pointer,
    );
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    return _lib._objc_msgSend_64(
      _lib._class_NSRegularExpression1,
      _lib._sel_automaticallyNotifiesObserversForKey_1,
      key.pointer,
    );
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
    AVFAudio _lib,
    NSArray keys,
    NSString dependentKey,
  ) {
    _lib._objc_msgSend_88(
      _lib._class_NSRegularExpression1,
      _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
      keys.pointer,
      dependentKey.pointer,
    );
  }

  static NSArray classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_85(
      _lib._class_NSRegularExpression1,
      _lib._sel_classFallbacksForKeyedArchiver1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSRegularExpression1,
      _lib._sel_classForKeyedUnarchiver1,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

abstract class NSRegularExpressionOptions {
  static const int NSRegularExpressionCaseInsensitive = 1;
  static const int NSRegularExpressionAllowCommentsAndWhitespace = 2;
  static const int NSRegularExpressionIgnoreMetacharacters = 4;
  static const int NSRegularExpressionDotMatchesLineSeparators = 8;
  static const int NSRegularExpressionAnchorsMatchLines = 16;
  static const int NSRegularExpressionUseUnixLineSeparators = 32;
  static const int NSRegularExpressionUseUnicodeWordBoundaries = 64;
}

abstract class NSMatchingOptions {
  static const int NSMatchingReportProgress = 1;
  static const int NSMatchingReportCompletion = 2;
  static const int NSMatchingAnchored = 4;
  static const int NSMatchingWithTransparentBounds = 8;
  static const int NSMatchingWithoutAnchoringBounds = 16;
}

void
_ObjCBlock_ffiVoid_NSTextCheckingResult_NSMatchingFlags_bool_fnPtrTrampoline(
  ffi.Pointer<objc.ObjCBlock> block,
  ffi.Pointer<objc.ObjCObject> arg0,
  int arg1,
  ffi.Pointer<ffi.Bool> arg2,
) => block.ref.target
    .cast<
      ffi.NativeFunction<
        ffi.Void Function(
          ffi.Pointer<objc.ObjCObject> arg0,
          ffi.Int32 arg1,
          ffi.Pointer<ffi.Bool> arg2,
        )
      >
    >()
    .asFunction<
      void Function(ffi.Pointer<objc.ObjCObject>, int, ffi.Pointer<ffi.Bool>)
    >()(arg0, arg1, arg2);
final _ObjCBlock_ffiVoid_NSTextCheckingResult_NSMatchingFlags_bool_closureRegistry =
    <
      int,
      void Function(ffi.Pointer<objc.ObjCObject>, int, ffi.Pointer<ffi.Bool>)
    >{};
int
_ObjCBlock_ffiVoid_NSTextCheckingResult_NSMatchingFlags_bool_closureRegistryIndex =
    0;
ffi.Pointer<ffi.Void>
_ObjCBlock_ffiVoid_NSTextCheckingResult_NSMatchingFlags_bool_registerClosure(
  void Function(ffi.Pointer<objc.ObjCObject>, int, ffi.Pointer<ffi.Bool>) fn,
) {
  final id =
      ++_ObjCBlock_ffiVoid_NSTextCheckingResult_NSMatchingFlags_bool_closureRegistryIndex;
  _ObjCBlock_ffiVoid_NSTextCheckingResult_NSMatchingFlags_bool_closureRegistry[id] =
      fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

void
_ObjCBlock_ffiVoid_NSTextCheckingResult_NSMatchingFlags_bool_closureTrampoline(
  ffi.Pointer<objc.ObjCBlock> block,
  ffi.Pointer<objc.ObjCObject> arg0,
  int arg1,
  ffi.Pointer<ffi.Bool> arg2,
) =>
    _ObjCBlock_ffiVoid_NSTextCheckingResult_NSMatchingFlags_bool_closureRegistry[block
        .ref
        .target
        .address]!(arg0, arg1, arg2);

class ObjCBlock_ffiVoid_NSTextCheckingResult_NSMatchingFlags_bool
    extends objc.ObjCBlockBase {
  ObjCBlock_ffiVoid_NSTextCheckingResult_NSMatchingFlags_bool._(
    ffi.Pointer<objc.ObjCBlock> pointer,
    this._lib, {
    bool retain = false,
    bool release = true,
  }) : super(pointer, retain: retain, release: release);

  AVFAudio _lib;

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_ffiVoid_NSTextCheckingResult_NSMatchingFlags_bool
  castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCBlock> pointer, {
    bool retain = false,
    bool release = false,
  }) {
    return ObjCBlock_ffiVoid_NSTextCheckingResult_NSMatchingFlags_bool._(
      pointer,
      lib,
      retain: retain,
      release: release,
    );
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSTextCheckingResult_NSMatchingFlags_bool.fromFunctionPointer(
    AVFAudio lib,
    ffi.Pointer<
      ffi.NativeFunction<
        ffi.Void Function(
          ffi.Pointer<objc.ObjCObject> arg0,
          ffi.Int32 arg1,
          ffi.Pointer<ffi.Bool> arg2,
        )
      >
    > ptr,
  ) : this._(objc.newBlock(
        _cFuncTrampoline ??=
            ffi.Pointer.fromFunction<
              ffi.Void Function(
                ffi.Pointer<objc.ObjCBlock>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Int32,
                ffi.Pointer<ffi.Bool>,
              )
            >(
              _ObjCBlock_ffiVoid_NSTextCheckingResult_NSMatchingFlags_bool_fnPtrTrampoline,
            ).cast(),
        ptr.cast(),
      ), lib);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSTextCheckingResult_NSMatchingFlags_bool.fromFunction(
    AVFAudio lib,
    void Function(NSTextCheckingResult?, int, ffi.Pointer<ffi.Bool>) fn,
  ) : this._(objc.newBlock(
        _dartFuncTrampoline ??=
            ffi.Pointer.fromFunction<
              ffi.Void Function(
                ffi.Pointer<objc.ObjCBlock>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Int32,
                ffi.Pointer<ffi.Bool>,
              )
            >(
              _ObjCBlock_ffiVoid_NSTextCheckingResult_NSMatchingFlags_bool_closureTrampoline,
            ).cast(),
        _ObjCBlock_ffiVoid_NSTextCheckingResult_NSMatchingFlags_bool_registerClosure(
          (
            ffi.Pointer<objc.ObjCObject> arg0,
            int arg1,
            ffi.Pointer<ffi.Bool> arg2,
          ) => fn(
            arg0.address == 0
                ? null
                : NSTextCheckingResult._(
                  arg0,
                  lib,
                  retain: true,
                  release: true,
                ),
            arg1,
            arg2,
          ),
        ),
      ), lib);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_NSTextCheckingResult_NSMatchingFlags_bool.listener(
    AVFAudio lib,
    void Function(NSTextCheckingResult?, int, ffi.Pointer<ffi.Bool>) fn,
  ) : this._(objc.newBlock(
        (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
              ffi.Void Function(
                ffi.Pointer<objc.ObjCBlock>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Int32,
                ffi.Pointer<ffi.Bool>,
              )
            >.listener(
              _ObjCBlock_ffiVoid_NSTextCheckingResult_NSMatchingFlags_bool_closureTrampoline,
            )..keepIsolateAlive = false)
            .nativeFunction
            .cast(),
        _ObjCBlock_ffiVoid_NSTextCheckingResult_NSMatchingFlags_bool_registerClosure(
          (
            ffi.Pointer<objc.ObjCObject> arg0,
            int arg1,
            ffi.Pointer<ffi.Bool> arg2,
          ) => fn(
            arg0.address == 0
                ? null
                : NSTextCheckingResult._(
                  arg0,
                  lib,
                  retain: true,
                  release: true,
                ),
            arg1,
            arg2,
          ),
        ),
      ), lib);
  static ffi.NativeCallable<
    ffi.Void Function(
      ffi.Pointer<objc.ObjCBlock>,
      ffi.Pointer<objc.ObjCObject>,
      ffi.Int32,
      ffi.Pointer<ffi.Bool>,
    )
  >? _dartFuncListenerTrampoline;

  void call(
    NSTextCheckingResult? arg0,
    int arg1,
    ffi.Pointer<ffi.Bool> arg2,
  ) => pointer.ref.invoke
      .cast<
        ffi.NativeFunction<
          ffi.Void Function(
            ffi.Pointer<objc.ObjCBlock> block,
            ffi.Pointer<objc.ObjCObject> arg0,
            ffi.Int32 arg1,
            ffi.Pointer<ffi.Bool> arg2,
          )
        >
      >()
      .asFunction<
        void Function(
          ffi.Pointer<objc.ObjCBlock>,
          ffi.Pointer<objc.ObjCObject>,
          int,
          ffi.Pointer<ffi.Bool>,
        )
      >()(pointer, arg0?.pointer ?? ffi.nullptr, arg1, arg2);
}

abstract class NSMatchingFlags {
  static const int NSMatchingProgress = 1;
  static const int NSMatchingCompleted = 2;
  static const int NSMatchingHitEnd = 4;
  static const int NSMatchingRequiredEnd = 8;
  static const int NSMatchingInternalError = 16;
}

class NSURLCache extends NSObject {
  NSURLCache._(
    ffi.Pointer<objc.ObjCObject> pointer,
    AVFAudio lib, {
    bool retain = false,
    bool release = false,
  }) : super._(pointer, lib, retain: retain, release: release);

  /// Returns a [NSURLCache] that points to the same underlying object as [other].
  static NSURLCache castFrom<T extends objc.ObjCObjectBase>(
    AVFAudio lib,
    T other,
  ) {
    return NSURLCache._(other.pointer, lib, retain: true, release: true);
  }

  /// Returns a [NSURLCache] that wraps the given raw object pointer.
  static NSURLCache castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCObject> other, {
    bool retain = false,
    bool release = false,
  }) {
    return NSURLCache._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSURLCache].
  static bool isInstance(AVFAudio lib, objc.ObjCObjectBase obj) {
    return lib._objc_msgSend_0(
      obj.pointer,
      lib._sel_isKindOfClass_1,
      lib._class_NSURLCache1,
    );
  }

  static NSURLCache getSharedURLCache(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_971(
      _lib._class_NSURLCache1,
      _lib._sel_sharedURLCache1,
    );
    return NSURLCache._(_ret, _lib, retain: true, release: true);
  }

  static void setSharedURLCache(AVFAudio _lib, NSURLCache value) {
    return _lib._objc_msgSend_972(
      _lib._class_NSURLCache1,
      _lib._sel_setSharedURLCache_1,
      value.pointer,
    );
  }

  NSURLCache initWithMemoryCapacity_diskCapacity_diskPath_(
    int memoryCapacity,
    int diskCapacity,
    NSString? path,
  ) {
    final _ret = _lib._objc_msgSend_973(
      this.pointer,
      _lib._sel_initWithMemoryCapacity_diskCapacity_diskPath_1,
      memoryCapacity,
      diskCapacity,
      path?.pointer ?? ffi.nullptr,
    );
    return NSURLCache._(_ret, _lib, retain: true, release: true);
  }

  NSURLCache initWithMemoryCapacity_diskCapacity_directoryURL_(
    int memoryCapacity,
    int diskCapacity,
    NSURL? directoryURL,
  ) {
    final _ret = _lib._objc_msgSend_974(
      this.pointer,
      _lib._sel_initWithMemoryCapacity_diskCapacity_directoryURL_1,
      memoryCapacity,
      diskCapacity,
      directoryURL?.pointer ?? ffi.nullptr,
    );
    return NSURLCache._(_ret, _lib, retain: true, release: true);
  }

  NSCachedURLResponse? cachedResponseForRequest_(NSURLRequest request) {
    final _ret = _lib._objc_msgSend_979(
      this.pointer,
      _lib._sel_cachedResponseForRequest_1,
      request.pointer,
    );
    return _ret.address == 0
        ? null
        : NSCachedURLResponse._(_ret, _lib, retain: true, release: true);
  }

  void storeCachedResponse_forRequest_(
    NSCachedURLResponse cachedResponse,
    NSURLRequest request,
  ) {
    _lib._objc_msgSend_980(
      this.pointer,
      _lib._sel_storeCachedResponse_forRequest_1,
      cachedResponse.pointer,
      request.pointer,
    );
  }

  void removeCachedResponseForRequest_(NSURLRequest request) {
    _lib._objc_msgSend_981(
      this.pointer,
      _lib._sel_removeCachedResponseForRequest_1,
      request.pointer,
    );
  }

  void removeAllCachedResponses() {
    _lib._objc_msgSend_1(this.pointer, _lib._sel_removeAllCachedResponses1);
  }

  void removeCachedResponsesSinceDate_(NSDate date) {
    _lib._objc_msgSend_540(
      this.pointer,
      _lib._sel_removeCachedResponsesSinceDate_1,
      date.pointer,
    );
  }

  int get memoryCapacity {
    return _lib._objc_msgSend_10(this.pointer, _lib._sel_memoryCapacity1);
  }

  set memoryCapacity(int value) {
    return _lib._objc_msgSend_516(
      this.pointer,
      _lib._sel_setMemoryCapacity_1,
      value,
    );
  }

  int get diskCapacity {
    return _lib._objc_msgSend_10(this.pointer, _lib._sel_diskCapacity1);
  }

  set diskCapacity(int value) {
    return _lib._objc_msgSend_516(
      this.pointer,
      _lib._sel_setDiskCapacity_1,
      value,
    );
  }

  int get currentMemoryUsage {
    return _lib._objc_msgSend_10(this.pointer, _lib._sel_currentMemoryUsage1);
  }

  int get currentDiskUsage {
    return _lib._objc_msgSend_10(this.pointer, _lib._sel_currentDiskUsage1);
  }

  void storeCachedResponse_forDataTask_(
    NSCachedURLResponse cachedResponse,
    NSURLSessionDataTask dataTask,
  ) {
    _lib._objc_msgSend_982(
      this.pointer,
      _lib._sel_storeCachedResponse_forDataTask_1,
      cachedResponse.pointer,
      dataTask.pointer,
    );
  }

  void getCachedResponseForDataTask_completionHandler_(
    NSURLSessionDataTask dataTask,
    ObjCBlock_ffiVoid_NSCachedURLResponse completionHandler,
  ) {
    _lib._objc_msgSend_983(
      this.pointer,
      _lib._sel_getCachedResponseForDataTask_completionHandler_1,
      dataTask.pointer,
      completionHandler.pointer,
    );
  }

  void removeCachedResponseForDataTask_(NSURLSessionDataTask dataTask) {
    _lib._objc_msgSend_984(
      this.pointer,
      _lib._sel_removeCachedResponseForDataTask_1,
      dataTask.pointer,
    );
  }

  @override
  NSURLCache init() {
    final _ret = _lib._objc_msgSend_2(this.pointer, _lib._sel_init1);
    return NSURLCache._(_ret, _lib, retain: true, release: true);
  }

  static NSURLCache new1(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSURLCache1, _lib._sel_new1);
    return NSURLCache._(_ret, _lib, retain: false, release: true);
  }

  static NSURLCache allocWithZone_(AVFAudio _lib, ffi.Pointer<_NSZone> zone) {
    final _ret = _lib._objc_msgSend_3(
      _lib._class_NSURLCache1,
      _lib._sel_allocWithZone_1,
      zone,
    );
    return NSURLCache._(_ret, _lib, retain: false, release: true);
  }

  static NSURLCache alloc(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSURLCache1,
      _lib._sel_alloc1,
    );
    return NSURLCache._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
    AVFAudio _lib,
    NSObject aTarget,
    ffi.Pointer<objc.ObjCSelector> aSelector,
    NSObject? anArgument,
  ) {
    _lib._objc_msgSend_14(
      _lib._class_NSURLCache1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
      aTarget.pointer,
      aSelector,
      anArgument?.pointer ?? ffi.nullptr,
    );
  }

  static void cancelPreviousPerformRequestsWithTarget_(
    AVFAudio _lib,
    NSObject aTarget,
  ) {
    _lib._objc_msgSend_15(
      _lib._class_NSURLCache1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_1,
      aTarget.pointer,
    );
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSURLCache1,
      _lib._sel_accessInstanceVariablesDirectly1,
    );
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSURLCache1,
      _lib._sel_useStoredAccessor1,
    );
  }

  static NSSet keyPathsForValuesAffectingValueForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    final _ret = _lib._objc_msgSend_63(
      _lib._class_NSURLCache1,
      _lib._sel_keyPathsForValuesAffectingValueForKey_1,
      key.pointer,
    );
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    return _lib._objc_msgSend_64(
      _lib._class_NSURLCache1,
      _lib._sel_automaticallyNotifiesObserversForKey_1,
      key.pointer,
    );
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
    AVFAudio _lib,
    NSArray keys,
    NSString dependentKey,
  ) {
    _lib._objc_msgSend_88(
      _lib._class_NSURLCache1,
      _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
      keys.pointer,
      dependentKey.pointer,
    );
  }

  static NSArray classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_85(
      _lib._class_NSURLCache1,
      _lib._sel_classFallbacksForKeyedArchiver1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSURLCache1,
      _lib._sel_classForKeyedUnarchiver1,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

class NSCachedURLResponse extends NSObject {
  NSCachedURLResponse._(
    ffi.Pointer<objc.ObjCObject> pointer,
    AVFAudio lib, {
    bool retain = false,
    bool release = false,
  }) : super._(pointer, lib, retain: retain, release: release);

  /// Returns a [NSCachedURLResponse] that points to the same underlying object as [other].
  static NSCachedURLResponse castFrom<T extends objc.ObjCObjectBase>(
    AVFAudio lib,
    T other,
  ) {
    return NSCachedURLResponse._(
      other.pointer,
      lib,
      retain: true,
      release: true,
    );
  }

  /// Returns a [NSCachedURLResponse] that wraps the given raw object pointer.
  static NSCachedURLResponse castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCObject> other, {
    bool retain = false,
    bool release = false,
  }) {
    return NSCachedURLResponse._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSCachedURLResponse].
  static bool isInstance(AVFAudio lib, objc.ObjCObjectBase obj) {
    return lib._objc_msgSend_0(
      obj.pointer,
      lib._sel_isKindOfClass_1,
      lib._class_NSCachedURLResponse1,
    );
  }

  NSCachedURLResponse initWithResponse_data_(
    NSURLResponse response,
    NSData data,
  ) {
    final _ret = _lib._objc_msgSend_975(
      this.pointer,
      _lib._sel_initWithResponse_data_1,
      response.pointer,
      data.pointer,
    );
    return NSCachedURLResponse._(_ret, _lib, retain: true, release: true);
  }

  NSCachedURLResponse initWithResponse_data_userInfo_storagePolicy_(
    NSURLResponse response,
    NSData data,
    NSDictionary? userInfo,
    int storagePolicy,
  ) {
    final _ret = _lib._objc_msgSend_976(
      this.pointer,
      _lib._sel_initWithResponse_data_userInfo_storagePolicy_1,
      response.pointer,
      data.pointer,
      userInfo?.pointer ?? ffi.nullptr,
      storagePolicy,
    );
    return NSCachedURLResponse._(_ret, _lib, retain: true, release: true);
  }

  NSURLResponse get response {
    final _ret = _lib._objc_msgSend_977(this.pointer, _lib._sel_response1);
    return NSURLResponse._(_ret, _lib, retain: true, release: true);
  }

  NSData get data {
    final _ret = _lib._objc_msgSend_43(this.pointer, _lib._sel_data1);
    return NSData._(_ret, _lib, retain: true, release: true);
  }

  NSDictionary? get userInfo {
    final _ret = _lib._objc_msgSend_390(this.pointer, _lib._sel_userInfo1);
    return _ret.address == 0
        ? null
        : NSDictionary._(_ret, _lib, retain: true, release: true);
  }

  int get storagePolicy {
    return _lib._objc_msgSend_978(this.pointer, _lib._sel_storagePolicy1);
  }

  @override
  NSCachedURLResponse init() {
    final _ret = _lib._objc_msgSend_2(this.pointer, _lib._sel_init1);
    return NSCachedURLResponse._(_ret, _lib, retain: true, release: true);
  }

  static NSCachedURLResponse new1(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSCachedURLResponse1,
      _lib._sel_new1,
    );
    return NSCachedURLResponse._(_ret, _lib, retain: false, release: true);
  }

  static NSCachedURLResponse allocWithZone_(
    AVFAudio _lib,
    ffi.Pointer<_NSZone> zone,
  ) {
    final _ret = _lib._objc_msgSend_3(
      _lib._class_NSCachedURLResponse1,
      _lib._sel_allocWithZone_1,
      zone,
    );
    return NSCachedURLResponse._(_ret, _lib, retain: false, release: true);
  }

  static NSCachedURLResponse alloc(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSCachedURLResponse1,
      _lib._sel_alloc1,
    );
    return NSCachedURLResponse._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
    AVFAudio _lib,
    NSObject aTarget,
    ffi.Pointer<objc.ObjCSelector> aSelector,
    NSObject? anArgument,
  ) {
    _lib._objc_msgSend_14(
      _lib._class_NSCachedURLResponse1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
      aTarget.pointer,
      aSelector,
      anArgument?.pointer ?? ffi.nullptr,
    );
  }

  static void cancelPreviousPerformRequestsWithTarget_(
    AVFAudio _lib,
    NSObject aTarget,
  ) {
    _lib._objc_msgSend_15(
      _lib._class_NSCachedURLResponse1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_1,
      aTarget.pointer,
    );
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSCachedURLResponse1,
      _lib._sel_accessInstanceVariablesDirectly1,
    );
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSCachedURLResponse1,
      _lib._sel_useStoredAccessor1,
    );
  }

  static NSSet keyPathsForValuesAffectingValueForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    final _ret = _lib._objc_msgSend_63(
      _lib._class_NSCachedURLResponse1,
      _lib._sel_keyPathsForValuesAffectingValueForKey_1,
      key.pointer,
    );
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    return _lib._objc_msgSend_64(
      _lib._class_NSCachedURLResponse1,
      _lib._sel_automaticallyNotifiesObserversForKey_1,
      key.pointer,
    );
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
    AVFAudio _lib,
    NSArray keys,
    NSString dependentKey,
  ) {
    _lib._objc_msgSend_88(
      _lib._class_NSCachedURLResponse1,
      _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
      keys.pointer,
      dependentKey.pointer,
    );
  }

  static NSArray classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_85(
      _lib._class_NSCachedURLResponse1,
      _lib._sel_classFallbacksForKeyedArchiver1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSCachedURLResponse1,
      _lib._sel_classForKeyedUnarchiver1,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

abstract class NSURLCacheStoragePolicy {
  static const int NSURLCacheStorageAllowed = 0;
  static const int NSURLCacheStorageAllowedInMemoryOnly = 1;
  static const int NSURLCacheStorageNotAllowed = 2;
}

class NSURLSessionDataTask extends NSURLSessionTask {
  NSURLSessionDataTask._(
    ffi.Pointer<objc.ObjCObject> pointer,
    AVFAudio lib, {
    bool retain = false,
    bool release = false,
  }) : super._(pointer, lib, retain: retain, release: release);

  /// Returns a [NSURLSessionDataTask] that points to the same underlying object as [other].
  static NSURLSessionDataTask castFrom<T extends objc.ObjCObjectBase>(
    AVFAudio lib,
    T other,
  ) {
    return NSURLSessionDataTask._(
      other.pointer,
      lib,
      retain: true,
      release: true,
    );
  }

  /// Returns a [NSURLSessionDataTask] that wraps the given raw object pointer.
  static NSURLSessionDataTask castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCObject> other, {
    bool retain = false,
    bool release = false,
  }) {
    return NSURLSessionDataTask._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSURLSessionDataTask].
  static bool isInstance(AVFAudio lib, objc.ObjCObjectBase obj) {
    return lib._objc_msgSend_0(
      obj.pointer,
      lib._sel_isKindOfClass_1,
      lib._class_NSURLSessionDataTask1,
    );
  }

  @override
  NSURLSessionDataTask init() {
    final _ret = _lib._objc_msgSend_2(this.pointer, _lib._sel_init1);
    return NSURLSessionDataTask._(_ret, _lib, retain: true, release: true);
  }

  static NSURLSessionDataTask new1(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSURLSessionDataTask1,
      _lib._sel_new1,
    );
    return NSURLSessionDataTask._(_ret, _lib, retain: false, release: true);
  }

  static NSURLSessionDataTask allocWithZone_(
    AVFAudio _lib,
    ffi.Pointer<_NSZone> zone,
  ) {
    final _ret = _lib._objc_msgSend_3(
      _lib._class_NSURLSessionDataTask1,
      _lib._sel_allocWithZone_1,
      zone,
    );
    return NSURLSessionDataTask._(_ret, _lib, retain: false, release: true);
  }

  static NSURLSessionDataTask alloc(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSURLSessionDataTask1,
      _lib._sel_alloc1,
    );
    return NSURLSessionDataTask._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
    AVFAudio _lib,
    NSObject aTarget,
    ffi.Pointer<objc.ObjCSelector> aSelector,
    NSObject? anArgument,
  ) {
    _lib._objc_msgSend_14(
      _lib._class_NSURLSessionDataTask1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
      aTarget.pointer,
      aSelector,
      anArgument?.pointer ?? ffi.nullptr,
    );
  }

  static void cancelPreviousPerformRequestsWithTarget_(
    AVFAudio _lib,
    NSObject aTarget,
  ) {
    _lib._objc_msgSend_15(
      _lib._class_NSURLSessionDataTask1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_1,
      aTarget.pointer,
    );
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSURLSessionDataTask1,
      _lib._sel_accessInstanceVariablesDirectly1,
    );
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSURLSessionDataTask1,
      _lib._sel_useStoredAccessor1,
    );
  }

  static NSSet keyPathsForValuesAffectingValueForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    final _ret = _lib._objc_msgSend_63(
      _lib._class_NSURLSessionDataTask1,
      _lib._sel_keyPathsForValuesAffectingValueForKey_1,
      key.pointer,
    );
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    return _lib._objc_msgSend_64(
      _lib._class_NSURLSessionDataTask1,
      _lib._sel_automaticallyNotifiesObserversForKey_1,
      key.pointer,
    );
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
    AVFAudio _lib,
    NSArray keys,
    NSString dependentKey,
  ) {
    _lib._objc_msgSend_88(
      _lib._class_NSURLSessionDataTask1,
      _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
      keys.pointer,
      dependentKey.pointer,
    );
  }

  static NSArray classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_85(
      _lib._class_NSURLSessionDataTask1,
      _lib._sel_classFallbacksForKeyedArchiver1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSURLSessionDataTask1,
      _lib._sel_classForKeyedUnarchiver1,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

void _ObjCBlock_ffiVoid_NSCachedURLResponse_fnPtrTrampoline(
  ffi.Pointer<objc.ObjCBlock> block,
  ffi.Pointer<objc.ObjCObject> arg0,
) => block.ref.target
    .cast<
      ffi.NativeFunction<ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0)>
    >()
    .asFunction<void Function(ffi.Pointer<objc.ObjCObject>)>()(arg0);
final _ObjCBlock_ffiVoid_NSCachedURLResponse_closureRegistry =
    <int, void Function(ffi.Pointer<objc.ObjCObject>)>{};
int _ObjCBlock_ffiVoid_NSCachedURLResponse_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void> _ObjCBlock_ffiVoid_NSCachedURLResponse_registerClosure(
  void Function(ffi.Pointer<objc.ObjCObject>) fn,
) {
  final id = ++_ObjCBlock_ffiVoid_NSCachedURLResponse_closureRegistryIndex;
  _ObjCBlock_ffiVoid_NSCachedURLResponse_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

void _ObjCBlock_ffiVoid_NSCachedURLResponse_closureTrampoline(
  ffi.Pointer<objc.ObjCBlock> block,
  ffi.Pointer<objc.ObjCObject> arg0,
) => _ObjCBlock_ffiVoid_NSCachedURLResponse_closureRegistry[block
    .ref
    .target
    .address]!(arg0);

class ObjCBlock_ffiVoid_NSCachedURLResponse extends objc.ObjCBlockBase {
  ObjCBlock_ffiVoid_NSCachedURLResponse._(
    ffi.Pointer<objc.ObjCBlock> pointer,
    this._lib, {
    bool retain = false,
    bool release = true,
  }) : super(pointer, retain: retain, release: release);

  AVFAudio _lib;

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_ffiVoid_NSCachedURLResponse castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCBlock> pointer, {
    bool retain = false,
    bool release = false,
  }) {
    return ObjCBlock_ffiVoid_NSCachedURLResponse._(
      pointer,
      lib,
      retain: retain,
      release: release,
    );
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSCachedURLResponse.fromFunctionPointer(
    AVFAudio lib,
    ffi.Pointer<
      ffi.NativeFunction<ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0)>
    > ptr,
  ) : this._(objc.newBlock(
        _cFuncTrampoline ??=
            ffi.Pointer.fromFunction<
              ffi.Void Function(
                ffi.Pointer<objc.ObjCBlock>,
                ffi.Pointer<objc.ObjCObject>,
              )
            >(_ObjCBlock_ffiVoid_NSCachedURLResponse_fnPtrTrampoline).cast(),
        ptr.cast(),
      ), lib);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSCachedURLResponse.fromFunction(
    AVFAudio lib,
    void Function(NSCachedURLResponse?) fn,
  ) : this._(objc.newBlock(
        _dartFuncTrampoline ??=
            ffi.Pointer.fromFunction<
              ffi.Void Function(
                ffi.Pointer<objc.ObjCBlock>,
                ffi.Pointer<objc.ObjCObject>,
              )
            >(_ObjCBlock_ffiVoid_NSCachedURLResponse_closureTrampoline).cast(),
        _ObjCBlock_ffiVoid_NSCachedURLResponse_registerClosure((
          ffi.Pointer<objc.ObjCObject> arg0,
        ) => fn(
          arg0.address == 0
              ? null
              : NSCachedURLResponse._(arg0, lib, retain: true, release: true),
        )),
      ), lib);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_NSCachedURLResponse.listener(
    AVFAudio lib,
    void Function(NSCachedURLResponse?) fn,
  ) : this._(objc.newBlock(
        (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
              ffi.Void Function(
                ffi.Pointer<objc.ObjCBlock>,
                ffi.Pointer<objc.ObjCObject>,
              )
            >.listener(
              _ObjCBlock_ffiVoid_NSCachedURLResponse_closureTrampoline,
            )..keepIsolateAlive = false)
            .nativeFunction
            .cast(),
        _ObjCBlock_ffiVoid_NSCachedURLResponse_registerClosure((
          ffi.Pointer<objc.ObjCObject> arg0,
        ) => fn(
          arg0.address == 0
              ? null
              : NSCachedURLResponse._(arg0, lib, retain: true, release: true),
        )),
      ), lib);
  static ffi.NativeCallable<
    ffi.Void Function(ffi.Pointer<objc.ObjCBlock>, ffi.Pointer<objc.ObjCObject>)
  >? _dartFuncListenerTrampoline;

  void call(NSCachedURLResponse? arg0) => pointer.ref.invoke
      .cast<
        ffi.NativeFunction<
          ffi.Void Function(
            ffi.Pointer<objc.ObjCBlock> block,
            ffi.Pointer<objc.ObjCObject> arg0,
          )
        >
      >()
      .asFunction<
        void Function(ffi.Pointer<objc.ObjCBlock>, ffi.Pointer<objc.ObjCObject>)
      >()(pointer, arg0?.pointer ?? ffi.nullptr);
}

class NSURLConnection extends NSObject {
  NSURLConnection._(
    ffi.Pointer<objc.ObjCObject> pointer,
    AVFAudio lib, {
    bool retain = false,
    bool release = false,
  }) : super._(pointer, lib, retain: retain, release: release);

  /// Returns a [NSURLConnection] that points to the same underlying object as [other].
  static NSURLConnection castFrom<T extends objc.ObjCObjectBase>(
    AVFAudio lib,
    T other,
  ) {
    return NSURLConnection._(other.pointer, lib, retain: true, release: true);
  }

  /// Returns a [NSURLConnection] that wraps the given raw object pointer.
  static NSURLConnection castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCObject> other, {
    bool retain = false,
    bool release = false,
  }) {
    return NSURLConnection._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSURLConnection].
  static bool isInstance(AVFAudio lib, objc.ObjCObjectBase obj) {
    return lib._objc_msgSend_0(
      obj.pointer,
      lib._sel_isKindOfClass_1,
      lib._class_NSURLConnection1,
    );
  }

  NSURLConnection? initWithRequest_delegate_startImmediately_(
    NSURLRequest request,
    NSObject? delegate,
    bool startImmediately,
  ) {
    final _ret = _lib._objc_msgSend_985(
      this.pointer,
      _lib._sel_initWithRequest_delegate_startImmediately_1,
      request.pointer,
      delegate?.pointer ?? ffi.nullptr,
      startImmediately,
    );
    return _ret.address == 0
        ? null
        : NSURLConnection._(_ret, _lib, retain: true, release: true);
  }

  NSURLConnection? initWithRequest_delegate_(
    NSURLRequest request,
    NSObject? delegate,
  ) {
    final _ret = _lib._objc_msgSend_986(
      this.pointer,
      _lib._sel_initWithRequest_delegate_1,
      request.pointer,
      delegate?.pointer ?? ffi.nullptr,
    );
    return _ret.address == 0
        ? null
        : NSURLConnection._(_ret, _lib, retain: true, release: true);
  }

  static NSURLConnection? connectionWithRequest_delegate_(
    AVFAudio _lib,
    NSURLRequest request,
    NSObject? delegate,
  ) {
    final _ret = _lib._objc_msgSend_987(
      _lib._class_NSURLConnection1,
      _lib._sel_connectionWithRequest_delegate_1,
      request.pointer,
      delegate?.pointer ?? ffi.nullptr,
    );
    return _ret.address == 0
        ? null
        : NSURLConnection._(_ret, _lib, retain: true, release: true);
  }

  NSURLRequest get originalRequest {
    final _ret = _lib._objc_msgSend_988(
      this.pointer,
      _lib._sel_originalRequest1,
    );
    return NSURLRequest._(_ret, _lib, retain: true, release: true);
  }

  NSURLRequest get currentRequest {
    final _ret = _lib._objc_msgSend_988(
      this.pointer,
      _lib._sel_currentRequest1,
    );
    return NSURLRequest._(_ret, _lib, retain: true, release: true);
  }

  void start() {
    _lib._objc_msgSend_1(this.pointer, _lib._sel_start1);
  }

  void cancel() {
    _lib._objc_msgSend_1(this.pointer, _lib._sel_cancel1);
  }

  void scheduleInRunLoop_forMode_(NSRunLoop aRunLoop, NSString mode) {
    _lib._objc_msgSend_569(
      this.pointer,
      _lib._sel_scheduleInRunLoop_forMode_1,
      aRunLoop.pointer,
      mode.pointer,
    );
  }

  void unscheduleFromRunLoop_forMode_(NSRunLoop aRunLoop, NSString mode) {
    _lib._objc_msgSend_569(
      this.pointer,
      _lib._sel_unscheduleFromRunLoop_forMode_1,
      aRunLoop.pointer,
      mode.pointer,
    );
  }

  void setDelegateQueue_(NSOperationQueue? queue) {
    _lib._objc_msgSend_989(
      this.pointer,
      _lib._sel_setDelegateQueue_1,
      queue?.pointer ?? ffi.nullptr,
    );
  }

  static bool canHandleRequest_(AVFAudio _lib, NSURLRequest request) {
    return _lib._objc_msgSend_990(
      _lib._class_NSURLConnection1,
      _lib._sel_canHandleRequest_1,
      request.pointer,
    );
  }

  static NSData? sendSynchronousRequest_returningResponse_error_(
    AVFAudio _lib,
    NSURLRequest request,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> response,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    final _ret = _lib._objc_msgSend_991(
      _lib._class_NSURLConnection1,
      _lib._sel_sendSynchronousRequest_returningResponse_error_1,
      request.pointer,
      response,
      error,
    );
    return _ret.address == 0
        ? null
        : NSData._(_ret, _lib, retain: true, release: true);
  }

  static void sendAsynchronousRequest_queue_completionHandler_(
    AVFAudio _lib,
    NSURLRequest request,
    NSOperationQueue queue,
    ObjCBlock_ffiVoid_NSURLResponse_NSData_NSError handler,
  ) {
    _lib._objc_msgSend_992(
      _lib._class_NSURLConnection1,
      _lib._sel_sendAsynchronousRequest_queue_completionHandler_1,
      request.pointer,
      queue.pointer,
      handler.pointer,
    );
  }

  @override
  NSURLConnection init() {
    final _ret = _lib._objc_msgSend_2(this.pointer, _lib._sel_init1);
    return NSURLConnection._(_ret, _lib, retain: true, release: true);
  }

  static NSURLConnection new1(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSURLConnection1,
      _lib._sel_new1,
    );
    return NSURLConnection._(_ret, _lib, retain: false, release: true);
  }

  static NSURLConnection allocWithZone_(
    AVFAudio _lib,
    ffi.Pointer<_NSZone> zone,
  ) {
    final _ret = _lib._objc_msgSend_3(
      _lib._class_NSURLConnection1,
      _lib._sel_allocWithZone_1,
      zone,
    );
    return NSURLConnection._(_ret, _lib, retain: false, release: true);
  }

  static NSURLConnection alloc(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSURLConnection1,
      _lib._sel_alloc1,
    );
    return NSURLConnection._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
    AVFAudio _lib,
    NSObject aTarget,
    ffi.Pointer<objc.ObjCSelector> aSelector,
    NSObject? anArgument,
  ) {
    _lib._objc_msgSend_14(
      _lib._class_NSURLConnection1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
      aTarget.pointer,
      aSelector,
      anArgument?.pointer ?? ffi.nullptr,
    );
  }

  static void cancelPreviousPerformRequestsWithTarget_(
    AVFAudio _lib,
    NSObject aTarget,
  ) {
    _lib._objc_msgSend_15(
      _lib._class_NSURLConnection1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_1,
      aTarget.pointer,
    );
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSURLConnection1,
      _lib._sel_accessInstanceVariablesDirectly1,
    );
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSURLConnection1,
      _lib._sel_useStoredAccessor1,
    );
  }

  static NSSet keyPathsForValuesAffectingValueForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    final _ret = _lib._objc_msgSend_63(
      _lib._class_NSURLConnection1,
      _lib._sel_keyPathsForValuesAffectingValueForKey_1,
      key.pointer,
    );
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    return _lib._objc_msgSend_64(
      _lib._class_NSURLConnection1,
      _lib._sel_automaticallyNotifiesObserversForKey_1,
      key.pointer,
    );
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
    AVFAudio _lib,
    NSArray keys,
    NSString dependentKey,
  ) {
    _lib._objc_msgSend_88(
      _lib._class_NSURLConnection1,
      _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
      keys.pointer,
      dependentKey.pointer,
    );
  }

  static NSArray classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_85(
      _lib._class_NSURLConnection1,
      _lib._sel_classFallbacksForKeyedArchiver1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSURLConnection1,
      _lib._sel_classForKeyedUnarchiver1,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

void _ObjCBlock_ffiVoid_NSURLResponse_NSData_NSError_fnPtrTrampoline(
  ffi.Pointer<objc.ObjCBlock> block,
  ffi.Pointer<objc.ObjCObject> arg0,
  ffi.Pointer<objc.ObjCObject> arg1,
  ffi.Pointer<objc.ObjCObject> arg2,
) => block.ref.target
    .cast<
      ffi.NativeFunction<
        ffi.Void Function(
          ffi.Pointer<objc.ObjCObject> arg0,
          ffi.Pointer<objc.ObjCObject> arg1,
          ffi.Pointer<objc.ObjCObject> arg2,
        )
      >
    >()
    .asFunction<
      void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >()(arg0, arg1, arg2);
final _ObjCBlock_ffiVoid_NSURLResponse_NSData_NSError_closureRegistry =
    <
      int,
      void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >{};
int _ObjCBlock_ffiVoid_NSURLResponse_NSData_NSError_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void>
_ObjCBlock_ffiVoid_NSURLResponse_NSData_NSError_registerClosure(
  void Function(
    ffi.Pointer<objc.ObjCObject>,
    ffi.Pointer<objc.ObjCObject>,
    ffi.Pointer<objc.ObjCObject>,
  ) fn,
) {
  final id =
      ++_ObjCBlock_ffiVoid_NSURLResponse_NSData_NSError_closureRegistryIndex;
  _ObjCBlock_ffiVoid_NSURLResponse_NSData_NSError_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

void _ObjCBlock_ffiVoid_NSURLResponse_NSData_NSError_closureTrampoline(
  ffi.Pointer<objc.ObjCBlock> block,
  ffi.Pointer<objc.ObjCObject> arg0,
  ffi.Pointer<objc.ObjCObject> arg1,
  ffi.Pointer<objc.ObjCObject> arg2,
) => _ObjCBlock_ffiVoid_NSURLResponse_NSData_NSError_closureRegistry[block
    .ref
    .target
    .address]!(arg0, arg1, arg2);

class ObjCBlock_ffiVoid_NSURLResponse_NSData_NSError
    extends objc.ObjCBlockBase {
  ObjCBlock_ffiVoid_NSURLResponse_NSData_NSError._(
    ffi.Pointer<objc.ObjCBlock> pointer,
    this._lib, {
    bool retain = false,
    bool release = true,
  }) : super(pointer, retain: retain, release: release);

  AVFAudio _lib;

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_ffiVoid_NSURLResponse_NSData_NSError castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCBlock> pointer, {
    bool retain = false,
    bool release = false,
  }) {
    return ObjCBlock_ffiVoid_NSURLResponse_NSData_NSError._(
      pointer,
      lib,
      retain: retain,
      release: release,
    );
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSURLResponse_NSData_NSError.fromFunctionPointer(
    AVFAudio lib,
    ffi.Pointer<
      ffi.NativeFunction<
        ffi.Void Function(
          ffi.Pointer<objc.ObjCObject> arg0,
          ffi.Pointer<objc.ObjCObject> arg1,
          ffi.Pointer<objc.ObjCObject> arg2,
        )
      >
    > ptr,
  ) : this._(objc.newBlock(
        _cFuncTrampoline ??=
            ffi.Pointer.fromFunction<
              ffi.Void Function(
                ffi.Pointer<objc.ObjCBlock>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
              )
            >(
              _ObjCBlock_ffiVoid_NSURLResponse_NSData_NSError_fnPtrTrampoline,
            ).cast(),
        ptr.cast(),
      ), lib);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSURLResponse_NSData_NSError.fromFunction(
    AVFAudio lib,
    void Function(NSURLResponse?, NSData?, NSError?) fn,
  ) : this._(objc.newBlock(
        _dartFuncTrampoline ??=
            ffi.Pointer.fromFunction<
              ffi.Void Function(
                ffi.Pointer<objc.ObjCBlock>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
              )
            >(
              _ObjCBlock_ffiVoid_NSURLResponse_NSData_NSError_closureTrampoline,
            ).cast(),
        _ObjCBlock_ffiVoid_NSURLResponse_NSData_NSError_registerClosure((
          ffi.Pointer<objc.ObjCObject> arg0,
          ffi.Pointer<objc.ObjCObject> arg1,
          ffi.Pointer<objc.ObjCObject> arg2,
        ) => fn(
          arg0.address == 0
              ? null
              : NSURLResponse._(arg0, lib, retain: true, release: true),
          arg1.address == 0
              ? null
              : NSData._(arg1, lib, retain: true, release: true),
          arg2.address == 0
              ? null
              : NSError._(arg2, lib, retain: true, release: true),
        )),
      ), lib);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_NSURLResponse_NSData_NSError.listener(
    AVFAudio lib,
    void Function(NSURLResponse?, NSData?, NSError?) fn,
  ) : this._(objc.newBlock(
        (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
              ffi.Void Function(
                ffi.Pointer<objc.ObjCBlock>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
              )
            >.listener(
              _ObjCBlock_ffiVoid_NSURLResponse_NSData_NSError_closureTrampoline,
            )..keepIsolateAlive = false)
            .nativeFunction
            .cast(),
        _ObjCBlock_ffiVoid_NSURLResponse_NSData_NSError_registerClosure((
          ffi.Pointer<objc.ObjCObject> arg0,
          ffi.Pointer<objc.ObjCObject> arg1,
          ffi.Pointer<objc.ObjCObject> arg2,
        ) => fn(
          arg0.address == 0
              ? null
              : NSURLResponse._(arg0, lib, retain: true, release: true),
          arg1.address == 0
              ? null
              : NSData._(arg1, lib, retain: true, release: true),
          arg2.address == 0
              ? null
              : NSError._(arg2, lib, retain: true, release: true),
        )),
      ), lib);
  static ffi.NativeCallable<
    ffi.Void Function(
      ffi.Pointer<objc.ObjCBlock>,
      ffi.Pointer<objc.ObjCObject>,
      ffi.Pointer<objc.ObjCObject>,
      ffi.Pointer<objc.ObjCObject>,
    )
  >? _dartFuncListenerTrampoline;

  void call(NSURLResponse? arg0, NSData? arg1, NSError? arg2) => pointer
      .ref
      .invoke
      .cast<
        ffi.NativeFunction<
          ffi.Void Function(
            ffi.Pointer<objc.ObjCBlock> block,
            ffi.Pointer<objc.ObjCObject> arg0,
            ffi.Pointer<objc.ObjCObject> arg1,
            ffi.Pointer<objc.ObjCObject> arg2,
          )
        >
      >()
      .asFunction<
        void Function(
          ffi.Pointer<objc.ObjCBlock>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCObject>,
        )
      >()(
    pointer,
    arg0?.pointer ?? ffi.nullptr,
    arg1?.pointer ?? ffi.nullptr,
    arg2?.pointer ?? ffi.nullptr,
  );
}

class NSURLCredential extends NSObject {
  NSURLCredential._(
    ffi.Pointer<objc.ObjCObject> pointer,
    AVFAudio lib, {
    bool retain = false,
    bool release = false,
  }) : super._(pointer, lib, retain: retain, release: release);

  /// Returns a [NSURLCredential] that points to the same underlying object as [other].
  static NSURLCredential castFrom<T extends objc.ObjCObjectBase>(
    AVFAudio lib,
    T other,
  ) {
    return NSURLCredential._(other.pointer, lib, retain: true, release: true);
  }

  /// Returns a [NSURLCredential] that wraps the given raw object pointer.
  static NSURLCredential castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCObject> other, {
    bool retain = false,
    bool release = false,
  }) {
    return NSURLCredential._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSURLCredential].
  static bool isInstance(AVFAudio lib, objc.ObjCObjectBase obj) {
    return lib._objc_msgSend_0(
      obj.pointer,
      lib._sel_isKindOfClass_1,
      lib._class_NSURLCredential1,
    );
  }

  int get persistence {
    return _lib._objc_msgSend_993(this.pointer, _lib._sel_persistence1);
  }

  NSURLCredential initWithUser_password_persistence_(
    NSString user,
    NSString password,
    int persistence,
  ) {
    final _ret = _lib._objc_msgSend_994(
      this.pointer,
      _lib._sel_initWithUser_password_persistence_1,
      user.pointer,
      password.pointer,
      persistence,
    );
    return NSURLCredential._(_ret, _lib, retain: true, release: true);
  }

  static NSURLCredential credentialWithUser_password_persistence_(
    AVFAudio _lib,
    NSString user,
    NSString password,
    int persistence,
  ) {
    final _ret = _lib._objc_msgSend_995(
      _lib._class_NSURLCredential1,
      _lib._sel_credentialWithUser_password_persistence_1,
      user.pointer,
      password.pointer,
      persistence,
    );
    return NSURLCredential._(_ret, _lib, retain: true, release: true);
  }

  NSString? get user {
    final _ret = _lib._objc_msgSend_44(this.pointer, _lib._sel_user1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString? get password {
    final _ret = _lib._objc_msgSend_44(this.pointer, _lib._sel_password1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  bool get hasPassword {
    return _lib._objc_msgSend_12(this.pointer, _lib._sel_hasPassword1);
  }

  NSURLCredential initWithIdentity_certificates_persistence_(
    ffi.Pointer<__SecIdentity> identity,
    NSArray? certArray,
    int persistence,
  ) {
    final _ret = _lib._objc_msgSend_996(
      this.pointer,
      _lib._sel_initWithIdentity_certificates_persistence_1,
      identity,
      certArray?.pointer ?? ffi.nullptr,
      persistence,
    );
    return NSURLCredential._(_ret, _lib, retain: true, release: true);
  }

  static NSURLCredential credentialWithIdentity_certificates_persistence_(
    AVFAudio _lib,
    ffi.Pointer<__SecIdentity> identity,
    NSArray? certArray,
    int persistence,
  ) {
    final _ret = _lib._objc_msgSend_997(
      _lib._class_NSURLCredential1,
      _lib._sel_credentialWithIdentity_certificates_persistence_1,
      identity,
      certArray?.pointer ?? ffi.nullptr,
      persistence,
    );
    return NSURLCredential._(_ret, _lib, retain: true, release: true);
  }

  ffi.Pointer<__SecIdentity> get identity {
    return _lib._objc_msgSend_998(this.pointer, _lib._sel_identity1);
  }

  NSArray get certificates {
    final _ret = _lib._objc_msgSend_85(this.pointer, _lib._sel_certificates1);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSURLCredential initWithTrust_(ffi.Pointer<__SecTrust> trust) {
    final _ret = _lib._objc_msgSend_999(
      this.pointer,
      _lib._sel_initWithTrust_1,
      trust,
    );
    return NSURLCredential._(_ret, _lib, retain: true, release: true);
  }

  static NSURLCredential credentialForTrust_(
    AVFAudio _lib,
    ffi.Pointer<__SecTrust> trust,
  ) {
    final _ret = _lib._objc_msgSend_1000(
      _lib._class_NSURLCredential1,
      _lib._sel_credentialForTrust_1,
      trust,
    );
    return NSURLCredential._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSURLCredential init() {
    final _ret = _lib._objc_msgSend_2(this.pointer, _lib._sel_init1);
    return NSURLCredential._(_ret, _lib, retain: true, release: true);
  }

  static NSURLCredential new1(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSURLCredential1,
      _lib._sel_new1,
    );
    return NSURLCredential._(_ret, _lib, retain: false, release: true);
  }

  static NSURLCredential allocWithZone_(
    AVFAudio _lib,
    ffi.Pointer<_NSZone> zone,
  ) {
    final _ret = _lib._objc_msgSend_3(
      _lib._class_NSURLCredential1,
      _lib._sel_allocWithZone_1,
      zone,
    );
    return NSURLCredential._(_ret, _lib, retain: false, release: true);
  }

  static NSURLCredential alloc(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSURLCredential1,
      _lib._sel_alloc1,
    );
    return NSURLCredential._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
    AVFAudio _lib,
    NSObject aTarget,
    ffi.Pointer<objc.ObjCSelector> aSelector,
    NSObject? anArgument,
  ) {
    _lib._objc_msgSend_14(
      _lib._class_NSURLCredential1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
      aTarget.pointer,
      aSelector,
      anArgument?.pointer ?? ffi.nullptr,
    );
  }

  static void cancelPreviousPerformRequestsWithTarget_(
    AVFAudio _lib,
    NSObject aTarget,
  ) {
    _lib._objc_msgSend_15(
      _lib._class_NSURLCredential1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_1,
      aTarget.pointer,
    );
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSURLCredential1,
      _lib._sel_accessInstanceVariablesDirectly1,
    );
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSURLCredential1,
      _lib._sel_useStoredAccessor1,
    );
  }

  static NSSet keyPathsForValuesAffectingValueForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    final _ret = _lib._objc_msgSend_63(
      _lib._class_NSURLCredential1,
      _lib._sel_keyPathsForValuesAffectingValueForKey_1,
      key.pointer,
    );
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    return _lib._objc_msgSend_64(
      _lib._class_NSURLCredential1,
      _lib._sel_automaticallyNotifiesObserversForKey_1,
      key.pointer,
    );
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
    AVFAudio _lib,
    NSArray keys,
    NSString dependentKey,
  ) {
    _lib._objc_msgSend_88(
      _lib._class_NSURLCredential1,
      _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
      keys.pointer,
      dependentKey.pointer,
    );
  }

  static NSArray classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_85(
      _lib._class_NSURLCredential1,
      _lib._sel_classFallbacksForKeyedArchiver1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSURLCredential1,
      _lib._sel_classForKeyedUnarchiver1,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

abstract class NSURLCredentialPersistence {
  static const int NSURLCredentialPersistenceNone = 0;
  static const int NSURLCredentialPersistenceForSession = 1;
  static const int NSURLCredentialPersistencePermanent = 2;
  static const int NSURLCredentialPersistenceSynchronizable = 3;
}

final class __SecIdentity extends ffi.Opaque {}

final class __SecTrust extends ffi.Opaque {}

class NSURLProtectionSpace extends NSObject {
  NSURLProtectionSpace._(
    ffi.Pointer<objc.ObjCObject> pointer,
    AVFAudio lib, {
    bool retain = false,
    bool release = false,
  }) : super._(pointer, lib, retain: retain, release: release);

  /// Returns a [NSURLProtectionSpace] that points to the same underlying object as [other].
  static NSURLProtectionSpace castFrom<T extends objc.ObjCObjectBase>(
    AVFAudio lib,
    T other,
  ) {
    return NSURLProtectionSpace._(
      other.pointer,
      lib,
      retain: true,
      release: true,
    );
  }

  /// Returns a [NSURLProtectionSpace] that wraps the given raw object pointer.
  static NSURLProtectionSpace castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCObject> other, {
    bool retain = false,
    bool release = false,
  }) {
    return NSURLProtectionSpace._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSURLProtectionSpace].
  static bool isInstance(AVFAudio lib, objc.ObjCObjectBase obj) {
    return lib._objc_msgSend_0(
      obj.pointer,
      lib._sel_isKindOfClass_1,
      lib._class_NSURLProtectionSpace1,
    );
  }

  NSURLProtectionSpace initWithHost_port_protocol_realm_authenticationMethod_(
    NSString host,
    int port,
    NSString? protocol,
    NSString? realm,
    NSString? authenticationMethod,
  ) {
    final _ret = _lib._objc_msgSend_1001(
      this.pointer,
      _lib._sel_initWithHost_port_protocol_realm_authenticationMethod_1,
      host.pointer,
      port,
      protocol?.pointer ?? ffi.nullptr,
      realm?.pointer ?? ffi.nullptr,
      authenticationMethod?.pointer ?? ffi.nullptr,
    );
    return NSURLProtectionSpace._(_ret, _lib, retain: true, release: true);
  }

  NSURLProtectionSpace initWithProxyHost_port_type_realm_authenticationMethod_(
    NSString host,
    int port,
    NSString? type,
    NSString? realm,
    NSString? authenticationMethod,
  ) {
    final _ret = _lib._objc_msgSend_1001(
      this.pointer,
      _lib._sel_initWithProxyHost_port_type_realm_authenticationMethod_1,
      host.pointer,
      port,
      type?.pointer ?? ffi.nullptr,
      realm?.pointer ?? ffi.nullptr,
      authenticationMethod?.pointer ?? ffi.nullptr,
    );
    return NSURLProtectionSpace._(_ret, _lib, retain: true, release: true);
  }

  NSString? get realm {
    final _ret = _lib._objc_msgSend_44(this.pointer, _lib._sel_realm1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  bool get receivesCredentialSecurely {
    return _lib._objc_msgSend_12(
      this.pointer,
      _lib._sel_receivesCredentialSecurely1,
    );
  }

  bool get isProxy {
    return _lib._objc_msgSend_12(this.pointer, _lib._sel_isProxy1);
  }

  NSString get host {
    final _ret = _lib._objc_msgSend_21(this.pointer, _lib._sel_host1);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  int get port {
    return _lib._objc_msgSend_83(this.pointer, _lib._sel_port1);
  }

  NSString? get proxyType {
    final _ret = _lib._objc_msgSend_44(this.pointer, _lib._sel_proxyType1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString? get protocol {
    final _ret = _lib._objc_msgSend_44(this.pointer, _lib._sel_protocol1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString get authenticationMethod {
    final _ret = _lib._objc_msgSend_21(
      this.pointer,
      _lib._sel_authenticationMethod1,
    );
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSArray? get distinguishedNames {
    final _ret = _lib._objc_msgSend_84(
      this.pointer,
      _lib._sel_distinguishedNames1,
    );
    return _ret.address == 0
        ? null
        : NSArray._(_ret, _lib, retain: true, release: true);
  }

  ffi.Pointer<__SecTrust> get serverTrust {
    return _lib._objc_msgSend_1002(this.pointer, _lib._sel_serverTrust1);
  }

  @override
  NSURLProtectionSpace init() {
    final _ret = _lib._objc_msgSend_2(this.pointer, _lib._sel_init1);
    return NSURLProtectionSpace._(_ret, _lib, retain: true, release: true);
  }

  static NSURLProtectionSpace new1(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSURLProtectionSpace1,
      _lib._sel_new1,
    );
    return NSURLProtectionSpace._(_ret, _lib, retain: false, release: true);
  }

  static NSURLProtectionSpace allocWithZone_(
    AVFAudio _lib,
    ffi.Pointer<_NSZone> zone,
  ) {
    final _ret = _lib._objc_msgSend_3(
      _lib._class_NSURLProtectionSpace1,
      _lib._sel_allocWithZone_1,
      zone,
    );
    return NSURLProtectionSpace._(_ret, _lib, retain: false, release: true);
  }

  static NSURLProtectionSpace alloc(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSURLProtectionSpace1,
      _lib._sel_alloc1,
    );
    return NSURLProtectionSpace._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
    AVFAudio _lib,
    NSObject aTarget,
    ffi.Pointer<objc.ObjCSelector> aSelector,
    NSObject? anArgument,
  ) {
    _lib._objc_msgSend_14(
      _lib._class_NSURLProtectionSpace1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
      aTarget.pointer,
      aSelector,
      anArgument?.pointer ?? ffi.nullptr,
    );
  }

  static void cancelPreviousPerformRequestsWithTarget_(
    AVFAudio _lib,
    NSObject aTarget,
  ) {
    _lib._objc_msgSend_15(
      _lib._class_NSURLProtectionSpace1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_1,
      aTarget.pointer,
    );
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSURLProtectionSpace1,
      _lib._sel_accessInstanceVariablesDirectly1,
    );
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSURLProtectionSpace1,
      _lib._sel_useStoredAccessor1,
    );
  }

  static NSSet keyPathsForValuesAffectingValueForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    final _ret = _lib._objc_msgSend_63(
      _lib._class_NSURLProtectionSpace1,
      _lib._sel_keyPathsForValuesAffectingValueForKey_1,
      key.pointer,
    );
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    return _lib._objc_msgSend_64(
      _lib._class_NSURLProtectionSpace1,
      _lib._sel_automaticallyNotifiesObserversForKey_1,
      key.pointer,
    );
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
    AVFAudio _lib,
    NSArray keys,
    NSString dependentKey,
  ) {
    _lib._objc_msgSend_88(
      _lib._class_NSURLProtectionSpace1,
      _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
      keys.pointer,
      dependentKey.pointer,
    );
  }

  static NSArray classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_85(
      _lib._class_NSURLProtectionSpace1,
      _lib._sel_classFallbacksForKeyedArchiver1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSURLProtectionSpace1,
      _lib._sel_classForKeyedUnarchiver1,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

class NSURLCredentialStorage extends NSObject {
  NSURLCredentialStorage._(
    ffi.Pointer<objc.ObjCObject> pointer,
    AVFAudio lib, {
    bool retain = false,
    bool release = false,
  }) : super._(pointer, lib, retain: retain, release: release);

  /// Returns a [NSURLCredentialStorage] that points to the same underlying object as [other].
  static NSURLCredentialStorage castFrom<T extends objc.ObjCObjectBase>(
    AVFAudio lib,
    T other,
  ) {
    return NSURLCredentialStorage._(
      other.pointer,
      lib,
      retain: true,
      release: true,
    );
  }

  /// Returns a [NSURLCredentialStorage] that wraps the given raw object pointer.
  static NSURLCredentialStorage castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCObject> other, {
    bool retain = false,
    bool release = false,
  }) {
    return NSURLCredentialStorage._(
      other,
      lib,
      retain: retain,
      release: release,
    );
  }

  /// Returns whether [obj] is an instance of [NSURLCredentialStorage].
  static bool isInstance(AVFAudio lib, objc.ObjCObjectBase obj) {
    return lib._objc_msgSend_0(
      obj.pointer,
      lib._sel_isKindOfClass_1,
      lib._class_NSURLCredentialStorage1,
    );
  }

  static NSURLCredentialStorage getSharedCredentialStorage(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_1003(
      _lib._class_NSURLCredentialStorage1,
      _lib._sel_sharedCredentialStorage1,
    );
    return NSURLCredentialStorage._(_ret, _lib, retain: true, release: true);
  }

  NSDictionary? credentialsForProtectionSpace_(NSURLProtectionSpace space) {
    final _ret = _lib._objc_msgSend_1004(
      this.pointer,
      _lib._sel_credentialsForProtectionSpace_1,
      space.pointer,
    );
    return _ret.address == 0
        ? null
        : NSDictionary._(_ret, _lib, retain: true, release: true);
  }

  NSDictionary get allCredentials {
    final _ret = _lib._objc_msgSend_181(
      this.pointer,
      _lib._sel_allCredentials1,
    );
    return NSDictionary._(_ret, _lib, retain: true, release: true);
  }

  void setCredential_forProtectionSpace_(
    NSURLCredential credential,
    NSURLProtectionSpace space,
  ) {
    _lib._objc_msgSend_1005(
      this.pointer,
      _lib._sel_setCredential_forProtectionSpace_1,
      credential.pointer,
      space.pointer,
    );
  }

  void removeCredential_forProtectionSpace_(
    NSURLCredential credential,
    NSURLProtectionSpace space,
  ) {
    _lib._objc_msgSend_1005(
      this.pointer,
      _lib._sel_removeCredential_forProtectionSpace_1,
      credential.pointer,
      space.pointer,
    );
  }

  void removeCredential_forProtectionSpace_options_(
    NSURLCredential credential,
    NSURLProtectionSpace space,
    NSDictionary? options,
  ) {
    _lib._objc_msgSend_1006(
      this.pointer,
      _lib._sel_removeCredential_forProtectionSpace_options_1,
      credential.pointer,
      space.pointer,
      options?.pointer ?? ffi.nullptr,
    );
  }

  NSURLCredential? defaultCredentialForProtectionSpace_(
    NSURLProtectionSpace space,
  ) {
    final _ret = _lib._objc_msgSend_1007(
      this.pointer,
      _lib._sel_defaultCredentialForProtectionSpace_1,
      space.pointer,
    );
    return _ret.address == 0
        ? null
        : NSURLCredential._(_ret, _lib, retain: true, release: true);
  }

  void setDefaultCredential_forProtectionSpace_(
    NSURLCredential credential,
    NSURLProtectionSpace space,
  ) {
    _lib._objc_msgSend_1005(
      this.pointer,
      _lib._sel_setDefaultCredential_forProtectionSpace_1,
      credential.pointer,
      space.pointer,
    );
  }

  void getCredentialsForProtectionSpace_task_completionHandler_(
    NSURLProtectionSpace protectionSpace,
    NSURLSessionTask task,
    ObjCBlock_ffiVoid_NSDictionary completionHandler,
  ) {
    _lib._objc_msgSend_1008(
      this.pointer,
      _lib._sel_getCredentialsForProtectionSpace_task_completionHandler_1,
      protectionSpace.pointer,
      task.pointer,
      completionHandler.pointer,
    );
  }

  void setCredential_forProtectionSpace_task_(
    NSURLCredential credential,
    NSURLProtectionSpace protectionSpace,
    NSURLSessionTask task,
  ) {
    _lib._objc_msgSend_1009(
      this.pointer,
      _lib._sel_setCredential_forProtectionSpace_task_1,
      credential.pointer,
      protectionSpace.pointer,
      task.pointer,
    );
  }

  void removeCredential_forProtectionSpace_options_task_(
    NSURLCredential credential,
    NSURLProtectionSpace protectionSpace,
    NSDictionary? options,
    NSURLSessionTask task,
  ) {
    _lib._objc_msgSend_1010(
      this.pointer,
      _lib._sel_removeCredential_forProtectionSpace_options_task_1,
      credential.pointer,
      protectionSpace.pointer,
      options?.pointer ?? ffi.nullptr,
      task.pointer,
    );
  }

  void getDefaultCredentialForProtectionSpace_task_completionHandler_(
    NSURLProtectionSpace space,
    NSURLSessionTask task,
    ObjCBlock_ffiVoid_NSURLCredential completionHandler,
  ) {
    _lib._objc_msgSend_1011(
      this.pointer,
      _lib._sel_getDefaultCredentialForProtectionSpace_task_completionHandler_1,
      space.pointer,
      task.pointer,
      completionHandler.pointer,
    );
  }

  void setDefaultCredential_forProtectionSpace_task_(
    NSURLCredential credential,
    NSURLProtectionSpace protectionSpace,
    NSURLSessionTask task,
  ) {
    _lib._objc_msgSend_1009(
      this.pointer,
      _lib._sel_setDefaultCredential_forProtectionSpace_task_1,
      credential.pointer,
      protectionSpace.pointer,
      task.pointer,
    );
  }

  @override
  NSURLCredentialStorage init() {
    final _ret = _lib._objc_msgSend_2(this.pointer, _lib._sel_init1);
    return NSURLCredentialStorage._(_ret, _lib, retain: true, release: true);
  }

  static NSURLCredentialStorage new1(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSURLCredentialStorage1,
      _lib._sel_new1,
    );
    return NSURLCredentialStorage._(_ret, _lib, retain: false, release: true);
  }

  static NSURLCredentialStorage allocWithZone_(
    AVFAudio _lib,
    ffi.Pointer<_NSZone> zone,
  ) {
    final _ret = _lib._objc_msgSend_3(
      _lib._class_NSURLCredentialStorage1,
      _lib._sel_allocWithZone_1,
      zone,
    );
    return NSURLCredentialStorage._(_ret, _lib, retain: false, release: true);
  }

  static NSURLCredentialStorage alloc(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSURLCredentialStorage1,
      _lib._sel_alloc1,
    );
    return NSURLCredentialStorage._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
    AVFAudio _lib,
    NSObject aTarget,
    ffi.Pointer<objc.ObjCSelector> aSelector,
    NSObject? anArgument,
  ) {
    _lib._objc_msgSend_14(
      _lib._class_NSURLCredentialStorage1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
      aTarget.pointer,
      aSelector,
      anArgument?.pointer ?? ffi.nullptr,
    );
  }

  static void cancelPreviousPerformRequestsWithTarget_(
    AVFAudio _lib,
    NSObject aTarget,
  ) {
    _lib._objc_msgSend_15(
      _lib._class_NSURLCredentialStorage1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_1,
      aTarget.pointer,
    );
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSURLCredentialStorage1,
      _lib._sel_accessInstanceVariablesDirectly1,
    );
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSURLCredentialStorage1,
      _lib._sel_useStoredAccessor1,
    );
  }

  static NSSet keyPathsForValuesAffectingValueForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    final _ret = _lib._objc_msgSend_63(
      _lib._class_NSURLCredentialStorage1,
      _lib._sel_keyPathsForValuesAffectingValueForKey_1,
      key.pointer,
    );
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    return _lib._objc_msgSend_64(
      _lib._class_NSURLCredentialStorage1,
      _lib._sel_automaticallyNotifiesObserversForKey_1,
      key.pointer,
    );
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
    AVFAudio _lib,
    NSArray keys,
    NSString dependentKey,
  ) {
    _lib._objc_msgSend_88(
      _lib._class_NSURLCredentialStorage1,
      _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
      keys.pointer,
      dependentKey.pointer,
    );
  }

  static NSArray classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_85(
      _lib._class_NSURLCredentialStorage1,
      _lib._sel_classFallbacksForKeyedArchiver1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSURLCredentialStorage1,
      _lib._sel_classForKeyedUnarchiver1,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

void _ObjCBlock_ffiVoid_NSDictionary_fnPtrTrampoline(
  ffi.Pointer<objc.ObjCBlock> block,
  ffi.Pointer<objc.ObjCObject> arg0,
) => block.ref.target
    .cast<
      ffi.NativeFunction<ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0)>
    >()
    .asFunction<void Function(ffi.Pointer<objc.ObjCObject>)>()(arg0);
final _ObjCBlock_ffiVoid_NSDictionary_closureRegistry =
    <int, void Function(ffi.Pointer<objc.ObjCObject>)>{};
int _ObjCBlock_ffiVoid_NSDictionary_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void> _ObjCBlock_ffiVoid_NSDictionary_registerClosure(
  void Function(ffi.Pointer<objc.ObjCObject>) fn,
) {
  final id = ++_ObjCBlock_ffiVoid_NSDictionary_closureRegistryIndex;
  _ObjCBlock_ffiVoid_NSDictionary_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

void _ObjCBlock_ffiVoid_NSDictionary_closureTrampoline(
  ffi.Pointer<objc.ObjCBlock> block,
  ffi.Pointer<objc.ObjCObject> arg0,
) => _ObjCBlock_ffiVoid_NSDictionary_closureRegistry[block.ref.target.address]!(
  arg0,
);

class ObjCBlock_ffiVoid_NSDictionary extends objc.ObjCBlockBase {
  ObjCBlock_ffiVoid_NSDictionary._(
    ffi.Pointer<objc.ObjCBlock> pointer,
    this._lib, {
    bool retain = false,
    bool release = true,
  }) : super(pointer, retain: retain, release: release);

  AVFAudio _lib;

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_ffiVoid_NSDictionary castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCBlock> pointer, {
    bool retain = false,
    bool release = false,
  }) {
    return ObjCBlock_ffiVoid_NSDictionary._(
      pointer,
      lib,
      retain: retain,
      release: release,
    );
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSDictionary.fromFunctionPointer(
    AVFAudio lib,
    ffi.Pointer<
      ffi.NativeFunction<ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0)>
    > ptr,
  ) : this._(objc.newBlock(
        _cFuncTrampoline ??=
            ffi.Pointer.fromFunction<
              ffi.Void Function(
                ffi.Pointer<objc.ObjCBlock>,
                ffi.Pointer<objc.ObjCObject>,
              )
            >(_ObjCBlock_ffiVoid_NSDictionary_fnPtrTrampoline).cast(),
        ptr.cast(),
      ), lib);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSDictionary.fromFunction(
    AVFAudio lib,
    void Function(NSDictionary?) fn,
  ) : this._(objc.newBlock(
        _dartFuncTrampoline ??=
            ffi.Pointer.fromFunction<
              ffi.Void Function(
                ffi.Pointer<objc.ObjCBlock>,
                ffi.Pointer<objc.ObjCObject>,
              )
            >(_ObjCBlock_ffiVoid_NSDictionary_closureTrampoline).cast(),
        _ObjCBlock_ffiVoid_NSDictionary_registerClosure((
          ffi.Pointer<objc.ObjCObject> arg0,
        ) => fn(
          arg0.address == 0
              ? null
              : NSDictionary._(arg0, lib, retain: true, release: true),
        )),
      ), lib);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_NSDictionary.listener(
    AVFAudio lib,
    void Function(NSDictionary?) fn,
  ) : this._(objc.newBlock(
        (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
              ffi.Void Function(
                ffi.Pointer<objc.ObjCBlock>,
                ffi.Pointer<objc.ObjCObject>,
              )
            >.listener(
              _ObjCBlock_ffiVoid_NSDictionary_closureTrampoline,
            )..keepIsolateAlive = false)
            .nativeFunction
            .cast(),
        _ObjCBlock_ffiVoid_NSDictionary_registerClosure((
          ffi.Pointer<objc.ObjCObject> arg0,
        ) => fn(
          arg0.address == 0
              ? null
              : NSDictionary._(arg0, lib, retain: true, release: true),
        )),
      ), lib);
  static ffi.NativeCallable<
    ffi.Void Function(ffi.Pointer<objc.ObjCBlock>, ffi.Pointer<objc.ObjCObject>)
  >? _dartFuncListenerTrampoline;

  void call(NSDictionary? arg0) => pointer.ref.invoke
      .cast<
        ffi.NativeFunction<
          ffi.Void Function(
            ffi.Pointer<objc.ObjCBlock> block,
            ffi.Pointer<objc.ObjCObject> arg0,
          )
        >
      >()
      .asFunction<
        void Function(ffi.Pointer<objc.ObjCBlock>, ffi.Pointer<objc.ObjCObject>)
      >()(pointer, arg0?.pointer ?? ffi.nullptr);
}

void _ObjCBlock_ffiVoid_NSURLCredential_fnPtrTrampoline(
  ffi.Pointer<objc.ObjCBlock> block,
  ffi.Pointer<objc.ObjCObject> arg0,
) => block.ref.target
    .cast<
      ffi.NativeFunction<ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0)>
    >()
    .asFunction<void Function(ffi.Pointer<objc.ObjCObject>)>()(arg0);
final _ObjCBlock_ffiVoid_NSURLCredential_closureRegistry =
    <int, void Function(ffi.Pointer<objc.ObjCObject>)>{};
int _ObjCBlock_ffiVoid_NSURLCredential_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void> _ObjCBlock_ffiVoid_NSURLCredential_registerClosure(
  void Function(ffi.Pointer<objc.ObjCObject>) fn,
) {
  final id = ++_ObjCBlock_ffiVoid_NSURLCredential_closureRegistryIndex;
  _ObjCBlock_ffiVoid_NSURLCredential_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

void _ObjCBlock_ffiVoid_NSURLCredential_closureTrampoline(
  ffi.Pointer<objc.ObjCBlock> block,
  ffi.Pointer<objc.ObjCObject> arg0,
) => _ObjCBlock_ffiVoid_NSURLCredential_closureRegistry[block
    .ref
    .target
    .address]!(arg0);

class ObjCBlock_ffiVoid_NSURLCredential extends objc.ObjCBlockBase {
  ObjCBlock_ffiVoid_NSURLCredential._(
    ffi.Pointer<objc.ObjCBlock> pointer,
    this._lib, {
    bool retain = false,
    bool release = true,
  }) : super(pointer, retain: retain, release: release);

  AVFAudio _lib;

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_ffiVoid_NSURLCredential castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCBlock> pointer, {
    bool retain = false,
    bool release = false,
  }) {
    return ObjCBlock_ffiVoid_NSURLCredential._(
      pointer,
      lib,
      retain: retain,
      release: release,
    );
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSURLCredential.fromFunctionPointer(
    AVFAudio lib,
    ffi.Pointer<
      ffi.NativeFunction<ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0)>
    > ptr,
  ) : this._(objc.newBlock(
        _cFuncTrampoline ??=
            ffi.Pointer.fromFunction<
              ffi.Void Function(
                ffi.Pointer<objc.ObjCBlock>,
                ffi.Pointer<objc.ObjCObject>,
              )
            >(_ObjCBlock_ffiVoid_NSURLCredential_fnPtrTrampoline).cast(),
        ptr.cast(),
      ), lib);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSURLCredential.fromFunction(
    AVFAudio lib,
    void Function(NSURLCredential?) fn,
  ) : this._(objc.newBlock(
        _dartFuncTrampoline ??=
            ffi.Pointer.fromFunction<
              ffi.Void Function(
                ffi.Pointer<objc.ObjCBlock>,
                ffi.Pointer<objc.ObjCObject>,
              )
            >(_ObjCBlock_ffiVoid_NSURLCredential_closureTrampoline).cast(),
        _ObjCBlock_ffiVoid_NSURLCredential_registerClosure((
          ffi.Pointer<objc.ObjCObject> arg0,
        ) => fn(
          arg0.address == 0
              ? null
              : NSURLCredential._(arg0, lib, retain: true, release: true),
        )),
      ), lib);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_NSURLCredential.listener(
    AVFAudio lib,
    void Function(NSURLCredential?) fn,
  ) : this._(objc.newBlock(
        (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
              ffi.Void Function(
                ffi.Pointer<objc.ObjCBlock>,
                ffi.Pointer<objc.ObjCObject>,
              )
            >.listener(
              _ObjCBlock_ffiVoid_NSURLCredential_closureTrampoline,
            )..keepIsolateAlive = false)
            .nativeFunction
            .cast(),
        _ObjCBlock_ffiVoid_NSURLCredential_registerClosure((
          ffi.Pointer<objc.ObjCObject> arg0,
        ) => fn(
          arg0.address == 0
              ? null
              : NSURLCredential._(arg0, lib, retain: true, release: true),
        )),
      ), lib);
  static ffi.NativeCallable<
    ffi.Void Function(ffi.Pointer<objc.ObjCBlock>, ffi.Pointer<objc.ObjCObject>)
  >? _dartFuncListenerTrampoline;

  void call(NSURLCredential? arg0) => pointer.ref.invoke
      .cast<
        ffi.NativeFunction<
          ffi.Void Function(
            ffi.Pointer<objc.ObjCBlock> block,
            ffi.Pointer<objc.ObjCObject> arg0,
          )
        >
      >()
      .asFunction<
        void Function(ffi.Pointer<objc.ObjCBlock>, ffi.Pointer<objc.ObjCObject>)
      >()(pointer, arg0?.pointer ?? ffi.nullptr);
}

class NSURLProtocol extends NSObject {
  NSURLProtocol._(
    ffi.Pointer<objc.ObjCObject> pointer,
    AVFAudio lib, {
    bool retain = false,
    bool release = false,
  }) : super._(pointer, lib, retain: retain, release: release);

  /// Returns a [NSURLProtocol] that points to the same underlying object as [other].
  static NSURLProtocol castFrom<T extends objc.ObjCObjectBase>(
    AVFAudio lib,
    T other,
  ) {
    return NSURLProtocol._(other.pointer, lib, retain: true, release: true);
  }

  /// Returns a [NSURLProtocol] that wraps the given raw object pointer.
  static NSURLProtocol castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCObject> other, {
    bool retain = false,
    bool release = false,
  }) {
    return NSURLProtocol._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSURLProtocol].
  static bool isInstance(AVFAudio lib, objc.ObjCObjectBase obj) {
    return lib._objc_msgSend_0(
      obj.pointer,
      lib._sel_isKindOfClass_1,
      lib._class_NSURLProtocol1,
    );
  }

  NSURLProtocol initWithRequest_cachedResponse_client_(
    NSURLRequest request,
    NSCachedURLResponse? cachedResponse,
    NSObject? client,
  ) {
    final _ret = _lib._objc_msgSend_1012(
      this.pointer,
      _lib._sel_initWithRequest_cachedResponse_client_1,
      request.pointer,
      cachedResponse?.pointer ?? ffi.nullptr,
      client?.pointer ?? ffi.nullptr,
    );
    return NSURLProtocol._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get client {
    final _ret = _lib._objc_msgSend_17(this.pointer, _lib._sel_client1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSURLRequest get request {
    final _ret = _lib._objc_msgSend_988(this.pointer, _lib._sel_request1);
    return NSURLRequest._(_ret, _lib, retain: true, release: true);
  }

  NSCachedURLResponse? get cachedResponse {
    final _ret = _lib._objc_msgSend_1013(
      this.pointer,
      _lib._sel_cachedResponse1,
    );
    return _ret.address == 0
        ? null
        : NSCachedURLResponse._(_ret, _lib, retain: true, release: true);
  }

  static bool canInitWithRequest_(AVFAudio _lib, NSURLRequest request) {
    return _lib._objc_msgSend_990(
      _lib._class_NSURLProtocol1,
      _lib._sel_canInitWithRequest_1,
      request.pointer,
    );
  }

  static NSURLRequest canonicalRequestForRequest_(
    AVFAudio _lib,
    NSURLRequest request,
  ) {
    final _ret = _lib._objc_msgSend_1014(
      _lib._class_NSURLProtocol1,
      _lib._sel_canonicalRequestForRequest_1,
      request.pointer,
    );
    return NSURLRequest._(_ret, _lib, retain: true, release: true);
  }

  static bool requestIsCacheEquivalent_toRequest_(
    AVFAudio _lib,
    NSURLRequest a,
    NSURLRequest b,
  ) {
    return _lib._objc_msgSend_1015(
      _lib._class_NSURLProtocol1,
      _lib._sel_requestIsCacheEquivalent_toRequest_1,
      a.pointer,
      b.pointer,
    );
  }

  void startLoading() {
    _lib._objc_msgSend_1(this.pointer, _lib._sel_startLoading1);
  }

  void stopLoading() {
    _lib._objc_msgSend_1(this.pointer, _lib._sel_stopLoading1);
  }

  static NSObject? propertyForKey_inRequest_(
    AVFAudio _lib,
    NSString key,
    NSURLRequest request,
  ) {
    final _ret = _lib._objc_msgSend_1016(
      _lib._class_NSURLProtocol1,
      _lib._sel_propertyForKey_inRequest_1,
      key.pointer,
      request.pointer,
    );
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  static void setProperty_forKey_inRequest_(
    AVFAudio _lib,
    NSObject value,
    NSString key,
    NSMutableURLRequest request,
  ) {
    _lib._objc_msgSend_1023(
      _lib._class_NSURLProtocol1,
      _lib._sel_setProperty_forKey_inRequest_1,
      value.pointer,
      key.pointer,
      request.pointer,
    );
  }

  static void removePropertyForKey_inRequest_(
    AVFAudio _lib,
    NSString key,
    NSMutableURLRequest request,
  ) {
    _lib._objc_msgSend_1024(
      _lib._class_NSURLProtocol1,
      _lib._sel_removePropertyForKey_inRequest_1,
      key.pointer,
      request.pointer,
    );
  }

  static bool registerClass_(AVFAudio _lib, NSObject protocolClass) {
    return _lib._objc_msgSend_0(
      _lib._class_NSURLProtocol1,
      _lib._sel_registerClass_1,
      protocolClass.pointer,
    );
  }

  static void unregisterClass_(AVFAudio _lib, NSObject protocolClass) {
    _lib._objc_msgSend_15(
      _lib._class_NSURLProtocol1,
      _lib._sel_unregisterClass_1,
      protocolClass.pointer,
    );
  }

  static bool canInitWithTask_(AVFAudio _lib, NSURLSessionTask task) {
    return _lib._objc_msgSend_1025(
      _lib._class_NSURLProtocol1,
      _lib._sel_canInitWithTask_1,
      task.pointer,
    );
  }

  NSURLProtocol initWithTask_cachedResponse_client_(
    NSURLSessionTask task,
    NSCachedURLResponse? cachedResponse,
    NSObject? client,
  ) {
    final _ret = _lib._objc_msgSend_1026(
      this.pointer,
      _lib._sel_initWithTask_cachedResponse_client_1,
      task.pointer,
      cachedResponse?.pointer ?? ffi.nullptr,
      client?.pointer ?? ffi.nullptr,
    );
    return NSURLProtocol._(_ret, _lib, retain: true, release: true);
  }

  NSURLSessionTask? get task {
    final _ret = _lib._objc_msgSend_1027(this.pointer, _lib._sel_task1);
    return _ret.address == 0
        ? null
        : NSURLSessionTask._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSURLProtocol init() {
    final _ret = _lib._objc_msgSend_2(this.pointer, _lib._sel_init1);
    return NSURLProtocol._(_ret, _lib, retain: true, release: true);
  }

  static NSURLProtocol new1(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSURLProtocol1,
      _lib._sel_new1,
    );
    return NSURLProtocol._(_ret, _lib, retain: false, release: true);
  }

  static NSURLProtocol allocWithZone_(
    AVFAudio _lib,
    ffi.Pointer<_NSZone> zone,
  ) {
    final _ret = _lib._objc_msgSend_3(
      _lib._class_NSURLProtocol1,
      _lib._sel_allocWithZone_1,
      zone,
    );
    return NSURLProtocol._(_ret, _lib, retain: false, release: true);
  }

  static NSURLProtocol alloc(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSURLProtocol1,
      _lib._sel_alloc1,
    );
    return NSURLProtocol._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
    AVFAudio _lib,
    NSObject aTarget,
    ffi.Pointer<objc.ObjCSelector> aSelector,
    NSObject? anArgument,
  ) {
    _lib._objc_msgSend_14(
      _lib._class_NSURLProtocol1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
      aTarget.pointer,
      aSelector,
      anArgument?.pointer ?? ffi.nullptr,
    );
  }

  static void cancelPreviousPerformRequestsWithTarget_(
    AVFAudio _lib,
    NSObject aTarget,
  ) {
    _lib._objc_msgSend_15(
      _lib._class_NSURLProtocol1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_1,
      aTarget.pointer,
    );
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSURLProtocol1,
      _lib._sel_accessInstanceVariablesDirectly1,
    );
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSURLProtocol1,
      _lib._sel_useStoredAccessor1,
    );
  }

  static NSSet keyPathsForValuesAffectingValueForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    final _ret = _lib._objc_msgSend_63(
      _lib._class_NSURLProtocol1,
      _lib._sel_keyPathsForValuesAffectingValueForKey_1,
      key.pointer,
    );
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    return _lib._objc_msgSend_64(
      _lib._class_NSURLProtocol1,
      _lib._sel_automaticallyNotifiesObserversForKey_1,
      key.pointer,
    );
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
    AVFAudio _lib,
    NSArray keys,
    NSString dependentKey,
  ) {
    _lib._objc_msgSend_88(
      _lib._class_NSURLProtocol1,
      _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
      keys.pointer,
      dependentKey.pointer,
    );
  }

  static NSArray classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_85(
      _lib._class_NSURLProtocol1,
      _lib._sel_classFallbacksForKeyedArchiver1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSURLProtocol1,
      _lib._sel_classForKeyedUnarchiver1,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

class NSMutableURLRequest extends NSURLRequest {
  NSMutableURLRequest._(
    ffi.Pointer<objc.ObjCObject> pointer,
    AVFAudio lib, {
    bool retain = false,
    bool release = false,
  }) : super._(pointer, lib, retain: retain, release: release);

  /// Returns a [NSMutableURLRequest] that points to the same underlying object as [other].
  static NSMutableURLRequest castFrom<T extends objc.ObjCObjectBase>(
    AVFAudio lib,
    T other,
  ) {
    return NSMutableURLRequest._(
      other.pointer,
      lib,
      retain: true,
      release: true,
    );
  }

  /// Returns a [NSMutableURLRequest] that wraps the given raw object pointer.
  static NSMutableURLRequest castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCObject> other, {
    bool retain = false,
    bool release = false,
  }) {
    return NSMutableURLRequest._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSMutableURLRequest].
  static bool isInstance(AVFAudio lib, objc.ObjCObjectBase obj) {
    return lib._objc_msgSend_0(
      obj.pointer,
      lib._sel_isKindOfClass_1,
      lib._class_NSMutableURLRequest1,
    );
  }

  @override
  NSURL? get URL {
    final _ret = _lib._objc_msgSend_45(this.pointer, _lib._sel_URL1);
    return _ret.address == 0
        ? null
        : NSURL._(_ret, _lib, retain: true, release: true);
  }

  set URL(NSURL? value) {
    return _lib._objc_msgSend_671(
      this.pointer,
      _lib._sel_setURL_1,
      value?.pointer ?? ffi.nullptr,
    );
  }

  @override
  int get cachePolicy {
    return _lib._objc_msgSend_859(this.pointer, _lib._sel_cachePolicy1);
  }

  set cachePolicy(int value) {
    return _lib._objc_msgSend_1017(
      this.pointer,
      _lib._sel_setCachePolicy_1,
      value,
    );
  }

  @override
  double get timeoutInterval {
    return objc.useMsgSendVariants
        ? _lib._objc_msgSend_165_fpret(this.pointer, _lib._sel_timeoutInterval1)
        : _lib._objc_msgSend_165(this.pointer, _lib._sel_timeoutInterval1);
  }

  set timeoutInterval(double value) {
    return _lib._objc_msgSend_542(
      this.pointer,
      _lib._sel_setTimeoutInterval_1,
      value,
    );
  }

  @override
  NSURL? get mainDocumentURL {
    final _ret = _lib._objc_msgSend_45(
      this.pointer,
      _lib._sel_mainDocumentURL1,
    );
    return _ret.address == 0
        ? null
        : NSURL._(_ret, _lib, retain: true, release: true);
  }

  set mainDocumentURL(NSURL? value) {
    return _lib._objc_msgSend_671(
      this.pointer,
      _lib._sel_setMainDocumentURL_1,
      value?.pointer ?? ffi.nullptr,
    );
  }

  @override
  int get networkServiceType {
    return _lib._objc_msgSend_860(this.pointer, _lib._sel_networkServiceType1);
  }

  set networkServiceType(int value) {
    return _lib._objc_msgSend_1018(
      this.pointer,
      _lib._sel_setNetworkServiceType_1,
      value,
    );
  }

  @override
  bool get allowsCellularAccess {
    return _lib._objc_msgSend_12(this.pointer, _lib._sel_allowsCellularAccess1);
  }

  set allowsCellularAccess(bool value) {
    return _lib._objc_msgSend_527(
      this.pointer,
      _lib._sel_setAllowsCellularAccess_1,
      value,
    );
  }

  @override
  bool get allowsExpensiveNetworkAccess {
    return _lib._objc_msgSend_12(
      this.pointer,
      _lib._sel_allowsExpensiveNetworkAccess1,
    );
  }

  set allowsExpensiveNetworkAccess(bool value) {
    return _lib._objc_msgSend_527(
      this.pointer,
      _lib._sel_setAllowsExpensiveNetworkAccess_1,
      value,
    );
  }

  @override
  bool get allowsConstrainedNetworkAccess {
    return _lib._objc_msgSend_12(
      this.pointer,
      _lib._sel_allowsConstrainedNetworkAccess1,
    );
  }

  set allowsConstrainedNetworkAccess(bool value) {
    return _lib._objc_msgSend_527(
      this.pointer,
      _lib._sel_setAllowsConstrainedNetworkAccess_1,
      value,
    );
  }

  @override
  bool get assumesHTTP3Capable {
    return _lib._objc_msgSend_12(this.pointer, _lib._sel_assumesHTTP3Capable1);
  }

  set assumesHTTP3Capable(bool value) {
    return _lib._objc_msgSend_527(
      this.pointer,
      _lib._sel_setAssumesHTTP3Capable_1,
      value,
    );
  }

  @override
  int get attribution {
    return _lib._objc_msgSend_861(this.pointer, _lib._sel_attribution1);
  }

  set attribution(int value) {
    return _lib._objc_msgSend_1019(
      this.pointer,
      _lib._sel_setAttribution_1,
      value,
    );
  }

  @override
  bool get requiresDNSSECValidation {
    return _lib._objc_msgSend_12(
      this.pointer,
      _lib._sel_requiresDNSSECValidation1,
    );
  }

  set requiresDNSSECValidation(bool value) {
    return _lib._objc_msgSend_527(
      this.pointer,
      _lib._sel_setRequiresDNSSECValidation_1,
      value,
    );
  }

  NSString get HTTPMethod {
    final _ret = _lib._objc_msgSend_21(this.pointer, _lib._sel_HTTPMethod1);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  set HTTPMethod(NSString value) {
    return _lib._objc_msgSend_646(
      this.pointer,
      _lib._sel_setHTTPMethod_1,
      value.pointer,
    );
  }

  @override
  NSDictionary? get allHTTPHeaderFields {
    final _ret = _lib._objc_msgSend_390(
      this.pointer,
      _lib._sel_allHTTPHeaderFields1,
    );
    return _ret.address == 0
        ? null
        : NSDictionary._(_ret, _lib, retain: true, release: true);
  }

  set allHTTPHeaderFields(NSDictionary? value) {
    return _lib._objc_msgSend_634(
      this.pointer,
      _lib._sel_setAllHTTPHeaderFields_1,
      value?.pointer ?? ffi.nullptr,
    );
  }

  void setValue_forHTTPHeaderField_(NSString? value, NSString field) {
    _lib._objc_msgSend_1020(
      this.pointer,
      _lib._sel_setValue_forHTTPHeaderField_1,
      value?.pointer ?? ffi.nullptr,
      field.pointer,
    );
  }

  void addValue_forHTTPHeaderField_(NSString value, NSString field) {
    _lib._objc_msgSend_551(
      this.pointer,
      _lib._sel_addValue_forHTTPHeaderField_1,
      value.pointer,
      field.pointer,
    );
  }

  @override
  NSData? get HTTPBody {
    final _ret = _lib._objc_msgSend_286(this.pointer, _lib._sel_HTTPBody1);
    return _ret.address == 0
        ? null
        : NSData._(_ret, _lib, retain: true, release: true);
  }

  set HTTPBody(NSData? value) {
    return _lib._objc_msgSend_1021(
      this.pointer,
      _lib._sel_setHTTPBody_1,
      value?.pointer ?? ffi.nullptr,
    );
  }

  @override
  NSInputStream? get HTTPBodyStream {
    final _ret = _lib._objc_msgSend_875(
      this.pointer,
      _lib._sel_HTTPBodyStream1,
    );
    return _ret.address == 0
        ? null
        : NSInputStream._(_ret, _lib, retain: true, release: true);
  }

  set HTTPBodyStream(NSInputStream? value) {
    return _lib._objc_msgSend_1022(
      this.pointer,
      _lib._sel_setHTTPBodyStream_1,
      value?.pointer ?? ffi.nullptr,
    );
  }

  @override
  bool get HTTPShouldHandleCookies {
    return _lib._objc_msgSend_12(
      this.pointer,
      _lib._sel_HTTPShouldHandleCookies1,
    );
  }

  set HTTPShouldHandleCookies(bool value) {
    return _lib._objc_msgSend_527(
      this.pointer,
      _lib._sel_setHTTPShouldHandleCookies_1,
      value,
    );
  }

  @override
  bool get HTTPShouldUsePipelining {
    return _lib._objc_msgSend_12(
      this.pointer,
      _lib._sel_HTTPShouldUsePipelining1,
    );
  }

  set HTTPShouldUsePipelining(bool value) {
    return _lib._objc_msgSend_527(
      this.pointer,
      _lib._sel_setHTTPShouldUsePipelining_1,
      value,
    );
  }

  static NSMutableURLRequest requestWithURL_(AVFAudio _lib, NSURL URL) {
    final _ret = _lib._objc_msgSend_262(
      _lib._class_NSMutableURLRequest1,
      _lib._sel_requestWithURL_1,
      URL.pointer,
    );
    return NSMutableURLRequest._(_ret, _lib, retain: true, release: true);
  }

  static bool getSupportsSecureCoding(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSMutableURLRequest1,
      _lib._sel_supportsSecureCoding1,
    );
  }

  static NSMutableURLRequest requestWithURL_cachePolicy_timeoutInterval_(
    AVFAudio _lib,
    NSURL URL,
    int cachePolicy,
    double timeoutInterval,
  ) {
    final _ret = _lib._objc_msgSend_858(
      _lib._class_NSMutableURLRequest1,
      _lib._sel_requestWithURL_cachePolicy_timeoutInterval_1,
      URL.pointer,
      cachePolicy,
      timeoutInterval,
    );
    return NSMutableURLRequest._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSMutableURLRequest initWithURL_(NSURL URL) {
    final _ret = _lib._objc_msgSend_262(
      this.pointer,
      _lib._sel_initWithURL_1,
      URL.pointer,
    );
    return NSMutableURLRequest._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSMutableURLRequest initWithURL_cachePolicy_timeoutInterval_(
    NSURL URL,
    int cachePolicy,
    double timeoutInterval,
  ) {
    final _ret = _lib._objc_msgSend_858(
      this.pointer,
      _lib._sel_initWithURL_cachePolicy_timeoutInterval_1,
      URL.pointer,
      cachePolicy,
      timeoutInterval,
    );
    return NSMutableURLRequest._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSMutableURLRequest init() {
    final _ret = _lib._objc_msgSend_2(this.pointer, _lib._sel_init1);
    return NSMutableURLRequest._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableURLRequest new1(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSMutableURLRequest1,
      _lib._sel_new1,
    );
    return NSMutableURLRequest._(_ret, _lib, retain: false, release: true);
  }

  static NSMutableURLRequest allocWithZone_(
    AVFAudio _lib,
    ffi.Pointer<_NSZone> zone,
  ) {
    final _ret = _lib._objc_msgSend_3(
      _lib._class_NSMutableURLRequest1,
      _lib._sel_allocWithZone_1,
      zone,
    );
    return NSMutableURLRequest._(_ret, _lib, retain: false, release: true);
  }

  static NSMutableURLRequest alloc(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSMutableURLRequest1,
      _lib._sel_alloc1,
    );
    return NSMutableURLRequest._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
    AVFAudio _lib,
    NSObject aTarget,
    ffi.Pointer<objc.ObjCSelector> aSelector,
    NSObject? anArgument,
  ) {
    _lib._objc_msgSend_14(
      _lib._class_NSMutableURLRequest1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
      aTarget.pointer,
      aSelector,
      anArgument?.pointer ?? ffi.nullptr,
    );
  }

  static void cancelPreviousPerformRequestsWithTarget_(
    AVFAudio _lib,
    NSObject aTarget,
  ) {
    _lib._objc_msgSend_15(
      _lib._class_NSMutableURLRequest1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_1,
      aTarget.pointer,
    );
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSMutableURLRequest1,
      _lib._sel_accessInstanceVariablesDirectly1,
    );
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSMutableURLRequest1,
      _lib._sel_useStoredAccessor1,
    );
  }

  static NSSet keyPathsForValuesAffectingValueForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    final _ret = _lib._objc_msgSend_63(
      _lib._class_NSMutableURLRequest1,
      _lib._sel_keyPathsForValuesAffectingValueForKey_1,
      key.pointer,
    );
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    return _lib._objc_msgSend_64(
      _lib._class_NSMutableURLRequest1,
      _lib._sel_automaticallyNotifiesObserversForKey_1,
      key.pointer,
    );
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
    AVFAudio _lib,
    NSArray keys,
    NSString dependentKey,
  ) {
    _lib._objc_msgSend_88(
      _lib._class_NSMutableURLRequest1,
      _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
      keys.pointer,
      dependentKey.pointer,
    );
  }

  static NSArray classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_85(
      _lib._class_NSMutableURLRequest1,
      _lib._sel_classFallbacksForKeyedArchiver1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSMutableURLRequest1,
      _lib._sel_classForKeyedUnarchiver1,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

class NSXMLParser extends NSObject {
  NSXMLParser._(
    ffi.Pointer<objc.ObjCObject> pointer,
    AVFAudio lib, {
    bool retain = false,
    bool release = false,
  }) : super._(pointer, lib, retain: retain, release: release);

  /// Returns a [NSXMLParser] that points to the same underlying object as [other].
  static NSXMLParser castFrom<T extends objc.ObjCObjectBase>(
    AVFAudio lib,
    T other,
  ) {
    return NSXMLParser._(other.pointer, lib, retain: true, release: true);
  }

  /// Returns a [NSXMLParser] that wraps the given raw object pointer.
  static NSXMLParser castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCObject> other, {
    bool retain = false,
    bool release = false,
  }) {
    return NSXMLParser._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSXMLParser].
  static bool isInstance(AVFAudio lib, objc.ObjCObjectBase obj) {
    return lib._objc_msgSend_0(
      obj.pointer,
      lib._sel_isKindOfClass_1,
      lib._class_NSXMLParser1,
    );
  }

  NSXMLParser? initWithContentsOfURL_(NSURL url) {
    final _ret = _lib._objc_msgSend_277(
      this.pointer,
      _lib._sel_initWithContentsOfURL_1,
      url.pointer,
    );
    return _ret.address == 0
        ? null
        : NSXMLParser._(_ret, _lib, retain: true, release: true);
  }

  NSXMLParser initWithData_(NSData data) {
    final _ret = _lib._objc_msgSend_279(
      this.pointer,
      _lib._sel_initWithData_1,
      data.pointer,
    );
    return NSXMLParser._(_ret, _lib, retain: true, release: true);
  }

  NSXMLParser initWithStream_(NSInputStream stream) {
    final _ret = _lib._objc_msgSend_1028(
      this.pointer,
      _lib._sel_initWithStream_1,
      stream.pointer,
    );
    return NSXMLParser._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get delegate {
    final _ret = _lib._objc_msgSend_17(this.pointer, _lib._sel_delegate1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  set delegate(NSObject? value) {
    return _lib._objc_msgSend_416(
      this.pointer,
      _lib._sel_setDelegate_1,
      value?.pointer ?? ffi.nullptr,
    );
  }

  bool get shouldProcessNamespaces {
    return _lib._objc_msgSend_12(
      this.pointer,
      _lib._sel_shouldProcessNamespaces1,
    );
  }

  set shouldProcessNamespaces(bool value) {
    return _lib._objc_msgSend_527(
      this.pointer,
      _lib._sel_setShouldProcessNamespaces_1,
      value,
    );
  }

  bool get shouldReportNamespacePrefixes {
    return _lib._objc_msgSend_12(
      this.pointer,
      _lib._sel_shouldReportNamespacePrefixes1,
    );
  }

  set shouldReportNamespacePrefixes(bool value) {
    return _lib._objc_msgSend_527(
      this.pointer,
      _lib._sel_setShouldReportNamespacePrefixes_1,
      value,
    );
  }

  int get externalEntityResolvingPolicy {
    return _lib._objc_msgSend_1029(
      this.pointer,
      _lib._sel_externalEntityResolvingPolicy1,
    );
  }

  set externalEntityResolvingPolicy(int value) {
    return _lib._objc_msgSend_1030(
      this.pointer,
      _lib._sel_setExternalEntityResolvingPolicy_1,
      value,
    );
  }

  NSSet? get allowedExternalEntityURLs {
    final _ret = _lib._objc_msgSend_319(
      this.pointer,
      _lib._sel_allowedExternalEntityURLs1,
    );
    return _ret.address == 0
        ? null
        : NSSet._(_ret, _lib, retain: true, release: true);
  }

  set allowedExternalEntityURLs(NSSet? value) {
    return _lib._objc_msgSend_1031(
      this.pointer,
      _lib._sel_setAllowedExternalEntityURLs_1,
      value?.pointer ?? ffi.nullptr,
    );
  }

  bool parse() {
    return _lib._objc_msgSend_12(this.pointer, _lib._sel_parse1);
  }

  void abortParsing() {
    _lib._objc_msgSend_1(this.pointer, _lib._sel_abortParsing1);
  }

  NSError? get parserError {
    final _ret = _lib._objc_msgSend_322(this.pointer, _lib._sel_parserError1);
    return _ret.address == 0
        ? null
        : NSError._(_ret, _lib, retain: true, release: true);
  }

  bool get shouldResolveExternalEntities {
    return _lib._objc_msgSend_12(
      this.pointer,
      _lib._sel_shouldResolveExternalEntities1,
    );
  }

  set shouldResolveExternalEntities(bool value) {
    return _lib._objc_msgSend_527(
      this.pointer,
      _lib._sel_setShouldResolveExternalEntities_1,
      value,
    );
  }

  NSString? get publicID {
    final _ret = _lib._objc_msgSend_44(this.pointer, _lib._sel_publicID1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString? get systemID {
    final _ret = _lib._objc_msgSend_44(this.pointer, _lib._sel_systemID1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  int get lineNumber {
    return _lib._objc_msgSend_83(this.pointer, _lib._sel_lineNumber1);
  }

  int get columnNumber {
    return _lib._objc_msgSend_83(this.pointer, _lib._sel_columnNumber1);
  }

  @override
  NSXMLParser init() {
    final _ret = _lib._objc_msgSend_2(this.pointer, _lib._sel_init1);
    return NSXMLParser._(_ret, _lib, retain: true, release: true);
  }

  static NSXMLParser new1(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSXMLParser1, _lib._sel_new1);
    return NSXMLParser._(_ret, _lib, retain: false, release: true);
  }

  static NSXMLParser allocWithZone_(AVFAudio _lib, ffi.Pointer<_NSZone> zone) {
    final _ret = _lib._objc_msgSend_3(
      _lib._class_NSXMLParser1,
      _lib._sel_allocWithZone_1,
      zone,
    );
    return NSXMLParser._(_ret, _lib, retain: false, release: true);
  }

  static NSXMLParser alloc(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSXMLParser1,
      _lib._sel_alloc1,
    );
    return NSXMLParser._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
    AVFAudio _lib,
    NSObject aTarget,
    ffi.Pointer<objc.ObjCSelector> aSelector,
    NSObject? anArgument,
  ) {
    _lib._objc_msgSend_14(
      _lib._class_NSXMLParser1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
      aTarget.pointer,
      aSelector,
      anArgument?.pointer ?? ffi.nullptr,
    );
  }

  static void cancelPreviousPerformRequestsWithTarget_(
    AVFAudio _lib,
    NSObject aTarget,
  ) {
    _lib._objc_msgSend_15(
      _lib._class_NSXMLParser1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_1,
      aTarget.pointer,
    );
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSXMLParser1,
      _lib._sel_accessInstanceVariablesDirectly1,
    );
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSXMLParser1,
      _lib._sel_useStoredAccessor1,
    );
  }

  static NSSet keyPathsForValuesAffectingValueForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    final _ret = _lib._objc_msgSend_63(
      _lib._class_NSXMLParser1,
      _lib._sel_keyPathsForValuesAffectingValueForKey_1,
      key.pointer,
    );
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    return _lib._objc_msgSend_64(
      _lib._class_NSXMLParser1,
      _lib._sel_automaticallyNotifiesObserversForKey_1,
      key.pointer,
    );
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
    AVFAudio _lib,
    NSArray keys,
    NSString dependentKey,
  ) {
    _lib._objc_msgSend_88(
      _lib._class_NSXMLParser1,
      _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
      keys.pointer,
      dependentKey.pointer,
    );
  }

  static NSArray classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_85(
      _lib._class_NSXMLParser1,
      _lib._sel_classFallbacksForKeyedArchiver1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSXMLParser1,
      _lib._sel_classForKeyedUnarchiver1,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

abstract class NSXMLParserExternalEntityResolvingPolicy {
  static const int NSXMLParserResolveExternalEntitiesNever = 0;
  static const int NSXMLParserResolveExternalEntitiesNoNetwork = 1;
  static const int NSXMLParserResolveExternalEntitiesSameOriginOnly = 2;
  static const int NSXMLParserResolveExternalEntitiesAlways = 3;
}

class NSFileWrapper extends NSObject {
  NSFileWrapper._(
    ffi.Pointer<objc.ObjCObject> pointer,
    AVFAudio lib, {
    bool retain = false,
    bool release = false,
  }) : super._(pointer, lib, retain: retain, release: release);

  /// Returns a [NSFileWrapper] that points to the same underlying object as [other].
  static NSFileWrapper castFrom<T extends objc.ObjCObjectBase>(
    AVFAudio lib,
    T other,
  ) {
    return NSFileWrapper._(other.pointer, lib, retain: true, release: true);
  }

  /// Returns a [NSFileWrapper] that wraps the given raw object pointer.
  static NSFileWrapper castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCObject> other, {
    bool retain = false,
    bool release = false,
  }) {
    return NSFileWrapper._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSFileWrapper].
  static bool isInstance(AVFAudio lib, objc.ObjCObjectBase obj) {
    return lib._objc_msgSend_0(
      obj.pointer,
      lib._sel_isKindOfClass_1,
      lib._class_NSFileWrapper1,
    );
  }

  NSFileWrapper? initWithURL_options_error_(
    NSURL url,
    int options,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError,
  ) {
    final _ret = _lib._objc_msgSend_1032(
      this.pointer,
      _lib._sel_initWithURL_options_error_1,
      url.pointer,
      options,
      outError,
    );
    return _ret.address == 0
        ? null
        : NSFileWrapper._(_ret, _lib, retain: true, release: true);
  }

  NSFileWrapper initDirectoryWithFileWrappers_(
    NSDictionary childrenByPreferredName,
  ) {
    final _ret = _lib._objc_msgSend_159(
      this.pointer,
      _lib._sel_initDirectoryWithFileWrappers_1,
      childrenByPreferredName.pointer,
    );
    return NSFileWrapper._(_ret, _lib, retain: true, release: true);
  }

  NSFileWrapper initRegularFileWithContents_(NSData contents) {
    final _ret = _lib._objc_msgSend_279(
      this.pointer,
      _lib._sel_initRegularFileWithContents_1,
      contents.pointer,
    );
    return NSFileWrapper._(_ret, _lib, retain: true, release: true);
  }

  NSFileWrapper initSymbolicLinkWithDestinationURL_(NSURL url) {
    final _ret = _lib._objc_msgSend_262(
      this.pointer,
      _lib._sel_initSymbolicLinkWithDestinationURL_1,
      url.pointer,
    );
    return NSFileWrapper._(_ret, _lib, retain: true, release: true);
  }

  NSFileWrapper? initWithSerializedRepresentation_(
    NSData serializeRepresentation,
  ) {
    final _ret = _lib._objc_msgSend_874(
      this.pointer,
      _lib._sel_initWithSerializedRepresentation_1,
      serializeRepresentation.pointer,
    );
    return _ret.address == 0
        ? null
        : NSFileWrapper._(_ret, _lib, retain: true, release: true);
  }

  NSFileWrapper? initWithCoder_(NSCoder inCoder) {
    final _ret = _lib._objc_msgSend_47(
      this.pointer,
      _lib._sel_initWithCoder_1,
      inCoder.pointer,
    );
    return _ret.address == 0
        ? null
        : NSFileWrapper._(_ret, _lib, retain: true, release: true);
  }

  bool get directory {
    return _lib._objc_msgSend_12(this.pointer, _lib._sel_isDirectory1);
  }

  bool get regularFile {
    return _lib._objc_msgSend_12(this.pointer, _lib._sel_isRegularFile1);
  }

  bool get symbolicLink {
    return _lib._objc_msgSend_12(this.pointer, _lib._sel_isSymbolicLink1);
  }

  NSString? get preferredFilename {
    final _ret = _lib._objc_msgSend_44(
      this.pointer,
      _lib._sel_preferredFilename1,
    );
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  set preferredFilename(NSString? value) {
    return _lib._objc_msgSend_545(
      this.pointer,
      _lib._sel_setPreferredFilename_1,
      value?.pointer ?? ffi.nullptr,
    );
  }

  NSString? get filename {
    final _ret = _lib._objc_msgSend_44(this.pointer, _lib._sel_filename1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  set filename(NSString? value) {
    return _lib._objc_msgSend_545(
      this.pointer,
      _lib._sel_setFilename_1,
      value?.pointer ?? ffi.nullptr,
    );
  }

  NSDictionary get fileAttributes {
    final _ret = _lib._objc_msgSend_181(
      this.pointer,
      _lib._sel_fileAttributes1,
    );
    return NSDictionary._(_ret, _lib, retain: true, release: true);
  }

  set fileAttributes(NSDictionary value) {
    return _lib._objc_msgSend_182(
      this.pointer,
      _lib._sel_setFileAttributes_1,
      value.pointer,
    );
  }

  bool matchesContentsOfURL_(NSURL url) {
    return _lib._objc_msgSend_265(
      this.pointer,
      _lib._sel_matchesContentsOfURL_1,
      url.pointer,
    );
  }

  bool readFromURL_options_error_(
    NSURL url,
    int options,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError,
  ) {
    return _lib._objc_msgSend_1033(
      this.pointer,
      _lib._sel_readFromURL_options_error_1,
      url.pointer,
      options,
      outError,
    );
  }

  bool writeToURL_options_originalContentsURL_error_(
    NSURL url,
    int options,
    NSURL? originalContentsURL,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError,
  ) {
    return _lib._objc_msgSend_1034(
      this.pointer,
      _lib._sel_writeToURL_options_originalContentsURL_error_1,
      url.pointer,
      options,
      originalContentsURL?.pointer ?? ffi.nullptr,
      outError,
    );
  }

  NSData? get serializedRepresentation {
    final _ret = _lib._objc_msgSend_286(
      this.pointer,
      _lib._sel_serializedRepresentation1,
    );
    return _ret.address == 0
        ? null
        : NSData._(_ret, _lib, retain: true, release: true);
  }

  NSString addFileWrapper_(NSFileWrapper child) {
    final _ret = _lib._objc_msgSend_1035(
      this.pointer,
      _lib._sel_addFileWrapper_1,
      child.pointer,
    );
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString addRegularFileWithContents_preferredFilename_(
    NSData data,
    NSString fileName,
  ) {
    final _ret = _lib._objc_msgSend_1036(
      this.pointer,
      _lib._sel_addRegularFileWithContents_preferredFilename_1,
      data.pointer,
      fileName.pointer,
    );
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  void removeFileWrapper_(NSFileWrapper child) {
    _lib._objc_msgSend_1037(
      this.pointer,
      _lib._sel_removeFileWrapper_1,
      child.pointer,
    );
  }

  NSDictionary? get fileWrappers {
    final _ret = _lib._objc_msgSend_390(this.pointer, _lib._sel_fileWrappers1);
    return _ret.address == 0
        ? null
        : NSDictionary._(_ret, _lib, retain: true, release: true);
  }

  NSString? keyForFileWrapper_(NSFileWrapper child) {
    final _ret = _lib._objc_msgSend_1038(
      this.pointer,
      _lib._sel_keyForFileWrapper_1,
      child.pointer,
    );
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSData? get regularFileContents {
    final _ret = _lib._objc_msgSend_286(
      this.pointer,
      _lib._sel_regularFileContents1,
    );
    return _ret.address == 0
        ? null
        : NSData._(_ret, _lib, retain: true, release: true);
  }

  NSURL? get symbolicLinkDestinationURL {
    final _ret = _lib._objc_msgSend_45(
      this.pointer,
      _lib._sel_symbolicLinkDestinationURL1,
    );
    return _ret.address == 0
        ? null
        : NSURL._(_ret, _lib, retain: true, release: true);
  }

  NSObject? initWithPath_(NSString path) {
    final _ret = _lib._objc_msgSend_38(
      this.pointer,
      _lib._sel_initWithPath_1,
      path.pointer,
    );
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject initSymbolicLinkWithDestination_(NSString path) {
    final _ret = _lib._objc_msgSend_31(
      this.pointer,
      _lib._sel_initSymbolicLinkWithDestination_1,
      path.pointer,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  bool needsToBeUpdatedFromPath_(NSString path) {
    return _lib._objc_msgSend_64(
      this.pointer,
      _lib._sel_needsToBeUpdatedFromPath_1,
      path.pointer,
    );
  }

  bool updateFromPath_(NSString path) {
    return _lib._objc_msgSend_64(
      this.pointer,
      _lib._sel_updateFromPath_1,
      path.pointer,
    );
  }

  bool writeToFile_atomically_updateFilenames_(
    NSString path,
    bool atomicFlag,
    bool updateFilenamesFlag,
  ) {
    return _lib._objc_msgSend_1039(
      this.pointer,
      _lib._sel_writeToFile_atomically_updateFilenames_1,
      path.pointer,
      atomicFlag,
      updateFilenamesFlag,
    );
  }

  NSString addFileWithPath_(NSString path) {
    final _ret = _lib._objc_msgSend_69(
      this.pointer,
      _lib._sel_addFileWithPath_1,
      path.pointer,
    );
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString addSymbolicLinkWithDestination_preferredFilename_(
    NSString path,
    NSString filename,
  ) {
    final _ret = _lib._objc_msgSend_364(
      this.pointer,
      _lib._sel_addSymbolicLinkWithDestination_preferredFilename_1,
      path.pointer,
      filename.pointer,
    );
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString symbolicLinkDestination() {
    final _ret = _lib._objc_msgSend_21(
      this.pointer,
      _lib._sel_symbolicLinkDestination1,
    );
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSFileWrapper init() {
    final _ret = _lib._objc_msgSend_2(this.pointer, _lib._sel_init1);
    return NSFileWrapper._(_ret, _lib, retain: true, release: true);
  }

  static NSFileWrapper new1(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSFileWrapper1,
      _lib._sel_new1,
    );
    return NSFileWrapper._(_ret, _lib, retain: false, release: true);
  }

  static NSFileWrapper allocWithZone_(
    AVFAudio _lib,
    ffi.Pointer<_NSZone> zone,
  ) {
    final _ret = _lib._objc_msgSend_3(
      _lib._class_NSFileWrapper1,
      _lib._sel_allocWithZone_1,
      zone,
    );
    return NSFileWrapper._(_ret, _lib, retain: false, release: true);
  }

  static NSFileWrapper alloc(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSFileWrapper1,
      _lib._sel_alloc1,
    );
    return NSFileWrapper._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
    AVFAudio _lib,
    NSObject aTarget,
    ffi.Pointer<objc.ObjCSelector> aSelector,
    NSObject? anArgument,
  ) {
    _lib._objc_msgSend_14(
      _lib._class_NSFileWrapper1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
      aTarget.pointer,
      aSelector,
      anArgument?.pointer ?? ffi.nullptr,
    );
  }

  static void cancelPreviousPerformRequestsWithTarget_(
    AVFAudio _lib,
    NSObject aTarget,
  ) {
    _lib._objc_msgSend_15(
      _lib._class_NSFileWrapper1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_1,
      aTarget.pointer,
    );
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSFileWrapper1,
      _lib._sel_accessInstanceVariablesDirectly1,
    );
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSFileWrapper1,
      _lib._sel_useStoredAccessor1,
    );
  }

  static NSSet keyPathsForValuesAffectingValueForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    final _ret = _lib._objc_msgSend_63(
      _lib._class_NSFileWrapper1,
      _lib._sel_keyPathsForValuesAffectingValueForKey_1,
      key.pointer,
    );
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    return _lib._objc_msgSend_64(
      _lib._class_NSFileWrapper1,
      _lib._sel_automaticallyNotifiesObserversForKey_1,
      key.pointer,
    );
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
    AVFAudio _lib,
    NSArray keys,
    NSString dependentKey,
  ) {
    _lib._objc_msgSend_88(
      _lib._class_NSFileWrapper1,
      _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
      keys.pointer,
      dependentKey.pointer,
    );
  }

  static NSArray classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_85(
      _lib._class_NSFileWrapper1,
      _lib._sel_classFallbacksForKeyedArchiver1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSFileWrapper1,
      _lib._sel_classForKeyedUnarchiver1,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

abstract class NSFileWrapperReadingOptions {
  static const int NSFileWrapperReadingImmediate = 1;
  static const int NSFileWrapperReadingWithoutMapping = 2;
}

abstract class NSFileWrapperWritingOptions {
  static const int NSFileWrapperWritingAtomic = 1;
  static const int NSFileWrapperWritingWithNameUpdating = 2;
}

class NSURLSession extends NSObject {
  NSURLSession._(
    ffi.Pointer<objc.ObjCObject> pointer,
    AVFAudio lib, {
    bool retain = false,
    bool release = false,
  }) : super._(pointer, lib, retain: retain, release: release);

  /// Returns a [NSURLSession] that points to the same underlying object as [other].
  static NSURLSession castFrom<T extends objc.ObjCObjectBase>(
    AVFAudio lib,
    T other,
  ) {
    return NSURLSession._(other.pointer, lib, retain: true, release: true);
  }

  /// Returns a [NSURLSession] that wraps the given raw object pointer.
  static NSURLSession castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCObject> other, {
    bool retain = false,
    bool release = false,
  }) {
    return NSURLSession._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSURLSession].
  static bool isInstance(AVFAudio lib, objc.ObjCObjectBase obj) {
    return lib._objc_msgSend_0(
      obj.pointer,
      lib._sel_isKindOfClass_1,
      lib._class_NSURLSession1,
    );
  }

  static NSURLSession getSharedSession(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_1040(
      _lib._class_NSURLSession1,
      _lib._sel_sharedSession1,
    );
    return NSURLSession._(_ret, _lib, retain: true, release: true);
  }

  static NSURLSession sessionWithConfiguration_(
    AVFAudio _lib,
    NSURLSessionConfiguration configuration,
  ) {
    final _ret = _lib._objc_msgSend_1056(
      _lib._class_NSURLSession1,
      _lib._sel_sessionWithConfiguration_1,
      configuration.pointer,
    );
    return NSURLSession._(_ret, _lib, retain: true, release: true);
  }

  static NSURLSession sessionWithConfiguration_delegate_delegateQueue_(
    AVFAudio _lib,
    NSURLSessionConfiguration configuration,
    NSObject? delegate,
    NSOperationQueue? queue,
  ) {
    final _ret = _lib._objc_msgSend_1057(
      _lib._class_NSURLSession1,
      _lib._sel_sessionWithConfiguration_delegate_delegateQueue_1,
      configuration.pointer,
      delegate?.pointer ?? ffi.nullptr,
      queue?.pointer ?? ffi.nullptr,
    );
    return NSURLSession._(_ret, _lib, retain: true, release: true);
  }

  NSOperationQueue get delegateQueue {
    final _ret = _lib._objc_msgSend_917(this.pointer, _lib._sel_delegateQueue1);
    return NSOperationQueue._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get delegate {
    final _ret = _lib._objc_msgSend_17(this.pointer, _lib._sel_delegate1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSURLSessionConfiguration get configuration {
    final _ret = _lib._objc_msgSend_1041(
      this.pointer,
      _lib._sel_configuration1,
    );
    return NSURLSessionConfiguration._(_ret, _lib, retain: true, release: true);
  }

  NSString? get sessionDescription {
    final _ret = _lib._objc_msgSend_44(
      this.pointer,
      _lib._sel_sessionDescription1,
    );
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  set sessionDescription(NSString? value) {
    return _lib._objc_msgSend_545(
      this.pointer,
      _lib._sel_setSessionDescription_1,
      value?.pointer ?? ffi.nullptr,
    );
  }

  void finishTasksAndInvalidate() {
    _lib._objc_msgSend_1(this.pointer, _lib._sel_finishTasksAndInvalidate1);
  }

  void invalidateAndCancel() {
    _lib._objc_msgSend_1(this.pointer, _lib._sel_invalidateAndCancel1);
  }

  void resetWithCompletionHandler_(ObjCBlock_ffiVoid completionHandler) {
    _lib._objc_msgSend_532(
      this.pointer,
      _lib._sel_resetWithCompletionHandler_1,
      completionHandler.pointer,
    );
  }

  void flushWithCompletionHandler_(ObjCBlock_ffiVoid completionHandler) {
    _lib._objc_msgSend_532(
      this.pointer,
      _lib._sel_flushWithCompletionHandler_1,
      completionHandler.pointer,
    );
  }

  void getTasksWithCompletionHandler_(
    ObjCBlock_ffiVoid_NSArray_NSArray_NSArray completionHandler,
  ) {
    _lib._objc_msgSend_1058(
      this.pointer,
      _lib._sel_getTasksWithCompletionHandler_1,
      completionHandler.pointer,
    );
  }

  void getAllTasksWithCompletionHandler_(
    ObjCBlock_ffiVoid_NSArray1 completionHandler,
  ) {
    _lib._objc_msgSend_1059(
      this.pointer,
      _lib._sel_getAllTasksWithCompletionHandler_1,
      completionHandler.pointer,
    );
  }

  NSURLSessionDataTask dataTaskWithRequest_(NSURLRequest request) {
    final _ret = _lib._objc_msgSend_1060(
      this.pointer,
      _lib._sel_dataTaskWithRequest_1,
      request.pointer,
    );
    return NSURLSessionDataTask._(_ret, _lib, retain: true, release: true);
  }

  NSURLSessionDataTask dataTaskWithURL_(NSURL url) {
    final _ret = _lib._objc_msgSend_1061(
      this.pointer,
      _lib._sel_dataTaskWithURL_1,
      url.pointer,
    );
    return NSURLSessionDataTask._(_ret, _lib, retain: true, release: true);
  }

  NSURLSessionUploadTask uploadTaskWithRequest_fromFile_(
    NSURLRequest request,
    NSURL fileURL,
  ) {
    final _ret = _lib._objc_msgSend_1063(
      this.pointer,
      _lib._sel_uploadTaskWithRequest_fromFile_1,
      request.pointer,
      fileURL.pointer,
    );
    return NSURLSessionUploadTask._(_ret, _lib, retain: true, release: true);
  }

  NSURLSessionUploadTask uploadTaskWithRequest_fromData_(
    NSURLRequest request,
    NSData bodyData,
  ) {
    final _ret = _lib._objc_msgSend_1064(
      this.pointer,
      _lib._sel_uploadTaskWithRequest_fromData_1,
      request.pointer,
      bodyData.pointer,
    );
    return NSURLSessionUploadTask._(_ret, _lib, retain: true, release: true);
  }

  NSURLSessionUploadTask uploadTaskWithResumeData_(NSData resumeData) {
    final _ret = _lib._objc_msgSend_1065(
      this.pointer,
      _lib._sel_uploadTaskWithResumeData_1,
      resumeData.pointer,
    );
    return NSURLSessionUploadTask._(_ret, _lib, retain: true, release: true);
  }

  NSURLSessionUploadTask uploadTaskWithStreamedRequest_(NSURLRequest request) {
    final _ret = _lib._objc_msgSend_1066(
      this.pointer,
      _lib._sel_uploadTaskWithStreamedRequest_1,
      request.pointer,
    );
    return NSURLSessionUploadTask._(_ret, _lib, retain: true, release: true);
  }

  NSURLSessionDownloadTask downloadTaskWithRequest_(NSURLRequest request) {
    final _ret = _lib._objc_msgSend_1067(
      this.pointer,
      _lib._sel_downloadTaskWithRequest_1,
      request.pointer,
    );
    return NSURLSessionDownloadTask._(_ret, _lib, retain: true, release: true);
  }

  NSURLSessionDownloadTask downloadTaskWithURL_(NSURL url) {
    final _ret = _lib._objc_msgSend_1068(
      this.pointer,
      _lib._sel_downloadTaskWithURL_1,
      url.pointer,
    );
    return NSURLSessionDownloadTask._(_ret, _lib, retain: true, release: true);
  }

  NSURLSessionDownloadTask downloadTaskWithResumeData_(NSData resumeData) {
    final _ret = _lib._objc_msgSend_1069(
      this.pointer,
      _lib._sel_downloadTaskWithResumeData_1,
      resumeData.pointer,
    );
    return NSURLSessionDownloadTask._(_ret, _lib, retain: true, release: true);
  }

  NSURLSessionStreamTask streamTaskWithHostName_port_(
    NSString hostname,
    int port,
  ) {
    final _ret = _lib._objc_msgSend_1072(
      this.pointer,
      _lib._sel_streamTaskWithHostName_port_1,
      hostname.pointer,
      port,
    );
    return NSURLSessionStreamTask._(_ret, _lib, retain: true, release: true);
  }

  NSURLSessionStreamTask streamTaskWithNetService_(NSNetService service) {
    final _ret = _lib._objc_msgSend_1080(
      this.pointer,
      _lib._sel_streamTaskWithNetService_1,
      service.pointer,
    );
    return NSURLSessionStreamTask._(_ret, _lib, retain: true, release: true);
  }

  NSURLSessionWebSocketTask webSocketTaskWithURL_(NSURL url) {
    final _ret = _lib._objc_msgSend_1087(
      this.pointer,
      _lib._sel_webSocketTaskWithURL_1,
      url.pointer,
    );
    return NSURLSessionWebSocketTask._(_ret, _lib, retain: true, release: true);
  }

  NSURLSessionWebSocketTask webSocketTaskWithURL_protocols_(
    NSURL url,
    NSArray protocols,
  ) {
    final _ret = _lib._objc_msgSend_1088(
      this.pointer,
      _lib._sel_webSocketTaskWithURL_protocols_1,
      url.pointer,
      protocols.pointer,
    );
    return NSURLSessionWebSocketTask._(_ret, _lib, retain: true, release: true);
  }

  NSURLSessionWebSocketTask webSocketTaskWithRequest_(NSURLRequest request) {
    final _ret = _lib._objc_msgSend_1089(
      this.pointer,
      _lib._sel_webSocketTaskWithRequest_1,
      request.pointer,
    );
    return NSURLSessionWebSocketTask._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSURLSession init() {
    final _ret = _lib._objc_msgSend_2(this.pointer, _lib._sel_init1);
    return NSURLSession._(_ret, _lib, retain: true, release: true);
  }

  static NSURLSession new1(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSURLSession1,
      _lib._sel_new1,
    );
    return NSURLSession._(_ret, _lib, retain: false, release: true);
  }

  NSURLSessionDataTask dataTaskWithRequest_completionHandler_(
    NSURLRequest request,
    ObjCBlock_ffiVoid_NSData_NSURLResponse_NSError completionHandler,
  ) {
    final _ret = _lib._objc_msgSend_1090(
      this.pointer,
      _lib._sel_dataTaskWithRequest_completionHandler_1,
      request.pointer,
      completionHandler.pointer,
    );
    return NSURLSessionDataTask._(_ret, _lib, retain: true, release: true);
  }

  NSURLSessionDataTask dataTaskWithURL_completionHandler_(
    NSURL url,
    ObjCBlock_ffiVoid_NSData_NSURLResponse_NSError completionHandler,
  ) {
    final _ret = _lib._objc_msgSend_1091(
      this.pointer,
      _lib._sel_dataTaskWithURL_completionHandler_1,
      url.pointer,
      completionHandler.pointer,
    );
    return NSURLSessionDataTask._(_ret, _lib, retain: true, release: true);
  }

  NSURLSessionUploadTask uploadTaskWithRequest_fromFile_completionHandler_(
    NSURLRequest request,
    NSURL fileURL,
    ObjCBlock_ffiVoid_NSData_NSURLResponse_NSError completionHandler,
  ) {
    final _ret = _lib._objc_msgSend_1092(
      this.pointer,
      _lib._sel_uploadTaskWithRequest_fromFile_completionHandler_1,
      request.pointer,
      fileURL.pointer,
      completionHandler.pointer,
    );
    return NSURLSessionUploadTask._(_ret, _lib, retain: true, release: true);
  }

  NSURLSessionUploadTask uploadTaskWithRequest_fromData_completionHandler_(
    NSURLRequest request,
    NSData? bodyData,
    ObjCBlock_ffiVoid_NSData_NSURLResponse_NSError completionHandler,
  ) {
    final _ret = _lib._objc_msgSend_1093(
      this.pointer,
      _lib._sel_uploadTaskWithRequest_fromData_completionHandler_1,
      request.pointer,
      bodyData?.pointer ?? ffi.nullptr,
      completionHandler.pointer,
    );
    return NSURLSessionUploadTask._(_ret, _lib, retain: true, release: true);
  }

  NSURLSessionUploadTask uploadTaskWithResumeData_completionHandler_(
    NSData resumeData,
    ObjCBlock_ffiVoid_NSData_NSURLResponse_NSError completionHandler,
  ) {
    final _ret = _lib._objc_msgSend_1094(
      this.pointer,
      _lib._sel_uploadTaskWithResumeData_completionHandler_1,
      resumeData.pointer,
      completionHandler.pointer,
    );
    return NSURLSessionUploadTask._(_ret, _lib, retain: true, release: true);
  }

  NSURLSessionDownloadTask downloadTaskWithRequest_completionHandler_(
    NSURLRequest request,
    ObjCBlock_ffiVoid_NSURL_NSURLResponse_NSError completionHandler,
  ) {
    final _ret = _lib._objc_msgSend_1095(
      this.pointer,
      _lib._sel_downloadTaskWithRequest_completionHandler_1,
      request.pointer,
      completionHandler.pointer,
    );
    return NSURLSessionDownloadTask._(_ret, _lib, retain: true, release: true);
  }

  NSURLSessionDownloadTask downloadTaskWithURL_completionHandler_(
    NSURL url,
    ObjCBlock_ffiVoid_NSURL_NSURLResponse_NSError completionHandler,
  ) {
    final _ret = _lib._objc_msgSend_1096(
      this.pointer,
      _lib._sel_downloadTaskWithURL_completionHandler_1,
      url.pointer,
      completionHandler.pointer,
    );
    return NSURLSessionDownloadTask._(_ret, _lib, retain: true, release: true);
  }

  NSURLSessionDownloadTask downloadTaskWithResumeData_completionHandler_(
    NSData resumeData,
    ObjCBlock_ffiVoid_NSURL_NSURLResponse_NSError completionHandler,
  ) {
    final _ret = _lib._objc_msgSend_1097(
      this.pointer,
      _lib._sel_downloadTaskWithResumeData_completionHandler_1,
      resumeData.pointer,
      completionHandler.pointer,
    );
    return NSURLSessionDownloadTask._(_ret, _lib, retain: true, release: true);
  }

  static NSURLSession allocWithZone_(AVFAudio _lib, ffi.Pointer<_NSZone> zone) {
    final _ret = _lib._objc_msgSend_3(
      _lib._class_NSURLSession1,
      _lib._sel_allocWithZone_1,
      zone,
    );
    return NSURLSession._(_ret, _lib, retain: false, release: true);
  }

  static NSURLSession alloc(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSURLSession1,
      _lib._sel_alloc1,
    );
    return NSURLSession._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
    AVFAudio _lib,
    NSObject aTarget,
    ffi.Pointer<objc.ObjCSelector> aSelector,
    NSObject? anArgument,
  ) {
    _lib._objc_msgSend_14(
      _lib._class_NSURLSession1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
      aTarget.pointer,
      aSelector,
      anArgument?.pointer ?? ffi.nullptr,
    );
  }

  static void cancelPreviousPerformRequestsWithTarget_(
    AVFAudio _lib,
    NSObject aTarget,
  ) {
    _lib._objc_msgSend_15(
      _lib._class_NSURLSession1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_1,
      aTarget.pointer,
    );
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSURLSession1,
      _lib._sel_accessInstanceVariablesDirectly1,
    );
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSURLSession1,
      _lib._sel_useStoredAccessor1,
    );
  }

  static NSSet keyPathsForValuesAffectingValueForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    final _ret = _lib._objc_msgSend_63(
      _lib._class_NSURLSession1,
      _lib._sel_keyPathsForValuesAffectingValueForKey_1,
      key.pointer,
    );
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    return _lib._objc_msgSend_64(
      _lib._class_NSURLSession1,
      _lib._sel_automaticallyNotifiesObserversForKey_1,
      key.pointer,
    );
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
    AVFAudio _lib,
    NSArray keys,
    NSString dependentKey,
  ) {
    _lib._objc_msgSend_88(
      _lib._class_NSURLSession1,
      _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
      keys.pointer,
      dependentKey.pointer,
    );
  }

  static NSArray classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_85(
      _lib._class_NSURLSession1,
      _lib._sel_classFallbacksForKeyedArchiver1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSURLSession1,
      _lib._sel_classForKeyedUnarchiver1,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

class NSURLSessionConfiguration extends NSObject {
  NSURLSessionConfiguration._(
    ffi.Pointer<objc.ObjCObject> pointer,
    AVFAudio lib, {
    bool retain = false,
    bool release = false,
  }) : super._(pointer, lib, retain: retain, release: release);

  /// Returns a [NSURLSessionConfiguration] that points to the same underlying object as [other].
  static NSURLSessionConfiguration castFrom<T extends objc.ObjCObjectBase>(
    AVFAudio lib,
    T other,
  ) {
    return NSURLSessionConfiguration._(
      other.pointer,
      lib,
      retain: true,
      release: true,
    );
  }

  /// Returns a [NSURLSessionConfiguration] that wraps the given raw object pointer.
  static NSURLSessionConfiguration castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCObject> other, {
    bool retain = false,
    bool release = false,
  }) {
    return NSURLSessionConfiguration._(
      other,
      lib,
      retain: retain,
      release: release,
    );
  }

  /// Returns whether [obj] is an instance of [NSURLSessionConfiguration].
  static bool isInstance(AVFAudio lib, objc.ObjCObjectBase obj) {
    return lib._objc_msgSend_0(
      obj.pointer,
      lib._sel_isKindOfClass_1,
      lib._class_NSURLSessionConfiguration1,
    );
  }

  static NSURLSessionConfiguration getDefaultSessionConfiguration(
    AVFAudio _lib,
  ) {
    final _ret = _lib._objc_msgSend_1041(
      _lib._class_NSURLSessionConfiguration1,
      _lib._sel_defaultSessionConfiguration1,
    );
    return NSURLSessionConfiguration._(_ret, _lib, retain: true, release: true);
  }

  static NSURLSessionConfiguration getEphemeralSessionConfiguration(
    AVFAudio _lib,
  ) {
    final _ret = _lib._objc_msgSend_1041(
      _lib._class_NSURLSessionConfiguration1,
      _lib._sel_ephemeralSessionConfiguration1,
    );
    return NSURLSessionConfiguration._(_ret, _lib, retain: true, release: true);
  }

  static NSURLSessionConfiguration
  backgroundSessionConfigurationWithIdentifier_(
    AVFAudio _lib,
    NSString identifier,
  ) {
    final _ret = _lib._objc_msgSend_1042(
      _lib._class_NSURLSessionConfiguration1,
      _lib._sel_backgroundSessionConfigurationWithIdentifier_1,
      identifier.pointer,
    );
    return NSURLSessionConfiguration._(_ret, _lib, retain: true, release: true);
  }

  NSString? get identifier {
    final _ret = _lib._objc_msgSend_44(this.pointer, _lib._sel_identifier1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  int get requestCachePolicy {
    return _lib._objc_msgSend_859(this.pointer, _lib._sel_requestCachePolicy1);
  }

  set requestCachePolicy(int value) {
    return _lib._objc_msgSend_1017(
      this.pointer,
      _lib._sel_setRequestCachePolicy_1,
      value,
    );
  }

  double get timeoutIntervalForRequest {
    return objc.useMsgSendVariants
        ? _lib._objc_msgSend_165_fpret(
          this.pointer,
          _lib._sel_timeoutIntervalForRequest1,
        )
        : _lib._objc_msgSend_165(
          this.pointer,
          _lib._sel_timeoutIntervalForRequest1,
        );
  }

  set timeoutIntervalForRequest(double value) {
    return _lib._objc_msgSend_542(
      this.pointer,
      _lib._sel_setTimeoutIntervalForRequest_1,
      value,
    );
  }

  double get timeoutIntervalForResource {
    return objc.useMsgSendVariants
        ? _lib._objc_msgSend_165_fpret(
          this.pointer,
          _lib._sel_timeoutIntervalForResource1,
        )
        : _lib._objc_msgSend_165(
          this.pointer,
          _lib._sel_timeoutIntervalForResource1,
        );
  }

  set timeoutIntervalForResource(double value) {
    return _lib._objc_msgSend_542(
      this.pointer,
      _lib._sel_setTimeoutIntervalForResource_1,
      value,
    );
  }

  int get networkServiceType {
    return _lib._objc_msgSend_860(this.pointer, _lib._sel_networkServiceType1);
  }

  set networkServiceType(int value) {
    return _lib._objc_msgSend_1018(
      this.pointer,
      _lib._sel_setNetworkServiceType_1,
      value,
    );
  }

  bool get allowsCellularAccess {
    return _lib._objc_msgSend_12(this.pointer, _lib._sel_allowsCellularAccess1);
  }

  set allowsCellularAccess(bool value) {
    return _lib._objc_msgSend_527(
      this.pointer,
      _lib._sel_setAllowsCellularAccess_1,
      value,
    );
  }

  bool get allowsExpensiveNetworkAccess {
    return _lib._objc_msgSend_12(
      this.pointer,
      _lib._sel_allowsExpensiveNetworkAccess1,
    );
  }

  set allowsExpensiveNetworkAccess(bool value) {
    return _lib._objc_msgSend_527(
      this.pointer,
      _lib._sel_setAllowsExpensiveNetworkAccess_1,
      value,
    );
  }

  bool get allowsConstrainedNetworkAccess {
    return _lib._objc_msgSend_12(
      this.pointer,
      _lib._sel_allowsConstrainedNetworkAccess1,
    );
  }

  set allowsConstrainedNetworkAccess(bool value) {
    return _lib._objc_msgSend_527(
      this.pointer,
      _lib._sel_setAllowsConstrainedNetworkAccess_1,
      value,
    );
  }

  bool get requiresDNSSECValidation {
    return _lib._objc_msgSend_12(
      this.pointer,
      _lib._sel_requiresDNSSECValidation1,
    );
  }

  set requiresDNSSECValidation(bool value) {
    return _lib._objc_msgSend_527(
      this.pointer,
      _lib._sel_setRequiresDNSSECValidation_1,
      value,
    );
  }

  bool get waitsForConnectivity {
    return _lib._objc_msgSend_12(this.pointer, _lib._sel_waitsForConnectivity1);
  }

  set waitsForConnectivity(bool value) {
    return _lib._objc_msgSend_527(
      this.pointer,
      _lib._sel_setWaitsForConnectivity_1,
      value,
    );
  }

  bool get discretionary {
    return _lib._objc_msgSend_12(this.pointer, _lib._sel_isDiscretionary1);
  }

  set discretionary(bool value) {
    return _lib._objc_msgSend_527(
      this.pointer,
      _lib._sel_setDiscretionary_1,
      value,
    );
  }

  NSString? get sharedContainerIdentifier {
    final _ret = _lib._objc_msgSend_44(
      this.pointer,
      _lib._sel_sharedContainerIdentifier1,
    );
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  set sharedContainerIdentifier(NSString? value) {
    return _lib._objc_msgSend_545(
      this.pointer,
      _lib._sel_setSharedContainerIdentifier_1,
      value?.pointer ?? ffi.nullptr,
    );
  }

  bool get sessionSendsLaunchEvents {
    return _lib._objc_msgSend_12(
      this.pointer,
      _lib._sel_sessionSendsLaunchEvents1,
    );
  }

  set sessionSendsLaunchEvents(bool value) {
    return _lib._objc_msgSend_527(
      this.pointer,
      _lib._sel_setSessionSendsLaunchEvents_1,
      value,
    );
  }

  NSDictionary? get connectionProxyDictionary {
    final _ret = _lib._objc_msgSend_390(
      this.pointer,
      _lib._sel_connectionProxyDictionary1,
    );
    return _ret.address == 0
        ? null
        : NSDictionary._(_ret, _lib, retain: true, release: true);
  }

  set connectionProxyDictionary(NSDictionary? value) {
    return _lib._objc_msgSend_634(
      this.pointer,
      _lib._sel_setConnectionProxyDictionary_1,
      value?.pointer ?? ffi.nullptr,
    );
  }

  int get TLSMinimumSupportedProtocol {
    return _lib._objc_msgSend_1043(
      this.pointer,
      _lib._sel_TLSMinimumSupportedProtocol1,
    );
  }

  set TLSMinimumSupportedProtocol(int value) {
    return _lib._objc_msgSend_1044(
      this.pointer,
      _lib._sel_setTLSMinimumSupportedProtocol_1,
      value,
    );
  }

  int get TLSMaximumSupportedProtocol {
    return _lib._objc_msgSend_1043(
      this.pointer,
      _lib._sel_TLSMaximumSupportedProtocol1,
    );
  }

  set TLSMaximumSupportedProtocol(int value) {
    return _lib._objc_msgSend_1044(
      this.pointer,
      _lib._sel_setTLSMaximumSupportedProtocol_1,
      value,
    );
  }

  int get TLSMinimumSupportedProtocolVersion {
    return _lib._objc_msgSend_1045(
      this.pointer,
      _lib._sel_TLSMinimumSupportedProtocolVersion1,
    );
  }

  set TLSMinimumSupportedProtocolVersion(int value) {
    return _lib._objc_msgSend_1046(
      this.pointer,
      _lib._sel_setTLSMinimumSupportedProtocolVersion_1,
      value,
    );
  }

  int get TLSMaximumSupportedProtocolVersion {
    return _lib._objc_msgSend_1045(
      this.pointer,
      _lib._sel_TLSMaximumSupportedProtocolVersion1,
    );
  }

  set TLSMaximumSupportedProtocolVersion(int value) {
    return _lib._objc_msgSend_1046(
      this.pointer,
      _lib._sel_setTLSMaximumSupportedProtocolVersion_1,
      value,
    );
  }

  bool get HTTPShouldUsePipelining {
    return _lib._objc_msgSend_12(
      this.pointer,
      _lib._sel_HTTPShouldUsePipelining1,
    );
  }

  set HTTPShouldUsePipelining(bool value) {
    return _lib._objc_msgSend_527(
      this.pointer,
      _lib._sel_setHTTPShouldUsePipelining_1,
      value,
    );
  }

  bool get HTTPShouldSetCookies {
    return _lib._objc_msgSend_12(this.pointer, _lib._sel_HTTPShouldSetCookies1);
  }

  set HTTPShouldSetCookies(bool value) {
    return _lib._objc_msgSend_527(
      this.pointer,
      _lib._sel_setHTTPShouldSetCookies_1,
      value,
    );
  }

  int get HTTPCookieAcceptPolicy {
    return _lib._objc_msgSend_856(
      this.pointer,
      _lib._sel_HTTPCookieAcceptPolicy1,
    );
  }

  set HTTPCookieAcceptPolicy(int value) {
    return _lib._objc_msgSend_857(
      this.pointer,
      _lib._sel_setHTTPCookieAcceptPolicy_1,
      value,
    );
  }

  NSDictionary? get HTTPAdditionalHeaders {
    final _ret = _lib._objc_msgSend_390(
      this.pointer,
      _lib._sel_HTTPAdditionalHeaders1,
    );
    return _ret.address == 0
        ? null
        : NSDictionary._(_ret, _lib, retain: true, release: true);
  }

  set HTTPAdditionalHeaders(NSDictionary? value) {
    return _lib._objc_msgSend_634(
      this.pointer,
      _lib._sel_setHTTPAdditionalHeaders_1,
      value?.pointer ?? ffi.nullptr,
    );
  }

  int get HTTPMaximumConnectionsPerHost {
    return _lib._objc_msgSend_83(
      this.pointer,
      _lib._sel_HTTPMaximumConnectionsPerHost1,
    );
  }

  set HTTPMaximumConnectionsPerHost(int value) {
    return _lib._objc_msgSend_635(
      this.pointer,
      _lib._sel_setHTTPMaximumConnectionsPerHost_1,
      value,
    );
  }

  NSHTTPCookieStorage? get HTTPCookieStorage {
    final _ret = _lib._objc_msgSend_1047(
      this.pointer,
      _lib._sel_HTTPCookieStorage1,
    );
    return _ret.address == 0
        ? null
        : NSHTTPCookieStorage._(_ret, _lib, retain: true, release: true);
  }

  set HTTPCookieStorage(NSHTTPCookieStorage? value) {
    return _lib._objc_msgSend_1048(
      this.pointer,
      _lib._sel_setHTTPCookieStorage_1,
      value?.pointer ?? ffi.nullptr,
    );
  }

  NSURLCredentialStorage? get URLCredentialStorage {
    final _ret = _lib._objc_msgSend_1049(
      this.pointer,
      _lib._sel_URLCredentialStorage1,
    );
    return _ret.address == 0
        ? null
        : NSURLCredentialStorage._(_ret, _lib, retain: true, release: true);
  }

  set URLCredentialStorage(NSURLCredentialStorage? value) {
    return _lib._objc_msgSend_1050(
      this.pointer,
      _lib._sel_setURLCredentialStorage_1,
      value?.pointer ?? ffi.nullptr,
    );
  }

  NSURLCache? get URLCache {
    final _ret = _lib._objc_msgSend_1051(this.pointer, _lib._sel_URLCache1);
    return _ret.address == 0
        ? null
        : NSURLCache._(_ret, _lib, retain: true, release: true);
  }

  set URLCache(NSURLCache? value) {
    return _lib._objc_msgSend_1052(
      this.pointer,
      _lib._sel_setURLCache_1,
      value?.pointer ?? ffi.nullptr,
    );
  }

  bool get shouldUseExtendedBackgroundIdleMode {
    return _lib._objc_msgSend_12(
      this.pointer,
      _lib._sel_shouldUseExtendedBackgroundIdleMode1,
    );
  }

  set shouldUseExtendedBackgroundIdleMode(bool value) {
    return _lib._objc_msgSend_527(
      this.pointer,
      _lib._sel_setShouldUseExtendedBackgroundIdleMode_1,
      value,
    );
  }

  NSArray? get protocolClasses {
    final _ret = _lib._objc_msgSend_84(
      this.pointer,
      _lib._sel_protocolClasses1,
    );
    return _ret.address == 0
        ? null
        : NSArray._(_ret, _lib, retain: true, release: true);
  }

  set protocolClasses(NSArray? value) {
    return _lib._objc_msgSend_1053(
      this.pointer,
      _lib._sel_setProtocolClasses_1,
      value?.pointer ?? ffi.nullptr,
    );
  }

  int get multipathServiceType {
    return _lib._objc_msgSend_1054(
      this.pointer,
      _lib._sel_multipathServiceType1,
    );
  }

  set multipathServiceType(int value) {
    return _lib._objc_msgSend_1055(
      this.pointer,
      _lib._sel_setMultipathServiceType_1,
      value,
    );
  }

  @override
  NSURLSessionConfiguration init() {
    final _ret = _lib._objc_msgSend_2(this.pointer, _lib._sel_init1);
    return NSURLSessionConfiguration._(_ret, _lib, retain: true, release: true);
  }

  static NSURLSessionConfiguration new1(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSURLSessionConfiguration1,
      _lib._sel_new1,
    );
    return NSURLSessionConfiguration._(
      _ret,
      _lib,
      retain: false,
      release: true,
    );
  }

  static NSURLSessionConfiguration backgroundSessionConfiguration_(
    AVFAudio _lib,
    NSString identifier,
  ) {
    final _ret = _lib._objc_msgSend_1042(
      _lib._class_NSURLSessionConfiguration1,
      _lib._sel_backgroundSessionConfiguration_1,
      identifier.pointer,
    );
    return NSURLSessionConfiguration._(_ret, _lib, retain: true, release: true);
  }

  static NSURLSessionConfiguration allocWithZone_(
    AVFAudio _lib,
    ffi.Pointer<_NSZone> zone,
  ) {
    final _ret = _lib._objc_msgSend_3(
      _lib._class_NSURLSessionConfiguration1,
      _lib._sel_allocWithZone_1,
      zone,
    );
    return NSURLSessionConfiguration._(
      _ret,
      _lib,
      retain: false,
      release: true,
    );
  }

  static NSURLSessionConfiguration alloc(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSURLSessionConfiguration1,
      _lib._sel_alloc1,
    );
    return NSURLSessionConfiguration._(
      _ret,
      _lib,
      retain: false,
      release: true,
    );
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
    AVFAudio _lib,
    NSObject aTarget,
    ffi.Pointer<objc.ObjCSelector> aSelector,
    NSObject? anArgument,
  ) {
    _lib._objc_msgSend_14(
      _lib._class_NSURLSessionConfiguration1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
      aTarget.pointer,
      aSelector,
      anArgument?.pointer ?? ffi.nullptr,
    );
  }

  static void cancelPreviousPerformRequestsWithTarget_(
    AVFAudio _lib,
    NSObject aTarget,
  ) {
    _lib._objc_msgSend_15(
      _lib._class_NSURLSessionConfiguration1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_1,
      aTarget.pointer,
    );
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSURLSessionConfiguration1,
      _lib._sel_accessInstanceVariablesDirectly1,
    );
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSURLSessionConfiguration1,
      _lib._sel_useStoredAccessor1,
    );
  }

  static NSSet keyPathsForValuesAffectingValueForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    final _ret = _lib._objc_msgSend_63(
      _lib._class_NSURLSessionConfiguration1,
      _lib._sel_keyPathsForValuesAffectingValueForKey_1,
      key.pointer,
    );
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    return _lib._objc_msgSend_64(
      _lib._class_NSURLSessionConfiguration1,
      _lib._sel_automaticallyNotifiesObserversForKey_1,
      key.pointer,
    );
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
    AVFAudio _lib,
    NSArray keys,
    NSString dependentKey,
  ) {
    _lib._objc_msgSend_88(
      _lib._class_NSURLSessionConfiguration1,
      _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
      keys.pointer,
      dependentKey.pointer,
    );
  }

  static NSArray classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_85(
      _lib._class_NSURLSessionConfiguration1,
      _lib._sel_classFallbacksForKeyedArchiver1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSURLSessionConfiguration1,
      _lib._sel_classForKeyedUnarchiver1,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

abstract class SSLProtocol {
  static const int kSSLProtocolUnknown = 0;
  static const int kTLSProtocol1 = 4;
  static const int kTLSProtocol11 = 7;
  static const int kTLSProtocol12 = 8;
  static const int kDTLSProtocol1 = 9;
  static const int kTLSProtocol13 = 10;
  static const int kDTLSProtocol12 = 11;
  static const int kTLSProtocolMaxSupported = 999;
  static const int kSSLProtocol2 = 1;
  static const int kSSLProtocol3 = 2;
  static const int kSSLProtocol3Only = 3;
  static const int kTLSProtocol1Only = 5;
  static const int kSSLProtocolAll = 6;
}

abstract class tls_protocol_version_t {
  static const int tls_protocol_version_TLSv10 = 769;
  static const int tls_protocol_version_TLSv11 = 770;
  static const int tls_protocol_version_TLSv12 = 771;
  static const int tls_protocol_version_TLSv13 = 772;
  static const int tls_protocol_version_DTLSv10 = -257;
  static const int tls_protocol_version_DTLSv12 = -259;
}

abstract class NSURLSessionMultipathServiceType {
  static const int NSURLSessionMultipathServiceTypeNone = 0;
  static const int NSURLSessionMultipathServiceTypeHandover = 1;
  static const int NSURLSessionMultipathServiceTypeInteractive = 2;
  static const int NSURLSessionMultipathServiceTypeAggregate = 3;
}

void _ObjCBlock_ffiVoid_NSArray_NSArray_NSArray_fnPtrTrampoline(
  ffi.Pointer<objc.ObjCBlock> block,
  ffi.Pointer<objc.ObjCObject> arg0,
  ffi.Pointer<objc.ObjCObject> arg1,
  ffi.Pointer<objc.ObjCObject> arg2,
) => block.ref.target
    .cast<
      ffi.NativeFunction<
        ffi.Void Function(
          ffi.Pointer<objc.ObjCObject> arg0,
          ffi.Pointer<objc.ObjCObject> arg1,
          ffi.Pointer<objc.ObjCObject> arg2,
        )
      >
    >()
    .asFunction<
      void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >()(arg0, arg1, arg2);
final _ObjCBlock_ffiVoid_NSArray_NSArray_NSArray_closureRegistry =
    <
      int,
      void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >{};
int _ObjCBlock_ffiVoid_NSArray_NSArray_NSArray_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void>
_ObjCBlock_ffiVoid_NSArray_NSArray_NSArray_registerClosure(
  void Function(
    ffi.Pointer<objc.ObjCObject>,
    ffi.Pointer<objc.ObjCObject>,
    ffi.Pointer<objc.ObjCObject>,
  ) fn,
) {
  final id = ++_ObjCBlock_ffiVoid_NSArray_NSArray_NSArray_closureRegistryIndex;
  _ObjCBlock_ffiVoid_NSArray_NSArray_NSArray_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

void _ObjCBlock_ffiVoid_NSArray_NSArray_NSArray_closureTrampoline(
  ffi.Pointer<objc.ObjCBlock> block,
  ffi.Pointer<objc.ObjCObject> arg0,
  ffi.Pointer<objc.ObjCObject> arg1,
  ffi.Pointer<objc.ObjCObject> arg2,
) => _ObjCBlock_ffiVoid_NSArray_NSArray_NSArray_closureRegistry[block
    .ref
    .target
    .address]!(arg0, arg1, arg2);

class ObjCBlock_ffiVoid_NSArray_NSArray_NSArray extends objc.ObjCBlockBase {
  ObjCBlock_ffiVoid_NSArray_NSArray_NSArray._(
    ffi.Pointer<objc.ObjCBlock> pointer,
    this._lib, {
    bool retain = false,
    bool release = true,
  }) : super(pointer, retain: retain, release: release);

  AVFAudio _lib;

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_ffiVoid_NSArray_NSArray_NSArray castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCBlock> pointer, {
    bool retain = false,
    bool release = false,
  }) {
    return ObjCBlock_ffiVoid_NSArray_NSArray_NSArray._(
      pointer,
      lib,
      retain: retain,
      release: release,
    );
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSArray_NSArray_NSArray.fromFunctionPointer(
    AVFAudio lib,
    ffi.Pointer<
      ffi.NativeFunction<
        ffi.Void Function(
          ffi.Pointer<objc.ObjCObject> arg0,
          ffi.Pointer<objc.ObjCObject> arg1,
          ffi.Pointer<objc.ObjCObject> arg2,
        )
      >
    > ptr,
  ) : this._(objc.newBlock(
        _cFuncTrampoline ??=
            ffi.Pointer.fromFunction<
              ffi.Void Function(
                ffi.Pointer<objc.ObjCBlock>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
              )
            >(
              _ObjCBlock_ffiVoid_NSArray_NSArray_NSArray_fnPtrTrampoline,
            ).cast(),
        ptr.cast(),
      ), lib);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSArray_NSArray_NSArray.fromFunction(
    AVFAudio lib,
    void Function(NSArray, NSArray, NSArray) fn,
  ) : this._(objc.newBlock(
        _dartFuncTrampoline ??=
            ffi.Pointer.fromFunction<
              ffi.Void Function(
                ffi.Pointer<objc.ObjCBlock>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
              )
            >(
              _ObjCBlock_ffiVoid_NSArray_NSArray_NSArray_closureTrampoline,
            ).cast(),
        _ObjCBlock_ffiVoid_NSArray_NSArray_NSArray_registerClosure((
          ffi.Pointer<objc.ObjCObject> arg0,
          ffi.Pointer<objc.ObjCObject> arg1,
          ffi.Pointer<objc.ObjCObject> arg2,
        ) => fn(
          NSArray._(arg0, lib, retain: true, release: true),
          NSArray._(arg1, lib, retain: true, release: true),
          NSArray._(arg2, lib, retain: true, release: true),
        )),
      ), lib);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_NSArray_NSArray_NSArray.listener(
    AVFAudio lib,
    void Function(NSArray, NSArray, NSArray) fn,
  ) : this._(objc.newBlock(
        (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
              ffi.Void Function(
                ffi.Pointer<objc.ObjCBlock>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
              )
            >.listener(
              _ObjCBlock_ffiVoid_NSArray_NSArray_NSArray_closureTrampoline,
            )..keepIsolateAlive = false)
            .nativeFunction
            .cast(),
        _ObjCBlock_ffiVoid_NSArray_NSArray_NSArray_registerClosure((
          ffi.Pointer<objc.ObjCObject> arg0,
          ffi.Pointer<objc.ObjCObject> arg1,
          ffi.Pointer<objc.ObjCObject> arg2,
        ) => fn(
          NSArray._(arg0, lib, retain: true, release: true),
          NSArray._(arg1, lib, retain: true, release: true),
          NSArray._(arg2, lib, retain: true, release: true),
        )),
      ), lib);
  static ffi.NativeCallable<
    ffi.Void Function(
      ffi.Pointer<objc.ObjCBlock>,
      ffi.Pointer<objc.ObjCObject>,
      ffi.Pointer<objc.ObjCObject>,
      ffi.Pointer<objc.ObjCObject>,
    )
  >? _dartFuncListenerTrampoline;

  void call(NSArray arg0, NSArray arg1, NSArray arg2) => pointer.ref.invoke
      .cast<
        ffi.NativeFunction<
          ffi.Void Function(
            ffi.Pointer<objc.ObjCBlock> block,
            ffi.Pointer<objc.ObjCObject> arg0,
            ffi.Pointer<objc.ObjCObject> arg1,
            ffi.Pointer<objc.ObjCObject> arg2,
          )
        >
      >()
      .asFunction<
        void Function(
          ffi.Pointer<objc.ObjCBlock>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCObject>,
        )
      >()(pointer, arg0.pointer, arg1.pointer, arg2.pointer);
}

void _ObjCBlock_ffiVoid_NSArray1_fnPtrTrampoline(
  ffi.Pointer<objc.ObjCBlock> block,
  ffi.Pointer<objc.ObjCObject> arg0,
) => block.ref.target
    .cast<
      ffi.NativeFunction<ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0)>
    >()
    .asFunction<void Function(ffi.Pointer<objc.ObjCObject>)>()(arg0);
final _ObjCBlock_ffiVoid_NSArray1_closureRegistry =
    <int, void Function(ffi.Pointer<objc.ObjCObject>)>{};
int _ObjCBlock_ffiVoid_NSArray1_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void> _ObjCBlock_ffiVoid_NSArray1_registerClosure(
  void Function(ffi.Pointer<objc.ObjCObject>) fn,
) {
  final id = ++_ObjCBlock_ffiVoid_NSArray1_closureRegistryIndex;
  _ObjCBlock_ffiVoid_NSArray1_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

void _ObjCBlock_ffiVoid_NSArray1_closureTrampoline(
  ffi.Pointer<objc.ObjCBlock> block,
  ffi.Pointer<objc.ObjCObject> arg0,
) => _ObjCBlock_ffiVoid_NSArray1_closureRegistry[block.ref.target.address]!(
  arg0,
);

class ObjCBlock_ffiVoid_NSArray1 extends objc.ObjCBlockBase {
  ObjCBlock_ffiVoid_NSArray1._(
    ffi.Pointer<objc.ObjCBlock> pointer,
    this._lib, {
    bool retain = false,
    bool release = true,
  }) : super(pointer, retain: retain, release: release);

  AVFAudio _lib;

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_ffiVoid_NSArray1 castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCBlock> pointer, {
    bool retain = false,
    bool release = false,
  }) {
    return ObjCBlock_ffiVoid_NSArray1._(
      pointer,
      lib,
      retain: retain,
      release: release,
    );
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSArray1.fromFunctionPointer(
    AVFAudio lib,
    ffi.Pointer<
      ffi.NativeFunction<ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0)>
    > ptr,
  ) : this._(objc.newBlock(
        _cFuncTrampoline ??=
            ffi.Pointer.fromFunction<
              ffi.Void Function(
                ffi.Pointer<objc.ObjCBlock>,
                ffi.Pointer<objc.ObjCObject>,
              )
            >(_ObjCBlock_ffiVoid_NSArray1_fnPtrTrampoline).cast(),
        ptr.cast(),
      ), lib);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSArray1.fromFunction(
    AVFAudio lib,
    void Function(NSArray) fn,
  ) : this._(objc.newBlock(
        _dartFuncTrampoline ??=
            ffi.Pointer.fromFunction<
              ffi.Void Function(
                ffi.Pointer<objc.ObjCBlock>,
                ffi.Pointer<objc.ObjCObject>,
              )
            >(_ObjCBlock_ffiVoid_NSArray1_closureTrampoline).cast(),
        _ObjCBlock_ffiVoid_NSArray1_registerClosure((
          ffi.Pointer<objc.ObjCObject> arg0,
        ) => fn(NSArray._(arg0, lib, retain: true, release: true))),
      ), lib);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_NSArray1.listener(AVFAudio lib, void Function(NSArray) fn)
    : this._(objc.newBlock(
        (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
              ffi.Void Function(
                ffi.Pointer<objc.ObjCBlock>,
                ffi.Pointer<objc.ObjCObject>,
              )
            >.listener(
              _ObjCBlock_ffiVoid_NSArray1_closureTrampoline,
            )..keepIsolateAlive = false)
            .nativeFunction
            .cast(),
        _ObjCBlock_ffiVoid_NSArray1_registerClosure((
          ffi.Pointer<objc.ObjCObject> arg0,
        ) => fn(NSArray._(arg0, lib, retain: true, release: true))),
      ), lib);
  static ffi.NativeCallable<
    ffi.Void Function(ffi.Pointer<objc.ObjCBlock>, ffi.Pointer<objc.ObjCObject>)
  >? _dartFuncListenerTrampoline;

  void call(NSArray arg0) => pointer.ref.invoke
      .cast<
        ffi.NativeFunction<
          ffi.Void Function(
            ffi.Pointer<objc.ObjCBlock> block,
            ffi.Pointer<objc.ObjCObject> arg0,
          )
        >
      >()
      .asFunction<
        void Function(ffi.Pointer<objc.ObjCBlock>, ffi.Pointer<objc.ObjCObject>)
      >()(pointer, arg0.pointer);
}

class NSURLSessionUploadTask extends NSURLSessionDataTask {
  NSURLSessionUploadTask._(
    ffi.Pointer<objc.ObjCObject> pointer,
    AVFAudio lib, {
    bool retain = false,
    bool release = false,
  }) : super._(pointer, lib, retain: retain, release: release);

  /// Returns a [NSURLSessionUploadTask] that points to the same underlying object as [other].
  static NSURLSessionUploadTask castFrom<T extends objc.ObjCObjectBase>(
    AVFAudio lib,
    T other,
  ) {
    return NSURLSessionUploadTask._(
      other.pointer,
      lib,
      retain: true,
      release: true,
    );
  }

  /// Returns a [NSURLSessionUploadTask] that wraps the given raw object pointer.
  static NSURLSessionUploadTask castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCObject> other, {
    bool retain = false,
    bool release = false,
  }) {
    return NSURLSessionUploadTask._(
      other,
      lib,
      retain: retain,
      release: release,
    );
  }

  /// Returns whether [obj] is an instance of [NSURLSessionUploadTask].
  static bool isInstance(AVFAudio lib, objc.ObjCObjectBase obj) {
    return lib._objc_msgSend_0(
      obj.pointer,
      lib._sel_isKindOfClass_1,
      lib._class_NSURLSessionUploadTask1,
    );
  }

  @override
  NSURLSessionUploadTask init() {
    final _ret = _lib._objc_msgSend_2(this.pointer, _lib._sel_init1);
    return NSURLSessionUploadTask._(_ret, _lib, retain: true, release: true);
  }

  static NSURLSessionUploadTask new1(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSURLSessionUploadTask1,
      _lib._sel_new1,
    );
    return NSURLSessionUploadTask._(_ret, _lib, retain: false, release: true);
  }

  void cancelByProducingResumeData_(
    ObjCBlock_ffiVoid_NSData completionHandler,
  ) {
    _lib._objc_msgSend_1062(
      this.pointer,
      _lib._sel_cancelByProducingResumeData_1,
      completionHandler.pointer,
    );
  }

  static NSURLSessionUploadTask allocWithZone_(
    AVFAudio _lib,
    ffi.Pointer<_NSZone> zone,
  ) {
    final _ret = _lib._objc_msgSend_3(
      _lib._class_NSURLSessionUploadTask1,
      _lib._sel_allocWithZone_1,
      zone,
    );
    return NSURLSessionUploadTask._(_ret, _lib, retain: false, release: true);
  }

  static NSURLSessionUploadTask alloc(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSURLSessionUploadTask1,
      _lib._sel_alloc1,
    );
    return NSURLSessionUploadTask._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
    AVFAudio _lib,
    NSObject aTarget,
    ffi.Pointer<objc.ObjCSelector> aSelector,
    NSObject? anArgument,
  ) {
    _lib._objc_msgSend_14(
      _lib._class_NSURLSessionUploadTask1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
      aTarget.pointer,
      aSelector,
      anArgument?.pointer ?? ffi.nullptr,
    );
  }

  static void cancelPreviousPerformRequestsWithTarget_(
    AVFAudio _lib,
    NSObject aTarget,
  ) {
    _lib._objc_msgSend_15(
      _lib._class_NSURLSessionUploadTask1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_1,
      aTarget.pointer,
    );
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSURLSessionUploadTask1,
      _lib._sel_accessInstanceVariablesDirectly1,
    );
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSURLSessionUploadTask1,
      _lib._sel_useStoredAccessor1,
    );
  }

  static NSSet keyPathsForValuesAffectingValueForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    final _ret = _lib._objc_msgSend_63(
      _lib._class_NSURLSessionUploadTask1,
      _lib._sel_keyPathsForValuesAffectingValueForKey_1,
      key.pointer,
    );
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    return _lib._objc_msgSend_64(
      _lib._class_NSURLSessionUploadTask1,
      _lib._sel_automaticallyNotifiesObserversForKey_1,
      key.pointer,
    );
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
    AVFAudio _lib,
    NSArray keys,
    NSString dependentKey,
  ) {
    _lib._objc_msgSend_88(
      _lib._class_NSURLSessionUploadTask1,
      _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
      keys.pointer,
      dependentKey.pointer,
    );
  }

  static NSArray classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_85(
      _lib._class_NSURLSessionUploadTask1,
      _lib._sel_classFallbacksForKeyedArchiver1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSURLSessionUploadTask1,
      _lib._sel_classForKeyedUnarchiver1,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

void _ObjCBlock_ffiVoid_NSData_fnPtrTrampoline(
  ffi.Pointer<objc.ObjCBlock> block,
  ffi.Pointer<objc.ObjCObject> arg0,
) => block.ref.target
    .cast<
      ffi.NativeFunction<ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0)>
    >()
    .asFunction<void Function(ffi.Pointer<objc.ObjCObject>)>()(arg0);
final _ObjCBlock_ffiVoid_NSData_closureRegistry =
    <int, void Function(ffi.Pointer<objc.ObjCObject>)>{};
int _ObjCBlock_ffiVoid_NSData_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void> _ObjCBlock_ffiVoid_NSData_registerClosure(
  void Function(ffi.Pointer<objc.ObjCObject>) fn,
) {
  final id = ++_ObjCBlock_ffiVoid_NSData_closureRegistryIndex;
  _ObjCBlock_ffiVoid_NSData_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

void _ObjCBlock_ffiVoid_NSData_closureTrampoline(
  ffi.Pointer<objc.ObjCBlock> block,
  ffi.Pointer<objc.ObjCObject> arg0,
) => _ObjCBlock_ffiVoid_NSData_closureRegistry[block.ref.target.address]!(arg0);

class ObjCBlock_ffiVoid_NSData extends objc.ObjCBlockBase {
  ObjCBlock_ffiVoid_NSData._(
    ffi.Pointer<objc.ObjCBlock> pointer,
    this._lib, {
    bool retain = false,
    bool release = true,
  }) : super(pointer, retain: retain, release: release);

  AVFAudio _lib;

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_ffiVoid_NSData castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCBlock> pointer, {
    bool retain = false,
    bool release = false,
  }) {
    return ObjCBlock_ffiVoid_NSData._(
      pointer,
      lib,
      retain: retain,
      release: release,
    );
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSData.fromFunctionPointer(
    AVFAudio lib,
    ffi.Pointer<
      ffi.NativeFunction<ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0)>
    > ptr,
  ) : this._(objc.newBlock(
        _cFuncTrampoline ??=
            ffi.Pointer.fromFunction<
              ffi.Void Function(
                ffi.Pointer<objc.ObjCBlock>,
                ffi.Pointer<objc.ObjCObject>,
              )
            >(_ObjCBlock_ffiVoid_NSData_fnPtrTrampoline).cast(),
        ptr.cast(),
      ), lib);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSData.fromFunction(AVFAudio lib, void Function(NSData?) fn)
    : this._(objc.newBlock(
        _dartFuncTrampoline ??=
            ffi.Pointer.fromFunction<
              ffi.Void Function(
                ffi.Pointer<objc.ObjCBlock>,
                ffi.Pointer<objc.ObjCObject>,
              )
            >(_ObjCBlock_ffiVoid_NSData_closureTrampoline).cast(),
        _ObjCBlock_ffiVoid_NSData_registerClosure((
          ffi.Pointer<objc.ObjCObject> arg0,
        ) => fn(
          arg0.address == 0
              ? null
              : NSData._(arg0, lib, retain: true, release: true),
        )),
      ), lib);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_NSData.listener(AVFAudio lib, void Function(NSData?) fn)
    : this._(objc.newBlock(
        (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
              ffi.Void Function(
                ffi.Pointer<objc.ObjCBlock>,
                ffi.Pointer<objc.ObjCObject>,
              )
            >.listener(
              _ObjCBlock_ffiVoid_NSData_closureTrampoline,
            )..keepIsolateAlive = false)
            .nativeFunction
            .cast(),
        _ObjCBlock_ffiVoid_NSData_registerClosure((
          ffi.Pointer<objc.ObjCObject> arg0,
        ) => fn(
          arg0.address == 0
              ? null
              : NSData._(arg0, lib, retain: true, release: true),
        )),
      ), lib);
  static ffi.NativeCallable<
    ffi.Void Function(ffi.Pointer<objc.ObjCBlock>, ffi.Pointer<objc.ObjCObject>)
  >? _dartFuncListenerTrampoline;

  void call(NSData? arg0) => pointer.ref.invoke
      .cast<
        ffi.NativeFunction<
          ffi.Void Function(
            ffi.Pointer<objc.ObjCBlock> block,
            ffi.Pointer<objc.ObjCObject> arg0,
          )
        >
      >()
      .asFunction<
        void Function(ffi.Pointer<objc.ObjCBlock>, ffi.Pointer<objc.ObjCObject>)
      >()(pointer, arg0?.pointer ?? ffi.nullptr);
}

class NSURLSessionDownloadTask extends NSURLSessionTask {
  NSURLSessionDownloadTask._(
    ffi.Pointer<objc.ObjCObject> pointer,
    AVFAudio lib, {
    bool retain = false,
    bool release = false,
  }) : super._(pointer, lib, retain: retain, release: release);

  /// Returns a [NSURLSessionDownloadTask] that points to the same underlying object as [other].
  static NSURLSessionDownloadTask castFrom<T extends objc.ObjCObjectBase>(
    AVFAudio lib,
    T other,
  ) {
    return NSURLSessionDownloadTask._(
      other.pointer,
      lib,
      retain: true,
      release: true,
    );
  }

  /// Returns a [NSURLSessionDownloadTask] that wraps the given raw object pointer.
  static NSURLSessionDownloadTask castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCObject> other, {
    bool retain = false,
    bool release = false,
  }) {
    return NSURLSessionDownloadTask._(
      other,
      lib,
      retain: retain,
      release: release,
    );
  }

  /// Returns whether [obj] is an instance of [NSURLSessionDownloadTask].
  static bool isInstance(AVFAudio lib, objc.ObjCObjectBase obj) {
    return lib._objc_msgSend_0(
      obj.pointer,
      lib._sel_isKindOfClass_1,
      lib._class_NSURLSessionDownloadTask1,
    );
  }

  void cancelByProducingResumeData_(
    ObjCBlock_ffiVoid_NSData completionHandler,
  ) {
    _lib._objc_msgSend_1062(
      this.pointer,
      _lib._sel_cancelByProducingResumeData_1,
      completionHandler.pointer,
    );
  }

  @override
  NSURLSessionDownloadTask init() {
    final _ret = _lib._objc_msgSend_2(this.pointer, _lib._sel_init1);
    return NSURLSessionDownloadTask._(_ret, _lib, retain: true, release: true);
  }

  static NSURLSessionDownloadTask new1(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSURLSessionDownloadTask1,
      _lib._sel_new1,
    );
    return NSURLSessionDownloadTask._(_ret, _lib, retain: false, release: true);
  }

  static NSURLSessionDownloadTask allocWithZone_(
    AVFAudio _lib,
    ffi.Pointer<_NSZone> zone,
  ) {
    final _ret = _lib._objc_msgSend_3(
      _lib._class_NSURLSessionDownloadTask1,
      _lib._sel_allocWithZone_1,
      zone,
    );
    return NSURLSessionDownloadTask._(_ret, _lib, retain: false, release: true);
  }

  static NSURLSessionDownloadTask alloc(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSURLSessionDownloadTask1,
      _lib._sel_alloc1,
    );
    return NSURLSessionDownloadTask._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
    AVFAudio _lib,
    NSObject aTarget,
    ffi.Pointer<objc.ObjCSelector> aSelector,
    NSObject? anArgument,
  ) {
    _lib._objc_msgSend_14(
      _lib._class_NSURLSessionDownloadTask1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
      aTarget.pointer,
      aSelector,
      anArgument?.pointer ?? ffi.nullptr,
    );
  }

  static void cancelPreviousPerformRequestsWithTarget_(
    AVFAudio _lib,
    NSObject aTarget,
  ) {
    _lib._objc_msgSend_15(
      _lib._class_NSURLSessionDownloadTask1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_1,
      aTarget.pointer,
    );
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSURLSessionDownloadTask1,
      _lib._sel_accessInstanceVariablesDirectly1,
    );
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSURLSessionDownloadTask1,
      _lib._sel_useStoredAccessor1,
    );
  }

  static NSSet keyPathsForValuesAffectingValueForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    final _ret = _lib._objc_msgSend_63(
      _lib._class_NSURLSessionDownloadTask1,
      _lib._sel_keyPathsForValuesAffectingValueForKey_1,
      key.pointer,
    );
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    return _lib._objc_msgSend_64(
      _lib._class_NSURLSessionDownloadTask1,
      _lib._sel_automaticallyNotifiesObserversForKey_1,
      key.pointer,
    );
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
    AVFAudio _lib,
    NSArray keys,
    NSString dependentKey,
  ) {
    _lib._objc_msgSend_88(
      _lib._class_NSURLSessionDownloadTask1,
      _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
      keys.pointer,
      dependentKey.pointer,
    );
  }

  static NSArray classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_85(
      _lib._class_NSURLSessionDownloadTask1,
      _lib._sel_classFallbacksForKeyedArchiver1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSURLSessionDownloadTask1,
      _lib._sel_classForKeyedUnarchiver1,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

class NSURLSessionStreamTask extends NSURLSessionTask {
  NSURLSessionStreamTask._(
    ffi.Pointer<objc.ObjCObject> pointer,
    AVFAudio lib, {
    bool retain = false,
    bool release = false,
  }) : super._(pointer, lib, retain: retain, release: release);

  /// Returns a [NSURLSessionStreamTask] that points to the same underlying object as [other].
  static NSURLSessionStreamTask castFrom<T extends objc.ObjCObjectBase>(
    AVFAudio lib,
    T other,
  ) {
    return NSURLSessionStreamTask._(
      other.pointer,
      lib,
      retain: true,
      release: true,
    );
  }

  /// Returns a [NSURLSessionStreamTask] that wraps the given raw object pointer.
  static NSURLSessionStreamTask castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCObject> other, {
    bool retain = false,
    bool release = false,
  }) {
    return NSURLSessionStreamTask._(
      other,
      lib,
      retain: retain,
      release: release,
    );
  }

  /// Returns whether [obj] is an instance of [NSURLSessionStreamTask].
  static bool isInstance(AVFAudio lib, objc.ObjCObjectBase obj) {
    return lib._objc_msgSend_0(
      obj.pointer,
      lib._sel_isKindOfClass_1,
      lib._class_NSURLSessionStreamTask1,
    );
  }

  void readDataOfMinLength_maxLength_timeout_completionHandler_(
    int minBytes,
    int maxBytes,
    double timeout,
    ObjCBlock_ffiVoid_NSData_bool_NSError completionHandler,
  ) {
    _lib._objc_msgSend_1070(
      this.pointer,
      _lib._sel_readDataOfMinLength_maxLength_timeout_completionHandler_1,
      minBytes,
      maxBytes,
      timeout,
      completionHandler.pointer,
    );
  }

  void writeData_timeout_completionHandler_(
    NSData data,
    double timeout,
    ObjCBlock_ffiVoid_NSError completionHandler,
  ) {
    _lib._objc_msgSend_1071(
      this.pointer,
      _lib._sel_writeData_timeout_completionHandler_1,
      data.pointer,
      timeout,
      completionHandler.pointer,
    );
  }

  void captureStreams() {
    _lib._objc_msgSend_1(this.pointer, _lib._sel_captureStreams1);
  }

  void closeWrite() {
    _lib._objc_msgSend_1(this.pointer, _lib._sel_closeWrite1);
  }

  void closeRead() {
    _lib._objc_msgSend_1(this.pointer, _lib._sel_closeRead1);
  }

  void startSecureConnection() {
    _lib._objc_msgSend_1(this.pointer, _lib._sel_startSecureConnection1);
  }

  void stopSecureConnection() {
    _lib._objc_msgSend_1(this.pointer, _lib._sel_stopSecureConnection1);
  }

  @override
  NSURLSessionStreamTask init() {
    final _ret = _lib._objc_msgSend_2(this.pointer, _lib._sel_init1);
    return NSURLSessionStreamTask._(_ret, _lib, retain: true, release: true);
  }

  static NSURLSessionStreamTask new1(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSURLSessionStreamTask1,
      _lib._sel_new1,
    );
    return NSURLSessionStreamTask._(_ret, _lib, retain: false, release: true);
  }

  static NSURLSessionStreamTask allocWithZone_(
    AVFAudio _lib,
    ffi.Pointer<_NSZone> zone,
  ) {
    final _ret = _lib._objc_msgSend_3(
      _lib._class_NSURLSessionStreamTask1,
      _lib._sel_allocWithZone_1,
      zone,
    );
    return NSURLSessionStreamTask._(_ret, _lib, retain: false, release: true);
  }

  static NSURLSessionStreamTask alloc(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSURLSessionStreamTask1,
      _lib._sel_alloc1,
    );
    return NSURLSessionStreamTask._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
    AVFAudio _lib,
    NSObject aTarget,
    ffi.Pointer<objc.ObjCSelector> aSelector,
    NSObject? anArgument,
  ) {
    _lib._objc_msgSend_14(
      _lib._class_NSURLSessionStreamTask1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
      aTarget.pointer,
      aSelector,
      anArgument?.pointer ?? ffi.nullptr,
    );
  }

  static void cancelPreviousPerformRequestsWithTarget_(
    AVFAudio _lib,
    NSObject aTarget,
  ) {
    _lib._objc_msgSend_15(
      _lib._class_NSURLSessionStreamTask1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_1,
      aTarget.pointer,
    );
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSURLSessionStreamTask1,
      _lib._sel_accessInstanceVariablesDirectly1,
    );
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSURLSessionStreamTask1,
      _lib._sel_useStoredAccessor1,
    );
  }

  static NSSet keyPathsForValuesAffectingValueForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    final _ret = _lib._objc_msgSend_63(
      _lib._class_NSURLSessionStreamTask1,
      _lib._sel_keyPathsForValuesAffectingValueForKey_1,
      key.pointer,
    );
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    return _lib._objc_msgSend_64(
      _lib._class_NSURLSessionStreamTask1,
      _lib._sel_automaticallyNotifiesObserversForKey_1,
      key.pointer,
    );
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
    AVFAudio _lib,
    NSArray keys,
    NSString dependentKey,
  ) {
    _lib._objc_msgSend_88(
      _lib._class_NSURLSessionStreamTask1,
      _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
      keys.pointer,
      dependentKey.pointer,
    );
  }

  static NSArray classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_85(
      _lib._class_NSURLSessionStreamTask1,
      _lib._sel_classFallbacksForKeyedArchiver1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSURLSessionStreamTask1,
      _lib._sel_classForKeyedUnarchiver1,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

void _ObjCBlock_ffiVoid_NSData_bool_NSError_fnPtrTrampoline(
  ffi.Pointer<objc.ObjCBlock> block,
  ffi.Pointer<objc.ObjCObject> arg0,
  bool arg1,
  ffi.Pointer<objc.ObjCObject> arg2,
) => block.ref.target
    .cast<
      ffi.NativeFunction<
        ffi.Void Function(
          ffi.Pointer<objc.ObjCObject> arg0,
          ffi.Bool arg1,
          ffi.Pointer<objc.ObjCObject> arg2,
        )
      >
    >()
    .asFunction<
      void Function(
        ffi.Pointer<objc.ObjCObject>,
        bool,
        ffi.Pointer<objc.ObjCObject>,
      )
    >()(arg0, arg1, arg2);
final _ObjCBlock_ffiVoid_NSData_bool_NSError_closureRegistry =
    <
      int,
      void Function(
        ffi.Pointer<objc.ObjCObject>,
        bool,
        ffi.Pointer<objc.ObjCObject>,
      )
    >{};
int _ObjCBlock_ffiVoid_NSData_bool_NSError_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void> _ObjCBlock_ffiVoid_NSData_bool_NSError_registerClosure(
  void Function(
    ffi.Pointer<objc.ObjCObject>,
    bool,
    ffi.Pointer<objc.ObjCObject>,
  ) fn,
) {
  final id = ++_ObjCBlock_ffiVoid_NSData_bool_NSError_closureRegistryIndex;
  _ObjCBlock_ffiVoid_NSData_bool_NSError_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

void _ObjCBlock_ffiVoid_NSData_bool_NSError_closureTrampoline(
  ffi.Pointer<objc.ObjCBlock> block,
  ffi.Pointer<objc.ObjCObject> arg0,
  bool arg1,
  ffi.Pointer<objc.ObjCObject> arg2,
) => _ObjCBlock_ffiVoid_NSData_bool_NSError_closureRegistry[block
    .ref
    .target
    .address]!(arg0, arg1, arg2);

class ObjCBlock_ffiVoid_NSData_bool_NSError extends objc.ObjCBlockBase {
  ObjCBlock_ffiVoid_NSData_bool_NSError._(
    ffi.Pointer<objc.ObjCBlock> pointer,
    this._lib, {
    bool retain = false,
    bool release = true,
  }) : super(pointer, retain: retain, release: release);

  AVFAudio _lib;

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_ffiVoid_NSData_bool_NSError castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCBlock> pointer, {
    bool retain = false,
    bool release = false,
  }) {
    return ObjCBlock_ffiVoid_NSData_bool_NSError._(
      pointer,
      lib,
      retain: retain,
      release: release,
    );
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSData_bool_NSError.fromFunctionPointer(
    AVFAudio lib,
    ffi.Pointer<
      ffi.NativeFunction<
        ffi.Void Function(
          ffi.Pointer<objc.ObjCObject> arg0,
          ffi.Bool arg1,
          ffi.Pointer<objc.ObjCObject> arg2,
        )
      >
    > ptr,
  ) : this._(objc.newBlock(
        _cFuncTrampoline ??=
            ffi.Pointer.fromFunction<
              ffi.Void Function(
                ffi.Pointer<objc.ObjCBlock>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Bool,
                ffi.Pointer<objc.ObjCObject>,
              )
            >(_ObjCBlock_ffiVoid_NSData_bool_NSError_fnPtrTrampoline).cast(),
        ptr.cast(),
      ), lib);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSData_bool_NSError.fromFunction(
    AVFAudio lib,
    void Function(NSData, bool, NSError?) fn,
  ) : this._(objc.newBlock(
        _dartFuncTrampoline ??=
            ffi.Pointer.fromFunction<
              ffi.Void Function(
                ffi.Pointer<objc.ObjCBlock>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Bool,
                ffi.Pointer<objc.ObjCObject>,
              )
            >(_ObjCBlock_ffiVoid_NSData_bool_NSError_closureTrampoline).cast(),
        _ObjCBlock_ffiVoid_NSData_bool_NSError_registerClosure((
          ffi.Pointer<objc.ObjCObject> arg0,
          bool arg1,
          ffi.Pointer<objc.ObjCObject> arg2,
        ) => fn(
          NSData._(arg0, lib, retain: true, release: true),
          arg1,
          arg2.address == 0
              ? null
              : NSError._(arg2, lib, retain: true, release: true),
        )),
      ), lib);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_NSData_bool_NSError.listener(
    AVFAudio lib,
    void Function(NSData, bool, NSError?) fn,
  ) : this._(objc.newBlock(
        (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
              ffi.Void Function(
                ffi.Pointer<objc.ObjCBlock>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Bool,
                ffi.Pointer<objc.ObjCObject>,
              )
            >.listener(
              _ObjCBlock_ffiVoid_NSData_bool_NSError_closureTrampoline,
            )..keepIsolateAlive = false)
            .nativeFunction
            .cast(),
        _ObjCBlock_ffiVoid_NSData_bool_NSError_registerClosure((
          ffi.Pointer<objc.ObjCObject> arg0,
          bool arg1,
          ffi.Pointer<objc.ObjCObject> arg2,
        ) => fn(
          NSData._(arg0, lib, retain: true, release: true),
          arg1,
          arg2.address == 0
              ? null
              : NSError._(arg2, lib, retain: true, release: true),
        )),
      ), lib);
  static ffi.NativeCallable<
    ffi.Void Function(
      ffi.Pointer<objc.ObjCBlock>,
      ffi.Pointer<objc.ObjCObject>,
      ffi.Bool,
      ffi.Pointer<objc.ObjCObject>,
    )
  >? _dartFuncListenerTrampoline;

  void call(NSData arg0, bool arg1, NSError? arg2) => pointer.ref.invoke
      .cast<
        ffi.NativeFunction<
          ffi.Void Function(
            ffi.Pointer<objc.ObjCBlock> block,
            ffi.Pointer<objc.ObjCObject> arg0,
            ffi.Bool arg1,
            ffi.Pointer<objc.ObjCObject> arg2,
          )
        >
      >()
      .asFunction<
        void Function(
          ffi.Pointer<objc.ObjCBlock>,
          ffi.Pointer<objc.ObjCObject>,
          bool,
          ffi.Pointer<objc.ObjCObject>,
        )
      >()(pointer, arg0.pointer, arg1, arg2?.pointer ?? ffi.nullptr);
}

class NSNetService extends NSObject {
  NSNetService._(
    ffi.Pointer<objc.ObjCObject> pointer,
    AVFAudio lib, {
    bool retain = false,
    bool release = false,
  }) : super._(pointer, lib, retain: retain, release: release);

  /// Returns a [NSNetService] that points to the same underlying object as [other].
  static NSNetService castFrom<T extends objc.ObjCObjectBase>(
    AVFAudio lib,
    T other,
  ) {
    return NSNetService._(other.pointer, lib, retain: true, release: true);
  }

  /// Returns a [NSNetService] that wraps the given raw object pointer.
  static NSNetService castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCObject> other, {
    bool retain = false,
    bool release = false,
  }) {
    return NSNetService._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSNetService].
  static bool isInstance(AVFAudio lib, objc.ObjCObjectBase obj) {
    return lib._objc_msgSend_0(
      obj.pointer,
      lib._sel_isKindOfClass_1,
      lib._class_NSNetService1,
    );
  }

  NSNetService initWithDomain_type_name_port_(
    NSString domain,
    NSString type,
    NSString name,
    int port,
  ) {
    final _ret = _lib._objc_msgSend_1073(
      this.pointer,
      _lib._sel_initWithDomain_type_name_port_1,
      domain.pointer,
      type.pointer,
      name.pointer,
      port,
    );
    return NSNetService._(_ret, _lib, retain: true, release: true);
  }

  NSNetService initWithDomain_type_name_(
    NSString domain,
    NSString type,
    NSString name,
  ) {
    final _ret = _lib._objc_msgSend_1074(
      this.pointer,
      _lib._sel_initWithDomain_type_name_1,
      domain.pointer,
      type.pointer,
      name.pointer,
    );
    return NSNetService._(_ret, _lib, retain: true, release: true);
  }

  void scheduleInRunLoop_forMode_(NSRunLoop aRunLoop, NSString mode) {
    _lib._objc_msgSend_569(
      this.pointer,
      _lib._sel_scheduleInRunLoop_forMode_1,
      aRunLoop.pointer,
      mode.pointer,
    );
  }

  void removeFromRunLoop_forMode_(NSRunLoop aRunLoop, NSString mode) {
    _lib._objc_msgSend_569(
      this.pointer,
      _lib._sel_removeFromRunLoop_forMode_1,
      aRunLoop.pointer,
      mode.pointer,
    );
  }

  NSObject? get delegate {
    final _ret = _lib._objc_msgSend_17(this.pointer, _lib._sel_delegate1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  set delegate(NSObject? value) {
    return _lib._objc_msgSend_416(
      this.pointer,
      _lib._sel_setDelegate_1,
      value?.pointer ?? ffi.nullptr,
    );
  }

  bool get includesPeerToPeer {
    return _lib._objc_msgSend_12(this.pointer, _lib._sel_includesPeerToPeer1);
  }

  set includesPeerToPeer(bool value) {
    return _lib._objc_msgSend_527(
      this.pointer,
      _lib._sel_setIncludesPeerToPeer_1,
      value,
    );
  }

  NSString get name {
    final _ret = _lib._objc_msgSend_21(this.pointer, _lib._sel_name1);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString get type {
    final _ret = _lib._objc_msgSend_21(this.pointer, _lib._sel_type1);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString get domain {
    final _ret = _lib._objc_msgSend_21(this.pointer, _lib._sel_domain1);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString? get hostName {
    final _ret = _lib._objc_msgSend_44(this.pointer, _lib._sel_hostName1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSArray? get addresses {
    final _ret = _lib._objc_msgSend_84(this.pointer, _lib._sel_addresses1);
    return _ret.address == 0
        ? null
        : NSArray._(_ret, _lib, retain: true, release: true);
  }

  int get port {
    return _lib._objc_msgSend_83(this.pointer, _lib._sel_port1);
  }

  void publish() {
    _lib._objc_msgSend_1(this.pointer, _lib._sel_publish1);
  }

  void publishWithOptions_(int options) {
    _lib._objc_msgSend_1075(
      this.pointer,
      _lib._sel_publishWithOptions_1,
      options,
    );
  }

  void resolve() {
    _lib._objc_msgSend_1(this.pointer, _lib._sel_resolve1);
  }

  void stop() {
    _lib._objc_msgSend_1(this.pointer, _lib._sel_stop1);
  }

  static NSDictionary dictionaryFromTXTRecordData_(
    AVFAudio _lib,
    NSData txtData,
  ) {
    final _ret = _lib._objc_msgSend_1076(
      _lib._class_NSNetService1,
      _lib._sel_dictionaryFromTXTRecordData_1,
      txtData.pointer,
    );
    return NSDictionary._(_ret, _lib, retain: true, release: true);
  }

  static NSData dataFromTXTRecordDictionary_(
    AVFAudio _lib,
    NSDictionary txtDictionary,
  ) {
    final _ret = _lib._objc_msgSend_1077(
      _lib._class_NSNetService1,
      _lib._sel_dataFromTXTRecordDictionary_1,
      txtDictionary.pointer,
    );
    return NSData._(_ret, _lib, retain: true, release: true);
  }

  void resolveWithTimeout_(double timeout) {
    _lib._objc_msgSend_541(
      this.pointer,
      _lib._sel_resolveWithTimeout_1,
      timeout,
    );
  }

  bool getInputStream_outputStream_(
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> inputStream,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outputStream,
  ) {
    return _lib._objc_msgSend_1078(
      this.pointer,
      _lib._sel_getInputStream_outputStream_1,
      inputStream,
      outputStream,
    );
  }

  bool setTXTRecordData_(NSData? recordData) {
    return _lib._objc_msgSend_1079(
      this.pointer,
      _lib._sel_setTXTRecordData_1,
      recordData?.pointer ?? ffi.nullptr,
    );
  }

  NSData? TXTRecordData() {
    final _ret = _lib._objc_msgSend_286(this.pointer, _lib._sel_TXTRecordData1);
    return _ret.address == 0
        ? null
        : NSData._(_ret, _lib, retain: true, release: true);
  }

  void startMonitoring() {
    _lib._objc_msgSend_1(this.pointer, _lib._sel_startMonitoring1);
  }

  void stopMonitoring() {
    _lib._objc_msgSend_1(this.pointer, _lib._sel_stopMonitoring1);
  }

  @override
  NSNetService init() {
    final _ret = _lib._objc_msgSend_2(this.pointer, _lib._sel_init1);
    return NSNetService._(_ret, _lib, retain: true, release: true);
  }

  static NSNetService new1(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSNetService1,
      _lib._sel_new1,
    );
    return NSNetService._(_ret, _lib, retain: false, release: true);
  }

  static NSNetService allocWithZone_(AVFAudio _lib, ffi.Pointer<_NSZone> zone) {
    final _ret = _lib._objc_msgSend_3(
      _lib._class_NSNetService1,
      _lib._sel_allocWithZone_1,
      zone,
    );
    return NSNetService._(_ret, _lib, retain: false, release: true);
  }

  static NSNetService alloc(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSNetService1,
      _lib._sel_alloc1,
    );
    return NSNetService._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
    AVFAudio _lib,
    NSObject aTarget,
    ffi.Pointer<objc.ObjCSelector> aSelector,
    NSObject? anArgument,
  ) {
    _lib._objc_msgSend_14(
      _lib._class_NSNetService1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
      aTarget.pointer,
      aSelector,
      anArgument?.pointer ?? ffi.nullptr,
    );
  }

  static void cancelPreviousPerformRequestsWithTarget_(
    AVFAudio _lib,
    NSObject aTarget,
  ) {
    _lib._objc_msgSend_15(
      _lib._class_NSNetService1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_1,
      aTarget.pointer,
    );
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSNetService1,
      _lib._sel_accessInstanceVariablesDirectly1,
    );
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSNetService1,
      _lib._sel_useStoredAccessor1,
    );
  }

  static NSSet keyPathsForValuesAffectingValueForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    final _ret = _lib._objc_msgSend_63(
      _lib._class_NSNetService1,
      _lib._sel_keyPathsForValuesAffectingValueForKey_1,
      key.pointer,
    );
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    return _lib._objc_msgSend_64(
      _lib._class_NSNetService1,
      _lib._sel_automaticallyNotifiesObserversForKey_1,
      key.pointer,
    );
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
    AVFAudio _lib,
    NSArray keys,
    NSString dependentKey,
  ) {
    _lib._objc_msgSend_88(
      _lib._class_NSNetService1,
      _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
      keys.pointer,
      dependentKey.pointer,
    );
  }

  static NSArray classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_85(
      _lib._class_NSNetService1,
      _lib._sel_classFallbacksForKeyedArchiver1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSNetService1,
      _lib._sel_classForKeyedUnarchiver1,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

abstract class NSNetServiceOptions {
  static const int NSNetServiceNoAutoRename = 1;
  static const int NSNetServiceListenForConnections = 2;
}

class NSURLSessionWebSocketTask extends NSURLSessionTask {
  NSURLSessionWebSocketTask._(
    ffi.Pointer<objc.ObjCObject> pointer,
    AVFAudio lib, {
    bool retain = false,
    bool release = false,
  }) : super._(pointer, lib, retain: retain, release: release);

  /// Returns a [NSURLSessionWebSocketTask] that points to the same underlying object as [other].
  static NSURLSessionWebSocketTask castFrom<T extends objc.ObjCObjectBase>(
    AVFAudio lib,
    T other,
  ) {
    return NSURLSessionWebSocketTask._(
      other.pointer,
      lib,
      retain: true,
      release: true,
    );
  }

  /// Returns a [NSURLSessionWebSocketTask] that wraps the given raw object pointer.
  static NSURLSessionWebSocketTask castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCObject> other, {
    bool retain = false,
    bool release = false,
  }) {
    return NSURLSessionWebSocketTask._(
      other,
      lib,
      retain: retain,
      release: release,
    );
  }

  /// Returns whether [obj] is an instance of [NSURLSessionWebSocketTask].
  static bool isInstance(AVFAudio lib, objc.ObjCObjectBase obj) {
    return lib._objc_msgSend_0(
      obj.pointer,
      lib._sel_isKindOfClass_1,
      lib._class_NSURLSessionWebSocketTask1,
    );
  }

  void sendMessage_completionHandler_(
    NSURLSessionWebSocketMessage message,
    ObjCBlock_ffiVoid_NSError completionHandler,
  ) {
    _lib._objc_msgSend_1082(
      this.pointer,
      _lib._sel_sendMessage_completionHandler_1,
      message.pointer,
      completionHandler.pointer,
    );
  }

  void receiveMessageWithCompletionHandler_(
    ObjCBlock_ffiVoid_NSURLSessionWebSocketMessage_NSError completionHandler,
  ) {
    _lib._objc_msgSend_1083(
      this.pointer,
      _lib._sel_receiveMessageWithCompletionHandler_1,
      completionHandler.pointer,
    );
  }

  void sendPingWithPongReceiveHandler_(
    ObjCBlock_ffiVoid_NSError pongReceiveHandler,
  ) {
    _lib._objc_msgSend_1084(
      this.pointer,
      _lib._sel_sendPingWithPongReceiveHandler_1,
      pongReceiveHandler.pointer,
    );
  }

  void cancelWithCloseCode_reason_(int closeCode, NSData? reason) {
    _lib._objc_msgSend_1085(
      this.pointer,
      _lib._sel_cancelWithCloseCode_reason_1,
      closeCode,
      reason?.pointer ?? ffi.nullptr,
    );
  }

  int get maximumMessageSize {
    return _lib._objc_msgSend_83(this.pointer, _lib._sel_maximumMessageSize1);
  }

  set maximumMessageSize(int value) {
    return _lib._objc_msgSend_635(
      this.pointer,
      _lib._sel_setMaximumMessageSize_1,
      value,
    );
  }

  int get closeCode {
    return _lib._objc_msgSend_1086(this.pointer, _lib._sel_closeCode1);
  }

  NSData? get closeReason {
    final _ret = _lib._objc_msgSend_286(this.pointer, _lib._sel_closeReason1);
    return _ret.address == 0
        ? null
        : NSData._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSURLSessionWebSocketTask init() {
    final _ret = _lib._objc_msgSend_2(this.pointer, _lib._sel_init1);
    return NSURLSessionWebSocketTask._(_ret, _lib, retain: true, release: true);
  }

  static NSURLSessionWebSocketTask new1(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSURLSessionWebSocketTask1,
      _lib._sel_new1,
    );
    return NSURLSessionWebSocketTask._(
      _ret,
      _lib,
      retain: false,
      release: true,
    );
  }

  static NSURLSessionWebSocketTask allocWithZone_(
    AVFAudio _lib,
    ffi.Pointer<_NSZone> zone,
  ) {
    final _ret = _lib._objc_msgSend_3(
      _lib._class_NSURLSessionWebSocketTask1,
      _lib._sel_allocWithZone_1,
      zone,
    );
    return NSURLSessionWebSocketTask._(
      _ret,
      _lib,
      retain: false,
      release: true,
    );
  }

  static NSURLSessionWebSocketTask alloc(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSURLSessionWebSocketTask1,
      _lib._sel_alloc1,
    );
    return NSURLSessionWebSocketTask._(
      _ret,
      _lib,
      retain: false,
      release: true,
    );
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
    AVFAudio _lib,
    NSObject aTarget,
    ffi.Pointer<objc.ObjCSelector> aSelector,
    NSObject? anArgument,
  ) {
    _lib._objc_msgSend_14(
      _lib._class_NSURLSessionWebSocketTask1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
      aTarget.pointer,
      aSelector,
      anArgument?.pointer ?? ffi.nullptr,
    );
  }

  static void cancelPreviousPerformRequestsWithTarget_(
    AVFAudio _lib,
    NSObject aTarget,
  ) {
    _lib._objc_msgSend_15(
      _lib._class_NSURLSessionWebSocketTask1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_1,
      aTarget.pointer,
    );
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSURLSessionWebSocketTask1,
      _lib._sel_accessInstanceVariablesDirectly1,
    );
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSURLSessionWebSocketTask1,
      _lib._sel_useStoredAccessor1,
    );
  }

  static NSSet keyPathsForValuesAffectingValueForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    final _ret = _lib._objc_msgSend_63(
      _lib._class_NSURLSessionWebSocketTask1,
      _lib._sel_keyPathsForValuesAffectingValueForKey_1,
      key.pointer,
    );
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    return _lib._objc_msgSend_64(
      _lib._class_NSURLSessionWebSocketTask1,
      _lib._sel_automaticallyNotifiesObserversForKey_1,
      key.pointer,
    );
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
    AVFAudio _lib,
    NSArray keys,
    NSString dependentKey,
  ) {
    _lib._objc_msgSend_88(
      _lib._class_NSURLSessionWebSocketTask1,
      _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
      keys.pointer,
      dependentKey.pointer,
    );
  }

  static NSArray classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_85(
      _lib._class_NSURLSessionWebSocketTask1,
      _lib._sel_classFallbacksForKeyedArchiver1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSURLSessionWebSocketTask1,
      _lib._sel_classForKeyedUnarchiver1,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

class NSURLSessionWebSocketMessage extends NSObject {
  NSURLSessionWebSocketMessage._(
    ffi.Pointer<objc.ObjCObject> pointer,
    AVFAudio lib, {
    bool retain = false,
    bool release = false,
  }) : super._(pointer, lib, retain: retain, release: release);

  /// Returns a [NSURLSessionWebSocketMessage] that points to the same underlying object as [other].
  static NSURLSessionWebSocketMessage castFrom<T extends objc.ObjCObjectBase>(
    AVFAudio lib,
    T other,
  ) {
    return NSURLSessionWebSocketMessage._(
      other.pointer,
      lib,
      retain: true,
      release: true,
    );
  }

  /// Returns a [NSURLSessionWebSocketMessage] that wraps the given raw object pointer.
  static NSURLSessionWebSocketMessage castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCObject> other, {
    bool retain = false,
    bool release = false,
  }) {
    return NSURLSessionWebSocketMessage._(
      other,
      lib,
      retain: retain,
      release: release,
    );
  }

  /// Returns whether [obj] is an instance of [NSURLSessionWebSocketMessage].
  static bool isInstance(AVFAudio lib, objc.ObjCObjectBase obj) {
    return lib._objc_msgSend_0(
      obj.pointer,
      lib._sel_isKindOfClass_1,
      lib._class_NSURLSessionWebSocketMessage1,
    );
  }

  NSURLSessionWebSocketMessage initWithData_(NSData data) {
    final _ret = _lib._objc_msgSend_279(
      this.pointer,
      _lib._sel_initWithData_1,
      data.pointer,
    );
    return NSURLSessionWebSocketMessage._(
      _ret,
      _lib,
      retain: true,
      release: true,
    );
  }

  NSURLSessionWebSocketMessage initWithString_(NSString string) {
    final _ret = _lib._objc_msgSend_31(
      this.pointer,
      _lib._sel_initWithString_1,
      string.pointer,
    );
    return NSURLSessionWebSocketMessage._(
      _ret,
      _lib,
      retain: true,
      release: true,
    );
  }

  int get type {
    return _lib._objc_msgSend_1081(this.pointer, _lib._sel_type1);
  }

  NSData? get data {
    final _ret = _lib._objc_msgSend_286(this.pointer, _lib._sel_data1);
    return _ret.address == 0
        ? null
        : NSData._(_ret, _lib, retain: true, release: true);
  }

  NSString? get string {
    final _ret = _lib._objc_msgSend_44(this.pointer, _lib._sel_string1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSURLSessionWebSocketMessage init() {
    final _ret = _lib._objc_msgSend_2(this.pointer, _lib._sel_init1);
    return NSURLSessionWebSocketMessage._(
      _ret,
      _lib,
      retain: true,
      release: true,
    );
  }

  static NSURLSessionWebSocketMessage new1(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSURLSessionWebSocketMessage1,
      _lib._sel_new1,
    );
    return NSURLSessionWebSocketMessage._(
      _ret,
      _lib,
      retain: false,
      release: true,
    );
  }

  static NSURLSessionWebSocketMessage allocWithZone_(
    AVFAudio _lib,
    ffi.Pointer<_NSZone> zone,
  ) {
    final _ret = _lib._objc_msgSend_3(
      _lib._class_NSURLSessionWebSocketMessage1,
      _lib._sel_allocWithZone_1,
      zone,
    );
    return NSURLSessionWebSocketMessage._(
      _ret,
      _lib,
      retain: false,
      release: true,
    );
  }

  static NSURLSessionWebSocketMessage alloc(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSURLSessionWebSocketMessage1,
      _lib._sel_alloc1,
    );
    return NSURLSessionWebSocketMessage._(
      _ret,
      _lib,
      retain: false,
      release: true,
    );
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
    AVFAudio _lib,
    NSObject aTarget,
    ffi.Pointer<objc.ObjCSelector> aSelector,
    NSObject? anArgument,
  ) {
    _lib._objc_msgSend_14(
      _lib._class_NSURLSessionWebSocketMessage1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
      aTarget.pointer,
      aSelector,
      anArgument?.pointer ?? ffi.nullptr,
    );
  }

  static void cancelPreviousPerformRequestsWithTarget_(
    AVFAudio _lib,
    NSObject aTarget,
  ) {
    _lib._objc_msgSend_15(
      _lib._class_NSURLSessionWebSocketMessage1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_1,
      aTarget.pointer,
    );
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSURLSessionWebSocketMessage1,
      _lib._sel_accessInstanceVariablesDirectly1,
    );
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSURLSessionWebSocketMessage1,
      _lib._sel_useStoredAccessor1,
    );
  }

  static NSSet keyPathsForValuesAffectingValueForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    final _ret = _lib._objc_msgSend_63(
      _lib._class_NSURLSessionWebSocketMessage1,
      _lib._sel_keyPathsForValuesAffectingValueForKey_1,
      key.pointer,
    );
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    return _lib._objc_msgSend_64(
      _lib._class_NSURLSessionWebSocketMessage1,
      _lib._sel_automaticallyNotifiesObserversForKey_1,
      key.pointer,
    );
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
    AVFAudio _lib,
    NSArray keys,
    NSString dependentKey,
  ) {
    _lib._objc_msgSend_88(
      _lib._class_NSURLSessionWebSocketMessage1,
      _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
      keys.pointer,
      dependentKey.pointer,
    );
  }

  static NSArray classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_85(
      _lib._class_NSURLSessionWebSocketMessage1,
      _lib._sel_classFallbacksForKeyedArchiver1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSURLSessionWebSocketMessage1,
      _lib._sel_classForKeyedUnarchiver1,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

abstract class NSURLSessionWebSocketMessageType {
  static const int NSURLSessionWebSocketMessageTypeData = 0;
  static const int NSURLSessionWebSocketMessageTypeString = 1;
}

void _ObjCBlock_ffiVoid_NSURLSessionWebSocketMessage_NSError_fnPtrTrampoline(
  ffi.Pointer<objc.ObjCBlock> block,
  ffi.Pointer<objc.ObjCObject> arg0,
  ffi.Pointer<objc.ObjCObject> arg1,
) => block.ref.target
    .cast<
      ffi.NativeFunction<
        ffi.Void Function(
          ffi.Pointer<objc.ObjCObject> arg0,
          ffi.Pointer<objc.ObjCObject> arg1,
        )
      >
    >()
    .asFunction<
      void Function(ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)
    >()(arg0, arg1);
final _ObjCBlock_ffiVoid_NSURLSessionWebSocketMessage_NSError_closureRegistry =
    <
      int,
      void Function(ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)
    >{};
int
_ObjCBlock_ffiVoid_NSURLSessionWebSocketMessage_NSError_closureRegistryIndex =
    0;
ffi.Pointer<ffi.Void>
_ObjCBlock_ffiVoid_NSURLSessionWebSocketMessage_NSError_registerClosure(
  void Function(ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>) fn,
) {
  final id =
      ++_ObjCBlock_ffiVoid_NSURLSessionWebSocketMessage_NSError_closureRegistryIndex;
  _ObjCBlock_ffiVoid_NSURLSessionWebSocketMessage_NSError_closureRegistry[id] =
      fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

void _ObjCBlock_ffiVoid_NSURLSessionWebSocketMessage_NSError_closureTrampoline(
  ffi.Pointer<objc.ObjCBlock> block,
  ffi.Pointer<objc.ObjCObject> arg0,
  ffi.Pointer<objc.ObjCObject> arg1,
) =>
    _ObjCBlock_ffiVoid_NSURLSessionWebSocketMessage_NSError_closureRegistry[block
        .ref
        .target
        .address]!(arg0, arg1);

class ObjCBlock_ffiVoid_NSURLSessionWebSocketMessage_NSError
    extends objc.ObjCBlockBase {
  ObjCBlock_ffiVoid_NSURLSessionWebSocketMessage_NSError._(
    ffi.Pointer<objc.ObjCBlock> pointer,
    this._lib, {
    bool retain = false,
    bool release = true,
  }) : super(pointer, retain: retain, release: release);

  AVFAudio _lib;

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_ffiVoid_NSURLSessionWebSocketMessage_NSError castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCBlock> pointer, {
    bool retain = false,
    bool release = false,
  }) {
    return ObjCBlock_ffiVoid_NSURLSessionWebSocketMessage_NSError._(
      pointer,
      lib,
      retain: retain,
      release: release,
    );
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSURLSessionWebSocketMessage_NSError.fromFunctionPointer(
    AVFAudio lib,
    ffi.Pointer<
      ffi.NativeFunction<
        ffi.Void Function(
          ffi.Pointer<objc.ObjCObject> arg0,
          ffi.Pointer<objc.ObjCObject> arg1,
        )
      >
    > ptr,
  ) : this._(objc.newBlock(
        _cFuncTrampoline ??=
            ffi.Pointer.fromFunction<
              ffi.Void Function(
                ffi.Pointer<objc.ObjCBlock>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
              )
            >(
              _ObjCBlock_ffiVoid_NSURLSessionWebSocketMessage_NSError_fnPtrTrampoline,
            ).cast(),
        ptr.cast(),
      ), lib);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSURLSessionWebSocketMessage_NSError.fromFunction(
    AVFAudio lib,
    void Function(NSURLSessionWebSocketMessage?, NSError?) fn,
  ) : this._(objc.newBlock(
        _dartFuncTrampoline ??=
            ffi.Pointer.fromFunction<
              ffi.Void Function(
                ffi.Pointer<objc.ObjCBlock>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
              )
            >(
              _ObjCBlock_ffiVoid_NSURLSessionWebSocketMessage_NSError_closureTrampoline,
            ).cast(),
        _ObjCBlock_ffiVoid_NSURLSessionWebSocketMessage_NSError_registerClosure(
          (
            ffi.Pointer<objc.ObjCObject> arg0,
            ffi.Pointer<objc.ObjCObject> arg1,
          ) => fn(
            arg0.address == 0
                ? null
                : NSURLSessionWebSocketMessage._(
                  arg0,
                  lib,
                  retain: true,
                  release: true,
                ),
            arg1.address == 0
                ? null
                : NSError._(arg1, lib, retain: true, release: true),
          ),
        ),
      ), lib);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_NSURLSessionWebSocketMessage_NSError.listener(
    AVFAudio lib,
    void Function(NSURLSessionWebSocketMessage?, NSError?) fn,
  ) : this._(objc.newBlock(
        (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
              ffi.Void Function(
                ffi.Pointer<objc.ObjCBlock>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
              )
            >.listener(
              _ObjCBlock_ffiVoid_NSURLSessionWebSocketMessage_NSError_closureTrampoline,
            )..keepIsolateAlive = false)
            .nativeFunction
            .cast(),
        _ObjCBlock_ffiVoid_NSURLSessionWebSocketMessage_NSError_registerClosure(
          (
            ffi.Pointer<objc.ObjCObject> arg0,
            ffi.Pointer<objc.ObjCObject> arg1,
          ) => fn(
            arg0.address == 0
                ? null
                : NSURLSessionWebSocketMessage._(
                  arg0,
                  lib,
                  retain: true,
                  release: true,
                ),
            arg1.address == 0
                ? null
                : NSError._(arg1, lib, retain: true, release: true),
          ),
        ),
      ), lib);
  static ffi.NativeCallable<
    ffi.Void Function(
      ffi.Pointer<objc.ObjCBlock>,
      ffi.Pointer<objc.ObjCObject>,
      ffi.Pointer<objc.ObjCObject>,
    )
  >? _dartFuncListenerTrampoline;

  void call(NSURLSessionWebSocketMessage? arg0, NSError? arg1) => pointer
      .ref
      .invoke
      .cast<
        ffi.NativeFunction<
          ffi.Void Function(
            ffi.Pointer<objc.ObjCBlock> block,
            ffi.Pointer<objc.ObjCObject> arg0,
            ffi.Pointer<objc.ObjCObject> arg1,
          )
        >
      >()
      .asFunction<
        void Function(
          ffi.Pointer<objc.ObjCBlock>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCObject>,
        )
      >()(pointer, arg0?.pointer ?? ffi.nullptr, arg1?.pointer ?? ffi.nullptr);
}

abstract class NSURLSessionWebSocketCloseCode {
  static const int NSURLSessionWebSocketCloseCodeInvalid = 0;
  static const int NSURLSessionWebSocketCloseCodeNormalClosure = 1000;
  static const int NSURLSessionWebSocketCloseCodeGoingAway = 1001;
  static const int NSURLSessionWebSocketCloseCodeProtocolError = 1002;
  static const int NSURLSessionWebSocketCloseCodeUnsupportedData = 1003;
  static const int NSURLSessionWebSocketCloseCodeNoStatusReceived = 1005;
  static const int NSURLSessionWebSocketCloseCodeAbnormalClosure = 1006;
  static const int NSURLSessionWebSocketCloseCodeInvalidFramePayloadData = 1007;
  static const int NSURLSessionWebSocketCloseCodePolicyViolation = 1008;
  static const int NSURLSessionWebSocketCloseCodeMessageTooBig = 1009;
  static const int NSURLSessionWebSocketCloseCodeMandatoryExtensionMissing =
      1010;
  static const int NSURLSessionWebSocketCloseCodeInternalServerError = 1011;
  static const int NSURLSessionWebSocketCloseCodeTLSHandshakeFailure = 1015;
}

void _ObjCBlock_ffiVoid_NSData_NSURLResponse_NSError_fnPtrTrampoline(
  ffi.Pointer<objc.ObjCBlock> block,
  ffi.Pointer<objc.ObjCObject> arg0,
  ffi.Pointer<objc.ObjCObject> arg1,
  ffi.Pointer<objc.ObjCObject> arg2,
) => block.ref.target
    .cast<
      ffi.NativeFunction<
        ffi.Void Function(
          ffi.Pointer<objc.ObjCObject> arg0,
          ffi.Pointer<objc.ObjCObject> arg1,
          ffi.Pointer<objc.ObjCObject> arg2,
        )
      >
    >()
    .asFunction<
      void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >()(arg0, arg1, arg2);
final _ObjCBlock_ffiVoid_NSData_NSURLResponse_NSError_closureRegistry =
    <
      int,
      void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >{};
int _ObjCBlock_ffiVoid_NSData_NSURLResponse_NSError_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void>
_ObjCBlock_ffiVoid_NSData_NSURLResponse_NSError_registerClosure(
  void Function(
    ffi.Pointer<objc.ObjCObject>,
    ffi.Pointer<objc.ObjCObject>,
    ffi.Pointer<objc.ObjCObject>,
  ) fn,
) {
  final id =
      ++_ObjCBlock_ffiVoid_NSData_NSURLResponse_NSError_closureRegistryIndex;
  _ObjCBlock_ffiVoid_NSData_NSURLResponse_NSError_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

void _ObjCBlock_ffiVoid_NSData_NSURLResponse_NSError_closureTrampoline(
  ffi.Pointer<objc.ObjCBlock> block,
  ffi.Pointer<objc.ObjCObject> arg0,
  ffi.Pointer<objc.ObjCObject> arg1,
  ffi.Pointer<objc.ObjCObject> arg2,
) => _ObjCBlock_ffiVoid_NSData_NSURLResponse_NSError_closureRegistry[block
    .ref
    .target
    .address]!(arg0, arg1, arg2);

class ObjCBlock_ffiVoid_NSData_NSURLResponse_NSError
    extends objc.ObjCBlockBase {
  ObjCBlock_ffiVoid_NSData_NSURLResponse_NSError._(
    ffi.Pointer<objc.ObjCBlock> pointer,
    this._lib, {
    bool retain = false,
    bool release = true,
  }) : super(pointer, retain: retain, release: release);

  AVFAudio _lib;

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_ffiVoid_NSData_NSURLResponse_NSError castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCBlock> pointer, {
    bool retain = false,
    bool release = false,
  }) {
    return ObjCBlock_ffiVoid_NSData_NSURLResponse_NSError._(
      pointer,
      lib,
      retain: retain,
      release: release,
    );
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSData_NSURLResponse_NSError.fromFunctionPointer(
    AVFAudio lib,
    ffi.Pointer<
      ffi.NativeFunction<
        ffi.Void Function(
          ffi.Pointer<objc.ObjCObject> arg0,
          ffi.Pointer<objc.ObjCObject> arg1,
          ffi.Pointer<objc.ObjCObject> arg2,
        )
      >
    > ptr,
  ) : this._(objc.newBlock(
        _cFuncTrampoline ??=
            ffi.Pointer.fromFunction<
              ffi.Void Function(
                ffi.Pointer<objc.ObjCBlock>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
              )
            >(
              _ObjCBlock_ffiVoid_NSData_NSURLResponse_NSError_fnPtrTrampoline,
            ).cast(),
        ptr.cast(),
      ), lib);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSData_NSURLResponse_NSError.fromFunction(
    AVFAudio lib,
    void Function(NSData?, NSURLResponse?, NSError?) fn,
  ) : this._(objc.newBlock(
        _dartFuncTrampoline ??=
            ffi.Pointer.fromFunction<
              ffi.Void Function(
                ffi.Pointer<objc.ObjCBlock>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
              )
            >(
              _ObjCBlock_ffiVoid_NSData_NSURLResponse_NSError_closureTrampoline,
            ).cast(),
        _ObjCBlock_ffiVoid_NSData_NSURLResponse_NSError_registerClosure((
          ffi.Pointer<objc.ObjCObject> arg0,
          ffi.Pointer<objc.ObjCObject> arg1,
          ffi.Pointer<objc.ObjCObject> arg2,
        ) => fn(
          arg0.address == 0
              ? null
              : NSData._(arg0, lib, retain: true, release: true),
          arg1.address == 0
              ? null
              : NSURLResponse._(arg1, lib, retain: true, release: true),
          arg2.address == 0
              ? null
              : NSError._(arg2, lib, retain: true, release: true),
        )),
      ), lib);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_NSData_NSURLResponse_NSError.listener(
    AVFAudio lib,
    void Function(NSData?, NSURLResponse?, NSError?) fn,
  ) : this._(objc.newBlock(
        (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
              ffi.Void Function(
                ffi.Pointer<objc.ObjCBlock>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
              )
            >.listener(
              _ObjCBlock_ffiVoid_NSData_NSURLResponse_NSError_closureTrampoline,
            )..keepIsolateAlive = false)
            .nativeFunction
            .cast(),
        _ObjCBlock_ffiVoid_NSData_NSURLResponse_NSError_registerClosure((
          ffi.Pointer<objc.ObjCObject> arg0,
          ffi.Pointer<objc.ObjCObject> arg1,
          ffi.Pointer<objc.ObjCObject> arg2,
        ) => fn(
          arg0.address == 0
              ? null
              : NSData._(arg0, lib, retain: true, release: true),
          arg1.address == 0
              ? null
              : NSURLResponse._(arg1, lib, retain: true, release: true),
          arg2.address == 0
              ? null
              : NSError._(arg2, lib, retain: true, release: true),
        )),
      ), lib);
  static ffi.NativeCallable<
    ffi.Void Function(
      ffi.Pointer<objc.ObjCBlock>,
      ffi.Pointer<objc.ObjCObject>,
      ffi.Pointer<objc.ObjCObject>,
      ffi.Pointer<objc.ObjCObject>,
    )
  >? _dartFuncListenerTrampoline;

  void call(NSData? arg0, NSURLResponse? arg1, NSError? arg2) => pointer
      .ref
      .invoke
      .cast<
        ffi.NativeFunction<
          ffi.Void Function(
            ffi.Pointer<objc.ObjCBlock> block,
            ffi.Pointer<objc.ObjCObject> arg0,
            ffi.Pointer<objc.ObjCObject> arg1,
            ffi.Pointer<objc.ObjCObject> arg2,
          )
        >
      >()
      .asFunction<
        void Function(
          ffi.Pointer<objc.ObjCBlock>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCObject>,
        )
      >()(
    pointer,
    arg0?.pointer ?? ffi.nullptr,
    arg1?.pointer ?? ffi.nullptr,
    arg2?.pointer ?? ffi.nullptr,
  );
}

void _ObjCBlock_ffiVoid_NSURL_NSURLResponse_NSError_fnPtrTrampoline(
  ffi.Pointer<objc.ObjCBlock> block,
  ffi.Pointer<objc.ObjCObject> arg0,
  ffi.Pointer<objc.ObjCObject> arg1,
  ffi.Pointer<objc.ObjCObject> arg2,
) => block.ref.target
    .cast<
      ffi.NativeFunction<
        ffi.Void Function(
          ffi.Pointer<objc.ObjCObject> arg0,
          ffi.Pointer<objc.ObjCObject> arg1,
          ffi.Pointer<objc.ObjCObject> arg2,
        )
      >
    >()
    .asFunction<
      void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >()(arg0, arg1, arg2);
final _ObjCBlock_ffiVoid_NSURL_NSURLResponse_NSError_closureRegistry =
    <
      int,
      void Function(
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>,
      )
    >{};
int _ObjCBlock_ffiVoid_NSURL_NSURLResponse_NSError_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void>
_ObjCBlock_ffiVoid_NSURL_NSURLResponse_NSError_registerClosure(
  void Function(
    ffi.Pointer<objc.ObjCObject>,
    ffi.Pointer<objc.ObjCObject>,
    ffi.Pointer<objc.ObjCObject>,
  ) fn,
) {
  final id =
      ++_ObjCBlock_ffiVoid_NSURL_NSURLResponse_NSError_closureRegistryIndex;
  _ObjCBlock_ffiVoid_NSURL_NSURLResponse_NSError_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

void _ObjCBlock_ffiVoid_NSURL_NSURLResponse_NSError_closureTrampoline(
  ffi.Pointer<objc.ObjCBlock> block,
  ffi.Pointer<objc.ObjCObject> arg0,
  ffi.Pointer<objc.ObjCObject> arg1,
  ffi.Pointer<objc.ObjCObject> arg2,
) => _ObjCBlock_ffiVoid_NSURL_NSURLResponse_NSError_closureRegistry[block
    .ref
    .target
    .address]!(arg0, arg1, arg2);

class ObjCBlock_ffiVoid_NSURL_NSURLResponse_NSError extends objc.ObjCBlockBase {
  ObjCBlock_ffiVoid_NSURL_NSURLResponse_NSError._(
    ffi.Pointer<objc.ObjCBlock> pointer,
    this._lib, {
    bool retain = false,
    bool release = true,
  }) : super(pointer, retain: retain, release: release);

  AVFAudio _lib;

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_ffiVoid_NSURL_NSURLResponse_NSError castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCBlock> pointer, {
    bool retain = false,
    bool release = false,
  }) {
    return ObjCBlock_ffiVoid_NSURL_NSURLResponse_NSError._(
      pointer,
      lib,
      retain: retain,
      release: release,
    );
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSURL_NSURLResponse_NSError.fromFunctionPointer(
    AVFAudio lib,
    ffi.Pointer<
      ffi.NativeFunction<
        ffi.Void Function(
          ffi.Pointer<objc.ObjCObject> arg0,
          ffi.Pointer<objc.ObjCObject> arg1,
          ffi.Pointer<objc.ObjCObject> arg2,
        )
      >
    > ptr,
  ) : this._(objc.newBlock(
        _cFuncTrampoline ??=
            ffi.Pointer.fromFunction<
              ffi.Void Function(
                ffi.Pointer<objc.ObjCBlock>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
              )
            >(
              _ObjCBlock_ffiVoid_NSURL_NSURLResponse_NSError_fnPtrTrampoline,
            ).cast(),
        ptr.cast(),
      ), lib);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSURL_NSURLResponse_NSError.fromFunction(
    AVFAudio lib,
    void Function(NSURL?, NSURLResponse?, NSError?) fn,
  ) : this._(objc.newBlock(
        _dartFuncTrampoline ??=
            ffi.Pointer.fromFunction<
              ffi.Void Function(
                ffi.Pointer<objc.ObjCBlock>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
              )
            >(
              _ObjCBlock_ffiVoid_NSURL_NSURLResponse_NSError_closureTrampoline,
            ).cast(),
        _ObjCBlock_ffiVoid_NSURL_NSURLResponse_NSError_registerClosure((
          ffi.Pointer<objc.ObjCObject> arg0,
          ffi.Pointer<objc.ObjCObject> arg1,
          ffi.Pointer<objc.ObjCObject> arg2,
        ) => fn(
          arg0.address == 0
              ? null
              : NSURL._(arg0, lib, retain: true, release: true),
          arg1.address == 0
              ? null
              : NSURLResponse._(arg1, lib, retain: true, release: true),
          arg2.address == 0
              ? null
              : NSError._(arg2, lib, retain: true, release: true),
        )),
      ), lib);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_NSURL_NSURLResponse_NSError.listener(
    AVFAudio lib,
    void Function(NSURL?, NSURLResponse?, NSError?) fn,
  ) : this._(objc.newBlock(
        (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
              ffi.Void Function(
                ffi.Pointer<objc.ObjCBlock>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
              )
            >.listener(
              _ObjCBlock_ffiVoid_NSURL_NSURLResponse_NSError_closureTrampoline,
            )..keepIsolateAlive = false)
            .nativeFunction
            .cast(),
        _ObjCBlock_ffiVoid_NSURL_NSURLResponse_NSError_registerClosure((
          ffi.Pointer<objc.ObjCObject> arg0,
          ffi.Pointer<objc.ObjCObject> arg1,
          ffi.Pointer<objc.ObjCObject> arg2,
        ) => fn(
          arg0.address == 0
              ? null
              : NSURL._(arg0, lib, retain: true, release: true),
          arg1.address == 0
              ? null
              : NSURLResponse._(arg1, lib, retain: true, release: true),
          arg2.address == 0
              ? null
              : NSError._(arg2, lib, retain: true, release: true),
        )),
      ), lib);
  static ffi.NativeCallable<
    ffi.Void Function(
      ffi.Pointer<objc.ObjCBlock>,
      ffi.Pointer<objc.ObjCObject>,
      ffi.Pointer<objc.ObjCObject>,
      ffi.Pointer<objc.ObjCObject>,
    )
  >? _dartFuncListenerTrampoline;

  void call(NSURL? arg0, NSURLResponse? arg1, NSError? arg2) => pointer
      .ref
      .invoke
      .cast<
        ffi.NativeFunction<
          ffi.Void Function(
            ffi.Pointer<objc.ObjCBlock> block,
            ffi.Pointer<objc.ObjCObject> arg0,
            ffi.Pointer<objc.ObjCObject> arg1,
            ffi.Pointer<objc.ObjCObject> arg2,
          )
        >
      >()
      .asFunction<
        void Function(
          ffi.Pointer<objc.ObjCBlock>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCObject>,
        )
      >()(
    pointer,
    arg0?.pointer ?? ffi.nullptr,
    arg1?.pointer ?? ffi.nullptr,
    arg2?.pointer ?? ffi.nullptr,
  );
}

class NSProtocolChecker extends NSProxy {
  NSProtocolChecker._(
    ffi.Pointer<objc.ObjCObject> pointer,
    AVFAudio lib, {
    bool retain = false,
    bool release = false,
  }) : super._(pointer, lib, retain: retain, release: release);

  /// Returns a [NSProtocolChecker] that points to the same underlying object as [other].
  static NSProtocolChecker castFrom<T extends objc.ObjCObjectBase>(
    AVFAudio lib,
    T other,
  ) {
    return NSProtocolChecker._(other.pointer, lib, retain: true, release: true);
  }

  /// Returns a [NSProtocolChecker] that wraps the given raw object pointer.
  static NSProtocolChecker castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCObject> other, {
    bool retain = false,
    bool release = false,
  }) {
    return NSProtocolChecker._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSProtocolChecker].
  static bool isInstance(AVFAudio lib, objc.ObjCObjectBase obj) {
    return lib._objc_msgSend_0(
      obj.pointer,
      lib._sel_isKindOfClass_1,
      lib._class_NSProtocolChecker1,
    );
  }

  Protocol get protocol {
    final _ret = _lib._objc_msgSend_1098(this.pointer, _lib._sel_protocol1);
    return Protocol._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get target {
    final _ret = _lib._objc_msgSend_1099(this.pointer, _lib._sel_target1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSProtocolChecker protocolCheckerWithTarget_protocol_(
    AVFAudio _lib,
    NSObject anObject,
    Protocol aProtocol,
  ) {
    final _ret = _lib._objc_msgSend_1100(
      _lib._class_NSProtocolChecker1,
      _lib._sel_protocolCheckerWithTarget_protocol_1,
      anObject.pointer,
      aProtocol.pointer,
    );
    return NSProtocolChecker._(_ret, _lib, retain: true, release: true);
  }

  NSProtocolChecker initWithTarget_protocol_(
    NSObject anObject,
    Protocol aProtocol,
  ) {
    final _ret = _lib._objc_msgSend_1100(
      this.pointer,
      _lib._sel_initWithTarget_protocol_1,
      anObject.pointer,
      aProtocol.pointer,
    );
    return NSProtocolChecker._(_ret, _lib, retain: true, release: true);
  }

  static NSObject alloc(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSProtocolChecker1,
      _lib._sel_alloc1,
    );
    return NSObject._(_ret, _lib, retain: false, release: true);
  }

  static bool respondsToSelector_(
    AVFAudio _lib,
    ffi.Pointer<objc.ObjCSelector> aSelector,
  ) {
    return _lib._objc_msgSend_4(
      _lib._class_NSProtocolChecker1,
      _lib._sel_respondsToSelector_1,
      aSelector,
    );
  }
}

class NSTask extends NSObject {
  NSTask._(
    ffi.Pointer<objc.ObjCObject> pointer,
    AVFAudio lib, {
    bool retain = false,
    bool release = false,
  }) : super._(pointer, lib, retain: retain, release: release);

  /// Returns a [NSTask] that points to the same underlying object as [other].
  static NSTask castFrom<T extends objc.ObjCObjectBase>(AVFAudio lib, T other) {
    return NSTask._(other.pointer, lib, retain: true, release: true);
  }

  /// Returns a [NSTask] that wraps the given raw object pointer.
  static NSTask castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCObject> other, {
    bool retain = false,
    bool release = false,
  }) {
    return NSTask._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSTask].
  static bool isInstance(AVFAudio lib, objc.ObjCObjectBase obj) {
    return lib._objc_msgSend_0(
      obj.pointer,
      lib._sel_isKindOfClass_1,
      lib._class_NSTask1,
    );
  }

  @override
  NSTask init() {
    final _ret = _lib._objc_msgSend_2(this.pointer, _lib._sel_init1);
    return NSTask._(_ret, _lib, retain: true, release: true);
  }

  NSURL? get executableURL {
    final _ret = _lib._objc_msgSend_45(this.pointer, _lib._sel_executableURL1);
    return _ret.address == 0
        ? null
        : NSURL._(_ret, _lib, retain: true, release: true);
  }

  set executableURL(NSURL? value) {
    return _lib._objc_msgSend_671(
      this.pointer,
      _lib._sel_setExecutableURL_1,
      value?.pointer ?? ffi.nullptr,
    );
  }

  NSArray? get arguments {
    final _ret = _lib._objc_msgSend_84(this.pointer, _lib._sel_arguments1);
    return _ret.address == 0
        ? null
        : NSArray._(_ret, _lib, retain: true, release: true);
  }

  set arguments(NSArray? value) {
    return _lib._objc_msgSend_1053(
      this.pointer,
      _lib._sel_setArguments_1,
      value?.pointer ?? ffi.nullptr,
    );
  }

  NSDictionary? get environment {
    final _ret = _lib._objc_msgSend_390(this.pointer, _lib._sel_environment1);
    return _ret.address == 0
        ? null
        : NSDictionary._(_ret, _lib, retain: true, release: true);
  }

  set environment(NSDictionary? value) {
    return _lib._objc_msgSend_634(
      this.pointer,
      _lib._sel_setEnvironment_1,
      value?.pointer ?? ffi.nullptr,
    );
  }

  NSURL? get currentDirectoryURL {
    final _ret = _lib._objc_msgSend_45(
      this.pointer,
      _lib._sel_currentDirectoryURL1,
    );
    return _ret.address == 0
        ? null
        : NSURL._(_ret, _lib, retain: true, release: true);
  }

  set currentDirectoryURL(NSURL? value) {
    return _lib._objc_msgSend_671(
      this.pointer,
      _lib._sel_setCurrentDirectoryURL_1,
      value?.pointer ?? ffi.nullptr,
    );
  }

  NSData? get launchRequirementData {
    final _ret = _lib._objc_msgSend_286(
      this.pointer,
      _lib._sel_launchRequirementData1,
    );
    return _ret.address == 0
        ? null
        : NSData._(_ret, _lib, retain: true, release: true);
  }

  set launchRequirementData(NSData? value) {
    return _lib._objc_msgSend_1021(
      this.pointer,
      _lib._sel_setLaunchRequirementData_1,
      value?.pointer ?? ffi.nullptr,
    );
  }

  NSObject? get standardInput {
    final _ret = _lib._objc_msgSend_17(this.pointer, _lib._sel_standardInput1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  set standardInput(NSObject? value) {
    return _lib._objc_msgSend_416(
      this.pointer,
      _lib._sel_setStandardInput_1,
      value?.pointer ?? ffi.nullptr,
    );
  }

  NSObject? get standardOutput {
    final _ret = _lib._objc_msgSend_17(this.pointer, _lib._sel_standardOutput1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  set standardOutput(NSObject? value) {
    return _lib._objc_msgSend_416(
      this.pointer,
      _lib._sel_setStandardOutput_1,
      value?.pointer ?? ffi.nullptr,
    );
  }

  NSObject? get standardError {
    final _ret = _lib._objc_msgSend_17(this.pointer, _lib._sel_standardError1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  set standardError(NSObject? value) {
    return _lib._objc_msgSend_416(
      this.pointer,
      _lib._sel_setStandardError_1,
      value?.pointer ?? ffi.nullptr,
    );
  }

  bool launchAndReturnError_(ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    return _lib._objc_msgSend_255(
      this.pointer,
      _lib._sel_launchAndReturnError_1,
      error,
    );
  }

  void interrupt() {
    _lib._objc_msgSend_1(this.pointer, _lib._sel_interrupt1);
  }

  void terminate() {
    _lib._objc_msgSend_1(this.pointer, _lib._sel_terminate1);
  }

  bool suspend() {
    return _lib._objc_msgSend_12(this.pointer, _lib._sel_suspend1);
  }

  bool resume() {
    return _lib._objc_msgSend_12(this.pointer, _lib._sel_resume1);
  }

  int get processIdentifier {
    return _lib._objc_msgSend_237(this.pointer, _lib._sel_processIdentifier1);
  }

  bool get running {
    return _lib._objc_msgSend_12(this.pointer, _lib._sel_isRunning1);
  }

  int get terminationStatus {
    return _lib._objc_msgSend_237(this.pointer, _lib._sel_terminationStatus1);
  }

  int get terminationReason {
    return _lib._objc_msgSend_1101(this.pointer, _lib._sel_terminationReason1);
  }

  ObjCBlock_ffiVoid_NSTask? get terminationHandler {
    final _ret = _lib._objc_msgSend_1102(
      this.pointer,
      _lib._sel_terminationHandler1,
    );
    return _ret.address == 0
        ? null
        : ObjCBlock_ffiVoid_NSTask._(_ret, _lib, retain: true, release: true);
  }

  set terminationHandler(ObjCBlock_ffiVoid_NSTask? value) {
    return _lib._objc_msgSend_1103(
      this.pointer,
      _lib._sel_setTerminationHandler_1,
      value?.pointer ?? ffi.nullptr,
    );
  }

  int get qualityOfService {
    return _lib._objc_msgSend_543(this.pointer, _lib._sel_qualityOfService1);
  }

  set qualityOfService(int value) {
    return _lib._objc_msgSend_544(
      this.pointer,
      _lib._sel_setQualityOfService_1,
      value,
    );
  }

  static NSTask?
  launchedTaskWithExecutableURL_arguments_error_terminationHandler_(
    AVFAudio _lib,
    NSURL url,
    NSArray arguments,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
    ObjCBlock_ffiVoid_NSTask? terminationHandler,
  ) {
    final _ret = _lib._objc_msgSend_1104(
      _lib._class_NSTask1,
      _lib._sel_launchedTaskWithExecutableURL_arguments_error_terminationHandler_1,
      url.pointer,
      arguments.pointer,
      error,
      terminationHandler?.pointer ?? ffi.nullptr,
    );
    return _ret.address == 0
        ? null
        : NSTask._(_ret, _lib, retain: true, release: true);
  }

  void waitUntilExit() {
    _lib._objc_msgSend_1(this.pointer, _lib._sel_waitUntilExit1);
  }

  NSString? get launchPath {
    final _ret = _lib._objc_msgSend_44(this.pointer, _lib._sel_launchPath1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  set launchPath(NSString? value) {
    return _lib._objc_msgSend_545(
      this.pointer,
      _lib._sel_setLaunchPath_1,
      value?.pointer ?? ffi.nullptr,
    );
  }

  NSString get currentDirectoryPath {
    final _ret = _lib._objc_msgSend_21(
      this.pointer,
      _lib._sel_currentDirectoryPath1,
    );
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  set currentDirectoryPath(NSString value) {
    return _lib._objc_msgSend_646(
      this.pointer,
      _lib._sel_setCurrentDirectoryPath_1,
      value.pointer,
    );
  }

  void launch() {
    _lib._objc_msgSend_1(this.pointer, _lib._sel_launch1);
  }

  static NSTask launchedTaskWithLaunchPath_arguments_(
    AVFAudio _lib,
    NSString path,
    NSArray arguments,
  ) {
    final _ret = _lib._objc_msgSend_1105(
      _lib._class_NSTask1,
      _lib._sel_launchedTaskWithLaunchPath_arguments_1,
      path.pointer,
      arguments.pointer,
    );
    return NSTask._(_ret, _lib, retain: true, release: true);
  }

  static NSTask new1(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSTask1, _lib._sel_new1);
    return NSTask._(_ret, _lib, retain: false, release: true);
  }

  static NSTask allocWithZone_(AVFAudio _lib, ffi.Pointer<_NSZone> zone) {
    final _ret = _lib._objc_msgSend_3(
      _lib._class_NSTask1,
      _lib._sel_allocWithZone_1,
      zone,
    );
    return NSTask._(_ret, _lib, retain: false, release: true);
  }

  static NSTask alloc(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSTask1, _lib._sel_alloc1);
    return NSTask._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
    AVFAudio _lib,
    NSObject aTarget,
    ffi.Pointer<objc.ObjCSelector> aSelector,
    NSObject? anArgument,
  ) {
    _lib._objc_msgSend_14(
      _lib._class_NSTask1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
      aTarget.pointer,
      aSelector,
      anArgument?.pointer ?? ffi.nullptr,
    );
  }

  static void cancelPreviousPerformRequestsWithTarget_(
    AVFAudio _lib,
    NSObject aTarget,
  ) {
    _lib._objc_msgSend_15(
      _lib._class_NSTask1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_1,
      aTarget.pointer,
    );
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSTask1,
      _lib._sel_accessInstanceVariablesDirectly1,
    );
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSTask1,
      _lib._sel_useStoredAccessor1,
    );
  }

  static NSSet keyPathsForValuesAffectingValueForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    final _ret = _lib._objc_msgSend_63(
      _lib._class_NSTask1,
      _lib._sel_keyPathsForValuesAffectingValueForKey_1,
      key.pointer,
    );
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    return _lib._objc_msgSend_64(
      _lib._class_NSTask1,
      _lib._sel_automaticallyNotifiesObserversForKey_1,
      key.pointer,
    );
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
    AVFAudio _lib,
    NSArray keys,
    NSString dependentKey,
  ) {
    _lib._objc_msgSend_88(
      _lib._class_NSTask1,
      _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
      keys.pointer,
      dependentKey.pointer,
    );
  }

  static NSArray classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_85(
      _lib._class_NSTask1,
      _lib._sel_classFallbacksForKeyedArchiver1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSTask1,
      _lib._sel_classForKeyedUnarchiver1,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

abstract class NSTaskTerminationReason {
  static const int NSTaskTerminationReasonExit = 1;
  static const int NSTaskTerminationReasonUncaughtSignal = 2;
}

void _ObjCBlock_ffiVoid_NSTask_fnPtrTrampoline(
  ffi.Pointer<objc.ObjCBlock> block,
  ffi.Pointer<objc.ObjCObject> arg0,
) => block.ref.target
    .cast<
      ffi.NativeFunction<ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0)>
    >()
    .asFunction<void Function(ffi.Pointer<objc.ObjCObject>)>()(arg0);
final _ObjCBlock_ffiVoid_NSTask_closureRegistry =
    <int, void Function(ffi.Pointer<objc.ObjCObject>)>{};
int _ObjCBlock_ffiVoid_NSTask_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void> _ObjCBlock_ffiVoid_NSTask_registerClosure(
  void Function(ffi.Pointer<objc.ObjCObject>) fn,
) {
  final id = ++_ObjCBlock_ffiVoid_NSTask_closureRegistryIndex;
  _ObjCBlock_ffiVoid_NSTask_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

void _ObjCBlock_ffiVoid_NSTask_closureTrampoline(
  ffi.Pointer<objc.ObjCBlock> block,
  ffi.Pointer<objc.ObjCObject> arg0,
) => _ObjCBlock_ffiVoid_NSTask_closureRegistry[block.ref.target.address]!(arg0);

class ObjCBlock_ffiVoid_NSTask extends objc.ObjCBlockBase {
  ObjCBlock_ffiVoid_NSTask._(
    ffi.Pointer<objc.ObjCBlock> pointer,
    this._lib, {
    bool retain = false,
    bool release = true,
  }) : super(pointer, retain: retain, release: release);

  AVFAudio _lib;

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_ffiVoid_NSTask castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCBlock> pointer, {
    bool retain = false,
    bool release = false,
  }) {
    return ObjCBlock_ffiVoid_NSTask._(
      pointer,
      lib,
      retain: retain,
      release: release,
    );
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSTask.fromFunctionPointer(
    AVFAudio lib,
    ffi.Pointer<
      ffi.NativeFunction<ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0)>
    > ptr,
  ) : this._(objc.newBlock(
        _cFuncTrampoline ??=
            ffi.Pointer.fromFunction<
              ffi.Void Function(
                ffi.Pointer<objc.ObjCBlock>,
                ffi.Pointer<objc.ObjCObject>,
              )
            >(_ObjCBlock_ffiVoid_NSTask_fnPtrTrampoline).cast(),
        ptr.cast(),
      ), lib);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSTask.fromFunction(AVFAudio lib, void Function(NSTask) fn)
    : this._(objc.newBlock(
        _dartFuncTrampoline ??=
            ffi.Pointer.fromFunction<
              ffi.Void Function(
                ffi.Pointer<objc.ObjCBlock>,
                ffi.Pointer<objc.ObjCObject>,
              )
            >(_ObjCBlock_ffiVoid_NSTask_closureTrampoline).cast(),
        _ObjCBlock_ffiVoid_NSTask_registerClosure((
          ffi.Pointer<objc.ObjCObject> arg0,
        ) => fn(NSTask._(arg0, lib, retain: true, release: true))),
      ), lib);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_NSTask.listener(AVFAudio lib, void Function(NSTask) fn)
    : this._(objc.newBlock(
        (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
              ffi.Void Function(
                ffi.Pointer<objc.ObjCBlock>,
                ffi.Pointer<objc.ObjCObject>,
              )
            >.listener(
              _ObjCBlock_ffiVoid_NSTask_closureTrampoline,
            )..keepIsolateAlive = false)
            .nativeFunction
            .cast(),
        _ObjCBlock_ffiVoid_NSTask_registerClosure((
          ffi.Pointer<objc.ObjCObject> arg0,
        ) => fn(NSTask._(arg0, lib, retain: true, release: true))),
      ), lib);
  static ffi.NativeCallable<
    ffi.Void Function(ffi.Pointer<objc.ObjCBlock>, ffi.Pointer<objc.ObjCObject>)
  >? _dartFuncListenerTrampoline;

  void call(NSTask arg0) => pointer.ref.invoke
      .cast<
        ffi.NativeFunction<
          ffi.Void Function(
            ffi.Pointer<objc.ObjCBlock> block,
            ffi.Pointer<objc.ObjCObject> arg0,
          )
        >
      >()
      .asFunction<
        void Function(ffi.Pointer<objc.ObjCBlock>, ffi.Pointer<objc.ObjCObject>)
      >()(pointer, arg0.pointer);
}

class NSXMLElement extends NSXMLNode {
  NSXMLElement._(
    ffi.Pointer<objc.ObjCObject> pointer,
    AVFAudio lib, {
    bool retain = false,
    bool release = false,
  }) : super._(pointer, lib, retain: retain, release: release);

  /// Returns a [NSXMLElement] that points to the same underlying object as [other].
  static NSXMLElement castFrom<T extends objc.ObjCObjectBase>(
    AVFAudio lib,
    T other,
  ) {
    return NSXMLElement._(other.pointer, lib, retain: true, release: true);
  }

  /// Returns a [NSXMLElement] that wraps the given raw object pointer.
  static NSXMLElement castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCObject> other, {
    bool retain = false,
    bool release = false,
  }) {
    return NSXMLElement._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSXMLElement].
  static bool isInstance(AVFAudio lib, objc.ObjCObjectBase obj) {
    return lib._objc_msgSend_0(
      obj.pointer,
      lib._sel_isKindOfClass_1,
      lib._class_NSXMLElement1,
    );
  }

  NSXMLElement initWithName_(NSString name) {
    final _ret = _lib._objc_msgSend_31(
      this.pointer,
      _lib._sel_initWithName_1,
      name.pointer,
    );
    return NSXMLElement._(_ret, _lib, retain: true, release: true);
  }

  NSXMLElement initWithName_URI_(NSString name, NSString? URI) {
    final _ret = _lib._objc_msgSend_1142(
      this.pointer,
      _lib._sel_initWithName_URI_1,
      name.pointer,
      URI?.pointer ?? ffi.nullptr,
    );
    return NSXMLElement._(_ret, _lib, retain: true, release: true);
  }

  NSXMLElement initWithName_stringValue_(NSString name, NSString? string) {
    final _ret = _lib._objc_msgSend_1142(
      this.pointer,
      _lib._sel_initWithName_stringValue_1,
      name.pointer,
      string?.pointer ?? ffi.nullptr,
    );
    return NSXMLElement._(_ret, _lib, retain: true, release: true);
  }

  NSXMLElement? initWithXMLString_error_(
    NSString string,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    final _ret = _lib._objc_msgSend_303(
      this.pointer,
      _lib._sel_initWithXMLString_error_1,
      string.pointer,
      error,
    );
    return _ret.address == 0
        ? null
        : NSXMLElement._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSXMLElement initWithKind_options_(int kind, int options) {
    final _ret = _lib._objc_msgSend_1107(
      this.pointer,
      _lib._sel_initWithKind_options_1,
      kind,
      options,
    );
    return NSXMLElement._(_ret, _lib, retain: true, release: true);
  }

  NSArray elementsForName_(NSString name) {
    final _ret = _lib._objc_msgSend_358(
      this.pointer,
      _lib._sel_elementsForName_1,
      name.pointer,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSArray elementsForLocalName_URI_(NSString localName, NSString? URI) {
    final _ret = _lib._objc_msgSend_1143(
      this.pointer,
      _lib._sel_elementsForLocalName_URI_1,
      localName.pointer,
      URI?.pointer ?? ffi.nullptr,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  void addAttribute_(NSXMLNode attribute) {
    _lib._objc_msgSend_1121(
      this.pointer,
      _lib._sel_addAttribute_1,
      attribute.pointer,
    );
  }

  void removeAttributeForName_(NSString name) {
    _lib._objc_msgSend_247(
      this.pointer,
      _lib._sel_removeAttributeForName_1,
      name.pointer,
    );
  }

  NSArray? get attributes {
    final _ret = _lib._objc_msgSend_84(this.pointer, _lib._sel_attributes1);
    return _ret.address == 0
        ? null
        : NSArray._(_ret, _lib, retain: true, release: true);
  }

  set attributes(NSArray? value) {
    return _lib._objc_msgSend_1053(
      this.pointer,
      _lib._sel_setAttributes_1,
      value?.pointer ?? ffi.nullptr,
    );
  }

  void setAttributesWithDictionary_(NSDictionary attributes) {
    _lib._objc_msgSend_509(
      this.pointer,
      _lib._sel_setAttributesWithDictionary_1,
      attributes.pointer,
    );
  }

  NSXMLNode? attributeForName_(NSString name) {
    final _ret = _lib._objc_msgSend_1125(
      this.pointer,
      _lib._sel_attributeForName_1,
      name.pointer,
    );
    return _ret.address == 0
        ? null
        : NSXMLNode._(_ret, _lib, retain: true, release: true);
  }

  NSXMLNode? attributeForLocalName_URI_(NSString localName, NSString? URI) {
    final _ret = _lib._objc_msgSend_1144(
      this.pointer,
      _lib._sel_attributeForLocalName_URI_1,
      localName.pointer,
      URI?.pointer ?? ffi.nullptr,
    );
    return _ret.address == 0
        ? null
        : NSXMLNode._(_ret, _lib, retain: true, release: true);
  }

  void addNamespace_(NSXMLNode aNamespace) {
    _lib._objc_msgSend_1121(
      this.pointer,
      _lib._sel_addNamespace_1,
      aNamespace.pointer,
    );
  }

  void removeNamespaceForPrefix_(NSString name) {
    _lib._objc_msgSend_247(
      this.pointer,
      _lib._sel_removeNamespaceForPrefix_1,
      name.pointer,
    );
  }

  NSArray? get namespaces {
    final _ret = _lib._objc_msgSend_84(this.pointer, _lib._sel_namespaces1);
    return _ret.address == 0
        ? null
        : NSArray._(_ret, _lib, retain: true, release: true);
  }

  set namespaces(NSArray? value) {
    return _lib._objc_msgSend_1053(
      this.pointer,
      _lib._sel_setNamespaces_1,
      value?.pointer ?? ffi.nullptr,
    );
  }

  NSXMLNode? namespaceForPrefix_(NSString name) {
    final _ret = _lib._objc_msgSend_1125(
      this.pointer,
      _lib._sel_namespaceForPrefix_1,
      name.pointer,
    );
    return _ret.address == 0
        ? null
        : NSXMLNode._(_ret, _lib, retain: true, release: true);
  }

  NSXMLNode? resolveNamespaceForName_(NSString name) {
    final _ret = _lib._objc_msgSend_1125(
      this.pointer,
      _lib._sel_resolveNamespaceForName_1,
      name.pointer,
    );
    return _ret.address == 0
        ? null
        : NSXMLNode._(_ret, _lib, retain: true, release: true);
  }

  NSString? resolvePrefixForNamespaceURI_(NSString namespaceURI) {
    final _ret = _lib._objc_msgSend_186(
      this.pointer,
      _lib._sel_resolvePrefixForNamespaceURI_1,
      namespaceURI.pointer,
    );
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  void insertChild_atIndex_(NSXMLNode child, int index) {
    _lib._objc_msgSend_1119(
      this.pointer,
      _lib._sel_insertChild_atIndex_1,
      child.pointer,
      index,
    );
  }

  void insertChildren_atIndex_(NSArray children, int index) {
    _lib._objc_msgSend_1120(
      this.pointer,
      _lib._sel_insertChildren_atIndex_1,
      children.pointer,
      index,
    );
  }

  void removeChildAtIndex_(int index) {
    _lib._objc_msgSend_470(this.pointer, _lib._sel_removeChildAtIndex_1, index);
  }

  void setChildren_(NSArray? children) {
    _lib._objc_msgSend_843(
      this.pointer,
      _lib._sel_setChildren_1,
      children?.pointer ?? ffi.nullptr,
    );
  }

  void addChild_(NSXMLNode child) {
    _lib._objc_msgSend_1121(this.pointer, _lib._sel_addChild_1, child.pointer);
  }

  void replaceChildAtIndex_withNode_(int index, NSXMLNode node) {
    _lib._objc_msgSend_1122(
      this.pointer,
      _lib._sel_replaceChildAtIndex_withNode_1,
      index,
      node.pointer,
    );
  }

  void normalizeAdjacentTextNodesPreservingCDATA_(bool preserve) {
    _lib._objc_msgSend_870(
      this.pointer,
      _lib._sel_normalizeAdjacentTextNodesPreservingCDATA_1,
      preserve,
    );
  }

  void setAttributesAsDictionary_(NSDictionary attributes) {
    _lib._objc_msgSend_509(
      this.pointer,
      _lib._sel_setAttributesAsDictionary_1,
      attributes.pointer,
    );
  }

  @override
  NSXMLElement init() {
    final _ret = _lib._objc_msgSend_2(this.pointer, _lib._sel_init1);
    return NSXMLElement._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSXMLElement initWithKind_(int kind) {
    final _ret = _lib._objc_msgSend_1106(
      this.pointer,
      _lib._sel_initWithKind_1,
      kind,
    );
    return NSXMLElement._(_ret, _lib, retain: true, release: true);
  }

  static NSObject document(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSXMLElement1,
      _lib._sel_document1,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject documentWithRootElement_(
    AVFAudio _lib,
    NSXMLElement element,
  ) {
    final _ret = _lib._objc_msgSend_1108(
      _lib._class_NSXMLElement1,
      _lib._sel_documentWithRootElement_1,
      element.pointer,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject elementWithName_(AVFAudio _lib, NSString name) {
    final _ret = _lib._objc_msgSend_31(
      _lib._class_NSXMLElement1,
      _lib._sel_elementWithName_1,
      name.pointer,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject elementWithName_URI_(
    AVFAudio _lib,
    NSString name,
    NSString URI,
  ) {
    final _ret = _lib._objc_msgSend_1109(
      _lib._class_NSXMLElement1,
      _lib._sel_elementWithName_URI_1,
      name.pointer,
      URI.pointer,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject elementWithName_stringValue_(
    AVFAudio _lib,
    NSString name,
    NSString string,
  ) {
    final _ret = _lib._objc_msgSend_1109(
      _lib._class_NSXMLElement1,
      _lib._sel_elementWithName_stringValue_1,
      name.pointer,
      string.pointer,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject elementWithName_children_attributes_(
    AVFAudio _lib,
    NSString name,
    NSArray? children,
    NSArray? attributes,
  ) {
    final _ret = _lib._objc_msgSend_1110(
      _lib._class_NSXMLElement1,
      _lib._sel_elementWithName_children_attributes_1,
      name.pointer,
      children?.pointer ?? ffi.nullptr,
      attributes?.pointer ?? ffi.nullptr,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject attributeWithName_stringValue_(
    AVFAudio _lib,
    NSString name,
    NSString stringValue,
  ) {
    final _ret = _lib._objc_msgSend_1109(
      _lib._class_NSXMLElement1,
      _lib._sel_attributeWithName_stringValue_1,
      name.pointer,
      stringValue.pointer,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject attributeWithName_URI_stringValue_(
    AVFAudio _lib,
    NSString name,
    NSString URI,
    NSString stringValue,
  ) {
    final _ret = _lib._objc_msgSend_1074(
      _lib._class_NSXMLElement1,
      _lib._sel_attributeWithName_URI_stringValue_1,
      name.pointer,
      URI.pointer,
      stringValue.pointer,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject namespaceWithName_stringValue_(
    AVFAudio _lib,
    NSString name,
    NSString stringValue,
  ) {
    final _ret = _lib._objc_msgSend_1109(
      _lib._class_NSXMLElement1,
      _lib._sel_namespaceWithName_stringValue_1,
      name.pointer,
      stringValue.pointer,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject processingInstructionWithName_stringValue_(
    AVFAudio _lib,
    NSString name,
    NSString stringValue,
  ) {
    final _ret = _lib._objc_msgSend_1109(
      _lib._class_NSXMLElement1,
      _lib._sel_processingInstructionWithName_stringValue_1,
      name.pointer,
      stringValue.pointer,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject commentWithStringValue_(AVFAudio _lib, NSString stringValue) {
    final _ret = _lib._objc_msgSend_31(
      _lib._class_NSXMLElement1,
      _lib._sel_commentWithStringValue_1,
      stringValue.pointer,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject textWithStringValue_(AVFAudio _lib, NSString stringValue) {
    final _ret = _lib._objc_msgSend_31(
      _lib._class_NSXMLElement1,
      _lib._sel_textWithStringValue_1,
      stringValue.pointer,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject? DTDNodeWithXMLString_(AVFAudio _lib, NSString string) {
    final _ret = _lib._objc_msgSend_38(
      _lib._class_NSXMLElement1,
      _lib._sel_DTDNodeWithXMLString_1,
      string.pointer,
    );
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSString localNameForName_(AVFAudio _lib, NSString name) {
    final _ret = _lib._objc_msgSend_69(
      _lib._class_NSXMLElement1,
      _lib._sel_localNameForName_1,
      name.pointer,
    );
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  static NSString? prefixForName_(AVFAudio _lib, NSString name) {
    final _ret = _lib._objc_msgSend_186(
      _lib._class_NSXMLElement1,
      _lib._sel_prefixForName_1,
      name.pointer,
    );
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  static NSXMLNode? predefinedNamespaceForPrefix_(
    AVFAudio _lib,
    NSString name,
  ) {
    final _ret = _lib._objc_msgSend_1125(
      _lib._class_NSXMLElement1,
      _lib._sel_predefinedNamespaceForPrefix_1,
      name.pointer,
    );
    return _ret.address == 0
        ? null
        : NSXMLNode._(_ret, _lib, retain: true, release: true);
  }

  static NSXMLElement new1(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSXMLElement1,
      _lib._sel_new1,
    );
    return NSXMLElement._(_ret, _lib, retain: false, release: true);
  }

  static NSXMLElement allocWithZone_(AVFAudio _lib, ffi.Pointer<_NSZone> zone) {
    final _ret = _lib._objc_msgSend_3(
      _lib._class_NSXMLElement1,
      _lib._sel_allocWithZone_1,
      zone,
    );
    return NSXMLElement._(_ret, _lib, retain: false, release: true);
  }

  static NSXMLElement alloc(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSXMLElement1,
      _lib._sel_alloc1,
    );
    return NSXMLElement._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
    AVFAudio _lib,
    NSObject aTarget,
    ffi.Pointer<objc.ObjCSelector> aSelector,
    NSObject? anArgument,
  ) {
    _lib._objc_msgSend_14(
      _lib._class_NSXMLElement1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
      aTarget.pointer,
      aSelector,
      anArgument?.pointer ?? ffi.nullptr,
    );
  }

  static void cancelPreviousPerformRequestsWithTarget_(
    AVFAudio _lib,
    NSObject aTarget,
  ) {
    _lib._objc_msgSend_15(
      _lib._class_NSXMLElement1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_1,
      aTarget.pointer,
    );
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSXMLElement1,
      _lib._sel_accessInstanceVariablesDirectly1,
    );
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSXMLElement1,
      _lib._sel_useStoredAccessor1,
    );
  }

  static NSSet keyPathsForValuesAffectingValueForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    final _ret = _lib._objc_msgSend_63(
      _lib._class_NSXMLElement1,
      _lib._sel_keyPathsForValuesAffectingValueForKey_1,
      key.pointer,
    );
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    return _lib._objc_msgSend_64(
      _lib._class_NSXMLElement1,
      _lib._sel_automaticallyNotifiesObserversForKey_1,
      key.pointer,
    );
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
    AVFAudio _lib,
    NSArray keys,
    NSString dependentKey,
  ) {
    _lib._objc_msgSend_88(
      _lib._class_NSXMLElement1,
      _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
      keys.pointer,
      dependentKey.pointer,
    );
  }

  static NSArray classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_85(
      _lib._class_NSXMLElement1,
      _lib._sel_classFallbacksForKeyedArchiver1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSXMLElement1,
      _lib._sel_classForKeyedUnarchiver1,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

class NSXMLNode extends NSObject {
  NSXMLNode._(
    ffi.Pointer<objc.ObjCObject> pointer,
    AVFAudio lib, {
    bool retain = false,
    bool release = false,
  }) : super._(pointer, lib, retain: retain, release: release);

  /// Returns a [NSXMLNode] that points to the same underlying object as [other].
  static NSXMLNode castFrom<T extends objc.ObjCObjectBase>(
    AVFAudio lib,
    T other,
  ) {
    return NSXMLNode._(other.pointer, lib, retain: true, release: true);
  }

  /// Returns a [NSXMLNode] that wraps the given raw object pointer.
  static NSXMLNode castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCObject> other, {
    bool retain = false,
    bool release = false,
  }) {
    return NSXMLNode._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSXMLNode].
  static bool isInstance(AVFAudio lib, objc.ObjCObjectBase obj) {
    return lib._objc_msgSend_0(
      obj.pointer,
      lib._sel_isKindOfClass_1,
      lib._class_NSXMLNode1,
    );
  }

  @override
  NSXMLNode init() {
    final _ret = _lib._objc_msgSend_2(this.pointer, _lib._sel_init1);
    return NSXMLNode._(_ret, _lib, retain: true, release: true);
  }

  NSXMLNode initWithKind_(int kind) {
    final _ret = _lib._objc_msgSend_1106(
      this.pointer,
      _lib._sel_initWithKind_1,
      kind,
    );
    return NSXMLNode._(_ret, _lib, retain: true, release: true);
  }

  NSXMLNode initWithKind_options_(int kind, int options) {
    final _ret = _lib._objc_msgSend_1107(
      this.pointer,
      _lib._sel_initWithKind_options_1,
      kind,
      options,
    );
    return NSXMLNode._(_ret, _lib, retain: true, release: true);
  }

  static NSObject document(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSXMLNode1,
      _lib._sel_document1,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject documentWithRootElement_(
    AVFAudio _lib,
    NSXMLElement element,
  ) {
    final _ret = _lib._objc_msgSend_1108(
      _lib._class_NSXMLNode1,
      _lib._sel_documentWithRootElement_1,
      element.pointer,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject elementWithName_(AVFAudio _lib, NSString name) {
    final _ret = _lib._objc_msgSend_31(
      _lib._class_NSXMLNode1,
      _lib._sel_elementWithName_1,
      name.pointer,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject elementWithName_URI_(
    AVFAudio _lib,
    NSString name,
    NSString URI,
  ) {
    final _ret = _lib._objc_msgSend_1109(
      _lib._class_NSXMLNode1,
      _lib._sel_elementWithName_URI_1,
      name.pointer,
      URI.pointer,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject elementWithName_stringValue_(
    AVFAudio _lib,
    NSString name,
    NSString string,
  ) {
    final _ret = _lib._objc_msgSend_1109(
      _lib._class_NSXMLNode1,
      _lib._sel_elementWithName_stringValue_1,
      name.pointer,
      string.pointer,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject elementWithName_children_attributes_(
    AVFAudio _lib,
    NSString name,
    NSArray? children,
    NSArray? attributes,
  ) {
    final _ret = _lib._objc_msgSend_1110(
      _lib._class_NSXMLNode1,
      _lib._sel_elementWithName_children_attributes_1,
      name.pointer,
      children?.pointer ?? ffi.nullptr,
      attributes?.pointer ?? ffi.nullptr,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject attributeWithName_stringValue_(
    AVFAudio _lib,
    NSString name,
    NSString stringValue,
  ) {
    final _ret = _lib._objc_msgSend_1109(
      _lib._class_NSXMLNode1,
      _lib._sel_attributeWithName_stringValue_1,
      name.pointer,
      stringValue.pointer,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject attributeWithName_URI_stringValue_(
    AVFAudio _lib,
    NSString name,
    NSString URI,
    NSString stringValue,
  ) {
    final _ret = _lib._objc_msgSend_1074(
      _lib._class_NSXMLNode1,
      _lib._sel_attributeWithName_URI_stringValue_1,
      name.pointer,
      URI.pointer,
      stringValue.pointer,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject namespaceWithName_stringValue_(
    AVFAudio _lib,
    NSString name,
    NSString stringValue,
  ) {
    final _ret = _lib._objc_msgSend_1109(
      _lib._class_NSXMLNode1,
      _lib._sel_namespaceWithName_stringValue_1,
      name.pointer,
      stringValue.pointer,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject processingInstructionWithName_stringValue_(
    AVFAudio _lib,
    NSString name,
    NSString stringValue,
  ) {
    final _ret = _lib._objc_msgSend_1109(
      _lib._class_NSXMLNode1,
      _lib._sel_processingInstructionWithName_stringValue_1,
      name.pointer,
      stringValue.pointer,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject commentWithStringValue_(AVFAudio _lib, NSString stringValue) {
    final _ret = _lib._objc_msgSend_31(
      _lib._class_NSXMLNode1,
      _lib._sel_commentWithStringValue_1,
      stringValue.pointer,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject textWithStringValue_(AVFAudio _lib, NSString stringValue) {
    final _ret = _lib._objc_msgSend_31(
      _lib._class_NSXMLNode1,
      _lib._sel_textWithStringValue_1,
      stringValue.pointer,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject? DTDNodeWithXMLString_(AVFAudio _lib, NSString string) {
    final _ret = _lib._objc_msgSend_38(
      _lib._class_NSXMLNode1,
      _lib._sel_DTDNodeWithXMLString_1,
      string.pointer,
    );
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  int get kind {
    return _lib._objc_msgSend_1111(this.pointer, _lib._sel_kind1);
  }

  NSString? get name {
    final _ret = _lib._objc_msgSend_44(this.pointer, _lib._sel_name1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  set name(NSString? value) {
    return _lib._objc_msgSend_545(
      this.pointer,
      _lib._sel_setName_1,
      value?.pointer ?? ffi.nullptr,
    );
  }

  NSObject? get objectValue {
    final _ret = _lib._objc_msgSend_17(this.pointer, _lib._sel_objectValue1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  set objectValue(NSObject? value) {
    return _lib._objc_msgSend_416(
      this.pointer,
      _lib._sel_setObjectValue_1,
      value?.pointer ?? ffi.nullptr,
    );
  }

  NSString? get stringValue {
    final _ret = _lib._objc_msgSend_44(this.pointer, _lib._sel_stringValue1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  set stringValue(NSString? value) {
    return _lib._objc_msgSend_545(
      this.pointer,
      _lib._sel_setStringValue_1,
      value?.pointer ?? ffi.nullptr,
    );
  }

  void setStringValue_resolvingEntities_(NSString string, bool resolve) {
    _lib._objc_msgSend_1112(
      this.pointer,
      _lib._sel_setStringValue_resolvingEntities_1,
      string.pointer,
      resolve,
    );
  }

  int get index {
    return _lib._objc_msgSend_10(this.pointer, _lib._sel_index1);
  }

  int get level {
    return _lib._objc_msgSend_10(this.pointer, _lib._sel_level1);
  }

  NSXMLDocument? get rootDocument {
    final _ret = _lib._objc_msgSend_1136(this.pointer, _lib._sel_rootDocument1);
    return _ret.address == 0
        ? null
        : NSXMLDocument._(_ret, _lib, retain: true, release: true);
  }

  NSXMLNode? get parent {
    final _ret = _lib._objc_msgSend_1137(this.pointer, _lib._sel_parent1);
    return _ret.address == 0
        ? null
        : NSXMLNode._(_ret, _lib, retain: true, release: true);
  }

  int get childCount {
    return _lib._objc_msgSend_10(this.pointer, _lib._sel_childCount1);
  }

  NSArray? get children {
    final _ret = _lib._objc_msgSend_84(this.pointer, _lib._sel_children1);
    return _ret.address == 0
        ? null
        : NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSXMLNode? childAtIndex_(int index) {
    final _ret = _lib._objc_msgSend_1138(
      this.pointer,
      _lib._sel_childAtIndex_1,
      index,
    );
    return _ret.address == 0
        ? null
        : NSXMLNode._(_ret, _lib, retain: true, release: true);
  }

  NSXMLNode? get previousSibling {
    final _ret = _lib._objc_msgSend_1137(
      this.pointer,
      _lib._sel_previousSibling1,
    );
    return _ret.address == 0
        ? null
        : NSXMLNode._(_ret, _lib, retain: true, release: true);
  }

  NSXMLNode? get nextSibling {
    final _ret = _lib._objc_msgSend_1137(this.pointer, _lib._sel_nextSibling1);
    return _ret.address == 0
        ? null
        : NSXMLNode._(_ret, _lib, retain: true, release: true);
  }

  NSXMLNode? get previousNode {
    final _ret = _lib._objc_msgSend_1137(this.pointer, _lib._sel_previousNode1);
    return _ret.address == 0
        ? null
        : NSXMLNode._(_ret, _lib, retain: true, release: true);
  }

  NSXMLNode? get nextNode {
    final _ret = _lib._objc_msgSend_1137(this.pointer, _lib._sel_nextNode1);
    return _ret.address == 0
        ? null
        : NSXMLNode._(_ret, _lib, retain: true, release: true);
  }

  void detach() {
    _lib._objc_msgSend_1(this.pointer, _lib._sel_detach1);
  }

  NSString? get XPath {
    final _ret = _lib._objc_msgSend_44(this.pointer, _lib._sel_XPath1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString? get localName {
    final _ret = _lib._objc_msgSend_44(this.pointer, _lib._sel_localName1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString? get prefix {
    final _ret = _lib._objc_msgSend_44(this.pointer, _lib._sel_prefix1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString? get URI {
    final _ret = _lib._objc_msgSend_44(this.pointer, _lib._sel_URI1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  set URI(NSString? value) {
    return _lib._objc_msgSend_545(
      this.pointer,
      _lib._sel_setURI_1,
      value?.pointer ?? ffi.nullptr,
    );
  }

  static NSString localNameForName_(AVFAudio _lib, NSString name) {
    final _ret = _lib._objc_msgSend_69(
      _lib._class_NSXMLNode1,
      _lib._sel_localNameForName_1,
      name.pointer,
    );
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  static NSString? prefixForName_(AVFAudio _lib, NSString name) {
    final _ret = _lib._objc_msgSend_186(
      _lib._class_NSXMLNode1,
      _lib._sel_prefixForName_1,
      name.pointer,
    );
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  static NSXMLNode? predefinedNamespaceForPrefix_(
    AVFAudio _lib,
    NSString name,
  ) {
    final _ret = _lib._objc_msgSend_1125(
      _lib._class_NSXMLNode1,
      _lib._sel_predefinedNamespaceForPrefix_1,
      name.pointer,
    );
    return _ret.address == 0
        ? null
        : NSXMLNode._(_ret, _lib, retain: true, release: true);
  }

  NSString get description {
    final _ret = _lib._objc_msgSend_21(this.pointer, _lib._sel_description1);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString get XMLString {
    final _ret = _lib._objc_msgSend_21(this.pointer, _lib._sel_XMLString1);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString XMLStringWithOptions_(int options) {
    final _ret = _lib._objc_msgSend_1139(
      this.pointer,
      _lib._sel_XMLStringWithOptions_1,
      options,
    );
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString canonicalXMLStringPreservingComments_(bool comments) {
    final _ret = _lib._objc_msgSend_1140(
      this.pointer,
      _lib._sel_canonicalXMLStringPreservingComments_1,
      comments,
    );
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSArray? nodesForXPath_error_(
    NSString xpath,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    final _ret = _lib._objc_msgSend_443(
      this.pointer,
      _lib._sel_nodesForXPath_error_1,
      xpath.pointer,
      error,
    );
    return _ret.address == 0
        ? null
        : NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSArray? objectsForXQuery_constants_error_(
    NSString xquery,
    NSDictionary? constants,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    final _ret = _lib._objc_msgSend_1141(
      this.pointer,
      _lib._sel_objectsForXQuery_constants_error_1,
      xquery.pointer,
      constants?.pointer ?? ffi.nullptr,
      error,
    );
    return _ret.address == 0
        ? null
        : NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSArray? objectsForXQuery_error_(
    NSString xquery,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    final _ret = _lib._objc_msgSend_443(
      this.pointer,
      _lib._sel_objectsForXQuery_error_1,
      xquery.pointer,
      error,
    );
    return _ret.address == 0
        ? null
        : NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSXMLNode new1(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSXMLNode1, _lib._sel_new1);
    return NSXMLNode._(_ret, _lib, retain: false, release: true);
  }

  static NSXMLNode allocWithZone_(AVFAudio _lib, ffi.Pointer<_NSZone> zone) {
    final _ret = _lib._objc_msgSend_3(
      _lib._class_NSXMLNode1,
      _lib._sel_allocWithZone_1,
      zone,
    );
    return NSXMLNode._(_ret, _lib, retain: false, release: true);
  }

  static NSXMLNode alloc(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSXMLNode1, _lib._sel_alloc1);
    return NSXMLNode._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
    AVFAudio _lib,
    NSObject aTarget,
    ffi.Pointer<objc.ObjCSelector> aSelector,
    NSObject? anArgument,
  ) {
    _lib._objc_msgSend_14(
      _lib._class_NSXMLNode1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
      aTarget.pointer,
      aSelector,
      anArgument?.pointer ?? ffi.nullptr,
    );
  }

  static void cancelPreviousPerformRequestsWithTarget_(
    AVFAudio _lib,
    NSObject aTarget,
  ) {
    _lib._objc_msgSend_15(
      _lib._class_NSXMLNode1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_1,
      aTarget.pointer,
    );
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSXMLNode1,
      _lib._sel_accessInstanceVariablesDirectly1,
    );
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSXMLNode1,
      _lib._sel_useStoredAccessor1,
    );
  }

  static NSSet keyPathsForValuesAffectingValueForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    final _ret = _lib._objc_msgSend_63(
      _lib._class_NSXMLNode1,
      _lib._sel_keyPathsForValuesAffectingValueForKey_1,
      key.pointer,
    );
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    return _lib._objc_msgSend_64(
      _lib._class_NSXMLNode1,
      _lib._sel_automaticallyNotifiesObserversForKey_1,
      key.pointer,
    );
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
    AVFAudio _lib,
    NSArray keys,
    NSString dependentKey,
  ) {
    _lib._objc_msgSend_88(
      _lib._class_NSXMLNode1,
      _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
      keys.pointer,
      dependentKey.pointer,
    );
  }

  static NSArray classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_85(
      _lib._class_NSXMLNode1,
      _lib._sel_classFallbacksForKeyedArchiver1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSXMLNode1,
      _lib._sel_classForKeyedUnarchiver1,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

abstract class NSXMLNodeKind {
  static const int NSXMLInvalidKind = 0;
  static const int NSXMLDocumentKind = 1;
  static const int NSXMLElementKind = 2;
  static const int NSXMLAttributeKind = 3;
  static const int NSXMLNamespaceKind = 4;
  static const int NSXMLProcessingInstructionKind = 5;
  static const int NSXMLCommentKind = 6;
  static const int NSXMLTextKind = 7;
  static const int NSXMLDTDKind = 8;
  static const int NSXMLEntityDeclarationKind = 9;
  static const int NSXMLAttributeDeclarationKind = 10;
  static const int NSXMLElementDeclarationKind = 11;
  static const int NSXMLNotationDeclarationKind = 12;
}

abstract class NSXMLNodeOptions {
  static const int NSXMLNodeOptionsNone = 0;
  static const int NSXMLNodeIsCDATA = 1;
  static const int NSXMLNodeExpandEmptyElement = 2;
  static const int NSXMLNodeCompactEmptyElement = 4;
  static const int NSXMLNodeUseSingleQuotes = 8;
  static const int NSXMLNodeUseDoubleQuotes = 16;
  static const int NSXMLNodeNeverEscapeContents = 32;
  static const int NSXMLDocumentTidyHTML = 512;
  static const int NSXMLDocumentTidyXML = 1024;
  static const int NSXMLDocumentValidate = 8192;
  static const int NSXMLNodeLoadExternalEntitiesAlways = 16384;
  static const int NSXMLNodeLoadExternalEntitiesSameOriginOnly = 32768;
  static const int NSXMLNodeLoadExternalEntitiesNever = 524288;
  static const int NSXMLDocumentXInclude = 65536;
  static const int NSXMLNodePrettyPrint = 131072;
  static const int NSXMLDocumentIncludeContentTypeDeclaration = 262144;
  static const int NSXMLNodePreserveNamespaceOrder = 1048576;
  static const int NSXMLNodePreserveAttributeOrder = 2097152;
  static const int NSXMLNodePreserveEntities = 4194304;
  static const int NSXMLNodePreservePrefixes = 8388608;
  static const int NSXMLNodePreserveCDATA = 16777216;
  static const int NSXMLNodePreserveWhitespace = 33554432;
  static const int NSXMLNodePreserveDTD = 67108864;
  static const int NSXMLNodePreserveCharacterReferences = 134217728;
  static const int NSXMLNodePromoteSignificantWhitespace = 268435456;
  static const int NSXMLNodePreserveEmptyElements = 6;
  static const int NSXMLNodePreserveQuotes = 24;
  static const int NSXMLNodePreserveAll = 4293918750;
}

class NSXMLDocument extends NSXMLNode {
  NSXMLDocument._(
    ffi.Pointer<objc.ObjCObject> pointer,
    AVFAudio lib, {
    bool retain = false,
    bool release = false,
  }) : super._(pointer, lib, retain: retain, release: release);

  /// Returns a [NSXMLDocument] that points to the same underlying object as [other].
  static NSXMLDocument castFrom<T extends objc.ObjCObjectBase>(
    AVFAudio lib,
    T other,
  ) {
    return NSXMLDocument._(other.pointer, lib, retain: true, release: true);
  }

  /// Returns a [NSXMLDocument] that wraps the given raw object pointer.
  static NSXMLDocument castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCObject> other, {
    bool retain = false,
    bool release = false,
  }) {
    return NSXMLDocument._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSXMLDocument].
  static bool isInstance(AVFAudio lib, objc.ObjCObjectBase obj) {
    return lib._objc_msgSend_0(
      obj.pointer,
      lib._sel_isKindOfClass_1,
      lib._class_NSXMLDocument1,
    );
  }

  @override
  NSXMLDocument init() {
    final _ret = _lib._objc_msgSend_2(this.pointer, _lib._sel_init1);
    return NSXMLDocument._(_ret, _lib, retain: true, release: true);
  }

  NSXMLDocument? initWithXMLString_options_error_(
    NSString string,
    int mask,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    final _ret = _lib._objc_msgSend_1113(
      this.pointer,
      _lib._sel_initWithXMLString_options_error_1,
      string.pointer,
      mask,
      error,
    );
    return _ret.address == 0
        ? null
        : NSXMLDocument._(_ret, _lib, retain: true, release: true);
  }

  NSXMLDocument? initWithContentsOfURL_options_error_(
    NSURL url,
    int mask,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    final _ret = _lib._objc_msgSend_1114(
      this.pointer,
      _lib._sel_initWithContentsOfURL_options_error_1,
      url.pointer,
      mask,
      error,
    );
    return _ret.address == 0
        ? null
        : NSXMLDocument._(_ret, _lib, retain: true, release: true);
  }

  NSXMLDocument? initWithData_options_error_(
    NSData data,
    int mask,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    final _ret = _lib._objc_msgSend_1115(
      this.pointer,
      _lib._sel_initWithData_options_error_1,
      data.pointer,
      mask,
      error,
    );
    return _ret.address == 0
        ? null
        : NSXMLDocument._(_ret, _lib, retain: true, release: true);
  }

  NSXMLDocument initWithRootElement_(NSXMLElement? element) {
    final _ret = _lib._objc_msgSend_1116(
      this.pointer,
      _lib._sel_initWithRootElement_1,
      element?.pointer ?? ffi.nullptr,
    );
    return NSXMLDocument._(_ret, _lib, retain: true, release: true);
  }

  static NSObject replacementClassForClass_(AVFAudio _lib, NSObject cls) {
    final _ret = _lib._objc_msgSend_124(
      _lib._class_NSXMLDocument1,
      _lib._sel_replacementClassForClass_1,
      cls.pointer,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSString? get characterEncoding {
    final _ret = _lib._objc_msgSend_44(
      this.pointer,
      _lib._sel_characterEncoding1,
    );
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  set characterEncoding(NSString? value) {
    return _lib._objc_msgSend_545(
      this.pointer,
      _lib._sel_setCharacterEncoding_1,
      value?.pointer ?? ffi.nullptr,
    );
  }

  NSString? get version {
    final _ret = _lib._objc_msgSend_44(this.pointer, _lib._sel_version1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  set version(NSString? value) {
    return _lib._objc_msgSend_545(
      this.pointer,
      _lib._sel_setVersion_1,
      value?.pointer ?? ffi.nullptr,
    );
  }

  bool get standalone {
    return _lib._objc_msgSend_12(this.pointer, _lib._sel_isStandalone1);
  }

  set standalone(bool value) {
    return _lib._objc_msgSend_527(
      this.pointer,
      _lib._sel_setStandalone_1,
      value,
    );
  }

  int get documentContentKind {
    return _lib._objc_msgSend_1117(
      this.pointer,
      _lib._sel_documentContentKind1,
    );
  }

  set documentContentKind(int value) {
    return _lib._objc_msgSend_1118(
      this.pointer,
      _lib._sel_setDocumentContentKind_1,
      value,
    );
  }

  NSString? get MIMEType {
    final _ret = _lib._objc_msgSend_44(this.pointer, _lib._sel_MIMEType1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  set MIMEType(NSString? value) {
    return _lib._objc_msgSend_545(
      this.pointer,
      _lib._sel_setMIMEType_1,
      value?.pointer ?? ffi.nullptr,
    );
  }

  NSXMLDTD? get DTD {
    final _ret = _lib._objc_msgSend_1128(this.pointer, _lib._sel_DTD1);
    return _ret.address == 0
        ? null
        : NSXMLDTD._(_ret, _lib, retain: true, release: true);
  }

  set DTD(NSXMLDTD? value) {
    return _lib._objc_msgSend_1129(
      this.pointer,
      _lib._sel_setDTD_1,
      value?.pointer ?? ffi.nullptr,
    );
  }

  void setRootElement_(NSXMLElement root) {
    _lib._objc_msgSend_1130(
      this.pointer,
      _lib._sel_setRootElement_1,
      root.pointer,
    );
  }

  NSXMLElement? rootElement() {
    final _ret = _lib._objc_msgSend_1131(this.pointer, _lib._sel_rootElement1);
    return _ret.address == 0
        ? null
        : NSXMLElement._(_ret, _lib, retain: true, release: true);
  }

  void insertChild_atIndex_(NSXMLNode child, int index) {
    _lib._objc_msgSend_1119(
      this.pointer,
      _lib._sel_insertChild_atIndex_1,
      child.pointer,
      index,
    );
  }

  void insertChildren_atIndex_(NSArray children, int index) {
    _lib._objc_msgSend_1120(
      this.pointer,
      _lib._sel_insertChildren_atIndex_1,
      children.pointer,
      index,
    );
  }

  void removeChildAtIndex_(int index) {
    _lib._objc_msgSend_470(this.pointer, _lib._sel_removeChildAtIndex_1, index);
  }

  void setChildren_(NSArray? children) {
    _lib._objc_msgSend_843(
      this.pointer,
      _lib._sel_setChildren_1,
      children?.pointer ?? ffi.nullptr,
    );
  }

  void addChild_(NSXMLNode child) {
    _lib._objc_msgSend_1121(this.pointer, _lib._sel_addChild_1, child.pointer);
  }

  void replaceChildAtIndex_withNode_(int index, NSXMLNode node) {
    _lib._objc_msgSend_1122(
      this.pointer,
      _lib._sel_replaceChildAtIndex_withNode_1,
      index,
      node.pointer,
    );
  }

  NSData get XMLData {
    final _ret = _lib._objc_msgSend_43(this.pointer, _lib._sel_XMLData1);
    return NSData._(_ret, _lib, retain: true, release: true);
  }

  NSData XMLDataWithOptions_(int options) {
    final _ret = _lib._objc_msgSend_1132(
      this.pointer,
      _lib._sel_XMLDataWithOptions_1,
      options,
    );
    return NSData._(_ret, _lib, retain: true, release: true);
  }

  NSObject? objectByApplyingXSLT_arguments_error_(
    NSData xslt,
    NSDictionary? arguments,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    final _ret = _lib._objc_msgSend_1133(
      this.pointer,
      _lib._sel_objectByApplyingXSLT_arguments_error_1,
      xslt.pointer,
      arguments?.pointer ?? ffi.nullptr,
      error,
    );
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? objectByApplyingXSLTString_arguments_error_(
    NSString xslt,
    NSDictionary? arguments,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    final _ret = _lib._objc_msgSend_1134(
      this.pointer,
      _lib._sel_objectByApplyingXSLTString_arguments_error_1,
      xslt.pointer,
      arguments?.pointer ?? ffi.nullptr,
      error,
    );
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? objectByApplyingXSLTAtURL_arguments_error_(
    NSURL xsltURL,
    NSDictionary? argument,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    final _ret = _lib._objc_msgSend_1135(
      this.pointer,
      _lib._sel_objectByApplyingXSLTAtURL_arguments_error_1,
      xsltURL.pointer,
      argument?.pointer ?? ffi.nullptr,
      error,
    );
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  bool validateAndReturnError_(
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    return _lib._objc_msgSend_255(
      this.pointer,
      _lib._sel_validateAndReturnError_1,
      error,
    );
  }

  @override
  NSXMLDocument initWithKind_(int kind) {
    final _ret = _lib._objc_msgSend_1106(
      this.pointer,
      _lib._sel_initWithKind_1,
      kind,
    );
    return NSXMLDocument._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSXMLDocument initWithKind_options_(int kind, int options) {
    final _ret = _lib._objc_msgSend_1107(
      this.pointer,
      _lib._sel_initWithKind_options_1,
      kind,
      options,
    );
    return NSXMLDocument._(_ret, _lib, retain: true, release: true);
  }

  static NSObject document(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSXMLDocument1,
      _lib._sel_document1,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject documentWithRootElement_(
    AVFAudio _lib,
    NSXMLElement element,
  ) {
    final _ret = _lib._objc_msgSend_1108(
      _lib._class_NSXMLDocument1,
      _lib._sel_documentWithRootElement_1,
      element.pointer,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject elementWithName_(AVFAudio _lib, NSString name) {
    final _ret = _lib._objc_msgSend_31(
      _lib._class_NSXMLDocument1,
      _lib._sel_elementWithName_1,
      name.pointer,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject elementWithName_URI_(
    AVFAudio _lib,
    NSString name,
    NSString URI,
  ) {
    final _ret = _lib._objc_msgSend_1109(
      _lib._class_NSXMLDocument1,
      _lib._sel_elementWithName_URI_1,
      name.pointer,
      URI.pointer,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject elementWithName_stringValue_(
    AVFAudio _lib,
    NSString name,
    NSString string,
  ) {
    final _ret = _lib._objc_msgSend_1109(
      _lib._class_NSXMLDocument1,
      _lib._sel_elementWithName_stringValue_1,
      name.pointer,
      string.pointer,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject elementWithName_children_attributes_(
    AVFAudio _lib,
    NSString name,
    NSArray? children,
    NSArray? attributes,
  ) {
    final _ret = _lib._objc_msgSend_1110(
      _lib._class_NSXMLDocument1,
      _lib._sel_elementWithName_children_attributes_1,
      name.pointer,
      children?.pointer ?? ffi.nullptr,
      attributes?.pointer ?? ffi.nullptr,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject attributeWithName_stringValue_(
    AVFAudio _lib,
    NSString name,
    NSString stringValue,
  ) {
    final _ret = _lib._objc_msgSend_1109(
      _lib._class_NSXMLDocument1,
      _lib._sel_attributeWithName_stringValue_1,
      name.pointer,
      stringValue.pointer,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject attributeWithName_URI_stringValue_(
    AVFAudio _lib,
    NSString name,
    NSString URI,
    NSString stringValue,
  ) {
    final _ret = _lib._objc_msgSend_1074(
      _lib._class_NSXMLDocument1,
      _lib._sel_attributeWithName_URI_stringValue_1,
      name.pointer,
      URI.pointer,
      stringValue.pointer,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject namespaceWithName_stringValue_(
    AVFAudio _lib,
    NSString name,
    NSString stringValue,
  ) {
    final _ret = _lib._objc_msgSend_1109(
      _lib._class_NSXMLDocument1,
      _lib._sel_namespaceWithName_stringValue_1,
      name.pointer,
      stringValue.pointer,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject processingInstructionWithName_stringValue_(
    AVFAudio _lib,
    NSString name,
    NSString stringValue,
  ) {
    final _ret = _lib._objc_msgSend_1109(
      _lib._class_NSXMLDocument1,
      _lib._sel_processingInstructionWithName_stringValue_1,
      name.pointer,
      stringValue.pointer,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject commentWithStringValue_(AVFAudio _lib, NSString stringValue) {
    final _ret = _lib._objc_msgSend_31(
      _lib._class_NSXMLDocument1,
      _lib._sel_commentWithStringValue_1,
      stringValue.pointer,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject textWithStringValue_(AVFAudio _lib, NSString stringValue) {
    final _ret = _lib._objc_msgSend_31(
      _lib._class_NSXMLDocument1,
      _lib._sel_textWithStringValue_1,
      stringValue.pointer,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject? DTDNodeWithXMLString_(AVFAudio _lib, NSString string) {
    final _ret = _lib._objc_msgSend_38(
      _lib._class_NSXMLDocument1,
      _lib._sel_DTDNodeWithXMLString_1,
      string.pointer,
    );
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSString localNameForName_(AVFAudio _lib, NSString name) {
    final _ret = _lib._objc_msgSend_69(
      _lib._class_NSXMLDocument1,
      _lib._sel_localNameForName_1,
      name.pointer,
    );
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  static NSString? prefixForName_(AVFAudio _lib, NSString name) {
    final _ret = _lib._objc_msgSend_186(
      _lib._class_NSXMLDocument1,
      _lib._sel_prefixForName_1,
      name.pointer,
    );
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  static NSXMLNode? predefinedNamespaceForPrefix_(
    AVFAudio _lib,
    NSString name,
  ) {
    final _ret = _lib._objc_msgSend_1125(
      _lib._class_NSXMLDocument1,
      _lib._sel_predefinedNamespaceForPrefix_1,
      name.pointer,
    );
    return _ret.address == 0
        ? null
        : NSXMLNode._(_ret, _lib, retain: true, release: true);
  }

  static NSXMLDocument new1(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSXMLDocument1,
      _lib._sel_new1,
    );
    return NSXMLDocument._(_ret, _lib, retain: false, release: true);
  }

  static NSXMLDocument allocWithZone_(
    AVFAudio _lib,
    ffi.Pointer<_NSZone> zone,
  ) {
    final _ret = _lib._objc_msgSend_3(
      _lib._class_NSXMLDocument1,
      _lib._sel_allocWithZone_1,
      zone,
    );
    return NSXMLDocument._(_ret, _lib, retain: false, release: true);
  }

  static NSXMLDocument alloc(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSXMLDocument1,
      _lib._sel_alloc1,
    );
    return NSXMLDocument._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
    AVFAudio _lib,
    NSObject aTarget,
    ffi.Pointer<objc.ObjCSelector> aSelector,
    NSObject? anArgument,
  ) {
    _lib._objc_msgSend_14(
      _lib._class_NSXMLDocument1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
      aTarget.pointer,
      aSelector,
      anArgument?.pointer ?? ffi.nullptr,
    );
  }

  static void cancelPreviousPerformRequestsWithTarget_(
    AVFAudio _lib,
    NSObject aTarget,
  ) {
    _lib._objc_msgSend_15(
      _lib._class_NSXMLDocument1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_1,
      aTarget.pointer,
    );
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSXMLDocument1,
      _lib._sel_accessInstanceVariablesDirectly1,
    );
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSXMLDocument1,
      _lib._sel_useStoredAccessor1,
    );
  }

  static NSSet keyPathsForValuesAffectingValueForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    final _ret = _lib._objc_msgSend_63(
      _lib._class_NSXMLDocument1,
      _lib._sel_keyPathsForValuesAffectingValueForKey_1,
      key.pointer,
    );
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    return _lib._objc_msgSend_64(
      _lib._class_NSXMLDocument1,
      _lib._sel_automaticallyNotifiesObserversForKey_1,
      key.pointer,
    );
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
    AVFAudio _lib,
    NSArray keys,
    NSString dependentKey,
  ) {
    _lib._objc_msgSend_88(
      _lib._class_NSXMLDocument1,
      _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
      keys.pointer,
      dependentKey.pointer,
    );
  }

  static NSArray classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_85(
      _lib._class_NSXMLDocument1,
      _lib._sel_classFallbacksForKeyedArchiver1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSXMLDocument1,
      _lib._sel_classForKeyedUnarchiver1,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

abstract class NSXMLDocumentContentKind {
  static const int NSXMLDocumentXMLKind = 0;
  static const int NSXMLDocumentXHTMLKind = 1;
  static const int NSXMLDocumentHTMLKind = 2;
  static const int NSXMLDocumentTextKind = 3;
}

class NSXMLDTD extends NSXMLNode {
  NSXMLDTD._(
    ffi.Pointer<objc.ObjCObject> pointer,
    AVFAudio lib, {
    bool retain = false,
    bool release = false,
  }) : super._(pointer, lib, retain: retain, release: release);

  /// Returns a [NSXMLDTD] that points to the same underlying object as [other].
  static NSXMLDTD castFrom<T extends objc.ObjCObjectBase>(
    AVFAudio lib,
    T other,
  ) {
    return NSXMLDTD._(other.pointer, lib, retain: true, release: true);
  }

  /// Returns a [NSXMLDTD] that wraps the given raw object pointer.
  static NSXMLDTD castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCObject> other, {
    bool retain = false,
    bool release = false,
  }) {
    return NSXMLDTD._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSXMLDTD].
  static bool isInstance(AVFAudio lib, objc.ObjCObjectBase obj) {
    return lib._objc_msgSend_0(
      obj.pointer,
      lib._sel_isKindOfClass_1,
      lib._class_NSXMLDTD1,
    );
  }

  @override
  NSXMLDTD init() {
    final _ret = _lib._objc_msgSend_2(this.pointer, _lib._sel_init1);
    return NSXMLDTD._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSXMLDTD initWithKind_options_(int kind, int options) {
    final _ret = _lib._objc_msgSend_1107(
      this.pointer,
      _lib._sel_initWithKind_options_1,
      kind,
      options,
    );
    return NSXMLDTD._(_ret, _lib, retain: true, release: true);
  }

  NSXMLDTD? initWithContentsOfURL_options_error_(
    NSURL url,
    int mask,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    final _ret = _lib._objc_msgSend_1114(
      this.pointer,
      _lib._sel_initWithContentsOfURL_options_error_1,
      url.pointer,
      mask,
      error,
    );
    return _ret.address == 0
        ? null
        : NSXMLDTD._(_ret, _lib, retain: true, release: true);
  }

  NSXMLDTD? initWithData_options_error_(
    NSData data,
    int mask,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
  ) {
    final _ret = _lib._objc_msgSend_1115(
      this.pointer,
      _lib._sel_initWithData_options_error_1,
      data.pointer,
      mask,
      error,
    );
    return _ret.address == 0
        ? null
        : NSXMLDTD._(_ret, _lib, retain: true, release: true);
  }

  NSString? get publicID {
    final _ret = _lib._objc_msgSend_44(this.pointer, _lib._sel_publicID1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  set publicID(NSString? value) {
    return _lib._objc_msgSend_545(
      this.pointer,
      _lib._sel_setPublicID_1,
      value?.pointer ?? ffi.nullptr,
    );
  }

  NSString? get systemID {
    final _ret = _lib._objc_msgSend_44(this.pointer, _lib._sel_systemID1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  set systemID(NSString? value) {
    return _lib._objc_msgSend_545(
      this.pointer,
      _lib._sel_setSystemID_1,
      value?.pointer ?? ffi.nullptr,
    );
  }

  void insertChild_atIndex_(NSXMLNode child, int index) {
    _lib._objc_msgSend_1119(
      this.pointer,
      _lib._sel_insertChild_atIndex_1,
      child.pointer,
      index,
    );
  }

  void insertChildren_atIndex_(NSArray children, int index) {
    _lib._objc_msgSend_1120(
      this.pointer,
      _lib._sel_insertChildren_atIndex_1,
      children.pointer,
      index,
    );
  }

  void removeChildAtIndex_(int index) {
    _lib._objc_msgSend_470(this.pointer, _lib._sel_removeChildAtIndex_1, index);
  }

  void setChildren_(NSArray? children) {
    _lib._objc_msgSend_843(
      this.pointer,
      _lib._sel_setChildren_1,
      children?.pointer ?? ffi.nullptr,
    );
  }

  void addChild_(NSXMLNode child) {
    _lib._objc_msgSend_1121(this.pointer, _lib._sel_addChild_1, child.pointer);
  }

  void replaceChildAtIndex_withNode_(int index, NSXMLNode node) {
    _lib._objc_msgSend_1122(
      this.pointer,
      _lib._sel_replaceChildAtIndex_withNode_1,
      index,
      node.pointer,
    );
  }

  NSXMLDTDNode? entityDeclarationForName_(NSString name) {
    final _ret = _lib._objc_msgSend_1126(
      this.pointer,
      _lib._sel_entityDeclarationForName_1,
      name.pointer,
    );
    return _ret.address == 0
        ? null
        : NSXMLDTDNode._(_ret, _lib, retain: true, release: true);
  }

  NSXMLDTDNode? notationDeclarationForName_(NSString name) {
    final _ret = _lib._objc_msgSend_1126(
      this.pointer,
      _lib._sel_notationDeclarationForName_1,
      name.pointer,
    );
    return _ret.address == 0
        ? null
        : NSXMLDTDNode._(_ret, _lib, retain: true, release: true);
  }

  NSXMLDTDNode? elementDeclarationForName_(NSString name) {
    final _ret = _lib._objc_msgSend_1126(
      this.pointer,
      _lib._sel_elementDeclarationForName_1,
      name.pointer,
    );
    return _ret.address == 0
        ? null
        : NSXMLDTDNode._(_ret, _lib, retain: true, release: true);
  }

  NSXMLDTDNode? attributeDeclarationForName_elementName_(
    NSString name,
    NSString elementName,
  ) {
    final _ret = _lib._objc_msgSend_1127(
      this.pointer,
      _lib._sel_attributeDeclarationForName_elementName_1,
      name.pointer,
      elementName.pointer,
    );
    return _ret.address == 0
        ? null
        : NSXMLDTDNode._(_ret, _lib, retain: true, release: true);
  }

  static NSXMLDTDNode? predefinedEntityDeclarationForName_(
    AVFAudio _lib,
    NSString name,
  ) {
    final _ret = _lib._objc_msgSend_1126(
      _lib._class_NSXMLDTD1,
      _lib._sel_predefinedEntityDeclarationForName_1,
      name.pointer,
    );
    return _ret.address == 0
        ? null
        : NSXMLDTDNode._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSXMLDTD initWithKind_(int kind) {
    final _ret = _lib._objc_msgSend_1106(
      this.pointer,
      _lib._sel_initWithKind_1,
      kind,
    );
    return NSXMLDTD._(_ret, _lib, retain: true, release: true);
  }

  static NSObject document(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSXMLDTD1,
      _lib._sel_document1,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject documentWithRootElement_(
    AVFAudio _lib,
    NSXMLElement element,
  ) {
    final _ret = _lib._objc_msgSend_1108(
      _lib._class_NSXMLDTD1,
      _lib._sel_documentWithRootElement_1,
      element.pointer,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject elementWithName_(AVFAudio _lib, NSString name) {
    final _ret = _lib._objc_msgSend_31(
      _lib._class_NSXMLDTD1,
      _lib._sel_elementWithName_1,
      name.pointer,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject elementWithName_URI_(
    AVFAudio _lib,
    NSString name,
    NSString URI,
  ) {
    final _ret = _lib._objc_msgSend_1109(
      _lib._class_NSXMLDTD1,
      _lib._sel_elementWithName_URI_1,
      name.pointer,
      URI.pointer,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject elementWithName_stringValue_(
    AVFAudio _lib,
    NSString name,
    NSString string,
  ) {
    final _ret = _lib._objc_msgSend_1109(
      _lib._class_NSXMLDTD1,
      _lib._sel_elementWithName_stringValue_1,
      name.pointer,
      string.pointer,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject elementWithName_children_attributes_(
    AVFAudio _lib,
    NSString name,
    NSArray? children,
    NSArray? attributes,
  ) {
    final _ret = _lib._objc_msgSend_1110(
      _lib._class_NSXMLDTD1,
      _lib._sel_elementWithName_children_attributes_1,
      name.pointer,
      children?.pointer ?? ffi.nullptr,
      attributes?.pointer ?? ffi.nullptr,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject attributeWithName_stringValue_(
    AVFAudio _lib,
    NSString name,
    NSString stringValue,
  ) {
    final _ret = _lib._objc_msgSend_1109(
      _lib._class_NSXMLDTD1,
      _lib._sel_attributeWithName_stringValue_1,
      name.pointer,
      stringValue.pointer,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject attributeWithName_URI_stringValue_(
    AVFAudio _lib,
    NSString name,
    NSString URI,
    NSString stringValue,
  ) {
    final _ret = _lib._objc_msgSend_1074(
      _lib._class_NSXMLDTD1,
      _lib._sel_attributeWithName_URI_stringValue_1,
      name.pointer,
      URI.pointer,
      stringValue.pointer,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject namespaceWithName_stringValue_(
    AVFAudio _lib,
    NSString name,
    NSString stringValue,
  ) {
    final _ret = _lib._objc_msgSend_1109(
      _lib._class_NSXMLDTD1,
      _lib._sel_namespaceWithName_stringValue_1,
      name.pointer,
      stringValue.pointer,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject processingInstructionWithName_stringValue_(
    AVFAudio _lib,
    NSString name,
    NSString stringValue,
  ) {
    final _ret = _lib._objc_msgSend_1109(
      _lib._class_NSXMLDTD1,
      _lib._sel_processingInstructionWithName_stringValue_1,
      name.pointer,
      stringValue.pointer,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject commentWithStringValue_(AVFAudio _lib, NSString stringValue) {
    final _ret = _lib._objc_msgSend_31(
      _lib._class_NSXMLDTD1,
      _lib._sel_commentWithStringValue_1,
      stringValue.pointer,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject textWithStringValue_(AVFAudio _lib, NSString stringValue) {
    final _ret = _lib._objc_msgSend_31(
      _lib._class_NSXMLDTD1,
      _lib._sel_textWithStringValue_1,
      stringValue.pointer,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject? DTDNodeWithXMLString_(AVFAudio _lib, NSString string) {
    final _ret = _lib._objc_msgSend_38(
      _lib._class_NSXMLDTD1,
      _lib._sel_DTDNodeWithXMLString_1,
      string.pointer,
    );
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSString localNameForName_(AVFAudio _lib, NSString name) {
    final _ret = _lib._objc_msgSend_69(
      _lib._class_NSXMLDTD1,
      _lib._sel_localNameForName_1,
      name.pointer,
    );
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  static NSString? prefixForName_(AVFAudio _lib, NSString name) {
    final _ret = _lib._objc_msgSend_186(
      _lib._class_NSXMLDTD1,
      _lib._sel_prefixForName_1,
      name.pointer,
    );
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  static NSXMLNode? predefinedNamespaceForPrefix_(
    AVFAudio _lib,
    NSString name,
  ) {
    final _ret = _lib._objc_msgSend_1125(
      _lib._class_NSXMLDTD1,
      _lib._sel_predefinedNamespaceForPrefix_1,
      name.pointer,
    );
    return _ret.address == 0
        ? null
        : NSXMLNode._(_ret, _lib, retain: true, release: true);
  }

  static NSXMLDTD new1(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSXMLDTD1, _lib._sel_new1);
    return NSXMLDTD._(_ret, _lib, retain: false, release: true);
  }

  static NSXMLDTD allocWithZone_(AVFAudio _lib, ffi.Pointer<_NSZone> zone) {
    final _ret = _lib._objc_msgSend_3(
      _lib._class_NSXMLDTD1,
      _lib._sel_allocWithZone_1,
      zone,
    );
    return NSXMLDTD._(_ret, _lib, retain: false, release: true);
  }

  static NSXMLDTD alloc(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSXMLDTD1, _lib._sel_alloc1);
    return NSXMLDTD._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
    AVFAudio _lib,
    NSObject aTarget,
    ffi.Pointer<objc.ObjCSelector> aSelector,
    NSObject? anArgument,
  ) {
    _lib._objc_msgSend_14(
      _lib._class_NSXMLDTD1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
      aTarget.pointer,
      aSelector,
      anArgument?.pointer ?? ffi.nullptr,
    );
  }

  static void cancelPreviousPerformRequestsWithTarget_(
    AVFAudio _lib,
    NSObject aTarget,
  ) {
    _lib._objc_msgSend_15(
      _lib._class_NSXMLDTD1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_1,
      aTarget.pointer,
    );
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSXMLDTD1,
      _lib._sel_accessInstanceVariablesDirectly1,
    );
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSXMLDTD1,
      _lib._sel_useStoredAccessor1,
    );
  }

  static NSSet keyPathsForValuesAffectingValueForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    final _ret = _lib._objc_msgSend_63(
      _lib._class_NSXMLDTD1,
      _lib._sel_keyPathsForValuesAffectingValueForKey_1,
      key.pointer,
    );
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    return _lib._objc_msgSend_64(
      _lib._class_NSXMLDTD1,
      _lib._sel_automaticallyNotifiesObserversForKey_1,
      key.pointer,
    );
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
    AVFAudio _lib,
    NSArray keys,
    NSString dependentKey,
  ) {
    _lib._objc_msgSend_88(
      _lib._class_NSXMLDTD1,
      _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
      keys.pointer,
      dependentKey.pointer,
    );
  }

  static NSArray classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_85(
      _lib._class_NSXMLDTD1,
      _lib._sel_classFallbacksForKeyedArchiver1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSXMLDTD1,
      _lib._sel_classForKeyedUnarchiver1,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

class NSXMLDTDNode extends NSXMLNode {
  NSXMLDTDNode._(
    ffi.Pointer<objc.ObjCObject> pointer,
    AVFAudio lib, {
    bool retain = false,
    bool release = false,
  }) : super._(pointer, lib, retain: retain, release: release);

  /// Returns a [NSXMLDTDNode] that points to the same underlying object as [other].
  static NSXMLDTDNode castFrom<T extends objc.ObjCObjectBase>(
    AVFAudio lib,
    T other,
  ) {
    return NSXMLDTDNode._(other.pointer, lib, retain: true, release: true);
  }

  /// Returns a [NSXMLDTDNode] that wraps the given raw object pointer.
  static NSXMLDTDNode castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCObject> other, {
    bool retain = false,
    bool release = false,
  }) {
    return NSXMLDTDNode._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSXMLDTDNode].
  static bool isInstance(AVFAudio lib, objc.ObjCObjectBase obj) {
    return lib._objc_msgSend_0(
      obj.pointer,
      lib._sel_isKindOfClass_1,
      lib._class_NSXMLDTDNode1,
    );
  }

  NSXMLDTDNode? initWithXMLString_(NSString string) {
    final _ret = _lib._objc_msgSend_38(
      this.pointer,
      _lib._sel_initWithXMLString_1,
      string.pointer,
    );
    return _ret.address == 0
        ? null
        : NSXMLDTDNode._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSXMLDTDNode initWithKind_options_(int kind, int options) {
    final _ret = _lib._objc_msgSend_1107(
      this.pointer,
      _lib._sel_initWithKind_options_1,
      kind,
      options,
    );
    return NSXMLDTDNode._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSXMLDTDNode init() {
    final _ret = _lib._objc_msgSend_2(this.pointer, _lib._sel_init1);
    return NSXMLDTDNode._(_ret, _lib, retain: true, release: true);
  }

  int get DTDKind {
    return _lib._objc_msgSend_1123(this.pointer, _lib._sel_DTDKind1);
  }

  set DTDKind(int value) {
    return _lib._objc_msgSend_1124(this.pointer, _lib._sel_setDTDKind_1, value);
  }

  bool get external1 {
    return _lib._objc_msgSend_12(this.pointer, _lib._sel_isExternal1);
  }

  NSString? get publicID {
    final _ret = _lib._objc_msgSend_44(this.pointer, _lib._sel_publicID1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  set publicID(NSString? value) {
    return _lib._objc_msgSend_545(
      this.pointer,
      _lib._sel_setPublicID_1,
      value?.pointer ?? ffi.nullptr,
    );
  }

  NSString? get systemID {
    final _ret = _lib._objc_msgSend_44(this.pointer, _lib._sel_systemID1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  set systemID(NSString? value) {
    return _lib._objc_msgSend_545(
      this.pointer,
      _lib._sel_setSystemID_1,
      value?.pointer ?? ffi.nullptr,
    );
  }

  NSString? get notationName {
    final _ret = _lib._objc_msgSend_44(this.pointer, _lib._sel_notationName1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  set notationName(NSString? value) {
    return _lib._objc_msgSend_545(
      this.pointer,
      _lib._sel_setNotationName_1,
      value?.pointer ?? ffi.nullptr,
    );
  }

  @override
  NSXMLDTDNode initWithKind_(int kind) {
    final _ret = _lib._objc_msgSend_1106(
      this.pointer,
      _lib._sel_initWithKind_1,
      kind,
    );
    return NSXMLDTDNode._(_ret, _lib, retain: true, release: true);
  }

  static NSObject document(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSXMLDTDNode1,
      _lib._sel_document1,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject documentWithRootElement_(
    AVFAudio _lib,
    NSXMLElement element,
  ) {
    final _ret = _lib._objc_msgSend_1108(
      _lib._class_NSXMLDTDNode1,
      _lib._sel_documentWithRootElement_1,
      element.pointer,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject elementWithName_(AVFAudio _lib, NSString name) {
    final _ret = _lib._objc_msgSend_31(
      _lib._class_NSXMLDTDNode1,
      _lib._sel_elementWithName_1,
      name.pointer,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject elementWithName_URI_(
    AVFAudio _lib,
    NSString name,
    NSString URI,
  ) {
    final _ret = _lib._objc_msgSend_1109(
      _lib._class_NSXMLDTDNode1,
      _lib._sel_elementWithName_URI_1,
      name.pointer,
      URI.pointer,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject elementWithName_stringValue_(
    AVFAudio _lib,
    NSString name,
    NSString string,
  ) {
    final _ret = _lib._objc_msgSend_1109(
      _lib._class_NSXMLDTDNode1,
      _lib._sel_elementWithName_stringValue_1,
      name.pointer,
      string.pointer,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject elementWithName_children_attributes_(
    AVFAudio _lib,
    NSString name,
    NSArray? children,
    NSArray? attributes,
  ) {
    final _ret = _lib._objc_msgSend_1110(
      _lib._class_NSXMLDTDNode1,
      _lib._sel_elementWithName_children_attributes_1,
      name.pointer,
      children?.pointer ?? ffi.nullptr,
      attributes?.pointer ?? ffi.nullptr,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject attributeWithName_stringValue_(
    AVFAudio _lib,
    NSString name,
    NSString stringValue,
  ) {
    final _ret = _lib._objc_msgSend_1109(
      _lib._class_NSXMLDTDNode1,
      _lib._sel_attributeWithName_stringValue_1,
      name.pointer,
      stringValue.pointer,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject attributeWithName_URI_stringValue_(
    AVFAudio _lib,
    NSString name,
    NSString URI,
    NSString stringValue,
  ) {
    final _ret = _lib._objc_msgSend_1074(
      _lib._class_NSXMLDTDNode1,
      _lib._sel_attributeWithName_URI_stringValue_1,
      name.pointer,
      URI.pointer,
      stringValue.pointer,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject namespaceWithName_stringValue_(
    AVFAudio _lib,
    NSString name,
    NSString stringValue,
  ) {
    final _ret = _lib._objc_msgSend_1109(
      _lib._class_NSXMLDTDNode1,
      _lib._sel_namespaceWithName_stringValue_1,
      name.pointer,
      stringValue.pointer,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject processingInstructionWithName_stringValue_(
    AVFAudio _lib,
    NSString name,
    NSString stringValue,
  ) {
    final _ret = _lib._objc_msgSend_1109(
      _lib._class_NSXMLDTDNode1,
      _lib._sel_processingInstructionWithName_stringValue_1,
      name.pointer,
      stringValue.pointer,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject commentWithStringValue_(AVFAudio _lib, NSString stringValue) {
    final _ret = _lib._objc_msgSend_31(
      _lib._class_NSXMLDTDNode1,
      _lib._sel_commentWithStringValue_1,
      stringValue.pointer,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject textWithStringValue_(AVFAudio _lib, NSString stringValue) {
    final _ret = _lib._objc_msgSend_31(
      _lib._class_NSXMLDTDNode1,
      _lib._sel_textWithStringValue_1,
      stringValue.pointer,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject? DTDNodeWithXMLString_(AVFAudio _lib, NSString string) {
    final _ret = _lib._objc_msgSend_38(
      _lib._class_NSXMLDTDNode1,
      _lib._sel_DTDNodeWithXMLString_1,
      string.pointer,
    );
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSString localNameForName_(AVFAudio _lib, NSString name) {
    final _ret = _lib._objc_msgSend_69(
      _lib._class_NSXMLDTDNode1,
      _lib._sel_localNameForName_1,
      name.pointer,
    );
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  static NSString? prefixForName_(AVFAudio _lib, NSString name) {
    final _ret = _lib._objc_msgSend_186(
      _lib._class_NSXMLDTDNode1,
      _lib._sel_prefixForName_1,
      name.pointer,
    );
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  static NSXMLNode? predefinedNamespaceForPrefix_(
    AVFAudio _lib,
    NSString name,
  ) {
    final _ret = _lib._objc_msgSend_1125(
      _lib._class_NSXMLDTDNode1,
      _lib._sel_predefinedNamespaceForPrefix_1,
      name.pointer,
    );
    return _ret.address == 0
        ? null
        : NSXMLNode._(_ret, _lib, retain: true, release: true);
  }

  static NSXMLDTDNode new1(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSXMLDTDNode1,
      _lib._sel_new1,
    );
    return NSXMLDTDNode._(_ret, _lib, retain: false, release: true);
  }

  static NSXMLDTDNode allocWithZone_(AVFAudio _lib, ffi.Pointer<_NSZone> zone) {
    final _ret = _lib._objc_msgSend_3(
      _lib._class_NSXMLDTDNode1,
      _lib._sel_allocWithZone_1,
      zone,
    );
    return NSXMLDTDNode._(_ret, _lib, retain: false, release: true);
  }

  static NSXMLDTDNode alloc(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSXMLDTDNode1,
      _lib._sel_alloc1,
    );
    return NSXMLDTDNode._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
    AVFAudio _lib,
    NSObject aTarget,
    ffi.Pointer<objc.ObjCSelector> aSelector,
    NSObject? anArgument,
  ) {
    _lib._objc_msgSend_14(
      _lib._class_NSXMLDTDNode1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
      aTarget.pointer,
      aSelector,
      anArgument?.pointer ?? ffi.nullptr,
    );
  }

  static void cancelPreviousPerformRequestsWithTarget_(
    AVFAudio _lib,
    NSObject aTarget,
  ) {
    _lib._objc_msgSend_15(
      _lib._class_NSXMLDTDNode1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_1,
      aTarget.pointer,
    );
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSXMLDTDNode1,
      _lib._sel_accessInstanceVariablesDirectly1,
    );
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_NSXMLDTDNode1,
      _lib._sel_useStoredAccessor1,
    );
  }

  static NSSet keyPathsForValuesAffectingValueForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    final _ret = _lib._objc_msgSend_63(
      _lib._class_NSXMLDTDNode1,
      _lib._sel_keyPathsForValuesAffectingValueForKey_1,
      key.pointer,
    );
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    return _lib._objc_msgSend_64(
      _lib._class_NSXMLDTDNode1,
      _lib._sel_automaticallyNotifiesObserversForKey_1,
      key.pointer,
    );
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
    AVFAudio _lib,
    NSArray keys,
    NSString dependentKey,
  ) {
    _lib._objc_msgSend_88(
      _lib._class_NSXMLDTDNode1,
      _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
      keys.pointer,
      dependentKey.pointer,
    );
  }

  static NSArray classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_85(
      _lib._class_NSXMLDTDNode1,
      _lib._sel_classFallbacksForKeyedArchiver1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_NSXMLDTDNode1,
      _lib._sel_classForKeyedUnarchiver1,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

abstract class NSXMLDTDNodeKind {
  static const int NSXMLEntityGeneralKind = 1;
  static const int NSXMLEntityParsedKind = 2;
  static const int NSXMLEntityUnparsedKind = 3;
  static const int NSXMLEntityParameterKind = 4;
  static const int NSXMLEntityPredefined = 5;
  static const int NSXMLAttributeCDATAKind = 6;
  static const int NSXMLAttributeIDKind = 7;
  static const int NSXMLAttributeIDRefKind = 8;
  static const int NSXMLAttributeIDRefsKind = 9;
  static const int NSXMLAttributeEntityKind = 10;
  static const int NSXMLAttributeEntitiesKind = 11;
  static const int NSXMLAttributeNMTokenKind = 12;
  static const int NSXMLAttributeNMTokensKind = 13;
  static const int NSXMLAttributeEnumerationKind = 14;
  static const int NSXMLAttributeNotationKind = 15;
  static const int NSXMLElementDeclarationUndefinedKind = 16;
  static const int NSXMLElementDeclarationEmptyKind = 17;
  static const int NSXMLElementDeclarationAnyKind = 18;
  static const int NSXMLElementDeclarationMixedKind = 19;
  static const int NSXMLElementDeclarationElementKind = 20;
}

class AVAudioSession extends NSObject {
  AVAudioSession._(
    ffi.Pointer<objc.ObjCObject> pointer,
    AVFAudio lib, {
    bool retain = false,
    bool release = false,
  }) : super._(pointer, lib, retain: retain, release: release);

  /// Returns a [AVAudioSession] that points to the same underlying object as [other].
  static AVAudioSession castFrom<T extends objc.ObjCObjectBase>(
    AVFAudio lib,
    T other,
  ) {
    return AVAudioSession._(other.pointer, lib, retain: true, release: true);
  }

  /// Returns a [AVAudioSession] that wraps the given raw object pointer.
  static AVAudioSession castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCObject> other, {
    bool retain = false,
    bool release = false,
  }) {
    return AVAudioSession._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [AVAudioSession].
  static bool isInstance(AVFAudio lib, objc.ObjCObjectBase obj) {
    return lib._objc_msgSend_0(
      obj.pointer,
      lib._sel_isKindOfClass_1,
      lib._class_AVAudioSession1,
    );
  }

  static AVAudioSession sharedInstance(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_1145(
      _lib._class_AVAudioSession1,
      _lib._sel_sharedInstance1,
    );
    return AVAudioSession._(_ret, _lib, retain: true, release: true);
  }

  NSArray get availableCategories {
    final _ret = _lib._objc_msgSend_85(
      this.pointer,
      _lib._sel_availableCategories1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  bool setCategory_error_(
    NSString category,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError,
  ) {
    return _lib._objc_msgSend_447(
      this.pointer,
      _lib._sel_setCategory_error_1,
      category.pointer,
      outError,
    );
  }

  bool setCategory_withOptions_error_(
    NSString category,
    int options,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError,
  ) {
    return _lib._objc_msgSend_1146(
      this.pointer,
      _lib._sel_setCategory_withOptions_error_1,
      category.pointer,
      options,
      outError,
    );
  }

  bool setCategory_mode_options_error_(
    NSString category,
    NSString mode,
    int options,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError,
  ) {
    return _lib._objc_msgSend_1147(
      this.pointer,
      _lib._sel_setCategory_mode_options_error_1,
      category.pointer,
      mode.pointer,
      options,
      outError,
    );
  }

  bool setCategory_mode_routeSharingPolicy_options_error_(
    NSString category,
    NSString mode,
    int policy,
    int options,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError,
  ) {
    return _lib._objc_msgSend_1148(
      this.pointer,
      _lib._sel_setCategory_mode_routeSharingPolicy_options_error_1,
      category.pointer,
      mode.pointer,
      policy,
      options,
      outError,
    );
  }

  NSString get category {
    final _ret = _lib._objc_msgSend_21(this.pointer, _lib._sel_category1);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  int get categoryOptions {
    return _lib._objc_msgSend_1149(this.pointer, _lib._sel_categoryOptions1);
  }

  int get routeSharingPolicy {
    return _lib._objc_msgSend_1150(this.pointer, _lib._sel_routeSharingPolicy1);
  }

  NSArray get availableModes {
    final _ret = _lib._objc_msgSend_85(this.pointer, _lib._sel_availableModes1);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  bool setMode_error_(
    NSString mode,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError,
  ) {
    return _lib._objc_msgSend_447(
      this.pointer,
      _lib._sel_setMode_error_1,
      mode.pointer,
      outError,
    );
  }

  NSString get mode {
    final _ret = _lib._objc_msgSend_21(this.pointer, _lib._sel_mode1);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  bool setAllowHapticsAndSystemSoundsDuringRecording_error_(
    bool inValue,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError,
  ) {
    return _lib._objc_msgSend_1151(
      this.pointer,
      _lib._sel_setAllowHapticsAndSystemSoundsDuringRecording_error_1,
      inValue,
      outError,
    );
  }

  bool get allowHapticsAndSystemSoundsDuringRecording {
    return _lib._objc_msgSend_12(
      this.pointer,
      _lib._sel_allowHapticsAndSystemSoundsDuringRecording1,
    );
  }

  int get recordPermission {
    return _lib._objc_msgSend_1152(this.pointer, _lib._sel_recordPermission1);
  }

  void requestRecordPermission_(ObjCBlock_ffiVoid_bool response) {
    _lib._objc_msgSend_1153(
      this.pointer,
      _lib._sel_requestRecordPermission_1,
      response.pointer,
    );
  }

  bool overrideOutputAudioPort_error_(
    int portOverride,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError,
  ) {
    return _lib._objc_msgSend_1154(
      this.pointer,
      _lib._sel_overrideOutputAudioPort_error_1,
      portOverride,
      outError,
    );
  }

  bool setPreferredInput_error_(
    AVAudioSessionPortDescription? inPort,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError,
  ) {
    return _lib._objc_msgSend_1158(
      this.pointer,
      _lib._sel_setPreferredInput_error_1,
      inPort?.pointer ?? ffi.nullptr,
      outError,
    );
  }

  AVAudioSessionPortDescription? get preferredInput {
    final _ret = _lib._objc_msgSend_1159(
      this.pointer,
      _lib._sel_preferredInput1,
    );
    return _ret.address == 0
        ? null
        : AVAudioSessionPortDescription._(
          _ret,
          _lib,
          retain: true,
          release: true,
        );
  }

  bool setPrefersNoInterruptionsFromSystemAlerts_error_(
    bool inValue,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError,
  ) {
    return _lib._objc_msgSend_1151(
      this.pointer,
      _lib._sel_setPrefersNoInterruptionsFromSystemAlerts_error_1,
      inValue,
      outError,
    );
  }

  bool get prefersNoInterruptionsFromSystemAlerts {
    return _lib._objc_msgSend_12(
      this.pointer,
      _lib._sel_prefersNoInterruptionsFromSystemAlerts1,
    );
  }

  int get renderingMode {
    return _lib._objc_msgSend_1160(this.pointer, _lib._sel_renderingMode1);
  }

  bool setActive_error_(
    bool active,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError,
  ) {
    return _lib._objc_msgSend_1151(
      this.pointer,
      _lib._sel_setActive_error_1,
      active,
      outError,
    );
  }

  bool setActive_withOptions_error_(
    bool active,
    int options,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError,
  ) {
    return _lib._objc_msgSend_1161(
      this.pointer,
      _lib._sel_setActive_withOptions_error_1,
      active,
      options,
      outError,
    );
  }

  void activateWithOptions_completionHandler_(
    int options,
    ObjCBlock_ffiVoid_bool_NSError handler,
  ) {
    _lib._objc_msgSend_1162(
      this.pointer,
      _lib._sel_activateWithOptions_completionHandler_1,
      options,
      handler.pointer,
    );
  }

  bool setPreferredSampleRate_error_(
    double sampleRate,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError,
  ) {
    return _lib._objc_msgSend_1163(
      this.pointer,
      _lib._sel_setPreferredSampleRate_error_1,
      sampleRate,
      outError,
    );
  }

  double get preferredSampleRate {
    return objc.useMsgSendVariants
        ? _lib._objc_msgSend_165_fpret(
          this.pointer,
          _lib._sel_preferredSampleRate1,
        )
        : _lib._objc_msgSend_165(this.pointer, _lib._sel_preferredSampleRate1);
  }

  bool setPreferredIOBufferDuration_error_(
    double duration,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError,
  ) {
    return _lib._objc_msgSend_1163(
      this.pointer,
      _lib._sel_setPreferredIOBufferDuration_error_1,
      duration,
      outError,
    );
  }

  double get preferredIOBufferDuration {
    return objc.useMsgSendVariants
        ? _lib._objc_msgSend_165_fpret(
          this.pointer,
          _lib._sel_preferredIOBufferDuration1,
        )
        : _lib._objc_msgSend_165(
          this.pointer,
          _lib._sel_preferredIOBufferDuration1,
        );
  }

  bool setPreferredInputNumberOfChannels_error_(
    int count,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError,
  ) {
    return _lib._objc_msgSend_1164(
      this.pointer,
      _lib._sel_setPreferredInputNumberOfChannels_error_1,
      count,
      outError,
    );
  }

  int get preferredInputNumberOfChannels {
    return _lib._objc_msgSend_83(
      this.pointer,
      _lib._sel_preferredInputNumberOfChannels1,
    );
  }

  bool setPreferredOutputNumberOfChannels_error_(
    int count,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError,
  ) {
    return _lib._objc_msgSend_1164(
      this.pointer,
      _lib._sel_setPreferredOutputNumberOfChannels_error_1,
      count,
      outError,
    );
  }

  int get preferredOutputNumberOfChannels {
    return _lib._objc_msgSend_83(
      this.pointer,
      _lib._sel_preferredOutputNumberOfChannels1,
    );
  }

  bool setPreferredInputOrientation_error_(
    int orientation,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError,
  ) {
    return _lib._objc_msgSend_1165(
      this.pointer,
      _lib._sel_setPreferredInputOrientation_error_1,
      orientation,
      outError,
    );
  }

  int get preferredInputOrientation {
    return _lib._objc_msgSend_1166(
      this.pointer,
      _lib._sel_preferredInputOrientation1,
    );
  }

  int get inputOrientation {
    return _lib._objc_msgSend_1166(this.pointer, _lib._sel_inputOrientation1);
  }

  int get maximumInputNumberOfChannels {
    return _lib._objc_msgSend_83(
      this.pointer,
      _lib._sel_maximumInputNumberOfChannels1,
    );
  }

  int get maximumOutputNumberOfChannels {
    return _lib._objc_msgSend_83(
      this.pointer,
      _lib._sel_maximumOutputNumberOfChannels1,
    );
  }

  bool setInputGain_error_(
    double gain,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError,
  ) {
    return _lib._objc_msgSend_1167(
      this.pointer,
      _lib._sel_setInputGain_error_1,
      gain,
      outError,
    );
  }

  double get inputGain {
    return objc.useMsgSendVariants
        ? _lib._objc_msgSend_239_fpret(this.pointer, _lib._sel_inputGain1)
        : _lib._objc_msgSend_239(this.pointer, _lib._sel_inputGain1);
  }

  bool get inputGainSettable {
    return _lib._objc_msgSend_12(this.pointer, _lib._sel_isInputGainSettable1);
  }

  bool get inputAvailable {
    return _lib._objc_msgSend_12(this.pointer, _lib._sel_isInputAvailable1);
  }

  NSArray? get inputDataSources {
    final _ret = _lib._objc_msgSend_84(
      this.pointer,
      _lib._sel_inputDataSources1,
    );
    return _ret.address == 0
        ? null
        : NSArray._(_ret, _lib, retain: true, release: true);
  }

  AVAudioSessionDataSourceDescription? get inputDataSource {
    final _ret = _lib._objc_msgSend_1156(
      this.pointer,
      _lib._sel_inputDataSource1,
    );
    return _ret.address == 0
        ? null
        : AVAudioSessionDataSourceDescription._(
          _ret,
          _lib,
          retain: true,
          release: true,
        );
  }

  bool setInputDataSource_error_(
    AVAudioSessionDataSourceDescription? dataSource,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError,
  ) {
    return _lib._objc_msgSend_1157(
      this.pointer,
      _lib._sel_setInputDataSource_error_1,
      dataSource?.pointer ?? ffi.nullptr,
      outError,
    );
  }

  NSArray? get outputDataSources {
    final _ret = _lib._objc_msgSend_84(
      this.pointer,
      _lib._sel_outputDataSources1,
    );
    return _ret.address == 0
        ? null
        : NSArray._(_ret, _lib, retain: true, release: true);
  }

  AVAudioSessionDataSourceDescription? get outputDataSource {
    final _ret = _lib._objc_msgSend_1156(
      this.pointer,
      _lib._sel_outputDataSource1,
    );
    return _ret.address == 0
        ? null
        : AVAudioSessionDataSourceDescription._(
          _ret,
          _lib,
          retain: true,
          release: true,
        );
  }

  bool setOutputDataSource_error_(
    AVAudioSessionDataSourceDescription? dataSource,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError,
  ) {
    return _lib._objc_msgSend_1157(
      this.pointer,
      _lib._sel_setOutputDataSource_error_1,
      dataSource?.pointer ?? ffi.nullptr,
      outError,
    );
  }

  double get sampleRate {
    return objc.useMsgSendVariants
        ? _lib._objc_msgSend_165_fpret(this.pointer, _lib._sel_sampleRate1)
        : _lib._objc_msgSend_165(this.pointer, _lib._sel_sampleRate1);
  }

  int get inputNumberOfChannels {
    return _lib._objc_msgSend_83(
      this.pointer,
      _lib._sel_inputNumberOfChannels1,
    );
  }

  int get outputNumberOfChannels {
    return _lib._objc_msgSend_83(
      this.pointer,
      _lib._sel_outputNumberOfChannels1,
    );
  }

  double get inputLatency {
    return objc.useMsgSendVariants
        ? _lib._objc_msgSend_165_fpret(this.pointer, _lib._sel_inputLatency1)
        : _lib._objc_msgSend_165(this.pointer, _lib._sel_inputLatency1);
  }

  double get outputLatency {
    return objc.useMsgSendVariants
        ? _lib._objc_msgSend_165_fpret(this.pointer, _lib._sel_outputLatency1)
        : _lib._objc_msgSend_165(this.pointer, _lib._sel_outputLatency1);
  }

  double get IOBufferDuration {
    return objc.useMsgSendVariants
        ? _lib._objc_msgSend_165_fpret(
          this.pointer,
          _lib._sel_IOBufferDuration1,
        )
        : _lib._objc_msgSend_165(this.pointer, _lib._sel_IOBufferDuration1);
  }

  NSArray get supportedOutputChannelLayouts {
    final _ret = _lib._objc_msgSend_85(
      this.pointer,
      _lib._sel_supportedOutputChannelLayouts1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  bool get otherAudioPlaying {
    return _lib._objc_msgSend_12(this.pointer, _lib._sel_isOtherAudioPlaying1);
  }

  bool get secondaryAudioShouldBeSilencedHint {
    return _lib._objc_msgSend_12(
      this.pointer,
      _lib._sel_secondaryAudioShouldBeSilencedHint1,
    );
  }

  double get outputVolume {
    return objc.useMsgSendVariants
        ? _lib._objc_msgSend_239_fpret(this.pointer, _lib._sel_outputVolume1)
        : _lib._objc_msgSend_239(this.pointer, _lib._sel_outputVolume1);
  }

  int get promptStyle {
    return _lib._objc_msgSend_1168(this.pointer, _lib._sel_promptStyle1);
  }

  NSArray? get availableInputs {
    final _ret = _lib._objc_msgSend_84(
      this.pointer,
      _lib._sel_availableInputs1,
    );
    return _ret.address == 0
        ? null
        : NSArray._(_ret, _lib, retain: true, release: true);
  }

  AVAudioSessionRouteDescription get currentRoute {
    final _ret = _lib._objc_msgSend_1169(this.pointer, _lib._sel_currentRoute1);
    return AVAudioSessionRouteDescription._(
      _ret,
      _lib,
      retain: true,
      release: true,
    );
  }

  bool setAggregatedIOPreference_error_(
    int inIOType,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError,
  ) {
    return _lib._objc_msgSend_1170(
      this.pointer,
      _lib._sel_setAggregatedIOPreference_error_1,
      inIOType,
      outError,
    );
  }

  bool setSupportsMultichannelContent_error_(
    bool inValue,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError,
  ) {
    return _lib._objc_msgSend_1151(
      this.pointer,
      _lib._sel_setSupportsMultichannelContent_error_1,
      inValue,
      outError,
    );
  }

  bool get supportsMultichannelContent {
    return _lib._objc_msgSend_12(
      this.pointer,
      _lib._sel_supportsMultichannelContent1,
    );
  }

  bool setPrefersInterruptionOnRouteDisconnect_error_(
    bool inValue,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError,
  ) {
    return _lib._objc_msgSend_1151(
      this.pointer,
      _lib._sel_setPrefersInterruptionOnRouteDisconnect_error_1,
      inValue,
      outError,
    );
  }

  bool get prefersInterruptionOnRouteDisconnect {
    return _lib._objc_msgSend_12(
      this.pointer,
      _lib._sel_prefersInterruptionOnRouteDisconnect1,
    );
  }

  NSObject? get delegate {
    final _ret = _lib._objc_msgSend_17(this.pointer, _lib._sel_delegate1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  set delegate(NSObject? value) {
    return _lib._objc_msgSend_416(
      this.pointer,
      _lib._sel_setDelegate_1,
      value?.pointer ?? ffi.nullptr,
    );
  }

  @override
  AVAudioSession init() {
    final _ret = _lib._objc_msgSend_2(this.pointer, _lib._sel_init1);
    return AVAudioSession._(_ret, _lib, retain: true, release: true);
  }

  bool setActive_withFlags_error_(
    bool active,
    int flags,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError,
  ) {
    return _lib._objc_msgSend_1171(
      this.pointer,
      _lib._sel_setActive_withFlags_error_1,
      active,
      flags,
      outError,
    );
  }

  bool get inputIsAvailable {
    return _lib._objc_msgSend_12(this.pointer, _lib._sel_inputIsAvailable1);
  }

  double get currentHardwareSampleRate {
    return objc.useMsgSendVariants
        ? _lib._objc_msgSend_165_fpret(
          this.pointer,
          _lib._sel_currentHardwareSampleRate1,
        )
        : _lib._objc_msgSend_165(
          this.pointer,
          _lib._sel_currentHardwareSampleRate1,
        );
  }

  int get currentHardwareInputNumberOfChannels {
    return _lib._objc_msgSend_83(
      this.pointer,
      _lib._sel_currentHardwareInputNumberOfChannels1,
    );
  }

  int get currentHardwareOutputNumberOfChannels {
    return _lib._objc_msgSend_83(
      this.pointer,
      _lib._sel_currentHardwareOutputNumberOfChannels1,
    );
  }

  bool setPreferredHardwareSampleRate_error_(
    double sampleRate,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError,
  ) {
    return _lib._objc_msgSend_1163(
      this.pointer,
      _lib._sel_setPreferredHardwareSampleRate_error_1,
      sampleRate,
      outError,
    );
  }

  double get preferredHardwareSampleRate {
    return objc.useMsgSendVariants
        ? _lib._objc_msgSend_165_fpret(
          this.pointer,
          _lib._sel_preferredHardwareSampleRate1,
        )
        : _lib._objc_msgSend_165(
          this.pointer,
          _lib._sel_preferredHardwareSampleRate1,
        );
  }

  static AVAudioSession new1(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_AVAudioSession1,
      _lib._sel_new1,
    );
    return AVAudioSession._(_ret, _lib, retain: false, release: true);
  }

  static AVAudioSession allocWithZone_(
    AVFAudio _lib,
    ffi.Pointer<_NSZone> zone,
  ) {
    final _ret = _lib._objc_msgSend_3(
      _lib._class_AVAudioSession1,
      _lib._sel_allocWithZone_1,
      zone,
    );
    return AVAudioSession._(_ret, _lib, retain: false, release: true);
  }

  static AVAudioSession alloc(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_AVAudioSession1,
      _lib._sel_alloc1,
    );
    return AVAudioSession._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
    AVFAudio _lib,
    NSObject aTarget,
    ffi.Pointer<objc.ObjCSelector> aSelector,
    NSObject? anArgument,
  ) {
    _lib._objc_msgSend_14(
      _lib._class_AVAudioSession1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
      aTarget.pointer,
      aSelector,
      anArgument?.pointer ?? ffi.nullptr,
    );
  }

  static void cancelPreviousPerformRequestsWithTarget_(
    AVFAudio _lib,
    NSObject aTarget,
  ) {
    _lib._objc_msgSend_15(
      _lib._class_AVAudioSession1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_1,
      aTarget.pointer,
    );
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_AVAudioSession1,
      _lib._sel_accessInstanceVariablesDirectly1,
    );
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_AVAudioSession1,
      _lib._sel_useStoredAccessor1,
    );
  }

  static NSSet keyPathsForValuesAffectingValueForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    final _ret = _lib._objc_msgSend_63(
      _lib._class_AVAudioSession1,
      _lib._sel_keyPathsForValuesAffectingValueForKey_1,
      key.pointer,
    );
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    return _lib._objc_msgSend_64(
      _lib._class_AVAudioSession1,
      _lib._sel_automaticallyNotifiesObserversForKey_1,
      key.pointer,
    );
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
    AVFAudio _lib,
    NSArray keys,
    NSString dependentKey,
  ) {
    _lib._objc_msgSend_88(
      _lib._class_AVAudioSession1,
      _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
      keys.pointer,
      dependentKey.pointer,
    );
  }

  static NSArray classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_85(
      _lib._class_AVAudioSession1,
      _lib._sel_classFallbacksForKeyedArchiver1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_AVAudioSession1,
      _lib._sel_classForKeyedUnarchiver1,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

abstract class AVAudioSessionCategoryOptions {
  static const int AVAudioSessionCategoryOptionMixWithOthers = 1;
  static const int AVAudioSessionCategoryOptionDuckOthers = 2;
  static const int AVAudioSessionCategoryOptionAllowBluetooth = 4;
  static const int AVAudioSessionCategoryOptionDefaultToSpeaker = 8;
  static const int
  AVAudioSessionCategoryOptionInterruptSpokenAudioAndMixWithOthers = 17;
  static const int AVAudioSessionCategoryOptionAllowBluetoothA2DP = 32;
  static const int AVAudioSessionCategoryOptionAllowAirPlay = 64;
  static const int
  AVAudioSessionCategoryOptionOverrideMutedMicrophoneInterruption = 128;
}

abstract class AVAudioSessionRouteSharingPolicy {
  static const int AVAudioSessionRouteSharingPolicyDefault = 0;
  static const int AVAudioSessionRouteSharingPolicyLongFormAudio = 1;
  static const int AVAudioSessionRouteSharingPolicyLongForm = 1;
  static const int AVAudioSessionRouteSharingPolicyIndependent = 2;
  static const int AVAudioSessionRouteSharingPolicyLongFormVideo = 3;
}

abstract class AVAudioSessionRecordPermission {
  static const int AVAudioSessionRecordPermissionUndetermined = 1970168948;
  static const int AVAudioSessionRecordPermissionDenied = 1684369017;
  static const int AVAudioSessionRecordPermissionGranted = 1735552628;
}

abstract class AVAudioSessionPortOverride {
  static const int AVAudioSessionPortOverrideNone = 0;
  static const int AVAudioSessionPortOverrideSpeaker = 1936747378;
}

class AVAudioSessionPortDescription extends NSObject {
  AVAudioSessionPortDescription._(
    ffi.Pointer<objc.ObjCObject> pointer,
    AVFAudio lib, {
    bool retain = false,
    bool release = false,
  }) : super._(pointer, lib, retain: retain, release: release);

  /// Returns a [AVAudioSessionPortDescription] that points to the same underlying object as [other].
  static AVAudioSessionPortDescription castFrom<T extends objc.ObjCObjectBase>(
    AVFAudio lib,
    T other,
  ) {
    return AVAudioSessionPortDescription._(
      other.pointer,
      lib,
      retain: true,
      release: true,
    );
  }

  /// Returns a [AVAudioSessionPortDescription] that wraps the given raw object pointer.
  static AVAudioSessionPortDescription castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCObject> other, {
    bool retain = false,
    bool release = false,
  }) {
    return AVAudioSessionPortDescription._(
      other,
      lib,
      retain: retain,
      release: release,
    );
  }

  /// Returns whether [obj] is an instance of [AVAudioSessionPortDescription].
  static bool isInstance(AVFAudio lib, objc.ObjCObjectBase obj) {
    return lib._objc_msgSend_0(
      obj.pointer,
      lib._sel_isKindOfClass_1,
      lib._class_AVAudioSessionPortDescription1,
    );
  }

  NSString get portType {
    final _ret = _lib._objc_msgSend_21(this.pointer, _lib._sel_portType1);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString get portName {
    final _ret = _lib._objc_msgSend_21(this.pointer, _lib._sel_portName1);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString get UID {
    final _ret = _lib._objc_msgSend_21(this.pointer, _lib._sel_UID1);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  bool get hasHardwareVoiceCallProcessing {
    return _lib._objc_msgSend_12(
      this.pointer,
      _lib._sel_hasHardwareVoiceCallProcessing1,
    );
  }

  bool get spatialAudioEnabled {
    return _lib._objc_msgSend_12(
      this.pointer,
      _lib._sel_isSpatialAudioEnabled1,
    );
  }

  NSArray? get channels {
    final _ret = _lib._objc_msgSend_84(this.pointer, _lib._sel_channels1);
    return _ret.address == 0
        ? null
        : NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSArray? get dataSources {
    final _ret = _lib._objc_msgSend_84(this.pointer, _lib._sel_dataSources1);
    return _ret.address == 0
        ? null
        : NSArray._(_ret, _lib, retain: true, release: true);
  }

  AVAudioSessionDataSourceDescription? get selectedDataSource {
    final _ret = _lib._objc_msgSend_1156(
      this.pointer,
      _lib._sel_selectedDataSource1,
    );
    return _ret.address == 0
        ? null
        : AVAudioSessionDataSourceDescription._(
          _ret,
          _lib,
          retain: true,
          release: true,
        );
  }

  AVAudioSessionDataSourceDescription? get preferredDataSource {
    final _ret = _lib._objc_msgSend_1156(
      this.pointer,
      _lib._sel_preferredDataSource1,
    );
    return _ret.address == 0
        ? null
        : AVAudioSessionDataSourceDescription._(
          _ret,
          _lib,
          retain: true,
          release: true,
        );
  }

  bool setPreferredDataSource_error_(
    AVAudioSessionDataSourceDescription? dataSource,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError,
  ) {
    return _lib._objc_msgSend_1157(
      this.pointer,
      _lib._sel_setPreferredDataSource_error_1,
      dataSource?.pointer ?? ffi.nullptr,
      outError,
    );
  }

  @override
  AVAudioSessionPortDescription init() {
    final _ret = _lib._objc_msgSend_2(this.pointer, _lib._sel_init1);
    return AVAudioSessionPortDescription._(
      _ret,
      _lib,
      retain: true,
      release: true,
    );
  }

  static AVAudioSessionPortDescription new1(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_AVAudioSessionPortDescription1,
      _lib._sel_new1,
    );
    return AVAudioSessionPortDescription._(
      _ret,
      _lib,
      retain: false,
      release: true,
    );
  }

  static AVAudioSessionPortDescription allocWithZone_(
    AVFAudio _lib,
    ffi.Pointer<_NSZone> zone,
  ) {
    final _ret = _lib._objc_msgSend_3(
      _lib._class_AVAudioSessionPortDescription1,
      _lib._sel_allocWithZone_1,
      zone,
    );
    return AVAudioSessionPortDescription._(
      _ret,
      _lib,
      retain: false,
      release: true,
    );
  }

  static AVAudioSessionPortDescription alloc(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_AVAudioSessionPortDescription1,
      _lib._sel_alloc1,
    );
    return AVAudioSessionPortDescription._(
      _ret,
      _lib,
      retain: false,
      release: true,
    );
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
    AVFAudio _lib,
    NSObject aTarget,
    ffi.Pointer<objc.ObjCSelector> aSelector,
    NSObject? anArgument,
  ) {
    _lib._objc_msgSend_14(
      _lib._class_AVAudioSessionPortDescription1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
      aTarget.pointer,
      aSelector,
      anArgument?.pointer ?? ffi.nullptr,
    );
  }

  static void cancelPreviousPerformRequestsWithTarget_(
    AVFAudio _lib,
    NSObject aTarget,
  ) {
    _lib._objc_msgSend_15(
      _lib._class_AVAudioSessionPortDescription1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_1,
      aTarget.pointer,
    );
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_AVAudioSessionPortDescription1,
      _lib._sel_accessInstanceVariablesDirectly1,
    );
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_AVAudioSessionPortDescription1,
      _lib._sel_useStoredAccessor1,
    );
  }

  static NSSet keyPathsForValuesAffectingValueForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    final _ret = _lib._objc_msgSend_63(
      _lib._class_AVAudioSessionPortDescription1,
      _lib._sel_keyPathsForValuesAffectingValueForKey_1,
      key.pointer,
    );
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    return _lib._objc_msgSend_64(
      _lib._class_AVAudioSessionPortDescription1,
      _lib._sel_automaticallyNotifiesObserversForKey_1,
      key.pointer,
    );
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
    AVFAudio _lib,
    NSArray keys,
    NSString dependentKey,
  ) {
    _lib._objc_msgSend_88(
      _lib._class_AVAudioSessionPortDescription1,
      _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
      keys.pointer,
      dependentKey.pointer,
    );
  }

  static NSArray classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_85(
      _lib._class_AVAudioSessionPortDescription1,
      _lib._sel_classFallbacksForKeyedArchiver1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_AVAudioSessionPortDescription1,
      _lib._sel_classForKeyedUnarchiver1,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

class AVAudioSessionDataSourceDescription extends NSObject {
  AVAudioSessionDataSourceDescription._(
    ffi.Pointer<objc.ObjCObject> pointer,
    AVFAudio lib, {
    bool retain = false,
    bool release = false,
  }) : super._(pointer, lib, retain: retain, release: release);

  /// Returns a [AVAudioSessionDataSourceDescription] that points to the same underlying object as [other].
  static AVAudioSessionDataSourceDescription castFrom<
    T extends objc.ObjCObjectBase
  >(AVFAudio lib, T other) {
    return AVAudioSessionDataSourceDescription._(
      other.pointer,
      lib,
      retain: true,
      release: true,
    );
  }

  /// Returns a [AVAudioSessionDataSourceDescription] that wraps the given raw object pointer.
  static AVAudioSessionDataSourceDescription castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCObject> other, {
    bool retain = false,
    bool release = false,
  }) {
    return AVAudioSessionDataSourceDescription._(
      other,
      lib,
      retain: retain,
      release: release,
    );
  }

  /// Returns whether [obj] is an instance of [AVAudioSessionDataSourceDescription].
  static bool isInstance(AVFAudio lib, objc.ObjCObjectBase obj) {
    return lib._objc_msgSend_0(
      obj.pointer,
      lib._sel_isKindOfClass_1,
      lib._class_AVAudioSessionDataSourceDescription1,
    );
  }

  NSNumber get dataSourceID {
    final _ret = _lib._objc_msgSend_814(this.pointer, _lib._sel_dataSourceID1);
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  NSString get dataSourceName {
    final _ret = _lib._objc_msgSend_21(this.pointer, _lib._sel_dataSourceName1);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString? get location {
    final _ret = _lib._objc_msgSend_44(this.pointer, _lib._sel_location1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString? get orientation {
    final _ret = _lib._objc_msgSend_44(this.pointer, _lib._sel_orientation1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSArray? get supportedPolarPatterns {
    final _ret = _lib._objc_msgSend_84(
      this.pointer,
      _lib._sel_supportedPolarPatterns1,
    );
    return _ret.address == 0
        ? null
        : NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSString? get selectedPolarPattern {
    final _ret = _lib._objc_msgSend_44(
      this.pointer,
      _lib._sel_selectedPolarPattern1,
    );
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString? get preferredPolarPattern {
    final _ret = _lib._objc_msgSend_44(
      this.pointer,
      _lib._sel_preferredPolarPattern1,
    );
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  bool setPreferredPolarPattern_error_(
    NSString? pattern,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError,
  ) {
    return _lib._objc_msgSend_1155(
      this.pointer,
      _lib._sel_setPreferredPolarPattern_error_1,
      pattern?.pointer ?? ffi.nullptr,
      outError,
    );
  }

  @override
  AVAudioSessionDataSourceDescription init() {
    final _ret = _lib._objc_msgSend_2(this.pointer, _lib._sel_init1);
    return AVAudioSessionDataSourceDescription._(
      _ret,
      _lib,
      retain: true,
      release: true,
    );
  }

  static AVAudioSessionDataSourceDescription new1(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_AVAudioSessionDataSourceDescription1,
      _lib._sel_new1,
    );
    return AVAudioSessionDataSourceDescription._(
      _ret,
      _lib,
      retain: false,
      release: true,
    );
  }

  static AVAudioSessionDataSourceDescription allocWithZone_(
    AVFAudio _lib,
    ffi.Pointer<_NSZone> zone,
  ) {
    final _ret = _lib._objc_msgSend_3(
      _lib._class_AVAudioSessionDataSourceDescription1,
      _lib._sel_allocWithZone_1,
      zone,
    );
    return AVAudioSessionDataSourceDescription._(
      _ret,
      _lib,
      retain: false,
      release: true,
    );
  }

  static AVAudioSessionDataSourceDescription alloc(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_AVAudioSessionDataSourceDescription1,
      _lib._sel_alloc1,
    );
    return AVAudioSessionDataSourceDescription._(
      _ret,
      _lib,
      retain: false,
      release: true,
    );
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
    AVFAudio _lib,
    NSObject aTarget,
    ffi.Pointer<objc.ObjCSelector> aSelector,
    NSObject? anArgument,
  ) {
    _lib._objc_msgSend_14(
      _lib._class_AVAudioSessionDataSourceDescription1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
      aTarget.pointer,
      aSelector,
      anArgument?.pointer ?? ffi.nullptr,
    );
  }

  static void cancelPreviousPerformRequestsWithTarget_(
    AVFAudio _lib,
    NSObject aTarget,
  ) {
    _lib._objc_msgSend_15(
      _lib._class_AVAudioSessionDataSourceDescription1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_1,
      aTarget.pointer,
    );
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_AVAudioSessionDataSourceDescription1,
      _lib._sel_accessInstanceVariablesDirectly1,
    );
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_AVAudioSessionDataSourceDescription1,
      _lib._sel_useStoredAccessor1,
    );
  }

  static NSSet keyPathsForValuesAffectingValueForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    final _ret = _lib._objc_msgSend_63(
      _lib._class_AVAudioSessionDataSourceDescription1,
      _lib._sel_keyPathsForValuesAffectingValueForKey_1,
      key.pointer,
    );
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    return _lib._objc_msgSend_64(
      _lib._class_AVAudioSessionDataSourceDescription1,
      _lib._sel_automaticallyNotifiesObserversForKey_1,
      key.pointer,
    );
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
    AVFAudio _lib,
    NSArray keys,
    NSString dependentKey,
  ) {
    _lib._objc_msgSend_88(
      _lib._class_AVAudioSessionDataSourceDescription1,
      _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
      keys.pointer,
      dependentKey.pointer,
    );
  }

  static NSArray classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_85(
      _lib._class_AVAudioSessionDataSourceDescription1,
      _lib._sel_classFallbacksForKeyedArchiver1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_AVAudioSessionDataSourceDescription1,
      _lib._sel_classForKeyedUnarchiver1,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

abstract class AVAudioSessionRenderingMode {
  static const int AVAudioSessionRenderingModeNotApplicable = 0;
  static const int AVAudioSessionRenderingModeMonoStereo = 1;
  static const int AVAudioSessionRenderingModeSurround = 2;
  static const int AVAudioSessionRenderingModeSpatialAudio = 3;
  static const int AVAudioSessionRenderingModeDolbyAudio = 4;
  static const int AVAudioSessionRenderingModeDolbyAtmos = 5;
}

abstract class AVAudioSessionSetActiveOptions {
  static const int AVAudioSessionSetActiveOptionNotifyOthersOnDeactivation = 1;
}

abstract class AVAudioSessionActivationOptions {
  static const int AVAudioSessionActivationOptionNone = 0;
}

void _ObjCBlock_ffiVoid_bool_NSError_fnPtrTrampoline(
  ffi.Pointer<objc.ObjCBlock> block,
  bool arg0,
  ffi.Pointer<objc.ObjCObject> arg1,
) => block.ref.target
    .cast<
      ffi.NativeFunction<
        ffi.Void Function(ffi.Bool arg0, ffi.Pointer<objc.ObjCObject> arg1)
      >
    >()
    .asFunction<void Function(bool, ffi.Pointer<objc.ObjCObject>)>()(
  arg0,
  arg1,
);
final _ObjCBlock_ffiVoid_bool_NSError_closureRegistry =
    <int, void Function(bool, ffi.Pointer<objc.ObjCObject>)>{};
int _ObjCBlock_ffiVoid_bool_NSError_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void> _ObjCBlock_ffiVoid_bool_NSError_registerClosure(
  void Function(bool, ffi.Pointer<objc.ObjCObject>) fn,
) {
  final id = ++_ObjCBlock_ffiVoid_bool_NSError_closureRegistryIndex;
  _ObjCBlock_ffiVoid_bool_NSError_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

void _ObjCBlock_ffiVoid_bool_NSError_closureTrampoline(
  ffi.Pointer<objc.ObjCBlock> block,
  bool arg0,
  ffi.Pointer<objc.ObjCObject> arg1,
) => _ObjCBlock_ffiVoid_bool_NSError_closureRegistry[block.ref.target.address]!(
  arg0,
  arg1,
);

class ObjCBlock_ffiVoid_bool_NSError extends objc.ObjCBlockBase {
  ObjCBlock_ffiVoid_bool_NSError._(
    ffi.Pointer<objc.ObjCBlock> pointer,
    this._lib, {
    bool retain = false,
    bool release = true,
  }) : super(pointer, retain: retain, release: release);

  AVFAudio _lib;

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_ffiVoid_bool_NSError castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCBlock> pointer, {
    bool retain = false,
    bool release = false,
  }) {
    return ObjCBlock_ffiVoid_bool_NSError._(
      pointer,
      lib,
      retain: retain,
      release: release,
    );
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_bool_NSError.fromFunctionPointer(
    AVFAudio lib,
    ffi.Pointer<
      ffi.NativeFunction<
        ffi.Void Function(ffi.Bool arg0, ffi.Pointer<objc.ObjCObject> arg1)
      >
    > ptr,
  ) : this._(objc.newBlock(
        _cFuncTrampoline ??=
            ffi.Pointer.fromFunction<
              ffi.Void Function(
                ffi.Pointer<objc.ObjCBlock>,
                ffi.Bool,
                ffi.Pointer<objc.ObjCObject>,
              )
            >(_ObjCBlock_ffiVoid_bool_NSError_fnPtrTrampoline).cast(),
        ptr.cast(),
      ), lib);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_bool_NSError.fromFunction(
    AVFAudio lib,
    void Function(bool, NSError?) fn,
  ) : this._(objc.newBlock(
        _dartFuncTrampoline ??=
            ffi.Pointer.fromFunction<
              ffi.Void Function(
                ffi.Pointer<objc.ObjCBlock>,
                ffi.Bool,
                ffi.Pointer<objc.ObjCObject>,
              )
            >(_ObjCBlock_ffiVoid_bool_NSError_closureTrampoline).cast(),
        _ObjCBlock_ffiVoid_bool_NSError_registerClosure((
          bool arg0,
          ffi.Pointer<objc.ObjCObject> arg1,
        ) => fn(
          arg0,
          arg1.address == 0
              ? null
              : NSError._(arg1, lib, retain: true, release: true),
        )),
      ), lib);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_bool_NSError.listener(
    AVFAudio lib,
    void Function(bool, NSError?) fn,
  ) : this._(objc.newBlock(
        (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
              ffi.Void Function(
                ffi.Pointer<objc.ObjCBlock>,
                ffi.Bool,
                ffi.Pointer<objc.ObjCObject>,
              )
            >.listener(
              _ObjCBlock_ffiVoid_bool_NSError_closureTrampoline,
            )..keepIsolateAlive = false)
            .nativeFunction
            .cast(),
        _ObjCBlock_ffiVoid_bool_NSError_registerClosure((
          bool arg0,
          ffi.Pointer<objc.ObjCObject> arg1,
        ) => fn(
          arg0,
          arg1.address == 0
              ? null
              : NSError._(arg1, lib, retain: true, release: true),
        )),
      ), lib);
  static ffi.NativeCallable<
    ffi.Void Function(
      ffi.Pointer<objc.ObjCBlock>,
      ffi.Bool,
      ffi.Pointer<objc.ObjCObject>,
    )
  >? _dartFuncListenerTrampoline;

  void call(bool arg0, NSError? arg1) => pointer.ref.invoke
      .cast<
        ffi.NativeFunction<
          ffi.Void Function(
            ffi.Pointer<objc.ObjCBlock> block,
            ffi.Bool arg0,
            ffi.Pointer<objc.ObjCObject> arg1,
          )
        >
      >()
      .asFunction<
        void Function(
          ffi.Pointer<objc.ObjCBlock>,
          bool,
          ffi.Pointer<objc.ObjCObject>,
        )
      >()(pointer, arg0, arg1?.pointer ?? ffi.nullptr);
}

abstract class AVAudioStereoOrientation {
  static const int AVAudioStereoOrientationNone = 0;
  static const int AVAudioStereoOrientationPortrait = 1;
  static const int AVAudioStereoOrientationPortraitUpsideDown = 2;
  static const int AVAudioStereoOrientationLandscapeRight = 3;
  static const int AVAudioStereoOrientationLandscapeLeft = 4;
}

abstract class AVAudioSessionPromptStyle {
  static const int AVAudioSessionPromptStyleNone = 1852796517;
  static const int AVAudioSessionPromptStyleShort = 1936224884;
  static const int AVAudioSessionPromptStyleNormal = 1852992876;
}

class AVAudioSessionRouteDescription extends NSObject {
  AVAudioSessionRouteDescription._(
    ffi.Pointer<objc.ObjCObject> pointer,
    AVFAudio lib, {
    bool retain = false,
    bool release = false,
  }) : super._(pointer, lib, retain: retain, release: release);

  /// Returns a [AVAudioSessionRouteDescription] that points to the same underlying object as [other].
  static AVAudioSessionRouteDescription castFrom<T extends objc.ObjCObjectBase>(
    AVFAudio lib,
    T other,
  ) {
    return AVAudioSessionRouteDescription._(
      other.pointer,
      lib,
      retain: true,
      release: true,
    );
  }

  /// Returns a [AVAudioSessionRouteDescription] that wraps the given raw object pointer.
  static AVAudioSessionRouteDescription castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCObject> other, {
    bool retain = false,
    bool release = false,
  }) {
    return AVAudioSessionRouteDescription._(
      other,
      lib,
      retain: retain,
      release: release,
    );
  }

  /// Returns whether [obj] is an instance of [AVAudioSessionRouteDescription].
  static bool isInstance(AVFAudio lib, objc.ObjCObjectBase obj) {
    return lib._objc_msgSend_0(
      obj.pointer,
      lib._sel_isKindOfClass_1,
      lib._class_AVAudioSessionRouteDescription1,
    );
  }

  NSArray get inputs {
    final _ret = _lib._objc_msgSend_85(this.pointer, _lib._sel_inputs1);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSArray get outputs {
    final _ret = _lib._objc_msgSend_85(this.pointer, _lib._sel_outputs1);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  @override
  AVAudioSessionRouteDescription init() {
    final _ret = _lib._objc_msgSend_2(this.pointer, _lib._sel_init1);
    return AVAudioSessionRouteDescription._(
      _ret,
      _lib,
      retain: true,
      release: true,
    );
  }

  static AVAudioSessionRouteDescription new1(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_AVAudioSessionRouteDescription1,
      _lib._sel_new1,
    );
    return AVAudioSessionRouteDescription._(
      _ret,
      _lib,
      retain: false,
      release: true,
    );
  }

  static AVAudioSessionRouteDescription allocWithZone_(
    AVFAudio _lib,
    ffi.Pointer<_NSZone> zone,
  ) {
    final _ret = _lib._objc_msgSend_3(
      _lib._class_AVAudioSessionRouteDescription1,
      _lib._sel_allocWithZone_1,
      zone,
    );
    return AVAudioSessionRouteDescription._(
      _ret,
      _lib,
      retain: false,
      release: true,
    );
  }

  static AVAudioSessionRouteDescription alloc(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_AVAudioSessionRouteDescription1,
      _lib._sel_alloc1,
    );
    return AVAudioSessionRouteDescription._(
      _ret,
      _lib,
      retain: false,
      release: true,
    );
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
    AVFAudio _lib,
    NSObject aTarget,
    ffi.Pointer<objc.ObjCSelector> aSelector,
    NSObject? anArgument,
  ) {
    _lib._objc_msgSend_14(
      _lib._class_AVAudioSessionRouteDescription1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
      aTarget.pointer,
      aSelector,
      anArgument?.pointer ?? ffi.nullptr,
    );
  }

  static void cancelPreviousPerformRequestsWithTarget_(
    AVFAudio _lib,
    NSObject aTarget,
  ) {
    _lib._objc_msgSend_15(
      _lib._class_AVAudioSessionRouteDescription1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_1,
      aTarget.pointer,
    );
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_AVAudioSessionRouteDescription1,
      _lib._sel_accessInstanceVariablesDirectly1,
    );
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_AVAudioSessionRouteDescription1,
      _lib._sel_useStoredAccessor1,
    );
  }

  static NSSet keyPathsForValuesAffectingValueForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    final _ret = _lib._objc_msgSend_63(
      _lib._class_AVAudioSessionRouteDescription1,
      _lib._sel_keyPathsForValuesAffectingValueForKey_1,
      key.pointer,
    );
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    return _lib._objc_msgSend_64(
      _lib._class_AVAudioSessionRouteDescription1,
      _lib._sel_automaticallyNotifiesObserversForKey_1,
      key.pointer,
    );
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
    AVFAudio _lib,
    NSArray keys,
    NSString dependentKey,
  ) {
    _lib._objc_msgSend_88(
      _lib._class_AVAudioSessionRouteDescription1,
      _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
      keys.pointer,
      dependentKey.pointer,
    );
  }

  static NSArray classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_85(
      _lib._class_AVAudioSessionRouteDescription1,
      _lib._sel_classFallbacksForKeyedArchiver1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_AVAudioSessionRouteDescription1,
      _lib._sel_classForKeyedUnarchiver1,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

abstract class AVAudioSessionIOType {
  static const int AVAudioSessionIOTypeNotSpecified = 0;
  static const int AVAudioSessionIOTypeAggregated = 1;
}

class AVAudioPlayer extends NSObject {
  AVAudioPlayer._(
    ffi.Pointer<objc.ObjCObject> pointer,
    AVFAudio lib, {
    bool retain = false,
    bool release = false,
  }) : super._(pointer, lib, retain: retain, release: release);

  /// Returns a [AVAudioPlayer] that points to the same underlying object as [other].
  static AVAudioPlayer castFrom<T extends objc.ObjCObjectBase>(
    AVFAudio lib,
    T other,
  ) {
    return AVAudioPlayer._(other.pointer, lib, retain: true, release: true);
  }

  /// Returns a [AVAudioPlayer] that wraps the given raw object pointer.
  static AVAudioPlayer castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCObject> other, {
    bool retain = false,
    bool release = false,
  }) {
    return AVAudioPlayer._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [AVAudioPlayer].
  static bool isInstance(AVFAudio lib, objc.ObjCObjectBase obj) {
    return lib._objc_msgSend_0(
      obj.pointer,
      lib._sel_isKindOfClass_1,
      lib._class_AVAudioPlayer1,
    );
  }

  AVAudioPlayer? initWithContentsOfURL_error_(
    NSURL url,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError,
  ) {
    final _ret = _lib._objc_msgSend_842(
      this.pointer,
      _lib._sel_initWithContentsOfURL_error_1,
      url.pointer,
      outError,
    );
    return _ret.address == 0
        ? null
        : AVAudioPlayer._(_ret, _lib, retain: true, release: true);
  }

  AVAudioPlayer? initWithData_error_(
    NSData data,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError,
  ) {
    final _ret = _lib._objc_msgSend_1172(
      this.pointer,
      _lib._sel_initWithData_error_1,
      data.pointer,
      outError,
    );
    return _ret.address == 0
        ? null
        : AVAudioPlayer._(_ret, _lib, retain: true, release: true);
  }

  AVAudioPlayer? initWithContentsOfURL_fileTypeHint_error_(
    NSURL url,
    NSString? utiString,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError,
  ) {
    final _ret = _lib._objc_msgSend_1173(
      this.pointer,
      _lib._sel_initWithContentsOfURL_fileTypeHint_error_1,
      url.pointer,
      utiString?.pointer ?? ffi.nullptr,
      outError,
    );
    return _ret.address == 0
        ? null
        : AVAudioPlayer._(_ret, _lib, retain: true, release: true);
  }

  AVAudioPlayer? initWithData_fileTypeHint_error_(
    NSData data,
    NSString? utiString,
    ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError,
  ) {
    final _ret = _lib._objc_msgSend_1174(
      this.pointer,
      _lib._sel_initWithData_fileTypeHint_error_1,
      data.pointer,
      utiString?.pointer ?? ffi.nullptr,
      outError,
    );
    return _ret.address == 0
        ? null
        : AVAudioPlayer._(_ret, _lib, retain: true, release: true);
  }

  bool prepareToPlay() {
    return _lib._objc_msgSend_12(this.pointer, _lib._sel_prepareToPlay1);
  }

  bool play() {
    return _lib._objc_msgSend_12(this.pointer, _lib._sel_play1);
  }

  bool playAtTime_(double time) {
    return _lib._objc_msgSend_1175(this.pointer, _lib._sel_playAtTime_1, time);
  }

  void pause() {
    _lib._objc_msgSend_1(this.pointer, _lib._sel_pause1);
  }

  void stop() {
    _lib._objc_msgSend_1(this.pointer, _lib._sel_stop1);
  }

  bool get playing {
    return _lib._objc_msgSend_12(this.pointer, _lib._sel_isPlaying1);
  }

  int get numberOfChannels {
    return _lib._objc_msgSend_10(this.pointer, _lib._sel_numberOfChannels1);
  }

  double get duration {
    return objc.useMsgSendVariants
        ? _lib._objc_msgSend_165_fpret(this.pointer, _lib._sel_duration1)
        : _lib._objc_msgSend_165(this.pointer, _lib._sel_duration1);
  }

  NSString? get currentDevice {
    final _ret = _lib._objc_msgSend_44(this.pointer, _lib._sel_currentDevice1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  set currentDevice(NSString? value) {
    return _lib._objc_msgSend_545(
      this.pointer,
      _lib._sel_setCurrentDevice_1,
      value?.pointer ?? ffi.nullptr,
    );
  }

  NSObject? get delegate {
    final _ret = _lib._objc_msgSend_17(this.pointer, _lib._sel_delegate1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  set delegate(NSObject? value) {
    return _lib._objc_msgSend_416(
      this.pointer,
      _lib._sel_setDelegate_1,
      value?.pointer ?? ffi.nullptr,
    );
  }

  NSURL? get url {
    final _ret = _lib._objc_msgSend_45(this.pointer, _lib._sel_url1);
    return _ret.address == 0
        ? null
        : NSURL._(_ret, _lib, retain: true, release: true);
  }

  NSData? get data {
    final _ret = _lib._objc_msgSend_286(this.pointer, _lib._sel_data1);
    return _ret.address == 0
        ? null
        : NSData._(_ret, _lib, retain: true, release: true);
  }

  double get pan {
    return objc.useMsgSendVariants
        ? _lib._objc_msgSend_239_fpret(this.pointer, _lib._sel_pan1)
        : _lib._objc_msgSend_239(this.pointer, _lib._sel_pan1);
  }

  set pan(double value) {
    return _lib._objc_msgSend_881(this.pointer, _lib._sel_setPan_1, value);
  }

  double get volume {
    return objc.useMsgSendVariants
        ? _lib._objc_msgSend_239_fpret(this.pointer, _lib._sel_volume1)
        : _lib._objc_msgSend_239(this.pointer, _lib._sel_volume1);
  }

  set volume(double value) {
    return _lib._objc_msgSend_881(this.pointer, _lib._sel_setVolume_1, value);
  }

  void setVolume_fadeDuration_(double volume, double duration) {
    _lib._objc_msgSend_1176(
      this.pointer,
      _lib._sel_setVolume_fadeDuration_1,
      volume,
      duration,
    );
  }

  bool get enableRate {
    return _lib._objc_msgSend_12(this.pointer, _lib._sel_enableRate1);
  }

  set enableRate(bool value) {
    return _lib._objc_msgSend_527(
      this.pointer,
      _lib._sel_setEnableRate_1,
      value,
    );
  }

  double get rate {
    return objc.useMsgSendVariants
        ? _lib._objc_msgSend_239_fpret(this.pointer, _lib._sel_rate1)
        : _lib._objc_msgSend_239(this.pointer, _lib._sel_rate1);
  }

  set rate(double value) {
    return _lib._objc_msgSend_881(this.pointer, _lib._sel_setRate_1, value);
  }

  double get currentTime {
    return objc.useMsgSendVariants
        ? _lib._objc_msgSend_165_fpret(this.pointer, _lib._sel_currentTime1)
        : _lib._objc_msgSend_165(this.pointer, _lib._sel_currentTime1);
  }

  set currentTime(double value) {
    return _lib._objc_msgSend_542(
      this.pointer,
      _lib._sel_setCurrentTime_1,
      value,
    );
  }

  double get deviceCurrentTime {
    return objc.useMsgSendVariants
        ? _lib._objc_msgSend_165_fpret(
          this.pointer,
          _lib._sel_deviceCurrentTime1,
        )
        : _lib._objc_msgSend_165(this.pointer, _lib._sel_deviceCurrentTime1);
  }

  int get numberOfLoops {
    return _lib._objc_msgSend_83(this.pointer, _lib._sel_numberOfLoops1);
  }

  set numberOfLoops(int value) {
    return _lib._objc_msgSend_635(
      this.pointer,
      _lib._sel_setNumberOfLoops_1,
      value,
    );
  }

  NSDictionary get settings {
    final _ret = _lib._objc_msgSend_181(this.pointer, _lib._sel_settings1);
    return NSDictionary._(_ret, _lib, retain: true, release: true);
  }

  AVAudioFormat get format {
    final _ret = _lib._objc_msgSend_1193(this.pointer, _lib._sel_format1);
    return AVAudioFormat._(_ret, _lib, retain: true, release: true);
  }

  bool get meteringEnabled {
    return _lib._objc_msgSend_12(this.pointer, _lib._sel_isMeteringEnabled1);
  }

  set meteringEnabled(bool value) {
    return _lib._objc_msgSend_527(
      this.pointer,
      _lib._sel_setMeteringEnabled_1,
      value,
    );
  }

  void updateMeters() {
    _lib._objc_msgSend_1(this.pointer, _lib._sel_updateMeters1);
  }

  double peakPowerForChannel_(int channelNumber) {
    return objc.useMsgSendVariants
        ? _lib._objc_msgSend_1194_fpret(
          this.pointer,
          _lib._sel_peakPowerForChannel_1,
          channelNumber,
        )
        : _lib._objc_msgSend_1194(
          this.pointer,
          _lib._sel_peakPowerForChannel_1,
          channelNumber,
        );
  }

  double averagePowerForChannel_(int channelNumber) {
    return objc.useMsgSendVariants
        ? _lib._objc_msgSend_1194_fpret(
          this.pointer,
          _lib._sel_averagePowerForChannel_1,
          channelNumber,
        )
        : _lib._objc_msgSend_1194(
          this.pointer,
          _lib._sel_averagePowerForChannel_1,
          channelNumber,
        );
  }

  NSArray? get channelAssignments {
    final _ret = _lib._objc_msgSend_84(
      this.pointer,
      _lib._sel_channelAssignments1,
    );
    return _ret.address == 0
        ? null
        : NSArray._(_ret, _lib, retain: true, release: true);
  }

  set channelAssignments(NSArray? value) {
    return _lib._objc_msgSend_1053(
      this.pointer,
      _lib._sel_setChannelAssignments_1,
      value?.pointer ?? ffi.nullptr,
    );
  }

  @override
  AVAudioPlayer init() {
    final _ret = _lib._objc_msgSend_2(this.pointer, _lib._sel_init1);
    return AVAudioPlayer._(_ret, _lib, retain: true, release: true);
  }

  static AVAudioPlayer new1(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_AVAudioPlayer1,
      _lib._sel_new1,
    );
    return AVAudioPlayer._(_ret, _lib, retain: false, release: true);
  }

  static AVAudioPlayer allocWithZone_(
    AVFAudio _lib,
    ffi.Pointer<_NSZone> zone,
  ) {
    final _ret = _lib._objc_msgSend_3(
      _lib._class_AVAudioPlayer1,
      _lib._sel_allocWithZone_1,
      zone,
    );
    return AVAudioPlayer._(_ret, _lib, retain: false, release: true);
  }

  static AVAudioPlayer alloc(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_AVAudioPlayer1,
      _lib._sel_alloc1,
    );
    return AVAudioPlayer._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
    AVFAudio _lib,
    NSObject aTarget,
    ffi.Pointer<objc.ObjCSelector> aSelector,
    NSObject? anArgument,
  ) {
    _lib._objc_msgSend_14(
      _lib._class_AVAudioPlayer1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
      aTarget.pointer,
      aSelector,
      anArgument?.pointer ?? ffi.nullptr,
    );
  }

  static void cancelPreviousPerformRequestsWithTarget_(
    AVFAudio _lib,
    NSObject aTarget,
  ) {
    _lib._objc_msgSend_15(
      _lib._class_AVAudioPlayer1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_1,
      aTarget.pointer,
    );
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_AVAudioPlayer1,
      _lib._sel_accessInstanceVariablesDirectly1,
    );
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_AVAudioPlayer1,
      _lib._sel_useStoredAccessor1,
    );
  }

  static NSSet keyPathsForValuesAffectingValueForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    final _ret = _lib._objc_msgSend_63(
      _lib._class_AVAudioPlayer1,
      _lib._sel_keyPathsForValuesAffectingValueForKey_1,
      key.pointer,
    );
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    return _lib._objc_msgSend_64(
      _lib._class_AVAudioPlayer1,
      _lib._sel_automaticallyNotifiesObserversForKey_1,
      key.pointer,
    );
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
    AVFAudio _lib,
    NSArray keys,
    NSString dependentKey,
  ) {
    _lib._objc_msgSend_88(
      _lib._class_AVAudioPlayer1,
      _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
      keys.pointer,
      dependentKey.pointer,
    );
  }

  static NSArray classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_85(
      _lib._class_AVAudioPlayer1,
      _lib._sel_classFallbacksForKeyedArchiver1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_AVAudioPlayer1,
      _lib._sel_classForKeyedUnarchiver1,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

class AVAudioFormat extends NSObject {
  AVAudioFormat._(
    ffi.Pointer<objc.ObjCObject> pointer,
    AVFAudio lib, {
    bool retain = false,
    bool release = false,
  }) : super._(pointer, lib, retain: retain, release: release);

  /// Returns a [AVAudioFormat] that points to the same underlying object as [other].
  static AVAudioFormat castFrom<T extends objc.ObjCObjectBase>(
    AVFAudio lib,
    T other,
  ) {
    return AVAudioFormat._(other.pointer, lib, retain: true, release: true);
  }

  /// Returns a [AVAudioFormat] that wraps the given raw object pointer.
  static AVAudioFormat castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCObject> other, {
    bool retain = false,
    bool release = false,
  }) {
    return AVAudioFormat._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [AVAudioFormat].
  static bool isInstance(AVFAudio lib, objc.ObjCObjectBase obj) {
    return lib._objc_msgSend_0(
      obj.pointer,
      lib._sel_isKindOfClass_1,
      lib._class_AVAudioFormat1,
    );
  }

  AVAudioFormat? initWithStreamDescription_(
    ffi.Pointer<AudioStreamBasicDescription> asbd,
  ) {
    final _ret = _lib._objc_msgSend_1177(
      this.pointer,
      _lib._sel_initWithStreamDescription_1,
      asbd,
    );
    return _ret.address == 0
        ? null
        : AVAudioFormat._(_ret, _lib, retain: true, release: true);
  }

  AVAudioFormat? initWithStreamDescription_channelLayout_(
    ffi.Pointer<AudioStreamBasicDescription> asbd,
    AVAudioChannelLayout? layout,
  ) {
    final _ret = _lib._objc_msgSend_1183(
      this.pointer,
      _lib._sel_initWithStreamDescription_channelLayout_1,
      asbd,
      layout?.pointer ?? ffi.nullptr,
    );
    return _ret.address == 0
        ? null
        : AVAudioFormat._(_ret, _lib, retain: true, release: true);
  }

  AVAudioFormat? initStandardFormatWithSampleRate_channels_(
    double sampleRate,
    int channels,
  ) {
    final _ret = _lib._objc_msgSend_1184(
      this.pointer,
      _lib._sel_initStandardFormatWithSampleRate_channels_1,
      sampleRate,
      channels,
    );
    return _ret.address == 0
        ? null
        : AVAudioFormat._(_ret, _lib, retain: true, release: true);
  }

  AVAudioFormat initStandardFormatWithSampleRate_channelLayout_(
    double sampleRate,
    AVAudioChannelLayout layout,
  ) {
    final _ret = _lib._objc_msgSend_1185(
      this.pointer,
      _lib._sel_initStandardFormatWithSampleRate_channelLayout_1,
      sampleRate,
      layout.pointer,
    );
    return AVAudioFormat._(_ret, _lib, retain: true, release: true);
  }

  AVAudioFormat? initWithCommonFormat_sampleRate_channels_interleaved_(
    int format,
    double sampleRate,
    int channels,
    bool interleaved,
  ) {
    final _ret = _lib._objc_msgSend_1186(
      this.pointer,
      _lib._sel_initWithCommonFormat_sampleRate_channels_interleaved_1,
      format,
      sampleRate,
      channels,
      interleaved,
    );
    return _ret.address == 0
        ? null
        : AVAudioFormat._(_ret, _lib, retain: true, release: true);
  }

  AVAudioFormat initWithCommonFormat_sampleRate_interleaved_channelLayout_(
    int format,
    double sampleRate,
    bool interleaved,
    AVAudioChannelLayout layout,
  ) {
    final _ret = _lib._objc_msgSend_1187(
      this.pointer,
      _lib._sel_initWithCommonFormat_sampleRate_interleaved_channelLayout_1,
      format,
      sampleRate,
      interleaved,
      layout.pointer,
    );
    return AVAudioFormat._(_ret, _lib, retain: true, release: true);
  }

  AVAudioFormat? initWithSettings_(NSDictionary settings) {
    final _ret = _lib._objc_msgSend_851(
      this.pointer,
      _lib._sel_initWithSettings_1,
      settings.pointer,
    );
    return _ret.address == 0
        ? null
        : AVAudioFormat._(_ret, _lib, retain: true, release: true);
  }

  AVAudioFormat initWithCMAudioFormatDescription_(
    ffi.Pointer<opaqueCMFormatDescription> formatDescription,
  ) {
    final _ret = _lib._objc_msgSend_1188(
      this.pointer,
      _lib._sel_initWithCMAudioFormatDescription_1,
      formatDescription,
    );
    return AVAudioFormat._(_ret, _lib, retain: true, release: true);
  }

  bool isEqual_(NSObject object) {
    return _lib._objc_msgSend_0(
      this.pointer,
      _lib._sel_isEqual_1,
      object.pointer,
    );
  }

  bool get standard {
    return _lib._objc_msgSend_12(this.pointer, _lib._sel_isStandard1);
  }

  int get commonFormat {
    return _lib._objc_msgSend_1189(this.pointer, _lib._sel_commonFormat1);
  }

  int get channelCount {
    return _lib._objc_msgSend_1182(this.pointer, _lib._sel_channelCount1);
  }

  double get sampleRate {
    return objc.useMsgSendVariants
        ? _lib._objc_msgSend_165_fpret(this.pointer, _lib._sel_sampleRate1)
        : _lib._objc_msgSend_165(this.pointer, _lib._sel_sampleRate1);
  }

  bool get interleaved {
    return _lib._objc_msgSend_12(this.pointer, _lib._sel_isInterleaved1);
  }

  ffi.Pointer<AudioStreamBasicDescription> get streamDescription {
    return _lib._objc_msgSend_1190(this.pointer, _lib._sel_streamDescription1);
  }

  AVAudioChannelLayout? get channelLayout {
    final _ret = _lib._objc_msgSend_1191(
      this.pointer,
      _lib._sel_channelLayout1,
    );
    return _ret.address == 0
        ? null
        : AVAudioChannelLayout._(_ret, _lib, retain: true, release: true);
  }

  NSData? get magicCookie {
    final _ret = _lib._objc_msgSend_286(this.pointer, _lib._sel_magicCookie1);
    return _ret.address == 0
        ? null
        : NSData._(_ret, _lib, retain: true, release: true);
  }

  set magicCookie(NSData? value) {
    return _lib._objc_msgSend_1021(
      this.pointer,
      _lib._sel_setMagicCookie_1,
      value?.pointer ?? ffi.nullptr,
    );
  }

  NSDictionary get settings {
    final _ret = _lib._objc_msgSend_181(this.pointer, _lib._sel_settings1);
    return NSDictionary._(_ret, _lib, retain: true, release: true);
  }

  ffi.Pointer<opaqueCMFormatDescription> get formatDescription {
    return _lib._objc_msgSend_1192(this.pointer, _lib._sel_formatDescription1);
  }

  @override
  AVAudioFormat init() {
    final _ret = _lib._objc_msgSend_2(this.pointer, _lib._sel_init1);
    return AVAudioFormat._(_ret, _lib, retain: true, release: true);
  }

  static AVAudioFormat new1(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_AVAudioFormat1,
      _lib._sel_new1,
    );
    return AVAudioFormat._(_ret, _lib, retain: false, release: true);
  }

  static AVAudioFormat allocWithZone_(
    AVFAudio _lib,
    ffi.Pointer<_NSZone> zone,
  ) {
    final _ret = _lib._objc_msgSend_3(
      _lib._class_AVAudioFormat1,
      _lib._sel_allocWithZone_1,
      zone,
    );
    return AVAudioFormat._(_ret, _lib, retain: false, release: true);
  }

  static AVAudioFormat alloc(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_AVAudioFormat1,
      _lib._sel_alloc1,
    );
    return AVAudioFormat._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
    AVFAudio _lib,
    NSObject aTarget,
    ffi.Pointer<objc.ObjCSelector> aSelector,
    NSObject? anArgument,
  ) {
    _lib._objc_msgSend_14(
      _lib._class_AVAudioFormat1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
      aTarget.pointer,
      aSelector,
      anArgument?.pointer ?? ffi.nullptr,
    );
  }

  static void cancelPreviousPerformRequestsWithTarget_(
    AVFAudio _lib,
    NSObject aTarget,
  ) {
    _lib._objc_msgSend_15(
      _lib._class_AVAudioFormat1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_1,
      aTarget.pointer,
    );
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_AVAudioFormat1,
      _lib._sel_accessInstanceVariablesDirectly1,
    );
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_AVAudioFormat1,
      _lib._sel_useStoredAccessor1,
    );
  }

  static NSSet keyPathsForValuesAffectingValueForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    final _ret = _lib._objc_msgSend_63(
      _lib._class_AVAudioFormat1,
      _lib._sel_keyPathsForValuesAffectingValueForKey_1,
      key.pointer,
    );
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    return _lib._objc_msgSend_64(
      _lib._class_AVAudioFormat1,
      _lib._sel_automaticallyNotifiesObserversForKey_1,
      key.pointer,
    );
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
    AVFAudio _lib,
    NSArray keys,
    NSString dependentKey,
  ) {
    _lib._objc_msgSend_88(
      _lib._class_AVAudioFormat1,
      _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
      keys.pointer,
      dependentKey.pointer,
    );
  }

  static NSArray classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_85(
      _lib._class_AVAudioFormat1,
      _lib._sel_classFallbacksForKeyedArchiver1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_AVAudioFormat1,
      _lib._sel_classForKeyedUnarchiver1,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

final class AudioStreamBasicDescription extends ffi.Struct {
  @ffi.Double()
  external double mSampleRate;

  @ffi.UnsignedInt()
  external int mFormatID;

  @ffi.UnsignedInt()
  external int mFormatFlags;

  @ffi.UnsignedInt()
  external int mBytesPerPacket;

  @ffi.UnsignedInt()
  external int mFramesPerPacket;

  @ffi.UnsignedInt()
  external int mBytesPerFrame;

  @ffi.UnsignedInt()
  external int mChannelsPerFrame;

  @ffi.UnsignedInt()
  external int mBitsPerChannel;

  @ffi.UnsignedInt()
  external int mReserved;
}

class AVAudioChannelLayout extends NSObject {
  AVAudioChannelLayout._(
    ffi.Pointer<objc.ObjCObject> pointer,
    AVFAudio lib, {
    bool retain = false,
    bool release = false,
  }) : super._(pointer, lib, retain: retain, release: release);

  /// Returns a [AVAudioChannelLayout] that points to the same underlying object as [other].
  static AVAudioChannelLayout castFrom<T extends objc.ObjCObjectBase>(
    AVFAudio lib,
    T other,
  ) {
    return AVAudioChannelLayout._(
      other.pointer,
      lib,
      retain: true,
      release: true,
    );
  }

  /// Returns a [AVAudioChannelLayout] that wraps the given raw object pointer.
  static AVAudioChannelLayout castFromPointer(
    AVFAudio lib,
    ffi.Pointer<objc.ObjCObject> other, {
    bool retain = false,
    bool release = false,
  }) {
    return AVAudioChannelLayout._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [AVAudioChannelLayout].
  static bool isInstance(AVFAudio lib, objc.ObjCObjectBase obj) {
    return lib._objc_msgSend_0(
      obj.pointer,
      lib._sel_isKindOfClass_1,
      lib._class_AVAudioChannelLayout1,
    );
  }

  @override
  AVAudioChannelLayout init() {
    final _ret = _lib._objc_msgSend_2(this.pointer, _lib._sel_init1);
    return AVAudioChannelLayout._(_ret, _lib, retain: true, release: true);
  }

  AVAudioChannelLayout? initWithLayoutTag_(int layoutTag) {
    final _ret = _lib._objc_msgSend_1178(
      this.pointer,
      _lib._sel_initWithLayoutTag_1,
      layoutTag,
    );
    return _ret.address == 0
        ? null
        : AVAudioChannelLayout._(_ret, _lib, retain: true, release: true);
  }

  AVAudioChannelLayout initWithLayout_(ffi.Pointer<AudioChannelLayout> layout) {
    final _ret = _lib._objc_msgSend_1179(
      this.pointer,
      _lib._sel_initWithLayout_1,
      layout,
    );
    return AVAudioChannelLayout._(_ret, _lib, retain: true, release: true);
  }

  bool isEqual_(NSObject object) {
    return _lib._objc_msgSend_0(
      this.pointer,
      _lib._sel_isEqual_1,
      object.pointer,
    );
  }

  static AVAudioChannelLayout layoutWithLayoutTag_(
    AVFAudio _lib,
    int layoutTag,
  ) {
    final _ret = _lib._objc_msgSend_1180(
      _lib._class_AVAudioChannelLayout1,
      _lib._sel_layoutWithLayoutTag_1,
      layoutTag,
    );
    return AVAudioChannelLayout._(_ret, _lib, retain: true, release: true);
  }

  static AVAudioChannelLayout layoutWithLayout_(
    AVFAudio _lib,
    ffi.Pointer<AudioChannelLayout> layout,
  ) {
    final _ret = _lib._objc_msgSend_1179(
      _lib._class_AVAudioChannelLayout1,
      _lib._sel_layoutWithLayout_1,
      layout,
    );
    return AVAudioChannelLayout._(_ret, _lib, retain: true, release: true);
  }

  int get layoutTag {
    return _lib._objc_msgSend_214(this.pointer, _lib._sel_layoutTag1);
  }

  ffi.Pointer<AudioChannelLayout> get layout {
    return _lib._objc_msgSend_1181(this.pointer, _lib._sel_layout1);
  }

  int get channelCount {
    return _lib._objc_msgSend_1182(this.pointer, _lib._sel_channelCount1);
  }

  static AVAudioChannelLayout new1(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_AVAudioChannelLayout1,
      _lib._sel_new1,
    );
    return AVAudioChannelLayout._(_ret, _lib, retain: false, release: true);
  }

  static AVAudioChannelLayout allocWithZone_(
    AVFAudio _lib,
    ffi.Pointer<_NSZone> zone,
  ) {
    final _ret = _lib._objc_msgSend_3(
      _lib._class_AVAudioChannelLayout1,
      _lib._sel_allocWithZone_1,
      zone,
    );
    return AVAudioChannelLayout._(_ret, _lib, retain: false, release: true);
  }

  static AVAudioChannelLayout alloc(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_AVAudioChannelLayout1,
      _lib._sel_alloc1,
    );
    return AVAudioChannelLayout._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
    AVFAudio _lib,
    NSObject aTarget,
    ffi.Pointer<objc.ObjCSelector> aSelector,
    NSObject? anArgument,
  ) {
    _lib._objc_msgSend_14(
      _lib._class_AVAudioChannelLayout1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
      aTarget.pointer,
      aSelector,
      anArgument?.pointer ?? ffi.nullptr,
    );
  }

  static void cancelPreviousPerformRequestsWithTarget_(
    AVFAudio _lib,
    NSObject aTarget,
  ) {
    _lib._objc_msgSend_15(
      _lib._class_AVAudioChannelLayout1,
      _lib._sel_cancelPreviousPerformRequestsWithTarget_1,
      aTarget.pointer,
    );
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_AVAudioChannelLayout1,
      _lib._sel_accessInstanceVariablesDirectly1,
    );
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_12(
      _lib._class_AVAudioChannelLayout1,
      _lib._sel_useStoredAccessor1,
    );
  }

  static NSSet keyPathsForValuesAffectingValueForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    final _ret = _lib._objc_msgSend_63(
      _lib._class_AVAudioChannelLayout1,
      _lib._sel_keyPathsForValuesAffectingValueForKey_1,
      key.pointer,
    );
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
    AVFAudio _lib,
    NSString key,
  ) {
    return _lib._objc_msgSend_64(
      _lib._class_AVAudioChannelLayout1,
      _lib._sel_automaticallyNotifiesObserversForKey_1,
      key.pointer,
    );
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
    AVFAudio _lib,
    NSArray keys,
    NSString dependentKey,
  ) {
    _lib._objc_msgSend_88(
      _lib._class_AVAudioChannelLayout1,
      _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
      keys.pointer,
      dependentKey.pointer,
    );
  }

  static NSArray classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_85(
      _lib._class_AVAudioChannelLayout1,
      _lib._sel_classFallbacksForKeyedArchiver1,
    );
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
      _lib._class_AVAudioChannelLayout1,
      _lib._sel_classForKeyedUnarchiver1,
    );
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

final class AudioChannelLayout extends ffi.Struct {
  @ffi.UnsignedInt()
  external int mChannelLayoutTag;

  @ffi.Int32()
  external int mChannelBitmap;

  @ffi.UnsignedInt()
  external int mNumberChannelDescriptions;

  @ffi.Array.multi([1])
  external ffi.Array<AudioChannelDescription> mChannelDescriptions;
}

abstract class AudioChannelBitmap {
  static const int kAudioChannelBit_Left = 1;
  static const int kAudioChannelBit_Right = 2;
  static const int kAudioChannelBit_Center = 4;
  static const int kAudioChannelBit_LFEScreen = 8;
  static const int kAudioChannelBit_LeftSurround = 16;
  static const int kAudioChannelBit_RightSurround = 32;
  static const int kAudioChannelBit_LeftCenter = 64;
  static const int kAudioChannelBit_RightCenter = 128;
  static const int kAudioChannelBit_CenterSurround = 256;
  static const int kAudioChannelBit_LeftSurroundDirect = 512;
  static const int kAudioChannelBit_RightSurroundDirect = 1024;
  static const int kAudioChannelBit_TopCenterSurround = 2048;
  static const int kAudioChannelBit_VerticalHeightLeft = 4096;
  static const int kAudioChannelBit_VerticalHeightCenter = 8192;
  static const int kAudioChannelBit_VerticalHeightRight = 16384;
  static const int kAudioChannelBit_TopBackLeft = 32768;
  static const int kAudioChannelBit_TopBackCenter = 65536;
  static const int kAudioChannelBit_TopBackRight = 131072;
  static const int kAudioChannelBit_LeftTopFront = 4096;
  static const int kAudioChannelBit_CenterTopFront = 8192;
  static const int kAudioChannelBit_RightTopFront = 16384;
  static const int kAudioChannelBit_LeftTopMiddle = 2097152;
  static const int kAudioChannelBit_CenterTopMiddle = 2048;
  static const int kAudioChannelBit_RightTopMiddle = 8388608;
  static const int kAudioChannelBit_LeftTopRear = 16777216;
  static const int kAudioChannelBit_CenterTopRear = 33554432;
  static const int kAudioChannelBit_RightTopRear = 67108864;
}

final class AudioChannelDescription extends ffi.Struct {
  @ffi.UnsignedInt()
  external int mChannelLabel;

  @ffi.Int32()
  external int mChannelFlags;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Float> mCoordinates;
}

abstract class AudioChannelFlags {
  static const int kAudioChannelFlags_AllOff = 0;
  static const int kAudioChannelFlags_RectangularCoordinates = 1;
  static const int kAudioChannelFlags_SphericalCoordinates = 2;
  static const int kAudioChannelFlags_Meters = 4;
}

abstract class AVAudioCommonFormat {
  static const int AVAudioOtherFormat = 0;
  static const int AVAudioPCMFormatFloat32 = 1;
  static const int AVAudioPCMFormatFloat64 = 2;
  static const int AVAudioPCMFormatInt16 = 3;
  static const int AVAudioPCMFormatInt32 = 4;
}

final class opaqueCMFormatDescription extends ffi.Opaque {}
