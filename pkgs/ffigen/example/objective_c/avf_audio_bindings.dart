// Copyright (c) 2024, the Dart project authors. Please see the AUTHORS file
// for details. All rights reserved. Use of this source code is governed by a
// BSD-style license that can be found in the LICENSE file.

// ignore_for_file: camel_case_types, non_constant_identifier_names, unused_element, unused_field, void_checks, annotate_overrides, no_leading_underscores_for_local_identifiers, library_private_types_in_public_api

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'package:ffi/ffi.dart' as pkg_ffi;
import 'package:objective_c/objective_c.dart' as objc;
import 'dart:ffi' as ffi;

abstract class NSBinarySearchingOptions {
  static const int NSBinarySearchingFirstEqual = 256;
  static const int NSBinarySearchingLastEqual = 512;
  static const int NSBinarySearchingInsertionIndex = 1024;
}

abstract class NSStringEnumerationOptions {
  static const int NSStringEnumerationByLines = 0;
  static const int NSStringEnumerationByParagraphs = 1;
  static const int NSStringEnumerationByComposedCharacterSequences = 2;
  static const int NSStringEnumerationByWords = 3;
  static const int NSStringEnumerationBySentences = 4;
  static const int NSStringEnumerationByCaretPositions = 5;
  static const int NSStringEnumerationByDeletionClusters = 6;
  static const int NSStringEnumerationReverse = 256;
  static const int NSStringEnumerationSubstringNotRequired = 512;
  static const int NSStringEnumerationLocalized = 1024;
}

class NSBundle extends objc.NSObject {
  NSBundle._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSBundle] that points to the same underlying object as [other].
  NSBundle.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSBundle] that wraps the given raw object pointer.
  NSBundle.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSBundle].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(obj.pointer, _sel_isKindOfClass_, _class_NSBundle);
  }

  static NSBundle getMainBundle() {
    final _ret = _objc_msgSend_1(_class_NSBundle, _sel_mainBundle);
    return NSBundle.castFromPointer(_ret, retain: true, release: true);
  }

  static NSBundle? bundleWithPath_(objc.NSString path) {
    final _ret =
        _objc_msgSend_2(_class_NSBundle, _sel_bundleWithPath_, path.pointer);
    return _ret.address == 0
        ? null
        : NSBundle.castFromPointer(_ret, retain: true, release: true);
  }

  NSBundle? initWithPath_(objc.NSString path) {
    final _ret =
        _objc_msgSend_2(this.pointer, _sel_initWithPath_, path.pointer);
    return _ret.address == 0
        ? null
        : NSBundle.castFromPointer(_ret, retain: true, release: true);
  }

  static NSBundle? bundleWithURL_(objc.NSURL url) {
    final _ret =
        _objc_msgSend_3(_class_NSBundle, _sel_bundleWithURL_, url.pointer);
    return _ret.address == 0
        ? null
        : NSBundle.castFromPointer(_ret, retain: true, release: true);
  }

  NSBundle? initWithURL_(objc.NSURL url) {
    final _ret = _objc_msgSend_3(this.pointer, _sel_initWithURL_, url.pointer);
    return _ret.address == 0
        ? null
        : NSBundle.castFromPointer(_ret, retain: true, release: true);
  }

  static NSBundle bundleForClass_(objc.NSObject aClass) {
    final _ret =
        _objc_msgSend_4(_class_NSBundle, _sel_bundleForClass_, aClass.pointer);
    return NSBundle.castFromPointer(_ret, retain: true, release: true);
  }

  static NSBundle? bundleWithIdentifier_(objc.NSString identifier) {
    final _ret = _objc_msgSend_5(
        _class_NSBundle, _sel_bundleWithIdentifier_, identifier.pointer);
    return _ret.address == 0
        ? null
        : NSBundle.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSArray getAllBundles() {
    final _ret = _objc_msgSend_6(_class_NSBundle, _sel_allBundles);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSArray getAllFrameworks() {
    final _ret = _objc_msgSend_6(_class_NSBundle, _sel_allFrameworks);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  bool load() {
    return _objc_msgSend_7(this.pointer, _sel_load);
  }

  bool get loaded {
    return _objc_msgSend_7(this.pointer, _sel_isLoaded);
  }

  bool unload() {
    return _objc_msgSend_7(this.pointer, _sel_unload);
  }

  bool preflightAndReturnError_(
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    return _objc_msgSend_8(this.pointer, _sel_preflightAndReturnError_, error);
  }

  bool loadAndReturnError_(ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    return _objc_msgSend_8(this.pointer, _sel_loadAndReturnError_, error);
  }

  objc.NSURL get bundleURL {
    final _ret = _objc_msgSend_9(this.pointer, _sel_bundleURL);
    return objc.NSURL.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSURL? get resourceURL {
    final _ret = _objc_msgSend_10(this.pointer, _sel_resourceURL);
    return _ret.address == 0
        ? null
        : objc.NSURL.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSURL? get executableURL {
    final _ret = _objc_msgSend_10(this.pointer, _sel_executableURL);
    return _ret.address == 0
        ? null
        : objc.NSURL.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSURL? URLForAuxiliaryExecutable_(objc.NSString executableName) {
    final _ret = _objc_msgSend_11(
        this.pointer, _sel_URLForAuxiliaryExecutable_, executableName.pointer);
    return _ret.address == 0
        ? null
        : objc.NSURL.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSURL? get privateFrameworksURL {
    final _ret = _objc_msgSend_10(this.pointer, _sel_privateFrameworksURL);
    return _ret.address == 0
        ? null
        : objc.NSURL.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSURL? get sharedFrameworksURL {
    final _ret = _objc_msgSend_10(this.pointer, _sel_sharedFrameworksURL);
    return _ret.address == 0
        ? null
        : objc.NSURL.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSURL? get sharedSupportURL {
    final _ret = _objc_msgSend_10(this.pointer, _sel_sharedSupportURL);
    return _ret.address == 0
        ? null
        : objc.NSURL.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSURL? get builtInPlugInsURL {
    final _ret = _objc_msgSend_10(this.pointer, _sel_builtInPlugInsURL);
    return _ret.address == 0
        ? null
        : objc.NSURL.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSURL? get appStoreReceiptURL {
    final _ret = _objc_msgSend_10(this.pointer, _sel_appStoreReceiptURL);
    return _ret.address == 0
        ? null
        : objc.NSURL.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSString get bundlePath {
    final _ret = _objc_msgSend_12(this.pointer, _sel_bundlePath);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSString? get resourcePath {
    final _ret = _objc_msgSend_13(this.pointer, _sel_resourcePath);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSString? get executablePath {
    final _ret = _objc_msgSend_13(this.pointer, _sel_executablePath);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSString? pathForAuxiliaryExecutable_(objc.NSString executableName) {
    final _ret = _objc_msgSend_14(
        this.pointer, _sel_pathForAuxiliaryExecutable_, executableName.pointer);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSString? get privateFrameworksPath {
    final _ret = _objc_msgSend_13(this.pointer, _sel_privateFrameworksPath);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSString? get sharedFrameworksPath {
    final _ret = _objc_msgSend_13(this.pointer, _sel_sharedFrameworksPath);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSString? get sharedSupportPath {
    final _ret = _objc_msgSend_13(this.pointer, _sel_sharedSupportPath);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSString? get builtInPlugInsPath {
    final _ret = _objc_msgSend_13(this.pointer, _sel_builtInPlugInsPath);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSURL? URLForResource_withExtension_subdirectory_inBundleWithURL_(
      objc.NSString? name,
      objc.NSString? ext,
      objc.NSString? subpath,
      objc.NSURL bundleURL) {
    final _ret = _objc_msgSend_15(
        _class_NSBundle,
        _sel_URLForResource_withExtension_subdirectory_inBundleWithURL_,
        name?.pointer ?? ffi.nullptr,
        ext?.pointer ?? ffi.nullptr,
        subpath?.pointer ?? ffi.nullptr,
        bundleURL.pointer);
    return _ret.address == 0
        ? null
        : objc.NSURL.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSArray?
      URLsForResourcesWithExtension_subdirectory_inBundleWithURL_(
          objc.NSString? ext, objc.NSString? subpath, objc.NSURL bundleURL) {
    final _ret = _objc_msgSend_16(
        _class_NSBundle,
        _sel_URLsForResourcesWithExtension_subdirectory_inBundleWithURL_,
        ext?.pointer ?? ffi.nullptr,
        subpath?.pointer ?? ffi.nullptr,
        bundleURL.pointer);
    return _ret.address == 0
        ? null
        : objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSURL? URLForResource_withExtension_(
      objc.NSString? name, objc.NSString? ext) {
    final _ret = _objc_msgSend_17(
        this.pointer,
        _sel_URLForResource_withExtension_,
        name?.pointer ?? ffi.nullptr,
        ext?.pointer ?? ffi.nullptr);
    return _ret.address == 0
        ? null
        : objc.NSURL.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSURL? URLForResource_withExtension_subdirectory_(
      objc.NSString? name, objc.NSString? ext, objc.NSString? subpath) {
    final _ret = _objc_msgSend_18(
        this.pointer,
        _sel_URLForResource_withExtension_subdirectory_,
        name?.pointer ?? ffi.nullptr,
        ext?.pointer ?? ffi.nullptr,
        subpath?.pointer ?? ffi.nullptr);
    return _ret.address == 0
        ? null
        : objc.NSURL.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSURL? URLForResource_withExtension_subdirectory_localization_(
      objc.NSString? name,
      objc.NSString? ext,
      objc.NSString? subpath,
      objc.NSString? localizationName) {
    final _ret = _objc_msgSend_19(
        this.pointer,
        _sel_URLForResource_withExtension_subdirectory_localization_,
        name?.pointer ?? ffi.nullptr,
        ext?.pointer ?? ffi.nullptr,
        subpath?.pointer ?? ffi.nullptr,
        localizationName?.pointer ?? ffi.nullptr);
    return _ret.address == 0
        ? null
        : objc.NSURL.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSArray? URLsForResourcesWithExtension_subdirectory_(
      objc.NSString? ext, objc.NSString? subpath) {
    final _ret = _objc_msgSend_20(
        this.pointer,
        _sel_URLsForResourcesWithExtension_subdirectory_,
        ext?.pointer ?? ffi.nullptr,
        subpath?.pointer ?? ffi.nullptr);
    return _ret.address == 0
        ? null
        : objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSArray? URLsForResourcesWithExtension_subdirectory_localization_(
      objc.NSString? ext,
      objc.NSString? subpath,
      objc.NSString? localizationName) {
    final _ret = _objc_msgSend_21(
        this.pointer,
        _sel_URLsForResourcesWithExtension_subdirectory_localization_,
        ext?.pointer ?? ffi.nullptr,
        subpath?.pointer ?? ffi.nullptr,
        localizationName?.pointer ?? ffi.nullptr);
    return _ret.address == 0
        ? null
        : objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSString? pathForResource_ofType_inDirectory_(
      objc.NSString? name, objc.NSString? ext, objc.NSString bundlePath) {
    final _ret = _objc_msgSend_22(
        _class_NSBundle,
        _sel_pathForResource_ofType_inDirectory_,
        name?.pointer ?? ffi.nullptr,
        ext?.pointer ?? ffi.nullptr,
        bundlePath.pointer);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSArray pathsForResourcesOfType_inDirectory_(
      objc.NSString? ext, objc.NSString bundlePath) {
    final _ret = _objc_msgSend_23(
        _class_NSBundle,
        _sel_pathsForResourcesOfType_inDirectory_,
        ext?.pointer ?? ffi.nullptr,
        bundlePath.pointer);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSString? pathForResource_ofType_(
      objc.NSString? name, objc.NSString? ext) {
    final _ret = _objc_msgSend_24(this.pointer, _sel_pathForResource_ofType_,
        name?.pointer ?? ffi.nullptr, ext?.pointer ?? ffi.nullptr);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSString? pathForResource_ofType_inDirectory_forLocalization_(
      objc.NSString? name,
      objc.NSString? ext,
      objc.NSString? subpath,
      objc.NSString? localizationName) {
    final _ret = _objc_msgSend_25(
        this.pointer,
        _sel_pathForResource_ofType_inDirectory_forLocalization_,
        name?.pointer ?? ffi.nullptr,
        ext?.pointer ?? ffi.nullptr,
        subpath?.pointer ?? ffi.nullptr,
        localizationName?.pointer ?? ffi.nullptr);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSArray pathsForResourcesOfType_inDirectory_forLocalization_(
      objc.NSString? ext,
      objc.NSString? subpath,
      objc.NSString? localizationName) {
    final _ret = _objc_msgSend_26(
        this.pointer,
        _sel_pathsForResourcesOfType_inDirectory_forLocalization_,
        ext?.pointer ?? ffi.nullptr,
        subpath?.pointer ?? ffi.nullptr,
        localizationName?.pointer ?? ffi.nullptr);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSString localizedStringForKey_value_table_(
      objc.NSString key, objc.NSString? value, objc.NSString? tableName) {
    final _ret = _objc_msgSend_27(
        this.pointer,
        _sel_localizedStringForKey_value_table_,
        key.pointer,
        value?.pointer ?? ffi.nullptr,
        tableName?.pointer ?? ffi.nullptr);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  NSAttributedString localizedAttributedStringForKey_value_table_(
      objc.NSString key, objc.NSString? value, objc.NSString? tableName) {
    final _ret = _objc_msgSend_64(
        this.pointer,
        _sel_localizedAttributedStringForKey_value_table_,
        key.pointer,
        value?.pointer ?? ffi.nullptr,
        tableName?.pointer ?? ffi.nullptr);
    return NSAttributedString.castFromPointer(_ret,
        retain: true, release: true);
  }

  objc.NSString? get bundleIdentifier {
    final _ret = _objc_msgSend_13(this.pointer, _sel_bundleIdentifier);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSDictionary? get infoDictionary {
    final _ret = _objc_msgSend_65(this.pointer, _sel_infoDictionary);
    return _ret.address == 0
        ? null
        : objc.NSDictionary.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSDictionary? get localizedInfoDictionary {
    final _ret = _objc_msgSend_65(this.pointer, _sel_localizedInfoDictionary);
    return _ret.address == 0
        ? null
        : objc.NSDictionary.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSObject? objectForInfoDictionaryKey_(objc.NSString key) {
    final _ret = _objc_msgSend_2(
        this.pointer, _sel_objectForInfoDictionaryKey_, key.pointer);
    return _ret.address == 0
        ? null
        : objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSObject? classNamed_(objc.NSString className) {
    final _ret =
        _objc_msgSend_2(this.pointer, _sel_classNamed_, className.pointer);
    return _ret.address == 0
        ? null
        : objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSObject? get principalClass {
    final _ret = _objc_msgSend_66(this.pointer, _sel_principalClass);
    return _ret.address == 0
        ? null
        : objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSArray get preferredLocalizations {
    final _ret = _objc_msgSend_6(this.pointer, _sel_preferredLocalizations);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSArray get localizations {
    final _ret = _objc_msgSend_6(this.pointer, _sel_localizations);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSString? get developmentLocalization {
    final _ret = _objc_msgSend_13(this.pointer, _sel_developmentLocalization);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSArray preferredLocalizationsFromArray_(
      objc.NSArray localizationsArray) {
    final _ret = _objc_msgSend_67(_class_NSBundle,
        _sel_preferredLocalizationsFromArray_, localizationsArray.pointer);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSArray preferredLocalizationsFromArray_forPreferences_(
      objc.NSArray localizationsArray, objc.NSArray? preferencesArray) {
    final _ret = _objc_msgSend_68(
        _class_NSBundle,
        _sel_preferredLocalizationsFromArray_forPreferences_,
        localizationsArray.pointer,
        preferencesArray?.pointer ?? ffi.nullptr);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSArray? get executableArchitectures {
    final _ret = _objc_msgSend_69(this.pointer, _sel_executableArchitectures);
    return _ret.address == 0
        ? null
        : objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  void setPreservationPriority_forTags_(double priority, objc.NSSet tags) {
    _objc_msgSend_70(this.pointer, _sel_setPreservationPriority_forTags_,
        priority, tags.pointer);
  }

  double preservationPriorityForTag_(objc.NSString tag) {
    return objc.useMsgSendVariants
        ? _objc_msgSend_71Fpret(
            this.pointer, _sel_preservationPriorityForTag_, tag.pointer)
        : _objc_msgSend_71(
            this.pointer, _sel_preservationPriorityForTag_, tag.pointer);
  }

  @override
  NSBundle init() {
    final _ret = _objc_msgSend_40(this.pointer, _sel_init);
    return NSBundle.castFromPointer(_ret, retain: true, release: true);
  }

  static NSBundle new1() {
    final _ret = _objc_msgSend_40(_class_NSBundle, _sel_new);
    return NSBundle.castFromPointer(_ret, retain: false, release: true);
  }

  static NSBundle allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_47(_class_NSBundle, _sel_allocWithZone_, zone);
    return NSBundle.castFromPointer(_ret, retain: false, release: true);
  }

  static NSBundle alloc() {
    final _ret = _objc_msgSend_40(_class_NSBundle, _sel_alloc);
    return NSBundle.castFromPointer(_ret, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.NSObject aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.NSObject? anArgument) {
    _objc_msgSend_48(
        _class_NSBundle,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  static void cancelPreviousPerformRequestsWithTarget_(objc.NSObject aTarget) {
    _objc_msgSend_49(_class_NSBundle,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_7(
        _class_NSBundle, _sel_accessInstanceVariablesDirectly);
  }

  static bool useStoredAccessor() {
    return _objc_msgSend_7(_class_NSBundle, _sel_useStoredAccessor);
  }

  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_50(_class_NSBundle,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_51(_class_NSBundle,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_52(
        _class_NSBundle,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret =
        _objc_msgSend_6(_class_NSBundle, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSObject classForKeyedUnarchiver() {
    final _ret =
        _objc_msgSend_40(_class_NSBundle, _sel_classForKeyedUnarchiver);
    return objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }
}

late final _class_NSBundle = objc.getClass("NSBundle");
late final _sel_mainBundle = objc.registerName("mainBundle");
final _objc_msgSend_1 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
typedef instancetype = ffi.Pointer<objc.ObjCObject>;
typedef Dartinstancetype = objc.NSObject;
late final _sel_bundleWithPath_ = objc.registerName("bundleWithPath:");
final _objc_msgSend_2 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_initWithPath_ = objc.registerName("initWithPath:");
late final _sel_bundleWithURL_ = objc.registerName("bundleWithURL:");
final _objc_msgSend_3 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_initWithURL_ = objc.registerName("initWithURL:");
late final _sel_bundleForClass_ = objc.registerName("bundleForClass:");
final _objc_msgSend_4 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_bundleWithIdentifier_ =
    objc.registerName("bundleWithIdentifier:");
final _objc_msgSend_5 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_allBundles = objc.registerName("allBundles");
final _objc_msgSend_6 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_allFrameworks = objc.registerName("allFrameworks");
late final _sel_load = objc.registerName("load");
final _objc_msgSend_7 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_isLoaded = objc.registerName("isLoaded");
late final _sel_unload = objc.registerName("unload");
late final _sel_preflightAndReturnError_ =
    objc.registerName("preflightAndReturnError:");
final _objc_msgSend_8 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_loadAndReturnError_ = objc.registerName("loadAndReturnError:");
late final _sel_bundleURL = objc.registerName("bundleURL");
final _objc_msgSend_9 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_resourceURL = objc.registerName("resourceURL");
final _objc_msgSend_10 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_executableURL = objc.registerName("executableURL");
late final _sel_URLForAuxiliaryExecutable_ =
    objc.registerName("URLForAuxiliaryExecutable:");
final _objc_msgSend_11 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_privateFrameworksURL =
    objc.registerName("privateFrameworksURL");
late final _sel_sharedFrameworksURL = objc.registerName("sharedFrameworksURL");
late final _sel_sharedSupportURL = objc.registerName("sharedSupportURL");
late final _sel_builtInPlugInsURL = objc.registerName("builtInPlugInsURL");
late final _sel_appStoreReceiptURL = objc.registerName("appStoreReceiptURL");
late final _sel_bundlePath = objc.registerName("bundlePath");
final _objc_msgSend_12 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_resourcePath = objc.registerName("resourcePath");
final _objc_msgSend_13 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_executablePath = objc.registerName("executablePath");
late final _sel_pathForAuxiliaryExecutable_ =
    objc.registerName("pathForAuxiliaryExecutable:");
final _objc_msgSend_14 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_privateFrameworksPath =
    objc.registerName("privateFrameworksPath");
late final _sel_sharedFrameworksPath =
    objc.registerName("sharedFrameworksPath");
late final _sel_sharedSupportPath = objc.registerName("sharedSupportPath");
late final _sel_builtInPlugInsPath = objc.registerName("builtInPlugInsPath");
late final _sel_URLForResource_withExtension_subdirectory_inBundleWithURL_ =
    objc.registerName(
        "URLForResource:withExtension:subdirectory:inBundleWithURL:");
final _objc_msgSend_15 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_URLsForResourcesWithExtension_subdirectory_inBundleWithURL_ =
    objc.registerName(
        "URLsForResourcesWithExtension:subdirectory:inBundleWithURL:");
final _objc_msgSend_16 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_URLForResource_withExtension_ =
    objc.registerName("URLForResource:withExtension:");
final _objc_msgSend_17 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_URLForResource_withExtension_subdirectory_ =
    objc.registerName("URLForResource:withExtension:subdirectory:");
final _objc_msgSend_18 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_URLForResource_withExtension_subdirectory_localization_ = objc
    .registerName("URLForResource:withExtension:subdirectory:localization:");
final _objc_msgSend_19 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_URLsForResourcesWithExtension_subdirectory_ =
    objc.registerName("URLsForResourcesWithExtension:subdirectory:");
final _objc_msgSend_20 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_URLsForResourcesWithExtension_subdirectory_localization_ = objc
    .registerName("URLsForResourcesWithExtension:subdirectory:localization:");
final _objc_msgSend_21 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_pathForResource_ofType_inDirectory_ =
    objc.registerName("pathForResource:ofType:inDirectory:");
final _objc_msgSend_22 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_pathsForResourcesOfType_inDirectory_ =
    objc.registerName("pathsForResourcesOfType:inDirectory:");
final _objc_msgSend_23 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_pathForResource_ofType_ =
    objc.registerName("pathForResource:ofType:");
final _objc_msgSend_24 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_pathForResource_ofType_inDirectory_forLocalization_ =
    objc.registerName("pathForResource:ofType:inDirectory:forLocalization:");
final _objc_msgSend_25 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_pathsForResourcesOfType_inDirectory_forLocalization_ =
    objc.registerName("pathsForResourcesOfType:inDirectory:forLocalization:");
final _objc_msgSend_26 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_localizedStringForKey_value_table_ =
    objc.registerName("localizedStringForKey:value:table:");
final _objc_msgSend_27 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();

class NSAttributedString extends objc.NSObject {
  NSAttributedString._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSAttributedString] that points to the same underlying object as [other].
  NSAttributedString.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSAttributedString] that wraps the given raw object pointer.
  NSAttributedString.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSAttributedString].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSAttributedString);
  }

  objc.NSString get string {
    final _ret = _objc_msgSend_12(this.pointer, _sel_string);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSDictionary attributesAtIndex_effectiveRange_(
      int location, ffi.Pointer<_NSRange> range) {
    final _ret = _objc_msgSend_28(
        this.pointer, _sel_attributesAtIndex_effectiveRange_, location, range);
    return objc.NSDictionary.castFromPointer(_ret, retain: true, release: true);
  }

  int get length {
    return _objc_msgSend_29(this.pointer, _sel_length);
  }

  objc.NSObject? attribute_atIndex_effectiveRange_(
      objc.NSString attrName, int location, ffi.Pointer<_NSRange> range) {
    final _ret = _objc_msgSend_30(
        this.pointer,
        _sel_attribute_atIndex_effectiveRange_,
        attrName.pointer,
        location,
        range);
    return _ret.address == 0
        ? null
        : objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }

  NSAttributedString attributedSubstringFromRange_(_NSRange range) {
    final _ret = _objc_msgSend_31(
        this.pointer, _sel_attributedSubstringFromRange_, range);
    return NSAttributedString.castFromPointer(_ret,
        retain: true, release: true);
  }

  objc.NSDictionary attributesAtIndex_longestEffectiveRange_inRange_(
      int location, ffi.Pointer<_NSRange> range, _NSRange rangeLimit) {
    final _ret = _objc_msgSend_32(
        this.pointer,
        _sel_attributesAtIndex_longestEffectiveRange_inRange_,
        location,
        range,
        rangeLimit);
    return objc.NSDictionary.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSObject? attribute_atIndex_longestEffectiveRange_inRange_(
      objc.NSString attrName,
      int location,
      ffi.Pointer<_NSRange> range,
      _NSRange rangeLimit) {
    final _ret = _objc_msgSend_33(
        this.pointer,
        _sel_attribute_atIndex_longestEffectiveRange_inRange_,
        attrName.pointer,
        location,
        range,
        rangeLimit);
    return _ret.address == 0
        ? null
        : objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }

  bool isEqualToAttributedString_(NSAttributedString other) {
    return _objc_msgSend_34(
        this.pointer, _sel_isEqualToAttributedString_, other.pointer);
  }

  NSAttributedString initWithString_(objc.NSString str) {
    final _ret =
        _objc_msgSend_35(this.pointer, _sel_initWithString_, str.pointer);
    return NSAttributedString.castFromPointer(_ret,
        retain: true, release: true);
  }

  NSAttributedString initWithString_attributes_(
      objc.NSString str, objc.NSDictionary? attrs) {
    final _ret = _objc_msgSend_36(this.pointer, _sel_initWithString_attributes_,
        str.pointer, attrs?.pointer ?? ffi.nullptr);
    return NSAttributedString.castFromPointer(_ret,
        retain: true, release: true);
  }

  NSAttributedString initWithAttributedString_(NSAttributedString attrStr) {
    final _ret = _objc_msgSend_37(
        this.pointer, _sel_initWithAttributedString_, attrStr.pointer);
    return NSAttributedString.castFromPointer(_ret,
        retain: true, release: true);
  }

  void enumerateAttributesInRange_options_usingBlock_(_NSRange enumerationRange,
      int opts, ObjCBlock_ffiVoid_NSDictionary_NSRange_bool block) {
    _objc_msgSend_38(
        this.pointer,
        _sel_enumerateAttributesInRange_options_usingBlock_,
        enumerationRange,
        opts,
        block.pointer);
  }

  void enumerateAttribute_inRange_options_usingBlock_(
      objc.NSString attrName,
      _NSRange enumerationRange,
      int opts,
      ObjCBlock_ffiVoid_objcObjCObject_NSRange_bool block) {
    _objc_msgSend_39(
        this.pointer,
        _sel_enumerateAttribute_inRange_options_usingBlock_,
        attrName.pointer,
        enumerationRange,
        opts,
        block.pointer);
  }

  NSAttributedString?
      initWithContentsOfMarkdownFileAtURL_options_baseURL_error_(
          objc.NSURL markdownFile,
          NSAttributedStringMarkdownParsingOptions? options,
          objc.NSURL? baseURL,
          ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    final _ret = _objc_msgSend_53(
        this.pointer,
        _sel_initWithContentsOfMarkdownFileAtURL_options_baseURL_error_,
        markdownFile.pointer,
        options?.pointer ?? ffi.nullptr,
        baseURL?.pointer ?? ffi.nullptr,
        error);
    return _ret.address == 0
        ? null
        : NSAttributedString.castFromPointer(_ret, retain: true, release: true);
  }

  NSAttributedString? initWithMarkdown_options_baseURL_error_(
      objc.NSData markdown,
      NSAttributedStringMarkdownParsingOptions? options,
      objc.NSURL? baseURL,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    final _ret = _objc_msgSend_54(
        this.pointer,
        _sel_initWithMarkdown_options_baseURL_error_,
        markdown.pointer,
        options?.pointer ?? ffi.nullptr,
        baseURL?.pointer ?? ffi.nullptr,
        error);
    return _ret.address == 0
        ? null
        : NSAttributedString.castFromPointer(_ret, retain: true, release: true);
  }

  NSAttributedString? initWithMarkdownString_options_baseURL_error_(
      objc.NSString markdownString,
      NSAttributedStringMarkdownParsingOptions? options,
      objc.NSURL? baseURL,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    final _ret = _objc_msgSend_55(
        this.pointer,
        _sel_initWithMarkdownString_options_baseURL_error_,
        markdownString.pointer,
        options?.pointer ?? ffi.nullptr,
        baseURL?.pointer ?? ffi.nullptr,
        error);
    return _ret.address == 0
        ? null
        : NSAttributedString.castFromPointer(_ret, retain: true, release: true);
  }

  NSAttributedString initWithFormat_options_locale_(
      NSAttributedString format, int options, objc.NSLocale? locale) {
    final _ret = _objc_msgSend_56(
        this.pointer,
        _sel_initWithFormat_options_locale_,
        format.pointer,
        options,
        locale?.pointer ?? ffi.nullptr);
    return NSAttributedString.castFromPointer(_ret,
        retain: true, release: true);
  }

  NSAttributedString initWithFormat_options_locale_arguments_(
      NSAttributedString format,
      int options,
      objc.NSLocale? locale,
      ffi.Pointer<__va_list_tag> arguments) {
    final _ret = _objc_msgSend_57(
        this.pointer,
        _sel_initWithFormat_options_locale_arguments_,
        format.pointer,
        options,
        locale?.pointer ?? ffi.nullptr,
        arguments);
    return NSAttributedString.castFromPointer(_ret,
        retain: true, release: true);
  }

  static NSAttributedString localizedAttributedStringWithFormat_(
      NSAttributedString format) {
    final _ret = _objc_msgSend_37(_class_NSAttributedString,
        _sel_localizedAttributedStringWithFormat_, format.pointer);
    return NSAttributedString.castFromPointer(_ret,
        retain: true, release: true);
  }

  static NSAttributedString localizedAttributedStringWithFormat_options_(
      NSAttributedString format, int options) {
    final _ret = _objc_msgSend_58(
        _class_NSAttributedString,
        _sel_localizedAttributedStringWithFormat_options_,
        format.pointer,
        options);
    return NSAttributedString.castFromPointer(_ret,
        retain: true, release: true);
  }

  NSAttributedString initWithFormat_options_locale_context_(
      NSAttributedString format,
      int options,
      objc.NSLocale? locale,
      objc.NSDictionary context) {
    final _ret = _objc_msgSend_59(
        this.pointer,
        _sel_initWithFormat_options_locale_context_,
        format.pointer,
        options,
        locale?.pointer ?? ffi.nullptr,
        context.pointer);
    return NSAttributedString.castFromPointer(_ret,
        retain: true, release: true);
  }

  NSAttributedString initWithFormat_options_locale_context_arguments_(
      NSAttributedString format,
      int options,
      objc.NSLocale? locale,
      objc.NSDictionary context,
      ffi.Pointer<__va_list_tag> arguments) {
    final _ret = _objc_msgSend_60(
        this.pointer,
        _sel_initWithFormat_options_locale_context_arguments_,
        format.pointer,
        options,
        locale?.pointer ?? ffi.nullptr,
        context.pointer,
        arguments);
    return NSAttributedString.castFromPointer(_ret,
        retain: true, release: true);
  }

  static NSAttributedString localizedAttributedStringWithFormat_context_(
      NSAttributedString format, objc.NSDictionary context) {
    final _ret = _objc_msgSend_61(
        _class_NSAttributedString,
        _sel_localizedAttributedStringWithFormat_context_,
        format.pointer,
        context.pointer);
    return NSAttributedString.castFromPointer(_ret,
        retain: true, release: true);
  }

  static NSAttributedString
      localizedAttributedStringWithFormat_options_context_(
          NSAttributedString format, int options, objc.NSDictionary context) {
    final _ret = _objc_msgSend_62(
        _class_NSAttributedString,
        _sel_localizedAttributedStringWithFormat_options_context_,
        format.pointer,
        options,
        context.pointer);
    return NSAttributedString.castFromPointer(_ret,
        retain: true, release: true);
  }

  NSAttributedString attributedStringByInflectingString() {
    final _ret =
        _objc_msgSend_63(this.pointer, _sel_attributedStringByInflectingString);
    return NSAttributedString.castFromPointer(_ret,
        retain: true, release: true);
  }

  @override
  NSAttributedString init() {
    final _ret = _objc_msgSend_40(this.pointer, _sel_init);
    return NSAttributedString.castFromPointer(_ret,
        retain: true, release: true);
  }

  static NSAttributedString new1() {
    final _ret = _objc_msgSend_40(_class_NSAttributedString, _sel_new);
    return NSAttributedString.castFromPointer(_ret,
        retain: false, release: true);
  }

  static NSAttributedString allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_47(_class_NSAttributedString, _sel_allocWithZone_, zone);
    return NSAttributedString.castFromPointer(_ret,
        retain: false, release: true);
  }

  static NSAttributedString alloc() {
    final _ret = _objc_msgSend_40(_class_NSAttributedString, _sel_alloc);
    return NSAttributedString.castFromPointer(_ret,
        retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.NSObject aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.NSObject? anArgument) {
    _objc_msgSend_48(
        _class_NSAttributedString,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  static void cancelPreviousPerformRequestsWithTarget_(objc.NSObject aTarget) {
    _objc_msgSend_49(_class_NSAttributedString,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_7(
        _class_NSAttributedString, _sel_accessInstanceVariablesDirectly);
  }

  static bool useStoredAccessor() {
    return _objc_msgSend_7(_class_NSAttributedString, _sel_useStoredAccessor);
  }

  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_50(_class_NSAttributedString,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_51(_class_NSAttributedString,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_52(
        _class_NSAttributedString,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_6(
        _class_NSAttributedString, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSObject classForKeyedUnarchiver() {
    final _ret = _objc_msgSend_40(
        _class_NSAttributedString, _sel_classForKeyedUnarchiver);
    return objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }
}

late final _class_NSAttributedString = objc.getClass("NSAttributedString");
late final _sel_string = objc.registerName("string");

final class _NSRange extends ffi.Struct {
  @ffi.UnsignedLong()
  external int location;

  @ffi.UnsignedLong()
  external int length;
}

late final _sel_attributesAtIndex_effectiveRange_ =
    objc.registerName("attributesAtIndex:effectiveRange:");
final _objc_msgSend_28 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.UnsignedLong,
                ffi.Pointer<_NSRange>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int, ffi.Pointer<_NSRange>)>();
late final _sel_length = objc.registerName("length");
final _objc_msgSend_29 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_attribute_atIndex_effectiveRange_ =
    objc.registerName("attribute:atIndex:effectiveRange:");
final _objc_msgSend_30 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.UnsignedLong,
                ffi.Pointer<_NSRange>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            ffi.Pointer<_NSRange>)>();
late final _sel_attributedSubstringFromRange_ =
    objc.registerName("attributedSubstringFromRange:");
final _objc_msgSend_31 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, _NSRange)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, _NSRange)>();
late final _sel_attributesAtIndex_longestEffectiveRange_inRange_ =
    objc.registerName("attributesAtIndex:longestEffectiveRange:inRange:");
final _objc_msgSend_32 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.UnsignedLong,
                ffi.Pointer<_NSRange>,
                _NSRange)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int,
            ffi.Pointer<_NSRange>,
            _NSRange)>();
late final _sel_attribute_atIndex_longestEffectiveRange_inRange_ =
    objc.registerName("attribute:atIndex:longestEffectiveRange:inRange:");
final _objc_msgSend_33 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.UnsignedLong,
                ffi.Pointer<_NSRange>,
                _NSRange)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            ffi.Pointer<_NSRange>,
            _NSRange)>();
late final _sel_isEqualToAttributedString_ =
    objc.registerName("isEqualToAttributedString:");
final _objc_msgSend_34 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        bool Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_initWithString_ = objc.registerName("initWithString:");
final _objc_msgSend_35 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_initWithString_attributes_ =
    objc.registerName("initWithString:attributes:");
final _objc_msgSend_36 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_initWithAttributedString_ =
    objc.registerName("initWithAttributedString:");
final _objc_msgSend_37 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();

abstract class NSAttributedStringEnumerationOptions {
  static const int NSAttributedStringEnumerationReverse = 2;
  static const int
      NSAttributedStringEnumerationLongestEffectiveRangeNotRequired = 1048576;
}

void _ObjCBlock_ffiVoid_NSDictionary_NSRange_bool_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlock> block,
        ffi.Pointer<objc.ObjCObject> arg0,
        _NSRange arg1,
        ffi.Pointer<ffi.Bool> arg2) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0,
                    _NSRange arg1, ffi.Pointer<ffi.Bool> arg2)>>()
        .asFunction<
            void Function(ffi.Pointer<objc.ObjCObject>, _NSRange,
                ffi.Pointer<ffi.Bool>)>()(arg0, arg1, arg2);
final _ObjCBlock_ffiVoid_NSDictionary_NSRange_bool_closureRegistry = <int,
    void Function(
        ffi.Pointer<objc.ObjCObject>, _NSRange, ffi.Pointer<ffi.Bool>)>{};
int _ObjCBlock_ffiVoid_NSDictionary_NSRange_bool_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void>
    _ObjCBlock_ffiVoid_NSDictionary_NSRange_bool_registerClosure(
        void Function(
                ffi.Pointer<objc.ObjCObject>, _NSRange, ffi.Pointer<ffi.Bool>)
            fn) {
  final id =
      ++_ObjCBlock_ffiVoid_NSDictionary_NSRange_bool_closureRegistryIndex;
  _ObjCBlock_ffiVoid_NSDictionary_NSRange_bool_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

void _ObjCBlock_ffiVoid_NSDictionary_NSRange_bool_closureTrampoline(
        ffi.Pointer<objc.ObjCBlock> block,
        ffi.Pointer<objc.ObjCObject> arg0,
        _NSRange arg1,
        ffi.Pointer<ffi.Bool> arg2) =>
    _ObjCBlock_ffiVoid_NSDictionary_NSRange_bool_closureRegistry[
        block.ref.target.address]!(arg0, arg1, arg2);

class ObjCBlock_ffiVoid_NSDictionary_NSRange_bool extends objc.ObjCBlockBase {
  ObjCBlock_ffiVoid_NSDictionary_NSRange_bool._(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = true})
      : super(pointer, retain: retain, release: release);

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_ffiVoid_NSDictionary_NSRange_bool castFromPointer(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = false}) {
    return ObjCBlock_ffiVoid_NSDictionary_NSRange_bool._(pointer,
        retain: retain, release: release);
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSDictionary_NSRange_bool.fromFunctionPointer(
      ffi.Pointer<
              ffi
              .NativeFunction<
                  ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0,
                      _NSRange arg1, ffi.Pointer<ffi.Bool> arg2)>>
          ptr)
      : this._(objc.newBlock(
            _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<objc.ObjCObject>,
                            _NSRange,
                            ffi.Pointer<ffi.Bool>)>(
                    _ObjCBlock_ffiVoid_NSDictionary_NSRange_bool_fnPtrTrampoline)
                .cast(),
            ptr.cast()));
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSDictionary_NSRange_bool.fromFunction(
      void Function(objc.NSDictionary, _NSRange, ffi.Pointer<ffi.Bool>) fn)
      : this._(objc.newBlock(
            _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<objc.ObjCObject>,
                            _NSRange,
                            ffi.Pointer<ffi.Bool>)>(
                    _ObjCBlock_ffiVoid_NSDictionary_NSRange_bool_closureTrampoline)
                .cast(),
            _ObjCBlock_ffiVoid_NSDictionary_NSRange_bool_registerClosure(
                (ffi.Pointer<objc.ObjCObject> arg0, _NSRange arg1,
                        ffi.Pointer<ffi.Bool> arg2) =>
                    fn(objc.NSDictionary.castFromPointer(arg0, retain: true, release: true), arg1, arg2))));
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_NSDictionary_NSRange_bool.listener(
      void Function(objc.NSDictionary, _NSRange, ffi.Pointer<ffi.Bool>) fn)
      : this._(objc.newBlock(
            (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                        ffi.Void Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<objc.ObjCObject>,
                            _NSRange,
                            ffi.Pointer<ffi.Bool>)>.listener(
                    _ObjCBlock_ffiVoid_NSDictionary_NSRange_bool_closureTrampoline)
                  ..keepIsolateAlive = false)
                .nativeFunction
                .cast(),
            _ObjCBlock_ffiVoid_NSDictionary_NSRange_bool_registerClosure(
                (ffi.Pointer<objc.ObjCObject> arg0, _NSRange arg1,
                        ffi.Pointer<ffi.Bool> arg2) =>
                    fn(objc.NSDictionary.castFromPointer(arg0, retain: true, release: true), arg1, arg2))));
  static ffi.NativeCallable<
      ffi.Void Function(
          ffi.Pointer<objc.ObjCBlock>,
          ffi.Pointer<objc.ObjCObject>,
          _NSRange,
          ffi.Pointer<ffi.Bool>)>? _dartFuncListenerTrampoline;

  void call(
          objc.NSDictionary arg0, _NSRange arg1, ffi.Pointer<ffi.Bool> arg2) =>
      pointer.ref.invoke
          .cast<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<objc.ObjCBlock> block,
                      ffi.Pointer<objc.ObjCObject> arg0,
                      _NSRange arg1,
                      ffi.Pointer<ffi.Bool> arg2)>>()
          .asFunction<
              void Function(
                  ffi.Pointer<objc.ObjCBlock>,
                  ffi.Pointer<objc.ObjCObject>,
                  _NSRange,
                  ffi.Pointer<ffi.Bool>)>()(pointer, arg0.pointer, arg1, arg2);
}

late final _sel_enumerateAttributesInRange_options_usingBlock_ =
    objc.registerName("enumerateAttributesInRange:options:usingBlock:");
final _objc_msgSend_38 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                _NSRange,
                ffi.Int32,
                ffi.Pointer<objc.ObjCBlock>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            _NSRange,
            int,
            ffi.Pointer<objc.ObjCBlock>)>();
void _ObjCBlock_ffiVoid_objcObjCObject_NSRange_bool_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlock> block,
        ffi.Pointer<objc.ObjCObject> arg0,
        _NSRange arg1,
        ffi.Pointer<ffi.Bool> arg2) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0,
                    _NSRange arg1, ffi.Pointer<ffi.Bool> arg2)>>()
        .asFunction<
            void Function(ffi.Pointer<objc.ObjCObject>, _NSRange,
                ffi.Pointer<ffi.Bool>)>()(arg0, arg1, arg2);
final _ObjCBlock_ffiVoid_objcObjCObject_NSRange_bool_closureRegistry = <int,
    void Function(
        ffi.Pointer<objc.ObjCObject>, _NSRange, ffi.Pointer<ffi.Bool>)>{};
int _ObjCBlock_ffiVoid_objcObjCObject_NSRange_bool_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void>
    _ObjCBlock_ffiVoid_objcObjCObject_NSRange_bool_registerClosure(
        void Function(
                ffi.Pointer<objc.ObjCObject>, _NSRange, ffi.Pointer<ffi.Bool>)
            fn) {
  final id =
      ++_ObjCBlock_ffiVoid_objcObjCObject_NSRange_bool_closureRegistryIndex;
  _ObjCBlock_ffiVoid_objcObjCObject_NSRange_bool_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

void _ObjCBlock_ffiVoid_objcObjCObject_NSRange_bool_closureTrampoline(
        ffi.Pointer<objc.ObjCBlock> block,
        ffi.Pointer<objc.ObjCObject> arg0,
        _NSRange arg1,
        ffi.Pointer<ffi.Bool> arg2) =>
    _ObjCBlock_ffiVoid_objcObjCObject_NSRange_bool_closureRegistry[
        block.ref.target.address]!(arg0, arg1, arg2);

class ObjCBlock_ffiVoid_objcObjCObject_NSRange_bool extends objc.ObjCBlockBase {
  ObjCBlock_ffiVoid_objcObjCObject_NSRange_bool._(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = true})
      : super(pointer, retain: retain, release: release);

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_ffiVoid_objcObjCObject_NSRange_bool castFromPointer(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = false}) {
    return ObjCBlock_ffiVoid_objcObjCObject_NSRange_bool._(pointer,
        retain: retain, release: release);
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_objcObjCObject_NSRange_bool.fromFunctionPointer(
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0,
                      _NSRange arg1, ffi.Pointer<ffi.Bool> arg2)>>
          ptr)
      : this._(objc.newBlock(
            _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<objc.ObjCObject>,
                            _NSRange,
                            ffi.Pointer<ffi.Bool>)>(
                    _ObjCBlock_ffiVoid_objcObjCObject_NSRange_bool_fnPtrTrampoline)
                .cast(),
            ptr.cast()));
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_objcObjCObject_NSRange_bool.fromFunction(
      void Function(objc.NSObject?, _NSRange, ffi.Pointer<ffi.Bool>) fn)
      : this._(objc.newBlock(
            _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<objc.ObjCObject>,
                            _NSRange,
                            ffi.Pointer<ffi.Bool>)>(
                    _ObjCBlock_ffiVoid_objcObjCObject_NSRange_bool_closureTrampoline)
                .cast(),
            _ObjCBlock_ffiVoid_objcObjCObject_NSRange_bool_registerClosure(
                (ffi.Pointer<objc.ObjCObject> arg0, _NSRange arg1,
                        ffi.Pointer<ffi.Bool> arg2) =>
                    fn(arg0.address == 0 ? null : objc.NSObject.castFromPointer(arg0, retain: true, release: true), arg1, arg2))));
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_objcObjCObject_NSRange_bool.listener(
      void Function(objc.NSObject?, _NSRange, ffi.Pointer<ffi.Bool>) fn)
      : this._(objc.newBlock(
            (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                        ffi.Void Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<objc.ObjCObject>,
                            _NSRange,
                            ffi.Pointer<ffi.Bool>)>.listener(
                    _ObjCBlock_ffiVoid_objcObjCObject_NSRange_bool_closureTrampoline)
                  ..keepIsolateAlive = false)
                .nativeFunction
                .cast(),
            _ObjCBlock_ffiVoid_objcObjCObject_NSRange_bool_registerClosure(
                (ffi.Pointer<objc.ObjCObject> arg0, _NSRange arg1, ffi.Pointer<ffi.Bool> arg2) =>
                    fn(arg0.address == 0 ? null : objc.NSObject.castFromPointer(arg0, retain: true, release: true), arg1, arg2))));
  static ffi.NativeCallable<
      ffi.Void Function(
          ffi.Pointer<objc.ObjCBlock>,
          ffi.Pointer<objc.ObjCObject>,
          _NSRange,
          ffi.Pointer<ffi.Bool>)>? _dartFuncListenerTrampoline;

  void call(objc.NSObject? arg0, _NSRange arg1, ffi.Pointer<ffi.Bool> arg2) =>
      pointer.ref.invoke
              .cast<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<objc.ObjCBlock> block,
                          ffi.Pointer<objc.ObjCObject> arg0,
                          _NSRange arg1,
                          ffi.Pointer<ffi.Bool> arg2)>>()
              .asFunction<
                  void Function(
                      ffi.Pointer<objc.ObjCBlock>,
                      ffi.Pointer<objc.ObjCObject>,
                      _NSRange,
                      ffi.Pointer<ffi.Bool>)>()(
          pointer, arg0?.pointer ?? ffi.nullptr, arg1, arg2);
}

late final _sel_enumerateAttribute_inRange_options_usingBlock_ =
    objc.registerName("enumerateAttribute:inRange:options:usingBlock:");
final _objc_msgSend_39 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                _NSRange,
                ffi.Int32,
                ffi.Pointer<objc.ObjCBlock>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            _NSRange,
            int,
            ffi.Pointer<objc.ObjCBlock>)>();

class NSAttributedStringMarkdownParsingOptions extends objc.NSObject {
  NSAttributedStringMarkdownParsingOptions._(
      ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false,
      bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSAttributedStringMarkdownParsingOptions] that points to the same underlying object as [other].
  NSAttributedStringMarkdownParsingOptions.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSAttributedStringMarkdownParsingOptions] that wraps the given raw object pointer.
  NSAttributedStringMarkdownParsingOptions.castFromPointer(
      ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false,
      bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSAttributedStringMarkdownParsingOptions].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(obj.pointer, _sel_isKindOfClass_,
        _class_NSAttributedStringMarkdownParsingOptions);
  }

  @override
  NSAttributedStringMarkdownParsingOptions init() {
    final _ret = _objc_msgSend_40(this.pointer, _sel_init);
    return NSAttributedStringMarkdownParsingOptions.castFromPointer(_ret,
        retain: true, release: true);
  }

  bool get allowsExtendedAttributes {
    return _objc_msgSend_7(this.pointer, _sel_allowsExtendedAttributes);
  }

  set allowsExtendedAttributes(bool value) {
    return _objc_msgSend_41(
        this.pointer, _sel_setAllowsExtendedAttributes_, value);
  }

  int get interpretedSyntax {
    return _objc_msgSend_42(this.pointer, _sel_interpretedSyntax);
  }

  set interpretedSyntax(int value) {
    return _objc_msgSend_43(this.pointer, _sel_setInterpretedSyntax_, value);
  }

  int get failurePolicy {
    return _objc_msgSend_44(this.pointer, _sel_failurePolicy);
  }

  set failurePolicy(int value) {
    return _objc_msgSend_45(this.pointer, _sel_setFailurePolicy_, value);
  }

  objc.NSString? get languageCode {
    final _ret = _objc_msgSend_13(this.pointer, _sel_languageCode);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  set languageCode(objc.NSString? value) {
    return _objc_msgSend_46(
        this.pointer, _sel_setLanguageCode_, value?.pointer ?? ffi.nullptr);
  }

  bool get appliesSourcePositionAttributes {
    return _objc_msgSend_7(this.pointer, _sel_appliesSourcePositionAttributes);
  }

  set appliesSourcePositionAttributes(bool value) {
    return _objc_msgSend_41(
        this.pointer, _sel_setAppliesSourcePositionAttributes_, value);
  }

  static NSAttributedStringMarkdownParsingOptions new1() {
    final _ret = _objc_msgSend_40(
        _class_NSAttributedStringMarkdownParsingOptions, _sel_new);
    return NSAttributedStringMarkdownParsingOptions.castFromPointer(_ret,
        retain: false, release: true);
  }

  static NSAttributedStringMarkdownParsingOptions allocWithZone_(
      ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_47(
        _class_NSAttributedStringMarkdownParsingOptions,
        _sel_allocWithZone_,
        zone);
    return NSAttributedStringMarkdownParsingOptions.castFromPointer(_ret,
        retain: false, release: true);
  }

  static NSAttributedStringMarkdownParsingOptions alloc() {
    final _ret = _objc_msgSend_40(
        _class_NSAttributedStringMarkdownParsingOptions, _sel_alloc);
    return NSAttributedStringMarkdownParsingOptions.castFromPointer(_ret,
        retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.NSObject aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.NSObject? anArgument) {
    _objc_msgSend_48(
        _class_NSAttributedStringMarkdownParsingOptions,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  static void cancelPreviousPerformRequestsWithTarget_(objc.NSObject aTarget) {
    _objc_msgSend_49(_class_NSAttributedStringMarkdownParsingOptions,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_7(_class_NSAttributedStringMarkdownParsingOptions,
        _sel_accessInstanceVariablesDirectly);
  }

  static bool useStoredAccessor() {
    return _objc_msgSend_7(_class_NSAttributedStringMarkdownParsingOptions,
        _sel_useStoredAccessor);
  }

  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_50(
        _class_NSAttributedStringMarkdownParsingOptions,
        _sel_keyPathsForValuesAffectingValueForKey_,
        key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_51(_class_NSAttributedStringMarkdownParsingOptions,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_52(
        _class_NSAttributedStringMarkdownParsingOptions,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_6(
        _class_NSAttributedStringMarkdownParsingOptions,
        _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSObject classForKeyedUnarchiver() {
    final _ret = _objc_msgSend_40(
        _class_NSAttributedStringMarkdownParsingOptions,
        _sel_classForKeyedUnarchiver);
    return objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }
}

late final _class_NSAttributedStringMarkdownParsingOptions =
    objc.getClass("NSAttributedStringMarkdownParsingOptions");
late final _sel_init = objc.registerName("init");
final _objc_msgSend_40 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_allowsExtendedAttributes =
    objc.registerName("allowsExtendedAttributes");
late final _sel_setAllowsExtendedAttributes_ =
    objc.registerName("setAllowsExtendedAttributes:");
final _objc_msgSend_41 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Bool)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, bool)>();

abstract class NSAttributedStringMarkdownInterpretedSyntax {
  static const int NSAttributedStringMarkdownInterpretedSyntaxFull = 0;
  static const int NSAttributedStringMarkdownInterpretedSyntaxInlineOnly = 1;
  static const int
      NSAttributedStringMarkdownInterpretedSyntaxInlineOnlyPreservingWhitespace =
      2;
}

late final _sel_interpretedSyntax = objc.registerName("interpretedSyntax");
final _objc_msgSend_42 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Int32 Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setInterpretedSyntax_ =
    objc.registerName("setInterpretedSyntax:");
final _objc_msgSend_43 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Int32)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();

abstract class NSAttributedStringMarkdownParsingFailurePolicy {
  static const int NSAttributedStringMarkdownParsingFailureReturnError = 0;
  static const int
      NSAttributedStringMarkdownParsingFailureReturnPartiallyParsedIfPossible =
      1;
}

late final _sel_failurePolicy = objc.registerName("failurePolicy");
final _objc_msgSend_44 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Int32 Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setFailurePolicy_ = objc.registerName("setFailurePolicy:");
final _objc_msgSend_45 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Int32)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_languageCode = objc.registerName("languageCode");
late final _sel_setLanguageCode_ = objc.registerName("setLanguageCode:");
final _objc_msgSend_46 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_appliesSourcePositionAttributes =
    objc.registerName("appliesSourcePositionAttributes");
late final _sel_setAppliesSourcePositionAttributes_ =
    objc.registerName("setAppliesSourcePositionAttributes:");
late final _sel_new = objc.registerName("new");

final class _NSZone extends ffi.Opaque {}

late final _sel_allocWithZone_ = objc.registerName("allocWithZone:");
final _objc_msgSend_47 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<_NSZone>)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<_NSZone>)>();
late final _sel_alloc = objc.registerName("alloc");
late final _sel_cancelPreviousPerformRequestsWithTarget_selector_object_ = objc
    .registerName("cancelPreviousPerformRequestsWithTarget:selector:object:");
final _objc_msgSend_48 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_cancelPreviousPerformRequestsWithTarget_ =
    objc.registerName("cancelPreviousPerformRequestsWithTarget:");
final _objc_msgSend_49 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_accessInstanceVariablesDirectly =
    objc.registerName("accessInstanceVariablesDirectly");
late final _sel_useStoredAccessor = objc.registerName("useStoredAccessor");
late final _sel_keyPathsForValuesAffectingValueForKey_ =
    objc.registerName("keyPathsForValuesAffectingValueForKey:");
final _objc_msgSend_50 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_automaticallyNotifiesObserversForKey_ =
    objc.registerName("automaticallyNotifiesObserversForKey:");
final _objc_msgSend_51 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        bool Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_setKeys_triggerChangeNotificationsForDependentKey_ =
    objc.registerName("setKeys:triggerChangeNotificationsForDependentKey:");
final _objc_msgSend_52 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_classFallbacksForKeyedArchiver =
    objc.registerName("classFallbacksForKeyedArchiver");
late final _sel_classForKeyedUnarchiver =
    objc.registerName("classForKeyedUnarchiver");
final _objc_msgSend_0 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        bool Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_isKindOfClass_ = objc.registerName("isKindOfClass:");
late final _sel_initWithContentsOfMarkdownFileAtURL_options_baseURL_error_ =
    objc.registerName(
        "initWithContentsOfMarkdownFileAtURL:options:baseURL:error:");
final _objc_msgSend_53 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_initWithMarkdown_options_baseURL_error_ =
    objc.registerName("initWithMarkdown:options:baseURL:error:");
final _objc_msgSend_54 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_initWithMarkdownString_options_baseURL_error_ =
    objc.registerName("initWithMarkdownString:options:baseURL:error:");
final _objc_msgSend_55 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();

abstract class NSAttributedStringFormattingOptions {
  static const int
      NSAttributedStringFormattingInsertArgumentAttributesWithoutMerging = 1;
  static const int NSAttributedStringFormattingApplyReplacementIndexAttribute =
      2;
}

late final _sel_initWithFormat_options_locale_ =
    objc.registerName("initWithFormat:options:locale:");
final _objc_msgSend_56 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Int32,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            ffi.Pointer<objc.ObjCObject>)>();

final class __va_list_tag extends ffi.Struct {
  @ffi.UnsignedInt()
  external int gp_offset;

  @ffi.UnsignedInt()
  external int fp_offset;

  external ffi.Pointer<ffi.Void> overflow_arg_area;

  external ffi.Pointer<ffi.Void> reg_save_area;
}

late final _sel_initWithFormat_options_locale_arguments_ =
    objc.registerName("initWithFormat:options:locale:arguments:");
final _objc_msgSend_57 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Int32,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<__va_list_tag>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<__va_list_tag>)>();
late final _sel_localizedAttributedStringWithFormat_ =
    objc.registerName("localizedAttributedStringWithFormat:");
late final _sel_localizedAttributedStringWithFormat_options_ =
    objc.registerName("localizedAttributedStringWithFormat:options:");
final _objc_msgSend_58 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Int32)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int)>();
late final _sel_initWithFormat_options_locale_context_ =
    objc.registerName("initWithFormat:options:locale:context:");
final _objc_msgSend_59 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Int32,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_initWithFormat_options_locale_context_arguments_ =
    objc.registerName("initWithFormat:options:locale:context:arguments:");
final _objc_msgSend_60 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Int32,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<__va_list_tag>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<__va_list_tag>)>();
late final _sel_localizedAttributedStringWithFormat_context_ =
    objc.registerName("localizedAttributedStringWithFormat:context:");
final _objc_msgSend_61 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_localizedAttributedStringWithFormat_options_context_ =
    objc.registerName("localizedAttributedStringWithFormat:options:context:");
final _objc_msgSend_62 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Int32,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_attributedStringByInflectingString =
    objc.registerName("attributedStringByInflectingString");
final _objc_msgSend_63 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_localizedAttributedStringForKey_value_table_ =
    objc.registerName("localizedAttributedStringForKey:value:table:");
final _objc_msgSend_64 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_bundleIdentifier = objc.registerName("bundleIdentifier");
late final _sel_infoDictionary = objc.registerName("infoDictionary");
final _objc_msgSend_65 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_localizedInfoDictionary =
    objc.registerName("localizedInfoDictionary");
late final _sel_objectForInfoDictionaryKey_ =
    objc.registerName("objectForInfoDictionaryKey:");
late final _sel_classNamed_ = objc.registerName("classNamed:");
late final _sel_principalClass = objc.registerName("principalClass");
final _objc_msgSend_66 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_preferredLocalizations =
    objc.registerName("preferredLocalizations");
late final _sel_localizations = objc.registerName("localizations");
late final _sel_developmentLocalization =
    objc.registerName("developmentLocalization");
late final _sel_preferredLocalizationsFromArray_ =
    objc.registerName("preferredLocalizationsFromArray:");
final _objc_msgSend_67 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_preferredLocalizationsFromArray_forPreferences_ =
    objc.registerName("preferredLocalizationsFromArray:forPreferences:");
final _objc_msgSend_68 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_executableArchitectures =
    objc.registerName("executableArchitectures");
final _objc_msgSend_69 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setPreservationPriority_forTags_ =
    objc.registerName("setPreservationPriority:forTags:");
final _objc_msgSend_70 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Double,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            double,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_preservationPriorityForTag_ =
    objc.registerName("preservationPriorityForTag:");
final _objc_msgSend_71 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Double Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        double Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
final _objc_msgSend_71Fpret = objc.msgSendFpretPointer
    .cast<
        ffi.NativeFunction<
            ffi.Double Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        double Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();

class NSMutableAttributedString extends NSAttributedString {
  NSMutableAttributedString._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSMutableAttributedString] that points to the same underlying object as [other].
  NSMutableAttributedString.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSMutableAttributedString] that wraps the given raw object pointer.
  NSMutableAttributedString.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSMutableAttributedString].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSMutableAttributedString);
  }

  void replaceCharactersInRange_withString_(_NSRange range, objc.NSString str) {
    _objc_msgSend_72(this.pointer, _sel_replaceCharactersInRange_withString_,
        range, str.pointer);
  }

  void setAttributes_range_(objc.NSDictionary? attrs, _NSRange range) {
    _objc_msgSend_73(this.pointer, _sel_setAttributes_range_,
        attrs?.pointer ?? ffi.nullptr, range);
  }

  objc.NSMutableString get mutableString {
    final _ret = _objc_msgSend_74(this.pointer, _sel_mutableString);
    return objc.NSMutableString.castFromPointer(_ret,
        retain: true, release: true);
  }

  void addAttribute_value_range_(
      objc.NSString name, objc.NSObject value, _NSRange range) {
    _objc_msgSend_75(this.pointer, _sel_addAttribute_value_range_, name.pointer,
        value.pointer, range);
  }

  void addAttributes_range_(objc.NSDictionary attrs, _NSRange range) {
    _objc_msgSend_76(
        this.pointer, _sel_addAttributes_range_, attrs.pointer, range);
  }

  void removeAttribute_range_(objc.NSString name, _NSRange range) {
    _objc_msgSend_77(
        this.pointer, _sel_removeAttribute_range_, name.pointer, range);
  }

  void replaceCharactersInRange_withAttributedString_(
      _NSRange range, NSAttributedString attrString) {
    _objc_msgSend_78(
        this.pointer,
        _sel_replaceCharactersInRange_withAttributedString_,
        range,
        attrString.pointer);
  }

  void insertAttributedString_atIndex_(NSAttributedString attrString, int loc) {
    _objc_msgSend_79(this.pointer, _sel_insertAttributedString_atIndex_,
        attrString.pointer, loc);
  }

  void appendAttributedString_(NSAttributedString attrString) {
    _objc_msgSend_80(
        this.pointer, _sel_appendAttributedString_, attrString.pointer);
  }

  void deleteCharactersInRange_(_NSRange range) {
    _objc_msgSend_81(this.pointer, _sel_deleteCharactersInRange_, range);
  }

  void setAttributedString_(NSAttributedString attrString) {
    _objc_msgSend_80(
        this.pointer, _sel_setAttributedString_, attrString.pointer);
  }

  void beginEditing() {
    _objc_msgSend_82(this.pointer, _sel_beginEditing);
  }

  void endEditing() {
    _objc_msgSend_82(this.pointer, _sel_endEditing);
  }

  void appendLocalizedFormat_(NSAttributedString format) {
    _objc_msgSend_80(this.pointer, _sel_appendLocalizedFormat_, format.pointer);
  }

  @override
  NSMutableAttributedString initWithString_(objc.NSString str) {
    final _ret =
        _objc_msgSend_35(this.pointer, _sel_initWithString_, str.pointer);
    return NSMutableAttributedString.castFromPointer(_ret,
        retain: true, release: true);
  }

  @override
  NSMutableAttributedString initWithString_attributes_(
      objc.NSString str, objc.NSDictionary? attrs) {
    final _ret = _objc_msgSend_36(this.pointer, _sel_initWithString_attributes_,
        str.pointer, attrs?.pointer ?? ffi.nullptr);
    return NSMutableAttributedString.castFromPointer(_ret,
        retain: true, release: true);
  }

  @override
  NSMutableAttributedString initWithAttributedString_(
      NSAttributedString attrStr) {
    final _ret = _objc_msgSend_37(
        this.pointer, _sel_initWithAttributedString_, attrStr.pointer);
    return NSMutableAttributedString.castFromPointer(_ret,
        retain: true, release: true);
  }

  @override
  NSMutableAttributedString?
      initWithContentsOfMarkdownFileAtURL_options_baseURL_error_(
          objc.NSURL markdownFile,
          NSAttributedStringMarkdownParsingOptions? options,
          objc.NSURL? baseURL,
          ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    final _ret = _objc_msgSend_53(
        this.pointer,
        _sel_initWithContentsOfMarkdownFileAtURL_options_baseURL_error_,
        markdownFile.pointer,
        options?.pointer ?? ffi.nullptr,
        baseURL?.pointer ?? ffi.nullptr,
        error);
    return _ret.address == 0
        ? null
        : NSMutableAttributedString.castFromPointer(_ret,
            retain: true, release: true);
  }

  @override
  NSMutableAttributedString? initWithMarkdown_options_baseURL_error_(
      objc.NSData markdown,
      NSAttributedStringMarkdownParsingOptions? options,
      objc.NSURL? baseURL,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    final _ret = _objc_msgSend_54(
        this.pointer,
        _sel_initWithMarkdown_options_baseURL_error_,
        markdown.pointer,
        options?.pointer ?? ffi.nullptr,
        baseURL?.pointer ?? ffi.nullptr,
        error);
    return _ret.address == 0
        ? null
        : NSMutableAttributedString.castFromPointer(_ret,
            retain: true, release: true);
  }

  @override
  NSMutableAttributedString? initWithMarkdownString_options_baseURL_error_(
      objc.NSString markdownString,
      NSAttributedStringMarkdownParsingOptions? options,
      objc.NSURL? baseURL,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    final _ret = _objc_msgSend_55(
        this.pointer,
        _sel_initWithMarkdownString_options_baseURL_error_,
        markdownString.pointer,
        options?.pointer ?? ffi.nullptr,
        baseURL?.pointer ?? ffi.nullptr,
        error);
    return _ret.address == 0
        ? null
        : NSMutableAttributedString.castFromPointer(_ret,
            retain: true, release: true);
  }

  @override
  NSMutableAttributedString initWithFormat_options_locale_(
      NSAttributedString format, int options, objc.NSLocale? locale) {
    final _ret = _objc_msgSend_56(
        this.pointer,
        _sel_initWithFormat_options_locale_,
        format.pointer,
        options,
        locale?.pointer ?? ffi.nullptr);
    return NSMutableAttributedString.castFromPointer(_ret,
        retain: true, release: true);
  }

  @override
  NSMutableAttributedString initWithFormat_options_locale_arguments_(
      NSAttributedString format,
      int options,
      objc.NSLocale? locale,
      ffi.Pointer<__va_list_tag> arguments) {
    final _ret = _objc_msgSend_57(
        this.pointer,
        _sel_initWithFormat_options_locale_arguments_,
        format.pointer,
        options,
        locale?.pointer ?? ffi.nullptr,
        arguments);
    return NSMutableAttributedString.castFromPointer(_ret,
        retain: true, release: true);
  }

  static NSMutableAttributedString localizedAttributedStringWithFormat_(
      NSAttributedString format) {
    final _ret = _objc_msgSend_37(_class_NSMutableAttributedString,
        _sel_localizedAttributedStringWithFormat_, format.pointer);
    return NSMutableAttributedString.castFromPointer(_ret,
        retain: true, release: true);
  }

  static NSMutableAttributedString localizedAttributedStringWithFormat_options_(
      NSAttributedString format, int options) {
    final _ret = _objc_msgSend_58(
        _class_NSMutableAttributedString,
        _sel_localizedAttributedStringWithFormat_options_,
        format.pointer,
        options);
    return NSMutableAttributedString.castFromPointer(_ret,
        retain: true, release: true);
  }

  @override
  NSMutableAttributedString initWithFormat_options_locale_context_(
      NSAttributedString format,
      int options,
      objc.NSLocale? locale,
      objc.NSDictionary context) {
    final _ret = _objc_msgSend_59(
        this.pointer,
        _sel_initWithFormat_options_locale_context_,
        format.pointer,
        options,
        locale?.pointer ?? ffi.nullptr,
        context.pointer);
    return NSMutableAttributedString.castFromPointer(_ret,
        retain: true, release: true);
  }

  @override
  NSMutableAttributedString initWithFormat_options_locale_context_arguments_(
      NSAttributedString format,
      int options,
      objc.NSLocale? locale,
      objc.NSDictionary context,
      ffi.Pointer<__va_list_tag> arguments) {
    final _ret = _objc_msgSend_60(
        this.pointer,
        _sel_initWithFormat_options_locale_context_arguments_,
        format.pointer,
        options,
        locale?.pointer ?? ffi.nullptr,
        context.pointer,
        arguments);
    return NSMutableAttributedString.castFromPointer(_ret,
        retain: true, release: true);
  }

  static NSMutableAttributedString localizedAttributedStringWithFormat_context_(
      NSAttributedString format, objc.NSDictionary context) {
    final _ret = _objc_msgSend_61(
        _class_NSMutableAttributedString,
        _sel_localizedAttributedStringWithFormat_context_,
        format.pointer,
        context.pointer);
    return NSMutableAttributedString.castFromPointer(_ret,
        retain: true, release: true);
  }

  static NSMutableAttributedString
      localizedAttributedStringWithFormat_options_context_(
          NSAttributedString format, int options, objc.NSDictionary context) {
    final _ret = _objc_msgSend_62(
        _class_NSMutableAttributedString,
        _sel_localizedAttributedStringWithFormat_options_context_,
        format.pointer,
        options,
        context.pointer);
    return NSMutableAttributedString.castFromPointer(_ret,
        retain: true, release: true);
  }

  @override
  NSMutableAttributedString init() {
    final _ret = _objc_msgSend_40(this.pointer, _sel_init);
    return NSMutableAttributedString.castFromPointer(_ret,
        retain: true, release: true);
  }

  static NSMutableAttributedString new1() {
    final _ret = _objc_msgSend_40(_class_NSMutableAttributedString, _sel_new);
    return NSMutableAttributedString.castFromPointer(_ret,
        retain: false, release: true);
  }

  static NSMutableAttributedString allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_47(
        _class_NSMutableAttributedString, _sel_allocWithZone_, zone);
    return NSMutableAttributedString.castFromPointer(_ret,
        retain: false, release: true);
  }

  static NSMutableAttributedString alloc() {
    final _ret = _objc_msgSend_40(_class_NSMutableAttributedString, _sel_alloc);
    return NSMutableAttributedString.castFromPointer(_ret,
        retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.NSObject aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.NSObject? anArgument) {
    _objc_msgSend_48(
        _class_NSMutableAttributedString,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  static void cancelPreviousPerformRequestsWithTarget_(objc.NSObject aTarget) {
    _objc_msgSend_49(_class_NSMutableAttributedString,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_7(
        _class_NSMutableAttributedString, _sel_accessInstanceVariablesDirectly);
  }

  static bool useStoredAccessor() {
    return _objc_msgSend_7(
        _class_NSMutableAttributedString, _sel_useStoredAccessor);
  }

  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_50(_class_NSMutableAttributedString,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_51(_class_NSMutableAttributedString,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_52(
        _class_NSMutableAttributedString,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_6(
        _class_NSMutableAttributedString, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSObject classForKeyedUnarchiver() {
    final _ret = _objc_msgSend_40(
        _class_NSMutableAttributedString, _sel_classForKeyedUnarchiver);
    return objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }
}

late final _class_NSMutableAttributedString =
    objc.getClass("NSMutableAttributedString");
late final _sel_replaceCharactersInRange_withString_ =
    objc.registerName("replaceCharactersInRange:withString:");
final _objc_msgSend_72 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                _NSRange,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            _NSRange,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_setAttributes_range_ =
    objc.registerName("setAttributes:range:");
final _objc_msgSend_73 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                _NSRange)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            _NSRange)>();
late final _sel_mutableString = objc.registerName("mutableString");
final _objc_msgSend_74 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_addAttribute_value_range_ =
    objc.registerName("addAttribute:value:range:");
final _objc_msgSend_75 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                _NSRange)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            _NSRange)>();
late final _sel_addAttributes_range_ =
    objc.registerName("addAttributes:range:");
final _objc_msgSend_76 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                _NSRange)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            _NSRange)>();
late final _sel_removeAttribute_range_ =
    objc.registerName("removeAttribute:range:");
final _objc_msgSend_77 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                _NSRange)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            _NSRange)>();
late final _sel_replaceCharactersInRange_withAttributedString_ =
    objc.registerName("replaceCharactersInRange:withAttributedString:");
final _objc_msgSend_78 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                _NSRange,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            _NSRange,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_insertAttributedString_atIndex_ =
    objc.registerName("insertAttributedString:atIndex:");
final _objc_msgSend_79 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.UnsignedLong)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int)>();
late final _sel_appendAttributedString_ =
    objc.registerName("appendAttributedString:");
final _objc_msgSend_80 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_deleteCharactersInRange_ =
    objc.registerName("deleteCharactersInRange:");
final _objc_msgSend_81 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, _NSRange)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, _NSRange)>();
late final _sel_setAttributedString_ =
    objc.registerName("setAttributedString:");
late final _sel_beginEditing = objc.registerName("beginEditing");
final _objc_msgSend_82 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_endEditing = objc.registerName("endEditing");
late final _sel_appendLocalizedFormat_ =
    objc.registerName("appendLocalizedFormat:");

class NSDateFormatter extends NSFormatter {
  NSDateFormatter._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSDateFormatter] that points to the same underlying object as [other].
  NSDateFormatter.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSDateFormatter] that wraps the given raw object pointer.
  NSDateFormatter.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSDateFormatter].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSDateFormatter);
  }

  int get formattingContext {
    return _objc_msgSend_89(this.pointer, _sel_formattingContext);
  }

  set formattingContext(int value) {
    return _objc_msgSend_90(this.pointer, _sel_setFormattingContext_, value);
  }

  bool getObjectValue_forString_range_error_(
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> obj,
      objc.NSString string,
      ffi.Pointer<_NSRange> rangep,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    return _objc_msgSend_91(
        this.pointer,
        _sel_getObjectValue_forString_range_error_,
        obj,
        string.pointer,
        rangep,
        error);
  }

  objc.NSString stringFromDate_(objc.NSDate date) {
    final _ret =
        _objc_msgSend_92(this.pointer, _sel_stringFromDate_, date.pointer);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSDate? dateFromString_(objc.NSString string) {
    final _ret =
        _objc_msgSend_93(this.pointer, _sel_dateFromString_, string.pointer);
    return _ret.address == 0
        ? null
        : objc.NSDate.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSString localizedStringFromDate_dateStyle_timeStyle_(
      objc.NSDate date, int dstyle, int tstyle) {
    final _ret = _objc_msgSend_94(
        _class_NSDateFormatter,
        _sel_localizedStringFromDate_dateStyle_timeStyle_,
        date.pointer,
        dstyle,
        tstyle);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSString? dateFormatFromTemplate_options_locale_(
      objc.NSString tmplate, int opts, objc.NSLocale? locale) {
    final _ret = _objc_msgSend_95(
        _class_NSDateFormatter,
        _sel_dateFormatFromTemplate_options_locale_,
        tmplate.pointer,
        opts,
        locale?.pointer ?? ffi.nullptr);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  static int getDefaultFormatterBehavior() {
    return _objc_msgSend_96(
        _class_NSDateFormatter, _sel_defaultFormatterBehavior);
  }

  static void setDefaultFormatterBehavior(int value) {
    return _objc_msgSend_97(
        _class_NSDateFormatter, _sel_setDefaultFormatterBehavior_, value);
  }

  void setLocalizedDateFormatFromTemplate_(objc.NSString dateFormatTemplate) {
    _objc_msgSend_98(this.pointer, _sel_setLocalizedDateFormatFromTemplate_,
        dateFormatTemplate.pointer);
  }

  objc.NSString get dateFormat {
    final _ret = _objc_msgSend_12(this.pointer, _sel_dateFormat);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  set dateFormat(objc.NSString value) {
    return _objc_msgSend_99(this.pointer, _sel_setDateFormat_, value.pointer);
  }

  int get dateStyle {
    return _objc_msgSend_100(this.pointer, _sel_dateStyle);
  }

  set dateStyle(int value) {
    return _objc_msgSend_101(this.pointer, _sel_setDateStyle_, value);
  }

  int get timeStyle {
    return _objc_msgSend_100(this.pointer, _sel_timeStyle);
  }

  set timeStyle(int value) {
    return _objc_msgSend_101(this.pointer, _sel_setTimeStyle_, value);
  }

  objc.NSLocale get locale {
    final _ret = _objc_msgSend_102(this.pointer, _sel_locale);
    return objc.NSLocale.castFromPointer(_ret, retain: true, release: true);
  }

  set locale(objc.NSLocale value) {
    return _objc_msgSend_103(this.pointer, _sel_setLocale_, value.pointer);
  }

  bool get generatesCalendarDates {
    return _objc_msgSend_7(this.pointer, _sel_generatesCalendarDates);
  }

  set generatesCalendarDates(bool value) {
    return _objc_msgSend_41(
        this.pointer, _sel_setGeneratesCalendarDates_, value);
  }

  int get formatterBehavior {
    return _objc_msgSend_96(this.pointer, _sel_formatterBehavior);
  }

  set formatterBehavior(int value) {
    return _objc_msgSend_97(this.pointer, _sel_setFormatterBehavior_, value);
  }

  NSTimeZone get timeZone {
    final _ret = _objc_msgSend_110(this.pointer, _sel_timeZone);
    return NSTimeZone.castFromPointer(_ret, retain: true, release: true);
  }

  set timeZone(NSTimeZone value) {
    return _objc_msgSend_111(this.pointer, _sel_setTimeZone_, value.pointer);
  }

  NSCalendar get calendar {
    final _ret = _objc_msgSend_121(this.pointer, _sel_calendar);
    return NSCalendar.castFromPointer(_ret, retain: true, release: true);
  }

  set calendar(NSCalendar value) {
    return _objc_msgSend_161(this.pointer, _sel_setCalendar_, value.pointer);
  }

  bool get lenient {
    return _objc_msgSend_7(this.pointer, _sel_isLenient);
  }

  set lenient(bool value) {
    return _objc_msgSend_41(this.pointer, _sel_setLenient_, value);
  }

  objc.NSDate? get twoDigitStartDate {
    final _ret = _objc_msgSend_116(this.pointer, _sel_twoDigitStartDate);
    return _ret.address == 0
        ? null
        : objc.NSDate.castFromPointer(_ret, retain: true, release: true);
  }

  set twoDigitStartDate(objc.NSDate? value) {
    return _objc_msgSend_162(this.pointer, _sel_setTwoDigitStartDate_,
        value?.pointer ?? ffi.nullptr);
  }

  objc.NSDate? get defaultDate {
    final _ret = _objc_msgSend_116(this.pointer, _sel_defaultDate);
    return _ret.address == 0
        ? null
        : objc.NSDate.castFromPointer(_ret, retain: true, release: true);
  }

  set defaultDate(objc.NSDate? value) {
    return _objc_msgSend_162(
        this.pointer, _sel_setDefaultDate_, value?.pointer ?? ffi.nullptr);
  }

  objc.NSArray get eraSymbols {
    final _ret = _objc_msgSend_6(this.pointer, _sel_eraSymbols);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  set eraSymbols(objc.NSArray value) {
    return _objc_msgSend_163(this.pointer, _sel_setEraSymbols_, value.pointer);
  }

  objc.NSArray get monthSymbols {
    final _ret = _objc_msgSend_6(this.pointer, _sel_monthSymbols);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  set monthSymbols(objc.NSArray value) {
    return _objc_msgSend_163(
        this.pointer, _sel_setMonthSymbols_, value.pointer);
  }

  objc.NSArray get shortMonthSymbols {
    final _ret = _objc_msgSend_6(this.pointer, _sel_shortMonthSymbols);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  set shortMonthSymbols(objc.NSArray value) {
    return _objc_msgSend_163(
        this.pointer, _sel_setShortMonthSymbols_, value.pointer);
  }

  objc.NSArray get weekdaySymbols {
    final _ret = _objc_msgSend_6(this.pointer, _sel_weekdaySymbols);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  set weekdaySymbols(objc.NSArray value) {
    return _objc_msgSend_163(
        this.pointer, _sel_setWeekdaySymbols_, value.pointer);
  }

  objc.NSArray get shortWeekdaySymbols {
    final _ret = _objc_msgSend_6(this.pointer, _sel_shortWeekdaySymbols);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  set shortWeekdaySymbols(objc.NSArray value) {
    return _objc_msgSend_163(
        this.pointer, _sel_setShortWeekdaySymbols_, value.pointer);
  }

  objc.NSString get AMSymbol {
    final _ret = _objc_msgSend_12(this.pointer, _sel_AMSymbol);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  set AMSymbol(objc.NSString value) {
    return _objc_msgSend_99(this.pointer, _sel_setAMSymbol_, value.pointer);
  }

  objc.NSString get PMSymbol {
    final _ret = _objc_msgSend_12(this.pointer, _sel_PMSymbol);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  set PMSymbol(objc.NSString value) {
    return _objc_msgSend_99(this.pointer, _sel_setPMSymbol_, value.pointer);
  }

  objc.NSArray get longEraSymbols {
    final _ret = _objc_msgSend_6(this.pointer, _sel_longEraSymbols);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  set longEraSymbols(objc.NSArray value) {
    return _objc_msgSend_163(
        this.pointer, _sel_setLongEraSymbols_, value.pointer);
  }

  objc.NSArray get veryShortMonthSymbols {
    final _ret = _objc_msgSend_6(this.pointer, _sel_veryShortMonthSymbols);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  set veryShortMonthSymbols(objc.NSArray value) {
    return _objc_msgSend_163(
        this.pointer, _sel_setVeryShortMonthSymbols_, value.pointer);
  }

  objc.NSArray get standaloneMonthSymbols {
    final _ret = _objc_msgSend_6(this.pointer, _sel_standaloneMonthSymbols);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  set standaloneMonthSymbols(objc.NSArray value) {
    return _objc_msgSend_163(
        this.pointer, _sel_setStandaloneMonthSymbols_, value.pointer);
  }

  objc.NSArray get shortStandaloneMonthSymbols {
    final _ret =
        _objc_msgSend_6(this.pointer, _sel_shortStandaloneMonthSymbols);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  set shortStandaloneMonthSymbols(objc.NSArray value) {
    return _objc_msgSend_163(
        this.pointer, _sel_setShortStandaloneMonthSymbols_, value.pointer);
  }

  objc.NSArray get veryShortStandaloneMonthSymbols {
    final _ret =
        _objc_msgSend_6(this.pointer, _sel_veryShortStandaloneMonthSymbols);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  set veryShortStandaloneMonthSymbols(objc.NSArray value) {
    return _objc_msgSend_163(
        this.pointer, _sel_setVeryShortStandaloneMonthSymbols_, value.pointer);
  }

  objc.NSArray get veryShortWeekdaySymbols {
    final _ret = _objc_msgSend_6(this.pointer, _sel_veryShortWeekdaySymbols);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  set veryShortWeekdaySymbols(objc.NSArray value) {
    return _objc_msgSend_163(
        this.pointer, _sel_setVeryShortWeekdaySymbols_, value.pointer);
  }

  objc.NSArray get standaloneWeekdaySymbols {
    final _ret = _objc_msgSend_6(this.pointer, _sel_standaloneWeekdaySymbols);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  set standaloneWeekdaySymbols(objc.NSArray value) {
    return _objc_msgSend_163(
        this.pointer, _sel_setStandaloneWeekdaySymbols_, value.pointer);
  }

  objc.NSArray get shortStandaloneWeekdaySymbols {
    final _ret =
        _objc_msgSend_6(this.pointer, _sel_shortStandaloneWeekdaySymbols);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  set shortStandaloneWeekdaySymbols(objc.NSArray value) {
    return _objc_msgSend_163(
        this.pointer, _sel_setShortStandaloneWeekdaySymbols_, value.pointer);
  }

  objc.NSArray get veryShortStandaloneWeekdaySymbols {
    final _ret =
        _objc_msgSend_6(this.pointer, _sel_veryShortStandaloneWeekdaySymbols);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  set veryShortStandaloneWeekdaySymbols(objc.NSArray value) {
    return _objc_msgSend_163(this.pointer,
        _sel_setVeryShortStandaloneWeekdaySymbols_, value.pointer);
  }

  objc.NSArray get quarterSymbols {
    final _ret = _objc_msgSend_6(this.pointer, _sel_quarterSymbols);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  set quarterSymbols(objc.NSArray value) {
    return _objc_msgSend_163(
        this.pointer, _sel_setQuarterSymbols_, value.pointer);
  }

  objc.NSArray get shortQuarterSymbols {
    final _ret = _objc_msgSend_6(this.pointer, _sel_shortQuarterSymbols);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  set shortQuarterSymbols(objc.NSArray value) {
    return _objc_msgSend_163(
        this.pointer, _sel_setShortQuarterSymbols_, value.pointer);
  }

  objc.NSArray get standaloneQuarterSymbols {
    final _ret = _objc_msgSend_6(this.pointer, _sel_standaloneQuarterSymbols);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  set standaloneQuarterSymbols(objc.NSArray value) {
    return _objc_msgSend_163(
        this.pointer, _sel_setStandaloneQuarterSymbols_, value.pointer);
  }

  objc.NSArray get shortStandaloneQuarterSymbols {
    final _ret =
        _objc_msgSend_6(this.pointer, _sel_shortStandaloneQuarterSymbols);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  set shortStandaloneQuarterSymbols(objc.NSArray value) {
    return _objc_msgSend_163(
        this.pointer, _sel_setShortStandaloneQuarterSymbols_, value.pointer);
  }

  objc.NSDate? get gregorianStartDate {
    final _ret = _objc_msgSend_116(this.pointer, _sel_gregorianStartDate);
    return _ret.address == 0
        ? null
        : objc.NSDate.castFromPointer(_ret, retain: true, release: true);
  }

  set gregorianStartDate(objc.NSDate? value) {
    return _objc_msgSend_162(this.pointer, _sel_setGregorianStartDate_,
        value?.pointer ?? ffi.nullptr);
  }

  bool get doesRelativeDateFormatting {
    return _objc_msgSend_7(this.pointer, _sel_doesRelativeDateFormatting);
  }

  set doesRelativeDateFormatting(bool value) {
    return _objc_msgSend_41(
        this.pointer, _sel_setDoesRelativeDateFormatting_, value);
  }

  objc.NSObject initWithDateFormat_allowNaturalLanguage_(
      objc.NSString format, bool flag) {
    final _ret = _objc_msgSend_164(this.pointer,
        _sel_initWithDateFormat_allowNaturalLanguage_, format.pointer, flag);
    return objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }

  bool allowsNaturalLanguage() {
    return _objc_msgSend_7(this.pointer, _sel_allowsNaturalLanguage);
  }

  @override
  NSDateFormatter init() {
    final _ret = _objc_msgSend_40(this.pointer, _sel_init);
    return NSDateFormatter.castFromPointer(_ret, retain: true, release: true);
  }

  static NSDateFormatter new1() {
    final _ret = _objc_msgSend_40(_class_NSDateFormatter, _sel_new);
    return NSDateFormatter.castFromPointer(_ret, retain: false, release: true);
  }

  static NSDateFormatter allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_47(_class_NSDateFormatter, _sel_allocWithZone_, zone);
    return NSDateFormatter.castFromPointer(_ret, retain: false, release: true);
  }

  static NSDateFormatter alloc() {
    final _ret = _objc_msgSend_40(_class_NSDateFormatter, _sel_alloc);
    return NSDateFormatter.castFromPointer(_ret, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.NSObject aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.NSObject? anArgument) {
    _objc_msgSend_48(
        _class_NSDateFormatter,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  static void cancelPreviousPerformRequestsWithTarget_(objc.NSObject aTarget) {
    _objc_msgSend_49(_class_NSDateFormatter,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_7(
        _class_NSDateFormatter, _sel_accessInstanceVariablesDirectly);
  }

  static bool useStoredAccessor() {
    return _objc_msgSend_7(_class_NSDateFormatter, _sel_useStoredAccessor);
  }

  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_50(_class_NSDateFormatter,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_51(_class_NSDateFormatter,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_52(
        _class_NSDateFormatter,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_6(
        _class_NSDateFormatter, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSObject classForKeyedUnarchiver() {
    final _ret =
        _objc_msgSend_40(_class_NSDateFormatter, _sel_classForKeyedUnarchiver);
    return objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }
}

late final _class_NSDateFormatter = objc.getClass("NSDateFormatter");

class NSFormatter extends objc.NSObject {
  NSFormatter._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSFormatter] that points to the same underlying object as [other].
  NSFormatter.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSFormatter] that wraps the given raw object pointer.
  NSFormatter.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSFormatter].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSFormatter);
  }

  objc.NSString? stringForObjectValue_(objc.NSObject? obj) {
    final _ret = _objc_msgSend_83(
        this.pointer, _sel_stringForObjectValue_, obj?.pointer ?? ffi.nullptr);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  NSAttributedString? attributedStringForObjectValue_withDefaultAttributes_(
      objc.NSObject obj, objc.NSDictionary? attrs) {
    final _ret = _objc_msgSend_84(
        this.pointer,
        _sel_attributedStringForObjectValue_withDefaultAttributes_,
        obj.pointer,
        attrs?.pointer ?? ffi.nullptr);
    return _ret.address == 0
        ? null
        : NSAttributedString.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSString? editingStringForObjectValue_(objc.NSObject obj) {
    final _ret = _objc_msgSend_85(
        this.pointer, _sel_editingStringForObjectValue_, obj.pointer);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  bool getObjectValue_forString_errorDescription_(
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> obj,
      objc.NSString string,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    return _objc_msgSend_86(
        this.pointer,
        _sel_getObjectValue_forString_errorDescription_,
        obj,
        string.pointer,
        error);
  }

  bool isPartialStringValid_newEditingString_errorDescription_(
      objc.NSString partialString,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> newString,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    return _objc_msgSend_87(
        this.pointer,
        _sel_isPartialStringValid_newEditingString_errorDescription_,
        partialString.pointer,
        newString,
        error);
  }

  bool
      isPartialStringValid_proposedSelectedRange_originalString_originalSelectedRange_errorDescription_(
          ffi.Pointer<ffi.Pointer<objc.ObjCObject>> partialStringPtr,
          ffi.Pointer<_NSRange> proposedSelRangePtr,
          objc.NSString origString,
          _NSRange origSelRange,
          ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    return _objc_msgSend_88(
        this.pointer,
        _sel_isPartialStringValid_proposedSelectedRange_originalString_originalSelectedRange_errorDescription_,
        partialStringPtr,
        proposedSelRangePtr,
        origString.pointer,
        origSelRange,
        error);
  }

  @override
  NSFormatter init() {
    final _ret = _objc_msgSend_40(this.pointer, _sel_init);
    return NSFormatter.castFromPointer(_ret, retain: true, release: true);
  }

  static NSFormatter new1() {
    final _ret = _objc_msgSend_40(_class_NSFormatter, _sel_new);
    return NSFormatter.castFromPointer(_ret, retain: false, release: true);
  }

  static NSFormatter allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_47(_class_NSFormatter, _sel_allocWithZone_, zone);
    return NSFormatter.castFromPointer(_ret, retain: false, release: true);
  }

  static NSFormatter alloc() {
    final _ret = _objc_msgSend_40(_class_NSFormatter, _sel_alloc);
    return NSFormatter.castFromPointer(_ret, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.NSObject aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.NSObject? anArgument) {
    _objc_msgSend_48(
        _class_NSFormatter,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  static void cancelPreviousPerformRequestsWithTarget_(objc.NSObject aTarget) {
    _objc_msgSend_49(_class_NSFormatter,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_7(
        _class_NSFormatter, _sel_accessInstanceVariablesDirectly);
  }

  static bool useStoredAccessor() {
    return _objc_msgSend_7(_class_NSFormatter, _sel_useStoredAccessor);
  }

  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_50(_class_NSFormatter,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_51(_class_NSFormatter,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_52(
        _class_NSFormatter,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_6(
        _class_NSFormatter, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSObject classForKeyedUnarchiver() {
    final _ret =
        _objc_msgSend_40(_class_NSFormatter, _sel_classForKeyedUnarchiver);
    return objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }
}

late final _class_NSFormatter = objc.getClass("NSFormatter");
late final _sel_stringForObjectValue_ =
    objc.registerName("stringForObjectValue:");
final _objc_msgSend_83 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_attributedStringForObjectValue_withDefaultAttributes_ =
    objc.registerName("attributedStringForObjectValue:withDefaultAttributes:");
final _objc_msgSend_84 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_editingStringForObjectValue_ =
    objc.registerName("editingStringForObjectValue:");
final _objc_msgSend_85 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_getObjectValue_forString_errorDescription_ =
    objc.registerName("getObjectValue:forString:errorDescription:");
final _objc_msgSend_86 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_isPartialStringValid_newEditingString_errorDescription_ = objc
    .registerName("isPartialStringValid:newEditingString:errorDescription:");
final _objc_msgSend_87 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_isPartialStringValid_proposedSelectedRange_originalString_originalSelectedRange_errorDescription_ =
    objc.registerName(
        "isPartialStringValid:proposedSelectedRange:originalString:originalSelectedRange:errorDescription:");
final _objc_msgSend_88 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
                ffi.Pointer<_NSRange>,
                ffi.Pointer<objc.ObjCObject>,
                _NSRange,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
            ffi.Pointer<_NSRange>,
            ffi.Pointer<objc.ObjCObject>,
            _NSRange,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();

abstract class NSFormattingContext {
  static const int NSFormattingContextUnknown = 0;
  static const int NSFormattingContextDynamic = 1;
  static const int NSFormattingContextStandalone = 2;
  static const int NSFormattingContextListItem = 3;
  static const int NSFormattingContextBeginningOfSentence = 4;
  static const int NSFormattingContextMiddleOfSentence = 5;
}

late final _sel_formattingContext = objc.registerName("formattingContext");
final _objc_msgSend_89 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Int32 Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setFormattingContext_ =
    objc.registerName("setFormattingContext:");
final _objc_msgSend_90 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Int32)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_getObjectValue_forString_range_error_ =
    objc.registerName("getObjectValue:forString:range:error:");
final _objc_msgSend_91 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<_NSRange>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<_NSRange>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_stringFromDate_ = objc.registerName("stringFromDate:");
final _objc_msgSend_92 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_dateFromString_ = objc.registerName("dateFromString:");
final _objc_msgSend_93 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();

abstract class NSDateFormatterStyle {
  static const int NSDateFormatterNoStyle = 0;
  static const int NSDateFormatterShortStyle = 1;
  static const int NSDateFormatterMediumStyle = 2;
  static const int NSDateFormatterLongStyle = 3;
  static const int NSDateFormatterFullStyle = 4;
}

late final _sel_localizedStringFromDate_dateStyle_timeStyle_ =
    objc.registerName("localizedStringFromDate:dateStyle:timeStyle:");
final _objc_msgSend_94 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Int32,
                ffi.Int32)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            int)>();
late final _sel_dateFormatFromTemplate_options_locale_ =
    objc.registerName("dateFormatFromTemplate:options:locale:");
final _objc_msgSend_95 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.UnsignedLong,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            ffi.Pointer<objc.ObjCObject>)>();

abstract class NSDateFormatterBehavior {
  static const int NSDateFormatterBehaviorDefault = 0;
  static const int NSDateFormatterBehavior10_0 = 1000;
  static const int NSDateFormatterBehavior10_4 = 1040;
}

late final _sel_defaultFormatterBehavior =
    objc.registerName("defaultFormatterBehavior");
final _objc_msgSend_96 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Int32 Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setDefaultFormatterBehavior_ =
    objc.registerName("setDefaultFormatterBehavior:");
final _objc_msgSend_97 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Int32)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_setLocalizedDateFormatFromTemplate_ =
    objc.registerName("setLocalizedDateFormatFromTemplate:");
final _objc_msgSend_98 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_dateFormat = objc.registerName("dateFormat");
late final _sel_setDateFormat_ = objc.registerName("setDateFormat:");
final _objc_msgSend_99 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_dateStyle = objc.registerName("dateStyle");
final _objc_msgSend_100 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Int32 Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setDateStyle_ = objc.registerName("setDateStyle:");
final _objc_msgSend_101 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Int32)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_timeStyle = objc.registerName("timeStyle");
late final _sel_setTimeStyle_ = objc.registerName("setTimeStyle:");
late final _sel_locale = objc.registerName("locale");
final _objc_msgSend_102 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setLocale_ = objc.registerName("setLocale:");
final _objc_msgSend_103 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_generatesCalendarDates =
    objc.registerName("generatesCalendarDates");
late final _sel_setGeneratesCalendarDates_ =
    objc.registerName("setGeneratesCalendarDates:");
late final _sel_formatterBehavior = objc.registerName("formatterBehavior");
late final _sel_setFormatterBehavior_ =
    objc.registerName("setFormatterBehavior:");

class NSTimeZone extends objc.NSObject {
  NSTimeZone._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSTimeZone] that points to the same underlying object as [other].
  NSTimeZone.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSTimeZone] that wraps the given raw object pointer.
  NSTimeZone.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSTimeZone].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(obj.pointer, _sel_isKindOfClass_, _class_NSTimeZone);
  }

  objc.NSString get name {
    final _ret = _objc_msgSend_12(this.pointer, _sel_name);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSData get data {
    final _ret = _objc_msgSend_104(this.pointer, _sel_data);
    return objc.NSData.castFromPointer(_ret, retain: true, release: true);
  }

  int secondsFromGMTForDate_(objc.NSDate aDate) {
    return _objc_msgSend_105(
        this.pointer, _sel_secondsFromGMTForDate_, aDate.pointer);
  }

  objc.NSString? abbreviationForDate_(objc.NSDate aDate) {
    final _ret = _objc_msgSend_106(
        this.pointer, _sel_abbreviationForDate_, aDate.pointer);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  bool isDaylightSavingTimeForDate_(objc.NSDate aDate) {
    return _objc_msgSend_107(
        this.pointer, _sel_isDaylightSavingTimeForDate_, aDate.pointer);
  }

  double daylightSavingTimeOffsetForDate_(objc.NSDate aDate) {
    return objc.useMsgSendVariants
        ? _objc_msgSend_108Fpret(
            this.pointer, _sel_daylightSavingTimeOffsetForDate_, aDate.pointer)
        : _objc_msgSend_108(
            this.pointer, _sel_daylightSavingTimeOffsetForDate_, aDate.pointer);
  }

  objc.NSDate? nextDaylightSavingTimeTransitionAfterDate_(objc.NSDate aDate) {
    final _ret = _objc_msgSend_109(this.pointer,
        _sel_nextDaylightSavingTimeTransitionAfterDate_, aDate.pointer);
    return _ret.address == 0
        ? null
        : objc.NSDate.castFromPointer(_ret, retain: true, release: true);
  }

  static NSTimeZone getSystemTimeZone() {
    final _ret = _objc_msgSend_110(_class_NSTimeZone, _sel_systemTimeZone);
    return NSTimeZone.castFromPointer(_ret, retain: true, release: true);
  }

  static void resetSystemTimeZone() {
    _objc_msgSend_82(_class_NSTimeZone, _sel_resetSystemTimeZone);
  }

  static NSTimeZone getDefaultTimeZone() {
    final _ret = _objc_msgSend_110(_class_NSTimeZone, _sel_defaultTimeZone);
    return NSTimeZone.castFromPointer(_ret, retain: true, release: true);
  }

  static void setDefaultTimeZone(NSTimeZone value) {
    return _objc_msgSend_111(
        _class_NSTimeZone, _sel_setDefaultTimeZone_, value.pointer);
  }

  static NSTimeZone getLocalTimeZone() {
    final _ret = _objc_msgSend_110(_class_NSTimeZone, _sel_localTimeZone);
    return NSTimeZone.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSArray getKnownTimeZoneNames() {
    final _ret = _objc_msgSend_6(_class_NSTimeZone, _sel_knownTimeZoneNames);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSDictionary getAbbreviationDictionary() {
    final _ret =
        _objc_msgSend_112(_class_NSTimeZone, _sel_abbreviationDictionary);
    return objc.NSDictionary.castFromPointer(_ret, retain: true, release: true);
  }

  static void setAbbreviationDictionary(objc.NSDictionary value) {
    return _objc_msgSend_113(
        _class_NSTimeZone, _sel_setAbbreviationDictionary_, value.pointer);
  }

  static objc.NSString getTimeZoneDataVersion() {
    final _ret = _objc_msgSend_12(_class_NSTimeZone, _sel_timeZoneDataVersion);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  int get secondsFromGMT {
    return _objc_msgSend_114(this.pointer, _sel_secondsFromGMT);
  }

  objc.NSString? get abbreviation {
    final _ret = _objc_msgSend_13(this.pointer, _sel_abbreviation);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  bool get daylightSavingTime {
    return _objc_msgSend_7(this.pointer, _sel_isDaylightSavingTime);
  }

  double get daylightSavingTimeOffset {
    return objc.useMsgSendVariants
        ? _objc_msgSend_115Fpret(this.pointer, _sel_daylightSavingTimeOffset)
        : _objc_msgSend_115(this.pointer, _sel_daylightSavingTimeOffset);
  }

  objc.NSDate? get nextDaylightSavingTimeTransition {
    final _ret =
        _objc_msgSend_116(this.pointer, _sel_nextDaylightSavingTimeTransition);
    return _ret.address == 0
        ? null
        : objc.NSDate.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSString get description {
    final _ret = _objc_msgSend_12(this.pointer, _sel_description);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  bool isEqualToTimeZone_(NSTimeZone aTimeZone) {
    return _objc_msgSend_117(
        this.pointer, _sel_isEqualToTimeZone_, aTimeZone.pointer);
  }

  objc.NSString? localizedName_locale_(int style, objc.NSLocale? locale) {
    final _ret = _objc_msgSend_118(this.pointer, _sel_localizedName_locale_,
        style, locale?.pointer ?? ffi.nullptr);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  static NSTimeZone? timeZoneWithName_(objc.NSString tzName) {
    final _ret = _objc_msgSend_2(
        _class_NSTimeZone, _sel_timeZoneWithName_, tzName.pointer);
    return _ret.address == 0
        ? null
        : NSTimeZone.castFromPointer(_ret, retain: true, release: true);
  }

  static NSTimeZone? timeZoneWithName_data_(
      objc.NSString tzName, objc.NSData? aData) {
    final _ret = _objc_msgSend_119(
        _class_NSTimeZone,
        _sel_timeZoneWithName_data_,
        tzName.pointer,
        aData?.pointer ?? ffi.nullptr);
    return _ret.address == 0
        ? null
        : NSTimeZone.castFromPointer(_ret, retain: true, release: true);
  }

  NSTimeZone? initWithName_(objc.NSString tzName) {
    final _ret =
        _objc_msgSend_2(this.pointer, _sel_initWithName_, tzName.pointer);
    return _ret.address == 0
        ? null
        : NSTimeZone.castFromPointer(_ret, retain: true, release: true);
  }

  NSTimeZone? initWithName_data_(objc.NSString tzName, objc.NSData? aData) {
    final _ret = _objc_msgSend_119(this.pointer, _sel_initWithName_data_,
        tzName.pointer, aData?.pointer ?? ffi.nullptr);
    return _ret.address == 0
        ? null
        : NSTimeZone.castFromPointer(_ret, retain: true, release: true);
  }

  static NSTimeZone timeZoneForSecondsFromGMT_(int seconds) {
    final _ret = _objc_msgSend_120(
        _class_NSTimeZone, _sel_timeZoneForSecondsFromGMT_, seconds);
    return NSTimeZone.castFromPointer(_ret, retain: true, release: true);
  }

  static NSTimeZone? timeZoneWithAbbreviation_(objc.NSString abbreviation) {
    final _ret = _objc_msgSend_2(_class_NSTimeZone,
        _sel_timeZoneWithAbbreviation_, abbreviation.pointer);
    return _ret.address == 0
        ? null
        : NSTimeZone.castFromPointer(_ret, retain: true, release: true);
  }

  @override
  NSTimeZone init() {
    final _ret = _objc_msgSend_40(this.pointer, _sel_init);
    return NSTimeZone.castFromPointer(_ret, retain: true, release: true);
  }

  static NSTimeZone new1() {
    final _ret = _objc_msgSend_40(_class_NSTimeZone, _sel_new);
    return NSTimeZone.castFromPointer(_ret, retain: false, release: true);
  }

  static NSTimeZone allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_47(_class_NSTimeZone, _sel_allocWithZone_, zone);
    return NSTimeZone.castFromPointer(_ret, retain: false, release: true);
  }

  static NSTimeZone alloc() {
    final _ret = _objc_msgSend_40(_class_NSTimeZone, _sel_alloc);
    return NSTimeZone.castFromPointer(_ret, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.NSObject aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.NSObject? anArgument) {
    _objc_msgSend_48(
        _class_NSTimeZone,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  static void cancelPreviousPerformRequestsWithTarget_(objc.NSObject aTarget) {
    _objc_msgSend_49(_class_NSTimeZone,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_7(
        _class_NSTimeZone, _sel_accessInstanceVariablesDirectly);
  }

  static bool useStoredAccessor() {
    return _objc_msgSend_7(_class_NSTimeZone, _sel_useStoredAccessor);
  }

  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_50(_class_NSTimeZone,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_51(_class_NSTimeZone,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_52(
        _class_NSTimeZone,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret =
        _objc_msgSend_6(_class_NSTimeZone, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSObject classForKeyedUnarchiver() {
    final _ret =
        _objc_msgSend_40(_class_NSTimeZone, _sel_classForKeyedUnarchiver);
    return objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }
}

late final _class_NSTimeZone = objc.getClass("NSTimeZone");
late final _sel_name = objc.registerName("name");
late final _sel_data = objc.registerName("data");
final _objc_msgSend_104 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_secondsFromGMTForDate_ =
    objc.registerName("secondsFromGMTForDate:");
final _objc_msgSend_105 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Long Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        int Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_abbreviationForDate_ =
    objc.registerName("abbreviationForDate:");
final _objc_msgSend_106 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_isDaylightSavingTimeForDate_ =
    objc.registerName("isDaylightSavingTimeForDate:");
final _objc_msgSend_107 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        bool Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_daylightSavingTimeOffsetForDate_ =
    objc.registerName("daylightSavingTimeOffsetForDate:");
final _objc_msgSend_108 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Double Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        double Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
final _objc_msgSend_108Fpret = objc.msgSendFpretPointer
    .cast<
        ffi.NativeFunction<
            ffi.Double Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        double Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_nextDaylightSavingTimeTransitionAfterDate_ =
    objc.registerName("nextDaylightSavingTimeTransitionAfterDate:");
final _objc_msgSend_109 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_systemTimeZone = objc.registerName("systemTimeZone");
final _objc_msgSend_110 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_resetSystemTimeZone = objc.registerName("resetSystemTimeZone");
late final _sel_defaultTimeZone = objc.registerName("defaultTimeZone");
late final _sel_setDefaultTimeZone_ = objc.registerName("setDefaultTimeZone:");
final _objc_msgSend_111 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_localTimeZone = objc.registerName("localTimeZone");
late final _sel_knownTimeZoneNames = objc.registerName("knownTimeZoneNames");
late final _sel_abbreviationDictionary =
    objc.registerName("abbreviationDictionary");
final _objc_msgSend_112 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setAbbreviationDictionary_ =
    objc.registerName("setAbbreviationDictionary:");
final _objc_msgSend_113 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_timeZoneDataVersion = objc.registerName("timeZoneDataVersion");
late final _sel_secondsFromGMT = objc.registerName("secondsFromGMT");
final _objc_msgSend_114 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Long Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_abbreviation = objc.registerName("abbreviation");
late final _sel_isDaylightSavingTime =
    objc.registerName("isDaylightSavingTime");
late final _sel_daylightSavingTimeOffset =
    objc.registerName("daylightSavingTimeOffset");
final _objc_msgSend_115 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Double Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        double Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
final _objc_msgSend_115Fpret = objc.msgSendFpretPointer
    .cast<
        ffi.NativeFunction<
            ffi.Double Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        double Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_nextDaylightSavingTimeTransition =
    objc.registerName("nextDaylightSavingTimeTransition");
final _objc_msgSend_116 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_description = objc.registerName("description");
late final _sel_isEqualToTimeZone_ = objc.registerName("isEqualToTimeZone:");
final _objc_msgSend_117 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        bool Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();

abstract class NSTimeZoneNameStyle {
  static const int NSTimeZoneNameStyleStandard = 0;
  static const int NSTimeZoneNameStyleShortStandard = 1;
  static const int NSTimeZoneNameStyleDaylightSaving = 2;
  static const int NSTimeZoneNameStyleShortDaylightSaving = 3;
  static const int NSTimeZoneNameStyleGeneric = 4;
  static const int NSTimeZoneNameStyleShortGeneric = 5;
}

late final _sel_localizedName_locale_ =
    objc.registerName("localizedName:locale:");
final _objc_msgSend_118 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Int32,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_timeZoneWithName_ = objc.registerName("timeZoneWithName:");
late final _sel_timeZoneWithName_data_ =
    objc.registerName("timeZoneWithName:data:");
final _objc_msgSend_119 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_initWithName_ = objc.registerName("initWithName:");
late final _sel_initWithName_data_ = objc.registerName("initWithName:data:");
late final _sel_timeZoneForSecondsFromGMT_ =
    objc.registerName("timeZoneForSecondsFromGMT:");
final _objc_msgSend_120 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Long)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_timeZoneWithAbbreviation_ =
    objc.registerName("timeZoneWithAbbreviation:");
late final _sel_timeZone = objc.registerName("timeZone");
late final _sel_setTimeZone_ = objc.registerName("setTimeZone:");

class NSCalendar extends objc.NSObject {
  NSCalendar._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSCalendar] that points to the same underlying object as [other].
  NSCalendar.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSCalendar] that wraps the given raw object pointer.
  NSCalendar.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSCalendar].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(obj.pointer, _sel_isKindOfClass_, _class_NSCalendar);
  }

  static NSCalendar getCurrentCalendar() {
    final _ret = _objc_msgSend_121(_class_NSCalendar, _sel_currentCalendar);
    return NSCalendar.castFromPointer(_ret, retain: true, release: true);
  }

  static NSCalendar getAutoupdatingCurrentCalendar() {
    final _ret =
        _objc_msgSend_121(_class_NSCalendar, _sel_autoupdatingCurrentCalendar);
    return NSCalendar.castFromPointer(_ret, retain: true, release: true);
  }

  static NSCalendar? calendarWithIdentifier_(
      objc.NSString calendarIdentifierConstant) {
    final _ret = _objc_msgSend_122(_class_NSCalendar,
        _sel_calendarWithIdentifier_, calendarIdentifierConstant.pointer);
    return _ret.address == 0
        ? null
        : NSCalendar.castFromPointer(_ret, retain: true, release: true);
  }

  @override
  NSCalendar init() {
    final _ret = _objc_msgSend_40(this.pointer, _sel_init);
    return NSCalendar.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSObject? initWithCalendarIdentifier_(objc.NSString ident) {
    final _ret = _objc_msgSend_2(
        this.pointer, _sel_initWithCalendarIdentifier_, ident.pointer);
    return _ret.address == 0
        ? null
        : objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSString get calendarIdentifier {
    final _ret = _objc_msgSend_12(this.pointer, _sel_calendarIdentifier);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSLocale? get locale {
    final _ret = _objc_msgSend_123(this.pointer, _sel_locale);
    return _ret.address == 0
        ? null
        : objc.NSLocale.castFromPointer(_ret, retain: true, release: true);
  }

  set locale(objc.NSLocale? value) {
    return _objc_msgSend_124(
        this.pointer, _sel_setLocale_, value?.pointer ?? ffi.nullptr);
  }

  NSTimeZone get timeZone {
    final _ret = _objc_msgSend_110(this.pointer, _sel_timeZone);
    return NSTimeZone.castFromPointer(_ret, retain: true, release: true);
  }

  set timeZone(NSTimeZone value) {
    return _objc_msgSend_111(this.pointer, _sel_setTimeZone_, value.pointer);
  }

  int get firstWeekday {
    return _objc_msgSend_29(this.pointer, _sel_firstWeekday);
  }

  set firstWeekday(int value) {
    return _objc_msgSend_125(this.pointer, _sel_setFirstWeekday_, value);
  }

  int get minimumDaysInFirstWeek {
    return _objc_msgSend_29(this.pointer, _sel_minimumDaysInFirstWeek);
  }

  set minimumDaysInFirstWeek(int value) {
    return _objc_msgSend_125(
        this.pointer, _sel_setMinimumDaysInFirstWeek_, value);
  }

  objc.NSArray get eraSymbols {
    final _ret = _objc_msgSend_6(this.pointer, _sel_eraSymbols);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSArray get longEraSymbols {
    final _ret = _objc_msgSend_6(this.pointer, _sel_longEraSymbols);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSArray get monthSymbols {
    final _ret = _objc_msgSend_6(this.pointer, _sel_monthSymbols);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSArray get shortMonthSymbols {
    final _ret = _objc_msgSend_6(this.pointer, _sel_shortMonthSymbols);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSArray get veryShortMonthSymbols {
    final _ret = _objc_msgSend_6(this.pointer, _sel_veryShortMonthSymbols);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSArray get standaloneMonthSymbols {
    final _ret = _objc_msgSend_6(this.pointer, _sel_standaloneMonthSymbols);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSArray get shortStandaloneMonthSymbols {
    final _ret =
        _objc_msgSend_6(this.pointer, _sel_shortStandaloneMonthSymbols);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSArray get veryShortStandaloneMonthSymbols {
    final _ret =
        _objc_msgSend_6(this.pointer, _sel_veryShortStandaloneMonthSymbols);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSArray get weekdaySymbols {
    final _ret = _objc_msgSend_6(this.pointer, _sel_weekdaySymbols);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSArray get shortWeekdaySymbols {
    final _ret = _objc_msgSend_6(this.pointer, _sel_shortWeekdaySymbols);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSArray get veryShortWeekdaySymbols {
    final _ret = _objc_msgSend_6(this.pointer, _sel_veryShortWeekdaySymbols);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSArray get standaloneWeekdaySymbols {
    final _ret = _objc_msgSend_6(this.pointer, _sel_standaloneWeekdaySymbols);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSArray get shortStandaloneWeekdaySymbols {
    final _ret =
        _objc_msgSend_6(this.pointer, _sel_shortStandaloneWeekdaySymbols);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSArray get veryShortStandaloneWeekdaySymbols {
    final _ret =
        _objc_msgSend_6(this.pointer, _sel_veryShortStandaloneWeekdaySymbols);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSArray get quarterSymbols {
    final _ret = _objc_msgSend_6(this.pointer, _sel_quarterSymbols);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSArray get shortQuarterSymbols {
    final _ret = _objc_msgSend_6(this.pointer, _sel_shortQuarterSymbols);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSArray get standaloneQuarterSymbols {
    final _ret = _objc_msgSend_6(this.pointer, _sel_standaloneQuarterSymbols);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSArray get shortStandaloneQuarterSymbols {
    final _ret =
        _objc_msgSend_6(this.pointer, _sel_shortStandaloneQuarterSymbols);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSString get AMSymbol {
    final _ret = _objc_msgSend_12(this.pointer, _sel_AMSymbol);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSString get PMSymbol {
    final _ret = _objc_msgSend_12(this.pointer, _sel_PMSymbol);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  void minimumRangeOfUnit_(ffi.Pointer<_NSRange> stret, int unit) {
    objc.useMsgSendVariants
        ? _objc_msgSend_126Stret(
            stret, this.pointer, _sel_minimumRangeOfUnit_, unit)
        : stret.ref =
            _objc_msgSend_126(this.pointer, _sel_minimumRangeOfUnit_, unit);
  }

  void maximumRangeOfUnit_(ffi.Pointer<_NSRange> stret, int unit) {
    objc.useMsgSendVariants
        ? _objc_msgSend_126Stret(
            stret, this.pointer, _sel_maximumRangeOfUnit_, unit)
        : stret.ref =
            _objc_msgSend_126(this.pointer, _sel_maximumRangeOfUnit_, unit);
  }

  void rangeOfUnit_inUnit_forDate_(
      ffi.Pointer<_NSRange> stret, int smaller, int larger, objc.NSDate date) {
    objc.useMsgSendVariants
        ? _objc_msgSend_127Stret(stret, this.pointer,
            _sel_rangeOfUnit_inUnit_forDate_, smaller, larger, date.pointer)
        : stret.ref = _objc_msgSend_127(this.pointer,
            _sel_rangeOfUnit_inUnit_forDate_, smaller, larger, date.pointer);
  }

  int ordinalityOfUnit_inUnit_forDate_(
      int smaller, int larger, objc.NSDate date) {
    return _objc_msgSend_128(this.pointer,
        _sel_ordinalityOfUnit_inUnit_forDate_, smaller, larger, date.pointer);
  }

  bool rangeOfUnit_startDate_interval_forDate_(
      int unit,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> datep,
      ffi.Pointer<ffi.Double> tip,
      objc.NSDate date) {
    return _objc_msgSend_129(
        this.pointer,
        _sel_rangeOfUnit_startDate_interval_forDate_,
        unit,
        datep,
        tip,
        date.pointer);
  }

  objc.NSDate? dateFromComponents_(NSDateComponents comps) {
    final _ret = _objc_msgSend_139(
        this.pointer, _sel_dateFromComponents_, comps.pointer);
    return _ret.address == 0
        ? null
        : objc.NSDate.castFromPointer(_ret, retain: true, release: true);
  }

  NSDateComponents components_fromDate_(int unitFlags, objc.NSDate date) {
    final _ret = _objc_msgSend_140(
        this.pointer, _sel_components_fromDate_, unitFlags, date.pointer);
    return NSDateComponents.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSDate? dateByAddingComponents_toDate_options_(
      NSDateComponents comps, objc.NSDate date, int opts) {
    final _ret = _objc_msgSend_141(
        this.pointer,
        _sel_dateByAddingComponents_toDate_options_,
        comps.pointer,
        date.pointer,
        opts);
    return _ret.address == 0
        ? null
        : objc.NSDate.castFromPointer(_ret, retain: true, release: true);
  }

  NSDateComponents components_fromDate_toDate_options_(int unitFlags,
      objc.NSDate startingDate, objc.NSDate resultDate, int opts) {
    final _ret = _objc_msgSend_142(
        this.pointer,
        _sel_components_fromDate_toDate_options_,
        unitFlags,
        startingDate.pointer,
        resultDate.pointer,
        opts);
    return NSDateComponents.castFromPointer(_ret, retain: true, release: true);
  }

  void getEra_year_month_day_fromDate_(
      ffi.Pointer<ffi.Long> eraValuePointer,
      ffi.Pointer<ffi.Long> yearValuePointer,
      ffi.Pointer<ffi.Long> monthValuePointer,
      ffi.Pointer<ffi.Long> dayValuePointer,
      objc.NSDate date) {
    _objc_msgSend_143(
        this.pointer,
        _sel_getEra_year_month_day_fromDate_,
        eraValuePointer,
        yearValuePointer,
        monthValuePointer,
        dayValuePointer,
        date.pointer);
  }

  void getEra_yearForWeekOfYear_weekOfYear_weekday_fromDate_(
      ffi.Pointer<ffi.Long> eraValuePointer,
      ffi.Pointer<ffi.Long> yearValuePointer,
      ffi.Pointer<ffi.Long> weekValuePointer,
      ffi.Pointer<ffi.Long> weekdayValuePointer,
      objc.NSDate date) {
    _objc_msgSend_143(
        this.pointer,
        _sel_getEra_yearForWeekOfYear_weekOfYear_weekday_fromDate_,
        eraValuePointer,
        yearValuePointer,
        weekValuePointer,
        weekdayValuePointer,
        date.pointer);
  }

  void getHour_minute_second_nanosecond_fromDate_(
      ffi.Pointer<ffi.Long> hourValuePointer,
      ffi.Pointer<ffi.Long> minuteValuePointer,
      ffi.Pointer<ffi.Long> secondValuePointer,
      ffi.Pointer<ffi.Long> nanosecondValuePointer,
      objc.NSDate date) {
    _objc_msgSend_143(
        this.pointer,
        _sel_getHour_minute_second_nanosecond_fromDate_,
        hourValuePointer,
        minuteValuePointer,
        secondValuePointer,
        nanosecondValuePointer,
        date.pointer);
  }

  int component_fromDate_(int unit, objc.NSDate date) {
    return _objc_msgSend_144(
        this.pointer, _sel_component_fromDate_, unit, date.pointer);
  }

  objc.NSDate? dateWithEra_year_month_day_hour_minute_second_nanosecond_(
      int eraValue,
      int yearValue,
      int monthValue,
      int dayValue,
      int hourValue,
      int minuteValue,
      int secondValue,
      int nanosecondValue) {
    final _ret = _objc_msgSend_145(
        this.pointer,
        _sel_dateWithEra_year_month_day_hour_minute_second_nanosecond_,
        eraValue,
        yearValue,
        monthValue,
        dayValue,
        hourValue,
        minuteValue,
        secondValue,
        nanosecondValue);
    return _ret.address == 0
        ? null
        : objc.NSDate.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSDate?
      dateWithEra_yearForWeekOfYear_weekOfYear_weekday_hour_minute_second_nanosecond_(
          int eraValue,
          int yearValue,
          int weekValue,
          int weekdayValue,
          int hourValue,
          int minuteValue,
          int secondValue,
          int nanosecondValue) {
    final _ret = _objc_msgSend_145(
        this.pointer,
        _sel_dateWithEra_yearForWeekOfYear_weekOfYear_weekday_hour_minute_second_nanosecond_,
        eraValue,
        yearValue,
        weekValue,
        weekdayValue,
        hourValue,
        minuteValue,
        secondValue,
        nanosecondValue);
    return _ret.address == 0
        ? null
        : objc.NSDate.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSDate startOfDayForDate_(objc.NSDate date) {
    final _ret =
        _objc_msgSend_146(this.pointer, _sel_startOfDayForDate_, date.pointer);
    return objc.NSDate.castFromPointer(_ret, retain: true, release: true);
  }

  NSDateComponents componentsInTimeZone_fromDate_(
      NSTimeZone timezone, objc.NSDate date) {
    final _ret = _objc_msgSend_147(this.pointer,
        _sel_componentsInTimeZone_fromDate_, timezone.pointer, date.pointer);
    return NSDateComponents.castFromPointer(_ret, retain: true, release: true);
  }

  int compareDate_toDate_toUnitGranularity_(
      objc.NSDate date1, objc.NSDate date2, int unit) {
    return _objc_msgSend_148(
        this.pointer,
        _sel_compareDate_toDate_toUnitGranularity_,
        date1.pointer,
        date2.pointer,
        unit);
  }

  bool isDate_equalToDate_toUnitGranularity_(
      objc.NSDate date1, objc.NSDate date2, int unit) {
    return _objc_msgSend_149(
        this.pointer,
        _sel_isDate_equalToDate_toUnitGranularity_,
        date1.pointer,
        date2.pointer,
        unit);
  }

  bool isDate_inSameDayAsDate_(objc.NSDate date1, objc.NSDate date2) {
    return _objc_msgSend_150(this.pointer, _sel_isDate_inSameDayAsDate_,
        date1.pointer, date2.pointer);
  }

  bool isDateInToday_(objc.NSDate date) {
    return _objc_msgSend_107(this.pointer, _sel_isDateInToday_, date.pointer);
  }

  bool isDateInYesterday_(objc.NSDate date) {
    return _objc_msgSend_107(
        this.pointer, _sel_isDateInYesterday_, date.pointer);
  }

  bool isDateInTomorrow_(objc.NSDate date) {
    return _objc_msgSend_107(
        this.pointer, _sel_isDateInTomorrow_, date.pointer);
  }

  bool isDateInWeekend_(objc.NSDate date) {
    return _objc_msgSend_107(this.pointer, _sel_isDateInWeekend_, date.pointer);
  }

  bool rangeOfWeekendStartDate_interval_containingDate_(
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> datep,
      ffi.Pointer<ffi.Double> tip,
      objc.NSDate date) {
    return _objc_msgSend_151(
        this.pointer,
        _sel_rangeOfWeekendStartDate_interval_containingDate_,
        datep,
        tip,
        date.pointer);
  }

  bool nextWeekendStartDate_interval_options_afterDate_(
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> datep,
      ffi.Pointer<ffi.Double> tip,
      int options,
      objc.NSDate date) {
    return _objc_msgSend_152(
        this.pointer,
        _sel_nextWeekendStartDate_interval_options_afterDate_,
        datep,
        tip,
        options,
        date.pointer);
  }

  NSDateComponents components_fromDateComponents_toDateComponents_options_(
      int unitFlags,
      NSDateComponents startingDateComp,
      NSDateComponents resultDateComp,
      int options) {
    final _ret = _objc_msgSend_153(
        this.pointer,
        _sel_components_fromDateComponents_toDateComponents_options_,
        unitFlags,
        startingDateComp.pointer,
        resultDateComp.pointer,
        options);
    return NSDateComponents.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSDate? dateByAddingUnit_value_toDate_options_(
      int unit, int value, objc.NSDate date, int options) {
    final _ret = _objc_msgSend_154(
        this.pointer,
        _sel_dateByAddingUnit_value_toDate_options_,
        unit,
        value,
        date.pointer,
        options);
    return _ret.address == 0
        ? null
        : objc.NSDate.castFromPointer(_ret, retain: true, release: true);
  }

  void enumerateDatesStartingAfterDate_matchingComponents_options_usingBlock_(
      objc.NSDate start,
      NSDateComponents comps,
      int opts,
      ObjCBlock_ffiVoid_NSDate_bool_bool block) {
    _objc_msgSend_155(
        this.pointer,
        _sel_enumerateDatesStartingAfterDate_matchingComponents_options_usingBlock_,
        start.pointer,
        comps.pointer,
        opts,
        block.pointer);
  }

  objc.NSDate? nextDateAfterDate_matchingComponents_options_(
      objc.NSDate date, NSDateComponents comps, int options) {
    final _ret = _objc_msgSend_156(
        this.pointer,
        _sel_nextDateAfterDate_matchingComponents_options_,
        date.pointer,
        comps.pointer,
        options);
    return _ret.address == 0
        ? null
        : objc.NSDate.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSDate? nextDateAfterDate_matchingUnit_value_options_(
      objc.NSDate date, int unit, int value, int options) {
    final _ret = _objc_msgSend_157(
        this.pointer,
        _sel_nextDateAfterDate_matchingUnit_value_options_,
        date.pointer,
        unit,
        value,
        options);
    return _ret.address == 0
        ? null
        : objc.NSDate.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSDate? nextDateAfterDate_matchingHour_minute_second_options_(
      objc.NSDate date,
      int hourValue,
      int minuteValue,
      int secondValue,
      int options) {
    final _ret = _objc_msgSend_158(
        this.pointer,
        _sel_nextDateAfterDate_matchingHour_minute_second_options_,
        date.pointer,
        hourValue,
        minuteValue,
        secondValue,
        options);
    return _ret.address == 0
        ? null
        : objc.NSDate.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSDate? dateBySettingUnit_value_ofDate_options_(
      int unit, int v, objc.NSDate date, int opts) {
    final _ret = _objc_msgSend_154(
        this.pointer,
        _sel_dateBySettingUnit_value_ofDate_options_,
        unit,
        v,
        date.pointer,
        opts);
    return _ret.address == 0
        ? null
        : objc.NSDate.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSDate? dateBySettingHour_minute_second_ofDate_options_(
      int h, int m, int s, objc.NSDate date, int opts) {
    final _ret = _objc_msgSend_159(
        this.pointer,
        _sel_dateBySettingHour_minute_second_ofDate_options_,
        h,
        m,
        s,
        date.pointer,
        opts);
    return _ret.address == 0
        ? null
        : objc.NSDate.castFromPointer(_ret, retain: true, release: true);
  }

  bool date_matchesComponents_(objc.NSDate date, NSDateComponents components) {
    return _objc_msgSend_160(this.pointer, _sel_date_matchesComponents_,
        date.pointer, components.pointer);
  }

  static NSCalendar new1() {
    final _ret = _objc_msgSend_40(_class_NSCalendar, _sel_new);
    return NSCalendar.castFromPointer(_ret, retain: false, release: true);
  }

  static NSCalendar allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_47(_class_NSCalendar, _sel_allocWithZone_, zone);
    return NSCalendar.castFromPointer(_ret, retain: false, release: true);
  }

  static NSCalendar alloc() {
    final _ret = _objc_msgSend_40(_class_NSCalendar, _sel_alloc);
    return NSCalendar.castFromPointer(_ret, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.NSObject aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.NSObject? anArgument) {
    _objc_msgSend_48(
        _class_NSCalendar,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  static void cancelPreviousPerformRequestsWithTarget_(objc.NSObject aTarget) {
    _objc_msgSend_49(_class_NSCalendar,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_7(
        _class_NSCalendar, _sel_accessInstanceVariablesDirectly);
  }

  static bool useStoredAccessor() {
    return _objc_msgSend_7(_class_NSCalendar, _sel_useStoredAccessor);
  }

  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_50(_class_NSCalendar,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_51(_class_NSCalendar,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_52(
        _class_NSCalendar,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret =
        _objc_msgSend_6(_class_NSCalendar, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSObject classForKeyedUnarchiver() {
    final _ret =
        _objc_msgSend_40(_class_NSCalendar, _sel_classForKeyedUnarchiver);
    return objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }
}

late final _class_NSCalendar = objc.getClass("NSCalendar");
late final _sel_currentCalendar = objc.registerName("currentCalendar");
final _objc_msgSend_121 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_autoupdatingCurrentCalendar =
    objc.registerName("autoupdatingCurrentCalendar");
late final _sel_calendarWithIdentifier_ =
    objc.registerName("calendarWithIdentifier:");
final _objc_msgSend_122 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_initWithCalendarIdentifier_ =
    objc.registerName("initWithCalendarIdentifier:");
late final _sel_calendarIdentifier = objc.registerName("calendarIdentifier");
final _objc_msgSend_123 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
final _objc_msgSend_124 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_firstWeekday = objc.registerName("firstWeekday");
late final _sel_setFirstWeekday_ = objc.registerName("setFirstWeekday:");
final _objc_msgSend_125 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedLong)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_minimumDaysInFirstWeek =
    objc.registerName("minimumDaysInFirstWeek");
late final _sel_setMinimumDaysInFirstWeek_ =
    objc.registerName("setMinimumDaysInFirstWeek:");
late final _sel_eraSymbols = objc.registerName("eraSymbols");
late final _sel_longEraSymbols = objc.registerName("longEraSymbols");
late final _sel_monthSymbols = objc.registerName("monthSymbols");
late final _sel_shortMonthSymbols = objc.registerName("shortMonthSymbols");
late final _sel_veryShortMonthSymbols =
    objc.registerName("veryShortMonthSymbols");
late final _sel_standaloneMonthSymbols =
    objc.registerName("standaloneMonthSymbols");
late final _sel_shortStandaloneMonthSymbols =
    objc.registerName("shortStandaloneMonthSymbols");
late final _sel_veryShortStandaloneMonthSymbols =
    objc.registerName("veryShortStandaloneMonthSymbols");
late final _sel_weekdaySymbols = objc.registerName("weekdaySymbols");
late final _sel_shortWeekdaySymbols = objc.registerName("shortWeekdaySymbols");
late final _sel_veryShortWeekdaySymbols =
    objc.registerName("veryShortWeekdaySymbols");
late final _sel_standaloneWeekdaySymbols =
    objc.registerName("standaloneWeekdaySymbols");
late final _sel_shortStandaloneWeekdaySymbols =
    objc.registerName("shortStandaloneWeekdaySymbols");
late final _sel_veryShortStandaloneWeekdaySymbols =
    objc.registerName("veryShortStandaloneWeekdaySymbols");
late final _sel_quarterSymbols = objc.registerName("quarterSymbols");
late final _sel_shortQuarterSymbols = objc.registerName("shortQuarterSymbols");
late final _sel_standaloneQuarterSymbols =
    objc.registerName("standaloneQuarterSymbols");
late final _sel_shortStandaloneQuarterSymbols =
    objc.registerName("shortStandaloneQuarterSymbols");
late final _sel_AMSymbol = objc.registerName("AMSymbol");
late final _sel_PMSymbol = objc.registerName("PMSymbol");

abstract class NSCalendarUnit {
  static const int NSCalendarUnitEra = 2;
  static const int NSCalendarUnitYear = 4;
  static const int NSCalendarUnitMonth = 8;
  static const int NSCalendarUnitDay = 16;
  static const int NSCalendarUnitHour = 32;
  static const int NSCalendarUnitMinute = 64;
  static const int NSCalendarUnitSecond = 128;
  static const int NSCalendarUnitWeekday = 512;
  static const int NSCalendarUnitWeekdayOrdinal = 1024;
  static const int NSCalendarUnitQuarter = 2048;
  static const int NSCalendarUnitWeekOfMonth = 4096;
  static const int NSCalendarUnitWeekOfYear = 8192;
  static const int NSCalendarUnitYearForWeekOfYear = 16384;
  static const int NSCalendarUnitNanosecond = 32768;
  static const int NSCalendarUnitCalendar = 1048576;
  static const int NSCalendarUnitTimeZone = 2097152;
  static const int NSEraCalendarUnit = 2;
  static const int NSYearCalendarUnit = 4;
  static const int NSMonthCalendarUnit = 8;
  static const int NSDayCalendarUnit = 16;
  static const int NSHourCalendarUnit = 32;
  static const int NSMinuteCalendarUnit = 64;
  static const int NSSecondCalendarUnit = 128;
  static const int NSWeekCalendarUnit = 256;
  static const int NSWeekdayCalendarUnit = 512;
  static const int NSWeekdayOrdinalCalendarUnit = 1024;
  static const int NSQuarterCalendarUnit = 2048;
  static const int NSWeekOfMonthCalendarUnit = 4096;
  static const int NSWeekOfYearCalendarUnit = 8192;
  static const int NSYearForWeekOfYearCalendarUnit = 16384;
  static const int NSCalendarCalendarUnit = 1048576;
  static const int NSTimeZoneCalendarUnit = 2097152;
}

late final _sel_minimumRangeOfUnit_ = objc.registerName("minimumRangeOfUnit:");
final _objc_msgSend_126 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            _NSRange Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Int32)>>()
    .asFunction<
        _NSRange Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
final _objc_msgSend_126Stret = objc.msgSendStretPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<_NSRange>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Int32)>>()
    .asFunction<
        void Function(ffi.Pointer<_NSRange>, ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_maximumRangeOfUnit_ = objc.registerName("maximumRangeOfUnit:");
late final _sel_rangeOfUnit_inUnit_forDate_ =
    objc.registerName("rangeOfUnit:inUnit:forDate:");
final _objc_msgSend_127 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            _NSRange Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Int32,
                ffi.Int32,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        _NSRange Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int,
            int,
            ffi.Pointer<objc.ObjCObject>)>();
final _objc_msgSend_127Stret = objc.msgSendStretPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<_NSRange>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Int32,
                ffi.Int32,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<_NSRange>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int,
            int,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_ordinalityOfUnit_inUnit_forDate_ =
    objc.registerName("ordinalityOfUnit:inUnit:forDate:");
final _objc_msgSend_128 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Int32,
                ffi.Int32,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int,
            int,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_rangeOfUnit_startDate_interval_forDate_ =
    objc.registerName("rangeOfUnit:startDate:interval:forDate:");
final _objc_msgSend_129 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Int32,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
                ffi.Pointer<ffi.Double>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
            ffi.Pointer<ffi.Double>,
            ffi.Pointer<objc.ObjCObject>)>();

class NSDateComponents extends objc.NSObject {
  NSDateComponents._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSDateComponents] that points to the same underlying object as [other].
  NSDateComponents.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSDateComponents] that wraps the given raw object pointer.
  NSDateComponents.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSDateComponents].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSDateComponents);
  }

  NSCalendar? get calendar {
    final _ret = _objc_msgSend_130(this.pointer, _sel_calendar);
    return _ret.address == 0
        ? null
        : NSCalendar.castFromPointer(_ret, retain: true, release: true);
  }

  set calendar(NSCalendar? value) {
    return _objc_msgSend_131(
        this.pointer, _sel_setCalendar_, value?.pointer ?? ffi.nullptr);
  }

  NSTimeZone? get timeZone {
    final _ret = _objc_msgSend_132(this.pointer, _sel_timeZone);
    return _ret.address == 0
        ? null
        : NSTimeZone.castFromPointer(_ret, retain: true, release: true);
  }

  set timeZone(NSTimeZone? value) {
    return _objc_msgSend_133(
        this.pointer, _sel_setTimeZone_, value?.pointer ?? ffi.nullptr);
  }

  int get era {
    return _objc_msgSend_114(this.pointer, _sel_era);
  }

  set era(int value) {
    return _objc_msgSend_134(this.pointer, _sel_setEra_, value);
  }

  int get year {
    return _objc_msgSend_114(this.pointer, _sel_year);
  }

  set year(int value) {
    return _objc_msgSend_134(this.pointer, _sel_setYear_, value);
  }

  int get month {
    return _objc_msgSend_114(this.pointer, _sel_month);
  }

  set month(int value) {
    return _objc_msgSend_134(this.pointer, _sel_setMonth_, value);
  }

  int get day {
    return _objc_msgSend_114(this.pointer, _sel_day);
  }

  set day(int value) {
    return _objc_msgSend_134(this.pointer, _sel_setDay_, value);
  }

  int get hour {
    return _objc_msgSend_114(this.pointer, _sel_hour);
  }

  set hour(int value) {
    return _objc_msgSend_134(this.pointer, _sel_setHour_, value);
  }

  int get minute {
    return _objc_msgSend_114(this.pointer, _sel_minute);
  }

  set minute(int value) {
    return _objc_msgSend_134(this.pointer, _sel_setMinute_, value);
  }

  int get second {
    return _objc_msgSend_114(this.pointer, _sel_second);
  }

  set second(int value) {
    return _objc_msgSend_134(this.pointer, _sel_setSecond_, value);
  }

  int get nanosecond {
    return _objc_msgSend_114(this.pointer, _sel_nanosecond);
  }

  set nanosecond(int value) {
    return _objc_msgSend_134(this.pointer, _sel_setNanosecond_, value);
  }

  int get weekday {
    return _objc_msgSend_114(this.pointer, _sel_weekday);
  }

  set weekday(int value) {
    return _objc_msgSend_134(this.pointer, _sel_setWeekday_, value);
  }

  int get weekdayOrdinal {
    return _objc_msgSend_114(this.pointer, _sel_weekdayOrdinal);
  }

  set weekdayOrdinal(int value) {
    return _objc_msgSend_134(this.pointer, _sel_setWeekdayOrdinal_, value);
  }

  int get quarter {
    return _objc_msgSend_114(this.pointer, _sel_quarter);
  }

  set quarter(int value) {
    return _objc_msgSend_134(this.pointer, _sel_setQuarter_, value);
  }

  int get weekOfMonth {
    return _objc_msgSend_114(this.pointer, _sel_weekOfMonth);
  }

  set weekOfMonth(int value) {
    return _objc_msgSend_134(this.pointer, _sel_setWeekOfMonth_, value);
  }

  int get weekOfYear {
    return _objc_msgSend_114(this.pointer, _sel_weekOfYear);
  }

  set weekOfYear(int value) {
    return _objc_msgSend_134(this.pointer, _sel_setWeekOfYear_, value);
  }

  int get yearForWeekOfYear {
    return _objc_msgSend_114(this.pointer, _sel_yearForWeekOfYear);
  }

  set yearForWeekOfYear(int value) {
    return _objc_msgSend_134(this.pointer, _sel_setYearForWeekOfYear_, value);
  }

  bool get leapMonth {
    return _objc_msgSend_7(this.pointer, _sel_isLeapMonth);
  }

  set leapMonth(bool value) {
    return _objc_msgSend_41(this.pointer, _sel_setLeapMonth_, value);
  }

  objc.NSDate? get date {
    final _ret = _objc_msgSend_116(this.pointer, _sel_date);
    return _ret.address == 0
        ? null
        : objc.NSDate.castFromPointer(_ret, retain: true, release: true);
  }

  int week() {
    return _objc_msgSend_114(this.pointer, _sel_week);
  }

  void setWeek_(int v) {
    _objc_msgSend_135(this.pointer, _sel_setWeek_, v);
  }

  void setValue_forComponent_(int value, int unit) {
    _objc_msgSend_136(this.pointer, _sel_setValue_forComponent_, value, unit);
  }

  int valueForComponent_(int unit) {
    return _objc_msgSend_137(this.pointer, _sel_valueForComponent_, unit);
  }

  bool get validDate {
    return _objc_msgSend_7(this.pointer, _sel_isValidDate);
  }

  bool isValidDateInCalendar_(NSCalendar calendar) {
    return _objc_msgSend_138(
        this.pointer, _sel_isValidDateInCalendar_, calendar.pointer);
  }

  @override
  NSDateComponents init() {
    final _ret = _objc_msgSend_40(this.pointer, _sel_init);
    return NSDateComponents.castFromPointer(_ret, retain: true, release: true);
  }

  static NSDateComponents new1() {
    final _ret = _objc_msgSend_40(_class_NSDateComponents, _sel_new);
    return NSDateComponents.castFromPointer(_ret, retain: false, release: true);
  }

  static NSDateComponents allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_47(_class_NSDateComponents, _sel_allocWithZone_, zone);
    return NSDateComponents.castFromPointer(_ret, retain: false, release: true);
  }

  static NSDateComponents alloc() {
    final _ret = _objc_msgSend_40(_class_NSDateComponents, _sel_alloc);
    return NSDateComponents.castFromPointer(_ret, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.NSObject aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.NSObject? anArgument) {
    _objc_msgSend_48(
        _class_NSDateComponents,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  static void cancelPreviousPerformRequestsWithTarget_(objc.NSObject aTarget) {
    _objc_msgSend_49(_class_NSDateComponents,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_7(
        _class_NSDateComponents, _sel_accessInstanceVariablesDirectly);
  }

  static bool useStoredAccessor() {
    return _objc_msgSend_7(_class_NSDateComponents, _sel_useStoredAccessor);
  }

  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_50(_class_NSDateComponents,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_51(_class_NSDateComponents,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_52(
        _class_NSDateComponents,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_6(
        _class_NSDateComponents, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSObject classForKeyedUnarchiver() {
    final _ret =
        _objc_msgSend_40(_class_NSDateComponents, _sel_classForKeyedUnarchiver);
    return objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }
}

late final _class_NSDateComponents = objc.getClass("NSDateComponents");
late final _sel_calendar = objc.registerName("calendar");
final _objc_msgSend_130 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setCalendar_ = objc.registerName("setCalendar:");
final _objc_msgSend_131 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
final _objc_msgSend_132 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
final _objc_msgSend_133 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_era = objc.registerName("era");
late final _sel_setEra_ = objc.registerName("setEra:");
final _objc_msgSend_134 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Long)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_year = objc.registerName("year");
late final _sel_setYear_ = objc.registerName("setYear:");
late final _sel_month = objc.registerName("month");
late final _sel_setMonth_ = objc.registerName("setMonth:");
late final _sel_day = objc.registerName("day");
late final _sel_setDay_ = objc.registerName("setDay:");
late final _sel_hour = objc.registerName("hour");
late final _sel_setHour_ = objc.registerName("setHour:");
late final _sel_minute = objc.registerName("minute");
late final _sel_setMinute_ = objc.registerName("setMinute:");
late final _sel_second = objc.registerName("second");
late final _sel_setSecond_ = objc.registerName("setSecond:");
late final _sel_nanosecond = objc.registerName("nanosecond");
late final _sel_setNanosecond_ = objc.registerName("setNanosecond:");
late final _sel_weekday = objc.registerName("weekday");
late final _sel_setWeekday_ = objc.registerName("setWeekday:");
late final _sel_weekdayOrdinal = objc.registerName("weekdayOrdinal");
late final _sel_setWeekdayOrdinal_ = objc.registerName("setWeekdayOrdinal:");
late final _sel_quarter = objc.registerName("quarter");
late final _sel_setQuarter_ = objc.registerName("setQuarter:");
late final _sel_weekOfMonth = objc.registerName("weekOfMonth");
late final _sel_setWeekOfMonth_ = objc.registerName("setWeekOfMonth:");
late final _sel_weekOfYear = objc.registerName("weekOfYear");
late final _sel_setWeekOfYear_ = objc.registerName("setWeekOfYear:");
late final _sel_yearForWeekOfYear = objc.registerName("yearForWeekOfYear");
late final _sel_setYearForWeekOfYear_ =
    objc.registerName("setYearForWeekOfYear:");
late final _sel_isLeapMonth = objc.registerName("isLeapMonth");
late final _sel_setLeapMonth_ = objc.registerName("setLeapMonth:");
late final _sel_date = objc.registerName("date");
late final _sel_week = objc.registerName("week");
late final _sel_setWeek_ = objc.registerName("setWeek:");
final _objc_msgSend_135 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Long)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_setValue_forComponent_ =
    objc.registerName("setValue:forComponent:");
final _objc_msgSend_136 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Long, ffi.Int32)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int, int)>();
late final _sel_valueForComponent_ = objc.registerName("valueForComponent:");
final _objc_msgSend_137 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Long Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Int32)>>()
    .asFunction<
        int Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_isValidDate = objc.registerName("isValidDate");
late final _sel_isValidDateInCalendar_ =
    objc.registerName("isValidDateInCalendar:");
final _objc_msgSend_138 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        bool Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_dateFromComponents_ = objc.registerName("dateFromComponents:");
final _objc_msgSend_139 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_components_fromDate_ =
    objc.registerName("components:fromDate:");
final _objc_msgSend_140 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Int32,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int,
            ffi.Pointer<objc.ObjCObject>)>();

abstract class NSCalendarOptions {
  static const int NSCalendarWrapComponents = 1;
  static const int NSCalendarMatchStrictly = 2;
  static const int NSCalendarSearchBackwards = 4;
  static const int NSCalendarMatchPreviousTimePreservingSmallerUnits = 256;
  static const int NSCalendarMatchNextTimePreservingSmallerUnits = 512;
  static const int NSCalendarMatchNextTime = 1024;
  static const int NSCalendarMatchFirst = 4096;
  static const int NSCalendarMatchLast = 8192;
}

late final _sel_dateByAddingComponents_toDate_options_ =
    objc.registerName("dateByAddingComponents:toDate:options:");
final _objc_msgSend_141 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Int32)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            int)>();
late final _sel_components_fromDate_toDate_options_ =
    objc.registerName("components:fromDate:toDate:options:");
final _objc_msgSend_142 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Int32,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Int32)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            int)>();
late final _sel_getEra_year_month_day_fromDate_ =
    objc.registerName("getEra:year:month:day:fromDate:");
final _objc_msgSend_143 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<ffi.Long>,
                ffi.Pointer<ffi.Long>,
                ffi.Pointer<ffi.Long>,
                ffi.Pointer<ffi.Long>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<ffi.Long>,
            ffi.Pointer<ffi.Long>,
            ffi.Pointer<ffi.Long>,
            ffi.Pointer<ffi.Long>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_getEra_yearForWeekOfYear_weekOfYear_weekday_fromDate_ =
    objc.registerName("getEra:yearForWeekOfYear:weekOfYear:weekday:fromDate:");
late final _sel_getHour_minute_second_nanosecond_fromDate_ =
    objc.registerName("getHour:minute:second:nanosecond:fromDate:");
late final _sel_component_fromDate_ = objc.registerName("component:fromDate:");
final _objc_msgSend_144 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Long Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Int32,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_dateWithEra_year_month_day_hour_minute_second_nanosecond_ = objc
    .registerName("dateWithEra:year:month:day:hour:minute:second:nanosecond:");
final _objc_msgSend_145 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Long,
                ffi.Long,
                ffi.Long,
                ffi.Long,
                ffi.Long,
                ffi.Long,
                ffi.Long,
                ffi.Long)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int,
            int,
            int,
            int,
            int,
            int,
            int,
            int)>();
late final _sel_dateWithEra_yearForWeekOfYear_weekOfYear_weekday_hour_minute_second_nanosecond_ =
    objc.registerName(
        "dateWithEra:yearForWeekOfYear:weekOfYear:weekday:hour:minute:second:nanosecond:");
late final _sel_startOfDayForDate_ = objc.registerName("startOfDayForDate:");
final _objc_msgSend_146 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_componentsInTimeZone_fromDate_ =
    objc.registerName("componentsInTimeZone:fromDate:");
final _objc_msgSend_147 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();

abstract class NSComparisonResult {
  static const int NSOrderedAscending = -1;
  static const int NSOrderedSame = 0;
  static const int NSOrderedDescending = 1;
}

late final _sel_compareDate_toDate_toUnitGranularity_ =
    objc.registerName("compareDate:toDate:toUnitGranularity:");
final _objc_msgSend_148 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Int32 Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Int32)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            int)>();
late final _sel_isDate_equalToDate_toUnitGranularity_ =
    objc.registerName("isDate:equalToDate:toUnitGranularity:");
final _objc_msgSend_149 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Int32)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            int)>();
late final _sel_isDate_inSameDayAsDate_ =
    objc.registerName("isDate:inSameDayAsDate:");
final _objc_msgSend_150 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_isDateInToday_ = objc.registerName("isDateInToday:");
late final _sel_isDateInYesterday_ = objc.registerName("isDateInYesterday:");
late final _sel_isDateInTomorrow_ = objc.registerName("isDateInTomorrow:");
late final _sel_isDateInWeekend_ = objc.registerName("isDateInWeekend:");
late final _sel_rangeOfWeekendStartDate_interval_containingDate_ =
    objc.registerName("rangeOfWeekendStartDate:interval:containingDate:");
final _objc_msgSend_151 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
                ffi.Pointer<ffi.Double>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
            ffi.Pointer<ffi.Double>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_nextWeekendStartDate_interval_options_afterDate_ =
    objc.registerName("nextWeekendStartDate:interval:options:afterDate:");
final _objc_msgSend_152 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
                ffi.Pointer<ffi.Double>,
                ffi.Int32,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
            ffi.Pointer<ffi.Double>,
            int,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_components_fromDateComponents_toDateComponents_options_ = objc
    .registerName("components:fromDateComponents:toDateComponents:options:");
final _objc_msgSend_153 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Int32,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Int32)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            int)>();
late final _sel_dateByAddingUnit_value_toDate_options_ =
    objc.registerName("dateByAddingUnit:value:toDate:options:");
final _objc_msgSend_154 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Int32,
                ffi.Long,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Int32)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int,
            int,
            ffi.Pointer<objc.ObjCObject>,
            int)>();
void _ObjCBlock_ffiVoid_NSDate_bool_bool_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlock> block,
        ffi.Pointer<objc.ObjCObject> arg0,
        bool arg1,
        ffi.Pointer<ffi.Bool> arg2) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0,
                    ffi.Bool arg1, ffi.Pointer<ffi.Bool> arg2)>>()
        .asFunction<
            void Function(ffi.Pointer<objc.ObjCObject>, bool,
                ffi.Pointer<ffi.Bool>)>()(arg0, arg1, arg2);
final _ObjCBlock_ffiVoid_NSDate_bool_bool_closureRegistry = <int,
    void Function(ffi.Pointer<objc.ObjCObject>, bool, ffi.Pointer<ffi.Bool>)>{};
int _ObjCBlock_ffiVoid_NSDate_bool_bool_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void> _ObjCBlock_ffiVoid_NSDate_bool_bool_registerClosure(
    void Function(ffi.Pointer<objc.ObjCObject>, bool, ffi.Pointer<ffi.Bool>)
        fn) {
  final id = ++_ObjCBlock_ffiVoid_NSDate_bool_bool_closureRegistryIndex;
  _ObjCBlock_ffiVoid_NSDate_bool_bool_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

void _ObjCBlock_ffiVoid_NSDate_bool_bool_closureTrampoline(
        ffi.Pointer<objc.ObjCBlock> block,
        ffi.Pointer<objc.ObjCObject> arg0,
        bool arg1,
        ffi.Pointer<ffi.Bool> arg2) =>
    _ObjCBlock_ffiVoid_NSDate_bool_bool_closureRegistry[
        block.ref.target.address]!(arg0, arg1, arg2);

class ObjCBlock_ffiVoid_NSDate_bool_bool extends objc.ObjCBlockBase {
  ObjCBlock_ffiVoid_NSDate_bool_bool._(ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false, bool release = true})
      : super(pointer, retain: retain, release: release);

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_ffiVoid_NSDate_bool_bool castFromPointer(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = false}) {
    return ObjCBlock_ffiVoid_NSDate_bool_bool._(pointer,
        retain: retain, release: release);
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSDate_bool_bool.fromFunctionPointer(
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0,
                      ffi.Bool arg1, ffi.Pointer<ffi.Bool> arg2)>>
          ptr)
      : this._(objc.newBlock(
            _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Bool,
                            ffi.Pointer<ffi.Bool>)>(
                    _ObjCBlock_ffiVoid_NSDate_bool_bool_fnPtrTrampoline)
                .cast(),
            ptr.cast()));
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSDate_bool_bool.fromFunction(
      void Function(objc.NSDate?, bool, ffi.Pointer<ffi.Bool>) fn)
      : this._(objc.newBlock(
            _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Bool,
                            ffi.Pointer<ffi.Bool>)>(
                    _ObjCBlock_ffiVoid_NSDate_bool_bool_closureTrampoline)
                .cast(),
            _ObjCBlock_ffiVoid_NSDate_bool_bool_registerClosure(
                (ffi.Pointer<objc.ObjCObject> arg0, bool arg1,
                        ffi.Pointer<ffi.Bool> arg2) =>
                    fn(arg0.address == 0 ? null : objc.NSDate.castFromPointer(arg0, retain: true, release: true), arg1, arg2))));
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_NSDate_bool_bool.listener(
      void Function(objc.NSDate?, bool, ffi.Pointer<ffi.Bool>) fn)
      : this._(objc.newBlock(
            (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                        ffi.Void Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Bool,
                            ffi.Pointer<ffi.Bool>)>.listener(
                    _ObjCBlock_ffiVoid_NSDate_bool_bool_closureTrampoline)
                  ..keepIsolateAlive = false)
                .nativeFunction
                .cast(),
            _ObjCBlock_ffiVoid_NSDate_bool_bool_registerClosure(
                (ffi.Pointer<objc.ObjCObject> arg0, bool arg1, ffi.Pointer<ffi.Bool> arg2) =>
                    fn(arg0.address == 0 ? null : objc.NSDate.castFromPointer(arg0, retain: true, release: true), arg1, arg2))));
  static ffi.NativeCallable<
      ffi.Void Function(
          ffi.Pointer<objc.ObjCBlock>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Bool,
          ffi.Pointer<ffi.Bool>)>? _dartFuncListenerTrampoline;

  void call(objc.NSDate? arg0, bool arg1, ffi.Pointer<ffi.Bool> arg2) =>
      pointer.ref.invoke
              .cast<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<objc.ObjCBlock> block,
                          ffi.Pointer<objc.ObjCObject> arg0,
                          ffi.Bool arg1,
                          ffi.Pointer<ffi.Bool> arg2)>>()
              .asFunction<
                  void Function(
                      ffi.Pointer<objc.ObjCBlock>,
                      ffi.Pointer<objc.ObjCObject>,
                      bool,
                      ffi.Pointer<ffi.Bool>)>()(
          pointer, arg0?.pointer ?? ffi.nullptr, arg1, arg2);
}

late final _sel_enumerateDatesStartingAfterDate_matchingComponents_options_usingBlock_ =
    objc.registerName(
        "enumerateDatesStartingAfterDate:matchingComponents:options:usingBlock:");
final _objc_msgSend_155 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Int32,
                ffi.Pointer<objc.ObjCBlock>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            ffi.Pointer<objc.ObjCBlock>)>();
late final _sel_nextDateAfterDate_matchingComponents_options_ =
    objc.registerName("nextDateAfterDate:matchingComponents:options:");
final _objc_msgSend_156 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Int32)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            int)>();
late final _sel_nextDateAfterDate_matchingUnit_value_options_ =
    objc.registerName("nextDateAfterDate:matchingUnit:value:options:");
final _objc_msgSend_157 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Int32,
                ffi.Long,
                ffi.Int32)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            int,
            int)>();
late final _sel_nextDateAfterDate_matchingHour_minute_second_options_ =
    objc.registerName("nextDateAfterDate:matchingHour:minute:second:options:");
final _objc_msgSend_158 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Long,
                ffi.Long,
                ffi.Long,
                ffi.Int32)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            int,
            int,
            int)>();
late final _sel_dateBySettingUnit_value_ofDate_options_ =
    objc.registerName("dateBySettingUnit:value:ofDate:options:");
late final _sel_dateBySettingHour_minute_second_ofDate_options_ =
    objc.registerName("dateBySettingHour:minute:second:ofDate:options:");
final _objc_msgSend_159 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Long,
                ffi.Long,
                ffi.Long,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Int32)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int,
            int,
            int,
            ffi.Pointer<objc.ObjCObject>,
            int)>();
late final _sel_date_matchesComponents_ =
    objc.registerName("date:matchesComponents:");
final _objc_msgSend_160 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
final _objc_msgSend_161 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_isLenient = objc.registerName("isLenient");
late final _sel_setLenient_ = objc.registerName("setLenient:");
late final _sel_twoDigitStartDate = objc.registerName("twoDigitStartDate");
late final _sel_setTwoDigitStartDate_ =
    objc.registerName("setTwoDigitStartDate:");
final _objc_msgSend_162 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_defaultDate = objc.registerName("defaultDate");
late final _sel_setDefaultDate_ = objc.registerName("setDefaultDate:");
late final _sel_setEraSymbols_ = objc.registerName("setEraSymbols:");
final _objc_msgSend_163 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_setMonthSymbols_ = objc.registerName("setMonthSymbols:");
late final _sel_setShortMonthSymbols_ =
    objc.registerName("setShortMonthSymbols:");
late final _sel_setWeekdaySymbols_ = objc.registerName("setWeekdaySymbols:");
late final _sel_setShortWeekdaySymbols_ =
    objc.registerName("setShortWeekdaySymbols:");
late final _sel_setAMSymbol_ = objc.registerName("setAMSymbol:");
late final _sel_setPMSymbol_ = objc.registerName("setPMSymbol:");
late final _sel_setLongEraSymbols_ = objc.registerName("setLongEraSymbols:");
late final _sel_setVeryShortMonthSymbols_ =
    objc.registerName("setVeryShortMonthSymbols:");
late final _sel_setStandaloneMonthSymbols_ =
    objc.registerName("setStandaloneMonthSymbols:");
late final _sel_setShortStandaloneMonthSymbols_ =
    objc.registerName("setShortStandaloneMonthSymbols:");
late final _sel_setVeryShortStandaloneMonthSymbols_ =
    objc.registerName("setVeryShortStandaloneMonthSymbols:");
late final _sel_setVeryShortWeekdaySymbols_ =
    objc.registerName("setVeryShortWeekdaySymbols:");
late final _sel_setStandaloneWeekdaySymbols_ =
    objc.registerName("setStandaloneWeekdaySymbols:");
late final _sel_setShortStandaloneWeekdaySymbols_ =
    objc.registerName("setShortStandaloneWeekdaySymbols:");
late final _sel_setVeryShortStandaloneWeekdaySymbols_ =
    objc.registerName("setVeryShortStandaloneWeekdaySymbols:");
late final _sel_setQuarterSymbols_ = objc.registerName("setQuarterSymbols:");
late final _sel_setShortQuarterSymbols_ =
    objc.registerName("setShortQuarterSymbols:");
late final _sel_setStandaloneQuarterSymbols_ =
    objc.registerName("setStandaloneQuarterSymbols:");
late final _sel_setShortStandaloneQuarterSymbols_ =
    objc.registerName("setShortStandaloneQuarterSymbols:");
late final _sel_gregorianStartDate = objc.registerName("gregorianStartDate");
late final _sel_setGregorianStartDate_ =
    objc.registerName("setGregorianStartDate:");
late final _sel_doesRelativeDateFormatting =
    objc.registerName("doesRelativeDateFormatting");
late final _sel_setDoesRelativeDateFormatting_ =
    objc.registerName("setDoesRelativeDateFormatting:");
late final _sel_initWithDateFormat_allowNaturalLanguage_ =
    objc.registerName("initWithDateFormat:allowNaturalLanguage:");
final _objc_msgSend_164 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Bool)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            bool)>();
late final _sel_allowsNaturalLanguage =
    objc.registerName("allowsNaturalLanguage");

class NSNumberFormatter extends NSFormatter {
  NSNumberFormatter._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSNumberFormatter] that points to the same underlying object as [other].
  NSNumberFormatter.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSNumberFormatter] that wraps the given raw object pointer.
  NSNumberFormatter.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSNumberFormatter].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSNumberFormatter);
  }

  int get formattingContext {
    return _objc_msgSend_89(this.pointer, _sel_formattingContext);
  }

  set formattingContext(int value) {
    return _objc_msgSend_90(this.pointer, _sel_setFormattingContext_, value);
  }

  bool getObjectValue_forString_range_error_(
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> obj,
      objc.NSString string,
      ffi.Pointer<_NSRange> rangep,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    return _objc_msgSend_91(
        this.pointer,
        _sel_getObjectValue_forString_range_error_,
        obj,
        string.pointer,
        rangep,
        error);
  }

  objc.NSString? stringFromNumber_(objc.NSNumber number) {
    final _ret =
        _objc_msgSend_165(this.pointer, _sel_stringFromNumber_, number.pointer);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSNumber? numberFromString_(objc.NSString string) {
    final _ret =
        _objc_msgSend_166(this.pointer, _sel_numberFromString_, string.pointer);
    return _ret.address == 0
        ? null
        : objc.NSNumber.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSString localizedStringFromNumber_numberStyle_(
      objc.NSNumber num, int nstyle) {
    final _ret = _objc_msgSend_167(_class_NSNumberFormatter,
        _sel_localizedStringFromNumber_numberStyle_, num.pointer, nstyle);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  static int defaultFormatterBehavior() {
    return _objc_msgSend_168(
        _class_NSNumberFormatter, _sel_defaultFormatterBehavior);
  }

  static void setDefaultFormatterBehavior_(int behavior) {
    _objc_msgSend_169(
        _class_NSNumberFormatter, _sel_setDefaultFormatterBehavior_, behavior);
  }

  int get numberStyle {
    return _objc_msgSend_170(this.pointer, _sel_numberStyle);
  }

  set numberStyle(int value) {
    return _objc_msgSend_171(this.pointer, _sel_setNumberStyle_, value);
  }

  objc.NSLocale get locale {
    final _ret = _objc_msgSend_102(this.pointer, _sel_locale);
    return objc.NSLocale.castFromPointer(_ret, retain: true, release: true);
  }

  set locale(objc.NSLocale value) {
    return _objc_msgSend_103(this.pointer, _sel_setLocale_, value.pointer);
  }

  bool get generatesDecimalNumbers {
    return _objc_msgSend_7(this.pointer, _sel_generatesDecimalNumbers);
  }

  set generatesDecimalNumbers(bool value) {
    return _objc_msgSend_41(
        this.pointer, _sel_setGeneratesDecimalNumbers_, value);
  }

  int get formatterBehavior {
    return _objc_msgSend_168(this.pointer, _sel_formatterBehavior);
  }

  set formatterBehavior(int value) {
    return _objc_msgSend_172(this.pointer, _sel_setFormatterBehavior_, value);
  }

  objc.NSString get negativeFormat {
    final _ret = _objc_msgSend_12(this.pointer, _sel_negativeFormat);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  set negativeFormat(objc.NSString value) {
    return _objc_msgSend_99(
        this.pointer, _sel_setNegativeFormat_, value.pointer);
  }

  objc.NSDictionary? get textAttributesForNegativeValues {
    final _ret =
        _objc_msgSend_65(this.pointer, _sel_textAttributesForNegativeValues);
    return _ret.address == 0
        ? null
        : objc.NSDictionary.castFromPointer(_ret, retain: true, release: true);
  }

  set textAttributesForNegativeValues(objc.NSDictionary? value) {
    return _objc_msgSend_173(
        this.pointer,
        _sel_setTextAttributesForNegativeValues_,
        value?.pointer ?? ffi.nullptr);
  }

  objc.NSString get positiveFormat {
    final _ret = _objc_msgSend_12(this.pointer, _sel_positiveFormat);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  set positiveFormat(objc.NSString value) {
    return _objc_msgSend_99(
        this.pointer, _sel_setPositiveFormat_, value.pointer);
  }

  objc.NSDictionary? get textAttributesForPositiveValues {
    final _ret =
        _objc_msgSend_65(this.pointer, _sel_textAttributesForPositiveValues);
    return _ret.address == 0
        ? null
        : objc.NSDictionary.castFromPointer(_ret, retain: true, release: true);
  }

  set textAttributesForPositiveValues(objc.NSDictionary? value) {
    return _objc_msgSend_173(
        this.pointer,
        _sel_setTextAttributesForPositiveValues_,
        value?.pointer ?? ffi.nullptr);
  }

  bool get allowsFloats {
    return _objc_msgSend_7(this.pointer, _sel_allowsFloats);
  }

  set allowsFloats(bool value) {
    return _objc_msgSend_41(this.pointer, _sel_setAllowsFloats_, value);
  }

  objc.NSString get decimalSeparator {
    final _ret = _objc_msgSend_12(this.pointer, _sel_decimalSeparator);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  set decimalSeparator(objc.NSString value) {
    return _objc_msgSend_99(
        this.pointer, _sel_setDecimalSeparator_, value.pointer);
  }

  bool get alwaysShowsDecimalSeparator {
    return _objc_msgSend_7(this.pointer, _sel_alwaysShowsDecimalSeparator);
  }

  set alwaysShowsDecimalSeparator(bool value) {
    return _objc_msgSend_41(
        this.pointer, _sel_setAlwaysShowsDecimalSeparator_, value);
  }

  objc.NSString get currencyDecimalSeparator {
    final _ret = _objc_msgSend_12(this.pointer, _sel_currencyDecimalSeparator);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  set currencyDecimalSeparator(objc.NSString value) {
    return _objc_msgSend_99(
        this.pointer, _sel_setCurrencyDecimalSeparator_, value.pointer);
  }

  bool get usesGroupingSeparator {
    return _objc_msgSend_7(this.pointer, _sel_usesGroupingSeparator);
  }

  set usesGroupingSeparator(bool value) {
    return _objc_msgSend_41(
        this.pointer, _sel_setUsesGroupingSeparator_, value);
  }

  objc.NSString get groupingSeparator {
    final _ret = _objc_msgSend_12(this.pointer, _sel_groupingSeparator);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  set groupingSeparator(objc.NSString value) {
    return _objc_msgSend_99(
        this.pointer, _sel_setGroupingSeparator_, value.pointer);
  }

  objc.NSString? get zeroSymbol {
    final _ret = _objc_msgSend_13(this.pointer, _sel_zeroSymbol);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  set zeroSymbol(objc.NSString? value) {
    return _objc_msgSend_46(
        this.pointer, _sel_setZeroSymbol_, value?.pointer ?? ffi.nullptr);
  }

  objc.NSDictionary? get textAttributesForZero {
    final _ret = _objc_msgSend_65(this.pointer, _sel_textAttributesForZero);
    return _ret.address == 0
        ? null
        : objc.NSDictionary.castFromPointer(_ret, retain: true, release: true);
  }

  set textAttributesForZero(objc.NSDictionary? value) {
    return _objc_msgSend_173(this.pointer, _sel_setTextAttributesForZero_,
        value?.pointer ?? ffi.nullptr);
  }

  objc.NSString get nilSymbol {
    final _ret = _objc_msgSend_12(this.pointer, _sel_nilSymbol);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  set nilSymbol(objc.NSString value) {
    return _objc_msgSend_99(this.pointer, _sel_setNilSymbol_, value.pointer);
  }

  objc.NSDictionary? get textAttributesForNil {
    final _ret = _objc_msgSend_65(this.pointer, _sel_textAttributesForNil);
    return _ret.address == 0
        ? null
        : objc.NSDictionary.castFromPointer(_ret, retain: true, release: true);
  }

  set textAttributesForNil(objc.NSDictionary? value) {
    return _objc_msgSend_173(this.pointer, _sel_setTextAttributesForNil_,
        value?.pointer ?? ffi.nullptr);
  }

  objc.NSString get notANumberSymbol {
    final _ret = _objc_msgSend_12(this.pointer, _sel_notANumberSymbol);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  set notANumberSymbol(objc.NSString value) {
    return _objc_msgSend_99(
        this.pointer, _sel_setNotANumberSymbol_, value.pointer);
  }

  objc.NSDictionary? get textAttributesForNotANumber {
    final _ret =
        _objc_msgSend_65(this.pointer, _sel_textAttributesForNotANumber);
    return _ret.address == 0
        ? null
        : objc.NSDictionary.castFromPointer(_ret, retain: true, release: true);
  }

  set textAttributesForNotANumber(objc.NSDictionary? value) {
    return _objc_msgSend_173(this.pointer, _sel_setTextAttributesForNotANumber_,
        value?.pointer ?? ffi.nullptr);
  }

  objc.NSString get positiveInfinitySymbol {
    final _ret = _objc_msgSend_12(this.pointer, _sel_positiveInfinitySymbol);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  set positiveInfinitySymbol(objc.NSString value) {
    return _objc_msgSend_99(
        this.pointer, _sel_setPositiveInfinitySymbol_, value.pointer);
  }

  objc.NSDictionary? get textAttributesForPositiveInfinity {
    final _ret =
        _objc_msgSend_65(this.pointer, _sel_textAttributesForPositiveInfinity);
    return _ret.address == 0
        ? null
        : objc.NSDictionary.castFromPointer(_ret, retain: true, release: true);
  }

  set textAttributesForPositiveInfinity(objc.NSDictionary? value) {
    return _objc_msgSend_173(
        this.pointer,
        _sel_setTextAttributesForPositiveInfinity_,
        value?.pointer ?? ffi.nullptr);
  }

  objc.NSString get negativeInfinitySymbol {
    final _ret = _objc_msgSend_12(this.pointer, _sel_negativeInfinitySymbol);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  set negativeInfinitySymbol(objc.NSString value) {
    return _objc_msgSend_99(
        this.pointer, _sel_setNegativeInfinitySymbol_, value.pointer);
  }

  objc.NSDictionary? get textAttributesForNegativeInfinity {
    final _ret =
        _objc_msgSend_65(this.pointer, _sel_textAttributesForNegativeInfinity);
    return _ret.address == 0
        ? null
        : objc.NSDictionary.castFromPointer(_ret, retain: true, release: true);
  }

  set textAttributesForNegativeInfinity(objc.NSDictionary? value) {
    return _objc_msgSend_173(
        this.pointer,
        _sel_setTextAttributesForNegativeInfinity_,
        value?.pointer ?? ffi.nullptr);
  }

  objc.NSString get positivePrefix {
    final _ret = _objc_msgSend_12(this.pointer, _sel_positivePrefix);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  set positivePrefix(objc.NSString value) {
    return _objc_msgSend_99(
        this.pointer, _sel_setPositivePrefix_, value.pointer);
  }

  objc.NSString get positiveSuffix {
    final _ret = _objc_msgSend_12(this.pointer, _sel_positiveSuffix);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  set positiveSuffix(objc.NSString value) {
    return _objc_msgSend_99(
        this.pointer, _sel_setPositiveSuffix_, value.pointer);
  }

  objc.NSString get negativePrefix {
    final _ret = _objc_msgSend_12(this.pointer, _sel_negativePrefix);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  set negativePrefix(objc.NSString value) {
    return _objc_msgSend_99(
        this.pointer, _sel_setNegativePrefix_, value.pointer);
  }

  objc.NSString get negativeSuffix {
    final _ret = _objc_msgSend_12(this.pointer, _sel_negativeSuffix);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  set negativeSuffix(objc.NSString value) {
    return _objc_msgSend_99(
        this.pointer, _sel_setNegativeSuffix_, value.pointer);
  }

  objc.NSString get currencyCode {
    final _ret = _objc_msgSend_12(this.pointer, _sel_currencyCode);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  set currencyCode(objc.NSString value) {
    return _objc_msgSend_99(this.pointer, _sel_setCurrencyCode_, value.pointer);
  }

  objc.NSString get currencySymbol {
    final _ret = _objc_msgSend_12(this.pointer, _sel_currencySymbol);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  set currencySymbol(objc.NSString value) {
    return _objc_msgSend_99(
        this.pointer, _sel_setCurrencySymbol_, value.pointer);
  }

  objc.NSString get internationalCurrencySymbol {
    final _ret =
        _objc_msgSend_12(this.pointer, _sel_internationalCurrencySymbol);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  set internationalCurrencySymbol(objc.NSString value) {
    return _objc_msgSend_99(
        this.pointer, _sel_setInternationalCurrencySymbol_, value.pointer);
  }

  objc.NSString get percentSymbol {
    final _ret = _objc_msgSend_12(this.pointer, _sel_percentSymbol);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  set percentSymbol(objc.NSString value) {
    return _objc_msgSend_99(
        this.pointer, _sel_setPercentSymbol_, value.pointer);
  }

  objc.NSString get perMillSymbol {
    final _ret = _objc_msgSend_12(this.pointer, _sel_perMillSymbol);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  set perMillSymbol(objc.NSString value) {
    return _objc_msgSend_99(
        this.pointer, _sel_setPerMillSymbol_, value.pointer);
  }

  objc.NSString get minusSign {
    final _ret = _objc_msgSend_12(this.pointer, _sel_minusSign);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  set minusSign(objc.NSString value) {
    return _objc_msgSend_99(this.pointer, _sel_setMinusSign_, value.pointer);
  }

  objc.NSString get plusSign {
    final _ret = _objc_msgSend_12(this.pointer, _sel_plusSign);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  set plusSign(objc.NSString value) {
    return _objc_msgSend_99(this.pointer, _sel_setPlusSign_, value.pointer);
  }

  objc.NSString get exponentSymbol {
    final _ret = _objc_msgSend_12(this.pointer, _sel_exponentSymbol);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  set exponentSymbol(objc.NSString value) {
    return _objc_msgSend_99(
        this.pointer, _sel_setExponentSymbol_, value.pointer);
  }

  int get groupingSize {
    return _objc_msgSend_29(this.pointer, _sel_groupingSize);
  }

  set groupingSize(int value) {
    return _objc_msgSend_125(this.pointer, _sel_setGroupingSize_, value);
  }

  int get secondaryGroupingSize {
    return _objc_msgSend_29(this.pointer, _sel_secondaryGroupingSize);
  }

  set secondaryGroupingSize(int value) {
    return _objc_msgSend_125(
        this.pointer, _sel_setSecondaryGroupingSize_, value);
  }

  objc.NSNumber? get multiplier {
    final _ret = _objc_msgSend_174(this.pointer, _sel_multiplier);
    return _ret.address == 0
        ? null
        : objc.NSNumber.castFromPointer(_ret, retain: true, release: true);
  }

  set multiplier(objc.NSNumber? value) {
    return _objc_msgSend_175(
        this.pointer, _sel_setMultiplier_, value?.pointer ?? ffi.nullptr);
  }

  int get formatWidth {
    return _objc_msgSend_29(this.pointer, _sel_formatWidth);
  }

  set formatWidth(int value) {
    return _objc_msgSend_125(this.pointer, _sel_setFormatWidth_, value);
  }

  objc.NSString get paddingCharacter {
    final _ret = _objc_msgSend_12(this.pointer, _sel_paddingCharacter);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  set paddingCharacter(objc.NSString value) {
    return _objc_msgSend_99(
        this.pointer, _sel_setPaddingCharacter_, value.pointer);
  }

  int get paddingPosition {
    return _objc_msgSend_176(this.pointer, _sel_paddingPosition);
  }

  set paddingPosition(int value) {
    return _objc_msgSend_177(this.pointer, _sel_setPaddingPosition_, value);
  }

  int get roundingMode {
    return _objc_msgSend_178(this.pointer, _sel_roundingMode);
  }

  set roundingMode(int value) {
    return _objc_msgSend_179(this.pointer, _sel_setRoundingMode_, value);
  }

  objc.NSNumber get roundingIncrement {
    final _ret = _objc_msgSend_180(this.pointer, _sel_roundingIncrement);
    return objc.NSNumber.castFromPointer(_ret, retain: true, release: true);
  }

  set roundingIncrement(objc.NSNumber value) {
    return _objc_msgSend_181(
        this.pointer, _sel_setRoundingIncrement_, value.pointer);
  }

  int get minimumIntegerDigits {
    return _objc_msgSend_29(this.pointer, _sel_minimumIntegerDigits);
  }

  set minimumIntegerDigits(int value) {
    return _objc_msgSend_125(
        this.pointer, _sel_setMinimumIntegerDigits_, value);
  }

  int get maximumIntegerDigits {
    return _objc_msgSend_29(this.pointer, _sel_maximumIntegerDigits);
  }

  set maximumIntegerDigits(int value) {
    return _objc_msgSend_125(
        this.pointer, _sel_setMaximumIntegerDigits_, value);
  }

  int get minimumFractionDigits {
    return _objc_msgSend_29(this.pointer, _sel_minimumFractionDigits);
  }

  set minimumFractionDigits(int value) {
    return _objc_msgSend_125(
        this.pointer, _sel_setMinimumFractionDigits_, value);
  }

  int get maximumFractionDigits {
    return _objc_msgSend_29(this.pointer, _sel_maximumFractionDigits);
  }

  set maximumFractionDigits(int value) {
    return _objc_msgSend_125(
        this.pointer, _sel_setMaximumFractionDigits_, value);
  }

  objc.NSNumber? get minimum {
    final _ret = _objc_msgSend_174(this.pointer, _sel_minimum);
    return _ret.address == 0
        ? null
        : objc.NSNumber.castFromPointer(_ret, retain: true, release: true);
  }

  set minimum(objc.NSNumber? value) {
    return _objc_msgSend_175(
        this.pointer, _sel_setMinimum_, value?.pointer ?? ffi.nullptr);
  }

  objc.NSNumber? get maximum {
    final _ret = _objc_msgSend_174(this.pointer, _sel_maximum);
    return _ret.address == 0
        ? null
        : objc.NSNumber.castFromPointer(_ret, retain: true, release: true);
  }

  set maximum(objc.NSNumber? value) {
    return _objc_msgSend_175(
        this.pointer, _sel_setMaximum_, value?.pointer ?? ffi.nullptr);
  }

  objc.NSString get currencyGroupingSeparator {
    final _ret = _objc_msgSend_12(this.pointer, _sel_currencyGroupingSeparator);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  set currencyGroupingSeparator(objc.NSString value) {
    return _objc_msgSend_99(
        this.pointer, _sel_setCurrencyGroupingSeparator_, value.pointer);
  }

  bool get lenient {
    return _objc_msgSend_7(this.pointer, _sel_isLenient);
  }

  set lenient(bool value) {
    return _objc_msgSend_41(this.pointer, _sel_setLenient_, value);
  }

  bool get usesSignificantDigits {
    return _objc_msgSend_7(this.pointer, _sel_usesSignificantDigits);
  }

  set usesSignificantDigits(bool value) {
    return _objc_msgSend_41(
        this.pointer, _sel_setUsesSignificantDigits_, value);
  }

  int get minimumSignificantDigits {
    return _objc_msgSend_29(this.pointer, _sel_minimumSignificantDigits);
  }

  set minimumSignificantDigits(int value) {
    return _objc_msgSend_125(
        this.pointer, _sel_setMinimumSignificantDigits_, value);
  }

  int get maximumSignificantDigits {
    return _objc_msgSend_29(this.pointer, _sel_maximumSignificantDigits);
  }

  set maximumSignificantDigits(int value) {
    return _objc_msgSend_125(
        this.pointer, _sel_setMaximumSignificantDigits_, value);
  }

  bool get partialStringValidationEnabled {
    return _objc_msgSend_7(this.pointer, _sel_isPartialStringValidationEnabled);
  }

  set partialStringValidationEnabled(bool value) {
    return _objc_msgSend_41(
        this.pointer, _sel_setPartialStringValidationEnabled_, value);
  }

  bool get hasThousandSeparators {
    return _objc_msgSend_7(this.pointer, _sel_hasThousandSeparators);
  }

  set hasThousandSeparators(bool value) {
    return _objc_msgSend_41(
        this.pointer, _sel_setHasThousandSeparators_, value);
  }

  objc.NSString get thousandSeparator {
    final _ret = _objc_msgSend_12(this.pointer, _sel_thousandSeparator);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  set thousandSeparator(objc.NSString value) {
    return _objc_msgSend_99(
        this.pointer, _sel_setThousandSeparator_, value.pointer);
  }

  bool get localizesFormat {
    return _objc_msgSend_7(this.pointer, _sel_localizesFormat);
  }

  set localizesFormat(bool value) {
    return _objc_msgSend_41(this.pointer, _sel_setLocalizesFormat_, value);
  }

  objc.NSString get format {
    final _ret = _objc_msgSend_12(this.pointer, _sel_format);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  set format(objc.NSString value) {
    return _objc_msgSend_99(this.pointer, _sel_setFormat_, value.pointer);
  }

  NSAttributedString get attributedStringForZero {
    final _ret = _objc_msgSend_63(this.pointer, _sel_attributedStringForZero);
    return NSAttributedString.castFromPointer(_ret,
        retain: true, release: true);
  }

  set attributedStringForZero(NSAttributedString value) {
    return _objc_msgSend_182(
        this.pointer, _sel_setAttributedStringForZero_, value.pointer);
  }

  NSAttributedString get attributedStringForNil {
    final _ret = _objc_msgSend_63(this.pointer, _sel_attributedStringForNil);
    return NSAttributedString.castFromPointer(_ret,
        retain: true, release: true);
  }

  set attributedStringForNil(NSAttributedString value) {
    return _objc_msgSend_182(
        this.pointer, _sel_setAttributedStringForNil_, value.pointer);
  }

  NSAttributedString get attributedStringForNotANumber {
    final _ret =
        _objc_msgSend_63(this.pointer, _sel_attributedStringForNotANumber);
    return NSAttributedString.castFromPointer(_ret,
        retain: true, release: true);
  }

  set attributedStringForNotANumber(NSAttributedString value) {
    return _objc_msgSend_182(
        this.pointer, _sel_setAttributedStringForNotANumber_, value.pointer);
  }

  NSDecimalNumberHandler get roundingBehavior {
    final _ret = _objc_msgSend_183(this.pointer, _sel_roundingBehavior);
    return NSDecimalNumberHandler.castFromPointer(_ret,
        retain: true, release: true);
  }

  set roundingBehavior(NSDecimalNumberHandler value) {
    return _objc_msgSend_185(
        this.pointer, _sel_setRoundingBehavior_, value.pointer);
  }

  @override
  NSNumberFormatter init() {
    final _ret = _objc_msgSend_40(this.pointer, _sel_init);
    return NSNumberFormatter.castFromPointer(_ret, retain: true, release: true);
  }

  static NSNumberFormatter new1() {
    final _ret = _objc_msgSend_40(_class_NSNumberFormatter, _sel_new);
    return NSNumberFormatter.castFromPointer(_ret,
        retain: false, release: true);
  }

  static NSNumberFormatter allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_47(_class_NSNumberFormatter, _sel_allocWithZone_, zone);
    return NSNumberFormatter.castFromPointer(_ret,
        retain: false, release: true);
  }

  static NSNumberFormatter alloc() {
    final _ret = _objc_msgSend_40(_class_NSNumberFormatter, _sel_alloc);
    return NSNumberFormatter.castFromPointer(_ret,
        retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.NSObject aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.NSObject? anArgument) {
    _objc_msgSend_48(
        _class_NSNumberFormatter,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  static void cancelPreviousPerformRequestsWithTarget_(objc.NSObject aTarget) {
    _objc_msgSend_49(_class_NSNumberFormatter,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_7(
        _class_NSNumberFormatter, _sel_accessInstanceVariablesDirectly);
  }

  static bool useStoredAccessor() {
    return _objc_msgSend_7(_class_NSNumberFormatter, _sel_useStoredAccessor);
  }

  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_50(_class_NSNumberFormatter,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_51(_class_NSNumberFormatter,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_52(
        _class_NSNumberFormatter,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_6(
        _class_NSNumberFormatter, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSObject classForKeyedUnarchiver() {
    final _ret = _objc_msgSend_40(
        _class_NSNumberFormatter, _sel_classForKeyedUnarchiver);
    return objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }
}

late final _class_NSNumberFormatter = objc.getClass("NSNumberFormatter");
late final _sel_stringFromNumber_ = objc.registerName("stringFromNumber:");
final _objc_msgSend_165 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_numberFromString_ = objc.registerName("numberFromString:");
final _objc_msgSend_166 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();

abstract class NSNumberFormatterStyle {
  static const int NSNumberFormatterNoStyle = 0;
  static const int NSNumberFormatterDecimalStyle = 1;
  static const int NSNumberFormatterCurrencyStyle = 2;
  static const int NSNumberFormatterPercentStyle = 3;
  static const int NSNumberFormatterScientificStyle = 4;
  static const int NSNumberFormatterSpellOutStyle = 5;
  static const int NSNumberFormatterOrdinalStyle = 6;
  static const int NSNumberFormatterCurrencyISOCodeStyle = 8;
  static const int NSNumberFormatterCurrencyPluralStyle = 9;
  static const int NSNumberFormatterCurrencyAccountingStyle = 10;
}

late final _sel_localizedStringFromNumber_numberStyle_ =
    objc.registerName("localizedStringFromNumber:numberStyle:");
final _objc_msgSend_167 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Int32)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int)>();

abstract class NSNumberFormatterBehavior {
  static const int NSNumberFormatterBehaviorDefault = 0;
  static const int NSNumberFormatterBehavior10_0 = 1000;
  static const int NSNumberFormatterBehavior10_4 = 1040;
}

final _objc_msgSend_168 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Int32 Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
final _objc_msgSend_169 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Int32)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_numberStyle = objc.registerName("numberStyle");
final _objc_msgSend_170 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Int32 Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setNumberStyle_ = objc.registerName("setNumberStyle:");
final _objc_msgSend_171 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Int32)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_generatesDecimalNumbers =
    objc.registerName("generatesDecimalNumbers");
late final _sel_setGeneratesDecimalNumbers_ =
    objc.registerName("setGeneratesDecimalNumbers:");
final _objc_msgSend_172 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Int32)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_negativeFormat = objc.registerName("negativeFormat");
late final _sel_setNegativeFormat_ = objc.registerName("setNegativeFormat:");
late final _sel_textAttributesForNegativeValues =
    objc.registerName("textAttributesForNegativeValues");
late final _sel_setTextAttributesForNegativeValues_ =
    objc.registerName("setTextAttributesForNegativeValues:");
final _objc_msgSend_173 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_positiveFormat = objc.registerName("positiveFormat");
late final _sel_setPositiveFormat_ = objc.registerName("setPositiveFormat:");
late final _sel_textAttributesForPositiveValues =
    objc.registerName("textAttributesForPositiveValues");
late final _sel_setTextAttributesForPositiveValues_ =
    objc.registerName("setTextAttributesForPositiveValues:");
late final _sel_allowsFloats = objc.registerName("allowsFloats");
late final _sel_setAllowsFloats_ = objc.registerName("setAllowsFloats:");
late final _sel_decimalSeparator = objc.registerName("decimalSeparator");
late final _sel_setDecimalSeparator_ =
    objc.registerName("setDecimalSeparator:");
late final _sel_alwaysShowsDecimalSeparator =
    objc.registerName("alwaysShowsDecimalSeparator");
late final _sel_setAlwaysShowsDecimalSeparator_ =
    objc.registerName("setAlwaysShowsDecimalSeparator:");
late final _sel_currencyDecimalSeparator =
    objc.registerName("currencyDecimalSeparator");
late final _sel_setCurrencyDecimalSeparator_ =
    objc.registerName("setCurrencyDecimalSeparator:");
late final _sel_usesGroupingSeparator =
    objc.registerName("usesGroupingSeparator");
late final _sel_setUsesGroupingSeparator_ =
    objc.registerName("setUsesGroupingSeparator:");
late final _sel_groupingSeparator = objc.registerName("groupingSeparator");
late final _sel_setGroupingSeparator_ =
    objc.registerName("setGroupingSeparator:");
late final _sel_zeroSymbol = objc.registerName("zeroSymbol");
late final _sel_setZeroSymbol_ = objc.registerName("setZeroSymbol:");
late final _sel_textAttributesForZero =
    objc.registerName("textAttributesForZero");
late final _sel_setTextAttributesForZero_ =
    objc.registerName("setTextAttributesForZero:");
late final _sel_nilSymbol = objc.registerName("nilSymbol");
late final _sel_setNilSymbol_ = objc.registerName("setNilSymbol:");
late final _sel_textAttributesForNil =
    objc.registerName("textAttributesForNil");
late final _sel_setTextAttributesForNil_ =
    objc.registerName("setTextAttributesForNil:");
late final _sel_notANumberSymbol = objc.registerName("notANumberSymbol");
late final _sel_setNotANumberSymbol_ =
    objc.registerName("setNotANumberSymbol:");
late final _sel_textAttributesForNotANumber =
    objc.registerName("textAttributesForNotANumber");
late final _sel_setTextAttributesForNotANumber_ =
    objc.registerName("setTextAttributesForNotANumber:");
late final _sel_positiveInfinitySymbol =
    objc.registerName("positiveInfinitySymbol");
late final _sel_setPositiveInfinitySymbol_ =
    objc.registerName("setPositiveInfinitySymbol:");
late final _sel_textAttributesForPositiveInfinity =
    objc.registerName("textAttributesForPositiveInfinity");
late final _sel_setTextAttributesForPositiveInfinity_ =
    objc.registerName("setTextAttributesForPositiveInfinity:");
late final _sel_negativeInfinitySymbol =
    objc.registerName("negativeInfinitySymbol");
late final _sel_setNegativeInfinitySymbol_ =
    objc.registerName("setNegativeInfinitySymbol:");
late final _sel_textAttributesForNegativeInfinity =
    objc.registerName("textAttributesForNegativeInfinity");
late final _sel_setTextAttributesForNegativeInfinity_ =
    objc.registerName("setTextAttributesForNegativeInfinity:");
late final _sel_positivePrefix = objc.registerName("positivePrefix");
late final _sel_setPositivePrefix_ = objc.registerName("setPositivePrefix:");
late final _sel_positiveSuffix = objc.registerName("positiveSuffix");
late final _sel_setPositiveSuffix_ = objc.registerName("setPositiveSuffix:");
late final _sel_negativePrefix = objc.registerName("negativePrefix");
late final _sel_setNegativePrefix_ = objc.registerName("setNegativePrefix:");
late final _sel_negativeSuffix = objc.registerName("negativeSuffix");
late final _sel_setNegativeSuffix_ = objc.registerName("setNegativeSuffix:");
late final _sel_currencyCode = objc.registerName("currencyCode");
late final _sel_setCurrencyCode_ = objc.registerName("setCurrencyCode:");
late final _sel_currencySymbol = objc.registerName("currencySymbol");
late final _sel_setCurrencySymbol_ = objc.registerName("setCurrencySymbol:");
late final _sel_internationalCurrencySymbol =
    objc.registerName("internationalCurrencySymbol");
late final _sel_setInternationalCurrencySymbol_ =
    objc.registerName("setInternationalCurrencySymbol:");
late final _sel_percentSymbol = objc.registerName("percentSymbol");
late final _sel_setPercentSymbol_ = objc.registerName("setPercentSymbol:");
late final _sel_perMillSymbol = objc.registerName("perMillSymbol");
late final _sel_setPerMillSymbol_ = objc.registerName("setPerMillSymbol:");
late final _sel_minusSign = objc.registerName("minusSign");
late final _sel_setMinusSign_ = objc.registerName("setMinusSign:");
late final _sel_plusSign = objc.registerName("plusSign");
late final _sel_setPlusSign_ = objc.registerName("setPlusSign:");
late final _sel_exponentSymbol = objc.registerName("exponentSymbol");
late final _sel_setExponentSymbol_ = objc.registerName("setExponentSymbol:");
late final _sel_groupingSize = objc.registerName("groupingSize");
late final _sel_setGroupingSize_ = objc.registerName("setGroupingSize:");
late final _sel_secondaryGroupingSize =
    objc.registerName("secondaryGroupingSize");
late final _sel_setSecondaryGroupingSize_ =
    objc.registerName("setSecondaryGroupingSize:");
late final _sel_multiplier = objc.registerName("multiplier");
final _objc_msgSend_174 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setMultiplier_ = objc.registerName("setMultiplier:");
final _objc_msgSend_175 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_formatWidth = objc.registerName("formatWidth");
late final _sel_setFormatWidth_ = objc.registerName("setFormatWidth:");
late final _sel_paddingCharacter = objc.registerName("paddingCharacter");
late final _sel_setPaddingCharacter_ =
    objc.registerName("setPaddingCharacter:");

abstract class NSNumberFormatterPadPosition {
  static const int NSNumberFormatterPadBeforePrefix = 0;
  static const int NSNumberFormatterPadAfterPrefix = 1;
  static const int NSNumberFormatterPadBeforeSuffix = 2;
  static const int NSNumberFormatterPadAfterSuffix = 3;
}

late final _sel_paddingPosition = objc.registerName("paddingPosition");
final _objc_msgSend_176 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Int32 Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setPaddingPosition_ = objc.registerName("setPaddingPosition:");
final _objc_msgSend_177 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Int32)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();

abstract class NSNumberFormatterRoundingMode {
  static const int NSNumberFormatterRoundCeiling = 0;
  static const int NSNumberFormatterRoundFloor = 1;
  static const int NSNumberFormatterRoundDown = 2;
  static const int NSNumberFormatterRoundUp = 3;
  static const int NSNumberFormatterRoundHalfEven = 4;
  static const int NSNumberFormatterRoundHalfDown = 5;
  static const int NSNumberFormatterRoundHalfUp = 6;
}

late final _sel_roundingMode = objc.registerName("roundingMode");
final _objc_msgSend_178 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Int32 Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setRoundingMode_ = objc.registerName("setRoundingMode:");
final _objc_msgSend_179 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Int32)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_roundingIncrement = objc.registerName("roundingIncrement");
final _objc_msgSend_180 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setRoundingIncrement_ =
    objc.registerName("setRoundingIncrement:");
final _objc_msgSend_181 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_minimumIntegerDigits =
    objc.registerName("minimumIntegerDigits");
late final _sel_setMinimumIntegerDigits_ =
    objc.registerName("setMinimumIntegerDigits:");
late final _sel_maximumIntegerDigits =
    objc.registerName("maximumIntegerDigits");
late final _sel_setMaximumIntegerDigits_ =
    objc.registerName("setMaximumIntegerDigits:");
late final _sel_minimumFractionDigits =
    objc.registerName("minimumFractionDigits");
late final _sel_setMinimumFractionDigits_ =
    objc.registerName("setMinimumFractionDigits:");
late final _sel_maximumFractionDigits =
    objc.registerName("maximumFractionDigits");
late final _sel_setMaximumFractionDigits_ =
    objc.registerName("setMaximumFractionDigits:");
late final _sel_minimum = objc.registerName("minimum");
late final _sel_setMinimum_ = objc.registerName("setMinimum:");
late final _sel_maximum = objc.registerName("maximum");
late final _sel_setMaximum_ = objc.registerName("setMaximum:");
late final _sel_currencyGroupingSeparator =
    objc.registerName("currencyGroupingSeparator");
late final _sel_setCurrencyGroupingSeparator_ =
    objc.registerName("setCurrencyGroupingSeparator:");
late final _sel_usesSignificantDigits =
    objc.registerName("usesSignificantDigits");
late final _sel_setUsesSignificantDigits_ =
    objc.registerName("setUsesSignificantDigits:");
late final _sel_minimumSignificantDigits =
    objc.registerName("minimumSignificantDigits");
late final _sel_setMinimumSignificantDigits_ =
    objc.registerName("setMinimumSignificantDigits:");
late final _sel_maximumSignificantDigits =
    objc.registerName("maximumSignificantDigits");
late final _sel_setMaximumSignificantDigits_ =
    objc.registerName("setMaximumSignificantDigits:");
late final _sel_isPartialStringValidationEnabled =
    objc.registerName("isPartialStringValidationEnabled");
late final _sel_setPartialStringValidationEnabled_ =
    objc.registerName("setPartialStringValidationEnabled:");
late final _sel_hasThousandSeparators =
    objc.registerName("hasThousandSeparators");
late final _sel_setHasThousandSeparators_ =
    objc.registerName("setHasThousandSeparators:");
late final _sel_thousandSeparator = objc.registerName("thousandSeparator");
late final _sel_setThousandSeparator_ =
    objc.registerName("setThousandSeparator:");
late final _sel_localizesFormat = objc.registerName("localizesFormat");
late final _sel_setLocalizesFormat_ = objc.registerName("setLocalizesFormat:");
late final _sel_format = objc.registerName("format");
late final _sel_setFormat_ = objc.registerName("setFormat:");
late final _sel_attributedStringForZero =
    objc.registerName("attributedStringForZero");
late final _sel_setAttributedStringForZero_ =
    objc.registerName("setAttributedStringForZero:");
final _objc_msgSend_182 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_attributedStringForNil =
    objc.registerName("attributedStringForNil");
late final _sel_setAttributedStringForNil_ =
    objc.registerName("setAttributedStringForNil:");
late final _sel_attributedStringForNotANumber =
    objc.registerName("attributedStringForNotANumber");
late final _sel_setAttributedStringForNotANumber_ =
    objc.registerName("setAttributedStringForNotANumber:");

class NSDecimalNumberHandler extends objc.NSObject {
  NSDecimalNumberHandler._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSDecimalNumberHandler] that points to the same underlying object as [other].
  NSDecimalNumberHandler.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSDecimalNumberHandler] that wraps the given raw object pointer.
  NSDecimalNumberHandler.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSDecimalNumberHandler].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSDecimalNumberHandler);
  }

  static NSDecimalNumberHandler getDefaultDecimalNumberHandler() {
    final _ret = _objc_msgSend_183(
        _class_NSDecimalNumberHandler, _sel_defaultDecimalNumberHandler);
    return NSDecimalNumberHandler.castFromPointer(_ret,
        retain: true, release: true);
  }

  NSDecimalNumberHandler
      initWithRoundingMode_scale_raiseOnExactness_raiseOnOverflow_raiseOnUnderflow_raiseOnDivideByZero_(
          int roundingMode,
          int scale,
          bool exact,
          bool overflow,
          bool underflow,
          bool divideByZero) {
    final _ret = _objc_msgSend_184(
        this.pointer,
        _sel_initWithRoundingMode_scale_raiseOnExactness_raiseOnOverflow_raiseOnUnderflow_raiseOnDivideByZero_,
        roundingMode,
        scale,
        exact,
        overflow,
        underflow,
        divideByZero);
    return NSDecimalNumberHandler.castFromPointer(_ret,
        retain: true, release: true);
  }

  static NSDecimalNumberHandler
      decimalNumberHandlerWithRoundingMode_scale_raiseOnExactness_raiseOnOverflow_raiseOnUnderflow_raiseOnDivideByZero_(
          int roundingMode,
          int scale,
          bool exact,
          bool overflow,
          bool underflow,
          bool divideByZero) {
    final _ret = _objc_msgSend_184(
        _class_NSDecimalNumberHandler,
        _sel_decimalNumberHandlerWithRoundingMode_scale_raiseOnExactness_raiseOnOverflow_raiseOnUnderflow_raiseOnDivideByZero_,
        roundingMode,
        scale,
        exact,
        overflow,
        underflow,
        divideByZero);
    return NSDecimalNumberHandler.castFromPointer(_ret,
        retain: true, release: true);
  }

  @override
  NSDecimalNumberHandler init() {
    final _ret = _objc_msgSend_40(this.pointer, _sel_init);
    return NSDecimalNumberHandler.castFromPointer(_ret,
        retain: true, release: true);
  }

  static NSDecimalNumberHandler new1() {
    final _ret = _objc_msgSend_40(_class_NSDecimalNumberHandler, _sel_new);
    return NSDecimalNumberHandler.castFromPointer(_ret,
        retain: false, release: true);
  }

  static NSDecimalNumberHandler allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_47(
        _class_NSDecimalNumberHandler, _sel_allocWithZone_, zone);
    return NSDecimalNumberHandler.castFromPointer(_ret,
        retain: false, release: true);
  }

  static NSDecimalNumberHandler alloc() {
    final _ret = _objc_msgSend_40(_class_NSDecimalNumberHandler, _sel_alloc);
    return NSDecimalNumberHandler.castFromPointer(_ret,
        retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.NSObject aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.NSObject? anArgument) {
    _objc_msgSend_48(
        _class_NSDecimalNumberHandler,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  static void cancelPreviousPerformRequestsWithTarget_(objc.NSObject aTarget) {
    _objc_msgSend_49(_class_NSDecimalNumberHandler,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_7(
        _class_NSDecimalNumberHandler, _sel_accessInstanceVariablesDirectly);
  }

  static bool useStoredAccessor() {
    return _objc_msgSend_7(
        _class_NSDecimalNumberHandler, _sel_useStoredAccessor);
  }

  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_50(_class_NSDecimalNumberHandler,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_51(_class_NSDecimalNumberHandler,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_52(
        _class_NSDecimalNumberHandler,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_6(
        _class_NSDecimalNumberHandler, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSObject classForKeyedUnarchiver() {
    final _ret = _objc_msgSend_40(
        _class_NSDecimalNumberHandler, _sel_classForKeyedUnarchiver);
    return objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }
}

late final _class_NSDecimalNumberHandler =
    objc.getClass("NSDecimalNumberHandler");
late final _sel_defaultDecimalNumberHandler =
    objc.registerName("defaultDecimalNumberHandler");
final _objc_msgSend_183 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();

abstract class NSRoundingMode {
  static const int NSRoundPlain = 0;
  static const int NSRoundDown = 1;
  static const int NSRoundUp = 2;
  static const int NSRoundBankers = 3;
}

late final _sel_initWithRoundingMode_scale_raiseOnExactness_raiseOnOverflow_raiseOnUnderflow_raiseOnDivideByZero_ =
    objc.registerName(
        "initWithRoundingMode:scale:raiseOnExactness:raiseOnOverflow:raiseOnUnderflow:raiseOnDivideByZero:");
final _objc_msgSend_184 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Int32,
                ffi.Short,
                ffi.Bool,
                ffi.Bool,
                ffi.Bool,
                ffi.Bool)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int,
            int,
            bool,
            bool,
            bool,
            bool)>();
late final _sel_decimalNumberHandlerWithRoundingMode_scale_raiseOnExactness_raiseOnOverflow_raiseOnUnderflow_raiseOnDivideByZero_ =
    objc.registerName(
        "decimalNumberHandlerWithRoundingMode:scale:raiseOnExactness:raiseOnOverflow:raiseOnUnderflow:raiseOnDivideByZero:");
late final _sel_roundingBehavior = objc.registerName("roundingBehavior");
late final _sel_setRoundingBehavior_ =
    objc.registerName("setRoundingBehavior:");
final _objc_msgSend_185 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();

abstract class NSLocaleLanguageDirection {
  static const int NSLocaleLanguageDirectionUnknown = 0;
  static const int NSLocaleLanguageDirectionLeftToRight = 1;
  static const int NSLocaleLanguageDirectionRightToLeft = 2;
  static const int NSLocaleLanguageDirectionTopToBottom = 3;
  static const int NSLocaleLanguageDirectionBottomToTop = 4;
}

class NSScanner extends objc.NSObject {
  NSScanner._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSScanner] that points to the same underlying object as [other].
  NSScanner.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSScanner] that wraps the given raw object pointer.
  NSScanner.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSScanner].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(obj.pointer, _sel_isKindOfClass_, _class_NSScanner);
  }

  objc.NSString get string {
    final _ret = _objc_msgSend_12(this.pointer, _sel_string);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  int get scanLocation {
    return _objc_msgSend_29(this.pointer, _sel_scanLocation);
  }

  set scanLocation(int value) {
    return _objc_msgSend_125(this.pointer, _sel_setScanLocation_, value);
  }

  objc.NSCharacterSet? get charactersToBeSkipped {
    final _ret = _objc_msgSend_186(this.pointer, _sel_charactersToBeSkipped);
    return _ret.address == 0
        ? null
        : objc.NSCharacterSet.castFromPointer(_ret,
            retain: true, release: true);
  }

  set charactersToBeSkipped(objc.NSCharacterSet? value) {
    return _objc_msgSend_187(this.pointer, _sel_setCharactersToBeSkipped_,
        value?.pointer ?? ffi.nullptr);
  }

  bool get caseSensitive {
    return _objc_msgSend_7(this.pointer, _sel_caseSensitive);
  }

  set caseSensitive(bool value) {
    return _objc_msgSend_41(this.pointer, _sel_setCaseSensitive_, value);
  }

  objc.NSObject? get locale {
    final _ret = _objc_msgSend_66(this.pointer, _sel_locale);
    return _ret.address == 0
        ? null
        : objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }

  set locale(objc.NSObject? value) {
    return _objc_msgSend_188(
        this.pointer, _sel_setLocale_, value?.pointer ?? ffi.nullptr);
  }

  NSScanner initWithString_(objc.NSString string) {
    final _ret =
        _objc_msgSend_35(this.pointer, _sel_initWithString_, string.pointer);
    return NSScanner.castFromPointer(_ret, retain: true, release: true);
  }

  bool scanInt_(ffi.Pointer<ffi.Int> result) {
    return _objc_msgSend_189(this.pointer, _sel_scanInt_, result);
  }

  bool scanInteger_(ffi.Pointer<ffi.Long> result) {
    return _objc_msgSend_190(this.pointer, _sel_scanInteger_, result);
  }

  bool scanLongLong_(ffi.Pointer<ffi.LongLong> result) {
    return _objc_msgSend_191(this.pointer, _sel_scanLongLong_, result);
  }

  bool scanUnsignedLongLong_(ffi.Pointer<ffi.UnsignedLongLong> result) {
    return _objc_msgSend_192(this.pointer, _sel_scanUnsignedLongLong_, result);
  }

  bool scanFloat_(ffi.Pointer<ffi.Float> result) {
    return _objc_msgSend_193(this.pointer, _sel_scanFloat_, result);
  }

  bool scanDouble_(ffi.Pointer<ffi.Double> result) {
    return _objc_msgSend_194(this.pointer, _sel_scanDouble_, result);
  }

  bool scanHexInt_(ffi.Pointer<ffi.UnsignedInt> result) {
    return _objc_msgSend_195(this.pointer, _sel_scanHexInt_, result);
  }

  bool scanHexLongLong_(ffi.Pointer<ffi.UnsignedLongLong> result) {
    return _objc_msgSend_192(this.pointer, _sel_scanHexLongLong_, result);
  }

  bool scanHexFloat_(ffi.Pointer<ffi.Float> result) {
    return _objc_msgSend_193(this.pointer, _sel_scanHexFloat_, result);
  }

  bool scanHexDouble_(ffi.Pointer<ffi.Double> result) {
    return _objc_msgSend_194(this.pointer, _sel_scanHexDouble_, result);
  }

  bool scanString_intoString_(
      objc.NSString string, ffi.Pointer<ffi.Pointer<objc.ObjCObject>> result) {
    return _objc_msgSend_196(
        this.pointer, _sel_scanString_intoString_, string.pointer, result);
  }

  bool scanCharactersFromSet_intoString_(objc.NSCharacterSet set,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> result) {
    return _objc_msgSend_197(this.pointer,
        _sel_scanCharactersFromSet_intoString_, set.pointer, result);
  }

  bool scanUpToString_intoString_(
      objc.NSString string, ffi.Pointer<ffi.Pointer<objc.ObjCObject>> result) {
    return _objc_msgSend_196(
        this.pointer, _sel_scanUpToString_intoString_, string.pointer, result);
  }

  bool scanUpToCharactersFromSet_intoString_(objc.NSCharacterSet set,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> result) {
    return _objc_msgSend_197(this.pointer,
        _sel_scanUpToCharactersFromSet_intoString_, set.pointer, result);
  }

  bool get atEnd {
    return _objc_msgSend_7(this.pointer, _sel_isAtEnd);
  }

  static NSScanner scannerWithString_(objc.NSString string) {
    final _ret = _objc_msgSend_35(
        _class_NSScanner, _sel_scannerWithString_, string.pointer);
    return NSScanner.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSObject localizedScannerWithString_(objc.NSString string) {
    final _ret = _objc_msgSend_35(
        _class_NSScanner, _sel_localizedScannerWithString_, string.pointer);
    return objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }

  bool scanDecimal_(ffi.Pointer<NSDecimal> dcm) {
    return _objc_msgSend_198(this.pointer, _sel_scanDecimal_, dcm);
  }

  @override
  NSScanner init() {
    final _ret = _objc_msgSend_40(this.pointer, _sel_init);
    return NSScanner.castFromPointer(_ret, retain: true, release: true);
  }

  static NSScanner new1() {
    final _ret = _objc_msgSend_40(_class_NSScanner, _sel_new);
    return NSScanner.castFromPointer(_ret, retain: false, release: true);
  }

  static NSScanner allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_47(_class_NSScanner, _sel_allocWithZone_, zone);
    return NSScanner.castFromPointer(_ret, retain: false, release: true);
  }

  static NSScanner alloc() {
    final _ret = _objc_msgSend_40(_class_NSScanner, _sel_alloc);
    return NSScanner.castFromPointer(_ret, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.NSObject aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.NSObject? anArgument) {
    _objc_msgSend_48(
        _class_NSScanner,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  static void cancelPreviousPerformRequestsWithTarget_(objc.NSObject aTarget) {
    _objc_msgSend_49(_class_NSScanner,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_7(
        _class_NSScanner, _sel_accessInstanceVariablesDirectly);
  }

  static bool useStoredAccessor() {
    return _objc_msgSend_7(_class_NSScanner, _sel_useStoredAccessor);
  }

  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_50(_class_NSScanner,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_51(_class_NSScanner,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_52(
        _class_NSScanner,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret =
        _objc_msgSend_6(_class_NSScanner, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSObject classForKeyedUnarchiver() {
    final _ret =
        _objc_msgSend_40(_class_NSScanner, _sel_classForKeyedUnarchiver);
    return objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }
}

late final _class_NSScanner = objc.getClass("NSScanner");
late final _sel_scanLocation = objc.registerName("scanLocation");
late final _sel_setScanLocation_ = objc.registerName("setScanLocation:");
late final _sel_charactersToBeSkipped =
    objc.registerName("charactersToBeSkipped");
final _objc_msgSend_186 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setCharactersToBeSkipped_ =
    objc.registerName("setCharactersToBeSkipped:");
final _objc_msgSend_187 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_caseSensitive = objc.registerName("caseSensitive");
late final _sel_setCaseSensitive_ = objc.registerName("setCaseSensitive:");
final _objc_msgSend_188 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_scanInt_ = objc.registerName("scanInt:");
final _objc_msgSend_189 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<ffi.Int>)>>()
    .asFunction<
        bool Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<ffi.Int>)>();
late final _sel_scanInteger_ = objc.registerName("scanInteger:");
final _objc_msgSend_190 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<ffi.Long>)>>()
    .asFunction<
        bool Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<ffi.Long>)>();
late final _sel_scanLongLong_ = objc.registerName("scanLongLong:");
final _objc_msgSend_191 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<ffi.LongLong>)>>()
    .asFunction<
        bool Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<ffi.LongLong>)>();
late final _sel_scanUnsignedLongLong_ =
    objc.registerName("scanUnsignedLongLong:");
final _objc_msgSend_192 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<ffi.UnsignedLongLong>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<ffi.UnsignedLongLong>)>();
late final _sel_scanFloat_ = objc.registerName("scanFloat:");
final _objc_msgSend_193 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<ffi.Float>)>>()
    .asFunction<
        bool Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<ffi.Float>)>();
late final _sel_scanDouble_ = objc.registerName("scanDouble:");
final _objc_msgSend_194 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<ffi.Double>)>>()
    .asFunction<
        bool Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<ffi.Double>)>();
late final _sel_scanHexInt_ = objc.registerName("scanHexInt:");
final _objc_msgSend_195 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<ffi.UnsignedInt>)>>()
    .asFunction<
        bool Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<ffi.UnsignedInt>)>();
late final _sel_scanHexLongLong_ = objc.registerName("scanHexLongLong:");
late final _sel_scanHexFloat_ = objc.registerName("scanHexFloat:");
late final _sel_scanHexDouble_ = objc.registerName("scanHexDouble:");
late final _sel_scanString_intoString_ =
    objc.registerName("scanString:intoString:");
final _objc_msgSend_196 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_scanCharactersFromSet_intoString_ =
    objc.registerName("scanCharactersFromSet:intoString:");
final _objc_msgSend_197 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_scanUpToString_intoString_ =
    objc.registerName("scanUpToString:intoString:");
late final _sel_scanUpToCharactersFromSet_intoString_ =
    objc.registerName("scanUpToCharactersFromSet:intoString:");
late final _sel_isAtEnd = objc.registerName("isAtEnd");
late final _sel_scannerWithString_ = objc.registerName("scannerWithString:");
late final _sel_localizedScannerWithString_ =
    objc.registerName("localizedScannerWithString:");

final class NSDecimal extends ffi.Opaque {}

late final _sel_scanDecimal_ = objc.registerName("scanDecimal:");
final _objc_msgSend_198 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<NSDecimal>)>>()
    .asFunction<
        bool Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<NSDecimal>)>();

class NSException extends objc.NSObject {
  NSException._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSException] that points to the same underlying object as [other].
  NSException.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSException] that wraps the given raw object pointer.
  NSException.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSException].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSException);
  }

  static NSException exceptionWithName_reason_userInfo_(
      objc.NSString name, objc.NSString? reason, objc.NSDictionary? userInfo) {
    final _ret = _objc_msgSend_199(
        _class_NSException,
        _sel_exceptionWithName_reason_userInfo_,
        name.pointer,
        reason?.pointer ?? ffi.nullptr,
        userInfo?.pointer ?? ffi.nullptr);
    return NSException.castFromPointer(_ret, retain: true, release: true);
  }

  NSException initWithName_reason_userInfo_(objc.NSString aName,
      objc.NSString? aReason, objc.NSDictionary? aUserInfo) {
    final _ret = _objc_msgSend_200(
        this.pointer,
        _sel_initWithName_reason_userInfo_,
        aName.pointer,
        aReason?.pointer ?? ffi.nullptr,
        aUserInfo?.pointer ?? ffi.nullptr);
    return NSException.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSString get name {
    final _ret = _objc_msgSend_12(this.pointer, _sel_name);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSString? get reason {
    final _ret = _objc_msgSend_13(this.pointer, _sel_reason);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSDictionary? get userInfo {
    final _ret = _objc_msgSend_65(this.pointer, _sel_userInfo);
    return _ret.address == 0
        ? null
        : objc.NSDictionary.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSArray get callStackReturnAddresses {
    final _ret = _objc_msgSend_6(this.pointer, _sel_callStackReturnAddresses);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSArray get callStackSymbols {
    final _ret = _objc_msgSend_6(this.pointer, _sel_callStackSymbols);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  void raise() {
    _objc_msgSend_82(this.pointer, _sel_raise);
  }

  static void raise_format_(objc.NSString name, objc.NSString format) {
    _objc_msgSend_201(
        _class_NSException, _sel_raise_format_, name.pointer, format.pointer);
  }

  static void raise_format_arguments_(objc.NSString name, objc.NSString format,
      ffi.Pointer<__va_list_tag> argList) {
    _objc_msgSend_202(_class_NSException, _sel_raise_format_arguments_,
        name.pointer, format.pointer, argList);
  }

  @override
  NSException init() {
    final _ret = _objc_msgSend_40(this.pointer, _sel_init);
    return NSException.castFromPointer(_ret, retain: true, release: true);
  }

  static NSException new1() {
    final _ret = _objc_msgSend_40(_class_NSException, _sel_new);
    return NSException.castFromPointer(_ret, retain: false, release: true);
  }

  static NSException allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_47(_class_NSException, _sel_allocWithZone_, zone);
    return NSException.castFromPointer(_ret, retain: false, release: true);
  }

  static NSException alloc() {
    final _ret = _objc_msgSend_40(_class_NSException, _sel_alloc);
    return NSException.castFromPointer(_ret, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.NSObject aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.NSObject? anArgument) {
    _objc_msgSend_48(
        _class_NSException,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  static void cancelPreviousPerformRequestsWithTarget_(objc.NSObject aTarget) {
    _objc_msgSend_49(_class_NSException,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_7(
        _class_NSException, _sel_accessInstanceVariablesDirectly);
  }

  static bool useStoredAccessor() {
    return _objc_msgSend_7(_class_NSException, _sel_useStoredAccessor);
  }

  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_50(_class_NSException,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_51(_class_NSException,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_52(
        _class_NSException,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_6(
        _class_NSException, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSObject classForKeyedUnarchiver() {
    final _ret =
        _objc_msgSend_40(_class_NSException, _sel_classForKeyedUnarchiver);
    return objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }
}

late final _class_NSException = objc.getClass("NSException");
late final _sel_exceptionWithName_reason_userInfo_ =
    objc.registerName("exceptionWithName:reason:userInfo:");
final _objc_msgSend_199 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_initWithName_reason_userInfo_ =
    objc.registerName("initWithName:reason:userInfo:");
final _objc_msgSend_200 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_reason = objc.registerName("reason");
late final _sel_userInfo = objc.registerName("userInfo");
late final _sel_callStackReturnAddresses =
    objc.registerName("callStackReturnAddresses");
late final _sel_callStackSymbols = objc.registerName("callStackSymbols");
late final _sel_raise = objc.registerName("raise");
late final _sel_raise_format_ = objc.registerName("raise:format:");
final _objc_msgSend_201 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_raise_format_arguments_ =
    objc.registerName("raise:format:arguments:");
final _objc_msgSend_202 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<__va_list_tag>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<__va_list_tag>)>();

class NSRunLoop extends objc.NSObject {
  NSRunLoop._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSRunLoop] that points to the same underlying object as [other].
  NSRunLoop.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSRunLoop] that wraps the given raw object pointer.
  NSRunLoop.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSRunLoop].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(obj.pointer, _sel_isKindOfClass_, _class_NSRunLoop);
  }

  static NSRunLoop getCurrentRunLoop() {
    final _ret = _objc_msgSend_203(_class_NSRunLoop, _sel_currentRunLoop);
    return NSRunLoop.castFromPointer(_ret, retain: true, release: true);
  }

  static NSRunLoop getMainRunLoop() {
    final _ret = _objc_msgSend_203(_class_NSRunLoop, _sel_mainRunLoop);
    return NSRunLoop.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSString? get currentMode {
    final _ret = _objc_msgSend_13(this.pointer, _sel_currentMode);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  ffi.Pointer<__CFRunLoop> getCFRunLoop() {
    return _objc_msgSend_204(this.pointer, _sel_getCFRunLoop);
  }

  void addTimer_forMode_(NSTimer timer, objc.NSString mode) {
    _objc_msgSend_213(
        this.pointer, _sel_addTimer_forMode_, timer.pointer, mode.pointer);
  }

  void addPort_forMode_(NSPort aPort, objc.NSString mode) {
    _objc_msgSend_244(
        this.pointer, _sel_addPort_forMode_, aPort.pointer, mode.pointer);
  }

  void removePort_forMode_(NSPort aPort, objc.NSString mode) {
    _objc_msgSend_244(
        this.pointer, _sel_removePort_forMode_, aPort.pointer, mode.pointer);
  }

  objc.NSDate? limitDateForMode_(objc.NSString mode) {
    final _ret =
        _objc_msgSend_93(this.pointer, _sel_limitDateForMode_, mode.pointer);
    return _ret.address == 0
        ? null
        : objc.NSDate.castFromPointer(_ret, retain: true, release: true);
  }

  void acceptInputForMode_beforeDate_(
      objc.NSString mode, objc.NSDate limitDate) {
    _objc_msgSend_245(this.pointer, _sel_acceptInputForMode_beforeDate_,
        mode.pointer, limitDate.pointer);
  }

  void run() {
    _objc_msgSend_82(this.pointer, _sel_run);
  }

  void runUntilDate_(objc.NSDate limitDate) {
    _objc_msgSend_246(this.pointer, _sel_runUntilDate_, limitDate.pointer);
  }

  bool runMode_beforeDate_(objc.NSString mode, objc.NSDate limitDate) {
    return _objc_msgSend_247(this.pointer, _sel_runMode_beforeDate_,
        mode.pointer, limitDate.pointer);
  }

  void configureAsServer() {
    _objc_msgSend_82(this.pointer, _sel_configureAsServer);
  }

  void performInModes_block_(objc.NSArray modes, ObjCBlock_ffiVoid block) {
    _objc_msgSend_248(
        this.pointer, _sel_performInModes_block_, modes.pointer, block.pointer);
  }

  void performBlock_(ObjCBlock_ffiVoid block) {
    _objc_msgSend_249(this.pointer, _sel_performBlock_, block.pointer);
  }

  void performSelector_target_argument_order_modes_(
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.NSObject target,
      objc.NSObject? arg,
      int order,
      objc.NSArray modes) {
    _objc_msgSend_250(
        this.pointer,
        _sel_performSelector_target_argument_order_modes_,
        aSelector,
        target.pointer,
        arg?.pointer ?? ffi.nullptr,
        order,
        modes.pointer);
  }

  void cancelPerformSelector_target_argument_(
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.NSObject target,
      objc.NSObject? arg) {
    _objc_msgSend_251(this.pointer, _sel_cancelPerformSelector_target_argument_,
        aSelector, target.pointer, arg?.pointer ?? ffi.nullptr);
  }

  void cancelPerformSelectorsWithTarget_(objc.NSObject target) {
    _objc_msgSend_49(
        this.pointer, _sel_cancelPerformSelectorsWithTarget_, target.pointer);
  }

  @override
  NSRunLoop init() {
    final _ret = _objc_msgSend_40(this.pointer, _sel_init);
    return NSRunLoop.castFromPointer(_ret, retain: true, release: true);
  }

  static NSRunLoop new1() {
    final _ret = _objc_msgSend_40(_class_NSRunLoop, _sel_new);
    return NSRunLoop.castFromPointer(_ret, retain: false, release: true);
  }

  static NSRunLoop allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_47(_class_NSRunLoop, _sel_allocWithZone_, zone);
    return NSRunLoop.castFromPointer(_ret, retain: false, release: true);
  }

  static NSRunLoop alloc() {
    final _ret = _objc_msgSend_40(_class_NSRunLoop, _sel_alloc);
    return NSRunLoop.castFromPointer(_ret, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.NSObject aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.NSObject? anArgument) {
    _objc_msgSend_48(
        _class_NSRunLoop,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  static void cancelPreviousPerformRequestsWithTarget_(objc.NSObject aTarget) {
    _objc_msgSend_49(_class_NSRunLoop,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_7(
        _class_NSRunLoop, _sel_accessInstanceVariablesDirectly);
  }

  static bool useStoredAccessor() {
    return _objc_msgSend_7(_class_NSRunLoop, _sel_useStoredAccessor);
  }

  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_50(_class_NSRunLoop,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_51(_class_NSRunLoop,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_52(
        _class_NSRunLoop,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret =
        _objc_msgSend_6(_class_NSRunLoop, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSObject classForKeyedUnarchiver() {
    final _ret =
        _objc_msgSend_40(_class_NSRunLoop, _sel_classForKeyedUnarchiver);
    return objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }
}

late final _class_NSRunLoop = objc.getClass("NSRunLoop");
late final _sel_currentRunLoop = objc.registerName("currentRunLoop");
final _objc_msgSend_203 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_mainRunLoop = objc.registerName("mainRunLoop");
late final _sel_currentMode = objc.registerName("currentMode");

final class __CFRunLoop extends ffi.Opaque {}

late final _sel_getCFRunLoop = objc.registerName("getCFRunLoop");
final _objc_msgSend_204 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<__CFRunLoop> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<__CFRunLoop> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();

class NSTimer extends objc.NSObject {
  NSTimer._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSTimer] that points to the same underlying object as [other].
  NSTimer.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSTimer] that wraps the given raw object pointer.
  NSTimer.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSTimer].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(obj.pointer, _sel_isKindOfClass_, _class_NSTimer);
  }

  static NSTimer timerWithTimeInterval_invocation_repeats_(
      double ti, objc.NSInvocation invocation, bool yesOrNo) {
    final _ret = _objc_msgSend_205(
        _class_NSTimer,
        _sel_timerWithTimeInterval_invocation_repeats_,
        ti,
        invocation.pointer,
        yesOrNo);
    return NSTimer.castFromPointer(_ret, retain: true, release: true);
  }

  static NSTimer scheduledTimerWithTimeInterval_invocation_repeats_(
      double ti, objc.NSInvocation invocation, bool yesOrNo) {
    final _ret = _objc_msgSend_205(
        _class_NSTimer,
        _sel_scheduledTimerWithTimeInterval_invocation_repeats_,
        ti,
        invocation.pointer,
        yesOrNo);
    return NSTimer.castFromPointer(_ret, retain: true, release: true);
  }

  static NSTimer timerWithTimeInterval_target_selector_userInfo_repeats_(
      double ti,
      objc.NSObject aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.NSObject? userInfo,
      bool yesOrNo) {
    final _ret = _objc_msgSend_206(
        _class_NSTimer,
        _sel_timerWithTimeInterval_target_selector_userInfo_repeats_,
        ti,
        aTarget.pointer,
        aSelector,
        userInfo?.pointer ?? ffi.nullptr,
        yesOrNo);
    return NSTimer.castFromPointer(_ret, retain: true, release: true);
  }

  static NSTimer
      scheduledTimerWithTimeInterval_target_selector_userInfo_repeats_(
          double ti,
          objc.NSObject aTarget,
          ffi.Pointer<objc.ObjCSelector> aSelector,
          objc.NSObject? userInfo,
          bool yesOrNo) {
    final _ret = _objc_msgSend_206(
        _class_NSTimer,
        _sel_scheduledTimerWithTimeInterval_target_selector_userInfo_repeats_,
        ti,
        aTarget.pointer,
        aSelector,
        userInfo?.pointer ?? ffi.nullptr,
        yesOrNo);
    return NSTimer.castFromPointer(_ret, retain: true, release: true);
  }

  static NSTimer timerWithTimeInterval_repeats_block_(
      double interval, bool repeats, ObjCBlock_ffiVoid_NSTimer block) {
    final _ret = _objc_msgSend_207(
        _class_NSTimer,
        _sel_timerWithTimeInterval_repeats_block_,
        interval,
        repeats,
        block.pointer);
    return NSTimer.castFromPointer(_ret, retain: true, release: true);
  }

  static NSTimer scheduledTimerWithTimeInterval_repeats_block_(
      double interval, bool repeats, ObjCBlock_ffiVoid_NSTimer block) {
    final _ret = _objc_msgSend_207(
        _class_NSTimer,
        _sel_scheduledTimerWithTimeInterval_repeats_block_,
        interval,
        repeats,
        block.pointer);
    return NSTimer.castFromPointer(_ret, retain: true, release: true);
  }

  NSTimer initWithFireDate_interval_repeats_block_(objc.NSDate date,
      double interval, bool repeats, ObjCBlock_ffiVoid_NSTimer block) {
    final _ret = _objc_msgSend_208(
        this.pointer,
        _sel_initWithFireDate_interval_repeats_block_,
        date.pointer,
        interval,
        repeats,
        block.pointer);
    return NSTimer.castFromPointer(_ret, retain: true, release: true);
  }

  NSTimer initWithFireDate_interval_target_selector_userInfo_repeats_(
      objc.NSDate date,
      double ti,
      objc.NSObject t,
      ffi.Pointer<objc.ObjCSelector> s,
      objc.NSObject? ui,
      bool rep) {
    final _ret = _objc_msgSend_209(
        this.pointer,
        _sel_initWithFireDate_interval_target_selector_userInfo_repeats_,
        date.pointer,
        ti,
        t.pointer,
        s,
        ui?.pointer ?? ffi.nullptr,
        rep);
    return NSTimer.castFromPointer(_ret, retain: true, release: true);
  }

  void fire() {
    _objc_msgSend_82(this.pointer, _sel_fire);
  }

  objc.NSDate get fireDate {
    final _ret = _objc_msgSend_210(this.pointer, _sel_fireDate);
    return objc.NSDate.castFromPointer(_ret, retain: true, release: true);
  }

  set fireDate(objc.NSDate value) {
    return _objc_msgSend_211(this.pointer, _sel_setFireDate_, value.pointer);
  }

  double get timeInterval {
    return objc.useMsgSendVariants
        ? _objc_msgSend_115Fpret(this.pointer, _sel_timeInterval)
        : _objc_msgSend_115(this.pointer, _sel_timeInterval);
  }

  double get tolerance {
    return objc.useMsgSendVariants
        ? _objc_msgSend_115Fpret(this.pointer, _sel_tolerance)
        : _objc_msgSend_115(this.pointer, _sel_tolerance);
  }

  set tolerance(double value) {
    return _objc_msgSend_212(this.pointer, _sel_setTolerance_, value);
  }

  void invalidate() {
    _objc_msgSend_82(this.pointer, _sel_invalidate);
  }

  bool get valid {
    return _objc_msgSend_7(this.pointer, _sel_isValid);
  }

  objc.NSObject? get userInfo {
    final _ret = _objc_msgSend_66(this.pointer, _sel_userInfo);
    return _ret.address == 0
        ? null
        : objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }

  @override
  NSTimer init() {
    final _ret = _objc_msgSend_40(this.pointer, _sel_init);
    return NSTimer.castFromPointer(_ret, retain: true, release: true);
  }

  static NSTimer new1() {
    final _ret = _objc_msgSend_40(_class_NSTimer, _sel_new);
    return NSTimer.castFromPointer(_ret, retain: false, release: true);
  }

  static NSTimer allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_47(_class_NSTimer, _sel_allocWithZone_, zone);
    return NSTimer.castFromPointer(_ret, retain: false, release: true);
  }

  static NSTimer alloc() {
    final _ret = _objc_msgSend_40(_class_NSTimer, _sel_alloc);
    return NSTimer.castFromPointer(_ret, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.NSObject aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.NSObject? anArgument) {
    _objc_msgSend_48(
        _class_NSTimer,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  static void cancelPreviousPerformRequestsWithTarget_(objc.NSObject aTarget) {
    _objc_msgSend_49(_class_NSTimer,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_7(
        _class_NSTimer, _sel_accessInstanceVariablesDirectly);
  }

  static bool useStoredAccessor() {
    return _objc_msgSend_7(_class_NSTimer, _sel_useStoredAccessor);
  }

  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_50(_class_NSTimer,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_51(_class_NSTimer,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_52(
        _class_NSTimer,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret =
        _objc_msgSend_6(_class_NSTimer, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSObject classForKeyedUnarchiver() {
    final _ret = _objc_msgSend_40(_class_NSTimer, _sel_classForKeyedUnarchiver);
    return objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }
}

late final _class_NSTimer = objc.getClass("NSTimer");
late final _sel_timerWithTimeInterval_invocation_repeats_ =
    objc.registerName("timerWithTimeInterval:invocation:repeats:");
final _objc_msgSend_205 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Double,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Bool)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            double,
            ffi.Pointer<objc.ObjCObject>,
            bool)>();
late final _sel_scheduledTimerWithTimeInterval_invocation_repeats_ =
    objc.registerName("scheduledTimerWithTimeInterval:invocation:repeats:");
late final _sel_timerWithTimeInterval_target_selector_userInfo_repeats_ = objc
    .registerName("timerWithTimeInterval:target:selector:userInfo:repeats:");
final _objc_msgSend_206 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Double,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Bool)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            double,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            bool)>();
late final _sel_scheduledTimerWithTimeInterval_target_selector_userInfo_repeats_ =
    objc.registerName(
        "scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:");
void _ObjCBlock_ffiVoid_NSTimer_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlock> block, ffi.Pointer<objc.ObjCObject> arg0) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0)>>()
        .asFunction<void Function(ffi.Pointer<objc.ObjCObject>)>()(arg0);
final _ObjCBlock_ffiVoid_NSTimer_closureRegistry =
    <int, void Function(ffi.Pointer<objc.ObjCObject>)>{};
int _ObjCBlock_ffiVoid_NSTimer_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void> _ObjCBlock_ffiVoid_NSTimer_registerClosure(
    void Function(ffi.Pointer<objc.ObjCObject>) fn) {
  final id = ++_ObjCBlock_ffiVoid_NSTimer_closureRegistryIndex;
  _ObjCBlock_ffiVoid_NSTimer_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

void _ObjCBlock_ffiVoid_NSTimer_closureTrampoline(
        ffi.Pointer<objc.ObjCBlock> block, ffi.Pointer<objc.ObjCObject> arg0) =>
    _ObjCBlock_ffiVoid_NSTimer_closureRegistry[block.ref.target.address]!(arg0);

class ObjCBlock_ffiVoid_NSTimer extends objc.ObjCBlockBase {
  ObjCBlock_ffiVoid_NSTimer._(ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false, bool release = true})
      : super(pointer, retain: retain, release: release);

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_ffiVoid_NSTimer castFromPointer(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = false}) {
    return ObjCBlock_ffiVoid_NSTimer._(pointer,
        retain: retain, release: release);
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSTimer.fromFunctionPointer(
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0)>>
          ptr)
      : this._(objc.newBlock(
            _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<objc.ObjCObject>)>(
                    _ObjCBlock_ffiVoid_NSTimer_fnPtrTrampoline)
                .cast(),
            ptr.cast()));
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSTimer.fromFunction(void Function(NSTimer) fn)
      : this._(objc.newBlock(
            _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<objc.ObjCObject>)>(
                    _ObjCBlock_ffiVoid_NSTimer_closureTrampoline)
                .cast(),
            _ObjCBlock_ffiVoid_NSTimer_registerClosure(
                (ffi.Pointer<objc.ObjCObject> arg0) => fn(
                    NSTimer.castFromPointer(arg0,
                        retain: true, release: true)))));
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_NSTimer.listener(void Function(NSTimer) fn)
      : this._(objc.newBlock(
            (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                        ffi.Void Function(ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<objc.ObjCObject>)>.listener(
                    _ObjCBlock_ffiVoid_NSTimer_closureTrampoline)
                  ..keepIsolateAlive = false)
                .nativeFunction
                .cast(),
            _ObjCBlock_ffiVoid_NSTimer_registerClosure(
                (ffi.Pointer<objc.ObjCObject> arg0) => fn(
                    NSTimer.castFromPointer(arg0,
                        retain: true, release: true)))));
  static ffi.NativeCallable<
          ffi.Void Function(
              ffi.Pointer<objc.ObjCBlock>, ffi.Pointer<objc.ObjCObject>)>?
      _dartFuncListenerTrampoline;

  void call(NSTimer arg0) => pointer.ref.invoke
      .cast<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<objc.ObjCBlock> block,
                  ffi.Pointer<objc.ObjCObject> arg0)>>()
      .asFunction<
          void Function(ffi.Pointer<objc.ObjCBlock>,
              ffi.Pointer<objc.ObjCObject>)>()(pointer, arg0.pointer);
}

late final _sel_timerWithTimeInterval_repeats_block_ =
    objc.registerName("timerWithTimeInterval:repeats:block:");
final _objc_msgSend_207 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Double,
                ffi.Bool,
                ffi.Pointer<objc.ObjCBlock>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            double,
            bool,
            ffi.Pointer<objc.ObjCBlock>)>();
late final _sel_scheduledTimerWithTimeInterval_repeats_block_ =
    objc.registerName("scheduledTimerWithTimeInterval:repeats:block:");
late final _sel_initWithFireDate_interval_repeats_block_ =
    objc.registerName("initWithFireDate:interval:repeats:block:");
final _objc_msgSend_208 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Double,
                ffi.Bool,
                ffi.Pointer<objc.ObjCBlock>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            double,
            bool,
            ffi.Pointer<objc.ObjCBlock>)>();
late final _sel_initWithFireDate_interval_target_selector_userInfo_repeats_ =
    objc.registerName(
        "initWithFireDate:interval:target:selector:userInfo:repeats:");
final _objc_msgSend_209 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Double,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Bool)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            double,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            bool)>();
late final _sel_fire = objc.registerName("fire");
late final _sel_fireDate = objc.registerName("fireDate");
final _objc_msgSend_210 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setFireDate_ = objc.registerName("setFireDate:");
final _objc_msgSend_211 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_timeInterval = objc.registerName("timeInterval");
late final _sel_tolerance = objc.registerName("tolerance");
late final _sel_setTolerance_ = objc.registerName("setTolerance:");
final _objc_msgSend_212 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Double)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, double)>();
late final _sel_invalidate = objc.registerName("invalidate");
late final _sel_isValid = objc.registerName("isValid");
late final _sel_addTimer_forMode_ = objc.registerName("addTimer:forMode:");
final _objc_msgSend_213 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();

class NSPort extends objc.NSObject {
  NSPort._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSPort] that points to the same underlying object as [other].
  NSPort.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSPort] that wraps the given raw object pointer.
  NSPort.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSPort].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(obj.pointer, _sel_isKindOfClass_, _class_NSPort);
  }

  static NSPort port() {
    final _ret = _objc_msgSend_214(_class_NSPort, _sel_port);
    return NSPort.castFromPointer(_ret, retain: true, release: true);
  }

  void invalidate() {
    _objc_msgSend_82(this.pointer, _sel_invalidate);
  }

  bool get valid {
    return _objc_msgSend_7(this.pointer, _sel_isValid);
  }

  void setDelegate_(objc.NSObject? anObject) {
    _objc_msgSend_215(
        this.pointer, _sel_setDelegate_, anObject?.pointer ?? ffi.nullptr);
  }

  objc.NSObject? delegate() {
    final _ret = _objc_msgSend_66(this.pointer, _sel_delegate);
    return _ret.address == 0
        ? null
        : objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }

  void scheduleInRunLoop_forMode_(NSRunLoop runLoop, objc.NSString mode) {
    _objc_msgSend_216(this.pointer, _sel_scheduleInRunLoop_forMode_,
        runLoop.pointer, mode.pointer);
  }

  void removeFromRunLoop_forMode_(NSRunLoop runLoop, objc.NSString mode) {
    _objc_msgSend_216(this.pointer, _sel_removeFromRunLoop_forMode_,
        runLoop.pointer, mode.pointer);
  }

  int get reservedSpaceLength {
    return _objc_msgSend_29(this.pointer, _sel_reservedSpaceLength);
  }

  bool sendBeforeDate_components_from_reserved_(
      objc.NSDate limitDate,
      objc.NSMutableArray? components,
      NSPort? receivePort,
      int headerSpaceReserved) {
    return _objc_msgSend_217(
        this.pointer,
        _sel_sendBeforeDate_components_from_reserved_,
        limitDate.pointer,
        components?.pointer ?? ffi.nullptr,
        receivePort?.pointer ?? ffi.nullptr,
        headerSpaceReserved);
  }

  bool sendBeforeDate_msgid_components_from_reserved_(
      objc.NSDate limitDate,
      int msgID,
      objc.NSMutableArray? components,
      NSPort? receivePort,
      int headerSpaceReserved) {
    return _objc_msgSend_218(
        this.pointer,
        _sel_sendBeforeDate_msgid_components_from_reserved_,
        limitDate.pointer,
        msgID,
        components?.pointer ?? ffi.nullptr,
        receivePort?.pointer ?? ffi.nullptr,
        headerSpaceReserved);
  }

  void addConnection_toRunLoop_forMode_(
      NSConnection conn, NSRunLoop runLoop, objc.NSString mode) {
    _objc_msgSend_243(this.pointer, _sel_addConnection_toRunLoop_forMode_,
        conn.pointer, runLoop.pointer, mode.pointer);
  }

  void removeConnection_fromRunLoop_forMode_(
      NSConnection conn, NSRunLoop runLoop, objc.NSString mode) {
    _objc_msgSend_243(this.pointer, _sel_removeConnection_fromRunLoop_forMode_,
        conn.pointer, runLoop.pointer, mode.pointer);
  }

  @override
  NSPort init() {
    final _ret = _objc_msgSend_40(this.pointer, _sel_init);
    return NSPort.castFromPointer(_ret, retain: true, release: true);
  }

  static NSPort new1() {
    final _ret = _objc_msgSend_40(_class_NSPort, _sel_new);
    return NSPort.castFromPointer(_ret, retain: false, release: true);
  }

  static NSPort allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_47(_class_NSPort, _sel_allocWithZone_, zone);
    return NSPort.castFromPointer(_ret, retain: false, release: true);
  }

  static NSPort alloc() {
    final _ret = _objc_msgSend_40(_class_NSPort, _sel_alloc);
    return NSPort.castFromPointer(_ret, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.NSObject aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.NSObject? anArgument) {
    _objc_msgSend_48(
        _class_NSPort,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  static void cancelPreviousPerformRequestsWithTarget_(objc.NSObject aTarget) {
    _objc_msgSend_49(_class_NSPort,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_7(_class_NSPort, _sel_accessInstanceVariablesDirectly);
  }

  static bool useStoredAccessor() {
    return _objc_msgSend_7(_class_NSPort, _sel_useStoredAccessor);
  }

  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_50(_class_NSPort,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_51(
        _class_NSPort, _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_52(
        _class_NSPort,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret =
        _objc_msgSend_6(_class_NSPort, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSObject classForKeyedUnarchiver() {
    final _ret = _objc_msgSend_40(_class_NSPort, _sel_classForKeyedUnarchiver);
    return objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }
}

late final _class_NSPort = objc.getClass("NSPort");
late final _sel_port = objc.registerName("port");
final _objc_msgSend_214 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setDelegate_ = objc.registerName("setDelegate:");
final _objc_msgSend_215 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_delegate = objc.registerName("delegate");
late final _sel_scheduleInRunLoop_forMode_ =
    objc.registerName("scheduleInRunLoop:forMode:");
final _objc_msgSend_216 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_removeFromRunLoop_forMode_ =
    objc.registerName("removeFromRunLoop:forMode:");
late final _sel_reservedSpaceLength = objc.registerName("reservedSpaceLength");
late final _sel_sendBeforeDate_components_from_reserved_ =
    objc.registerName("sendBeforeDate:components:from:reserved:");
final _objc_msgSend_217 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.UnsignedLong)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            int)>();
late final _sel_sendBeforeDate_msgid_components_from_reserved_ =
    objc.registerName("sendBeforeDate:msgid:components:from:reserved:");
final _objc_msgSend_218 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.UnsignedLong,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.UnsignedLong)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            int)>();

class NSConnection extends objc.NSObject {
  NSConnection._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSConnection] that points to the same underlying object as [other].
  NSConnection.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSConnection] that wraps the given raw object pointer.
  NSConnection.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSConnection].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSConnection);
  }

  objc.NSDictionary get statistics {
    final _ret = _objc_msgSend_112(this.pointer, _sel_statistics);
    return objc.NSDictionary.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSArray allConnections() {
    final _ret = _objc_msgSend_6(_class_NSConnection, _sel_allConnections);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  static NSConnection defaultConnection() {
    final _ret = _objc_msgSend_219(_class_NSConnection, _sel_defaultConnection);
    return NSConnection.castFromPointer(_ret, retain: true, release: true);
  }

  static NSConnection? connectionWithRegisteredName_host_(
      objc.NSString name, objc.NSString? hostName) {
    final _ret = _objc_msgSend_220(
        _class_NSConnection,
        _sel_connectionWithRegisteredName_host_,
        name.pointer,
        hostName?.pointer ?? ffi.nullptr);
    return _ret.address == 0
        ? null
        : NSConnection.castFromPointer(_ret, retain: true, release: true);
  }

  static NSConnection? connectionWithRegisteredName_host_usingNameServer_(
      objc.NSString name, objc.NSString? hostName, NSPortNameServer server) {
    final _ret = _objc_msgSend_225(
        _class_NSConnection,
        _sel_connectionWithRegisteredName_host_usingNameServer_,
        name.pointer,
        hostName?.pointer ?? ffi.nullptr,
        server.pointer);
    return _ret.address == 0
        ? null
        : NSConnection.castFromPointer(_ret, retain: true, release: true);
  }

  static NSDistantObject? rootProxyForConnectionWithRegisteredName_host_(
      objc.NSString name, objc.NSString? hostName) {
    final _ret = _objc_msgSend_233(
        _class_NSConnection,
        _sel_rootProxyForConnectionWithRegisteredName_host_,
        name.pointer,
        hostName?.pointer ?? ffi.nullptr);
    return _ret.address == 0
        ? null
        : NSDistantObject.castFromPointer(_ret, retain: true, release: true);
  }

  static NSDistantObject?
      rootProxyForConnectionWithRegisteredName_host_usingNameServer_(
          objc.NSString name,
          objc.NSString? hostName,
          NSPortNameServer server) {
    final _ret = _objc_msgSend_234(
        _class_NSConnection,
        _sel_rootProxyForConnectionWithRegisteredName_host_usingNameServer_,
        name.pointer,
        hostName?.pointer ?? ffi.nullptr,
        server.pointer);
    return _ret.address == 0
        ? null
        : NSDistantObject.castFromPointer(_ret, retain: true, release: true);
  }

  static NSConnection? serviceConnectionWithName_rootObject_usingNameServer_(
      objc.NSString name, objc.NSObject root, NSPortNameServer server) {
    final _ret = _objc_msgSend_235(
        _class_NSConnection,
        _sel_serviceConnectionWithName_rootObject_usingNameServer_,
        name.pointer,
        root.pointer,
        server.pointer);
    return _ret.address == 0
        ? null
        : NSConnection.castFromPointer(_ret, retain: true, release: true);
  }

  static NSConnection? serviceConnectionWithName_rootObject_(
      objc.NSString name, objc.NSObject root) {
    final _ret = _objc_msgSend_236(_class_NSConnection,
        _sel_serviceConnectionWithName_rootObject_, name.pointer, root.pointer);
    return _ret.address == 0
        ? null
        : NSConnection.castFromPointer(_ret, retain: true, release: true);
  }

  double get requestTimeout {
    return objc.useMsgSendVariants
        ? _objc_msgSend_115Fpret(this.pointer, _sel_requestTimeout)
        : _objc_msgSend_115(this.pointer, _sel_requestTimeout);
  }

  set requestTimeout(double value) {
    return _objc_msgSend_212(this.pointer, _sel_setRequestTimeout_, value);
  }

  double get replyTimeout {
    return objc.useMsgSendVariants
        ? _objc_msgSend_115Fpret(this.pointer, _sel_replyTimeout)
        : _objc_msgSend_115(this.pointer, _sel_replyTimeout);
  }

  set replyTimeout(double value) {
    return _objc_msgSend_212(this.pointer, _sel_setReplyTimeout_, value);
  }

  objc.NSObject? get rootObject {
    final _ret = _objc_msgSend_66(this.pointer, _sel_rootObject);
    return _ret.address == 0
        ? null
        : objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }

  set rootObject(objc.NSObject? value) {
    return _objc_msgSend_188(
        this.pointer, _sel_setRootObject_, value?.pointer ?? ffi.nullptr);
  }

  objc.NSObject? get delegate {
    final _ret = _objc_msgSend_66(this.pointer, _sel_delegate);
    return _ret.address == 0
        ? null
        : objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }

  set delegate(objc.NSObject? value) {
    return _objc_msgSend_188(
        this.pointer, _sel_setDelegate_, value?.pointer ?? ffi.nullptr);
  }

  bool get independentConversationQueueing {
    return _objc_msgSend_7(this.pointer, _sel_independentConversationQueueing);
  }

  set independentConversationQueueing(bool value) {
    return _objc_msgSend_41(
        this.pointer, _sel_setIndependentConversationQueueing_, value);
  }

  bool get valid {
    return _objc_msgSend_7(this.pointer, _sel_isValid);
  }

  NSDistantObject get rootProxy {
    final _ret = _objc_msgSend_237(this.pointer, _sel_rootProxy);
    return NSDistantObject.castFromPointer(_ret, retain: true, release: true);
  }

  void invalidate() {
    _objc_msgSend_82(this.pointer, _sel_invalidate);
  }

  void addRequestMode_(objc.NSString rmode) {
    _objc_msgSend_98(this.pointer, _sel_addRequestMode_, rmode.pointer);
  }

  void removeRequestMode_(objc.NSString rmode) {
    _objc_msgSend_98(this.pointer, _sel_removeRequestMode_, rmode.pointer);
  }

  objc.NSArray get requestModes {
    final _ret = _objc_msgSend_6(this.pointer, _sel_requestModes);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  bool registerName_(objc.NSString? name) {
    return _objc_msgSend_238(
        this.pointer, _sel_registerName_, name?.pointer ?? ffi.nullptr);
  }

  bool registerName_withNameServer_(
      objc.NSString? name, NSPortNameServer server) {
    return _objc_msgSend_239(this.pointer, _sel_registerName_withNameServer_,
        name?.pointer ?? ffi.nullptr, server.pointer);
  }

  static NSConnection? connectionWithReceivePort_sendPort_(
      NSPort? receivePort, NSPort? sendPort) {
    final _ret = _objc_msgSend_240(
        _class_NSConnection,
        _sel_connectionWithReceivePort_sendPort_,
        receivePort?.pointer ?? ffi.nullptr,
        sendPort?.pointer ?? ffi.nullptr);
    return _ret.address == 0
        ? null
        : NSConnection.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSObject? currentConversation() {
    final _ret =
        _objc_msgSend_66(_class_NSConnection, _sel_currentConversation);
    return _ret.address == 0
        ? null
        : objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }

  NSConnection? initWithReceivePort_sendPort_(
      NSPort? receivePort, NSPort? sendPort) {
    final _ret = _objc_msgSend_240(
        this.pointer,
        _sel_initWithReceivePort_sendPort_,
        receivePort?.pointer ?? ffi.nullptr,
        sendPort?.pointer ?? ffi.nullptr);
    return _ret.address == 0
        ? null
        : NSConnection.castFromPointer(_ret, retain: true, release: true);
  }

  NSPort get sendPort {
    final _ret = _objc_msgSend_214(this.pointer, _sel_sendPort);
    return NSPort.castFromPointer(_ret, retain: true, release: true);
  }

  NSPort get receivePort {
    final _ret = _objc_msgSend_214(this.pointer, _sel_receivePort);
    return NSPort.castFromPointer(_ret, retain: true, release: true);
  }

  void enableMultipleThreads() {
    _objc_msgSend_82(this.pointer, _sel_enableMultipleThreads);
  }

  bool get multipleThreadsEnabled {
    return _objc_msgSend_7(this.pointer, _sel_multipleThreadsEnabled);
  }

  void addRunLoop_(NSRunLoop runloop) {
    _objc_msgSend_241(this.pointer, _sel_addRunLoop_, runloop.pointer);
  }

  void removeRunLoop_(NSRunLoop runloop) {
    _objc_msgSend_241(this.pointer, _sel_removeRunLoop_, runloop.pointer);
  }

  void runInNewThread() {
    _objc_msgSend_82(this.pointer, _sel_runInNewThread);
  }

  objc.NSArray get remoteObjects {
    final _ret = _objc_msgSend_6(this.pointer, _sel_remoteObjects);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSArray get localObjects {
    final _ret = _objc_msgSend_6(this.pointer, _sel_localObjects);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  void dispatchWithComponents_(objc.NSArray components) {
    _objc_msgSend_242(
        this.pointer, _sel_dispatchWithComponents_, components.pointer);
  }

  @override
  NSConnection init() {
    final _ret = _objc_msgSend_40(this.pointer, _sel_init);
    return NSConnection.castFromPointer(_ret, retain: true, release: true);
  }

  static NSConnection new1() {
    final _ret = _objc_msgSend_40(_class_NSConnection, _sel_new);
    return NSConnection.castFromPointer(_ret, retain: false, release: true);
  }

  static NSConnection allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_47(_class_NSConnection, _sel_allocWithZone_, zone);
    return NSConnection.castFromPointer(_ret, retain: false, release: true);
  }

  static NSConnection alloc() {
    final _ret = _objc_msgSend_40(_class_NSConnection, _sel_alloc);
    return NSConnection.castFromPointer(_ret, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.NSObject aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.NSObject? anArgument) {
    _objc_msgSend_48(
        _class_NSConnection,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  static void cancelPreviousPerformRequestsWithTarget_(objc.NSObject aTarget) {
    _objc_msgSend_49(_class_NSConnection,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_7(
        _class_NSConnection, _sel_accessInstanceVariablesDirectly);
  }

  static bool useStoredAccessor() {
    return _objc_msgSend_7(_class_NSConnection, _sel_useStoredAccessor);
  }

  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_50(_class_NSConnection,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_51(_class_NSConnection,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_52(
        _class_NSConnection,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_6(
        _class_NSConnection, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSObject classForKeyedUnarchiver() {
    final _ret =
        _objc_msgSend_40(_class_NSConnection, _sel_classForKeyedUnarchiver);
    return objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }
}

late final _class_NSConnection = objc.getClass("NSConnection");
late final _sel_statistics = objc.registerName("statistics");
late final _sel_allConnections = objc.registerName("allConnections");
late final _sel_defaultConnection = objc.registerName("defaultConnection");
final _objc_msgSend_219 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_connectionWithRegisteredName_host_ =
    objc.registerName("connectionWithRegisteredName:host:");
final _objc_msgSend_220 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();

class NSPortNameServer extends objc.NSObject {
  NSPortNameServer._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSPortNameServer] that points to the same underlying object as [other].
  NSPortNameServer.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSPortNameServer] that wraps the given raw object pointer.
  NSPortNameServer.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSPortNameServer].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSPortNameServer);
  }

  static NSPortNameServer systemDefaultPortNameServer() {
    final _ret = _objc_msgSend_221(
        _class_NSPortNameServer, _sel_systemDefaultPortNameServer);
    return NSPortNameServer.castFromPointer(_ret, retain: true, release: true);
  }

  NSPort? portForName_(objc.NSString name) {
    final _ret =
        _objc_msgSend_222(this.pointer, _sel_portForName_, name.pointer);
    return _ret.address == 0
        ? null
        : NSPort.castFromPointer(_ret, retain: true, release: true);
  }

  NSPort? portForName_host_(objc.NSString name, objc.NSString? host) {
    final _ret = _objc_msgSend_223(this.pointer, _sel_portForName_host_,
        name.pointer, host?.pointer ?? ffi.nullptr);
    return _ret.address == 0
        ? null
        : NSPort.castFromPointer(_ret, retain: true, release: true);
  }

  bool registerPort_name_(NSPort port, objc.NSString name) {
    return _objc_msgSend_224(
        this.pointer, _sel_registerPort_name_, port.pointer, name.pointer);
  }

  bool removePortForName_(objc.NSString name) {
    return _objc_msgSend_51(
        this.pointer, _sel_removePortForName_, name.pointer);
  }

  @override
  NSPortNameServer init() {
    final _ret = _objc_msgSend_40(this.pointer, _sel_init);
    return NSPortNameServer.castFromPointer(_ret, retain: true, release: true);
  }

  static NSPortNameServer new1() {
    final _ret = _objc_msgSend_40(_class_NSPortNameServer, _sel_new);
    return NSPortNameServer.castFromPointer(_ret, retain: false, release: true);
  }

  static NSPortNameServer allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_47(_class_NSPortNameServer, _sel_allocWithZone_, zone);
    return NSPortNameServer.castFromPointer(_ret, retain: false, release: true);
  }

  static NSPortNameServer alloc() {
    final _ret = _objc_msgSend_40(_class_NSPortNameServer, _sel_alloc);
    return NSPortNameServer.castFromPointer(_ret, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.NSObject aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.NSObject? anArgument) {
    _objc_msgSend_48(
        _class_NSPortNameServer,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  static void cancelPreviousPerformRequestsWithTarget_(objc.NSObject aTarget) {
    _objc_msgSend_49(_class_NSPortNameServer,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_7(
        _class_NSPortNameServer, _sel_accessInstanceVariablesDirectly);
  }

  static bool useStoredAccessor() {
    return _objc_msgSend_7(_class_NSPortNameServer, _sel_useStoredAccessor);
  }

  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_50(_class_NSPortNameServer,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_51(_class_NSPortNameServer,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_52(
        _class_NSPortNameServer,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_6(
        _class_NSPortNameServer, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSObject classForKeyedUnarchiver() {
    final _ret =
        _objc_msgSend_40(_class_NSPortNameServer, _sel_classForKeyedUnarchiver);
    return objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }
}

late final _class_NSPortNameServer = objc.getClass("NSPortNameServer");
late final _sel_systemDefaultPortNameServer =
    objc.registerName("systemDefaultPortNameServer");
final _objc_msgSend_221 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_portForName_ = objc.registerName("portForName:");
final _objc_msgSend_222 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_portForName_host_ = objc.registerName("portForName:host:");
final _objc_msgSend_223 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_registerPort_name_ = objc.registerName("registerPort:name:");
final _objc_msgSend_224 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_removePortForName_ = objc.registerName("removePortForName:");
late final _sel_connectionWithRegisteredName_host_usingNameServer_ =
    objc.registerName("connectionWithRegisteredName:host:usingNameServer:");
final _objc_msgSend_225 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();

class NSDistantObject extends NSProxy {
  NSDistantObject._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSDistantObject] that points to the same underlying object as [other].
  NSDistantObject.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSDistantObject] that wraps the given raw object pointer.
  NSDistantObject.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSDistantObject].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSDistantObject);
  }

  static objc.NSObject? proxyWithTarget_connection_(
      objc.NSObject target, NSConnection connection) {
    final _ret = _objc_msgSend_229(_class_NSDistantObject,
        _sel_proxyWithTarget_connection_, target.pointer, connection.pointer);
    return _ret.address == 0
        ? null
        : objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }

  NSDistantObject? initWithTarget_connection_(
      objc.NSObject target, NSConnection connection) {
    final _ret = _objc_msgSend_229(this.pointer,
        _sel_initWithTarget_connection_, target.pointer, connection.pointer);
    return _ret.address == 0
        ? null
        : NSDistantObject.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSObject proxyWithLocal_connection_(
      objc.NSObject target, NSConnection connection) {
    final _ret = _objc_msgSend_230(_class_NSDistantObject,
        _sel_proxyWithLocal_connection_, target.pointer, connection.pointer);
    return objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }

  NSDistantObject initWithLocal_connection_(
      objc.NSObject target, NSConnection connection) {
    final _ret = _objc_msgSend_230(this.pointer, _sel_initWithLocal_connection_,
        target.pointer, connection.pointer);
    return NSDistantObject.castFromPointer(_ret, retain: true, release: true);
  }

  NSDistantObject? initWithCoder_(objc.NSCoder inCoder) {
    final _ret =
        _objc_msgSend_231(this.pointer, _sel_initWithCoder_, inCoder.pointer);
    return _ret.address == 0
        ? null
        : NSDistantObject.castFromPointer(_ret, retain: true, release: true);
  }

  void setProtocolForProxy_(objc.Protocol? proto) {
    _objc_msgSend_232(
        this.pointer, _sel_setProtocolForProxy_, proto?.pointer ?? ffi.nullptr);
  }

  NSConnection get connectionForProxy {
    final _ret = _objc_msgSend_219(this.pointer, _sel_connectionForProxy);
    return NSConnection.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSObject alloc() {
    final _ret = _objc_msgSend_40(_class_NSDistantObject, _sel_alloc);
    return objc.NSObject.castFromPointer(_ret, retain: false, release: true);
  }

  static bool respondsToSelector_(ffi.Pointer<objc.ObjCSelector> aSelector) {
    return _objc_msgSend_228(
        _class_NSDistantObject, _sel_respondsToSelector_, aSelector);
  }
}

late final _class_NSDistantObject = objc.getClass("NSDistantObject");

class NSProxy extends objc.ObjCObjectBase {
  NSProxy._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super(pointer, retain: retain, release: release);

  /// Constructs a [NSProxy] that points to the same underlying object as [other].
  NSProxy.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSProxy] that wraps the given raw object pointer.
  NSProxy.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSProxy].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(obj.pointer, _sel_isKindOfClass_, _class_NSProxy);
  }

  static objc.NSObject alloc() {
    final _ret = _objc_msgSend_40(_class_NSProxy, _sel_alloc);
    return objc.NSObject.castFromPointer(_ret, retain: false, release: true);
  }

  static objc.NSObject allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_47(_class_NSProxy, _sel_allocWithZone_, zone);
    return objc.NSObject.castFromPointer(_ret, retain: false, release: true);
  }

  static objc.NSObject class1() {
    final _ret = _objc_msgSend_40(_class_NSProxy, _sel_class);
    return objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }

  void forwardInvocation_(objc.NSInvocation invocation) {
    _objc_msgSend_226(
        this.pointer, _sel_forwardInvocation_, invocation.pointer);
  }

  objc.NSMethodSignature? methodSignatureForSelector_(
      ffi.Pointer<objc.ObjCSelector> sel) {
    final _ret =
        _objc_msgSend_227(this.pointer, _sel_methodSignatureForSelector_, sel);
    return _ret.address == 0
        ? null
        : objc.NSMethodSignature.castFromPointer(_ret,
            retain: true, release: true);
  }

  void dealloc() {
    _objc_msgSend_82(this.pointer, _sel_dealloc);
  }

  void finalize() {
    _objc_msgSend_82(this.pointer, _sel_finalize);
  }

  objc.NSString get description {
    final _ret = _objc_msgSend_12(this.pointer, _sel_description);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSString get debugDescription {
    final _ret = _objc_msgSend_12(this.pointer, _sel_debugDescription);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  static bool respondsToSelector_(ffi.Pointer<objc.ObjCSelector> aSelector) {
    return _objc_msgSend_228(
        _class_NSProxy, _sel_respondsToSelector_, aSelector);
  }

  bool allowsWeakReference() {
    return _objc_msgSend_7(this.pointer, _sel_allowsWeakReference);
  }

  bool retainWeakReference() {
    return _objc_msgSend_7(this.pointer, _sel_retainWeakReference);
  }
}

late final _class_NSProxy = objc.getClass("NSProxy");
late final _sel_class = objc.registerName("class");
late final _sel_forwardInvocation_ = objc.registerName("forwardInvocation:");
final _objc_msgSend_226 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_methodSignatureForSelector_ =
    objc.registerName("methodSignatureForSelector:");
final _objc_msgSend_227 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_dealloc = objc.registerName("dealloc");
late final _sel_finalize = objc.registerName("finalize");
late final _sel_debugDescription = objc.registerName("debugDescription");
late final _sel_respondsToSelector_ = objc.registerName("respondsToSelector:");
final _objc_msgSend_228 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        bool Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_allowsWeakReference = objc.registerName("allowsWeakReference");
late final _sel_retainWeakReference = objc.registerName("retainWeakReference");
late final _sel_proxyWithTarget_connection_ =
    objc.registerName("proxyWithTarget:connection:");
final _objc_msgSend_229 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_initWithTarget_connection_ =
    objc.registerName("initWithTarget:connection:");
late final _sel_proxyWithLocal_connection_ =
    objc.registerName("proxyWithLocal:connection:");
final _objc_msgSend_230 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_initWithLocal_connection_ =
    objc.registerName("initWithLocal:connection:");
late final _sel_initWithCoder_ = objc.registerName("initWithCoder:");
final _objc_msgSend_231 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_setProtocolForProxy_ =
    objc.registerName("setProtocolForProxy:");
final _objc_msgSend_232 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_connectionForProxy = objc.registerName("connectionForProxy");
late final _sel_rootProxyForConnectionWithRegisteredName_host_ =
    objc.registerName("rootProxyForConnectionWithRegisteredName:host:");
final _objc_msgSend_233 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_rootProxyForConnectionWithRegisteredName_host_usingNameServer_ =
    objc.registerName(
        "rootProxyForConnectionWithRegisteredName:host:usingNameServer:");
final _objc_msgSend_234 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_serviceConnectionWithName_rootObject_usingNameServer_ =
    objc.registerName("serviceConnectionWithName:rootObject:usingNameServer:");
final _objc_msgSend_235 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_serviceConnectionWithName_rootObject_ =
    objc.registerName("serviceConnectionWithName:rootObject:");
final _objc_msgSend_236 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_requestTimeout = objc.registerName("requestTimeout");
late final _sel_setRequestTimeout_ = objc.registerName("setRequestTimeout:");
late final _sel_replyTimeout = objc.registerName("replyTimeout");
late final _sel_setReplyTimeout_ = objc.registerName("setReplyTimeout:");
late final _sel_rootObject = objc.registerName("rootObject");
late final _sel_setRootObject_ = objc.registerName("setRootObject:");
late final _sel_independentConversationQueueing =
    objc.registerName("independentConversationQueueing");
late final _sel_setIndependentConversationQueueing_ =
    objc.registerName("setIndependentConversationQueueing:");
late final _sel_rootProxy = objc.registerName("rootProxy");
final _objc_msgSend_237 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_addRequestMode_ = objc.registerName("addRequestMode:");
late final _sel_removeRequestMode_ = objc.registerName("removeRequestMode:");
late final _sel_requestModes = objc.registerName("requestModes");
late final _sel_registerName_ = objc.registerName("registerName:");
final _objc_msgSend_238 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        bool Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_registerName_withNameServer_ =
    objc.registerName("registerName:withNameServer:");
final _objc_msgSend_239 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_connectionWithReceivePort_sendPort_ =
    objc.registerName("connectionWithReceivePort:sendPort:");
final _objc_msgSend_240 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_currentConversation = objc.registerName("currentConversation");
late final _sel_initWithReceivePort_sendPort_ =
    objc.registerName("initWithReceivePort:sendPort:");
late final _sel_sendPort = objc.registerName("sendPort");
late final _sel_receivePort = objc.registerName("receivePort");
late final _sel_enableMultipleThreads =
    objc.registerName("enableMultipleThreads");
late final _sel_multipleThreadsEnabled =
    objc.registerName("multipleThreadsEnabled");
late final _sel_addRunLoop_ = objc.registerName("addRunLoop:");
final _objc_msgSend_241 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_removeRunLoop_ = objc.registerName("removeRunLoop:");
late final _sel_runInNewThread = objc.registerName("runInNewThread");
late final _sel_remoteObjects = objc.registerName("remoteObjects");
late final _sel_localObjects = objc.registerName("localObjects");
late final _sel_dispatchWithComponents_ =
    objc.registerName("dispatchWithComponents:");
final _objc_msgSend_242 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_addConnection_toRunLoop_forMode_ =
    objc.registerName("addConnection:toRunLoop:forMode:");
final _objc_msgSend_243 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_removeConnection_fromRunLoop_forMode_ =
    objc.registerName("removeConnection:fromRunLoop:forMode:");
late final _sel_addPort_forMode_ = objc.registerName("addPort:forMode:");
final _objc_msgSend_244 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_removePort_forMode_ = objc.registerName("removePort:forMode:");
late final _sel_limitDateForMode_ = objc.registerName("limitDateForMode:");
late final _sel_acceptInputForMode_beforeDate_ =
    objc.registerName("acceptInputForMode:beforeDate:");
final _objc_msgSend_245 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_run = objc.registerName("run");
late final _sel_runUntilDate_ = objc.registerName("runUntilDate:");
final _objc_msgSend_246 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_runMode_beforeDate_ = objc.registerName("runMode:beforeDate:");
final _objc_msgSend_247 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_configureAsServer = objc.registerName("configureAsServer");
void _ObjCBlock_ffiVoid_fnPtrTrampoline(
  ffi.Pointer<objc.ObjCBlock> block,
) =>
    block.ref.target
        .cast<ffi.NativeFunction<ffi.Void Function()>>()
        .asFunction<void Function()>()();
final _ObjCBlock_ffiVoid_closureRegistry = <int, void Function()>{};
int _ObjCBlock_ffiVoid_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void> _ObjCBlock_ffiVoid_registerClosure(void Function() fn) {
  final id = ++_ObjCBlock_ffiVoid_closureRegistryIndex;
  _ObjCBlock_ffiVoid_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

void _ObjCBlock_ffiVoid_closureTrampoline(
  ffi.Pointer<objc.ObjCBlock> block,
) =>
    _ObjCBlock_ffiVoid_closureRegistry[block.ref.target.address]!();

class ObjCBlock_ffiVoid extends objc.ObjCBlockBase {
  ObjCBlock_ffiVoid._(ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false, bool release = true})
      : super(pointer, retain: retain, release: release);

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_ffiVoid castFromPointer(ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false, bool release = false}) {
    return ObjCBlock_ffiVoid._(pointer, retain: retain, release: release);
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid.fromFunctionPointer(
      ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> ptr)
      : this._(objc.newBlock(
            _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(ffi.Pointer<objc.ObjCBlock>)>(
                    _ObjCBlock_ffiVoid_fnPtrTrampoline)
                .cast(),
            ptr.cast()));
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid.fromFunction(void Function() fn)
      : this._(objc.newBlock(
            _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(ffi.Pointer<objc.ObjCBlock>)>(
                    _ObjCBlock_ffiVoid_closureTrampoline)
                .cast(),
            _ObjCBlock_ffiVoid_registerClosure(() => fn())));
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid.listener(void Function() fn)
      : this._(objc.newBlock(
            (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                        ffi.Void Function(
                            ffi.Pointer<objc.ObjCBlock>)>.listener(
                    _ObjCBlock_ffiVoid_closureTrampoline)
                  ..keepIsolateAlive = false)
                .nativeFunction
                .cast(),
            _ObjCBlock_ffiVoid_registerClosure(() => fn())));
  static ffi.NativeCallable<ffi.Void Function(ffi.Pointer<objc.ObjCBlock>)>?
      _dartFuncListenerTrampoline;

  void call() => pointer.ref.invoke
          .cast<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<objc.ObjCBlock> block)>>()
          .asFunction<void Function(ffi.Pointer<objc.ObjCBlock>)>()(
        pointer,
      );
}

late final _sel_performInModes_block_ =
    objc.registerName("performInModes:block:");
final _objc_msgSend_248 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCBlock>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCBlock>)>();
late final _sel_performBlock_ = objc.registerName("performBlock:");
final _objc_msgSend_249 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCBlock>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCBlock>)>();
late final _sel_performSelector_target_argument_order_modes_ =
    objc.registerName("performSelector:target:argument:order:modes:");
final _objc_msgSend_250 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.UnsignedLong,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_cancelPerformSelector_target_argument_ =
    objc.registerName("cancelPerformSelector:target:argument:");
final _objc_msgSend_251 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_cancelPerformSelectorsWithTarget_ =
    objc.registerName("cancelPerformSelectorsWithTarget:");

class NSFileHandle extends objc.NSObject {
  NSFileHandle._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSFileHandle] that points to the same underlying object as [other].
  NSFileHandle.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSFileHandle] that wraps the given raw object pointer.
  NSFileHandle.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSFileHandle].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSFileHandle);
  }

  objc.NSData get availableData {
    final _ret = _objc_msgSend_104(this.pointer, _sel_availableData);
    return objc.NSData.castFromPointer(_ret, retain: true, release: true);
  }

  NSFileHandle initWithFileDescriptor_closeOnDealloc_(int fd, bool closeopt) {
    final _ret = _objc_msgSend_252(this.pointer,
        _sel_initWithFileDescriptor_closeOnDealloc_, fd, closeopt);
    return NSFileHandle.castFromPointer(_ret, retain: true, release: true);
  }

  NSFileHandle? initWithCoder_(objc.NSCoder coder) {
    final _ret =
        _objc_msgSend_231(this.pointer, _sel_initWithCoder_, coder.pointer);
    return _ret.address == 0
        ? null
        : NSFileHandle.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSData? readDataToEndOfFileAndReturnError_(
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    final _ret = _objc_msgSend_253(
        this.pointer, _sel_readDataToEndOfFileAndReturnError_, error);
    return _ret.address == 0
        ? null
        : objc.NSData.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSData? readDataUpToLength_error_(
      int length, ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    final _ret = _objc_msgSend_254(
        this.pointer, _sel_readDataUpToLength_error_, length, error);
    return _ret.address == 0
        ? null
        : objc.NSData.castFromPointer(_ret, retain: true, release: true);
  }

  bool writeData_error_(
      objc.NSData data, ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    return _objc_msgSend_255(
        this.pointer, _sel_writeData_error_, data.pointer, error);
  }

  bool getOffset_error_(ffi.Pointer<ffi.UnsignedLongLong> offsetInFile,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    return _objc_msgSend_256(
        this.pointer, _sel_getOffset_error_, offsetInFile, error);
  }

  bool seekToEndReturningOffset_error_(
      ffi.Pointer<ffi.UnsignedLongLong> offsetInFile,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    return _objc_msgSend_256(this.pointer, _sel_seekToEndReturningOffset_error_,
        offsetInFile, error);
  }

  bool seekToOffset_error_(
      int offset, ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    return _objc_msgSend_257(
        this.pointer, _sel_seekToOffset_error_, offset, error);
  }

  bool truncateAtOffset_error_(
      int offset, ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    return _objc_msgSend_257(
        this.pointer, _sel_truncateAtOffset_error_, offset, error);
  }

  bool synchronizeAndReturnError_(
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    return _objc_msgSend_8(
        this.pointer, _sel_synchronizeAndReturnError_, error);
  }

  bool closeAndReturnError_(ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    return _objc_msgSend_8(this.pointer, _sel_closeAndReturnError_, error);
  }

  static NSFileHandle getFileHandleWithStandardInput() {
    final _ret = _objc_msgSend_258(
        _class_NSFileHandle, _sel_fileHandleWithStandardInput);
    return NSFileHandle.castFromPointer(_ret, retain: true, release: true);
  }

  static NSFileHandle getFileHandleWithStandardOutput() {
    final _ret = _objc_msgSend_258(
        _class_NSFileHandle, _sel_fileHandleWithStandardOutput);
    return NSFileHandle.castFromPointer(_ret, retain: true, release: true);
  }

  static NSFileHandle getFileHandleWithStandardError() {
    final _ret = _objc_msgSend_258(
        _class_NSFileHandle, _sel_fileHandleWithStandardError);
    return NSFileHandle.castFromPointer(_ret, retain: true, release: true);
  }

  static NSFileHandle getFileHandleWithNullDevice() {
    final _ret =
        _objc_msgSend_258(_class_NSFileHandle, _sel_fileHandleWithNullDevice);
    return NSFileHandle.castFromPointer(_ret, retain: true, release: true);
  }

  static NSFileHandle? fileHandleForReadingAtPath_(objc.NSString path) {
    final _ret = _objc_msgSend_2(
        _class_NSFileHandle, _sel_fileHandleForReadingAtPath_, path.pointer);
    return _ret.address == 0
        ? null
        : NSFileHandle.castFromPointer(_ret, retain: true, release: true);
  }

  static NSFileHandle? fileHandleForWritingAtPath_(objc.NSString path) {
    final _ret = _objc_msgSend_2(
        _class_NSFileHandle, _sel_fileHandleForWritingAtPath_, path.pointer);
    return _ret.address == 0
        ? null
        : NSFileHandle.castFromPointer(_ret, retain: true, release: true);
  }

  static NSFileHandle? fileHandleForUpdatingAtPath_(objc.NSString path) {
    final _ret = _objc_msgSend_2(
        _class_NSFileHandle, _sel_fileHandleForUpdatingAtPath_, path.pointer);
    return _ret.address == 0
        ? null
        : NSFileHandle.castFromPointer(_ret, retain: true, release: true);
  }

  static NSFileHandle? fileHandleForReadingFromURL_error_(
      objc.NSURL url, ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    final _ret = _objc_msgSend_259(_class_NSFileHandle,
        _sel_fileHandleForReadingFromURL_error_, url.pointer, error);
    return _ret.address == 0
        ? null
        : NSFileHandle.castFromPointer(_ret, retain: true, release: true);
  }

  static NSFileHandle? fileHandleForWritingToURL_error_(
      objc.NSURL url, ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    final _ret = _objc_msgSend_259(_class_NSFileHandle,
        _sel_fileHandleForWritingToURL_error_, url.pointer, error);
    return _ret.address == 0
        ? null
        : NSFileHandle.castFromPointer(_ret, retain: true, release: true);
  }

  static NSFileHandle? fileHandleForUpdatingURL_error_(
      objc.NSURL url, ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    final _ret = _objc_msgSend_259(_class_NSFileHandle,
        _sel_fileHandleForUpdatingURL_error_, url.pointer, error);
    return _ret.address == 0
        ? null
        : NSFileHandle.castFromPointer(_ret, retain: true, release: true);
  }

  void readInBackgroundAndNotifyForModes_(objc.NSArray? modes) {
    _objc_msgSend_260(this.pointer, _sel_readInBackgroundAndNotifyForModes_,
        modes?.pointer ?? ffi.nullptr);
  }

  void readInBackgroundAndNotify() {
    _objc_msgSend_82(this.pointer, _sel_readInBackgroundAndNotify);
  }

  void readToEndOfFileInBackgroundAndNotifyForModes_(objc.NSArray? modes) {
    _objc_msgSend_260(
        this.pointer,
        _sel_readToEndOfFileInBackgroundAndNotifyForModes_,
        modes?.pointer ?? ffi.nullptr);
  }

  void readToEndOfFileInBackgroundAndNotify() {
    _objc_msgSend_82(this.pointer, _sel_readToEndOfFileInBackgroundAndNotify);
  }

  void acceptConnectionInBackgroundAndNotifyForModes_(objc.NSArray? modes) {
    _objc_msgSend_260(
        this.pointer,
        _sel_acceptConnectionInBackgroundAndNotifyForModes_,
        modes?.pointer ?? ffi.nullptr);
  }

  void acceptConnectionInBackgroundAndNotify() {
    _objc_msgSend_82(this.pointer, _sel_acceptConnectionInBackgroundAndNotify);
  }

  void waitForDataInBackgroundAndNotifyForModes_(objc.NSArray? modes) {
    _objc_msgSend_260(
        this.pointer,
        _sel_waitForDataInBackgroundAndNotifyForModes_,
        modes?.pointer ?? ffi.nullptr);
  }

  void waitForDataInBackgroundAndNotify() {
    _objc_msgSend_82(this.pointer, _sel_waitForDataInBackgroundAndNotify);
  }

  ObjCBlock_ffiVoid_NSFileHandle? get readabilityHandler {
    final _ret = _objc_msgSend_261(this.pointer, _sel_readabilityHandler);
    return _ret.address == 0
        ? null
        : ObjCBlock_ffiVoid_NSFileHandle.castFromPointer(_ret,
            retain: true, release: true);
  }

  set readabilityHandler(ObjCBlock_ffiVoid_NSFileHandle? value) {
    return _objc_msgSend_262(this.pointer, _sel_setReadabilityHandler_,
        value?.pointer ?? ffi.nullptr);
  }

  ObjCBlock_ffiVoid_NSFileHandle? get writeabilityHandler {
    final _ret = _objc_msgSend_261(this.pointer, _sel_writeabilityHandler);
    return _ret.address == 0
        ? null
        : ObjCBlock_ffiVoid_NSFileHandle.castFromPointer(_ret,
            retain: true, release: true);
  }

  set writeabilityHandler(ObjCBlock_ffiVoid_NSFileHandle? value) {
    return _objc_msgSend_262(this.pointer, _sel_setWriteabilityHandler_,
        value?.pointer ?? ffi.nullptr);
  }

  NSFileHandle initWithFileDescriptor_(int fd) {
    final _ret =
        _objc_msgSend_263(this.pointer, _sel_initWithFileDescriptor_, fd);
    return NSFileHandle.castFromPointer(_ret, retain: true, release: true);
  }

  int get fileDescriptor {
    return _objc_msgSend_264(this.pointer, _sel_fileDescriptor);
  }

  objc.NSData readDataToEndOfFile() {
    final _ret = _objc_msgSend_104(this.pointer, _sel_readDataToEndOfFile);
    return objc.NSData.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSData readDataOfLength_(int length) {
    final _ret =
        _objc_msgSend_265(this.pointer, _sel_readDataOfLength_, length);
    return objc.NSData.castFromPointer(_ret, retain: true, release: true);
  }

  void writeData_(objc.NSData data) {
    _objc_msgSend_266(this.pointer, _sel_writeData_, data.pointer);
  }

  int get offsetInFile {
    return _objc_msgSend_267(this.pointer, _sel_offsetInFile);
  }

  int seekToEndOfFile() {
    return _objc_msgSend_267(this.pointer, _sel_seekToEndOfFile);
  }

  void seekToFileOffset_(int offset) {
    _objc_msgSend_268(this.pointer, _sel_seekToFileOffset_, offset);
  }

  void truncateFileAtOffset_(int offset) {
    _objc_msgSend_268(this.pointer, _sel_truncateFileAtOffset_, offset);
  }

  void synchronizeFile() {
    _objc_msgSend_82(this.pointer, _sel_synchronizeFile);
  }

  void closeFile() {
    _objc_msgSend_82(this.pointer, _sel_closeFile);
  }

  @override
  NSFileHandle init() {
    final _ret = _objc_msgSend_40(this.pointer, _sel_init);
    return NSFileHandle.castFromPointer(_ret, retain: true, release: true);
  }

  static NSFileHandle new1() {
    final _ret = _objc_msgSend_40(_class_NSFileHandle, _sel_new);
    return NSFileHandle.castFromPointer(_ret, retain: false, release: true);
  }

  static NSFileHandle allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_47(_class_NSFileHandle, _sel_allocWithZone_, zone);
    return NSFileHandle.castFromPointer(_ret, retain: false, release: true);
  }

  static NSFileHandle alloc() {
    final _ret = _objc_msgSend_40(_class_NSFileHandle, _sel_alloc);
    return NSFileHandle.castFromPointer(_ret, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.NSObject aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.NSObject? anArgument) {
    _objc_msgSend_48(
        _class_NSFileHandle,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  static void cancelPreviousPerformRequestsWithTarget_(objc.NSObject aTarget) {
    _objc_msgSend_49(_class_NSFileHandle,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_7(
        _class_NSFileHandle, _sel_accessInstanceVariablesDirectly);
  }

  static bool useStoredAccessor() {
    return _objc_msgSend_7(_class_NSFileHandle, _sel_useStoredAccessor);
  }

  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_50(_class_NSFileHandle,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_51(_class_NSFileHandle,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_52(
        _class_NSFileHandle,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_6(
        _class_NSFileHandle, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSObject classForKeyedUnarchiver() {
    final _ret =
        _objc_msgSend_40(_class_NSFileHandle, _sel_classForKeyedUnarchiver);
    return objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }
}

late final _class_NSFileHandle = objc.getClass("NSFileHandle");
late final _sel_availableData = objc.registerName("availableData");
late final _sel_initWithFileDescriptor_closeOnDealloc_ =
    objc.registerName("initWithFileDescriptor:closeOnDealloc:");
final _objc_msgSend_252 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Int, ffi.Bool)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int, bool)>();
late final _sel_readDataToEndOfFileAndReturnError_ =
    objc.registerName("readDataToEndOfFileAndReturnError:");
final _objc_msgSend_253 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_readDataUpToLength_error_ =
    objc.registerName("readDataUpToLength:error:");
final _objc_msgSend_254 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.UnsignedLong,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_writeData_error_ = objc.registerName("writeData:error:");
final _objc_msgSend_255 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_getOffset_error_ = objc.registerName("getOffset:error:");
final _objc_msgSend_256 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<ffi.UnsignedLongLong>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<ffi.UnsignedLongLong>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_seekToEndReturningOffset_error_ =
    objc.registerName("seekToEndReturningOffset:error:");
late final _sel_seekToOffset_error_ = objc.registerName("seekToOffset:error:");
final _objc_msgSend_257 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.UnsignedLongLong,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_truncateAtOffset_error_ =
    objc.registerName("truncateAtOffset:error:");
late final _sel_synchronizeAndReturnError_ =
    objc.registerName("synchronizeAndReturnError:");
late final _sel_closeAndReturnError_ =
    objc.registerName("closeAndReturnError:");
late final _sel_fileHandleWithStandardInput =
    objc.registerName("fileHandleWithStandardInput");
final _objc_msgSend_258 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_fileHandleWithStandardOutput =
    objc.registerName("fileHandleWithStandardOutput");
late final _sel_fileHandleWithStandardError =
    objc.registerName("fileHandleWithStandardError");
late final _sel_fileHandleWithNullDevice =
    objc.registerName("fileHandleWithNullDevice");
late final _sel_fileHandleForReadingAtPath_ =
    objc.registerName("fileHandleForReadingAtPath:");
late final _sel_fileHandleForWritingAtPath_ =
    objc.registerName("fileHandleForWritingAtPath:");
late final _sel_fileHandleForUpdatingAtPath_ =
    objc.registerName("fileHandleForUpdatingAtPath:");
late final _sel_fileHandleForReadingFromURL_error_ =
    objc.registerName("fileHandleForReadingFromURL:error:");
final _objc_msgSend_259 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_fileHandleForWritingToURL_error_ =
    objc.registerName("fileHandleForWritingToURL:error:");
late final _sel_fileHandleForUpdatingURL_error_ =
    objc.registerName("fileHandleForUpdatingURL:error:");
late final _sel_readInBackgroundAndNotifyForModes_ =
    objc.registerName("readInBackgroundAndNotifyForModes:");
final _objc_msgSend_260 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_readInBackgroundAndNotify =
    objc.registerName("readInBackgroundAndNotify");
late final _sel_readToEndOfFileInBackgroundAndNotifyForModes_ =
    objc.registerName("readToEndOfFileInBackgroundAndNotifyForModes:");
late final _sel_readToEndOfFileInBackgroundAndNotify =
    objc.registerName("readToEndOfFileInBackgroundAndNotify");
late final _sel_acceptConnectionInBackgroundAndNotifyForModes_ =
    objc.registerName("acceptConnectionInBackgroundAndNotifyForModes:");
late final _sel_acceptConnectionInBackgroundAndNotify =
    objc.registerName("acceptConnectionInBackgroundAndNotify");
late final _sel_waitForDataInBackgroundAndNotifyForModes_ =
    objc.registerName("waitForDataInBackgroundAndNotifyForModes:");
late final _sel_waitForDataInBackgroundAndNotify =
    objc.registerName("waitForDataInBackgroundAndNotify");
void _ObjCBlock_ffiVoid_NSFileHandle_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlock> block, ffi.Pointer<objc.ObjCObject> arg0) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0)>>()
        .asFunction<void Function(ffi.Pointer<objc.ObjCObject>)>()(arg0);
final _ObjCBlock_ffiVoid_NSFileHandle_closureRegistry =
    <int, void Function(ffi.Pointer<objc.ObjCObject>)>{};
int _ObjCBlock_ffiVoid_NSFileHandle_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void> _ObjCBlock_ffiVoid_NSFileHandle_registerClosure(
    void Function(ffi.Pointer<objc.ObjCObject>) fn) {
  final id = ++_ObjCBlock_ffiVoid_NSFileHandle_closureRegistryIndex;
  _ObjCBlock_ffiVoid_NSFileHandle_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

void _ObjCBlock_ffiVoid_NSFileHandle_closureTrampoline(
        ffi.Pointer<objc.ObjCBlock> block, ffi.Pointer<objc.ObjCObject> arg0) =>
    _ObjCBlock_ffiVoid_NSFileHandle_closureRegistry[block.ref.target.address]!(
        arg0);

class ObjCBlock_ffiVoid_NSFileHandle extends objc.ObjCBlockBase {
  ObjCBlock_ffiVoid_NSFileHandle._(ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false, bool release = true})
      : super(pointer, retain: retain, release: release);

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_ffiVoid_NSFileHandle castFromPointer(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = false}) {
    return ObjCBlock_ffiVoid_NSFileHandle._(pointer,
        retain: retain, release: release);
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSFileHandle.fromFunctionPointer(
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0)>>
          ptr)
      : this._(objc.newBlock(
            _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<objc.ObjCObject>)>(
                    _ObjCBlock_ffiVoid_NSFileHandle_fnPtrTrampoline)
                .cast(),
            ptr.cast()));
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSFileHandle.fromFunction(void Function(NSFileHandle) fn)
      : this._(objc.newBlock(
            _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<objc.ObjCObject>)>(
                    _ObjCBlock_ffiVoid_NSFileHandle_closureTrampoline)
                .cast(),
            _ObjCBlock_ffiVoid_NSFileHandle_registerClosure(
                (ffi.Pointer<objc.ObjCObject> arg0) => fn(
                    NSFileHandle.castFromPointer(arg0,
                        retain: true, release: true)))));
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_NSFileHandle.listener(void Function(NSFileHandle) fn)
      : this._(objc.newBlock(
            (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                        ffi.Void Function(ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<objc.ObjCObject>)>.listener(
                    _ObjCBlock_ffiVoid_NSFileHandle_closureTrampoline)
                  ..keepIsolateAlive = false)
                .nativeFunction
                .cast(),
            _ObjCBlock_ffiVoid_NSFileHandle_registerClosure(
                (ffi.Pointer<objc.ObjCObject> arg0) => fn(
                    NSFileHandle.castFromPointer(arg0,
                        retain: true, release: true)))));
  static ffi.NativeCallable<
          ffi.Void Function(
              ffi.Pointer<objc.ObjCBlock>, ffi.Pointer<objc.ObjCObject>)>?
      _dartFuncListenerTrampoline;

  void call(NSFileHandle arg0) => pointer.ref.invoke
      .cast<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<objc.ObjCBlock> block,
                  ffi.Pointer<objc.ObjCObject> arg0)>>()
      .asFunction<
          void Function(ffi.Pointer<objc.ObjCBlock>,
              ffi.Pointer<objc.ObjCObject>)>()(pointer, arg0.pointer);
}

late final _sel_readabilityHandler = objc.registerName("readabilityHandler");
final _objc_msgSend_261 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCBlock> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCBlock> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setReadabilityHandler_ =
    objc.registerName("setReadabilityHandler:");
final _objc_msgSend_262 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCBlock>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCBlock>)>();
late final _sel_writeabilityHandler = objc.registerName("writeabilityHandler");
late final _sel_setWriteabilityHandler_ =
    objc.registerName("setWriteabilityHandler:");
late final _sel_initWithFileDescriptor_ =
    objc.registerName("initWithFileDescriptor:");
final _objc_msgSend_263 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Int)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_fileDescriptor = objc.registerName("fileDescriptor");
final _objc_msgSend_264 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Int Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_readDataToEndOfFile = objc.registerName("readDataToEndOfFile");
late final _sel_readDataOfLength_ = objc.registerName("readDataOfLength:");
final _objc_msgSend_265 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedLong)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_writeData_ = objc.registerName("writeData:");
final _objc_msgSend_266 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_offsetInFile = objc.registerName("offsetInFile");
final _objc_msgSend_267 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLongLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_seekToEndOfFile = objc.registerName("seekToEndOfFile");
late final _sel_seekToFileOffset_ = objc.registerName("seekToFileOffset:");
final _objc_msgSend_268 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedLongLong)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_truncateFileAtOffset_ =
    objc.registerName("truncateFileAtOffset:");
late final _sel_synchronizeFile = objc.registerName("synchronizeFile");
late final _sel_closeFile = objc.registerName("closeFile");

abstract class NSURLBookmarkCreationOptions {
  static const int NSURLBookmarkCreationPreferFileIDResolution = 256;
  static const int NSURLBookmarkCreationMinimalBookmark = 512;
  static const int NSURLBookmarkCreationSuitableForBookmarkFile = 1024;
  static const int NSURLBookmarkCreationWithSecurityScope = 2048;
  static const int NSURLBookmarkCreationSecurityScopeAllowOnlyReadAccess = 4096;
  static const int NSURLBookmarkCreationWithoutImplicitSecurityScope =
      536870912;
}

abstract class NSURLBookmarkResolutionOptions {
  static const int NSURLBookmarkResolutionWithoutUI = 256;
  static const int NSURLBookmarkResolutionWithoutMounting = 512;
  static const int NSURLBookmarkResolutionWithSecurityScope = 1024;
  static const int NSURLBookmarkResolutionWithoutImplicitStartAccessing = 32768;
}

class NSFileManager extends objc.NSObject {
  NSFileManager._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSFileManager] that points to the same underlying object as [other].
  NSFileManager.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSFileManager] that wraps the given raw object pointer.
  NSFileManager.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSFileManager].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSFileManager);
  }

  static NSFileManager getDefaultManager() {
    final _ret = _objc_msgSend_269(_class_NSFileManager, _sel_defaultManager);
    return NSFileManager.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSArray? mountedVolumeURLsIncludingResourceValuesForKeys_options_(
      objc.NSArray? propertyKeys, int options) {
    final _ret = _objc_msgSend_270(
        this.pointer,
        _sel_mountedVolumeURLsIncludingResourceValuesForKeys_options_,
        propertyKeys?.pointer ?? ffi.nullptr,
        options);
    return _ret.address == 0
        ? null
        : objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  void unmountVolumeAtURL_options_completionHandler_(
      objc.NSURL url, int mask, ObjCBlock_ffiVoid_NSError completionHandler) {
    _objc_msgSend_271(
        this.pointer,
        _sel_unmountVolumeAtURL_options_completionHandler_,
        url.pointer,
        mask,
        completionHandler.pointer);
  }

  objc.NSArray?
      contentsOfDirectoryAtURL_includingPropertiesForKeys_options_error_(
          objc.NSURL url,
          objc.NSArray? keys,
          int mask,
          ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    final _ret = _objc_msgSend_272(
        this.pointer,
        _sel_contentsOfDirectoryAtURL_includingPropertiesForKeys_options_error_,
        url.pointer,
        keys?.pointer ?? ffi.nullptr,
        mask,
        error);
    return _ret.address == 0
        ? null
        : objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSArray URLsForDirectory_inDomains_(int directory, int domainMask) {
    final _ret = _objc_msgSend_273(
        this.pointer, _sel_URLsForDirectory_inDomains_, directory, domainMask);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSURL? URLForDirectory_inDomain_appropriateForURL_create_error_(
      int directory,
      int domain,
      objc.NSURL? url,
      bool shouldCreate,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    final _ret = _objc_msgSend_274(
        this.pointer,
        _sel_URLForDirectory_inDomain_appropriateForURL_create_error_,
        directory,
        domain,
        url?.pointer ?? ffi.nullptr,
        shouldCreate,
        error);
    return _ret.address == 0
        ? null
        : objc.NSURL.castFromPointer(_ret, retain: true, release: true);
  }

  bool getRelationship_ofDirectoryAtURL_toItemAtURL_error_(
      ffi.Pointer<ffi.Int32> outRelationship,
      objc.NSURL directoryURL,
      objc.NSURL otherURL,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    return _objc_msgSend_275(
        this.pointer,
        _sel_getRelationship_ofDirectoryAtURL_toItemAtURL_error_,
        outRelationship,
        directoryURL.pointer,
        otherURL.pointer,
        error);
  }

  bool getRelationship_ofDirectory_inDomain_toItemAtURL_error_(
      ffi.Pointer<ffi.Int32> outRelationship,
      int directory,
      int domainMask,
      objc.NSURL url,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    return _objc_msgSend_276(
        this.pointer,
        _sel_getRelationship_ofDirectory_inDomain_toItemAtURL_error_,
        outRelationship,
        directory,
        domainMask,
        url.pointer,
        error);
  }

  bool createDirectoryAtURL_withIntermediateDirectories_attributes_error_(
      objc.NSURL url,
      bool createIntermediates,
      objc.NSDictionary? attributes,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    return _objc_msgSend_277(
        this.pointer,
        _sel_createDirectoryAtURL_withIntermediateDirectories_attributes_error_,
        url.pointer,
        createIntermediates,
        attributes?.pointer ?? ffi.nullptr,
        error);
  }

  bool createSymbolicLinkAtURL_withDestinationURL_error_(objc.NSURL url,
      objc.NSURL destURL, ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    return _objc_msgSend_278(
        this.pointer,
        _sel_createSymbolicLinkAtURL_withDestinationURL_error_,
        url.pointer,
        destURL.pointer,
        error);
  }

  objc.NSObject? get delegate {
    final _ret = _objc_msgSend_66(this.pointer, _sel_delegate);
    return _ret.address == 0
        ? null
        : objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }

  set delegate(objc.NSObject? value) {
    return _objc_msgSend_188(
        this.pointer, _sel_setDelegate_, value?.pointer ?? ffi.nullptr);
  }

  bool setAttributes_ofItemAtPath_error_(objc.NSDictionary attributes,
      objc.NSString path, ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    return _objc_msgSend_279(
        this.pointer,
        _sel_setAttributes_ofItemAtPath_error_,
        attributes.pointer,
        path.pointer,
        error);
  }

  bool createDirectoryAtPath_withIntermediateDirectories_attributes_error_(
      objc.NSString path,
      bool createIntermediates,
      objc.NSDictionary? attributes,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    return _objc_msgSend_280(
        this.pointer,
        _sel_createDirectoryAtPath_withIntermediateDirectories_attributes_error_,
        path.pointer,
        createIntermediates,
        attributes?.pointer ?? ffi.nullptr,
        error);
  }

  objc.NSArray? contentsOfDirectoryAtPath_error_(
      objc.NSString path, ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    final _ret = _objc_msgSend_281(this.pointer,
        _sel_contentsOfDirectoryAtPath_error_, path.pointer, error);
    return _ret.address == 0
        ? null
        : objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSArray? subpathsOfDirectoryAtPath_error_(
      objc.NSString path, ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    final _ret = _objc_msgSend_281(this.pointer,
        _sel_subpathsOfDirectoryAtPath_error_, path.pointer, error);
    return _ret.address == 0
        ? null
        : objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSDictionary? attributesOfItemAtPath_error_(
      objc.NSString path, ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    final _ret = _objc_msgSend_282(
        this.pointer, _sel_attributesOfItemAtPath_error_, path.pointer, error);
    return _ret.address == 0
        ? null
        : objc.NSDictionary.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSDictionary? attributesOfFileSystemForPath_error_(
      objc.NSString path, ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    final _ret = _objc_msgSend_282(this.pointer,
        _sel_attributesOfFileSystemForPath_error_, path.pointer, error);
    return _ret.address == 0
        ? null
        : objc.NSDictionary.castFromPointer(_ret, retain: true, release: true);
  }

  bool createSymbolicLinkAtPath_withDestinationPath_error_(objc.NSString path,
      objc.NSString destPath, ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    return _objc_msgSend_283(
        this.pointer,
        _sel_createSymbolicLinkAtPath_withDestinationPath_error_,
        path.pointer,
        destPath.pointer,
        error);
  }

  objc.NSString? destinationOfSymbolicLinkAtPath_error_(
      objc.NSString path, ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    final _ret = _objc_msgSend_284(this.pointer,
        _sel_destinationOfSymbolicLinkAtPath_error_, path.pointer, error);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  bool copyItemAtPath_toPath_error_(objc.NSString srcPath,
      objc.NSString dstPath, ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    return _objc_msgSend_283(this.pointer, _sel_copyItemAtPath_toPath_error_,
        srcPath.pointer, dstPath.pointer, error);
  }

  bool moveItemAtPath_toPath_error_(objc.NSString srcPath,
      objc.NSString dstPath, ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    return _objc_msgSend_283(this.pointer, _sel_moveItemAtPath_toPath_error_,
        srcPath.pointer, dstPath.pointer, error);
  }

  bool linkItemAtPath_toPath_error_(objc.NSString srcPath,
      objc.NSString dstPath, ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    return _objc_msgSend_283(this.pointer, _sel_linkItemAtPath_toPath_error_,
        srcPath.pointer, dstPath.pointer, error);
  }

  bool removeItemAtPath_error_(
      objc.NSString path, ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    return _objc_msgSend_285(
        this.pointer, _sel_removeItemAtPath_error_, path.pointer, error);
  }

  bool copyItemAtURL_toURL_error_(objc.NSURL srcURL, objc.NSURL dstURL,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    return _objc_msgSend_278(this.pointer, _sel_copyItemAtURL_toURL_error_,
        srcURL.pointer, dstURL.pointer, error);
  }

  bool moveItemAtURL_toURL_error_(objc.NSURL srcURL, objc.NSURL dstURL,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    return _objc_msgSend_278(this.pointer, _sel_moveItemAtURL_toURL_error_,
        srcURL.pointer, dstURL.pointer, error);
  }

  bool linkItemAtURL_toURL_error_(objc.NSURL srcURL, objc.NSURL dstURL,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    return _objc_msgSend_278(this.pointer, _sel_linkItemAtURL_toURL_error_,
        srcURL.pointer, dstURL.pointer, error);
  }

  bool removeItemAtURL_error_(
      objc.NSURL URL, ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    return _objc_msgSend_286(
        this.pointer, _sel_removeItemAtURL_error_, URL.pointer, error);
  }

  bool trashItemAtURL_resultingItemURL_error_(
      objc.NSURL url,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outResultingURL,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    return _objc_msgSend_287(
        this.pointer,
        _sel_trashItemAtURL_resultingItemURL_error_,
        url.pointer,
        outResultingURL,
        error);
  }

  objc.NSDictionary? fileAttributesAtPath_traverseLink_(
      objc.NSString path, bool yorn) {
    final _ret = _objc_msgSend_288(this.pointer,
        _sel_fileAttributesAtPath_traverseLink_, path.pointer, yorn);
    return _ret.address == 0
        ? null
        : objc.NSDictionary.castFromPointer(_ret, retain: true, release: true);
  }

  bool changeFileAttributes_atPath_(
      objc.NSDictionary attributes, objc.NSString path) {
    return _objc_msgSend_289(this.pointer, _sel_changeFileAttributes_atPath_,
        attributes.pointer, path.pointer);
  }

  objc.NSArray? directoryContentsAtPath_(objc.NSString path) {
    final _ret = _objc_msgSend_290(
        this.pointer, _sel_directoryContentsAtPath_, path.pointer);
    return _ret.address == 0
        ? null
        : objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSDictionary? fileSystemAttributesAtPath_(objc.NSString path) {
    final _ret = _objc_msgSend_291(
        this.pointer, _sel_fileSystemAttributesAtPath_, path.pointer);
    return _ret.address == 0
        ? null
        : objc.NSDictionary.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSString? pathContentOfSymbolicLinkAtPath_(objc.NSString path) {
    final _ret = _objc_msgSend_14(
        this.pointer, _sel_pathContentOfSymbolicLinkAtPath_, path.pointer);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  bool createSymbolicLinkAtPath_pathContent_(
      objc.NSString path, objc.NSString otherpath) {
    return _objc_msgSend_292(
        this.pointer,
        _sel_createSymbolicLinkAtPath_pathContent_,
        path.pointer,
        otherpath.pointer);
  }

  bool createDirectoryAtPath_attributes_(
      objc.NSString path, objc.NSDictionary attributes) {
    return _objc_msgSend_293(
        this.pointer,
        _sel_createDirectoryAtPath_attributes_,
        path.pointer,
        attributes.pointer);
  }

  bool linkPath_toPath_handler_(
      objc.NSString src, objc.NSString dest, objc.NSObject? handler) {
    return _objc_msgSend_294(this.pointer, _sel_linkPath_toPath_handler_,
        src.pointer, dest.pointer, handler?.pointer ?? ffi.nullptr);
  }

  bool copyPath_toPath_handler_(
      objc.NSString src, objc.NSString dest, objc.NSObject? handler) {
    return _objc_msgSend_294(this.pointer, _sel_copyPath_toPath_handler_,
        src.pointer, dest.pointer, handler?.pointer ?? ffi.nullptr);
  }

  bool movePath_toPath_handler_(
      objc.NSString src, objc.NSString dest, objc.NSObject? handler) {
    return _objc_msgSend_294(this.pointer, _sel_movePath_toPath_handler_,
        src.pointer, dest.pointer, handler?.pointer ?? ffi.nullptr);
  }

  bool removeFileAtPath_handler_(objc.NSString path, objc.NSObject? handler) {
    return _objc_msgSend_295(this.pointer, _sel_removeFileAtPath_handler_,
        path.pointer, handler?.pointer ?? ffi.nullptr);
  }

  objc.NSString get currentDirectoryPath {
    final _ret = _objc_msgSend_12(this.pointer, _sel_currentDirectoryPath);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  bool changeCurrentDirectoryPath_(objc.NSString path) {
    return _objc_msgSend_51(
        this.pointer, _sel_changeCurrentDirectoryPath_, path.pointer);
  }

  bool fileExistsAtPath_(objc.NSString path) {
    return _objc_msgSend_51(this.pointer, _sel_fileExistsAtPath_, path.pointer);
  }

  bool fileExistsAtPath_isDirectory_(
      objc.NSString path, ffi.Pointer<ffi.Bool> isDirectory) {
    return _objc_msgSend_296(this.pointer, _sel_fileExistsAtPath_isDirectory_,
        path.pointer, isDirectory);
  }

  bool isReadableFileAtPath_(objc.NSString path) {
    return _objc_msgSend_51(
        this.pointer, _sel_isReadableFileAtPath_, path.pointer);
  }

  bool isWritableFileAtPath_(objc.NSString path) {
    return _objc_msgSend_51(
        this.pointer, _sel_isWritableFileAtPath_, path.pointer);
  }

  bool isExecutableFileAtPath_(objc.NSString path) {
    return _objc_msgSend_51(
        this.pointer, _sel_isExecutableFileAtPath_, path.pointer);
  }

  bool isDeletableFileAtPath_(objc.NSString path) {
    return _objc_msgSend_51(
        this.pointer, _sel_isDeletableFileAtPath_, path.pointer);
  }

  bool contentsEqualAtPath_andPath_(objc.NSString path1, objc.NSString path2) {
    return _objc_msgSend_292(this.pointer, _sel_contentsEqualAtPath_andPath_,
        path1.pointer, path2.pointer);
  }

  objc.NSString displayNameAtPath_(objc.NSString path) {
    final _ret =
        _objc_msgSend_297(this.pointer, _sel_displayNameAtPath_, path.pointer);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSArray? componentsToDisplayForPath_(objc.NSString path) {
    final _ret = _objc_msgSend_290(
        this.pointer, _sel_componentsToDisplayForPath_, path.pointer);
    return _ret.address == 0
        ? null
        : objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSObject? enumeratorAtPath_(objc.NSString path) {
    final _ret =
        _objc_msgSend_2(this.pointer, _sel_enumeratorAtPath_, path.pointer);
    return _ret.address == 0
        ? null
        : objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSObject?
      enumeratorAtURL_includingPropertiesForKeys_options_errorHandler_(
          objc.NSURL url,
          objc.NSArray? keys,
          int mask,
          ObjCBlock_bool_NSURL_NSError? handler) {
    final _ret = _objc_msgSend_298(
        this.pointer,
        _sel_enumeratorAtURL_includingPropertiesForKeys_options_errorHandler_,
        url.pointer,
        keys?.pointer ?? ffi.nullptr,
        mask,
        handler?.pointer ?? ffi.nullptr);
    return _ret.address == 0
        ? null
        : objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSArray? subpathsAtPath_(objc.NSString path) {
    final _ret =
        _objc_msgSend_290(this.pointer, _sel_subpathsAtPath_, path.pointer);
    return _ret.address == 0
        ? null
        : objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSData? contentsAtPath_(objc.NSString path) {
    final _ret =
        _objc_msgSend_299(this.pointer, _sel_contentsAtPath_, path.pointer);
    return _ret.address == 0
        ? null
        : objc.NSData.castFromPointer(_ret, retain: true, release: true);
  }

  bool createFileAtPath_contents_attributes_(
      objc.NSString path, objc.NSData? data, objc.NSDictionary? attr) {
    return _objc_msgSend_300(
        this.pointer,
        _sel_createFileAtPath_contents_attributes_,
        path.pointer,
        data?.pointer ?? ffi.nullptr,
        attr?.pointer ?? ffi.nullptr);
  }

  ffi.Pointer<ffi.Char> fileSystemRepresentationWithPath_(objc.NSString path) {
    return _objc_msgSend_301(
        this.pointer, _sel_fileSystemRepresentationWithPath_, path.pointer);
  }

  objc.NSString stringWithFileSystemRepresentation_length_(
      ffi.Pointer<ffi.Char> str, int len) {
    final _ret = _objc_msgSend_302(this.pointer,
        _sel_stringWithFileSystemRepresentation_length_, str, len);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  bool
      replaceItemAtURL_withItemAtURL_backupItemName_options_resultingItemURL_error_(
          objc.NSURL originalItemURL,
          objc.NSURL newItemURL,
          objc.NSString? backupItemName,
          int options,
          ffi.Pointer<ffi.Pointer<objc.ObjCObject>> resultingURL,
          ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    return _objc_msgSend_303(
        this.pointer,
        _sel_replaceItemAtURL_withItemAtURL_backupItemName_options_resultingItemURL_error_,
        originalItemURL.pointer,
        newItemURL.pointer,
        backupItemName?.pointer ?? ffi.nullptr,
        options,
        resultingURL,
        error);
  }

  bool setUbiquitous_itemAtURL_destinationURL_error_(
      bool flag,
      objc.NSURL url,
      objc.NSURL destinationURL,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    return _objc_msgSend_304(
        this.pointer,
        _sel_setUbiquitous_itemAtURL_destinationURL_error_,
        flag,
        url.pointer,
        destinationURL.pointer,
        error);
  }

  bool isUbiquitousItemAtURL_(objc.NSURL url) {
    return _objc_msgSend_305(
        this.pointer, _sel_isUbiquitousItemAtURL_, url.pointer);
  }

  bool startDownloadingUbiquitousItemAtURL_error_(
      objc.NSURL url, ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    return _objc_msgSend_286(this.pointer,
        _sel_startDownloadingUbiquitousItemAtURL_error_, url.pointer, error);
  }

  bool evictUbiquitousItemAtURL_error_(
      objc.NSURL url, ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    return _objc_msgSend_286(
        this.pointer, _sel_evictUbiquitousItemAtURL_error_, url.pointer, error);
  }

  objc.NSURL? URLForUbiquityContainerIdentifier_(
      objc.NSString? containerIdentifier) {
    final _ret = _objc_msgSend_306(
        this.pointer,
        _sel_URLForUbiquityContainerIdentifier_,
        containerIdentifier?.pointer ?? ffi.nullptr);
    return _ret.address == 0
        ? null
        : objc.NSURL.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSURL? URLForPublishingUbiquitousItemAtURL_expirationDate_error_(
      objc.NSURL url,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outDate,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    final _ret = _objc_msgSend_307(
        this.pointer,
        _sel_URLForPublishingUbiquitousItemAtURL_expirationDate_error_,
        url.pointer,
        outDate,
        error);
    return _ret.address == 0
        ? null
        : objc.NSURL.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSObject? get ubiquityIdentityToken {
    final _ret = _objc_msgSend_66(this.pointer, _sel_ubiquityIdentityToken);
    return _ret.address == 0
        ? null
        : objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }

  void getFileProviderServicesForItemAtURL_completionHandler_(objc.NSURL url,
      ObjCBlock_ffiVoid_NSDictionary_NSError completionHandler) {
    _objc_msgSend_308(
        this.pointer,
        _sel_getFileProviderServicesForItemAtURL_completionHandler_,
        url.pointer,
        completionHandler.pointer);
  }

  objc.NSURL? containerURLForSecurityApplicationGroupIdentifier_(
      objc.NSString groupIdentifier) {
    final _ret = _objc_msgSend_11(
        this.pointer,
        _sel_containerURLForSecurityApplicationGroupIdentifier_,
        groupIdentifier.pointer);
    return _ret.address == 0
        ? null
        : objc.NSURL.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSURL get homeDirectoryForCurrentUser {
    final _ret =
        _objc_msgSend_9(this.pointer, _sel_homeDirectoryForCurrentUser);
    return objc.NSURL.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSURL get temporaryDirectory {
    final _ret = _objc_msgSend_9(this.pointer, _sel_temporaryDirectory);
    return objc.NSURL.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSURL? homeDirectoryForUser_(objc.NSString userName) {
    final _ret = _objc_msgSend_11(
        this.pointer, _sel_homeDirectoryForUser_, userName.pointer);
    return _ret.address == 0
        ? null
        : objc.NSURL.castFromPointer(_ret, retain: true, release: true);
  }

  @override
  NSFileManager init() {
    final _ret = _objc_msgSend_40(this.pointer, _sel_init);
    return NSFileManager.castFromPointer(_ret, retain: true, release: true);
  }

  static NSFileManager new1() {
    final _ret = _objc_msgSend_40(_class_NSFileManager, _sel_new);
    return NSFileManager.castFromPointer(_ret, retain: false, release: true);
  }

  static NSFileManager allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_47(_class_NSFileManager, _sel_allocWithZone_, zone);
    return NSFileManager.castFromPointer(_ret, retain: false, release: true);
  }

  static NSFileManager alloc() {
    final _ret = _objc_msgSend_40(_class_NSFileManager, _sel_alloc);
    return NSFileManager.castFromPointer(_ret, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.NSObject aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.NSObject? anArgument) {
    _objc_msgSend_48(
        _class_NSFileManager,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  static void cancelPreviousPerformRequestsWithTarget_(objc.NSObject aTarget) {
    _objc_msgSend_49(_class_NSFileManager,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_7(
        _class_NSFileManager, _sel_accessInstanceVariablesDirectly);
  }

  static bool useStoredAccessor() {
    return _objc_msgSend_7(_class_NSFileManager, _sel_useStoredAccessor);
  }

  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_50(_class_NSFileManager,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_51(_class_NSFileManager,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_52(
        _class_NSFileManager,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_6(
        _class_NSFileManager, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSObject classForKeyedUnarchiver() {
    final _ret =
        _objc_msgSend_40(_class_NSFileManager, _sel_classForKeyedUnarchiver);
    return objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }
}

late final _class_NSFileManager = objc.getClass("NSFileManager");
late final _sel_defaultManager = objc.registerName("defaultManager");
final _objc_msgSend_269 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();

abstract class NSVolumeEnumerationOptions {
  static const int NSVolumeEnumerationSkipHiddenVolumes = 2;
  static const int NSVolumeEnumerationProduceFileReferenceURLs = 4;
}

late final _sel_mountedVolumeURLsIncludingResourceValuesForKeys_options_ = objc
    .registerName("mountedVolumeURLsIncludingResourceValuesForKeys:options:");
final _objc_msgSend_270 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Int32)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int)>();

abstract class NSFileManagerUnmountOptions {
  static const int NSFileManagerUnmountAllPartitionsAndEjectDisk = 1;
  static const int NSFileManagerUnmountWithoutUI = 2;
}

void _ObjCBlock_ffiVoid_NSError_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlock> block, ffi.Pointer<objc.ObjCObject> arg0) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0)>>()
        .asFunction<void Function(ffi.Pointer<objc.ObjCObject>)>()(arg0);
final _ObjCBlock_ffiVoid_NSError_closureRegistry =
    <int, void Function(ffi.Pointer<objc.ObjCObject>)>{};
int _ObjCBlock_ffiVoid_NSError_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void> _ObjCBlock_ffiVoid_NSError_registerClosure(
    void Function(ffi.Pointer<objc.ObjCObject>) fn) {
  final id = ++_ObjCBlock_ffiVoid_NSError_closureRegistryIndex;
  _ObjCBlock_ffiVoid_NSError_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

void _ObjCBlock_ffiVoid_NSError_closureTrampoline(
        ffi.Pointer<objc.ObjCBlock> block, ffi.Pointer<objc.ObjCObject> arg0) =>
    _ObjCBlock_ffiVoid_NSError_closureRegistry[block.ref.target.address]!(arg0);

class ObjCBlock_ffiVoid_NSError extends objc.ObjCBlockBase {
  ObjCBlock_ffiVoid_NSError._(ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false, bool release = true})
      : super(pointer, retain: retain, release: release);

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_ffiVoid_NSError castFromPointer(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = false}) {
    return ObjCBlock_ffiVoid_NSError._(pointer,
        retain: retain, release: release);
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSError.fromFunctionPointer(
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0)>>
          ptr)
      : this._(objc.newBlock(
            _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<objc.ObjCObject>)>(
                    _ObjCBlock_ffiVoid_NSError_fnPtrTrampoline)
                .cast(),
            ptr.cast()));
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSError.fromFunction(void Function(objc.NSError?) fn)
      : this._(objc.newBlock(
            _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(
                            ffi.Pointer<objc.ObjCBlock>, ffi.Pointer<objc.ObjCObject>)>(
                    _ObjCBlock_ffiVoid_NSError_closureTrampoline)
                .cast(),
            _ObjCBlock_ffiVoid_NSError_registerClosure(
                (ffi.Pointer<objc.ObjCObject> arg0) => fn(arg0.address == 0
                    ? null
                    : objc.NSError.castFromPointer(arg0,
                        retain: true, release: true)))));
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_NSError.listener(void Function(objc.NSError?) fn)
      : this._(objc.newBlock(
            (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                        ffi.Void Function(ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<objc.ObjCObject>)>.listener(
                    _ObjCBlock_ffiVoid_NSError_closureTrampoline)
                  ..keepIsolateAlive = false)
                .nativeFunction
                .cast(),
            _ObjCBlock_ffiVoid_NSError_registerClosure(
                (ffi.Pointer<objc.ObjCObject> arg0) => fn(arg0.address == 0
                    ? null
                    : objc.NSError.castFromPointer(arg0, retain: true, release: true)))));
  static ffi.NativeCallable<
          ffi.Void Function(
              ffi.Pointer<objc.ObjCBlock>, ffi.Pointer<objc.ObjCObject>)>?
      _dartFuncListenerTrampoline;

  void call(objc.NSError? arg0) => pointer.ref.invoke
          .cast<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<objc.ObjCBlock> block,
                      ffi.Pointer<objc.ObjCObject> arg0)>>()
          .asFunction<
              void Function(
                  ffi.Pointer<objc.ObjCBlock>, ffi.Pointer<objc.ObjCObject>)>()(
      pointer, arg0?.pointer ?? ffi.nullptr);
}

late final _sel_unmountVolumeAtURL_options_completionHandler_ =
    objc.registerName("unmountVolumeAtURL:options:completionHandler:");
final _objc_msgSend_271 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Int32,
                ffi.Pointer<objc.ObjCBlock>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            ffi.Pointer<objc.ObjCBlock>)>();

abstract class NSDirectoryEnumerationOptions {
  static const int NSDirectoryEnumerationSkipsSubdirectoryDescendants = 1;
  static const int NSDirectoryEnumerationSkipsPackageDescendants = 2;
  static const int NSDirectoryEnumerationSkipsHiddenFiles = 4;
  static const int NSDirectoryEnumerationIncludesDirectoriesPostOrder = 8;
  static const int NSDirectoryEnumerationProducesRelativePathURLs = 16;
}

late final _sel_contentsOfDirectoryAtURL_includingPropertiesForKeys_options_error_ =
    objc.registerName(
        "contentsOfDirectoryAtURL:includingPropertiesForKeys:options:error:");
final _objc_msgSend_272 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Int32,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();

abstract class NSSearchPathDirectory {
  static const int NSApplicationDirectory = 1;
  static const int NSDemoApplicationDirectory = 2;
  static const int NSDeveloperApplicationDirectory = 3;
  static const int NSAdminApplicationDirectory = 4;
  static const int NSLibraryDirectory = 5;
  static const int NSDeveloperDirectory = 6;
  static const int NSUserDirectory = 7;
  static const int NSDocumentationDirectory = 8;
  static const int NSDocumentDirectory = 9;
  static const int NSCoreServiceDirectory = 10;
  static const int NSAutosavedInformationDirectory = 11;
  static const int NSDesktopDirectory = 12;
  static const int NSCachesDirectory = 13;
  static const int NSApplicationSupportDirectory = 14;
  static const int NSDownloadsDirectory = 15;
  static const int NSInputMethodsDirectory = 16;
  static const int NSMoviesDirectory = 17;
  static const int NSMusicDirectory = 18;
  static const int NSPicturesDirectory = 19;
  static const int NSPrinterDescriptionDirectory = 20;
  static const int NSSharedPublicDirectory = 21;
  static const int NSPreferencePanesDirectory = 22;
  static const int NSApplicationScriptsDirectory = 23;
  static const int NSItemReplacementDirectory = 99;
  static const int NSAllApplicationsDirectory = 100;
  static const int NSAllLibrariesDirectory = 101;
  static const int NSTrashDirectory = 102;
}

abstract class NSSearchPathDomainMask {
  static const int NSUserDomainMask = 1;
  static const int NSLocalDomainMask = 2;
  static const int NSNetworkDomainMask = 4;
  static const int NSSystemDomainMask = 8;
  static const int NSAllDomainsMask = 65535;
}

late final _sel_URLsForDirectory_inDomains_ =
    objc.registerName("URLsForDirectory:inDomains:");
final _objc_msgSend_273 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Int32, ffi.Int32)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int, int)>();
late final _sel_URLForDirectory_inDomain_appropriateForURL_create_error_ = objc
    .registerName("URLForDirectory:inDomain:appropriateForURL:create:error:");
final _objc_msgSend_274 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Int32,
                ffi.Int32,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Bool,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int,
            int,
            ffi.Pointer<objc.ObjCObject>,
            bool,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();

abstract class NSURLRelationship {
  static const int NSURLRelationshipContains = 0;
  static const int NSURLRelationshipSame = 1;
  static const int NSURLRelationshipOther = 2;
}

late final _sel_getRelationship_ofDirectoryAtURL_toItemAtURL_error_ =
    objc.registerName("getRelationship:ofDirectoryAtURL:toItemAtURL:error:");
final _objc_msgSend_275 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<ffi.Int32>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<ffi.Int32>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_getRelationship_ofDirectory_inDomain_toItemAtURL_error_ = objc
    .registerName("getRelationship:ofDirectory:inDomain:toItemAtURL:error:");
final _objc_msgSend_276 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<ffi.Int32>,
                ffi.Int32,
                ffi.Int32,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<ffi.Int32>,
            int,
            int,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_createDirectoryAtURL_withIntermediateDirectories_attributes_error_ =
    objc.registerName(
        "createDirectoryAtURL:withIntermediateDirectories:attributes:error:");
final _objc_msgSend_277 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Bool,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            bool,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_createSymbolicLinkAtURL_withDestinationURL_error_ =
    objc.registerName("createSymbolicLinkAtURL:withDestinationURL:error:");
final _objc_msgSend_278 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_setAttributes_ofItemAtPath_error_ =
    objc.registerName("setAttributes:ofItemAtPath:error:");
final _objc_msgSend_279 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_createDirectoryAtPath_withIntermediateDirectories_attributes_error_ =
    objc.registerName(
        "createDirectoryAtPath:withIntermediateDirectories:attributes:error:");
final _objc_msgSend_280 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Bool,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            bool,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_contentsOfDirectoryAtPath_error_ =
    objc.registerName("contentsOfDirectoryAtPath:error:");
final _objc_msgSend_281 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_subpathsOfDirectoryAtPath_error_ =
    objc.registerName("subpathsOfDirectoryAtPath:error:");
late final _sel_attributesOfItemAtPath_error_ =
    objc.registerName("attributesOfItemAtPath:error:");
final _objc_msgSend_282 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_attributesOfFileSystemForPath_error_ =
    objc.registerName("attributesOfFileSystemForPath:error:");
late final _sel_createSymbolicLinkAtPath_withDestinationPath_error_ =
    objc.registerName("createSymbolicLinkAtPath:withDestinationPath:error:");
final _objc_msgSend_283 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_destinationOfSymbolicLinkAtPath_error_ =
    objc.registerName("destinationOfSymbolicLinkAtPath:error:");
final _objc_msgSend_284 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_copyItemAtPath_toPath_error_ =
    objc.registerName("copyItemAtPath:toPath:error:");
late final _sel_moveItemAtPath_toPath_error_ =
    objc.registerName("moveItemAtPath:toPath:error:");
late final _sel_linkItemAtPath_toPath_error_ =
    objc.registerName("linkItemAtPath:toPath:error:");
late final _sel_removeItemAtPath_error_ =
    objc.registerName("removeItemAtPath:error:");
final _objc_msgSend_285 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_copyItemAtURL_toURL_error_ =
    objc.registerName("copyItemAtURL:toURL:error:");
late final _sel_moveItemAtURL_toURL_error_ =
    objc.registerName("moveItemAtURL:toURL:error:");
late final _sel_linkItemAtURL_toURL_error_ =
    objc.registerName("linkItemAtURL:toURL:error:");
late final _sel_removeItemAtURL_error_ =
    objc.registerName("removeItemAtURL:error:");
final _objc_msgSend_286 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_trashItemAtURL_resultingItemURL_error_ =
    objc.registerName("trashItemAtURL:resultingItemURL:error:");
final _objc_msgSend_287 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_fileAttributesAtPath_traverseLink_ =
    objc.registerName("fileAttributesAtPath:traverseLink:");
final _objc_msgSend_288 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Bool)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            bool)>();
late final _sel_changeFileAttributes_atPath_ =
    objc.registerName("changeFileAttributes:atPath:");
final _objc_msgSend_289 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_directoryContentsAtPath_ =
    objc.registerName("directoryContentsAtPath:");
final _objc_msgSend_290 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_fileSystemAttributesAtPath_ =
    objc.registerName("fileSystemAttributesAtPath:");
final _objc_msgSend_291 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_pathContentOfSymbolicLinkAtPath_ =
    objc.registerName("pathContentOfSymbolicLinkAtPath:");
late final _sel_createSymbolicLinkAtPath_pathContent_ =
    objc.registerName("createSymbolicLinkAtPath:pathContent:");
final _objc_msgSend_292 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_createDirectoryAtPath_attributes_ =
    objc.registerName("createDirectoryAtPath:attributes:");
final _objc_msgSend_293 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_linkPath_toPath_handler_ =
    objc.registerName("linkPath:toPath:handler:");
final _objc_msgSend_294 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_copyPath_toPath_handler_ =
    objc.registerName("copyPath:toPath:handler:");
late final _sel_movePath_toPath_handler_ =
    objc.registerName("movePath:toPath:handler:");
late final _sel_removeFileAtPath_handler_ =
    objc.registerName("removeFileAtPath:handler:");
final _objc_msgSend_295 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_currentDirectoryPath =
    objc.registerName("currentDirectoryPath");
late final _sel_changeCurrentDirectoryPath_ =
    objc.registerName("changeCurrentDirectoryPath:");
late final _sel_fileExistsAtPath_ = objc.registerName("fileExistsAtPath:");
late final _sel_fileExistsAtPath_isDirectory_ =
    objc.registerName("fileExistsAtPath:isDirectory:");
final _objc_msgSend_296 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<ffi.Bool>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<ffi.Bool>)>();
late final _sel_isReadableFileAtPath_ =
    objc.registerName("isReadableFileAtPath:");
late final _sel_isWritableFileAtPath_ =
    objc.registerName("isWritableFileAtPath:");
late final _sel_isExecutableFileAtPath_ =
    objc.registerName("isExecutableFileAtPath:");
late final _sel_isDeletableFileAtPath_ =
    objc.registerName("isDeletableFileAtPath:");
late final _sel_contentsEqualAtPath_andPath_ =
    objc.registerName("contentsEqualAtPath:andPath:");
late final _sel_displayNameAtPath_ = objc.registerName("displayNameAtPath:");
final _objc_msgSend_297 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_componentsToDisplayForPath_ =
    objc.registerName("componentsToDisplayForPath:");
late final _sel_enumeratorAtPath_ = objc.registerName("enumeratorAtPath:");
bool _ObjCBlock_bool_NSURL_NSError_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlock> block,
        ffi.Pointer<objc.ObjCObject> arg0,
        ffi.Pointer<objc.ObjCObject> arg1) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Bool Function(ffi.Pointer<objc.ObjCObject> arg0,
                    ffi.Pointer<objc.ObjCObject> arg1)>>()
        .asFunction<
            bool Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>()(arg0, arg1);
final _ObjCBlock_bool_NSURL_NSError_closureRegistry = <int,
    bool Function(
        ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>{};
int _ObjCBlock_bool_NSURL_NSError_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void> _ObjCBlock_bool_NSURL_NSError_registerClosure(
    bool Function(ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)
        fn) {
  final id = ++_ObjCBlock_bool_NSURL_NSError_closureRegistryIndex;
  _ObjCBlock_bool_NSURL_NSError_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

bool _ObjCBlock_bool_NSURL_NSError_closureTrampoline(
        ffi.Pointer<objc.ObjCBlock> block,
        ffi.Pointer<objc.ObjCObject> arg0,
        ffi.Pointer<objc.ObjCObject> arg1) =>
    _ObjCBlock_bool_NSURL_NSError_closureRegistry[block.ref.target.address]!(
        arg0, arg1);

class ObjCBlock_bool_NSURL_NSError extends objc.ObjCBlockBase {
  ObjCBlock_bool_NSURL_NSError._(ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false, bool release = true})
      : super(pointer, retain: retain, release: release);

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_bool_NSURL_NSError castFromPointer(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = false}) {
    return ObjCBlock_bool_NSURL_NSError._(pointer,
        retain: retain, release: release);
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_bool_NSURL_NSError.fromFunctionPointer(
      ffi.Pointer<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<objc.ObjCObject> arg0, ffi.Pointer<objc.ObjCObject> arg1)>>
          ptr)
      : this._(objc.newBlock(
            _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Bool Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<objc.ObjCObject>)>(
                    _ObjCBlock_bool_NSURL_NSError_fnPtrTrampoline, false)
                .cast(),
            ptr.cast()));
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_bool_NSURL_NSError.fromFunction(bool Function(objc.NSURL, objc.NSError) fn)
      : this._(objc.newBlock(
            _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Bool Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<objc.ObjCObject>)>(
                    _ObjCBlock_bool_NSURL_NSError_closureTrampoline, false)
                .cast(),
            _ObjCBlock_bool_NSURL_NSError_registerClosure(
                (ffi.Pointer<objc.ObjCObject> arg0,
                        ffi.Pointer<objc.ObjCObject> arg1) =>
                    fn(objc.NSURL.castFromPointer(arg0, retain: true, release: true), objc.NSError.castFromPointer(arg1, retain: true, release: true)))));
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  bool call(objc.NSURL arg0, objc.NSError arg1) => pointer.ref.invoke
          .cast<
              ffi.NativeFunction<
                  ffi.Bool Function(
                      ffi.Pointer<objc.ObjCBlock> block,
                      ffi.Pointer<objc.ObjCObject> arg0,
                      ffi.Pointer<objc.ObjCObject> arg1)>>()
          .asFunction<
              bool Function(
                  ffi.Pointer<objc.ObjCBlock>,
                  ffi.Pointer<objc.ObjCObject>,
                  ffi.Pointer<objc.ObjCObject>)>()(
      pointer, arg0.pointer, arg1.pointer);
}

late final _sel_enumeratorAtURL_includingPropertiesForKeys_options_errorHandler_ =
    objc.registerName(
        "enumeratorAtURL:includingPropertiesForKeys:options:errorHandler:");
final _objc_msgSend_298 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Int32,
                ffi.Pointer<objc.ObjCBlock>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            ffi.Pointer<objc.ObjCBlock>)>();
late final _sel_subpathsAtPath_ = objc.registerName("subpathsAtPath:");
late final _sel_contentsAtPath_ = objc.registerName("contentsAtPath:");
final _objc_msgSend_299 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_createFileAtPath_contents_attributes_ =
    objc.registerName("createFileAtPath:contents:attributes:");
final _objc_msgSend_300 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_fileSystemRepresentationWithPath_ =
    objc.registerName("fileSystemRepresentationWithPath:");
final _objc_msgSend_301 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<ffi.Char> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<ffi.Char> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_stringWithFileSystemRepresentation_length_ =
    objc.registerName("stringWithFileSystemRepresentation:length:");
final _objc_msgSend_302 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<ffi.Char>,
                ffi.UnsignedLong)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<ffi.Char>, int)>();

abstract class NSFileManagerItemReplacementOptions {
  static const int NSFileManagerItemReplacementUsingNewMetadataOnly = 1;
  static const int NSFileManagerItemReplacementWithoutDeletingBackupItem = 2;
}

late final _sel_replaceItemAtURL_withItemAtURL_backupItemName_options_resultingItemURL_error_ =
    objc.registerName(
        "replaceItemAtURL:withItemAtURL:backupItemName:options:resultingItemURL:error:");
final _objc_msgSend_303 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Int32,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_setUbiquitous_itemAtURL_destinationURL_error_ =
    objc.registerName("setUbiquitous:itemAtURL:destinationURL:error:");
final _objc_msgSend_304 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Bool,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            bool,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_isUbiquitousItemAtURL_ =
    objc.registerName("isUbiquitousItemAtURL:");
final _objc_msgSend_305 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        bool Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_startDownloadingUbiquitousItemAtURL_error_ =
    objc.registerName("startDownloadingUbiquitousItemAtURL:error:");
late final _sel_evictUbiquitousItemAtURL_error_ =
    objc.registerName("evictUbiquitousItemAtURL:error:");
late final _sel_URLForUbiquityContainerIdentifier_ =
    objc.registerName("URLForUbiquityContainerIdentifier:");
final _objc_msgSend_306 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_URLForPublishingUbiquitousItemAtURL_expirationDate_error_ = objc
    .registerName("URLForPublishingUbiquitousItemAtURL:expirationDate:error:");
final _objc_msgSend_307 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_ubiquityIdentityToken =
    objc.registerName("ubiquityIdentityToken");
void _ObjCBlock_ffiVoid_NSDictionary_NSError_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlock> block,
        ffi.Pointer<objc.ObjCObject> arg0,
        ffi.Pointer<objc.ObjCObject> arg1) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0,
                    ffi.Pointer<objc.ObjCObject> arg1)>>()
        .asFunction<
            void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>()(arg0, arg1);
final _ObjCBlock_ffiVoid_NSDictionary_NSError_closureRegistry = <int,
    void Function(
        ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>{};
int _ObjCBlock_ffiVoid_NSDictionary_NSError_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void> _ObjCBlock_ffiVoid_NSDictionary_NSError_registerClosure(
    void Function(ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)
        fn) {
  final id = ++_ObjCBlock_ffiVoid_NSDictionary_NSError_closureRegistryIndex;
  _ObjCBlock_ffiVoid_NSDictionary_NSError_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

void _ObjCBlock_ffiVoid_NSDictionary_NSError_closureTrampoline(
        ffi.Pointer<objc.ObjCBlock> block,
        ffi.Pointer<objc.ObjCObject> arg0,
        ffi.Pointer<objc.ObjCObject> arg1) =>
    _ObjCBlock_ffiVoid_NSDictionary_NSError_closureRegistry[
        block.ref.target.address]!(arg0, arg1);

class ObjCBlock_ffiVoid_NSDictionary_NSError extends objc.ObjCBlockBase {
  ObjCBlock_ffiVoid_NSDictionary_NSError._(ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false, bool release = true})
      : super(pointer, retain: retain, release: release);

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_ffiVoid_NSDictionary_NSError castFromPointer(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = false}) {
    return ObjCBlock_ffiVoid_NSDictionary_NSError._(pointer,
        retain: retain, release: release);
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSDictionary_NSError.fromFunctionPointer(
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0,
                      ffi.Pointer<objc.ObjCObject> arg1)>>
          ptr)
      : this._(objc.newBlock(
            _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<objc.ObjCObject>)>(
                    _ObjCBlock_ffiVoid_NSDictionary_NSError_fnPtrTrampoline)
                .cast(),
            ptr.cast()));
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSDictionary_NSError.fromFunction(
      void Function(objc.NSDictionary?, objc.NSError?) fn)
      : this._(objc.newBlock(
            _dartFuncTrampoline ??=
                ffi.Pointer.fromFunction<ffi.Void Function(ffi.Pointer<objc.ObjCBlock>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>(
                        _ObjCBlock_ffiVoid_NSDictionary_NSError_closureTrampoline)
                    .cast(),
            _ObjCBlock_ffiVoid_NSDictionary_NSError_registerClosure(
                (ffi.Pointer<objc.ObjCObject> arg0, ffi.Pointer<objc.ObjCObject> arg1) => fn(
                    arg0.address == 0
                        ? null
                        : objc.NSDictionary.castFromPointer(arg0, retain: true, release: true),
                    arg1.address == 0 ? null : objc.NSError.castFromPointer(arg1, retain: true, release: true)))));
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_NSDictionary_NSError.listener(
      void Function(objc.NSDictionary?, objc.NSError?) fn)
      : this._(objc.newBlock(
            (_dartFuncListenerTrampoline ??=
                    ffi.NativeCallable<ffi.Void Function(ffi.Pointer<objc.ObjCBlock>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>.listener(
                        _ObjCBlock_ffiVoid_NSDictionary_NSError_closureTrampoline)
                      ..keepIsolateAlive = false)
                .nativeFunction
                .cast(),
            _ObjCBlock_ffiVoid_NSDictionary_NSError_registerClosure(
                (ffi.Pointer<objc.ObjCObject> arg0, ffi.Pointer<objc.ObjCObject> arg1) => fn(
                    arg0.address == 0
                        ? null
                        : objc.NSDictionary.castFromPointer(arg0,
                            retain: true, release: true),
                    arg1.address == 0 ? null : objc.NSError.castFromPointer(arg1, retain: true, release: true)))));
  static ffi.NativeCallable<
      ffi.Void Function(
          ffi.Pointer<objc.ObjCBlock>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCObject>)>? _dartFuncListenerTrampoline;

  void call(objc.NSDictionary? arg0, objc.NSError? arg1) => pointer.ref.invoke
          .cast<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<objc.ObjCBlock> block,
                      ffi.Pointer<objc.ObjCObject> arg0,
                      ffi.Pointer<objc.ObjCObject> arg1)>>()
          .asFunction<
              void Function(
                  ffi.Pointer<objc.ObjCBlock>,
                  ffi.Pointer<objc.ObjCObject>,
                  ffi.Pointer<objc.ObjCObject>)>()(
      pointer, arg0?.pointer ?? ffi.nullptr, arg1?.pointer ?? ffi.nullptr);
}

late final _sel_getFileProviderServicesForItemAtURL_completionHandler_ =
    objc.registerName("getFileProviderServicesForItemAtURL:completionHandler:");
final _objc_msgSend_308 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCBlock>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCBlock>)>();
late final _sel_containerURLForSecurityApplicationGroupIdentifier_ =
    objc.registerName("containerURLForSecurityApplicationGroupIdentifier:");
late final _sel_homeDirectoryForCurrentUser =
    objc.registerName("homeDirectoryForCurrentUser");
late final _sel_temporaryDirectory = objc.registerName("temporaryDirectory");
late final _sel_homeDirectoryForUser_ =
    objc.registerName("homeDirectoryForUser:");

class NSHTTPCookieStorage extends objc.NSObject {
  NSHTTPCookieStorage._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSHTTPCookieStorage] that points to the same underlying object as [other].
  NSHTTPCookieStorage.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSHTTPCookieStorage] that wraps the given raw object pointer.
  NSHTTPCookieStorage.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSHTTPCookieStorage].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSHTTPCookieStorage);
  }

  static NSHTTPCookieStorage getSharedHTTPCookieStorage() {
    final _ret = _objc_msgSend_309(
        _class_NSHTTPCookieStorage, _sel_sharedHTTPCookieStorage);
    return NSHTTPCookieStorage.castFromPointer(_ret,
        retain: true, release: true);
  }

  static NSHTTPCookieStorage sharedCookieStorageForGroupContainerIdentifier_(
      objc.NSString identifier) {
    final _ret = _objc_msgSend_310(
        _class_NSHTTPCookieStorage,
        _sel_sharedCookieStorageForGroupContainerIdentifier_,
        identifier.pointer);
    return NSHTTPCookieStorage.castFromPointer(_ret,
        retain: true, release: true);
  }

  objc.NSArray? get cookies {
    final _ret = _objc_msgSend_69(this.pointer, _sel_cookies);
    return _ret.address == 0
        ? null
        : objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  void setCookie_(NSHTTPCookie cookie) {
    _objc_msgSend_315(this.pointer, _sel_setCookie_, cookie.pointer);
  }

  void deleteCookie_(NSHTTPCookie cookie) {
    _objc_msgSend_315(this.pointer, _sel_deleteCookie_, cookie.pointer);
  }

  void removeCookiesSinceDate_(objc.NSDate date) {
    _objc_msgSend_246(this.pointer, _sel_removeCookiesSinceDate_, date.pointer);
  }

  objc.NSArray? cookiesForURL_(objc.NSURL URL) {
    final _ret =
        _objc_msgSend_316(this.pointer, _sel_cookiesForURL_, URL.pointer);
    return _ret.address == 0
        ? null
        : objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  void setCookies_forURL_mainDocumentURL_(
      objc.NSArray cookies, objc.NSURL? URL, objc.NSURL? mainDocumentURL) {
    _objc_msgSend_317(
        this.pointer,
        _sel_setCookies_forURL_mainDocumentURL_,
        cookies.pointer,
        URL?.pointer ?? ffi.nullptr,
        mainDocumentURL?.pointer ?? ffi.nullptr);
  }

  int get cookieAcceptPolicy {
    return _objc_msgSend_318(this.pointer, _sel_cookieAcceptPolicy);
  }

  set cookieAcceptPolicy(int value) {
    return _objc_msgSend_319(this.pointer, _sel_setCookieAcceptPolicy_, value);
  }

  objc.NSArray sortedCookiesUsingDescriptors_(objc.NSArray sortOrder) {
    final _ret = _objc_msgSend_67(
        this.pointer, _sel_sortedCookiesUsingDescriptors_, sortOrder.pointer);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  void storeCookies_forTask_(objc.NSArray cookies, NSURLSessionTask task) {
    _objc_msgSend_353(this.pointer, _sel_storeCookies_forTask_, cookies.pointer,
        task.pointer);
  }

  void getCookiesForTask_completionHandler_(
      NSURLSessionTask task, ObjCBlock_ffiVoid_NSArray completionHandler) {
    _objc_msgSend_354(this.pointer, _sel_getCookiesForTask_completionHandler_,
        task.pointer, completionHandler.pointer);
  }

  @override
  NSHTTPCookieStorage init() {
    final _ret = _objc_msgSend_40(this.pointer, _sel_init);
    return NSHTTPCookieStorage.castFromPointer(_ret,
        retain: true, release: true);
  }

  static NSHTTPCookieStorage new1() {
    final _ret = _objc_msgSend_40(_class_NSHTTPCookieStorage, _sel_new);
    return NSHTTPCookieStorage.castFromPointer(_ret,
        retain: false, release: true);
  }

  static NSHTTPCookieStorage allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_47(_class_NSHTTPCookieStorage, _sel_allocWithZone_, zone);
    return NSHTTPCookieStorage.castFromPointer(_ret,
        retain: false, release: true);
  }

  static NSHTTPCookieStorage alloc() {
    final _ret = _objc_msgSend_40(_class_NSHTTPCookieStorage, _sel_alloc);
    return NSHTTPCookieStorage.castFromPointer(_ret,
        retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.NSObject aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.NSObject? anArgument) {
    _objc_msgSend_48(
        _class_NSHTTPCookieStorage,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  static void cancelPreviousPerformRequestsWithTarget_(objc.NSObject aTarget) {
    _objc_msgSend_49(_class_NSHTTPCookieStorage,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_7(
        _class_NSHTTPCookieStorage, _sel_accessInstanceVariablesDirectly);
  }

  static bool useStoredAccessor() {
    return _objc_msgSend_7(_class_NSHTTPCookieStorage, _sel_useStoredAccessor);
  }

  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_50(_class_NSHTTPCookieStorage,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_51(_class_NSHTTPCookieStorage,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_52(
        _class_NSHTTPCookieStorage,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_6(
        _class_NSHTTPCookieStorage, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSObject classForKeyedUnarchiver() {
    final _ret = _objc_msgSend_40(
        _class_NSHTTPCookieStorage, _sel_classForKeyedUnarchiver);
    return objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }
}

late final _class_NSHTTPCookieStorage = objc.getClass("NSHTTPCookieStorage");
late final _sel_sharedHTTPCookieStorage =
    objc.registerName("sharedHTTPCookieStorage");
final _objc_msgSend_309 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_sharedCookieStorageForGroupContainerIdentifier_ =
    objc.registerName("sharedCookieStorageForGroupContainerIdentifier:");
final _objc_msgSend_310 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_cookies = objc.registerName("cookies");

class NSHTTPCookie extends objc.NSObject {
  NSHTTPCookie._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSHTTPCookie] that points to the same underlying object as [other].
  NSHTTPCookie.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSHTTPCookie] that wraps the given raw object pointer.
  NSHTTPCookie.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSHTTPCookie].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSHTTPCookie);
  }

  NSHTTPCookie? initWithProperties_(objc.NSDictionary properties) {
    final _ret = _objc_msgSend_311(
        this.pointer, _sel_initWithProperties_, properties.pointer);
    return _ret.address == 0
        ? null
        : NSHTTPCookie.castFromPointer(_ret, retain: true, release: true);
  }

  static NSHTTPCookie? cookieWithProperties_(objc.NSDictionary properties) {
    final _ret = _objc_msgSend_312(
        _class_NSHTTPCookie, _sel_cookieWithProperties_, properties.pointer);
    return _ret.address == 0
        ? null
        : NSHTTPCookie.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSDictionary requestHeaderFieldsWithCookies_(
      objc.NSArray cookies) {
    final _ret = _objc_msgSend_313(_class_NSHTTPCookie,
        _sel_requestHeaderFieldsWithCookies_, cookies.pointer);
    return objc.NSDictionary.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSArray cookiesWithResponseHeaderFields_forURL_(
      objc.NSDictionary headerFields, objc.NSURL URL) {
    final _ret = _objc_msgSend_314(
        _class_NSHTTPCookie,
        _sel_cookiesWithResponseHeaderFields_forURL_,
        headerFields.pointer,
        URL.pointer);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSDictionary? get properties {
    final _ret = _objc_msgSend_65(this.pointer, _sel_properties);
    return _ret.address == 0
        ? null
        : objc.NSDictionary.castFromPointer(_ret, retain: true, release: true);
  }

  int get version {
    return _objc_msgSend_29(this.pointer, _sel_version);
  }

  objc.NSString get name {
    final _ret = _objc_msgSend_12(this.pointer, _sel_name);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSString get value {
    final _ret = _objc_msgSend_12(this.pointer, _sel_value);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSDate? get expiresDate {
    final _ret = _objc_msgSend_116(this.pointer, _sel_expiresDate);
    return _ret.address == 0
        ? null
        : objc.NSDate.castFromPointer(_ret, retain: true, release: true);
  }

  bool get sessionOnly {
    return _objc_msgSend_7(this.pointer, _sel_isSessionOnly);
  }

  objc.NSString get domain {
    final _ret = _objc_msgSend_12(this.pointer, _sel_domain);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSString get path {
    final _ret = _objc_msgSend_12(this.pointer, _sel_path);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  bool get secure {
    return _objc_msgSend_7(this.pointer, _sel_isSecure);
  }

  bool get HTTPOnly {
    return _objc_msgSend_7(this.pointer, _sel_isHTTPOnly);
  }

  objc.NSString? get comment {
    final _ret = _objc_msgSend_13(this.pointer, _sel_comment);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSURL? get commentURL {
    final _ret = _objc_msgSend_10(this.pointer, _sel_commentURL);
    return _ret.address == 0
        ? null
        : objc.NSURL.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSArray? get portList {
    final _ret = _objc_msgSend_69(this.pointer, _sel_portList);
    return _ret.address == 0
        ? null
        : objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSString? get sameSitePolicy {
    final _ret = _objc_msgSend_13(this.pointer, _sel_sameSitePolicy);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  @override
  NSHTTPCookie init() {
    final _ret = _objc_msgSend_40(this.pointer, _sel_init);
    return NSHTTPCookie.castFromPointer(_ret, retain: true, release: true);
  }

  static NSHTTPCookie new1() {
    final _ret = _objc_msgSend_40(_class_NSHTTPCookie, _sel_new);
    return NSHTTPCookie.castFromPointer(_ret, retain: false, release: true);
  }

  static NSHTTPCookie allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_47(_class_NSHTTPCookie, _sel_allocWithZone_, zone);
    return NSHTTPCookie.castFromPointer(_ret, retain: false, release: true);
  }

  static NSHTTPCookie alloc() {
    final _ret = _objc_msgSend_40(_class_NSHTTPCookie, _sel_alloc);
    return NSHTTPCookie.castFromPointer(_ret, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.NSObject aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.NSObject? anArgument) {
    _objc_msgSend_48(
        _class_NSHTTPCookie,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  static void cancelPreviousPerformRequestsWithTarget_(objc.NSObject aTarget) {
    _objc_msgSend_49(_class_NSHTTPCookie,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_7(
        _class_NSHTTPCookie, _sel_accessInstanceVariablesDirectly);
  }

  static bool useStoredAccessor() {
    return _objc_msgSend_7(_class_NSHTTPCookie, _sel_useStoredAccessor);
  }

  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_50(_class_NSHTTPCookie,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_51(_class_NSHTTPCookie,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_52(
        _class_NSHTTPCookie,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_6(
        _class_NSHTTPCookie, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSObject classForKeyedUnarchiver() {
    final _ret =
        _objc_msgSend_40(_class_NSHTTPCookie, _sel_classForKeyedUnarchiver);
    return objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }
}

late final _class_NSHTTPCookie = objc.getClass("NSHTTPCookie");
late final _sel_initWithProperties_ = objc.registerName("initWithProperties:");
final _objc_msgSend_311 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_cookieWithProperties_ =
    objc.registerName("cookieWithProperties:");
final _objc_msgSend_312 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_requestHeaderFieldsWithCookies_ =
    objc.registerName("requestHeaderFieldsWithCookies:");
final _objc_msgSend_313 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_cookiesWithResponseHeaderFields_forURL_ =
    objc.registerName("cookiesWithResponseHeaderFields:forURL:");
final _objc_msgSend_314 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_properties = objc.registerName("properties");
late final _sel_version = objc.registerName("version");
late final _sel_value = objc.registerName("value");
late final _sel_expiresDate = objc.registerName("expiresDate");
late final _sel_isSessionOnly = objc.registerName("isSessionOnly");
late final _sel_domain = objc.registerName("domain");
late final _sel_path = objc.registerName("path");
late final _sel_isSecure = objc.registerName("isSecure");
late final _sel_isHTTPOnly = objc.registerName("isHTTPOnly");
late final _sel_comment = objc.registerName("comment");
late final _sel_commentURL = objc.registerName("commentURL");
late final _sel_portList = objc.registerName("portList");
late final _sel_sameSitePolicy = objc.registerName("sameSitePolicy");
late final _sel_setCookie_ = objc.registerName("setCookie:");
final _objc_msgSend_315 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_deleteCookie_ = objc.registerName("deleteCookie:");
late final _sel_removeCookiesSinceDate_ =
    objc.registerName("removeCookiesSinceDate:");
late final _sel_cookiesForURL_ = objc.registerName("cookiesForURL:");
final _objc_msgSend_316 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_setCookies_forURL_mainDocumentURL_ =
    objc.registerName("setCookies:forURL:mainDocumentURL:");
final _objc_msgSend_317 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();

abstract class NSHTTPCookieAcceptPolicy {
  static const int NSHTTPCookieAcceptPolicyAlways = 0;
  static const int NSHTTPCookieAcceptPolicyNever = 1;
  static const int NSHTTPCookieAcceptPolicyOnlyFromMainDocumentDomain = 2;
}

late final _sel_cookieAcceptPolicy = objc.registerName("cookieAcceptPolicy");
final _objc_msgSend_318 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Int32 Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setCookieAcceptPolicy_ =
    objc.registerName("setCookieAcceptPolicy:");
final _objc_msgSend_319 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Int32)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_sortedCookiesUsingDescriptors_ =
    objc.registerName("sortedCookiesUsingDescriptors:");

class NSURLSessionTask extends objc.NSObject {
  NSURLSessionTask._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSURLSessionTask] that points to the same underlying object as [other].
  NSURLSessionTask.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSURLSessionTask] that wraps the given raw object pointer.
  NSURLSessionTask.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSURLSessionTask].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSURLSessionTask);
  }

  int get taskIdentifier {
    return _objc_msgSend_29(this.pointer, _sel_taskIdentifier);
  }

  NSURLRequest? get originalRequest {
    final _ret = _objc_msgSend_343(this.pointer, _sel_originalRequest);
    return _ret.address == 0
        ? null
        : NSURLRequest.castFromPointer(_ret, retain: true, release: true);
  }

  NSURLRequest? get currentRequest {
    final _ret = _objc_msgSend_343(this.pointer, _sel_currentRequest);
    return _ret.address == 0
        ? null
        : NSURLRequest.castFromPointer(_ret, retain: true, release: true);
  }

  NSURLResponse? get response {
    final _ret = _objc_msgSend_346(this.pointer, _sel_response);
    return _ret.address == 0
        ? null
        : NSURLResponse.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSObject? get delegate {
    final _ret = _objc_msgSend_66(this.pointer, _sel_delegate);
    return _ret.address == 0
        ? null
        : objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }

  set delegate(objc.NSObject? value) {
    return _objc_msgSend_188(
        this.pointer, _sel_setDelegate_, value?.pointer ?? ffi.nullptr);
  }

  objc.NSProgress get progress {
    final _ret = _objc_msgSend_347(this.pointer, _sel_progress);
    return objc.NSProgress.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSDate? get earliestBeginDate {
    final _ret = _objc_msgSend_116(this.pointer, _sel_earliestBeginDate);
    return _ret.address == 0
        ? null
        : objc.NSDate.castFromPointer(_ret, retain: true, release: true);
  }

  set earliestBeginDate(objc.NSDate? value) {
    return _objc_msgSend_162(this.pointer, _sel_setEarliestBeginDate_,
        value?.pointer ?? ffi.nullptr);
  }

  int get countOfBytesClientExpectsToSend {
    return _objc_msgSend_348(
        this.pointer, _sel_countOfBytesClientExpectsToSend);
  }

  set countOfBytesClientExpectsToSend(int value) {
    return _objc_msgSend_349(
        this.pointer, _sel_setCountOfBytesClientExpectsToSend_, value);
  }

  int get countOfBytesClientExpectsToReceive {
    return _objc_msgSend_348(
        this.pointer, _sel_countOfBytesClientExpectsToReceive);
  }

  set countOfBytesClientExpectsToReceive(int value) {
    return _objc_msgSend_349(
        this.pointer, _sel_setCountOfBytesClientExpectsToReceive_, value);
  }

  int get countOfBytesSent {
    return _objc_msgSend_348(this.pointer, _sel_countOfBytesSent);
  }

  int get countOfBytesReceived {
    return _objc_msgSend_348(this.pointer, _sel_countOfBytesReceived);
  }

  int get countOfBytesExpectedToSend {
    return _objc_msgSend_348(this.pointer, _sel_countOfBytesExpectedToSend);
  }

  int get countOfBytesExpectedToReceive {
    return _objc_msgSend_348(this.pointer, _sel_countOfBytesExpectedToReceive);
  }

  objc.NSString? get taskDescription {
    final _ret = _objc_msgSend_13(this.pointer, _sel_taskDescription);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  set taskDescription(objc.NSString? value) {
    return _objc_msgSend_46(
        this.pointer, _sel_setTaskDescription_, value?.pointer ?? ffi.nullptr);
  }

  void cancel() {
    _objc_msgSend_82(this.pointer, _sel_cancel);
  }

  int get state {
    return _objc_msgSend_350(this.pointer, _sel_state);
  }

  objc.NSError? get error {
    final _ret = _objc_msgSend_328(this.pointer, _sel_error);
    return _ret.address == 0
        ? null
        : objc.NSError.castFromPointer(_ret, retain: true, release: true);
  }

  void suspend() {
    _objc_msgSend_82(this.pointer, _sel_suspend);
  }

  void resume() {
    _objc_msgSend_82(this.pointer, _sel_resume);
  }

  double get priority {
    return objc.useMsgSendVariants
        ? _objc_msgSend_351Fpret(this.pointer, _sel_priority)
        : _objc_msgSend_351(this.pointer, _sel_priority);
  }

  set priority(double value) {
    return _objc_msgSend_352(this.pointer, _sel_setPriority_, value);
  }

  bool get prefersIncrementalDelivery {
    return _objc_msgSend_7(this.pointer, _sel_prefersIncrementalDelivery);
  }

  set prefersIncrementalDelivery(bool value) {
    return _objc_msgSend_41(
        this.pointer, _sel_setPrefersIncrementalDelivery_, value);
  }

  @override
  NSURLSessionTask init() {
    final _ret = _objc_msgSend_40(this.pointer, _sel_init);
    return NSURLSessionTask.castFromPointer(_ret, retain: true, release: true);
  }

  static NSURLSessionTask new1() {
    final _ret = _objc_msgSend_40(_class_NSURLSessionTask, _sel_new);
    return NSURLSessionTask.castFromPointer(_ret, retain: false, release: true);
  }

  static NSURLSessionTask allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_47(_class_NSURLSessionTask, _sel_allocWithZone_, zone);
    return NSURLSessionTask.castFromPointer(_ret, retain: false, release: true);
  }

  static NSURLSessionTask alloc() {
    final _ret = _objc_msgSend_40(_class_NSURLSessionTask, _sel_alloc);
    return NSURLSessionTask.castFromPointer(_ret, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.NSObject aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.NSObject? anArgument) {
    _objc_msgSend_48(
        _class_NSURLSessionTask,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  static void cancelPreviousPerformRequestsWithTarget_(objc.NSObject aTarget) {
    _objc_msgSend_49(_class_NSURLSessionTask,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_7(
        _class_NSURLSessionTask, _sel_accessInstanceVariablesDirectly);
  }

  static bool useStoredAccessor() {
    return _objc_msgSend_7(_class_NSURLSessionTask, _sel_useStoredAccessor);
  }

  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_50(_class_NSURLSessionTask,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_51(_class_NSURLSessionTask,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_52(
        _class_NSURLSessionTask,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_6(
        _class_NSURLSessionTask, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSObject classForKeyedUnarchiver() {
    final _ret =
        _objc_msgSend_40(_class_NSURLSessionTask, _sel_classForKeyedUnarchiver);
    return objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }
}

late final _class_NSURLSessionTask = objc.getClass("NSURLSessionTask");
late final _sel_taskIdentifier = objc.registerName("taskIdentifier");

class NSURLRequest extends objc.NSObject {
  NSURLRequest._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSURLRequest] that points to the same underlying object as [other].
  NSURLRequest.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSURLRequest] that wraps the given raw object pointer.
  NSURLRequest.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSURLRequest].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSURLRequest);
  }

  static NSURLRequest requestWithURL_(objc.NSURL URL) {
    final _ret = _objc_msgSend_320(
        _class_NSURLRequest, _sel_requestWithURL_, URL.pointer);
    return NSURLRequest.castFromPointer(_ret, retain: true, release: true);
  }

  static bool getSupportsSecureCoding() {
    return _objc_msgSend_7(_class_NSURLRequest, _sel_supportsSecureCoding);
  }

  static NSURLRequest requestWithURL_cachePolicy_timeoutInterval_(
      objc.NSURL URL, int cachePolicy, double timeoutInterval) {
    final _ret = _objc_msgSend_321(
        _class_NSURLRequest,
        _sel_requestWithURL_cachePolicy_timeoutInterval_,
        URL.pointer,
        cachePolicy,
        timeoutInterval);
    return NSURLRequest.castFromPointer(_ret, retain: true, release: true);
  }

  NSURLRequest initWithURL_(objc.NSURL URL) {
    final _ret =
        _objc_msgSend_320(this.pointer, _sel_initWithURL_, URL.pointer);
    return NSURLRequest.castFromPointer(_ret, retain: true, release: true);
  }

  NSURLRequest initWithURL_cachePolicy_timeoutInterval_(
      objc.NSURL URL, int cachePolicy, double timeoutInterval) {
    final _ret = _objc_msgSend_321(
        this.pointer,
        _sel_initWithURL_cachePolicy_timeoutInterval_,
        URL.pointer,
        cachePolicy,
        timeoutInterval);
    return NSURLRequest.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSURL? get URL {
    final _ret = _objc_msgSend_10(this.pointer, _sel_URL);
    return _ret.address == 0
        ? null
        : objc.NSURL.castFromPointer(_ret, retain: true, release: true);
  }

  int get cachePolicy {
    return _objc_msgSend_322(this.pointer, _sel_cachePolicy);
  }

  double get timeoutInterval {
    return objc.useMsgSendVariants
        ? _objc_msgSend_115Fpret(this.pointer, _sel_timeoutInterval)
        : _objc_msgSend_115(this.pointer, _sel_timeoutInterval);
  }

  objc.NSURL? get mainDocumentURL {
    final _ret = _objc_msgSend_10(this.pointer, _sel_mainDocumentURL);
    return _ret.address == 0
        ? null
        : objc.NSURL.castFromPointer(_ret, retain: true, release: true);
  }

  int get networkServiceType {
    return _objc_msgSend_323(this.pointer, _sel_networkServiceType);
  }

  bool get allowsCellularAccess {
    return _objc_msgSend_7(this.pointer, _sel_allowsCellularAccess);
  }

  bool get allowsExpensiveNetworkAccess {
    return _objc_msgSend_7(this.pointer, _sel_allowsExpensiveNetworkAccess);
  }

  bool get allowsConstrainedNetworkAccess {
    return _objc_msgSend_7(this.pointer, _sel_allowsConstrainedNetworkAccess);
  }

  bool get assumesHTTP3Capable {
    return _objc_msgSend_7(this.pointer, _sel_assumesHTTP3Capable);
  }

  int get attribution {
    return _objc_msgSend_324(this.pointer, _sel_attribution);
  }

  bool get requiresDNSSECValidation {
    return _objc_msgSend_7(this.pointer, _sel_requiresDNSSECValidation);
  }

  objc.NSString? get HTTPMethod {
    final _ret = _objc_msgSend_13(this.pointer, _sel_HTTPMethod);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSDictionary? get allHTTPHeaderFields {
    final _ret = _objc_msgSend_65(this.pointer, _sel_allHTTPHeaderFields);
    return _ret.address == 0
        ? null
        : objc.NSDictionary.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSString? valueForHTTPHeaderField_(objc.NSString field) {
    final _ret = _objc_msgSend_14(
        this.pointer, _sel_valueForHTTPHeaderField_, field.pointer);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSData? get HTTPBody {
    final _ret = _objc_msgSend_325(this.pointer, _sel_HTTPBody);
    return _ret.address == 0
        ? null
        : objc.NSData.castFromPointer(_ret, retain: true, release: true);
  }

  NSInputStream? get HTTPBodyStream {
    final _ret = _objc_msgSend_342(this.pointer, _sel_HTTPBodyStream);
    return _ret.address == 0
        ? null
        : NSInputStream.castFromPointer(_ret, retain: true, release: true);
  }

  bool get HTTPShouldHandleCookies {
    return _objc_msgSend_7(this.pointer, _sel_HTTPShouldHandleCookies);
  }

  bool get HTTPShouldUsePipelining {
    return _objc_msgSend_7(this.pointer, _sel_HTTPShouldUsePipelining);
  }

  @override
  NSURLRequest init() {
    final _ret = _objc_msgSend_40(this.pointer, _sel_init);
    return NSURLRequest.castFromPointer(_ret, retain: true, release: true);
  }

  static NSURLRequest new1() {
    final _ret = _objc_msgSend_40(_class_NSURLRequest, _sel_new);
    return NSURLRequest.castFromPointer(_ret, retain: false, release: true);
  }

  static NSURLRequest allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_47(_class_NSURLRequest, _sel_allocWithZone_, zone);
    return NSURLRequest.castFromPointer(_ret, retain: false, release: true);
  }

  static NSURLRequest alloc() {
    final _ret = _objc_msgSend_40(_class_NSURLRequest, _sel_alloc);
    return NSURLRequest.castFromPointer(_ret, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.NSObject aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.NSObject? anArgument) {
    _objc_msgSend_48(
        _class_NSURLRequest,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  static void cancelPreviousPerformRequestsWithTarget_(objc.NSObject aTarget) {
    _objc_msgSend_49(_class_NSURLRequest,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_7(
        _class_NSURLRequest, _sel_accessInstanceVariablesDirectly);
  }

  static bool useStoredAccessor() {
    return _objc_msgSend_7(_class_NSURLRequest, _sel_useStoredAccessor);
  }

  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_50(_class_NSURLRequest,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_51(_class_NSURLRequest,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_52(
        _class_NSURLRequest,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_6(
        _class_NSURLRequest, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSObject classForKeyedUnarchiver() {
    final _ret =
        _objc_msgSend_40(_class_NSURLRequest, _sel_classForKeyedUnarchiver);
    return objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }
}

late final _class_NSURLRequest = objc.getClass("NSURLRequest");
late final _sel_requestWithURL_ = objc.registerName("requestWithURL:");
final _objc_msgSend_320 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_supportsSecureCoding =
    objc.registerName("supportsSecureCoding");

abstract class NSURLRequestCachePolicy {
  static const int NSURLRequestUseProtocolCachePolicy = 0;
  static const int NSURLRequestReloadIgnoringLocalCacheData = 1;
  static const int NSURLRequestReloadIgnoringLocalAndRemoteCacheData = 4;
  static const int NSURLRequestReloadIgnoringCacheData = 1;
  static const int NSURLRequestReturnCacheDataElseLoad = 2;
  static const int NSURLRequestReturnCacheDataDontLoad = 3;
  static const int NSURLRequestReloadRevalidatingCacheData = 5;
}

late final _sel_requestWithURL_cachePolicy_timeoutInterval_ =
    objc.registerName("requestWithURL:cachePolicy:timeoutInterval:");
final _objc_msgSend_321 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Int32,
                ffi.Double)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            double)>();
late final _sel_initWithURL_cachePolicy_timeoutInterval_ =
    objc.registerName("initWithURL:cachePolicy:timeoutInterval:");
late final _sel_URL = objc.registerName("URL");
late final _sel_cachePolicy = objc.registerName("cachePolicy");
final _objc_msgSend_322 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Int32 Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_timeoutInterval = objc.registerName("timeoutInterval");
late final _sel_mainDocumentURL = objc.registerName("mainDocumentURL");

abstract class NSURLRequestNetworkServiceType {
  static const int NSURLNetworkServiceTypeDefault = 0;
  static const int NSURLNetworkServiceTypeVoIP = 1;
  static const int NSURLNetworkServiceTypeVideo = 2;
  static const int NSURLNetworkServiceTypeBackground = 3;
  static const int NSURLNetworkServiceTypeVoice = 4;
  static const int NSURLNetworkServiceTypeResponsiveData = 6;
  static const int NSURLNetworkServiceTypeAVStreaming = 8;
  static const int NSURLNetworkServiceTypeResponsiveAV = 9;
  static const int NSURLNetworkServiceTypeCallSignaling = 11;
}

late final _sel_networkServiceType = objc.registerName("networkServiceType");
final _objc_msgSend_323 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Int32 Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_allowsCellularAccess =
    objc.registerName("allowsCellularAccess");
late final _sel_allowsExpensiveNetworkAccess =
    objc.registerName("allowsExpensiveNetworkAccess");
late final _sel_allowsConstrainedNetworkAccess =
    objc.registerName("allowsConstrainedNetworkAccess");
late final _sel_assumesHTTP3Capable = objc.registerName("assumesHTTP3Capable");

abstract class NSURLRequestAttribution {
  static const int NSURLRequestAttributionDeveloper = 0;
  static const int NSURLRequestAttributionUser = 1;
}

late final _sel_attribution = objc.registerName("attribution");
final _objc_msgSend_324 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Int32 Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_requiresDNSSECValidation =
    objc.registerName("requiresDNSSECValidation");
late final _sel_HTTPMethod = objc.registerName("HTTPMethod");
late final _sel_allHTTPHeaderFields = objc.registerName("allHTTPHeaderFields");
late final _sel_valueForHTTPHeaderField_ =
    objc.registerName("valueForHTTPHeaderField:");
late final _sel_HTTPBody = objc.registerName("HTTPBody");
final _objc_msgSend_325 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();

class NSInputStream extends NSStream {
  NSInputStream._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSInputStream] that points to the same underlying object as [other].
  NSInputStream.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSInputStream] that wraps the given raw object pointer.
  NSInputStream.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSInputStream].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSInputStream);
  }

  int read_maxLength_(ffi.Pointer<ffi.Uint8> buffer, int len) {
    return _objc_msgSend_329(this.pointer, _sel_read_maxLength_, buffer, len);
  }

  bool getBuffer_length_(ffi.Pointer<ffi.Pointer<ffi.Uint8>> buffer,
      ffi.Pointer<ffi.UnsignedLong> len) {
    return _objc_msgSend_339(this.pointer, _sel_getBuffer_length_, buffer, len);
  }

  bool get hasBytesAvailable {
    return _objc_msgSend_7(this.pointer, _sel_hasBytesAvailable);
  }

  NSInputStream initWithData_(objc.NSData data) {
    final _ret =
        _objc_msgSend_340(this.pointer, _sel_initWithData_, data.pointer);
    return NSInputStream.castFromPointer(_ret, retain: true, release: true);
  }

  NSInputStream? initWithURL_(objc.NSURL url) {
    final _ret = _objc_msgSend_3(this.pointer, _sel_initWithURL_, url.pointer);
    return _ret.address == 0
        ? null
        : NSInputStream.castFromPointer(_ret, retain: true, release: true);
  }

  NSInputStream? initWithFileAtPath_(objc.NSString path) {
    final _ret =
        _objc_msgSend_2(this.pointer, _sel_initWithFileAtPath_, path.pointer);
    return _ret.address == 0
        ? null
        : NSInputStream.castFromPointer(_ret, retain: true, release: true);
  }

  static NSInputStream? inputStreamWithData_(objc.NSData data) {
    final _ret = _objc_msgSend_341(
        _class_NSInputStream, _sel_inputStreamWithData_, data.pointer);
    return _ret.address == 0
        ? null
        : NSInputStream.castFromPointer(_ret, retain: true, release: true);
  }

  static NSInputStream? inputStreamWithFileAtPath_(objc.NSString path) {
    final _ret = _objc_msgSend_2(
        _class_NSInputStream, _sel_inputStreamWithFileAtPath_, path.pointer);
    return _ret.address == 0
        ? null
        : NSInputStream.castFromPointer(_ret, retain: true, release: true);
  }

  static NSInputStream? inputStreamWithURL_(objc.NSURL url) {
    final _ret = _objc_msgSend_3(
        _class_NSInputStream, _sel_inputStreamWithURL_, url.pointer);
    return _ret.address == 0
        ? null
        : NSInputStream.castFromPointer(_ret, retain: true, release: true);
  }

  static void getStreamsToHostWithName_port_inputStream_outputStream_(
      objc.NSString hostname,
      int port,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> inputStream,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outputStream) {
    _objc_msgSend_333(
        _class_NSInputStream,
        _sel_getStreamsToHostWithName_port_inputStream_outputStream_,
        hostname.pointer,
        port,
        inputStream,
        outputStream);
  }

  static void getStreamsToHost_port_inputStream_outputStream_(
      NSHost host,
      int port,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> inputStream,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outputStream) {
    _objc_msgSend_337(
        _class_NSInputStream,
        _sel_getStreamsToHost_port_inputStream_outputStream_,
        host.pointer,
        port,
        inputStream,
        outputStream);
  }

  static void getBoundStreamsWithBufferSize_inputStream_outputStream_(
      int bufferSize,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> inputStream,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outputStream) {
    _objc_msgSend_338(
        _class_NSInputStream,
        _sel_getBoundStreamsWithBufferSize_inputStream_outputStream_,
        bufferSize,
        inputStream,
        outputStream);
  }

  @override
  NSInputStream init() {
    final _ret = _objc_msgSend_40(this.pointer, _sel_init);
    return NSInputStream.castFromPointer(_ret, retain: true, release: true);
  }

  static NSInputStream new1() {
    final _ret = _objc_msgSend_40(_class_NSInputStream, _sel_new);
    return NSInputStream.castFromPointer(_ret, retain: false, release: true);
  }

  static NSInputStream allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_47(_class_NSInputStream, _sel_allocWithZone_, zone);
    return NSInputStream.castFromPointer(_ret, retain: false, release: true);
  }

  static NSInputStream alloc() {
    final _ret = _objc_msgSend_40(_class_NSInputStream, _sel_alloc);
    return NSInputStream.castFromPointer(_ret, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.NSObject aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.NSObject? anArgument) {
    _objc_msgSend_48(
        _class_NSInputStream,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  static void cancelPreviousPerformRequestsWithTarget_(objc.NSObject aTarget) {
    _objc_msgSend_49(_class_NSInputStream,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_7(
        _class_NSInputStream, _sel_accessInstanceVariablesDirectly);
  }

  static bool useStoredAccessor() {
    return _objc_msgSend_7(_class_NSInputStream, _sel_useStoredAccessor);
  }

  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_50(_class_NSInputStream,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_51(_class_NSInputStream,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_52(
        _class_NSInputStream,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_6(
        _class_NSInputStream, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSObject classForKeyedUnarchiver() {
    final _ret =
        _objc_msgSend_40(_class_NSInputStream, _sel_classForKeyedUnarchiver);
    return objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }
}

late final _class_NSInputStream = objc.getClass("NSInputStream");

class NSStream extends objc.NSObject {
  NSStream._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSStream] that points to the same underlying object as [other].
  NSStream.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSStream] that wraps the given raw object pointer.
  NSStream.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSStream].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(obj.pointer, _sel_isKindOfClass_, _class_NSStream);
  }

  void open() {
    _objc_msgSend_82(this.pointer, _sel_open);
  }

  void close() {
    _objc_msgSend_82(this.pointer, _sel_close);
  }

  objc.NSObject? get delegate {
    final _ret = _objc_msgSend_66(this.pointer, _sel_delegate);
    return _ret.address == 0
        ? null
        : objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }

  set delegate(objc.NSObject? value) {
    return _objc_msgSend_188(
        this.pointer, _sel_setDelegate_, value?.pointer ?? ffi.nullptr);
  }

  objc.NSObject? propertyForKey_(objc.NSString key) {
    final _ret =
        _objc_msgSend_2(this.pointer, _sel_propertyForKey_, key.pointer);
    return _ret.address == 0
        ? null
        : objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }

  bool setProperty_forKey_(objc.NSObject? property, objc.NSString key) {
    return _objc_msgSend_326(this.pointer, _sel_setProperty_forKey_,
        property?.pointer ?? ffi.nullptr, key.pointer);
  }

  void scheduleInRunLoop_forMode_(NSRunLoop aRunLoop, objc.NSString mode) {
    _objc_msgSend_216(this.pointer, _sel_scheduleInRunLoop_forMode_,
        aRunLoop.pointer, mode.pointer);
  }

  void removeFromRunLoop_forMode_(NSRunLoop aRunLoop, objc.NSString mode) {
    _objc_msgSend_216(this.pointer, _sel_removeFromRunLoop_forMode_,
        aRunLoop.pointer, mode.pointer);
  }

  int get streamStatus {
    return _objc_msgSend_327(this.pointer, _sel_streamStatus);
  }

  objc.NSError? get streamError {
    final _ret = _objc_msgSend_328(this.pointer, _sel_streamError);
    return _ret.address == 0
        ? null
        : objc.NSError.castFromPointer(_ret, retain: true, release: true);
  }

  static void getStreamsToHostWithName_port_inputStream_outputStream_(
      objc.NSString hostname,
      int port,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> inputStream,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outputStream) {
    _objc_msgSend_333(
        _class_NSStream,
        _sel_getStreamsToHostWithName_port_inputStream_outputStream_,
        hostname.pointer,
        port,
        inputStream,
        outputStream);
  }

  static void getStreamsToHost_port_inputStream_outputStream_(
      NSHost host,
      int port,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> inputStream,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outputStream) {
    _objc_msgSend_337(
        _class_NSStream,
        _sel_getStreamsToHost_port_inputStream_outputStream_,
        host.pointer,
        port,
        inputStream,
        outputStream);
  }

  static void getBoundStreamsWithBufferSize_inputStream_outputStream_(
      int bufferSize,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> inputStream,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outputStream) {
    _objc_msgSend_338(
        _class_NSStream,
        _sel_getBoundStreamsWithBufferSize_inputStream_outputStream_,
        bufferSize,
        inputStream,
        outputStream);
  }

  @override
  NSStream init() {
    final _ret = _objc_msgSend_40(this.pointer, _sel_init);
    return NSStream.castFromPointer(_ret, retain: true, release: true);
  }

  static NSStream new1() {
    final _ret = _objc_msgSend_40(_class_NSStream, _sel_new);
    return NSStream.castFromPointer(_ret, retain: false, release: true);
  }

  static NSStream allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_47(_class_NSStream, _sel_allocWithZone_, zone);
    return NSStream.castFromPointer(_ret, retain: false, release: true);
  }

  static NSStream alloc() {
    final _ret = _objc_msgSend_40(_class_NSStream, _sel_alloc);
    return NSStream.castFromPointer(_ret, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.NSObject aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.NSObject? anArgument) {
    _objc_msgSend_48(
        _class_NSStream,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  static void cancelPreviousPerformRequestsWithTarget_(objc.NSObject aTarget) {
    _objc_msgSend_49(_class_NSStream,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_7(
        _class_NSStream, _sel_accessInstanceVariablesDirectly);
  }

  static bool useStoredAccessor() {
    return _objc_msgSend_7(_class_NSStream, _sel_useStoredAccessor);
  }

  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_50(_class_NSStream,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_51(_class_NSStream,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_52(
        _class_NSStream,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret =
        _objc_msgSend_6(_class_NSStream, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSObject classForKeyedUnarchiver() {
    final _ret =
        _objc_msgSend_40(_class_NSStream, _sel_classForKeyedUnarchiver);
    return objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }
}

late final _class_NSStream = objc.getClass("NSStream");
late final _sel_open = objc.registerName("open");
late final _sel_close = objc.registerName("close");
late final _sel_propertyForKey_ = objc.registerName("propertyForKey:");
late final _sel_setProperty_forKey_ = objc.registerName("setProperty:forKey:");
final _objc_msgSend_326 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();

abstract class NSStreamStatus {
  static const int NSStreamStatusNotOpen = 0;
  static const int NSStreamStatusOpening = 1;
  static const int NSStreamStatusOpen = 2;
  static const int NSStreamStatusReading = 3;
  static const int NSStreamStatusWriting = 4;
  static const int NSStreamStatusAtEnd = 5;
  static const int NSStreamStatusClosed = 6;
  static const int NSStreamStatusError = 7;
}

late final _sel_streamStatus = objc.registerName("streamStatus");
final _objc_msgSend_327 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Int32 Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_streamError = objc.registerName("streamError");
final _objc_msgSend_328 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();

class NSOutputStream extends NSStream {
  NSOutputStream._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSOutputStream] that points to the same underlying object as [other].
  NSOutputStream.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSOutputStream] that wraps the given raw object pointer.
  NSOutputStream.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSOutputStream].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSOutputStream);
  }

  int write_maxLength_(ffi.Pointer<ffi.Uint8> buffer, int len) {
    return _objc_msgSend_329(this.pointer, _sel_write_maxLength_, buffer, len);
  }

  bool get hasSpaceAvailable {
    return _objc_msgSend_7(this.pointer, _sel_hasSpaceAvailable);
  }

  NSOutputStream initToMemory() {
    final _ret = _objc_msgSend_40(this.pointer, _sel_initToMemory);
    return NSOutputStream.castFromPointer(_ret, retain: true, release: true);
  }

  NSOutputStream initToBuffer_capacity_(
      ffi.Pointer<ffi.Uint8> buffer, int capacity) {
    final _ret = _objc_msgSend_330(
        this.pointer, _sel_initToBuffer_capacity_, buffer, capacity);
    return NSOutputStream.castFromPointer(_ret, retain: true, release: true);
  }

  NSOutputStream? initWithURL_append_(objc.NSURL url, bool shouldAppend) {
    final _ret = _objc_msgSend_331(
        this.pointer, _sel_initWithURL_append_, url.pointer, shouldAppend);
    return _ret.address == 0
        ? null
        : NSOutputStream.castFromPointer(_ret, retain: true, release: true);
  }

  NSOutputStream? initToFileAtPath_append_(
      objc.NSString path, bool shouldAppend) {
    final _ret = _objc_msgSend_332(this.pointer, _sel_initToFileAtPath_append_,
        path.pointer, shouldAppend);
    return _ret.address == 0
        ? null
        : NSOutputStream.castFromPointer(_ret, retain: true, release: true);
  }

  static NSOutputStream outputStreamToMemory() {
    final _ret =
        _objc_msgSend_40(_class_NSOutputStream, _sel_outputStreamToMemory);
    return NSOutputStream.castFromPointer(_ret, retain: true, release: true);
  }

  static NSOutputStream outputStreamToBuffer_capacity_(
      ffi.Pointer<ffi.Uint8> buffer, int capacity) {
    final _ret = _objc_msgSend_330(_class_NSOutputStream,
        _sel_outputStreamToBuffer_capacity_, buffer, capacity);
    return NSOutputStream.castFromPointer(_ret, retain: true, release: true);
  }

  static NSOutputStream outputStreamToFileAtPath_append_(
      objc.NSString path, bool shouldAppend) {
    final _ret = _objc_msgSend_164(_class_NSOutputStream,
        _sel_outputStreamToFileAtPath_append_, path.pointer, shouldAppend);
    return NSOutputStream.castFromPointer(_ret, retain: true, release: true);
  }

  static NSOutputStream? outputStreamWithURL_append_(
      objc.NSURL url, bool shouldAppend) {
    final _ret = _objc_msgSend_331(_class_NSOutputStream,
        _sel_outputStreamWithURL_append_, url.pointer, shouldAppend);
    return _ret.address == 0
        ? null
        : NSOutputStream.castFromPointer(_ret, retain: true, release: true);
  }

  static void getStreamsToHostWithName_port_inputStream_outputStream_(
      objc.NSString hostname,
      int port,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> inputStream,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outputStream) {
    _objc_msgSend_333(
        _class_NSOutputStream,
        _sel_getStreamsToHostWithName_port_inputStream_outputStream_,
        hostname.pointer,
        port,
        inputStream,
        outputStream);
  }

  static void getStreamsToHost_port_inputStream_outputStream_(
      NSHost host,
      int port,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> inputStream,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outputStream) {
    _objc_msgSend_337(
        _class_NSOutputStream,
        _sel_getStreamsToHost_port_inputStream_outputStream_,
        host.pointer,
        port,
        inputStream,
        outputStream);
  }

  static void getBoundStreamsWithBufferSize_inputStream_outputStream_(
      int bufferSize,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> inputStream,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outputStream) {
    _objc_msgSend_338(
        _class_NSOutputStream,
        _sel_getBoundStreamsWithBufferSize_inputStream_outputStream_,
        bufferSize,
        inputStream,
        outputStream);
  }

  @override
  NSOutputStream init() {
    final _ret = _objc_msgSend_40(this.pointer, _sel_init);
    return NSOutputStream.castFromPointer(_ret, retain: true, release: true);
  }

  static NSOutputStream new1() {
    final _ret = _objc_msgSend_40(_class_NSOutputStream, _sel_new);
    return NSOutputStream.castFromPointer(_ret, retain: false, release: true);
  }

  static NSOutputStream allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_47(_class_NSOutputStream, _sel_allocWithZone_, zone);
    return NSOutputStream.castFromPointer(_ret, retain: false, release: true);
  }

  static NSOutputStream alloc() {
    final _ret = _objc_msgSend_40(_class_NSOutputStream, _sel_alloc);
    return NSOutputStream.castFromPointer(_ret, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.NSObject aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.NSObject? anArgument) {
    _objc_msgSend_48(
        _class_NSOutputStream,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  static void cancelPreviousPerformRequestsWithTarget_(objc.NSObject aTarget) {
    _objc_msgSend_49(_class_NSOutputStream,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_7(
        _class_NSOutputStream, _sel_accessInstanceVariablesDirectly);
  }

  static bool useStoredAccessor() {
    return _objc_msgSend_7(_class_NSOutputStream, _sel_useStoredAccessor);
  }

  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_50(_class_NSOutputStream,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_51(_class_NSOutputStream,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_52(
        _class_NSOutputStream,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_6(
        _class_NSOutputStream, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSObject classForKeyedUnarchiver() {
    final _ret =
        _objc_msgSend_40(_class_NSOutputStream, _sel_classForKeyedUnarchiver);
    return objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }
}

late final _class_NSOutputStream = objc.getClass("NSOutputStream");
late final _sel_write_maxLength_ = objc.registerName("write:maxLength:");
final _objc_msgSend_329 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Long Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<ffi.Uint8>,
                ffi.UnsignedLong)>>()
    .asFunction<
        int Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<ffi.Uint8>, int)>();
late final _sel_hasSpaceAvailable = objc.registerName("hasSpaceAvailable");
late final _sel_initToMemory = objc.registerName("initToMemory");
late final _sel_initToBuffer_capacity_ =
    objc.registerName("initToBuffer:capacity:");
final _objc_msgSend_330 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<ffi.Uint8>,
                ffi.UnsignedLong)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<ffi.Uint8>, int)>();
late final _sel_initWithURL_append_ = objc.registerName("initWithURL:append:");
final _objc_msgSend_331 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Bool)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            bool)>();
late final _sel_initToFileAtPath_append_ =
    objc.registerName("initToFileAtPath:append:");
final _objc_msgSend_332 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Bool)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            bool)>();
late final _sel_outputStreamToMemory =
    objc.registerName("outputStreamToMemory");
late final _sel_outputStreamToBuffer_capacity_ =
    objc.registerName("outputStreamToBuffer:capacity:");
late final _sel_outputStreamToFileAtPath_append_ =
    objc.registerName("outputStreamToFileAtPath:append:");
late final _sel_outputStreamWithURL_append_ =
    objc.registerName("outputStreamWithURL:append:");
late final _sel_getStreamsToHostWithName_port_inputStream_outputStream_ = objc
    .registerName("getStreamsToHostWithName:port:inputStream:outputStream:");
final _objc_msgSend_333 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Long,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();

class NSHost extends objc.NSObject {
  NSHost._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSHost] that points to the same underlying object as [other].
  NSHost.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSHost] that wraps the given raw object pointer.
  NSHost.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSHost].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(obj.pointer, _sel_isKindOfClass_, _class_NSHost);
  }

  static NSHost currentHost() {
    final _ret = _objc_msgSend_40(_class_NSHost, _sel_currentHost);
    return NSHost.castFromPointer(_ret, retain: true, release: true);
  }

  static NSHost hostWithName_(objc.NSString? name) {
    final _ret = _objc_msgSend_334(
        _class_NSHost, _sel_hostWithName_, name?.pointer ?? ffi.nullptr);
    return NSHost.castFromPointer(_ret, retain: true, release: true);
  }

  static NSHost hostWithAddress_(objc.NSString address) {
    final _ret =
        _objc_msgSend_35(_class_NSHost, _sel_hostWithAddress_, address.pointer);
    return NSHost.castFromPointer(_ret, retain: true, release: true);
  }

  bool isEqualToHost_(NSHost aHost) {
    return _objc_msgSend_335(this.pointer, _sel_isEqualToHost_, aHost.pointer);
  }

  objc.NSString? get name {
    final _ret = _objc_msgSend_13(this.pointer, _sel_name);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSArray get names {
    final _ret = _objc_msgSend_6(this.pointer, _sel_names);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSString? get address {
    final _ret = _objc_msgSend_13(this.pointer, _sel_address);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSArray get addresses {
    final _ret = _objc_msgSend_6(this.pointer, _sel_addresses);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSString? get localizedName {
    final _ret = _objc_msgSend_13(this.pointer, _sel_localizedName);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  static void setHostCacheEnabled_(bool flag) {
    _objc_msgSend_336(_class_NSHost, _sel_setHostCacheEnabled_, flag);
  }

  static bool isHostCacheEnabled() {
    return _objc_msgSend_7(_class_NSHost, _sel_isHostCacheEnabled);
  }

  static void flushHostCache() {
    _objc_msgSend_82(_class_NSHost, _sel_flushHostCache);
  }

  @override
  NSHost init() {
    final _ret = _objc_msgSend_40(this.pointer, _sel_init);
    return NSHost.castFromPointer(_ret, retain: true, release: true);
  }

  static NSHost new1() {
    final _ret = _objc_msgSend_40(_class_NSHost, _sel_new);
    return NSHost.castFromPointer(_ret, retain: false, release: true);
  }

  static NSHost allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_47(_class_NSHost, _sel_allocWithZone_, zone);
    return NSHost.castFromPointer(_ret, retain: false, release: true);
  }

  static NSHost alloc() {
    final _ret = _objc_msgSend_40(_class_NSHost, _sel_alloc);
    return NSHost.castFromPointer(_ret, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.NSObject aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.NSObject? anArgument) {
    _objc_msgSend_48(
        _class_NSHost,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  static void cancelPreviousPerformRequestsWithTarget_(objc.NSObject aTarget) {
    _objc_msgSend_49(_class_NSHost,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_7(_class_NSHost, _sel_accessInstanceVariablesDirectly);
  }

  static bool useStoredAccessor() {
    return _objc_msgSend_7(_class_NSHost, _sel_useStoredAccessor);
  }

  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_50(_class_NSHost,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_51(
        _class_NSHost, _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_52(
        _class_NSHost,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret =
        _objc_msgSend_6(_class_NSHost, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSObject classForKeyedUnarchiver() {
    final _ret = _objc_msgSend_40(_class_NSHost, _sel_classForKeyedUnarchiver);
    return objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }
}

late final _class_NSHost = objc.getClass("NSHost");
late final _sel_currentHost = objc.registerName("currentHost");
late final _sel_hostWithName_ = objc.registerName("hostWithName:");
final _objc_msgSend_334 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_hostWithAddress_ = objc.registerName("hostWithAddress:");
late final _sel_isEqualToHost_ = objc.registerName("isEqualToHost:");
final _objc_msgSend_335 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        bool Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_names = objc.registerName("names");
late final _sel_address = objc.registerName("address");
late final _sel_addresses = objc.registerName("addresses");
late final _sel_localizedName = objc.registerName("localizedName");
late final _sel_setHostCacheEnabled_ =
    objc.registerName("setHostCacheEnabled:");
final _objc_msgSend_336 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Bool)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, bool)>();
late final _sel_isHostCacheEnabled = objc.registerName("isHostCacheEnabled");
late final _sel_flushHostCache = objc.registerName("flushHostCache");
late final _sel_getStreamsToHost_port_inputStream_outputStream_ =
    objc.registerName("getStreamsToHost:port:inputStream:outputStream:");
final _objc_msgSend_337 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Long,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_getBoundStreamsWithBufferSize_inputStream_outputStream_ = objc
    .registerName("getBoundStreamsWithBufferSize:inputStream:outputStream:");
final _objc_msgSend_338 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.UnsignedLong,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_read_maxLength_ = objc.registerName("read:maxLength:");
late final _sel_getBuffer_length_ = objc.registerName("getBuffer:length:");
final _objc_msgSend_339 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
                ffi.Pointer<ffi.UnsignedLong>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
            ffi.Pointer<ffi.UnsignedLong>)>();
late final _sel_hasBytesAvailable = objc.registerName("hasBytesAvailable");
late final _sel_initWithData_ = objc.registerName("initWithData:");
final _objc_msgSend_340 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_initWithFileAtPath_ = objc.registerName("initWithFileAtPath:");
late final _sel_inputStreamWithData_ =
    objc.registerName("inputStreamWithData:");
final _objc_msgSend_341 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_inputStreamWithFileAtPath_ =
    objc.registerName("inputStreamWithFileAtPath:");
late final _sel_inputStreamWithURL_ = objc.registerName("inputStreamWithURL:");
late final _sel_HTTPBodyStream = objc.registerName("HTTPBodyStream");
final _objc_msgSend_342 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_HTTPShouldHandleCookies =
    objc.registerName("HTTPShouldHandleCookies");
late final _sel_HTTPShouldUsePipelining =
    objc.registerName("HTTPShouldUsePipelining");
late final _sel_originalRequest = objc.registerName("originalRequest");
final _objc_msgSend_343 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_currentRequest = objc.registerName("currentRequest");

class NSURLResponse extends objc.NSObject {
  NSURLResponse._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSURLResponse] that points to the same underlying object as [other].
  NSURLResponse.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSURLResponse] that wraps the given raw object pointer.
  NSURLResponse.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSURLResponse].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSURLResponse);
  }

  NSURLResponse initWithURL_MIMEType_expectedContentLength_textEncodingName_(
      objc.NSURL URL,
      objc.NSString? MIMEType,
      int length,
      objc.NSString? name) {
    final _ret = _objc_msgSend_344(
        this.pointer,
        _sel_initWithURL_MIMEType_expectedContentLength_textEncodingName_,
        URL.pointer,
        MIMEType?.pointer ?? ffi.nullptr,
        length,
        name?.pointer ?? ffi.nullptr);
    return NSURLResponse.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSURL? get URL {
    final _ret = _objc_msgSend_10(this.pointer, _sel_URL);
    return _ret.address == 0
        ? null
        : objc.NSURL.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSString? get MIMEType {
    final _ret = _objc_msgSend_13(this.pointer, _sel_MIMEType);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  int get expectedContentLength {
    return _objc_msgSend_345(this.pointer, _sel_expectedContentLength);
  }

  objc.NSString? get textEncodingName {
    final _ret = _objc_msgSend_13(this.pointer, _sel_textEncodingName);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSString? get suggestedFilename {
    final _ret = _objc_msgSend_13(this.pointer, _sel_suggestedFilename);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  @override
  NSURLResponse init() {
    final _ret = _objc_msgSend_40(this.pointer, _sel_init);
    return NSURLResponse.castFromPointer(_ret, retain: true, release: true);
  }

  static NSURLResponse new1() {
    final _ret = _objc_msgSend_40(_class_NSURLResponse, _sel_new);
    return NSURLResponse.castFromPointer(_ret, retain: false, release: true);
  }

  static NSURLResponse allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_47(_class_NSURLResponse, _sel_allocWithZone_, zone);
    return NSURLResponse.castFromPointer(_ret, retain: false, release: true);
  }

  static NSURLResponse alloc() {
    final _ret = _objc_msgSend_40(_class_NSURLResponse, _sel_alloc);
    return NSURLResponse.castFromPointer(_ret, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.NSObject aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.NSObject? anArgument) {
    _objc_msgSend_48(
        _class_NSURLResponse,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  static void cancelPreviousPerformRequestsWithTarget_(objc.NSObject aTarget) {
    _objc_msgSend_49(_class_NSURLResponse,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_7(
        _class_NSURLResponse, _sel_accessInstanceVariablesDirectly);
  }

  static bool useStoredAccessor() {
    return _objc_msgSend_7(_class_NSURLResponse, _sel_useStoredAccessor);
  }

  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_50(_class_NSURLResponse,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_51(_class_NSURLResponse,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_52(
        _class_NSURLResponse,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_6(
        _class_NSURLResponse, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSObject classForKeyedUnarchiver() {
    final _ret =
        _objc_msgSend_40(_class_NSURLResponse, _sel_classForKeyedUnarchiver);
    return objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }
}

late final _class_NSURLResponse = objc.getClass("NSURLResponse");
late final _sel_initWithURL_MIMEType_expectedContentLength_textEncodingName_ =
    objc.registerName(
        "initWithURL:MIMEType:expectedContentLength:textEncodingName:");
final _objc_msgSend_344 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Long,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_MIMEType = objc.registerName("MIMEType");
late final _sel_expectedContentLength =
    objc.registerName("expectedContentLength");
final _objc_msgSend_345 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.LongLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_textEncodingName = objc.registerName("textEncodingName");
late final _sel_suggestedFilename = objc.registerName("suggestedFilename");
late final _sel_response = objc.registerName("response");
final _objc_msgSend_346 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_progress = objc.registerName("progress");
final _objc_msgSend_347 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_earliestBeginDate = objc.registerName("earliestBeginDate");
late final _sel_setEarliestBeginDate_ =
    objc.registerName("setEarliestBeginDate:");
late final _sel_countOfBytesClientExpectsToSend =
    objc.registerName("countOfBytesClientExpectsToSend");
final _objc_msgSend_348 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Int64 Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setCountOfBytesClientExpectsToSend_ =
    objc.registerName("setCountOfBytesClientExpectsToSend:");
final _objc_msgSend_349 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Int64)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_countOfBytesClientExpectsToReceive =
    objc.registerName("countOfBytesClientExpectsToReceive");
late final _sel_setCountOfBytesClientExpectsToReceive_ =
    objc.registerName("setCountOfBytesClientExpectsToReceive:");
late final _sel_countOfBytesSent = objc.registerName("countOfBytesSent");
late final _sel_countOfBytesReceived =
    objc.registerName("countOfBytesReceived");
late final _sel_countOfBytesExpectedToSend =
    objc.registerName("countOfBytesExpectedToSend");
late final _sel_countOfBytesExpectedToReceive =
    objc.registerName("countOfBytesExpectedToReceive");
late final _sel_taskDescription = objc.registerName("taskDescription");
late final _sel_setTaskDescription_ = objc.registerName("setTaskDescription:");
late final _sel_cancel = objc.registerName("cancel");

abstract class NSURLSessionTaskState {
  static const int NSURLSessionTaskStateRunning = 0;
  static const int NSURLSessionTaskStateSuspended = 1;
  static const int NSURLSessionTaskStateCanceling = 2;
  static const int NSURLSessionTaskStateCompleted = 3;
}

late final _sel_state = objc.registerName("state");
final _objc_msgSend_350 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Int32 Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_error = objc.registerName("error");
late final _sel_suspend = objc.registerName("suspend");
late final _sel_resume = objc.registerName("resume");
late final _sel_priority = objc.registerName("priority");
final _objc_msgSend_351 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Float Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        double Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
final _objc_msgSend_351Fpret = objc.msgSendFpretPointer
    .cast<
        ffi.NativeFunction<
            ffi.Float Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        double Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setPriority_ = objc.registerName("setPriority:");
final _objc_msgSend_352 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Float)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, double)>();
late final _sel_prefersIncrementalDelivery =
    objc.registerName("prefersIncrementalDelivery");
late final _sel_setPrefersIncrementalDelivery_ =
    objc.registerName("setPrefersIncrementalDelivery:");
late final _sel_storeCookies_forTask_ =
    objc.registerName("storeCookies:forTask:");
final _objc_msgSend_353 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
void _ObjCBlock_ffiVoid_NSArray_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlock> block, ffi.Pointer<objc.ObjCObject> arg0) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0)>>()
        .asFunction<void Function(ffi.Pointer<objc.ObjCObject>)>()(arg0);
final _ObjCBlock_ffiVoid_NSArray_closureRegistry =
    <int, void Function(ffi.Pointer<objc.ObjCObject>)>{};
int _ObjCBlock_ffiVoid_NSArray_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void> _ObjCBlock_ffiVoid_NSArray_registerClosure(
    void Function(ffi.Pointer<objc.ObjCObject>) fn) {
  final id = ++_ObjCBlock_ffiVoid_NSArray_closureRegistryIndex;
  _ObjCBlock_ffiVoid_NSArray_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

void _ObjCBlock_ffiVoid_NSArray_closureTrampoline(
        ffi.Pointer<objc.ObjCBlock> block, ffi.Pointer<objc.ObjCObject> arg0) =>
    _ObjCBlock_ffiVoid_NSArray_closureRegistry[block.ref.target.address]!(arg0);

class ObjCBlock_ffiVoid_NSArray extends objc.ObjCBlockBase {
  ObjCBlock_ffiVoid_NSArray._(ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false, bool release = true})
      : super(pointer, retain: retain, release: release);

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_ffiVoid_NSArray castFromPointer(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = false}) {
    return ObjCBlock_ffiVoid_NSArray._(pointer,
        retain: retain, release: release);
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSArray.fromFunctionPointer(
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0)>>
          ptr)
      : this._(objc.newBlock(
            _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<objc.ObjCObject>)>(
                    _ObjCBlock_ffiVoid_NSArray_fnPtrTrampoline)
                .cast(),
            ptr.cast()));
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSArray.fromFunction(void Function(objc.NSArray?) fn)
      : this._(objc.newBlock(
            _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(
                            ffi.Pointer<objc.ObjCBlock>, ffi.Pointer<objc.ObjCObject>)>(
                    _ObjCBlock_ffiVoid_NSArray_closureTrampoline)
                .cast(),
            _ObjCBlock_ffiVoid_NSArray_registerClosure(
                (ffi.Pointer<objc.ObjCObject> arg0) => fn(arg0.address == 0
                    ? null
                    : objc.NSArray.castFromPointer(arg0,
                        retain: true, release: true)))));
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_NSArray.listener(void Function(objc.NSArray?) fn)
      : this._(objc.newBlock(
            (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                        ffi.Void Function(ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<objc.ObjCObject>)>.listener(
                    _ObjCBlock_ffiVoid_NSArray_closureTrampoline)
                  ..keepIsolateAlive = false)
                .nativeFunction
                .cast(),
            _ObjCBlock_ffiVoid_NSArray_registerClosure(
                (ffi.Pointer<objc.ObjCObject> arg0) => fn(arg0.address == 0
                    ? null
                    : objc.NSArray.castFromPointer(arg0, retain: true, release: true)))));
  static ffi.NativeCallable<
          ffi.Void Function(
              ffi.Pointer<objc.ObjCBlock>, ffi.Pointer<objc.ObjCObject>)>?
      _dartFuncListenerTrampoline;

  void call(objc.NSArray? arg0) => pointer.ref.invoke
          .cast<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<objc.ObjCBlock> block,
                      ffi.Pointer<objc.ObjCObject> arg0)>>()
          .asFunction<
              void Function(
                  ffi.Pointer<objc.ObjCBlock>, ffi.Pointer<objc.ObjCObject>)>()(
      pointer, arg0?.pointer ?? ffi.nullptr);
}

late final _sel_getCookiesForTask_completionHandler_ =
    objc.registerName("getCookiesForTask:completionHandler:");
final _objc_msgSend_354 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCBlock>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCBlock>)>();

class NSIndexPath extends objc.NSObject {
  NSIndexPath._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSIndexPath] that points to the same underlying object as [other].
  NSIndexPath.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSIndexPath] that wraps the given raw object pointer.
  NSIndexPath.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSIndexPath].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSIndexPath);
  }

  static NSIndexPath indexPathWithIndex_(int index) {
    final _ret =
        _objc_msgSend_355(_class_NSIndexPath, _sel_indexPathWithIndex_, index);
    return NSIndexPath.castFromPointer(_ret, retain: true, release: true);
  }

  static NSIndexPath indexPathWithIndexes_length_(
      ffi.Pointer<ffi.UnsignedLong> indexes, int length) {
    final _ret = _objc_msgSend_356(
        _class_NSIndexPath, _sel_indexPathWithIndexes_length_, indexes, length);
    return NSIndexPath.castFromPointer(_ret, retain: true, release: true);
  }

  NSIndexPath initWithIndexes_length_(
      ffi.Pointer<ffi.UnsignedLong> indexes, int length) {
    final _ret = _objc_msgSend_356(
        this.pointer, _sel_initWithIndexes_length_, indexes, length);
    return NSIndexPath.castFromPointer(_ret, retain: true, release: true);
  }

  NSIndexPath initWithIndex_(int index) {
    final _ret = _objc_msgSend_355(this.pointer, _sel_initWithIndex_, index);
    return NSIndexPath.castFromPointer(_ret, retain: true, release: true);
  }

  NSIndexPath indexPathByAddingIndex_(int index) {
    final _ret =
        _objc_msgSend_357(this.pointer, _sel_indexPathByAddingIndex_, index);
    return NSIndexPath.castFromPointer(_ret, retain: true, release: true);
  }

  NSIndexPath indexPathByRemovingLastIndex() {
    final _ret =
        _objc_msgSend_358(this.pointer, _sel_indexPathByRemovingLastIndex);
    return NSIndexPath.castFromPointer(_ret, retain: true, release: true);
  }

  int indexAtPosition_(int position) {
    return _objc_msgSend_359(this.pointer, _sel_indexAtPosition_, position);
  }

  int get length {
    return _objc_msgSend_29(this.pointer, _sel_length);
  }

  void getIndexes_range_(
      ffi.Pointer<ffi.UnsignedLong> indexes, _NSRange positionRange) {
    _objc_msgSend_360(
        this.pointer, _sel_getIndexes_range_, indexes, positionRange);
  }

  int compare_(NSIndexPath otherObject) {
    return _objc_msgSend_361(this.pointer, _sel_compare_, otherObject.pointer);
  }

  void getIndexes_(ffi.Pointer<ffi.UnsignedLong> indexes) {
    _objc_msgSend_362(this.pointer, _sel_getIndexes_, indexes);
  }

  @override
  NSIndexPath init() {
    final _ret = _objc_msgSend_40(this.pointer, _sel_init);
    return NSIndexPath.castFromPointer(_ret, retain: true, release: true);
  }

  static NSIndexPath new1() {
    final _ret = _objc_msgSend_40(_class_NSIndexPath, _sel_new);
    return NSIndexPath.castFromPointer(_ret, retain: false, release: true);
  }

  static NSIndexPath allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_47(_class_NSIndexPath, _sel_allocWithZone_, zone);
    return NSIndexPath.castFromPointer(_ret, retain: false, release: true);
  }

  static NSIndexPath alloc() {
    final _ret = _objc_msgSend_40(_class_NSIndexPath, _sel_alloc);
    return NSIndexPath.castFromPointer(_ret, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.NSObject aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.NSObject? anArgument) {
    _objc_msgSend_48(
        _class_NSIndexPath,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  static void cancelPreviousPerformRequestsWithTarget_(objc.NSObject aTarget) {
    _objc_msgSend_49(_class_NSIndexPath,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_7(
        _class_NSIndexPath, _sel_accessInstanceVariablesDirectly);
  }

  static bool useStoredAccessor() {
    return _objc_msgSend_7(_class_NSIndexPath, _sel_useStoredAccessor);
  }

  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_50(_class_NSIndexPath,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_51(_class_NSIndexPath,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_52(
        _class_NSIndexPath,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_6(
        _class_NSIndexPath, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSObject classForKeyedUnarchiver() {
    final _ret =
        _objc_msgSend_40(_class_NSIndexPath, _sel_classForKeyedUnarchiver);
    return objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }
}

late final _class_NSIndexPath = objc.getClass("NSIndexPath");
late final _sel_indexPathWithIndex_ = objc.registerName("indexPathWithIndex:");
final _objc_msgSend_355 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedLong)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_indexPathWithIndexes_length_ =
    objc.registerName("indexPathWithIndexes:length:");
final _objc_msgSend_356 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<ffi.UnsignedLong>,
                ffi.UnsignedLong)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<ffi.UnsignedLong>,
            int)>();
late final _sel_initWithIndexes_length_ =
    objc.registerName("initWithIndexes:length:");
late final _sel_initWithIndex_ = objc.registerName("initWithIndex:");
late final _sel_indexPathByAddingIndex_ =
    objc.registerName("indexPathByAddingIndex:");
final _objc_msgSend_357 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedLong)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_indexPathByRemovingLastIndex =
    objc.registerName("indexPathByRemovingLastIndex");
final _objc_msgSend_358 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_indexAtPosition_ = objc.registerName("indexAtPosition:");
final _objc_msgSend_359 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedLong)>>()
    .asFunction<
        int Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_getIndexes_range_ = objc.registerName("getIndexes:range:");
final _objc_msgSend_360 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<ffi.UnsignedLong>,
                _NSRange)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<ffi.UnsignedLong>,
            _NSRange)>();
late final _sel_compare_ = objc.registerName("compare:");
final _objc_msgSend_361 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Int32 Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        int Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_getIndexes_ = objc.registerName("getIndexes:");
final _objc_msgSend_362 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<ffi.UnsignedLong>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<ffi.UnsignedLong>)>();

class NSInflectionRule extends objc.NSObject {
  NSInflectionRule._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSInflectionRule] that points to the same underlying object as [other].
  NSInflectionRule.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSInflectionRule] that wraps the given raw object pointer.
  NSInflectionRule.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSInflectionRule].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSInflectionRule);
  }

  @override
  objc.NSObject init() {
    final _ret = _objc_msgSend_40(this.pointer, _sel_init);
    return objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }

  static NSInflectionRule getAutomaticRule() {
    final _ret = _objc_msgSend_363(_class_NSInflectionRule, _sel_automaticRule);
    return NSInflectionRule.castFromPointer(_ret, retain: true, release: true);
  }

  static bool canInflectLanguage_(objc.NSString language) {
    return _objc_msgSend_51(
        _class_NSInflectionRule, _sel_canInflectLanguage_, language.pointer);
  }

  static bool getCanInflectPreferredLocalization() {
    return _objc_msgSend_7(
        _class_NSInflectionRule, _sel_canInflectPreferredLocalization);
  }

  static NSInflectionRule new1() {
    final _ret = _objc_msgSend_40(_class_NSInflectionRule, _sel_new);
    return NSInflectionRule.castFromPointer(_ret, retain: false, release: true);
  }

  static NSInflectionRule allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_47(_class_NSInflectionRule, _sel_allocWithZone_, zone);
    return NSInflectionRule.castFromPointer(_ret, retain: false, release: true);
  }

  static NSInflectionRule alloc() {
    final _ret = _objc_msgSend_40(_class_NSInflectionRule, _sel_alloc);
    return NSInflectionRule.castFromPointer(_ret, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.NSObject aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.NSObject? anArgument) {
    _objc_msgSend_48(
        _class_NSInflectionRule,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  static void cancelPreviousPerformRequestsWithTarget_(objc.NSObject aTarget) {
    _objc_msgSend_49(_class_NSInflectionRule,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_7(
        _class_NSInflectionRule, _sel_accessInstanceVariablesDirectly);
  }

  static bool useStoredAccessor() {
    return _objc_msgSend_7(_class_NSInflectionRule, _sel_useStoredAccessor);
  }

  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_50(_class_NSInflectionRule,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_51(_class_NSInflectionRule,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_52(
        _class_NSInflectionRule,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_6(
        _class_NSInflectionRule, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSObject classForKeyedUnarchiver() {
    final _ret =
        _objc_msgSend_40(_class_NSInflectionRule, _sel_classForKeyedUnarchiver);
    return objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }
}

late final _class_NSInflectionRule = objc.getClass("NSInflectionRule");
late final _sel_automaticRule = objc.registerName("automaticRule");
final _objc_msgSend_363 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_canInflectLanguage_ = objc.registerName("canInflectLanguage:");
late final _sel_canInflectPreferredLocalization =
    objc.registerName("canInflectPreferredLocalization");

class NSOrderedSet extends objc.NSObject {
  NSOrderedSet._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSOrderedSet] that points to the same underlying object as [other].
  NSOrderedSet.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSOrderedSet] that wraps the given raw object pointer.
  NSOrderedSet.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSOrderedSet].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSOrderedSet);
  }

  int get count {
    return _objc_msgSend_29(this.pointer, _sel_count);
  }

  objc.NSObject objectAtIndex_(int idx) {
    final _ret = _objc_msgSend_355(this.pointer, _sel_objectAtIndex_, idx);
    return objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }

  int indexOfObject_(objc.NSObject object) {
    return _objc_msgSend_364(this.pointer, _sel_indexOfObject_, object.pointer);
  }

  @override
  NSOrderedSet init() {
    final _ret = _objc_msgSend_40(this.pointer, _sel_init);
    return NSOrderedSet.castFromPointer(_ret, retain: true, release: true);
  }

  NSOrderedSet initWithObjects_count_(
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> objects, int cnt) {
    final _ret = _objc_msgSend_365(
        this.pointer, _sel_initWithObjects_count_, objects, cnt);
    return NSOrderedSet.castFromPointer(_ret, retain: true, release: true);
  }

  NSOrderedSet? initWithCoder_(objc.NSCoder coder) {
    final _ret =
        _objc_msgSend_231(this.pointer, _sel_initWithCoder_, coder.pointer);
    return _ret.address == 0
        ? null
        : NSOrderedSet.castFromPointer(_ret, retain: true, release: true);
  }

  void getObjects_range_(
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> objects, _NSRange range) {
    _objc_msgSend_366(this.pointer, _sel_getObjects_range_, objects, range);
  }

  objc.NSArray objectsAtIndexes_(objc.NSIndexSet indexes) {
    final _ret = _objc_msgSend_367(
        this.pointer, _sel_objectsAtIndexes_, indexes.pointer);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSObject? get firstObject {
    final _ret = _objc_msgSend_66(this.pointer, _sel_firstObject);
    return _ret.address == 0
        ? null
        : objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSObject? get lastObject {
    final _ret = _objc_msgSend_66(this.pointer, _sel_lastObject);
    return _ret.address == 0
        ? null
        : objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }

  bool isEqualToOrderedSet_(NSOrderedSet other) {
    return _objc_msgSend_368(
        this.pointer, _sel_isEqualToOrderedSet_, other.pointer);
  }

  bool containsObject_(objc.NSObject object) {
    return _objc_msgSend_0(this.pointer, _sel_containsObject_, object.pointer);
  }

  bool intersectsOrderedSet_(NSOrderedSet other) {
    return _objc_msgSend_368(
        this.pointer, _sel_intersectsOrderedSet_, other.pointer);
  }

  bool intersectsSet_(objc.NSSet set) {
    return _objc_msgSend_369(this.pointer, _sel_intersectsSet_, set.pointer);
  }

  bool isSubsetOfOrderedSet_(NSOrderedSet other) {
    return _objc_msgSend_368(
        this.pointer, _sel_isSubsetOfOrderedSet_, other.pointer);
  }

  bool isSubsetOfSet_(objc.NSSet set) {
    return _objc_msgSend_369(this.pointer, _sel_isSubsetOfSet_, set.pointer);
  }

  objc.NSObject objectAtIndexedSubscript_(int idx) {
    final _ret =
        _objc_msgSend_355(this.pointer, _sel_objectAtIndexedSubscript_, idx);
    return objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSEnumerator objectEnumerator() {
    final _ret = _objc_msgSend_370(this.pointer, _sel_objectEnumerator);
    return objc.NSEnumerator.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSEnumerator reverseObjectEnumerator() {
    final _ret = _objc_msgSend_370(this.pointer, _sel_reverseObjectEnumerator);
    return objc.NSEnumerator.castFromPointer(_ret, retain: true, release: true);
  }

  NSOrderedSet get reversedOrderedSet {
    final _ret = _objc_msgSend_371(this.pointer, _sel_reversedOrderedSet);
    return NSOrderedSet.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSArray get array {
    final _ret = _objc_msgSend_6(this.pointer, _sel_array);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSSet get set1 {
    final _ret = _objc_msgSend_372(this.pointer, _sel_set);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  void enumerateObjectsUsingBlock_(
      ObjCBlock_ffiVoid_objcObjCObject_ffiUnsignedLong_bool block) {
    _objc_msgSend_373(
        this.pointer, _sel_enumerateObjectsUsingBlock_, block.pointer);
  }

  void enumerateObjectsWithOptions_usingBlock_(
      int opts, ObjCBlock_ffiVoid_objcObjCObject_ffiUnsignedLong_bool block) {
    _objc_msgSend_374(this.pointer,
        _sel_enumerateObjectsWithOptions_usingBlock_, opts, block.pointer);
  }

  void enumerateObjectsAtIndexes_options_usingBlock_(objc.NSIndexSet s,
      int opts, ObjCBlock_ffiVoid_objcObjCObject_ffiUnsignedLong_bool block) {
    _objc_msgSend_375(
        this.pointer,
        _sel_enumerateObjectsAtIndexes_options_usingBlock_,
        s.pointer,
        opts,
        block.pointer);
  }

  int indexOfObjectPassingTest_(
      ObjCBlock_bool_objcObjCObject_ffiUnsignedLong_bool predicate) {
    return _objc_msgSend_376(
        this.pointer, _sel_indexOfObjectPassingTest_, predicate.pointer);
  }

  int indexOfObjectWithOptions_passingTest_(
      int opts, ObjCBlock_bool_objcObjCObject_ffiUnsignedLong_bool predicate) {
    return _objc_msgSend_377(this.pointer,
        _sel_indexOfObjectWithOptions_passingTest_, opts, predicate.pointer);
  }

  int indexOfObjectAtIndexes_options_passingTest_(objc.NSIndexSet s, int opts,
      ObjCBlock_bool_objcObjCObject_ffiUnsignedLong_bool predicate) {
    return _objc_msgSend_378(
        this.pointer,
        _sel_indexOfObjectAtIndexes_options_passingTest_,
        s.pointer,
        opts,
        predicate.pointer);
  }

  objc.NSIndexSet indexesOfObjectsPassingTest_(
      ObjCBlock_bool_objcObjCObject_ffiUnsignedLong_bool predicate) {
    final _ret = _objc_msgSend_379(
        this.pointer, _sel_indexesOfObjectsPassingTest_, predicate.pointer);
    return objc.NSIndexSet.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSIndexSet indexesOfObjectsWithOptions_passingTest_(
      int opts, ObjCBlock_bool_objcObjCObject_ffiUnsignedLong_bool predicate) {
    final _ret = _objc_msgSend_380(this.pointer,
        _sel_indexesOfObjectsWithOptions_passingTest_, opts, predicate.pointer);
    return objc.NSIndexSet.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSIndexSet indexesOfObjectsAtIndexes_options_passingTest_(
      objc.NSIndexSet s,
      int opts,
      ObjCBlock_bool_objcObjCObject_ffiUnsignedLong_bool predicate) {
    final _ret = _objc_msgSend_381(
        this.pointer,
        _sel_indexesOfObjectsAtIndexes_options_passingTest_,
        s.pointer,
        opts,
        predicate.pointer);
    return objc.NSIndexSet.castFromPointer(_ret, retain: true, release: true);
  }

  int indexOfObject_inSortedRange_options_usingComparator_(
      objc.NSObject object,
      _NSRange range,
      int opts,
      ObjCBlock_NSComparisonResult_objcObjCObject_objcObjCObject cmp) {
    return _objc_msgSend_382(
        this.pointer,
        _sel_indexOfObject_inSortedRange_options_usingComparator_,
        object.pointer,
        range,
        opts,
        cmp.pointer);
  }

  objc.NSArray sortedArrayUsingComparator_(
      ObjCBlock_NSComparisonResult_objcObjCObject_objcObjCObject cmptr) {
    final _ret = _objc_msgSend_383(
        this.pointer, _sel_sortedArrayUsingComparator_, cmptr.pointer);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSArray sortedArrayWithOptions_usingComparator_(int opts,
      ObjCBlock_NSComparisonResult_objcObjCObject_objcObjCObject cmptr) {
    final _ret = _objc_msgSend_384(this.pointer,
        _sel_sortedArrayWithOptions_usingComparator_, opts, cmptr.pointer);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSString get description {
    final _ret = _objc_msgSend_12(this.pointer, _sel_description);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSString descriptionWithLocale_(objc.NSObject? locale) {
    final _ret = _objc_msgSend_385(this.pointer, _sel_descriptionWithLocale_,
        locale?.pointer ?? ffi.nullptr);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSString descriptionWithLocale_indent_(
      objc.NSObject? locale, int level) {
    final _ret = _objc_msgSend_386(
        this.pointer,
        _sel_descriptionWithLocale_indent_,
        locale?.pointer ?? ffi.nullptr,
        level);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  static NSOrderedSet orderedSet() {
    final _ret = _objc_msgSend_40(_class_NSOrderedSet, _sel_orderedSet);
    return NSOrderedSet.castFromPointer(_ret, retain: true, release: true);
  }

  static NSOrderedSet orderedSetWithObject_(objc.NSObject object) {
    final _ret = _objc_msgSend_387(
        _class_NSOrderedSet, _sel_orderedSetWithObject_, object.pointer);
    return NSOrderedSet.castFromPointer(_ret, retain: true, release: true);
  }

  static NSOrderedSet orderedSetWithObjects_count_(
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> objects, int cnt) {
    final _ret = _objc_msgSend_365(
        _class_NSOrderedSet, _sel_orderedSetWithObjects_count_, objects, cnt);
    return NSOrderedSet.castFromPointer(_ret, retain: true, release: true);
  }

  static NSOrderedSet orderedSetWithObjects_(objc.NSObject firstObj) {
    final _ret = _objc_msgSend_387(
        _class_NSOrderedSet, _sel_orderedSetWithObjects_, firstObj.pointer);
    return NSOrderedSet.castFromPointer(_ret, retain: true, release: true);
  }

  static NSOrderedSet orderedSetWithOrderedSet_(NSOrderedSet set) {
    final _ret = _objc_msgSend_388(
        _class_NSOrderedSet, _sel_orderedSetWithOrderedSet_, set.pointer);
    return NSOrderedSet.castFromPointer(_ret, retain: true, release: true);
  }

  static NSOrderedSet orderedSetWithOrderedSet_range_copyItems_(
      NSOrderedSet set, _NSRange range, bool flag) {
    final _ret = _objc_msgSend_389(
        _class_NSOrderedSet,
        _sel_orderedSetWithOrderedSet_range_copyItems_,
        set.pointer,
        range,
        flag);
    return NSOrderedSet.castFromPointer(_ret, retain: false, release: true);
  }

  static NSOrderedSet orderedSetWithArray_(objc.NSArray array) {
    final _ret = _objc_msgSend_390(
        _class_NSOrderedSet, _sel_orderedSetWithArray_, array.pointer);
    return NSOrderedSet.castFromPointer(_ret, retain: true, release: true);
  }

  static NSOrderedSet orderedSetWithArray_range_copyItems_(
      objc.NSArray array, _NSRange range, bool flag) {
    final _ret = _objc_msgSend_391(_class_NSOrderedSet,
        _sel_orderedSetWithArray_range_copyItems_, array.pointer, range, flag);
    return NSOrderedSet.castFromPointer(_ret, retain: false, release: true);
  }

  static NSOrderedSet orderedSetWithSet_(objc.NSSet set) {
    final _ret = _objc_msgSend_392(
        _class_NSOrderedSet, _sel_orderedSetWithSet_, set.pointer);
    return NSOrderedSet.castFromPointer(_ret, retain: true, release: true);
  }

  static NSOrderedSet orderedSetWithSet_copyItems_(objc.NSSet set, bool flag) {
    final _ret = _objc_msgSend_393(_class_NSOrderedSet,
        _sel_orderedSetWithSet_copyItems_, set.pointer, flag);
    return NSOrderedSet.castFromPointer(_ret, retain: false, release: true);
  }

  NSOrderedSet initWithObject_(objc.NSObject object) {
    final _ret =
        _objc_msgSend_387(this.pointer, _sel_initWithObject_, object.pointer);
    return NSOrderedSet.castFromPointer(_ret, retain: true, release: true);
  }

  NSOrderedSet initWithObjects_(objc.NSObject firstObj) {
    final _ret = _objc_msgSend_387(
        this.pointer, _sel_initWithObjects_, firstObj.pointer);
    return NSOrderedSet.castFromPointer(_ret, retain: true, release: true);
  }

  NSOrderedSet initWithOrderedSet_(NSOrderedSet set) {
    final _ret =
        _objc_msgSend_388(this.pointer, _sel_initWithOrderedSet_, set.pointer);
    return NSOrderedSet.castFromPointer(_ret, retain: true, release: true);
  }

  NSOrderedSet initWithOrderedSet_copyItems_(NSOrderedSet set, bool flag) {
    final _ret = _objc_msgSend_394(
        this.pointer, _sel_initWithOrderedSet_copyItems_, set.pointer, flag);
    return NSOrderedSet.castFromPointer(_ret, retain: false, release: true);
  }

  NSOrderedSet initWithOrderedSet_range_copyItems_(
      NSOrderedSet set, _NSRange range, bool flag) {
    final _ret = _objc_msgSend_389(this.pointer,
        _sel_initWithOrderedSet_range_copyItems_, set.pointer, range, flag);
    return NSOrderedSet.castFromPointer(_ret, retain: false, release: true);
  }

  NSOrderedSet initWithArray_(objc.NSArray array) {
    final _ret =
        _objc_msgSend_390(this.pointer, _sel_initWithArray_, array.pointer);
    return NSOrderedSet.castFromPointer(_ret, retain: true, release: true);
  }

  NSOrderedSet initWithArray_copyItems_(objc.NSArray set, bool flag) {
    final _ret = _objc_msgSend_395(
        this.pointer, _sel_initWithArray_copyItems_, set.pointer, flag);
    return NSOrderedSet.castFromPointer(_ret, retain: false, release: true);
  }

  NSOrderedSet initWithArray_range_copyItems_(
      objc.NSArray set, _NSRange range, bool flag) {
    final _ret = _objc_msgSend_391(this.pointer,
        _sel_initWithArray_range_copyItems_, set.pointer, range, flag);
    return NSOrderedSet.castFromPointer(_ret, retain: false, release: true);
  }

  NSOrderedSet initWithSet_(objc.NSSet set) {
    final _ret =
        _objc_msgSend_392(this.pointer, _sel_initWithSet_, set.pointer);
    return NSOrderedSet.castFromPointer(_ret, retain: true, release: true);
  }

  NSOrderedSet initWithSet_copyItems_(objc.NSSet set, bool flag) {
    final _ret = _objc_msgSend_393(
        this.pointer, _sel_initWithSet_copyItems_, set.pointer, flag);
    return NSOrderedSet.castFromPointer(_ret, retain: false, release: true);
  }

  objc.NSObject differenceFromOrderedSet_withOptions_usingEquivalenceTest_(
      NSOrderedSet other,
      int options,
      ObjCBlock_bool_objcObjCObject_objcObjCObject block) {
    final _ret = _objc_msgSend_396(
        this.pointer,
        _sel_differenceFromOrderedSet_withOptions_usingEquivalenceTest_,
        other.pointer,
        options,
        block.pointer);
    return objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSObject differenceFromOrderedSet_withOptions_(
      NSOrderedSet other, int options) {
    final _ret = _objc_msgSend_397(this.pointer,
        _sel_differenceFromOrderedSet_withOptions_, other.pointer, options);
    return objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSObject differenceFromOrderedSet_(NSOrderedSet other) {
    final _ret = _objc_msgSend_388(
        this.pointer, _sel_differenceFromOrderedSet_, other.pointer);
    return objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }

  NSOrderedSet? orderedSetByApplyingDifference_(objc.NSObject difference) {
    final _ret = _objc_msgSend_398(
        this.pointer, _sel_orderedSetByApplyingDifference_, difference.pointer);
    return _ret.address == 0
        ? null
        : NSOrderedSet.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSObject valueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_35(this.pointer, _sel_valueForKey_, key.pointer);
    return objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }

  void setValue_forKey_(objc.NSObject? value, objc.NSString key) {
    _objc_msgSend_399(this.pointer, _sel_setValue_forKey_,
        value?.pointer ?? ffi.nullptr, key.pointer);
  }

  void addObserver_forKeyPath_options_context_(objc.NSObject observer,
      objc.NSString keyPath, int options, ffi.Pointer<ffi.Void> context) {
    _objc_msgSend_400(
        this.pointer,
        _sel_addObserver_forKeyPath_options_context_,
        observer.pointer,
        keyPath.pointer,
        options,
        context);
  }

  void removeObserver_forKeyPath_context_(objc.NSObject observer,
      objc.NSString keyPath, ffi.Pointer<ffi.Void> context) {
    _objc_msgSend_401(this.pointer, _sel_removeObserver_forKeyPath_context_,
        observer.pointer, keyPath.pointer, context);
  }

  void removeObserver_forKeyPath_(
      objc.NSObject observer, objc.NSString keyPath) {
    _objc_msgSend_402(this.pointer, _sel_removeObserver_forKeyPath_,
        observer.pointer, keyPath.pointer);
  }

  objc.NSArray sortedArrayUsingDescriptors_(objc.NSArray sortDescriptors) {
    final _ret = _objc_msgSend_67(this.pointer,
        _sel_sortedArrayUsingDescriptors_, sortDescriptors.pointer);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  NSOrderedSet filteredOrderedSetUsingPredicate_(NSPredicate p) {
    final _ret = _objc_msgSend_412(
        this.pointer, _sel_filteredOrderedSetUsingPredicate_, p.pointer);
    return NSOrderedSet.castFromPointer(_ret, retain: true, release: true);
  }

  static NSOrderedSet new1() {
    final _ret = _objc_msgSend_40(_class_NSOrderedSet, _sel_new);
    return NSOrderedSet.castFromPointer(_ret, retain: false, release: true);
  }

  static NSOrderedSet allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_47(_class_NSOrderedSet, _sel_allocWithZone_, zone);
    return NSOrderedSet.castFromPointer(_ret, retain: false, release: true);
  }

  static NSOrderedSet alloc() {
    final _ret = _objc_msgSend_40(_class_NSOrderedSet, _sel_alloc);
    return NSOrderedSet.castFromPointer(_ret, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.NSObject aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.NSObject? anArgument) {
    _objc_msgSend_48(
        _class_NSOrderedSet,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  static void cancelPreviousPerformRequestsWithTarget_(objc.NSObject aTarget) {
    _objc_msgSend_49(_class_NSOrderedSet,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_7(
        _class_NSOrderedSet, _sel_accessInstanceVariablesDirectly);
  }

  static bool useStoredAccessor() {
    return _objc_msgSend_7(_class_NSOrderedSet, _sel_useStoredAccessor);
  }

  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_50(_class_NSOrderedSet,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_51(_class_NSOrderedSet,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_52(
        _class_NSOrderedSet,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_6(
        _class_NSOrderedSet, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSObject classForKeyedUnarchiver() {
    final _ret =
        _objc_msgSend_40(_class_NSOrderedSet, _sel_classForKeyedUnarchiver);
    return objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }
}

late final _class_NSOrderedSet = objc.getClass("NSOrderedSet");
late final _sel_count = objc.registerName("count");
late final _sel_objectAtIndex_ = objc.registerName("objectAtIndex:");
late final _sel_indexOfObject_ = objc.registerName("indexOfObject:");
final _objc_msgSend_364 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        int Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_initWithObjects_count_ =
    objc.registerName("initWithObjects:count:");
final _objc_msgSend_365 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
                ffi.UnsignedLong)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
            int)>();
late final _sel_getObjects_range_ = objc.registerName("getObjects:range:");
final _objc_msgSend_366 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
                _NSRange)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
            _NSRange)>();
late final _sel_objectsAtIndexes_ = objc.registerName("objectsAtIndexes:");
final _objc_msgSend_367 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_firstObject = objc.registerName("firstObject");
late final _sel_lastObject = objc.registerName("lastObject");
late final _sel_isEqualToOrderedSet_ =
    objc.registerName("isEqualToOrderedSet:");
final _objc_msgSend_368 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        bool Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_containsObject_ = objc.registerName("containsObject:");
late final _sel_intersectsOrderedSet_ =
    objc.registerName("intersectsOrderedSet:");
late final _sel_intersectsSet_ = objc.registerName("intersectsSet:");
final _objc_msgSend_369 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        bool Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_isSubsetOfOrderedSet_ =
    objc.registerName("isSubsetOfOrderedSet:");
late final _sel_isSubsetOfSet_ = objc.registerName("isSubsetOfSet:");
late final _sel_objectAtIndexedSubscript_ =
    objc.registerName("objectAtIndexedSubscript:");
late final _sel_objectEnumerator = objc.registerName("objectEnumerator");
final _objc_msgSend_370 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_reverseObjectEnumerator =
    objc.registerName("reverseObjectEnumerator");
late final _sel_reversedOrderedSet = objc.registerName("reversedOrderedSet");
final _objc_msgSend_371 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_array = objc.registerName("array");
late final _sel_set = objc.registerName("set");
final _objc_msgSend_372 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
void _ObjCBlock_ffiVoid_objcObjCObject_ffiUnsignedLong_bool_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlock> block,
        ffi.Pointer<objc.ObjCObject> arg0,
        int arg1,
        ffi.Pointer<ffi.Bool> arg2) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0,
                    ffi.UnsignedLong arg1, ffi.Pointer<ffi.Bool> arg2)>>()
        .asFunction<
            void Function(ffi.Pointer<objc.ObjCObject>, int,
                ffi.Pointer<ffi.Bool>)>()(arg0, arg1, arg2);
final _ObjCBlock_ffiVoid_objcObjCObject_ffiUnsignedLong_bool_closureRegistry =
    <int,
        void Function(
            ffi.Pointer<objc.ObjCObject>, int, ffi.Pointer<ffi.Bool>)>{};
int _ObjCBlock_ffiVoid_objcObjCObject_ffiUnsignedLong_bool_closureRegistryIndex =
    0;
ffi.Pointer<ffi.Void>
    _ObjCBlock_ffiVoid_objcObjCObject_ffiUnsignedLong_bool_registerClosure(
        void Function(ffi.Pointer<objc.ObjCObject>, int, ffi.Pointer<ffi.Bool>)
            fn) {
  final id =
      ++_ObjCBlock_ffiVoid_objcObjCObject_ffiUnsignedLong_bool_closureRegistryIndex;
  _ObjCBlock_ffiVoid_objcObjCObject_ffiUnsignedLong_bool_closureRegistry[id] =
      fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

void _ObjCBlock_ffiVoid_objcObjCObject_ffiUnsignedLong_bool_closureTrampoline(
        ffi.Pointer<objc.ObjCBlock> block,
        ffi.Pointer<objc.ObjCObject> arg0,
        int arg1,
        ffi.Pointer<ffi.Bool> arg2) =>
    _ObjCBlock_ffiVoid_objcObjCObject_ffiUnsignedLong_bool_closureRegistry[
        block.ref.target.address]!(arg0, arg1, arg2);

class ObjCBlock_ffiVoid_objcObjCObject_ffiUnsignedLong_bool
    extends objc.ObjCBlockBase {
  ObjCBlock_ffiVoid_objcObjCObject_ffiUnsignedLong_bool._(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = true})
      : super(pointer, retain: retain, release: release);

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_ffiVoid_objcObjCObject_ffiUnsignedLong_bool castFromPointer(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = false}) {
    return ObjCBlock_ffiVoid_objcObjCObject_ffiUnsignedLong_bool._(pointer,
        retain: retain, release: release);
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_objcObjCObject_ffiUnsignedLong_bool.fromFunctionPointer(
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0,
                      ffi.UnsignedLong arg1, ffi.Pointer<ffi.Bool> arg2)>>
          ptr)
      : this._(objc.newBlock(
            _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.UnsignedLong,
                            ffi.Pointer<ffi.Bool>)>(
                    _ObjCBlock_ffiVoid_objcObjCObject_ffiUnsignedLong_bool_fnPtrTrampoline)
                .cast(),
            ptr.cast()));
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_objcObjCObject_ffiUnsignedLong_bool.fromFunction(
      void Function(objc.NSObject, int, ffi.Pointer<ffi.Bool>) fn)
      : this._(objc.newBlock(
            _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.UnsignedLong,
                            ffi.Pointer<ffi.Bool>)>(
                    _ObjCBlock_ffiVoid_objcObjCObject_ffiUnsignedLong_bool_closureTrampoline)
                .cast(),
            _ObjCBlock_ffiVoid_objcObjCObject_ffiUnsignedLong_bool_registerClosure(
                (ffi.Pointer<objc.ObjCObject> arg0, int arg1,
                        ffi.Pointer<ffi.Bool> arg2) =>
                    fn(objc.NSObject.castFromPointer(arg0, retain: true, release: true), arg1, arg2))));
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_objcObjCObject_ffiUnsignedLong_bool.listener(
      void Function(objc.NSObject, int, ffi.Pointer<ffi.Bool>) fn)
      : this._(objc.newBlock(
            (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                        ffi.Void Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.UnsignedLong,
                            ffi.Pointer<ffi.Bool>)>.listener(
                    _ObjCBlock_ffiVoid_objcObjCObject_ffiUnsignedLong_bool_closureTrampoline)
                  ..keepIsolateAlive = false)
                .nativeFunction
                .cast(),
            _ObjCBlock_ffiVoid_objcObjCObject_ffiUnsignedLong_bool_registerClosure(
                (ffi.Pointer<objc.ObjCObject> arg0, int arg1,
                        ffi.Pointer<ffi.Bool> arg2) =>
                    fn(objc.NSObject.castFromPointer(arg0, retain: true, release: true), arg1, arg2))));
  static ffi.NativeCallable<
      ffi.Void Function(
          ffi.Pointer<objc.ObjCBlock>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.UnsignedLong,
          ffi.Pointer<ffi.Bool>)>? _dartFuncListenerTrampoline;

  void call(objc.NSObject arg0, int arg1, ffi.Pointer<ffi.Bool> arg2) =>
      pointer.ref.invoke
          .cast<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<objc.ObjCBlock> block,
                      ffi.Pointer<objc.ObjCObject> arg0,
                      ffi.UnsignedLong arg1,
                      ffi.Pointer<ffi.Bool> arg2)>>()
          .asFunction<
              void Function(
                  ffi.Pointer<objc.ObjCBlock>,
                  ffi.Pointer<objc.ObjCObject>,
                  int,
                  ffi.Pointer<ffi.Bool>)>()(pointer, arg0.pointer, arg1, arg2);
}

late final _sel_enumerateObjectsUsingBlock_ =
    objc.registerName("enumerateObjectsUsingBlock:");
final _objc_msgSend_373 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCBlock>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCBlock>)>();

abstract class NSEnumerationOptions {
  static const int NSEnumerationConcurrent = 1;
  static const int NSEnumerationReverse = 2;
}

late final _sel_enumerateObjectsWithOptions_usingBlock_ =
    objc.registerName("enumerateObjectsWithOptions:usingBlock:");
final _objc_msgSend_374 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Int32,
                ffi.Pointer<objc.ObjCBlock>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int,
            ffi.Pointer<objc.ObjCBlock>)>();
late final _sel_enumerateObjectsAtIndexes_options_usingBlock_ =
    objc.registerName("enumerateObjectsAtIndexes:options:usingBlock:");
final _objc_msgSend_375 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Int32,
                ffi.Pointer<objc.ObjCBlock>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            ffi.Pointer<objc.ObjCBlock>)>();
bool _ObjCBlock_bool_objcObjCObject_ffiUnsignedLong_bool_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlock> block,
        ffi.Pointer<objc.ObjCObject> arg0,
        int arg1,
        ffi.Pointer<ffi.Bool> arg2) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Bool Function(ffi.Pointer<objc.ObjCObject> arg0,
                    ffi.UnsignedLong arg1, ffi.Pointer<ffi.Bool> arg2)>>()
        .asFunction<
            bool Function(ffi.Pointer<objc.ObjCObject>, int,
                ffi.Pointer<ffi.Bool>)>()(arg0, arg1, arg2);
final _ObjCBlock_bool_objcObjCObject_ffiUnsignedLong_bool_closureRegistry =
    <int,
        bool Function(
            ffi.Pointer<objc.ObjCObject>, int, ffi.Pointer<ffi.Bool>)>{};
int _ObjCBlock_bool_objcObjCObject_ffiUnsignedLong_bool_closureRegistryIndex =
    0;
ffi.Pointer<ffi.Void>
    _ObjCBlock_bool_objcObjCObject_ffiUnsignedLong_bool_registerClosure(
        bool Function(ffi.Pointer<objc.ObjCObject>, int, ffi.Pointer<ffi.Bool>)
            fn) {
  final id =
      ++_ObjCBlock_bool_objcObjCObject_ffiUnsignedLong_bool_closureRegistryIndex;
  _ObjCBlock_bool_objcObjCObject_ffiUnsignedLong_bool_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

bool _ObjCBlock_bool_objcObjCObject_ffiUnsignedLong_bool_closureTrampoline(
        ffi.Pointer<objc.ObjCBlock> block,
        ffi.Pointer<objc.ObjCObject> arg0,
        int arg1,
        ffi.Pointer<ffi.Bool> arg2) =>
    _ObjCBlock_bool_objcObjCObject_ffiUnsignedLong_bool_closureRegistry[
        block.ref.target.address]!(arg0, arg1, arg2);

class ObjCBlock_bool_objcObjCObject_ffiUnsignedLong_bool
    extends objc.ObjCBlockBase {
  ObjCBlock_bool_objcObjCObject_ffiUnsignedLong_bool._(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = true})
      : super(pointer, retain: retain, release: release);

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_bool_objcObjCObject_ffiUnsignedLong_bool castFromPointer(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = false}) {
    return ObjCBlock_bool_objcObjCObject_ffiUnsignedLong_bool._(pointer,
        retain: retain, release: release);
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_bool_objcObjCObject_ffiUnsignedLong_bool.fromFunctionPointer(
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Bool Function(ffi.Pointer<objc.ObjCObject> arg0,
                      ffi.UnsignedLong arg1, ffi.Pointer<ffi.Bool> arg2)>>
          ptr)
      : this._(objc.newBlock(
            _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Bool Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.UnsignedLong,
                            ffi.Pointer<ffi.Bool>)>(
                    _ObjCBlock_bool_objcObjCObject_ffiUnsignedLong_bool_fnPtrTrampoline,
                    false)
                .cast(),
            ptr.cast()));
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_bool_objcObjCObject_ffiUnsignedLong_bool.fromFunction(
      bool Function(objc.NSObject, int, ffi.Pointer<ffi.Bool>) fn)
      : this._(objc.newBlock(
            _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Bool Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.UnsignedLong,
                            ffi.Pointer<ffi.Bool>)>(
                    _ObjCBlock_bool_objcObjCObject_ffiUnsignedLong_bool_closureTrampoline, false)
                .cast(),
            _ObjCBlock_bool_objcObjCObject_ffiUnsignedLong_bool_registerClosure(
                (ffi.Pointer<objc.ObjCObject> arg0, int arg1, ffi.Pointer<ffi.Bool> arg2) =>
                    fn(objc.NSObject.castFromPointer(arg0, retain: true, release: true), arg1, arg2))));
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  bool call(objc.NSObject arg0, int arg1, ffi.Pointer<ffi.Bool> arg2) =>
      pointer.ref.invoke
          .cast<
              ffi.NativeFunction<
                  ffi.Bool Function(
                      ffi.Pointer<objc.ObjCBlock> block,
                      ffi.Pointer<objc.ObjCObject> arg0,
                      ffi.UnsignedLong arg1,
                      ffi.Pointer<ffi.Bool> arg2)>>()
          .asFunction<
              bool Function(
                  ffi.Pointer<objc.ObjCBlock>,
                  ffi.Pointer<objc.ObjCObject>,
                  int,
                  ffi.Pointer<ffi.Bool>)>()(pointer, arg0.pointer, arg1, arg2);
}

late final _sel_indexOfObjectPassingTest_ =
    objc.registerName("indexOfObjectPassingTest:");
final _objc_msgSend_376 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCBlock>)>>()
    .asFunction<
        int Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCBlock>)>();
late final _sel_indexOfObjectWithOptions_passingTest_ =
    objc.registerName("indexOfObjectWithOptions:passingTest:");
final _objc_msgSend_377 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Int32,
                ffi.Pointer<objc.ObjCBlock>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int,
            ffi.Pointer<objc.ObjCBlock>)>();
late final _sel_indexOfObjectAtIndexes_options_passingTest_ =
    objc.registerName("indexOfObjectAtIndexes:options:passingTest:");
final _objc_msgSend_378 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Int32,
                ffi.Pointer<objc.ObjCBlock>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            ffi.Pointer<objc.ObjCBlock>)>();
late final _sel_indexesOfObjectsPassingTest_ =
    objc.registerName("indexesOfObjectsPassingTest:");
final _objc_msgSend_379 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCBlock>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCBlock>)>();
late final _sel_indexesOfObjectsWithOptions_passingTest_ =
    objc.registerName("indexesOfObjectsWithOptions:passingTest:");
final _objc_msgSend_380 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Int32,
                ffi.Pointer<objc.ObjCBlock>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int,
            ffi.Pointer<objc.ObjCBlock>)>();
late final _sel_indexesOfObjectsAtIndexes_options_passingTest_ =
    objc.registerName("indexesOfObjectsAtIndexes:options:passingTest:");
final _objc_msgSend_381 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Int32,
                ffi.Pointer<objc.ObjCBlock>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            ffi.Pointer<objc.ObjCBlock>)>();
int _ObjCBlock_NSComparisonResult_objcObjCObject_objcObjCObject_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlock> block,
        ffi.Pointer<objc.ObjCObject> arg0,
        ffi.Pointer<objc.ObjCObject> arg1) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Int32 Function(ffi.Pointer<objc.ObjCObject> arg0,
                    ffi.Pointer<objc.ObjCObject> arg1)>>()
        .asFunction<
            int Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>()(arg0, arg1);
final _ObjCBlock_NSComparisonResult_objcObjCObject_objcObjCObject_closureRegistry =
    <int,
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>{};
int _ObjCBlock_NSComparisonResult_objcObjCObject_objcObjCObject_closureRegistryIndex =
    0;
ffi.Pointer<ffi.Void>
    _ObjCBlock_NSComparisonResult_objcObjCObject_objcObjCObject_registerClosure(
        int Function(ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)
            fn) {
  final id =
      ++_ObjCBlock_NSComparisonResult_objcObjCObject_objcObjCObject_closureRegistryIndex;
  _ObjCBlock_NSComparisonResult_objcObjCObject_objcObjCObject_closureRegistry[
      id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

int _ObjCBlock_NSComparisonResult_objcObjCObject_objcObjCObject_closureTrampoline(
        ffi.Pointer<objc.ObjCBlock> block,
        ffi.Pointer<objc.ObjCObject> arg0,
        ffi.Pointer<objc.ObjCObject> arg1) =>
    _ObjCBlock_NSComparisonResult_objcObjCObject_objcObjCObject_closureRegistry[
        block.ref.target.address]!(arg0, arg1);

class ObjCBlock_NSComparisonResult_objcObjCObject_objcObjCObject
    extends objc.ObjCBlockBase {
  ObjCBlock_NSComparisonResult_objcObjCObject_objcObjCObject._(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = true})
      : super(pointer, retain: retain, release: release);

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_NSComparisonResult_objcObjCObject_objcObjCObject
      castFromPointer(ffi.Pointer<objc.ObjCBlock> pointer,
          {bool retain = false, bool release = false}) {
    return ObjCBlock_NSComparisonResult_objcObjCObject_objcObjCObject._(pointer,
        retain: retain, release: release);
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_NSComparisonResult_objcObjCObject_objcObjCObject.fromFunctionPointer(
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int32 Function(ffi.Pointer<objc.ObjCObject> arg0,
                      ffi.Pointer<objc.ObjCObject> arg1)>>
          ptr)
      : this._(objc.newBlock(
            _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Int32 Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<objc.ObjCObject>)>(
                    _ObjCBlock_NSComparisonResult_objcObjCObject_objcObjCObject_fnPtrTrampoline,
                    0)
                .cast(),
            ptr.cast()));
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_NSComparisonResult_objcObjCObject_objcObjCObject.fromFunction(
      int Function(objc.NSObject, objc.NSObject) fn)
      : this._(objc.newBlock(
            _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Int32 Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<objc.ObjCObject>)>(
                    _ObjCBlock_NSComparisonResult_objcObjCObject_objcObjCObject_closureTrampoline, 0)
                .cast(),
            _ObjCBlock_NSComparisonResult_objcObjCObject_objcObjCObject_registerClosure(
                (ffi.Pointer<objc.ObjCObject> arg0, ffi.Pointer<objc.ObjCObject> arg1) =>
                    fn(objc.NSObject.castFromPointer(arg0, retain: true, release: true), objc.NSObject.castFromPointer(arg1, retain: true, release: true)))));
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  int call(objc.NSObject arg0, objc.NSObject arg1) => pointer.ref.invoke
          .cast<
              ffi.NativeFunction<
                  ffi.Int32 Function(
                      ffi.Pointer<objc.ObjCBlock> block,
                      ffi.Pointer<objc.ObjCObject> arg0,
                      ffi.Pointer<objc.ObjCObject> arg1)>>()
          .asFunction<
              int Function(
                  ffi.Pointer<objc.ObjCBlock>,
                  ffi.Pointer<objc.ObjCObject>,
                  ffi.Pointer<objc.ObjCObject>)>()(
      pointer, arg0.pointer, arg1.pointer);
}

late final _sel_indexOfObject_inSortedRange_options_usingComparator_ =
    objc.registerName("indexOfObject:inSortedRange:options:usingComparator:");
final _objc_msgSend_382 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                _NSRange,
                ffi.Int32,
                ffi.Pointer<objc.ObjCBlock>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            _NSRange,
            int,
            ffi.Pointer<objc.ObjCBlock>)>();
late final _sel_sortedArrayUsingComparator_ =
    objc.registerName("sortedArrayUsingComparator:");
final _objc_msgSend_383 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCBlock>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCBlock>)>();

abstract class NSSortOptions {
  static const int NSSortConcurrent = 1;
  static const int NSSortStable = 16;
}

late final _sel_sortedArrayWithOptions_usingComparator_ =
    objc.registerName("sortedArrayWithOptions:usingComparator:");
final _objc_msgSend_384 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Int32,
                ffi.Pointer<objc.ObjCBlock>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int,
            ffi.Pointer<objc.ObjCBlock>)>();
late final _sel_descriptionWithLocale_ =
    objc.registerName("descriptionWithLocale:");
final _objc_msgSend_385 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_descriptionWithLocale_indent_ =
    objc.registerName("descriptionWithLocale:indent:");
final _objc_msgSend_386 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.UnsignedLong)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int)>();
late final _sel_orderedSet = objc.registerName("orderedSet");
late final _sel_orderedSetWithObject_ =
    objc.registerName("orderedSetWithObject:");
final _objc_msgSend_387 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_orderedSetWithObjects_count_ =
    objc.registerName("orderedSetWithObjects:count:");
late final _sel_orderedSetWithObjects_ =
    objc.registerName("orderedSetWithObjects:");
late final _sel_orderedSetWithOrderedSet_ =
    objc.registerName("orderedSetWithOrderedSet:");
final _objc_msgSend_388 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_orderedSetWithOrderedSet_range_copyItems_ =
    objc.registerName("orderedSetWithOrderedSet:range:copyItems:");
final _objc_msgSend_389 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                _NSRange,
                ffi.Bool)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            _NSRange,
            bool)>();
late final _sel_orderedSetWithArray_ =
    objc.registerName("orderedSetWithArray:");
final _objc_msgSend_390 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_orderedSetWithArray_range_copyItems_ =
    objc.registerName("orderedSetWithArray:range:copyItems:");
final _objc_msgSend_391 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                _NSRange,
                ffi.Bool)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            _NSRange,
            bool)>();
late final _sel_orderedSetWithSet_ = objc.registerName("orderedSetWithSet:");
final _objc_msgSend_392 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_orderedSetWithSet_copyItems_ =
    objc.registerName("orderedSetWithSet:copyItems:");
final _objc_msgSend_393 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Bool)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            bool)>();
late final _sel_initWithObject_ = objc.registerName("initWithObject:");
late final _sel_initWithObjects_ = objc.registerName("initWithObjects:");
late final _sel_initWithOrderedSet_ = objc.registerName("initWithOrderedSet:");
late final _sel_initWithOrderedSet_copyItems_ =
    objc.registerName("initWithOrderedSet:copyItems:");
final _objc_msgSend_394 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Bool)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            bool)>();
late final _sel_initWithOrderedSet_range_copyItems_ =
    objc.registerName("initWithOrderedSet:range:copyItems:");
late final _sel_initWithArray_ = objc.registerName("initWithArray:");
late final _sel_initWithArray_copyItems_ =
    objc.registerName("initWithArray:copyItems:");
final _objc_msgSend_395 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Bool)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            bool)>();
late final _sel_initWithArray_range_copyItems_ =
    objc.registerName("initWithArray:range:copyItems:");
late final _sel_initWithSet_ = objc.registerName("initWithSet:");
late final _sel_initWithSet_copyItems_ =
    objc.registerName("initWithSet:copyItems:");

abstract class NSOrderedCollectionDifferenceCalculationOptions {
  static const int NSOrderedCollectionDifferenceCalculationOmitInsertedObjects =
      1;
  static const int NSOrderedCollectionDifferenceCalculationOmitRemovedObjects =
      2;
  static const int NSOrderedCollectionDifferenceCalculationInferMoves = 4;
}

bool _ObjCBlock_bool_objcObjCObject_objcObjCObject_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlock> block,
        ffi.Pointer<objc.ObjCObject> arg0,
        ffi.Pointer<objc.ObjCObject> arg1) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Bool Function(ffi.Pointer<objc.ObjCObject> arg0,
                    ffi.Pointer<objc.ObjCObject> arg1)>>()
        .asFunction<
            bool Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>()(arg0, arg1);
final _ObjCBlock_bool_objcObjCObject_objcObjCObject_closureRegistry = <int,
    bool Function(
        ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>{};
int _ObjCBlock_bool_objcObjCObject_objcObjCObject_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void>
    _ObjCBlock_bool_objcObjCObject_objcObjCObject_registerClosure(
        bool Function(
                ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)
            fn) {
  final id =
      ++_ObjCBlock_bool_objcObjCObject_objcObjCObject_closureRegistryIndex;
  _ObjCBlock_bool_objcObjCObject_objcObjCObject_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

bool _ObjCBlock_bool_objcObjCObject_objcObjCObject_closureTrampoline(
        ffi.Pointer<objc.ObjCBlock> block,
        ffi.Pointer<objc.ObjCObject> arg0,
        ffi.Pointer<objc.ObjCObject> arg1) =>
    _ObjCBlock_bool_objcObjCObject_objcObjCObject_closureRegistry[
        block.ref.target.address]!(arg0, arg1);

class ObjCBlock_bool_objcObjCObject_objcObjCObject extends objc.ObjCBlockBase {
  ObjCBlock_bool_objcObjCObject_objcObjCObject._(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = true})
      : super(pointer, retain: retain, release: release);

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_bool_objcObjCObject_objcObjCObject castFromPointer(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = false}) {
    return ObjCBlock_bool_objcObjCObject_objcObjCObject._(pointer,
        retain: retain, release: release);
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_bool_objcObjCObject_objcObjCObject.fromFunctionPointer(
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Bool Function(ffi.Pointer<objc.ObjCObject> arg0,
                      ffi.Pointer<objc.ObjCObject> arg1)>>
          ptr)
      : this._(objc.newBlock(
            _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Bool Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<objc.ObjCObject>)>(
                    _ObjCBlock_bool_objcObjCObject_objcObjCObject_fnPtrTrampoline,
                    false)
                .cast(),
            ptr.cast()));
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_bool_objcObjCObject_objcObjCObject.fromFunction(
      bool Function(objc.NSObject, objc.NSObject) fn)
      : this._(objc.newBlock(
            _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Bool Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<objc.ObjCObject>)>(
                    _ObjCBlock_bool_objcObjCObject_objcObjCObject_closureTrampoline, false)
                .cast(),
            _ObjCBlock_bool_objcObjCObject_objcObjCObject_registerClosure(
                (ffi.Pointer<objc.ObjCObject> arg0, ffi.Pointer<objc.ObjCObject> arg1) =>
                    fn(objc.NSObject.castFromPointer(arg0, retain: true, release: true), objc.NSObject.castFromPointer(arg1, retain: true, release: true)))));
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  bool call(objc.NSObject arg0, objc.NSObject arg1) => pointer.ref.invoke
          .cast<
              ffi.NativeFunction<
                  ffi.Bool Function(
                      ffi.Pointer<objc.ObjCBlock> block,
                      ffi.Pointer<objc.ObjCObject> arg0,
                      ffi.Pointer<objc.ObjCObject> arg1)>>()
          .asFunction<
              bool Function(
                  ffi.Pointer<objc.ObjCBlock>,
                  ffi.Pointer<objc.ObjCObject>,
                  ffi.Pointer<objc.ObjCObject>)>()(
      pointer, arg0.pointer, arg1.pointer);
}

late final _sel_differenceFromOrderedSet_withOptions_usingEquivalenceTest_ =
    objc.registerName(
        "differenceFromOrderedSet:withOptions:usingEquivalenceTest:");
final _objc_msgSend_396 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Int32,
                ffi.Pointer<objc.ObjCBlock>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            ffi.Pointer<objc.ObjCBlock>)>();
late final _sel_differenceFromOrderedSet_withOptions_ =
    objc.registerName("differenceFromOrderedSet:withOptions:");
final _objc_msgSend_397 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Int32)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int)>();
late final _sel_differenceFromOrderedSet_ =
    objc.registerName("differenceFromOrderedSet:");
late final _sel_orderedSetByApplyingDifference_ =
    objc.registerName("orderedSetByApplyingDifference:");
final _objc_msgSend_398 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_valueForKey_ = objc.registerName("valueForKey:");
late final _sel_setValue_forKey_ = objc.registerName("setValue:forKey:");
final _objc_msgSend_399 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();

abstract class NSKeyValueObservingOptions {
  static const int NSKeyValueObservingOptionNew = 1;
  static const int NSKeyValueObservingOptionOld = 2;
  static const int NSKeyValueObservingOptionInitial = 4;
  static const int NSKeyValueObservingOptionPrior = 8;
}

late final _sel_addObserver_forKeyPath_options_context_ =
    objc.registerName("addObserver:forKeyPath:options:context:");
final _objc_msgSend_400 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Int32,
                ffi.Pointer<ffi.Void>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            ffi.Pointer<ffi.Void>)>();
late final _sel_removeObserver_forKeyPath_context_ =
    objc.registerName("removeObserver:forKeyPath:context:");
final _objc_msgSend_401 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<ffi.Void>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<ffi.Void>)>();
late final _sel_removeObserver_forKeyPath_ =
    objc.registerName("removeObserver:forKeyPath:");
final _objc_msgSend_402 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_sortedArrayUsingDescriptors_ =
    objc.registerName("sortedArrayUsingDescriptors:");

class NSPredicate extends objc.NSObject {
  NSPredicate._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSPredicate] that points to the same underlying object as [other].
  NSPredicate.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSPredicate] that wraps the given raw object pointer.
  NSPredicate.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSPredicate].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSPredicate);
  }

  static NSPredicate predicateWithFormat_argumentArray_(
      objc.NSString predicateFormat, objc.NSArray? arguments) {
    final _ret = _objc_msgSend_403(
        _class_NSPredicate,
        _sel_predicateWithFormat_argumentArray_,
        predicateFormat.pointer,
        arguments?.pointer ?? ffi.nullptr);
    return NSPredicate.castFromPointer(_ret, retain: true, release: true);
  }

  static NSPredicate predicateWithFormat_(objc.NSString predicateFormat) {
    final _ret = _objc_msgSend_404(
        _class_NSPredicate, _sel_predicateWithFormat_, predicateFormat.pointer);
    return NSPredicate.castFromPointer(_ret, retain: true, release: true);
  }

  static NSPredicate predicateWithFormat_arguments_(
      objc.NSString predicateFormat, ffi.Pointer<__va_list_tag> argList) {
    final _ret = _objc_msgSend_405(_class_NSPredicate,
        _sel_predicateWithFormat_arguments_, predicateFormat.pointer, argList);
    return NSPredicate.castFromPointer(_ret, retain: true, release: true);
  }

  static NSPredicate? predicateFromMetadataQueryString_(
      objc.NSString queryString) {
    final _ret = _objc_msgSend_406(_class_NSPredicate,
        _sel_predicateFromMetadataQueryString_, queryString.pointer);
    return _ret.address == 0
        ? null
        : NSPredicate.castFromPointer(_ret, retain: true, release: true);
  }

  static NSPredicate predicateWithValue_(bool value) {
    final _ret =
        _objc_msgSend_407(_class_NSPredicate, _sel_predicateWithValue_, value);
    return NSPredicate.castFromPointer(_ret, retain: true, release: true);
  }

  static NSPredicate predicateWithBlock_(
      ObjCBlock_bool_objcObjCObject_NSDictionary block) {
    final _ret = _objc_msgSend_408(
        _class_NSPredicate, _sel_predicateWithBlock_, block.pointer);
    return NSPredicate.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSString get predicateFormat {
    final _ret = _objc_msgSend_12(this.pointer, _sel_predicateFormat);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  NSPredicate predicateWithSubstitutionVariables_(objc.NSDictionary variables) {
    final _ret = _objc_msgSend_409(this.pointer,
        _sel_predicateWithSubstitutionVariables_, variables.pointer);
    return NSPredicate.castFromPointer(_ret, retain: true, release: true);
  }

  bool evaluateWithObject_(objc.NSObject? object) {
    return _objc_msgSend_410(
        this.pointer, _sel_evaluateWithObject_, object?.pointer ?? ffi.nullptr);
  }

  bool evaluateWithObject_substitutionVariables_(
      objc.NSObject? object, objc.NSDictionary? bindings) {
    return _objc_msgSend_411(
        this.pointer,
        _sel_evaluateWithObject_substitutionVariables_,
        object?.pointer ?? ffi.nullptr,
        bindings?.pointer ?? ffi.nullptr);
  }

  void allowEvaluation() {
    _objc_msgSend_82(this.pointer, _sel_allowEvaluation);
  }

  @override
  NSPredicate init() {
    final _ret = _objc_msgSend_40(this.pointer, _sel_init);
    return NSPredicate.castFromPointer(_ret, retain: true, release: true);
  }

  static NSPredicate new1() {
    final _ret = _objc_msgSend_40(_class_NSPredicate, _sel_new);
    return NSPredicate.castFromPointer(_ret, retain: false, release: true);
  }

  static NSPredicate allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_47(_class_NSPredicate, _sel_allocWithZone_, zone);
    return NSPredicate.castFromPointer(_ret, retain: false, release: true);
  }

  static NSPredicate alloc() {
    final _ret = _objc_msgSend_40(_class_NSPredicate, _sel_alloc);
    return NSPredicate.castFromPointer(_ret, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.NSObject aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.NSObject? anArgument) {
    _objc_msgSend_48(
        _class_NSPredicate,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  static void cancelPreviousPerformRequestsWithTarget_(objc.NSObject aTarget) {
    _objc_msgSend_49(_class_NSPredicate,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_7(
        _class_NSPredicate, _sel_accessInstanceVariablesDirectly);
  }

  static bool useStoredAccessor() {
    return _objc_msgSend_7(_class_NSPredicate, _sel_useStoredAccessor);
  }

  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_50(_class_NSPredicate,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_51(_class_NSPredicate,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_52(
        _class_NSPredicate,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_6(
        _class_NSPredicate, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSObject classForKeyedUnarchiver() {
    final _ret =
        _objc_msgSend_40(_class_NSPredicate, _sel_classForKeyedUnarchiver);
    return objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }
}

late final _class_NSPredicate = objc.getClass("NSPredicate");
late final _sel_predicateWithFormat_argumentArray_ =
    objc.registerName("predicateWithFormat:argumentArray:");
final _objc_msgSend_403 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_predicateWithFormat_ =
    objc.registerName("predicateWithFormat:");
final _objc_msgSend_404 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_predicateWithFormat_arguments_ =
    objc.registerName("predicateWithFormat:arguments:");
final _objc_msgSend_405 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<__va_list_tag>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<__va_list_tag>)>();
late final _sel_predicateFromMetadataQueryString_ =
    objc.registerName("predicateFromMetadataQueryString:");
final _objc_msgSend_406 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_predicateWithValue_ = objc.registerName("predicateWithValue:");
final _objc_msgSend_407 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Bool)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, bool)>();
bool _ObjCBlock_bool_objcObjCObject_NSDictionary_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlock> block,
        ffi.Pointer<objc.ObjCObject> arg0,
        ffi.Pointer<objc.ObjCObject> arg1) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Bool Function(ffi.Pointer<objc.ObjCObject> arg0,
                    ffi.Pointer<objc.ObjCObject> arg1)>>()
        .asFunction<
            bool Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>()(arg0, arg1);
final _ObjCBlock_bool_objcObjCObject_NSDictionary_closureRegistry = <int,
    bool Function(
        ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>{};
int _ObjCBlock_bool_objcObjCObject_NSDictionary_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void>
    _ObjCBlock_bool_objcObjCObject_NSDictionary_registerClosure(
        bool Function(
                ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)
            fn) {
  final id = ++_ObjCBlock_bool_objcObjCObject_NSDictionary_closureRegistryIndex;
  _ObjCBlock_bool_objcObjCObject_NSDictionary_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

bool _ObjCBlock_bool_objcObjCObject_NSDictionary_closureTrampoline(
        ffi.Pointer<objc.ObjCBlock> block,
        ffi.Pointer<objc.ObjCObject> arg0,
        ffi.Pointer<objc.ObjCObject> arg1) =>
    _ObjCBlock_bool_objcObjCObject_NSDictionary_closureRegistry[
        block.ref.target.address]!(arg0, arg1);

class ObjCBlock_bool_objcObjCObject_NSDictionary extends objc.ObjCBlockBase {
  ObjCBlock_bool_objcObjCObject_NSDictionary._(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = true})
      : super(pointer, retain: retain, release: release);

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_bool_objcObjCObject_NSDictionary castFromPointer(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = false}) {
    return ObjCBlock_bool_objcObjCObject_NSDictionary._(pointer,
        retain: retain, release: release);
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_bool_objcObjCObject_NSDictionary.fromFunctionPointer(
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Bool Function(ffi.Pointer<objc.ObjCObject> arg0,
                      ffi.Pointer<objc.ObjCObject> arg1)>>
          ptr)
      : this._(objc.newBlock(
            _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Bool Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<objc.ObjCObject>)>(
                    _ObjCBlock_bool_objcObjCObject_NSDictionary_fnPtrTrampoline,
                    false)
                .cast(),
            ptr.cast()));
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_bool_objcObjCObject_NSDictionary.fromFunction(
      bool Function(objc.NSObject?, objc.NSDictionary?) fn)
      : this._(objc.newBlock(
            _dartFuncTrampoline ??=
                ffi.Pointer.fromFunction<ffi.Bool Function(ffi.Pointer<objc.ObjCBlock>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>(
                        _ObjCBlock_bool_objcObjCObject_NSDictionary_closureTrampoline, false)
                    .cast(),
            _ObjCBlock_bool_objcObjCObject_NSDictionary_registerClosure(
                (ffi.Pointer<objc.ObjCObject> arg0, ffi.Pointer<objc.ObjCObject> arg1) => fn(
                    arg0.address == 0
                        ? null
                        : objc.NSObject.castFromPointer(arg0, retain: true, release: true),
                    arg1.address == 0 ? null : objc.NSDictionary.castFromPointer(arg1, retain: true, release: true)))));
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  bool call(objc.NSObject? arg0, objc.NSDictionary? arg1) => pointer.ref.invoke
          .cast<
              ffi.NativeFunction<
                  ffi.Bool Function(
                      ffi.Pointer<objc.ObjCBlock> block,
                      ffi.Pointer<objc.ObjCObject> arg0,
                      ffi.Pointer<objc.ObjCObject> arg1)>>()
          .asFunction<
              bool Function(
                  ffi.Pointer<objc.ObjCBlock>,
                  ffi.Pointer<objc.ObjCObject>,
                  ffi.Pointer<objc.ObjCObject>)>()(
      pointer, arg0?.pointer ?? ffi.nullptr, arg1?.pointer ?? ffi.nullptr);
}

late final _sel_predicateWithBlock_ = objc.registerName("predicateWithBlock:");
final _objc_msgSend_408 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCBlock>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCBlock>)>();
late final _sel_predicateFormat = objc.registerName("predicateFormat");
late final _sel_predicateWithSubstitutionVariables_ =
    objc.registerName("predicateWithSubstitutionVariables:");
final _objc_msgSend_409 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_evaluateWithObject_ = objc.registerName("evaluateWithObject:");
final _objc_msgSend_410 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        bool Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_evaluateWithObject_substitutionVariables_ =
    objc.registerName("evaluateWithObject:substitutionVariables:");
final _objc_msgSend_411 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_allowEvaluation = objc.registerName("allowEvaluation");
late final _sel_filteredOrderedSetUsingPredicate_ =
    objc.registerName("filteredOrderedSetUsingPredicate:");
final _objc_msgSend_412 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();

class NSMutableOrderedSet extends NSOrderedSet {
  NSMutableOrderedSet._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSMutableOrderedSet] that points to the same underlying object as [other].
  NSMutableOrderedSet.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSMutableOrderedSet] that wraps the given raw object pointer.
  NSMutableOrderedSet.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSMutableOrderedSet].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSMutableOrderedSet);
  }

  void insertObject_atIndex_(objc.NSObject object, int idx) {
    _objc_msgSend_413(
        this.pointer, _sel_insertObject_atIndex_, object.pointer, idx);
  }

  void removeObjectAtIndex_(int idx) {
    _objc_msgSend_414(this.pointer, _sel_removeObjectAtIndex_, idx);
  }

  void replaceObjectAtIndex_withObject_(int idx, objc.NSObject object) {
    _objc_msgSend_415(this.pointer, _sel_replaceObjectAtIndex_withObject_, idx,
        object.pointer);
  }

  @override
  NSMutableOrderedSet? initWithCoder_(objc.NSCoder coder) {
    final _ret =
        _objc_msgSend_231(this.pointer, _sel_initWithCoder_, coder.pointer);
    return _ret.address == 0
        ? null
        : NSMutableOrderedSet.castFromPointer(_ret,
            retain: true, release: true);
  }

  @override
  NSMutableOrderedSet init() {
    final _ret = _objc_msgSend_40(this.pointer, _sel_init);
    return NSMutableOrderedSet.castFromPointer(_ret,
        retain: true, release: true);
  }

  NSMutableOrderedSet initWithCapacity_(int numItems) {
    final _ret =
        _objc_msgSend_355(this.pointer, _sel_initWithCapacity_, numItems);
    return NSMutableOrderedSet.castFromPointer(_ret,
        retain: true, release: true);
  }

  void addObject_(objc.NSObject object) {
    _objc_msgSend_49(this.pointer, _sel_addObject_, object.pointer);
  }

  void addObjects_count_(
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> objects, int count) {
    _objc_msgSend_416(this.pointer, _sel_addObjects_count_, objects, count);
  }

  void addObjectsFromArray_(objc.NSArray array) {
    _objc_msgSend_242(this.pointer, _sel_addObjectsFromArray_, array.pointer);
  }

  void exchangeObjectAtIndex_withObjectAtIndex_(int idx1, int idx2) {
    _objc_msgSend_417(this.pointer,
        _sel_exchangeObjectAtIndex_withObjectAtIndex_, idx1, idx2);
  }

  void moveObjectsAtIndexes_toIndex_(objc.NSIndexSet indexes, int idx) {
    _objc_msgSend_418(
        this.pointer, _sel_moveObjectsAtIndexes_toIndex_, indexes.pointer, idx);
  }

  void insertObjects_atIndexes_(objc.NSArray objects, objc.NSIndexSet indexes) {
    _objc_msgSend_419(this.pointer, _sel_insertObjects_atIndexes_,
        objects.pointer, indexes.pointer);
  }

  void setObject_atIndex_(objc.NSObject obj, int idx) {
    _objc_msgSend_413(this.pointer, _sel_setObject_atIndex_, obj.pointer, idx);
  }

  void setObject_atIndexedSubscript_(objc.NSObject obj, int idx) {
    _objc_msgSend_413(
        this.pointer, _sel_setObject_atIndexedSubscript_, obj.pointer, idx);
  }

  void replaceObjectsInRange_withObjects_count_(_NSRange range,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> objects, int count) {
    _objc_msgSend_420(this.pointer,
        _sel_replaceObjectsInRange_withObjects_count_, range, objects, count);
  }

  void replaceObjectsAtIndexes_withObjects_(
      objc.NSIndexSet indexes, objc.NSArray objects) {
    _objc_msgSend_421(this.pointer, _sel_replaceObjectsAtIndexes_withObjects_,
        indexes.pointer, objects.pointer);
  }

  void removeObjectsInRange_(_NSRange range) {
    _objc_msgSend_81(this.pointer, _sel_removeObjectsInRange_, range);
  }

  void removeObjectsAtIndexes_(objc.NSIndexSet indexes) {
    _objc_msgSend_422(
        this.pointer, _sel_removeObjectsAtIndexes_, indexes.pointer);
  }

  void removeAllObjects() {
    _objc_msgSend_82(this.pointer, _sel_removeAllObjects);
  }

  void removeObject_(objc.NSObject object) {
    _objc_msgSend_49(this.pointer, _sel_removeObject_, object.pointer);
  }

  void removeObjectsInArray_(objc.NSArray array) {
    _objc_msgSend_242(this.pointer, _sel_removeObjectsInArray_, array.pointer);
  }

  void intersectOrderedSet_(NSOrderedSet other) {
    _objc_msgSend_423(this.pointer, _sel_intersectOrderedSet_, other.pointer);
  }

  void minusOrderedSet_(NSOrderedSet other) {
    _objc_msgSend_423(this.pointer, _sel_minusOrderedSet_, other.pointer);
  }

  void unionOrderedSet_(NSOrderedSet other) {
    _objc_msgSend_423(this.pointer, _sel_unionOrderedSet_, other.pointer);
  }

  void intersectSet_(objc.NSSet other) {
    _objc_msgSend_424(this.pointer, _sel_intersectSet_, other.pointer);
  }

  void minusSet_(objc.NSSet other) {
    _objc_msgSend_424(this.pointer, _sel_minusSet_, other.pointer);
  }

  void unionSet_(objc.NSSet other) {
    _objc_msgSend_424(this.pointer, _sel_unionSet_, other.pointer);
  }

  void sortUsingComparator_(
      ObjCBlock_NSComparisonResult_objcObjCObject_objcObjCObject cmptr) {
    _objc_msgSend_425(this.pointer, _sel_sortUsingComparator_, cmptr.pointer);
  }

  void sortWithOptions_usingComparator_(int opts,
      ObjCBlock_NSComparisonResult_objcObjCObject_objcObjCObject cmptr) {
    _objc_msgSend_426(this.pointer, _sel_sortWithOptions_usingComparator_, opts,
        cmptr.pointer);
  }

  void sortRange_options_usingComparator_(_NSRange range, int opts,
      ObjCBlock_NSComparisonResult_objcObjCObject_objcObjCObject cmptr) {
    _objc_msgSend_427(this.pointer, _sel_sortRange_options_usingComparator_,
        range, opts, cmptr.pointer);
  }

  static NSMutableOrderedSet orderedSetWithCapacity_(int numItems) {
    final _ret = _objc_msgSend_355(
        _class_NSMutableOrderedSet, _sel_orderedSetWithCapacity_, numItems);
    return NSMutableOrderedSet.castFromPointer(_ret,
        retain: true, release: true);
  }

  void applyDifference_(objc.NSObject difference) {
    _objc_msgSend_49(this.pointer, _sel_applyDifference_, difference.pointer);
  }

  void sortUsingDescriptors_(objc.NSArray sortDescriptors) {
    _objc_msgSend_242(
        this.pointer, _sel_sortUsingDescriptors_, sortDescriptors.pointer);
  }

  void filterUsingPredicate_(NSPredicate p) {
    _objc_msgSend_428(this.pointer, _sel_filterUsingPredicate_, p.pointer);
  }

  @override
  NSMutableOrderedSet initWithObjects_count_(
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> objects, int cnt) {
    final _ret = _objc_msgSend_365(
        this.pointer, _sel_initWithObjects_count_, objects, cnt);
    return NSMutableOrderedSet.castFromPointer(_ret,
        retain: true, release: true);
  }

  static NSMutableOrderedSet orderedSet() {
    final _ret = _objc_msgSend_40(_class_NSMutableOrderedSet, _sel_orderedSet);
    return NSMutableOrderedSet.castFromPointer(_ret,
        retain: true, release: true);
  }

  static NSMutableOrderedSet orderedSetWithObject_(objc.NSObject object) {
    final _ret = _objc_msgSend_387(
        _class_NSMutableOrderedSet, _sel_orderedSetWithObject_, object.pointer);
    return NSMutableOrderedSet.castFromPointer(_ret,
        retain: true, release: true);
  }

  static NSMutableOrderedSet orderedSetWithObjects_count_(
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> objects, int cnt) {
    final _ret = _objc_msgSend_365(_class_NSMutableOrderedSet,
        _sel_orderedSetWithObjects_count_, objects, cnt);
    return NSMutableOrderedSet.castFromPointer(_ret,
        retain: true, release: true);
  }

  static NSMutableOrderedSet orderedSetWithObjects_(objc.NSObject firstObj) {
    final _ret = _objc_msgSend_387(_class_NSMutableOrderedSet,
        _sel_orderedSetWithObjects_, firstObj.pointer);
    return NSMutableOrderedSet.castFromPointer(_ret,
        retain: true, release: true);
  }

  static NSMutableOrderedSet orderedSetWithOrderedSet_(NSOrderedSet set) {
    final _ret = _objc_msgSend_388(_class_NSMutableOrderedSet,
        _sel_orderedSetWithOrderedSet_, set.pointer);
    return NSMutableOrderedSet.castFromPointer(_ret,
        retain: true, release: true);
  }

  static NSMutableOrderedSet orderedSetWithOrderedSet_range_copyItems_(
      NSOrderedSet set, _NSRange range, bool flag) {
    final _ret = _objc_msgSend_389(
        _class_NSMutableOrderedSet,
        _sel_orderedSetWithOrderedSet_range_copyItems_,
        set.pointer,
        range,
        flag);
    return NSMutableOrderedSet.castFromPointer(_ret,
        retain: false, release: true);
  }

  static NSMutableOrderedSet orderedSetWithArray_(objc.NSArray array) {
    final _ret = _objc_msgSend_390(
        _class_NSMutableOrderedSet, _sel_orderedSetWithArray_, array.pointer);
    return NSMutableOrderedSet.castFromPointer(_ret,
        retain: true, release: true);
  }

  static NSMutableOrderedSet orderedSetWithArray_range_copyItems_(
      objc.NSArray array, _NSRange range, bool flag) {
    final _ret = _objc_msgSend_391(_class_NSMutableOrderedSet,
        _sel_orderedSetWithArray_range_copyItems_, array.pointer, range, flag);
    return NSMutableOrderedSet.castFromPointer(_ret,
        retain: false, release: true);
  }

  static NSMutableOrderedSet orderedSetWithSet_(objc.NSSet set) {
    final _ret = _objc_msgSend_392(
        _class_NSMutableOrderedSet, _sel_orderedSetWithSet_, set.pointer);
    return NSMutableOrderedSet.castFromPointer(_ret,
        retain: true, release: true);
  }

  static NSMutableOrderedSet orderedSetWithSet_copyItems_(
      objc.NSSet set, bool flag) {
    final _ret = _objc_msgSend_393(_class_NSMutableOrderedSet,
        _sel_orderedSetWithSet_copyItems_, set.pointer, flag);
    return NSMutableOrderedSet.castFromPointer(_ret,
        retain: false, release: true);
  }

  @override
  NSMutableOrderedSet initWithObject_(objc.NSObject object) {
    final _ret =
        _objc_msgSend_387(this.pointer, _sel_initWithObject_, object.pointer);
    return NSMutableOrderedSet.castFromPointer(_ret,
        retain: true, release: true);
  }

  @override
  NSMutableOrderedSet initWithObjects_(objc.NSObject firstObj) {
    final _ret = _objc_msgSend_387(
        this.pointer, _sel_initWithObjects_, firstObj.pointer);
    return NSMutableOrderedSet.castFromPointer(_ret,
        retain: true, release: true);
  }

  @override
  NSMutableOrderedSet initWithOrderedSet_(NSOrderedSet set) {
    final _ret =
        _objc_msgSend_388(this.pointer, _sel_initWithOrderedSet_, set.pointer);
    return NSMutableOrderedSet.castFromPointer(_ret,
        retain: true, release: true);
  }

  @override
  NSMutableOrderedSet initWithOrderedSet_copyItems_(
      NSOrderedSet set, bool flag) {
    final _ret = _objc_msgSend_394(
        this.pointer, _sel_initWithOrderedSet_copyItems_, set.pointer, flag);
    return NSMutableOrderedSet.castFromPointer(_ret,
        retain: false, release: true);
  }

  @override
  NSMutableOrderedSet initWithOrderedSet_range_copyItems_(
      NSOrderedSet set, _NSRange range, bool flag) {
    final _ret = _objc_msgSend_389(this.pointer,
        _sel_initWithOrderedSet_range_copyItems_, set.pointer, range, flag);
    return NSMutableOrderedSet.castFromPointer(_ret,
        retain: false, release: true);
  }

  @override
  NSMutableOrderedSet initWithArray_(objc.NSArray array) {
    final _ret =
        _objc_msgSend_390(this.pointer, _sel_initWithArray_, array.pointer);
    return NSMutableOrderedSet.castFromPointer(_ret,
        retain: true, release: true);
  }

  @override
  NSMutableOrderedSet initWithArray_copyItems_(objc.NSArray set, bool flag) {
    final _ret = _objc_msgSend_395(
        this.pointer, _sel_initWithArray_copyItems_, set.pointer, flag);
    return NSMutableOrderedSet.castFromPointer(_ret,
        retain: false, release: true);
  }

  @override
  NSMutableOrderedSet initWithArray_range_copyItems_(
      objc.NSArray set, _NSRange range, bool flag) {
    final _ret = _objc_msgSend_391(this.pointer,
        _sel_initWithArray_range_copyItems_, set.pointer, range, flag);
    return NSMutableOrderedSet.castFromPointer(_ret,
        retain: false, release: true);
  }

  @override
  NSMutableOrderedSet initWithSet_(objc.NSSet set) {
    final _ret =
        _objc_msgSend_392(this.pointer, _sel_initWithSet_, set.pointer);
    return NSMutableOrderedSet.castFromPointer(_ret,
        retain: true, release: true);
  }

  @override
  NSMutableOrderedSet initWithSet_copyItems_(objc.NSSet set, bool flag) {
    final _ret = _objc_msgSend_393(
        this.pointer, _sel_initWithSet_copyItems_, set.pointer, flag);
    return NSMutableOrderedSet.castFromPointer(_ret,
        retain: false, release: true);
  }

  static NSMutableOrderedSet new1() {
    final _ret = _objc_msgSend_40(_class_NSMutableOrderedSet, _sel_new);
    return NSMutableOrderedSet.castFromPointer(_ret,
        retain: false, release: true);
  }

  static NSMutableOrderedSet allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_47(_class_NSMutableOrderedSet, _sel_allocWithZone_, zone);
    return NSMutableOrderedSet.castFromPointer(_ret,
        retain: false, release: true);
  }

  static NSMutableOrderedSet alloc() {
    final _ret = _objc_msgSend_40(_class_NSMutableOrderedSet, _sel_alloc);
    return NSMutableOrderedSet.castFromPointer(_ret,
        retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.NSObject aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.NSObject? anArgument) {
    _objc_msgSend_48(
        _class_NSMutableOrderedSet,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  static void cancelPreviousPerformRequestsWithTarget_(objc.NSObject aTarget) {
    _objc_msgSend_49(_class_NSMutableOrderedSet,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_7(
        _class_NSMutableOrderedSet, _sel_accessInstanceVariablesDirectly);
  }

  static bool useStoredAccessor() {
    return _objc_msgSend_7(_class_NSMutableOrderedSet, _sel_useStoredAccessor);
  }

  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_50(_class_NSMutableOrderedSet,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_51(_class_NSMutableOrderedSet,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_52(
        _class_NSMutableOrderedSet,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_6(
        _class_NSMutableOrderedSet, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSObject classForKeyedUnarchiver() {
    final _ret = _objc_msgSend_40(
        _class_NSMutableOrderedSet, _sel_classForKeyedUnarchiver);
    return objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }
}

late final _class_NSMutableOrderedSet = objc.getClass("NSMutableOrderedSet");
late final _sel_insertObject_atIndex_ =
    objc.registerName("insertObject:atIndex:");
final _objc_msgSend_413 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.UnsignedLong)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int)>();
late final _sel_removeObjectAtIndex_ =
    objc.registerName("removeObjectAtIndex:");
final _objc_msgSend_414 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedLong)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_replaceObjectAtIndex_withObject_ =
    objc.registerName("replaceObjectAtIndex:withObject:");
final _objc_msgSend_415 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.UnsignedLong,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_initWithCapacity_ = objc.registerName("initWithCapacity:");
late final _sel_addObject_ = objc.registerName("addObject:");
late final _sel_addObjects_count_ = objc.registerName("addObjects:count:");
final _objc_msgSend_416 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
                ffi.UnsignedLong)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
            int)>();
late final _sel_addObjectsFromArray_ =
    objc.registerName("addObjectsFromArray:");
late final _sel_exchangeObjectAtIndex_withObjectAtIndex_ =
    objc.registerName("exchangeObjectAtIndex:withObjectAtIndex:");
final _objc_msgSend_417 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.UnsignedLong,
                ffi.UnsignedLong)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int, int)>();
late final _sel_moveObjectsAtIndexes_toIndex_ =
    objc.registerName("moveObjectsAtIndexes:toIndex:");
final _objc_msgSend_418 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.UnsignedLong)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int)>();
late final _sel_insertObjects_atIndexes_ =
    objc.registerName("insertObjects:atIndexes:");
final _objc_msgSend_419 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_setObject_atIndex_ = objc.registerName("setObject:atIndex:");
late final _sel_setObject_atIndexedSubscript_ =
    objc.registerName("setObject:atIndexedSubscript:");
late final _sel_replaceObjectsInRange_withObjects_count_ =
    objc.registerName("replaceObjectsInRange:withObjects:count:");
final _objc_msgSend_420 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                _NSRange,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
                ffi.UnsignedLong)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            _NSRange,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
            int)>();
late final _sel_replaceObjectsAtIndexes_withObjects_ =
    objc.registerName("replaceObjectsAtIndexes:withObjects:");
final _objc_msgSend_421 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_removeObjectsInRange_ =
    objc.registerName("removeObjectsInRange:");
late final _sel_removeObjectsAtIndexes_ =
    objc.registerName("removeObjectsAtIndexes:");
final _objc_msgSend_422 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_removeAllObjects = objc.registerName("removeAllObjects");
late final _sel_removeObject_ = objc.registerName("removeObject:");
late final _sel_removeObjectsInArray_ =
    objc.registerName("removeObjectsInArray:");
late final _sel_intersectOrderedSet_ =
    objc.registerName("intersectOrderedSet:");
final _objc_msgSend_423 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_minusOrderedSet_ = objc.registerName("minusOrderedSet:");
late final _sel_unionOrderedSet_ = objc.registerName("unionOrderedSet:");
late final _sel_intersectSet_ = objc.registerName("intersectSet:");
final _objc_msgSend_424 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_minusSet_ = objc.registerName("minusSet:");
late final _sel_unionSet_ = objc.registerName("unionSet:");
late final _sel_sortUsingComparator_ =
    objc.registerName("sortUsingComparator:");
final _objc_msgSend_425 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCBlock>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCBlock>)>();
late final _sel_sortWithOptions_usingComparator_ =
    objc.registerName("sortWithOptions:usingComparator:");
final _objc_msgSend_426 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Int32,
                ffi.Pointer<objc.ObjCBlock>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int,
            ffi.Pointer<objc.ObjCBlock>)>();
late final _sel_sortRange_options_usingComparator_ =
    objc.registerName("sortRange:options:usingComparator:");
final _objc_msgSend_427 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                _NSRange,
                ffi.Int32,
                ffi.Pointer<objc.ObjCBlock>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            _NSRange,
            int,
            ffi.Pointer<objc.ObjCBlock>)>();
late final _sel_orderedSetWithCapacity_ =
    objc.registerName("orderedSetWithCapacity:");
late final _sel_applyDifference_ = objc.registerName("applyDifference:");
late final _sel_sortUsingDescriptors_ =
    objc.registerName("sortUsingDescriptors:");
late final _sel_filterUsingPredicate_ =
    objc.registerName("filterUsingPredicate:");
final _objc_msgSend_428 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();

class NSMorphology extends objc.NSObject {
  NSMorphology._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSMorphology] that points to the same underlying object as [other].
  NSMorphology.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSMorphology] that wraps the given raw object pointer.
  NSMorphology.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSMorphology].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSMorphology);
  }

  int get grammaticalGender {
    return _objc_msgSend_429(this.pointer, _sel_grammaticalGender);
  }

  set grammaticalGender(int value) {
    return _objc_msgSend_430(this.pointer, _sel_setGrammaticalGender_, value);
  }

  int get partOfSpeech {
    return _objc_msgSend_431(this.pointer, _sel_partOfSpeech);
  }

  set partOfSpeech(int value) {
    return _objc_msgSend_432(this.pointer, _sel_setPartOfSpeech_, value);
  }

  int get number {
    return _objc_msgSend_433(this.pointer, _sel_number);
  }

  set number(int value) {
    return _objc_msgSend_434(this.pointer, _sel_setNumber_, value);
  }

  int get grammaticalCase {
    return _objc_msgSend_435(this.pointer, _sel_grammaticalCase);
  }

  set grammaticalCase(int value) {
    return _objc_msgSend_436(this.pointer, _sel_setGrammaticalCase_, value);
  }

  int get determination {
    return _objc_msgSend_437(this.pointer, _sel_determination);
  }

  set determination(int value) {
    return _objc_msgSend_438(this.pointer, _sel_setDetermination_, value);
  }

  int get grammaticalPerson {
    return _objc_msgSend_439(this.pointer, _sel_grammaticalPerson);
  }

  set grammaticalPerson(int value) {
    return _objc_msgSend_440(this.pointer, _sel_setGrammaticalPerson_, value);
  }

  int get pronounType {
    return _objc_msgSend_441(this.pointer, _sel_pronounType);
  }

  set pronounType(int value) {
    return _objc_msgSend_442(this.pointer, _sel_setPronounType_, value);
  }

  int get definiteness {
    return _objc_msgSend_443(this.pointer, _sel_definiteness);
  }

  set definiteness(int value) {
    return _objc_msgSend_444(this.pointer, _sel_setDefiniteness_, value);
  }

  NSMorphologyCustomPronoun? customPronounForLanguage_(objc.NSString language) {
    final _ret = _objc_msgSend_446(
        this.pointer, _sel_customPronounForLanguage_, language.pointer);
    return _ret.address == 0
        ? null
        : NSMorphologyCustomPronoun.castFromPointer(_ret,
            retain: true, release: true);
  }

  bool setCustomPronoun_forLanguage_error_(NSMorphologyCustomPronoun? features,
      objc.NSString language, ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    return _objc_msgSend_447(
        this.pointer,
        _sel_setCustomPronoun_forLanguage_error_,
        features?.pointer ?? ffi.nullptr,
        language.pointer,
        error);
  }

  bool get unspecified {
    return _objc_msgSend_7(this.pointer, _sel_isUnspecified);
  }

  static NSMorphology getUserMorphology() {
    final _ret = _objc_msgSend_448(_class_NSMorphology, _sel_userMorphology);
    return NSMorphology.castFromPointer(_ret, retain: true, release: true);
  }

  @override
  NSMorphology init() {
    final _ret = _objc_msgSend_40(this.pointer, _sel_init);
    return NSMorphology.castFromPointer(_ret, retain: true, release: true);
  }

  static NSMorphology new1() {
    final _ret = _objc_msgSend_40(_class_NSMorphology, _sel_new);
    return NSMorphology.castFromPointer(_ret, retain: false, release: true);
  }

  static NSMorphology allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_47(_class_NSMorphology, _sel_allocWithZone_, zone);
    return NSMorphology.castFromPointer(_ret, retain: false, release: true);
  }

  static NSMorphology alloc() {
    final _ret = _objc_msgSend_40(_class_NSMorphology, _sel_alloc);
    return NSMorphology.castFromPointer(_ret, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.NSObject aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.NSObject? anArgument) {
    _objc_msgSend_48(
        _class_NSMorphology,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  static void cancelPreviousPerformRequestsWithTarget_(objc.NSObject aTarget) {
    _objc_msgSend_49(_class_NSMorphology,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_7(
        _class_NSMorphology, _sel_accessInstanceVariablesDirectly);
  }

  static bool useStoredAccessor() {
    return _objc_msgSend_7(_class_NSMorphology, _sel_useStoredAccessor);
  }

  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_50(_class_NSMorphology,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_51(_class_NSMorphology,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_52(
        _class_NSMorphology,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_6(
        _class_NSMorphology, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSObject classForKeyedUnarchiver() {
    final _ret =
        _objc_msgSend_40(_class_NSMorphology, _sel_classForKeyedUnarchiver);
    return objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }
}

late final _class_NSMorphology = objc.getClass("NSMorphology");

abstract class NSGrammaticalGender {
  static const int NSGrammaticalGenderNotSet = 0;
  static const int NSGrammaticalGenderFeminine = 1;
  static const int NSGrammaticalGenderMasculine = 2;
  static const int NSGrammaticalGenderNeuter = 3;
}

late final _sel_grammaticalGender = objc.registerName("grammaticalGender");
final _objc_msgSend_429 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Int32 Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setGrammaticalGender_ =
    objc.registerName("setGrammaticalGender:");
final _objc_msgSend_430 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Int32)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();

abstract class NSGrammaticalPartOfSpeech {
  static const int NSGrammaticalPartOfSpeechNotSet = 0;
  static const int NSGrammaticalPartOfSpeechDeterminer = 1;
  static const int NSGrammaticalPartOfSpeechPronoun = 2;
  static const int NSGrammaticalPartOfSpeechLetter = 3;
  static const int NSGrammaticalPartOfSpeechAdverb = 4;
  static const int NSGrammaticalPartOfSpeechParticle = 5;
  static const int NSGrammaticalPartOfSpeechAdjective = 6;
  static const int NSGrammaticalPartOfSpeechAdposition = 7;
  static const int NSGrammaticalPartOfSpeechVerb = 8;
  static const int NSGrammaticalPartOfSpeechNoun = 9;
  static const int NSGrammaticalPartOfSpeechConjunction = 10;
  static const int NSGrammaticalPartOfSpeechNumeral = 11;
  static const int NSGrammaticalPartOfSpeechInterjection = 12;
  static const int NSGrammaticalPartOfSpeechPreposition = 13;
  static const int NSGrammaticalPartOfSpeechAbbreviation = 14;
}

late final _sel_partOfSpeech = objc.registerName("partOfSpeech");
final _objc_msgSend_431 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Int32 Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setPartOfSpeech_ = objc.registerName("setPartOfSpeech:");
final _objc_msgSend_432 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Int32)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();

abstract class NSGrammaticalNumber {
  static const int NSGrammaticalNumberNotSet = 0;
  static const int NSGrammaticalNumberSingular = 1;
  static const int NSGrammaticalNumberZero = 2;
  static const int NSGrammaticalNumberPlural = 3;
  static const int NSGrammaticalNumberPluralTwo = 4;
  static const int NSGrammaticalNumberPluralFew = 5;
  static const int NSGrammaticalNumberPluralMany = 6;
}

late final _sel_number = objc.registerName("number");
final _objc_msgSend_433 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Int32 Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setNumber_ = objc.registerName("setNumber:");
final _objc_msgSend_434 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Int32)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();

abstract class NSGrammaticalCase {
  static const int NSGrammaticalCaseNotSet = 0;
  static const int NSGrammaticalCaseNominative = 1;
  static const int NSGrammaticalCaseAccusative = 2;
  static const int NSGrammaticalCaseDative = 3;
  static const int NSGrammaticalCaseGenitive = 4;
  static const int NSGrammaticalCasePrepositional = 5;
  static const int NSGrammaticalCaseAblative = 6;
  static const int NSGrammaticalCaseAdessive = 7;
  static const int NSGrammaticalCaseAllative = 8;
  static const int NSGrammaticalCaseElative = 9;
  static const int NSGrammaticalCaseIllative = 10;
  static const int NSGrammaticalCaseEssive = 11;
  static const int NSGrammaticalCaseInessive = 12;
  static const int NSGrammaticalCaseLocative = 13;
  static const int NSGrammaticalCaseTranslative = 14;
}

late final _sel_grammaticalCase = objc.registerName("grammaticalCase");
final _objc_msgSend_435 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Int32 Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setGrammaticalCase_ = objc.registerName("setGrammaticalCase:");
final _objc_msgSend_436 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Int32)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();

abstract class NSGrammaticalDetermination {
  static const int NSGrammaticalDeterminationNotSet = 0;
  static const int NSGrammaticalDeterminationIndependent = 1;
  static const int NSGrammaticalDeterminationDependent = 2;
}

late final _sel_determination = objc.registerName("determination");
final _objc_msgSend_437 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Int32 Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setDetermination_ = objc.registerName("setDetermination:");
final _objc_msgSend_438 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Int32)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();

abstract class NSGrammaticalPerson {
  static const int NSGrammaticalPersonNotSet = 0;
  static const int NSGrammaticalPersonFirst = 1;
  static const int NSGrammaticalPersonSecond = 2;
  static const int NSGrammaticalPersonThird = 3;
}

late final _sel_grammaticalPerson = objc.registerName("grammaticalPerson");
final _objc_msgSend_439 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Int32 Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setGrammaticalPerson_ =
    objc.registerName("setGrammaticalPerson:");
final _objc_msgSend_440 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Int32)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();

abstract class NSGrammaticalPronounType {
  static const int NSGrammaticalPronounTypeNotSet = 0;
  static const int NSGrammaticalPronounTypePersonal = 1;
  static const int NSGrammaticalPronounTypeReflexive = 2;
  static const int NSGrammaticalPronounTypePossessive = 3;
}

late final _sel_pronounType = objc.registerName("pronounType");
final _objc_msgSend_441 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Int32 Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setPronounType_ = objc.registerName("setPronounType:");
final _objc_msgSend_442 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Int32)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();

abstract class NSGrammaticalDefiniteness {
  static const int NSGrammaticalDefinitenessNotSet = 0;
  static const int NSGrammaticalDefinitenessIndefinite = 1;
  static const int NSGrammaticalDefinitenessDefinite = 2;
}

late final _sel_definiteness = objc.registerName("definiteness");
final _objc_msgSend_443 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Int32 Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setDefiniteness_ = objc.registerName("setDefiniteness:");
final _objc_msgSend_444 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Int32)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();

class NSMorphologyCustomPronoun extends objc.NSObject {
  NSMorphologyCustomPronoun._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSMorphologyCustomPronoun] that points to the same underlying object as [other].
  NSMorphologyCustomPronoun.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSMorphologyCustomPronoun] that wraps the given raw object pointer.
  NSMorphologyCustomPronoun.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSMorphologyCustomPronoun].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSMorphologyCustomPronoun);
  }

  static bool isSupportedForLanguage_(objc.NSString language) {
    return _objc_msgSend_51(_class_NSMorphologyCustomPronoun,
        _sel_isSupportedForLanguage_, language.pointer);
  }

  static objc.NSArray requiredKeysForLanguage_(objc.NSString language) {
    final _ret = _objc_msgSend_445(_class_NSMorphologyCustomPronoun,
        _sel_requiredKeysForLanguage_, language.pointer);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSString? get subjectForm {
    final _ret = _objc_msgSend_13(this.pointer, _sel_subjectForm);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  set subjectForm(objc.NSString? value) {
    return _objc_msgSend_46(
        this.pointer, _sel_setSubjectForm_, value?.pointer ?? ffi.nullptr);
  }

  objc.NSString? get objectForm {
    final _ret = _objc_msgSend_13(this.pointer, _sel_objectForm);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  set objectForm(objc.NSString? value) {
    return _objc_msgSend_46(
        this.pointer, _sel_setObjectForm_, value?.pointer ?? ffi.nullptr);
  }

  objc.NSString? get possessiveForm {
    final _ret = _objc_msgSend_13(this.pointer, _sel_possessiveForm);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  set possessiveForm(objc.NSString? value) {
    return _objc_msgSend_46(
        this.pointer, _sel_setPossessiveForm_, value?.pointer ?? ffi.nullptr);
  }

  objc.NSString? get possessiveAdjectiveForm {
    final _ret = _objc_msgSend_13(this.pointer, _sel_possessiveAdjectiveForm);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  set possessiveAdjectiveForm(objc.NSString? value) {
    return _objc_msgSend_46(this.pointer, _sel_setPossessiveAdjectiveForm_,
        value?.pointer ?? ffi.nullptr);
  }

  objc.NSString? get reflexiveForm {
    final _ret = _objc_msgSend_13(this.pointer, _sel_reflexiveForm);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  set reflexiveForm(objc.NSString? value) {
    return _objc_msgSend_46(
        this.pointer, _sel_setReflexiveForm_, value?.pointer ?? ffi.nullptr);
  }

  @override
  NSMorphologyCustomPronoun init() {
    final _ret = _objc_msgSend_40(this.pointer, _sel_init);
    return NSMorphologyCustomPronoun.castFromPointer(_ret,
        retain: true, release: true);
  }

  static NSMorphologyCustomPronoun new1() {
    final _ret = _objc_msgSend_40(_class_NSMorphologyCustomPronoun, _sel_new);
    return NSMorphologyCustomPronoun.castFromPointer(_ret,
        retain: false, release: true);
  }

  static NSMorphologyCustomPronoun allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_47(
        _class_NSMorphologyCustomPronoun, _sel_allocWithZone_, zone);
    return NSMorphologyCustomPronoun.castFromPointer(_ret,
        retain: false, release: true);
  }

  static NSMorphologyCustomPronoun alloc() {
    final _ret = _objc_msgSend_40(_class_NSMorphologyCustomPronoun, _sel_alloc);
    return NSMorphologyCustomPronoun.castFromPointer(_ret,
        retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.NSObject aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.NSObject? anArgument) {
    _objc_msgSend_48(
        _class_NSMorphologyCustomPronoun,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  static void cancelPreviousPerformRequestsWithTarget_(objc.NSObject aTarget) {
    _objc_msgSend_49(_class_NSMorphologyCustomPronoun,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_7(
        _class_NSMorphologyCustomPronoun, _sel_accessInstanceVariablesDirectly);
  }

  static bool useStoredAccessor() {
    return _objc_msgSend_7(
        _class_NSMorphologyCustomPronoun, _sel_useStoredAccessor);
  }

  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_50(_class_NSMorphologyCustomPronoun,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_51(_class_NSMorphologyCustomPronoun,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_52(
        _class_NSMorphologyCustomPronoun,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_6(
        _class_NSMorphologyCustomPronoun, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSObject classForKeyedUnarchiver() {
    final _ret = _objc_msgSend_40(
        _class_NSMorphologyCustomPronoun, _sel_classForKeyedUnarchiver);
    return objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }
}

late final _class_NSMorphologyCustomPronoun =
    objc.getClass("NSMorphologyCustomPronoun");
late final _sel_isSupportedForLanguage_ =
    objc.registerName("isSupportedForLanguage:");
late final _sel_requiredKeysForLanguage_ =
    objc.registerName("requiredKeysForLanguage:");
final _objc_msgSend_445 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_subjectForm = objc.registerName("subjectForm");
late final _sel_setSubjectForm_ = objc.registerName("setSubjectForm:");
late final _sel_objectForm = objc.registerName("objectForm");
late final _sel_setObjectForm_ = objc.registerName("setObjectForm:");
late final _sel_possessiveForm = objc.registerName("possessiveForm");
late final _sel_setPossessiveForm_ = objc.registerName("setPossessiveForm:");
late final _sel_possessiveAdjectiveForm =
    objc.registerName("possessiveAdjectiveForm");
late final _sel_setPossessiveAdjectiveForm_ =
    objc.registerName("setPossessiveAdjectiveForm:");
late final _sel_reflexiveForm = objc.registerName("reflexiveForm");
late final _sel_setReflexiveForm_ = objc.registerName("setReflexiveForm:");
late final _sel_customPronounForLanguage_ =
    objc.registerName("customPronounForLanguage:");
final _objc_msgSend_446 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_setCustomPronoun_forLanguage_error_ =
    objc.registerName("setCustomPronoun:forLanguage:error:");
final _objc_msgSend_447 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_isUnspecified = objc.registerName("isUnspecified");
late final _sel_userMorphology = objc.registerName("userMorphology");
final _objc_msgSend_448 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();

class NSOperationQueue extends objc.NSObject {
  NSOperationQueue._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSOperationQueue] that points to the same underlying object as [other].
  NSOperationQueue.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSOperationQueue] that wraps the given raw object pointer.
  NSOperationQueue.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSOperationQueue].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSOperationQueue);
  }

  objc.NSProgress get progress {
    final _ret = _objc_msgSend_347(this.pointer, _sel_progress);
    return objc.NSProgress.castFromPointer(_ret, retain: true, release: true);
  }

  void addOperation_(NSOperation op) {
    _objc_msgSend_449(this.pointer, _sel_addOperation_, op.pointer);
  }

  void addOperations_waitUntilFinished_(objc.NSArray ops, bool wait) {
    _objc_msgSend_456(
        this.pointer, _sel_addOperations_waitUntilFinished_, ops.pointer, wait);
  }

  void addOperationWithBlock_(ObjCBlock_ffiVoid block) {
    _objc_msgSend_249(this.pointer, _sel_addOperationWithBlock_, block.pointer);
  }

  void addBarrierBlock_(ObjCBlock_ffiVoid barrier) {
    _objc_msgSend_249(this.pointer, _sel_addBarrierBlock_, barrier.pointer);
  }

  int get maxConcurrentOperationCount {
    return _objc_msgSend_114(this.pointer, _sel_maxConcurrentOperationCount);
  }

  set maxConcurrentOperationCount(int value) {
    return _objc_msgSend_134(
        this.pointer, _sel_setMaxConcurrentOperationCount_, value);
  }

  bool get suspended {
    return _objc_msgSend_7(this.pointer, _sel_isSuspended);
  }

  set suspended(bool value) {
    return _objc_msgSend_41(this.pointer, _sel_setSuspended_, value);
  }

  objc.NSString? get name {
    final _ret = _objc_msgSend_13(this.pointer, _sel_name);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  set name(objc.NSString? value) {
    return _objc_msgSend_46(
        this.pointer, _sel_setName_, value?.pointer ?? ffi.nullptr);
  }

  int get qualityOfService {
    return _objc_msgSend_454(this.pointer, _sel_qualityOfService);
  }

  set qualityOfService(int value) {
    return _objc_msgSend_455(this.pointer, _sel_setQualityOfService_, value);
  }

  objc.NSObject? get underlyingQueue {
    final _ret = _objc_msgSend_457(this.pointer, _sel_underlyingQueue);
    return _ret.address == 0
        ? null
        : objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }

  set underlyingQueue(objc.NSObject? value) {
    return _objc_msgSend_458(
        this.pointer, _sel_setUnderlyingQueue_, value?.pointer ?? ffi.nullptr);
  }

  void cancelAllOperations() {
    _objc_msgSend_82(this.pointer, _sel_cancelAllOperations);
  }

  void waitUntilAllOperationsAreFinished() {
    _objc_msgSend_82(this.pointer, _sel_waitUntilAllOperationsAreFinished);
  }

  static NSOperationQueue? getCurrentQueue() {
    final _ret = _objc_msgSend_459(_class_NSOperationQueue, _sel_currentQueue);
    return _ret.address == 0
        ? null
        : NSOperationQueue.castFromPointer(_ret, retain: true, release: true);
  }

  static NSOperationQueue getMainQueue() {
    final _ret = _objc_msgSend_460(_class_NSOperationQueue, _sel_mainQueue);
    return NSOperationQueue.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSArray get operations {
    final _ret = _objc_msgSend_6(this.pointer, _sel_operations);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  int get operationCount {
    return _objc_msgSend_29(this.pointer, _sel_operationCount);
  }

  @override
  NSOperationQueue init() {
    final _ret = _objc_msgSend_40(this.pointer, _sel_init);
    return NSOperationQueue.castFromPointer(_ret, retain: true, release: true);
  }

  static NSOperationQueue new1() {
    final _ret = _objc_msgSend_40(_class_NSOperationQueue, _sel_new);
    return NSOperationQueue.castFromPointer(_ret, retain: false, release: true);
  }

  static NSOperationQueue allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_47(_class_NSOperationQueue, _sel_allocWithZone_, zone);
    return NSOperationQueue.castFromPointer(_ret, retain: false, release: true);
  }

  static NSOperationQueue alloc() {
    final _ret = _objc_msgSend_40(_class_NSOperationQueue, _sel_alloc);
    return NSOperationQueue.castFromPointer(_ret, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.NSObject aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.NSObject? anArgument) {
    _objc_msgSend_48(
        _class_NSOperationQueue,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  static void cancelPreviousPerformRequestsWithTarget_(objc.NSObject aTarget) {
    _objc_msgSend_49(_class_NSOperationQueue,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_7(
        _class_NSOperationQueue, _sel_accessInstanceVariablesDirectly);
  }

  static bool useStoredAccessor() {
    return _objc_msgSend_7(_class_NSOperationQueue, _sel_useStoredAccessor);
  }

  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_50(_class_NSOperationQueue,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_51(_class_NSOperationQueue,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_52(
        _class_NSOperationQueue,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_6(
        _class_NSOperationQueue, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSObject classForKeyedUnarchiver() {
    final _ret =
        _objc_msgSend_40(_class_NSOperationQueue, _sel_classForKeyedUnarchiver);
    return objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }
}

late final _class_NSOperationQueue = objc.getClass("NSOperationQueue");

class NSOperation extends objc.NSObject {
  NSOperation._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSOperation] that points to the same underlying object as [other].
  NSOperation.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSOperation] that wraps the given raw object pointer.
  NSOperation.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSOperation].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSOperation);
  }

  void start() {
    _objc_msgSend_82(this.pointer, _sel_start);
  }

  void main() {
    _objc_msgSend_82(this.pointer, _sel_main);
  }

  bool get cancelled {
    return _objc_msgSend_7(this.pointer, _sel_isCancelled);
  }

  void cancel() {
    _objc_msgSend_82(this.pointer, _sel_cancel);
  }

  bool get executing {
    return _objc_msgSend_7(this.pointer, _sel_isExecuting);
  }

  bool get finished {
    return _objc_msgSend_7(this.pointer, _sel_isFinished);
  }

  bool get concurrent {
    return _objc_msgSend_7(this.pointer, _sel_isConcurrent);
  }

  bool get asynchronous {
    return _objc_msgSend_7(this.pointer, _sel_isAsynchronous);
  }

  bool get ready {
    return _objc_msgSend_7(this.pointer, _sel_isReady);
  }

  void addDependency_(NSOperation op) {
    _objc_msgSend_449(this.pointer, _sel_addDependency_, op.pointer);
  }

  void removeDependency_(NSOperation op) {
    _objc_msgSend_449(this.pointer, _sel_removeDependency_, op.pointer);
  }

  objc.NSArray get dependencies {
    final _ret = _objc_msgSend_6(this.pointer, _sel_dependencies);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  int get queuePriority {
    return _objc_msgSend_450(this.pointer, _sel_queuePriority);
  }

  set queuePriority(int value) {
    return _objc_msgSend_451(this.pointer, _sel_setQueuePriority_, value);
  }

  ObjCBlock_ffiVoid? get completionBlock {
    final _ret = _objc_msgSend_452(this.pointer, _sel_completionBlock);
    return _ret.address == 0
        ? null
        : ObjCBlock_ffiVoid.castFromPointer(_ret, retain: true, release: true);
  }

  set completionBlock(ObjCBlock_ffiVoid? value) {
    return _objc_msgSend_453(
        this.pointer, _sel_setCompletionBlock_, value?.pointer ?? ffi.nullptr);
  }

  void waitUntilFinished() {
    _objc_msgSend_82(this.pointer, _sel_waitUntilFinished);
  }

  double get threadPriority {
    return objc.useMsgSendVariants
        ? _objc_msgSend_115Fpret(this.pointer, _sel_threadPriority)
        : _objc_msgSend_115(this.pointer, _sel_threadPriority);
  }

  set threadPriority(double value) {
    return _objc_msgSend_212(this.pointer, _sel_setThreadPriority_, value);
  }

  int get qualityOfService {
    return _objc_msgSend_454(this.pointer, _sel_qualityOfService);
  }

  set qualityOfService(int value) {
    return _objc_msgSend_455(this.pointer, _sel_setQualityOfService_, value);
  }

  objc.NSString? get name {
    final _ret = _objc_msgSend_13(this.pointer, _sel_name);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  set name(objc.NSString? value) {
    return _objc_msgSend_46(
        this.pointer, _sel_setName_, value?.pointer ?? ffi.nullptr);
  }

  @override
  NSOperation init() {
    final _ret = _objc_msgSend_40(this.pointer, _sel_init);
    return NSOperation.castFromPointer(_ret, retain: true, release: true);
  }

  static NSOperation new1() {
    final _ret = _objc_msgSend_40(_class_NSOperation, _sel_new);
    return NSOperation.castFromPointer(_ret, retain: false, release: true);
  }

  static NSOperation allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_47(_class_NSOperation, _sel_allocWithZone_, zone);
    return NSOperation.castFromPointer(_ret, retain: false, release: true);
  }

  static NSOperation alloc() {
    final _ret = _objc_msgSend_40(_class_NSOperation, _sel_alloc);
    return NSOperation.castFromPointer(_ret, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.NSObject aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.NSObject? anArgument) {
    _objc_msgSend_48(
        _class_NSOperation,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  static void cancelPreviousPerformRequestsWithTarget_(objc.NSObject aTarget) {
    _objc_msgSend_49(_class_NSOperation,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_7(
        _class_NSOperation, _sel_accessInstanceVariablesDirectly);
  }

  static bool useStoredAccessor() {
    return _objc_msgSend_7(_class_NSOperation, _sel_useStoredAccessor);
  }

  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_50(_class_NSOperation,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_51(_class_NSOperation,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_52(
        _class_NSOperation,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_6(
        _class_NSOperation, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSObject classForKeyedUnarchiver() {
    final _ret =
        _objc_msgSend_40(_class_NSOperation, _sel_classForKeyedUnarchiver);
    return objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }
}

late final _class_NSOperation = objc.getClass("NSOperation");
late final _sel_start = objc.registerName("start");
late final _sel_main = objc.registerName("main");
late final _sel_isCancelled = objc.registerName("isCancelled");
late final _sel_isExecuting = objc.registerName("isExecuting");
late final _sel_isFinished = objc.registerName("isFinished");
late final _sel_isConcurrent = objc.registerName("isConcurrent");
late final _sel_isAsynchronous = objc.registerName("isAsynchronous");
late final _sel_isReady = objc.registerName("isReady");
late final _sel_addDependency_ = objc.registerName("addDependency:");
final _objc_msgSend_449 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_removeDependency_ = objc.registerName("removeDependency:");
late final _sel_dependencies = objc.registerName("dependencies");

abstract class NSOperationQueuePriority {
  static const int NSOperationQueuePriorityVeryLow = -8;
  static const int NSOperationQueuePriorityLow = -4;
  static const int NSOperationQueuePriorityNormal = 0;
  static const int NSOperationQueuePriorityHigh = 4;
  static const int NSOperationQueuePriorityVeryHigh = 8;
}

late final _sel_queuePriority = objc.registerName("queuePriority");
final _objc_msgSend_450 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Int32 Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setQueuePriority_ = objc.registerName("setQueuePriority:");
final _objc_msgSend_451 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Int32)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_completionBlock = objc.registerName("completionBlock");
final _objc_msgSend_452 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCBlock> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCBlock> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setCompletionBlock_ = objc.registerName("setCompletionBlock:");
final _objc_msgSend_453 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCBlock>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCBlock>)>();
late final _sel_waitUntilFinished = objc.registerName("waitUntilFinished");
late final _sel_threadPriority = objc.registerName("threadPriority");
late final _sel_setThreadPriority_ = objc.registerName("setThreadPriority:");

abstract class NSQualityOfService {
  static const int NSQualityOfServiceUserInteractive = 33;
  static const int NSQualityOfServiceUserInitiated = 25;
  static const int NSQualityOfServiceUtility = 17;
  static const int NSQualityOfServiceBackground = 9;
  static const int NSQualityOfServiceDefault = -1;
}

late final _sel_qualityOfService = objc.registerName("qualityOfService");
final _objc_msgSend_454 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Int32 Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setQualityOfService_ =
    objc.registerName("setQualityOfService:");
final _objc_msgSend_455 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Int32)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_setName_ = objc.registerName("setName:");
late final _sel_addOperation_ = objc.registerName("addOperation:");
late final _sel_addOperations_waitUntilFinished_ =
    objc.registerName("addOperations:waitUntilFinished:");
final _objc_msgSend_456 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Bool)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            bool)>();
late final _sel_addOperationWithBlock_ =
    objc.registerName("addOperationWithBlock:");
late final _sel_addBarrierBlock_ = objc.registerName("addBarrierBlock:");
late final _sel_maxConcurrentOperationCount =
    objc.registerName("maxConcurrentOperationCount");
late final _sel_setMaxConcurrentOperationCount_ =
    objc.registerName("setMaxConcurrentOperationCount:");
late final _sel_isSuspended = objc.registerName("isSuspended");
late final _sel_setSuspended_ = objc.registerName("setSuspended:");
late final _sel_underlyingQueue = objc.registerName("underlyingQueue");
final _objc_msgSend_457 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setUnderlyingQueue_ = objc.registerName("setUnderlyingQueue:");
final _objc_msgSend_458 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_cancelAllOperations = objc.registerName("cancelAllOperations");
late final _sel_waitUntilAllOperationsAreFinished =
    objc.registerName("waitUntilAllOperationsAreFinished");
late final _sel_currentQueue = objc.registerName("currentQueue");
final _objc_msgSend_459 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_mainQueue = objc.registerName("mainQueue");
final _objc_msgSend_460 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_operations = objc.registerName("operations");
late final _sel_operationCount = objc.registerName("operationCount");

class NSOrthography extends objc.NSObject {
  NSOrthography._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSOrthography] that points to the same underlying object as [other].
  NSOrthography.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSOrthography] that wraps the given raw object pointer.
  NSOrthography.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSOrthography].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSOrthography);
  }

  objc.NSString get dominantScript {
    final _ret = _objc_msgSend_12(this.pointer, _sel_dominantScript);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSDictionary get languageMap {
    final _ret = _objc_msgSend_112(this.pointer, _sel_languageMap);
    return objc.NSDictionary.castFromPointer(_ret, retain: true, release: true);
  }

  NSOrthography initWithDominantScript_languageMap_(
      objc.NSString script, objc.NSDictionary map) {
    final _ret = _objc_msgSend_461(this.pointer,
        _sel_initWithDominantScript_languageMap_, script.pointer, map.pointer);
    return NSOrthography.castFromPointer(_ret, retain: true, release: true);
  }

  NSOrthography? initWithCoder_(objc.NSCoder coder) {
    final _ret =
        _objc_msgSend_231(this.pointer, _sel_initWithCoder_, coder.pointer);
    return _ret.address == 0
        ? null
        : NSOrthography.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSArray? languagesForScript_(objc.NSString script) {
    final _ret = _objc_msgSend_290(
        this.pointer, _sel_languagesForScript_, script.pointer);
    return _ret.address == 0
        ? null
        : objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSString? dominantLanguageForScript_(objc.NSString script) {
    final _ret = _objc_msgSend_14(
        this.pointer, _sel_dominantLanguageForScript_, script.pointer);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSString get dominantLanguage {
    final _ret = _objc_msgSend_12(this.pointer, _sel_dominantLanguage);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSArray get allScripts {
    final _ret = _objc_msgSend_6(this.pointer, _sel_allScripts);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSArray get allLanguages {
    final _ret = _objc_msgSend_6(this.pointer, _sel_allLanguages);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  static NSOrthography defaultOrthographyForLanguage_(objc.NSString language) {
    final _ret = _objc_msgSend_35(_class_NSOrthography,
        _sel_defaultOrthographyForLanguage_, language.pointer);
    return NSOrthography.castFromPointer(_ret, retain: true, release: true);
  }

  static NSOrthography orthographyWithDominantScript_languageMap_(
      objc.NSString script, objc.NSDictionary map) {
    final _ret = _objc_msgSend_461(
        _class_NSOrthography,
        _sel_orthographyWithDominantScript_languageMap_,
        script.pointer,
        map.pointer);
    return NSOrthography.castFromPointer(_ret, retain: true, release: true);
  }

  @override
  NSOrthography init() {
    final _ret = _objc_msgSend_40(this.pointer, _sel_init);
    return NSOrthography.castFromPointer(_ret, retain: true, release: true);
  }

  static NSOrthography new1() {
    final _ret = _objc_msgSend_40(_class_NSOrthography, _sel_new);
    return NSOrthography.castFromPointer(_ret, retain: false, release: true);
  }

  static NSOrthography allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_47(_class_NSOrthography, _sel_allocWithZone_, zone);
    return NSOrthography.castFromPointer(_ret, retain: false, release: true);
  }

  static NSOrthography alloc() {
    final _ret = _objc_msgSend_40(_class_NSOrthography, _sel_alloc);
    return NSOrthography.castFromPointer(_ret, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.NSObject aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.NSObject? anArgument) {
    _objc_msgSend_48(
        _class_NSOrthography,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  static void cancelPreviousPerformRequestsWithTarget_(objc.NSObject aTarget) {
    _objc_msgSend_49(_class_NSOrthography,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_7(
        _class_NSOrthography, _sel_accessInstanceVariablesDirectly);
  }

  static bool useStoredAccessor() {
    return _objc_msgSend_7(_class_NSOrthography, _sel_useStoredAccessor);
  }

  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_50(_class_NSOrthography,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_51(_class_NSOrthography,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_52(
        _class_NSOrthography,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_6(
        _class_NSOrthography, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSObject classForKeyedUnarchiver() {
    final _ret =
        _objc_msgSend_40(_class_NSOrthography, _sel_classForKeyedUnarchiver);
    return objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }
}

late final _class_NSOrthography = objc.getClass("NSOrthography");
late final _sel_dominantScript = objc.registerName("dominantScript");
late final _sel_languageMap = objc.registerName("languageMap");
late final _sel_initWithDominantScript_languageMap_ =
    objc.registerName("initWithDominantScript:languageMap:");
final _objc_msgSend_461 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_languagesForScript_ = objc.registerName("languagesForScript:");
late final _sel_dominantLanguageForScript_ =
    objc.registerName("dominantLanguageForScript:");
late final _sel_dominantLanguage = objc.registerName("dominantLanguage");
late final _sel_allScripts = objc.registerName("allScripts");
late final _sel_allLanguages = objc.registerName("allLanguages");
late final _sel_defaultOrthographyForLanguage_ =
    objc.registerName("defaultOrthographyForLanguage:");
late final _sel_orthographyWithDominantScript_languageMap_ =
    objc.registerName("orthographyWithDominantScript:languageMap:");

class NSPointerArray extends objc.NSObject {
  NSPointerArray._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSPointerArray] that points to the same underlying object as [other].
  NSPointerArray.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSPointerArray] that wraps the given raw object pointer.
  NSPointerArray.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSPointerArray].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSPointerArray);
  }

  NSPointerArray initWithOptions_(int options) {
    final _ret =
        _objc_msgSend_462(this.pointer, _sel_initWithOptions_, options);
    return NSPointerArray.castFromPointer(_ret, retain: true, release: true);
  }

  NSPointerArray initWithPointerFunctions_(NSPointerFunctions functions) {
    final _ret = _objc_msgSend_476(
        this.pointer, _sel_initWithPointerFunctions_, functions.pointer);
    return NSPointerArray.castFromPointer(_ret, retain: true, release: true);
  }

  static NSPointerArray pointerArrayWithOptions_(int options) {
    final _ret = _objc_msgSend_477(
        _class_NSPointerArray, _sel_pointerArrayWithOptions_, options);
    return NSPointerArray.castFromPointer(_ret, retain: true, release: true);
  }

  static NSPointerArray pointerArrayWithPointerFunctions_(
      NSPointerFunctions functions) {
    final _ret = _objc_msgSend_478(_class_NSPointerArray,
        _sel_pointerArrayWithPointerFunctions_, functions.pointer);
    return NSPointerArray.castFromPointer(_ret, retain: true, release: true);
  }

  NSPointerFunctions get pointerFunctions {
    final _ret = _objc_msgSend_479(this.pointer, _sel_pointerFunctions);
    return NSPointerFunctions.castFromPointer(_ret,
        retain: true, release: true);
  }

  ffi.Pointer<ffi.Void> pointerAtIndex_(int index) {
    return _objc_msgSend_480(this.pointer, _sel_pointerAtIndex_, index);
  }

  void addPointer_(ffi.Pointer<ffi.Void> pointer) {
    _objc_msgSend_481(this.pointer, _sel_addPointer_, pointer);
  }

  void removePointerAtIndex_(int index) {
    _objc_msgSend_414(this.pointer, _sel_removePointerAtIndex_, index);
  }

  void insertPointer_atIndex_(ffi.Pointer<ffi.Void> item, int index) {
    _objc_msgSend_482(this.pointer, _sel_insertPointer_atIndex_, item, index);
  }

  void replacePointerAtIndex_withPointer_(
      int index, ffi.Pointer<ffi.Void> item) {
    _objc_msgSend_483(
        this.pointer, _sel_replacePointerAtIndex_withPointer_, index, item);
  }

  void compact() {
    _objc_msgSend_82(this.pointer, _sel_compact);
  }

  int get count {
    return _objc_msgSend_29(this.pointer, _sel_count);
  }

  set count(int value) {
    return _objc_msgSend_125(this.pointer, _sel_setCount_, value);
  }

  static objc.NSObject pointerArrayWithStrongObjects() {
    final _ret = _objc_msgSend_40(
        _class_NSPointerArray, _sel_pointerArrayWithStrongObjects);
    return objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSObject pointerArrayWithWeakObjects() {
    final _ret = _objc_msgSend_40(
        _class_NSPointerArray, _sel_pointerArrayWithWeakObjects);
    return objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }

  static NSPointerArray strongObjectsPointerArray() {
    final _ret = _objc_msgSend_484(
        _class_NSPointerArray, _sel_strongObjectsPointerArray);
    return NSPointerArray.castFromPointer(_ret, retain: true, release: true);
  }

  static NSPointerArray weakObjectsPointerArray() {
    final _ret =
        _objc_msgSend_484(_class_NSPointerArray, _sel_weakObjectsPointerArray);
    return NSPointerArray.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSArray get allObjects {
    final _ret = _objc_msgSend_6(this.pointer, _sel_allObjects);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  @override
  NSPointerArray init() {
    final _ret = _objc_msgSend_40(this.pointer, _sel_init);
    return NSPointerArray.castFromPointer(_ret, retain: true, release: true);
  }

  static NSPointerArray new1() {
    final _ret = _objc_msgSend_40(_class_NSPointerArray, _sel_new);
    return NSPointerArray.castFromPointer(_ret, retain: false, release: true);
  }

  static NSPointerArray allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_47(_class_NSPointerArray, _sel_allocWithZone_, zone);
    return NSPointerArray.castFromPointer(_ret, retain: false, release: true);
  }

  static NSPointerArray alloc() {
    final _ret = _objc_msgSend_40(_class_NSPointerArray, _sel_alloc);
    return NSPointerArray.castFromPointer(_ret, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.NSObject aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.NSObject? anArgument) {
    _objc_msgSend_48(
        _class_NSPointerArray,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  static void cancelPreviousPerformRequestsWithTarget_(objc.NSObject aTarget) {
    _objc_msgSend_49(_class_NSPointerArray,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_7(
        _class_NSPointerArray, _sel_accessInstanceVariablesDirectly);
  }

  static bool useStoredAccessor() {
    return _objc_msgSend_7(_class_NSPointerArray, _sel_useStoredAccessor);
  }

  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_50(_class_NSPointerArray,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_51(_class_NSPointerArray,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_52(
        _class_NSPointerArray,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_6(
        _class_NSPointerArray, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSObject classForKeyedUnarchiver() {
    final _ret =
        _objc_msgSend_40(_class_NSPointerArray, _sel_classForKeyedUnarchiver);
    return objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }
}

late final _class_NSPointerArray = objc.getClass("NSPointerArray");

abstract class NSPointerFunctionsOptions {
  static const int NSPointerFunctionsStrongMemory = 0;
  static const int NSPointerFunctionsZeroingWeakMemory = 1;
  static const int NSPointerFunctionsOpaqueMemory = 2;
  static const int NSPointerFunctionsMallocMemory = 3;
  static const int NSPointerFunctionsMachVirtualMemory = 4;
  static const int NSPointerFunctionsWeakMemory = 5;
  static const int NSPointerFunctionsObjectPersonality = 0;
  static const int NSPointerFunctionsOpaquePersonality = 256;
  static const int NSPointerFunctionsObjectPointerPersonality = 512;
  static const int NSPointerFunctionsCStringPersonality = 768;
  static const int NSPointerFunctionsStructPersonality = 1024;
  static const int NSPointerFunctionsIntegerPersonality = 1280;
  static const int NSPointerFunctionsCopyIn = 65536;
}

late final _sel_initWithOptions_ = objc.registerName("initWithOptions:");
final _objc_msgSend_462 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Int32)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();

class NSPointerFunctions extends objc.NSObject {
  NSPointerFunctions._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSPointerFunctions] that points to the same underlying object as [other].
  NSPointerFunctions.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSPointerFunctions] that wraps the given raw object pointer.
  NSPointerFunctions.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSPointerFunctions].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSPointerFunctions);
  }

  NSPointerFunctions initWithOptions_(int options) {
    final _ret =
        _objc_msgSend_462(this.pointer, _sel_initWithOptions_, options);
    return NSPointerFunctions.castFromPointer(_ret,
        retain: true, release: true);
  }

  static NSPointerFunctions pointerFunctionsWithOptions_(int options) {
    final _ret = _objc_msgSend_463(
        _class_NSPointerFunctions, _sel_pointerFunctionsWithOptions_, options);
    return NSPointerFunctions.castFromPointer(_ret,
        retain: true, release: true);
  }

  ffi.Pointer<
          ffi.NativeFunction<
              ffi.UnsignedLong Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.UnsignedLong Function(ffi.Pointer<ffi.Void>)>>)>>
      get hashFunction {
    return _objc_msgSend_464(this.pointer, _sel_hashFunction);
  }

  set hashFunction(
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.UnsignedLong Function(
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<
                          ffi.NativeFunction<
                              ffi.UnsignedLong Function(
                                  ffi.Pointer<ffi.Void>)>>)>>
          value) {
    return _objc_msgSend_465(this.pointer, _sel_setHashFunction_, value);
  }

  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Bool Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.UnsignedLong Function(ffi.Pointer<ffi.Void>)>>)>>
      get isEqualFunction {
    return _objc_msgSend_466(this.pointer, _sel_isEqualFunction);
  }

  set isEqualFunction(
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Bool Function(
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<
                          ffi.NativeFunction<
                              ffi.UnsignedLong Function(
                                  ffi.Pointer<ffi.Void>)>>)>>
          value) {
    return _objc_msgSend_467(this.pointer, _sel_setIsEqualFunction_, value);
  }

  ffi.Pointer<
          ffi.NativeFunction<ffi.UnsignedLong Function(ffi.Pointer<ffi.Void>)>>
      get sizeFunction {
    return _objc_msgSend_468(this.pointer, _sel_sizeFunction);
  }

  set sizeFunction(
      ffi.Pointer<
              ffi
              .NativeFunction<ffi.UnsignedLong Function(ffi.Pointer<ffi.Void>)>>
          value) {
    return _objc_msgSend_469(this.pointer, _sel_setSizeFunction_, value);
  }

  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<ffi.Void>)>>
      get descriptionFunction {
    return _objc_msgSend_470(this.pointer, _sel_descriptionFunction);
  }

  set descriptionFunction(
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<ffi.Void>)>>
          value) {
    return _objc_msgSend_471(this.pointer, _sel_setDescriptionFunction_, value);
  }

  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.UnsignedLong Function(ffi.Pointer<ffi.Void>)>>)>>
      get relinquishFunction {
    return _objc_msgSend_472(this.pointer, _sel_relinquishFunction);
  }

  set relinquishFunction(
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<
                          ffi.NativeFunction<
                              ffi.UnsignedLong Function(
                                  ffi.Pointer<ffi.Void>)>>)>>
          value) {
    return _objc_msgSend_473(this.pointer, _sel_setRelinquishFunction_, value);
  }

  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.UnsignedLong Function(ffi.Pointer<ffi.Void>)>>,
              ffi.Bool)>> get acquireFunction {
    return _objc_msgSend_474(this.pointer, _sel_acquireFunction);
  }

  set acquireFunction(
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<
                          ffi.NativeFunction<
                              ffi.UnsignedLong Function(
                                  ffi.Pointer<ffi.Void>)>>,
                      ffi.Bool)>>
          value) {
    return _objc_msgSend_475(this.pointer, _sel_setAcquireFunction_, value);
  }

  bool get usesStrongWriteBarrier {
    return _objc_msgSend_7(this.pointer, _sel_usesStrongWriteBarrier);
  }

  set usesStrongWriteBarrier(bool value) {
    return _objc_msgSend_41(
        this.pointer, _sel_setUsesStrongWriteBarrier_, value);
  }

  bool get usesWeakReadAndWriteBarriers {
    return _objc_msgSend_7(this.pointer, _sel_usesWeakReadAndWriteBarriers);
  }

  set usesWeakReadAndWriteBarriers(bool value) {
    return _objc_msgSend_41(
        this.pointer, _sel_setUsesWeakReadAndWriteBarriers_, value);
  }

  @override
  NSPointerFunctions init() {
    final _ret = _objc_msgSend_40(this.pointer, _sel_init);
    return NSPointerFunctions.castFromPointer(_ret,
        retain: true, release: true);
  }

  static NSPointerFunctions new1() {
    final _ret = _objc_msgSend_40(_class_NSPointerFunctions, _sel_new);
    return NSPointerFunctions.castFromPointer(_ret,
        retain: false, release: true);
  }

  static NSPointerFunctions allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_47(_class_NSPointerFunctions, _sel_allocWithZone_, zone);
    return NSPointerFunctions.castFromPointer(_ret,
        retain: false, release: true);
  }

  static NSPointerFunctions alloc() {
    final _ret = _objc_msgSend_40(_class_NSPointerFunctions, _sel_alloc);
    return NSPointerFunctions.castFromPointer(_ret,
        retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.NSObject aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.NSObject? anArgument) {
    _objc_msgSend_48(
        _class_NSPointerFunctions,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  static void cancelPreviousPerformRequestsWithTarget_(objc.NSObject aTarget) {
    _objc_msgSend_49(_class_NSPointerFunctions,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_7(
        _class_NSPointerFunctions, _sel_accessInstanceVariablesDirectly);
  }

  static bool useStoredAccessor() {
    return _objc_msgSend_7(_class_NSPointerFunctions, _sel_useStoredAccessor);
  }

  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_50(_class_NSPointerFunctions,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_51(_class_NSPointerFunctions,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_52(
        _class_NSPointerFunctions,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_6(
        _class_NSPointerFunctions, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSObject classForKeyedUnarchiver() {
    final _ret = _objc_msgSend_40(
        _class_NSPointerFunctions, _sel_classForKeyedUnarchiver);
    return objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }
}

late final _class_NSPointerFunctions = objc.getClass("NSPointerFunctions");
late final _sel_pointerFunctionsWithOptions_ =
    objc.registerName("pointerFunctionsWithOptions:");
final _objc_msgSend_463 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Int32)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_hashFunction = objc.registerName("hashFunction");
final _objc_msgSend_464 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<ffi.NativeFunction<ffi.UnsignedLong Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.NativeFunction<ffi.UnsignedLong Function(ffi.Pointer<ffi.Void>)>>)>> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<
                ffi.NativeFunction<
                    ffi.UnsignedLong Function(
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<
                            ffi.NativeFunction<
                                ffi.UnsignedLong Function(
                                    ffi.Pointer<ffi.Void>)>>)>>
            Function(ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setHashFunction_ = objc.registerName("setHashFunction:");
final _objc_msgSend_465 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<
                    ffi.NativeFunction<
                        ffi.UnsignedLong Function(
                            ffi.Pointer<ffi.Void>,
                            ffi.Pointer<
                                ffi.NativeFunction<
                                    ffi.UnsignedLong Function(
                                        ffi.Pointer<ffi.Void>)>>)>>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<
                ffi.NativeFunction<
                    ffi.UnsignedLong Function(
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<
                            ffi.NativeFunction<
                                ffi.UnsignedLong Function(
                                    ffi.Pointer<ffi.Void>)>>)>>)>();
late final _sel_isEqualFunction = objc.registerName("isEqualFunction");
final _objc_msgSend_466 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.NativeFunction<ffi.UnsignedLong Function(ffi.Pointer<ffi.Void>)>>)>> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Bool Function(
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<
                            ffi.NativeFunction<
                                ffi.UnsignedLong Function(
                                    ffi.Pointer<ffi.Void>)>>)>>
            Function(ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setIsEqualFunction_ = objc.registerName("setIsEqualFunction:");
final _objc_msgSend_467 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<
                    ffi.NativeFunction<
                        ffi.Bool Function(
                            ffi.Pointer<ffi.Void>,
                            ffi.Pointer<ffi.Void>,
                            ffi.Pointer<
                                ffi.NativeFunction<
                                    ffi.UnsignedLong Function(
                                        ffi.Pointer<ffi.Void>)>>)>>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Bool Function(
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<
                            ffi.NativeFunction<
                                ffi.UnsignedLong Function(ffi.Pointer<ffi.Void>)>>)>>)>();
late final _sel_sizeFunction = objc.registerName("sizeFunction");
final _objc_msgSend_468 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<ffi.NativeFunction<ffi.UnsignedLong Function(ffi.Pointer<ffi.Void>)>> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<
                ffi.NativeFunction<
                    ffi.UnsignedLong Function(ffi.Pointer<ffi.Void>)>>
            Function(ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setSizeFunction_ = objc.registerName("setSizeFunction:");
final _objc_msgSend_469 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<
                    ffi.NativeFunction<
                        ffi.UnsignedLong Function(ffi.Pointer<ffi.Void>)>>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<
                ffi.NativeFunction<
                    ffi.UnsignedLong Function(ffi.Pointer<ffi.Void>)>>)>();
late final _sel_descriptionFunction = objc.registerName("descriptionFunction");
final _objc_msgSend_470 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<ffi.NativeFunction<ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<ffi.Void>)>> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Pointer<objc.ObjCObject> Function(
                        ffi.Pointer<ffi.Void>)>>
            Function(ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setDescriptionFunction_ =
    objc.registerName("setDescriptionFunction:");
final _objc_msgSend_471 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<
                    ffi.NativeFunction<
                        ffi.Pointer<objc.ObjCObject> Function(
                            ffi.Pointer<ffi.Void>)>>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Pointer<objc.ObjCObject> Function(
                        ffi.Pointer<ffi.Void>)>>)>();
late final _sel_relinquishFunction = objc.registerName("relinquishFunction");
final _objc_msgSend_472 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.NativeFunction<ffi.UnsignedLong Function(ffi.Pointer<ffi.Void>)>>)>> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Void Function(
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<
                            ffi.NativeFunction<
                                ffi.UnsignedLong Function(
                                    ffi.Pointer<ffi.Void>)>>)>>
            Function(ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setRelinquishFunction_ =
    objc.registerName("setRelinquishFunction:");
final _objc_msgSend_473 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<
                    ffi.NativeFunction<
                        ffi.Void Function(
                            ffi.Pointer<ffi.Void>,
                            ffi.Pointer<
                                ffi.NativeFunction<
                                    ffi.UnsignedLong Function(
                                        ffi.Pointer<ffi.Void>)>>)>>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Void Function(
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<
                            ffi.NativeFunction<
                                ffi.UnsignedLong Function(
                                    ffi.Pointer<ffi.Void>)>>)>>)>();
late final _sel_acquireFunction = objc.registerName("acquireFunction");
final _objc_msgSend_474 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.NativeFunction<ffi.UnsignedLong Function(ffi.Pointer<ffi.Void>)>>, ffi.Bool)>> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Pointer<ffi.Void> Function(
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<
                            ffi.NativeFunction<
                                ffi.UnsignedLong Function(
                                    ffi.Pointer<ffi.Void>)>>,
                        ffi.Bool)>>
            Function(ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setAcquireFunction_ = objc.registerName("setAcquireFunction:");
final _objc_msgSend_475 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<
                    ffi.NativeFunction<
                        ffi.Pointer<ffi.Void> Function(
                            ffi.Pointer<ffi.Void>,
                            ffi.Pointer<
                                ffi.NativeFunction<
                                    ffi.UnsignedLong Function(
                                        ffi.Pointer<ffi.Void>)>>,
                            ffi.Bool)>>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<
                ffi.NativeFunction<
                    ffi.Pointer<ffi.Void> Function(
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<
                            ffi
                            .NativeFunction<ffi.UnsignedLong Function(ffi.Pointer<ffi.Void>)>>,
                        ffi.Bool)>>)>();
late final _sel_usesStrongWriteBarrier =
    objc.registerName("usesStrongWriteBarrier");
late final _sel_setUsesStrongWriteBarrier_ =
    objc.registerName("setUsesStrongWriteBarrier:");
late final _sel_usesWeakReadAndWriteBarriers =
    objc.registerName("usesWeakReadAndWriteBarriers");
late final _sel_setUsesWeakReadAndWriteBarriers_ =
    objc.registerName("setUsesWeakReadAndWriteBarriers:");
late final _sel_initWithPointerFunctions_ =
    objc.registerName("initWithPointerFunctions:");
final _objc_msgSend_476 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_pointerArrayWithOptions_ =
    objc.registerName("pointerArrayWithOptions:");
final _objc_msgSend_477 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Int32)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_pointerArrayWithPointerFunctions_ =
    objc.registerName("pointerArrayWithPointerFunctions:");
final _objc_msgSend_478 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_pointerFunctions = objc.registerName("pointerFunctions");
final _objc_msgSend_479 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_pointerAtIndex_ = objc.registerName("pointerAtIndex:");
final _objc_msgSend_480 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<ffi.Void> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedLong)>>()
    .asFunction<
        ffi.Pointer<ffi.Void> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_addPointer_ = objc.registerName("addPointer:");
final _objc_msgSend_481 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<ffi.Void>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<ffi.Void>)>();
late final _sel_removePointerAtIndex_ =
    objc.registerName("removePointerAtIndex:");
late final _sel_insertPointer_atIndex_ =
    objc.registerName("insertPointer:atIndex:");
final _objc_msgSend_482 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<ffi.Void>,
                ffi.UnsignedLong)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<ffi.Void>, int)>();
late final _sel_replacePointerAtIndex_withPointer_ =
    objc.registerName("replacePointerAtIndex:withPointer:");
final _objc_msgSend_483 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.UnsignedLong,
                ffi.Pointer<ffi.Void>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int, ffi.Pointer<ffi.Void>)>();
late final _sel_compact = objc.registerName("compact");
late final _sel_setCount_ = objc.registerName("setCount:");
late final _sel_pointerArrayWithStrongObjects =
    objc.registerName("pointerArrayWithStrongObjects");
late final _sel_pointerArrayWithWeakObjects =
    objc.registerName("pointerArrayWithWeakObjects");
late final _sel_strongObjectsPointerArray =
    objc.registerName("strongObjectsPointerArray");
final _objc_msgSend_484 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_weakObjectsPointerArray =
    objc.registerName("weakObjectsPointerArray");
late final _sel_allObjects = objc.registerName("allObjects");

class NSProcessInfo extends objc.NSObject {
  NSProcessInfo._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSProcessInfo] that points to the same underlying object as [other].
  NSProcessInfo.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSProcessInfo] that wraps the given raw object pointer.
  NSProcessInfo.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSProcessInfo].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSProcessInfo);
  }

  static NSProcessInfo getProcessInfo() {
    final _ret = _objc_msgSend_485(_class_NSProcessInfo, _sel_processInfo);
    return NSProcessInfo.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSDictionary get environment {
    final _ret = _objc_msgSend_112(this.pointer, _sel_environment);
    return objc.NSDictionary.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSArray get arguments {
    final _ret = _objc_msgSend_6(this.pointer, _sel_arguments);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSString get hostName {
    final _ret = _objc_msgSend_12(this.pointer, _sel_hostName);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSString get processName {
    final _ret = _objc_msgSend_12(this.pointer, _sel_processName);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  set processName(objc.NSString value) {
    return _objc_msgSend_99(this.pointer, _sel_setProcessName_, value.pointer);
  }

  int get processIdentifier {
    return _objc_msgSend_264(this.pointer, _sel_processIdentifier);
  }

  objc.NSString get globallyUniqueString {
    final _ret = _objc_msgSend_12(this.pointer, _sel_globallyUniqueString);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  int operatingSystem() {
    return _objc_msgSend_29(this.pointer, _sel_operatingSystem);
  }

  objc.NSString operatingSystemName() {
    final _ret = _objc_msgSend_12(this.pointer, _sel_operatingSystemName);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSString get operatingSystemVersionString {
    final _ret =
        _objc_msgSend_12(this.pointer, _sel_operatingSystemVersionString);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  void getOperatingSystemVersion(ffi.Pointer<NSOperatingSystemVersion> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_486Stret(
            stret, this.pointer, _sel_operatingSystemVersion)
        : stret.ref =
            _objc_msgSend_486(this.pointer, _sel_operatingSystemVersion);
  }

  int get processorCount {
    return _objc_msgSend_29(this.pointer, _sel_processorCount);
  }

  int get activeProcessorCount {
    return _objc_msgSend_29(this.pointer, _sel_activeProcessorCount);
  }

  int get physicalMemory {
    return _objc_msgSend_267(this.pointer, _sel_physicalMemory);
  }

  bool isOperatingSystemAtLeastVersion_(NSOperatingSystemVersion version) {
    return _objc_msgSend_487(
        this.pointer, _sel_isOperatingSystemAtLeastVersion_, version);
  }

  double get systemUptime {
    return objc.useMsgSendVariants
        ? _objc_msgSend_115Fpret(this.pointer, _sel_systemUptime)
        : _objc_msgSend_115(this.pointer, _sel_systemUptime);
  }

  void disableSuddenTermination() {
    _objc_msgSend_82(this.pointer, _sel_disableSuddenTermination);
  }

  void enableSuddenTermination() {
    _objc_msgSend_82(this.pointer, _sel_enableSuddenTermination);
  }

  void disableAutomaticTermination_(objc.NSString reason) {
    _objc_msgSend_98(
        this.pointer, _sel_disableAutomaticTermination_, reason.pointer);
  }

  void enableAutomaticTermination_(objc.NSString reason) {
    _objc_msgSend_98(
        this.pointer, _sel_enableAutomaticTermination_, reason.pointer);
  }

  bool get automaticTerminationSupportEnabled {
    return _objc_msgSend_7(
        this.pointer, _sel_automaticTerminationSupportEnabled);
  }

  set automaticTerminationSupportEnabled(bool value) {
    return _objc_msgSend_41(
        this.pointer, _sel_setAutomaticTerminationSupportEnabled_, value);
  }

  objc.NSObject beginActivityWithOptions_reason_(
      int options, objc.NSString reason) {
    final _ret = _objc_msgSend_488(this.pointer,
        _sel_beginActivityWithOptions_reason_, options, reason.pointer);
    return objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }

  void endActivity_(objc.NSObject activity) {
    _objc_msgSend_49(this.pointer, _sel_endActivity_, activity.pointer);
  }

  void performActivityWithOptions_reason_usingBlock_(
      int options, objc.NSString reason, ObjCBlock_ffiVoid block) {
    _objc_msgSend_489(
        this.pointer,
        _sel_performActivityWithOptions_reason_usingBlock_,
        options,
        reason.pointer,
        block.pointer);
  }

  void performExpiringActivityWithReason_usingBlock_(
      objc.NSString reason, ObjCBlock_ffiVoid_bool block) {
    _objc_msgSend_490(
        this.pointer,
        _sel_performExpiringActivityWithReason_usingBlock_,
        reason.pointer,
        block.pointer);
  }

  objc.NSString get userName {
    final _ret = _objc_msgSend_12(this.pointer, _sel_userName);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSString get fullUserName {
    final _ret = _objc_msgSend_12(this.pointer, _sel_fullUserName);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  int get thermalState {
    return _objc_msgSend_491(this.pointer, _sel_thermalState);
  }

  bool get lowPowerModeEnabled {
    return _objc_msgSend_7(this.pointer, _sel_isLowPowerModeEnabled);
  }

  bool get macCatalystApp {
    return _objc_msgSend_7(this.pointer, _sel_isMacCatalystApp);
  }

  bool get iOSAppOnMac {
    return _objc_msgSend_7(this.pointer, _sel_isiOSAppOnMac);
  }

  @override
  NSProcessInfo init() {
    final _ret = _objc_msgSend_40(this.pointer, _sel_init);
    return NSProcessInfo.castFromPointer(_ret, retain: true, release: true);
  }

  static NSProcessInfo new1() {
    final _ret = _objc_msgSend_40(_class_NSProcessInfo, _sel_new);
    return NSProcessInfo.castFromPointer(_ret, retain: false, release: true);
  }

  static NSProcessInfo allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_47(_class_NSProcessInfo, _sel_allocWithZone_, zone);
    return NSProcessInfo.castFromPointer(_ret, retain: false, release: true);
  }

  static NSProcessInfo alloc() {
    final _ret = _objc_msgSend_40(_class_NSProcessInfo, _sel_alloc);
    return NSProcessInfo.castFromPointer(_ret, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.NSObject aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.NSObject? anArgument) {
    _objc_msgSend_48(
        _class_NSProcessInfo,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  static void cancelPreviousPerformRequestsWithTarget_(objc.NSObject aTarget) {
    _objc_msgSend_49(_class_NSProcessInfo,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_7(
        _class_NSProcessInfo, _sel_accessInstanceVariablesDirectly);
  }

  static bool useStoredAccessor() {
    return _objc_msgSend_7(_class_NSProcessInfo, _sel_useStoredAccessor);
  }

  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_50(_class_NSProcessInfo,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_51(_class_NSProcessInfo,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_52(
        _class_NSProcessInfo,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_6(
        _class_NSProcessInfo, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSObject classForKeyedUnarchiver() {
    final _ret =
        _objc_msgSend_40(_class_NSProcessInfo, _sel_classForKeyedUnarchiver);
    return objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }
}

late final _class_NSProcessInfo = objc.getClass("NSProcessInfo");
late final _sel_processInfo = objc.registerName("processInfo");
final _objc_msgSend_485 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_environment = objc.registerName("environment");
late final _sel_arguments = objc.registerName("arguments");
late final _sel_hostName = objc.registerName("hostName");
late final _sel_processName = objc.registerName("processName");
late final _sel_setProcessName_ = objc.registerName("setProcessName:");
late final _sel_processIdentifier = objc.registerName("processIdentifier");
late final _sel_globallyUniqueString =
    objc.registerName("globallyUniqueString");
late final _sel_operatingSystem = objc.registerName("operatingSystem");
late final _sel_operatingSystemName = objc.registerName("operatingSystemName");
late final _sel_operatingSystemVersionString =
    objc.registerName("operatingSystemVersionString");

final class NSOperatingSystemVersion extends ffi.Struct {
  @ffi.Long()
  external int majorVersion;

  @ffi.Long()
  external int minorVersion;

  @ffi.Long()
  external int patchVersion;
}

late final _sel_operatingSystemVersion =
    objc.registerName("operatingSystemVersion");
final _objc_msgSend_486 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            NSOperatingSystemVersion Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        NSOperatingSystemVersion Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
final _objc_msgSend_486Stret = objc.msgSendStretPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<NSOperatingSystemVersion>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        void Function(ffi.Pointer<NSOperatingSystemVersion>,
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_processorCount = objc.registerName("processorCount");
late final _sel_activeProcessorCount =
    objc.registerName("activeProcessorCount");
late final _sel_physicalMemory = objc.registerName("physicalMemory");
late final _sel_isOperatingSystemAtLeastVersion_ =
    objc.registerName("isOperatingSystemAtLeastVersion:");
final _objc_msgSend_487 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, NSOperatingSystemVersion)>>()
    .asFunction<
        bool Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, NSOperatingSystemVersion)>();
late final _sel_systemUptime = objc.registerName("systemUptime");
late final _sel_disableSuddenTermination =
    objc.registerName("disableSuddenTermination");
late final _sel_enableSuddenTermination =
    objc.registerName("enableSuddenTermination");
late final _sel_disableAutomaticTermination_ =
    objc.registerName("disableAutomaticTermination:");
late final _sel_enableAutomaticTermination_ =
    objc.registerName("enableAutomaticTermination:");
late final _sel_automaticTerminationSupportEnabled =
    objc.registerName("automaticTerminationSupportEnabled");
late final _sel_setAutomaticTerminationSupportEnabled_ =
    objc.registerName("setAutomaticTerminationSupportEnabled:");

abstract class NSActivityOptions {
  static const int NSActivityIdleDisplaySleepDisabled = 1099511627776;
  static const int NSActivityIdleSystemSleepDisabled = 1048576;
  static const int NSActivitySuddenTerminationDisabled = 16384;
  static const int NSActivityAutomaticTerminationDisabled = 32768;
  static const int NSActivityAnimationTrackingEnabled = 35184372088832;
  static const int NSActivityTrackingEnabled = 70368744177664;
  static const int NSActivityUserInitiated = 16777215;
  static const int NSActivityUserInitiatedAllowingIdleSystemSleep = 15728639;
  static const int NSActivityBackground = 255;
  static const int NSActivityLatencyCritical = 1095216660480;
  static const int NSActivityUserInteractive = 1095233437695;
}

late final _sel_beginActivityWithOptions_reason_ =
    objc.registerName("beginActivityWithOptions:reason:");
final _objc_msgSend_488 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Int32,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_endActivity_ = objc.registerName("endActivity:");
late final _sel_performActivityWithOptions_reason_usingBlock_ =
    objc.registerName("performActivityWithOptions:reason:usingBlock:");
final _objc_msgSend_489 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Int32,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCBlock>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCBlock>)>();
void _ObjCBlock_ffiVoid_bool_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlock> block, bool arg0) =>
    block.ref.target
        .cast<ffi.NativeFunction<ffi.Void Function(ffi.Bool arg0)>>()
        .asFunction<void Function(bool)>()(arg0);
final _ObjCBlock_ffiVoid_bool_closureRegistry = <int, void Function(bool)>{};
int _ObjCBlock_ffiVoid_bool_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void> _ObjCBlock_ffiVoid_bool_registerClosure(
    void Function(bool) fn) {
  final id = ++_ObjCBlock_ffiVoid_bool_closureRegistryIndex;
  _ObjCBlock_ffiVoid_bool_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

void _ObjCBlock_ffiVoid_bool_closureTrampoline(
        ffi.Pointer<objc.ObjCBlock> block, bool arg0) =>
    _ObjCBlock_ffiVoid_bool_closureRegistry[block.ref.target.address]!(arg0);

class ObjCBlock_ffiVoid_bool extends objc.ObjCBlockBase {
  ObjCBlock_ffiVoid_bool._(ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false, bool release = true})
      : super(pointer, retain: retain, release: release);

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_ffiVoid_bool castFromPointer(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = false}) {
    return ObjCBlock_ffiVoid_bool._(pointer, retain: retain, release: release);
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_bool.fromFunctionPointer(
      ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Bool arg0)>> ptr)
      : this._(objc.newBlock(
            _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                    ffi.Void Function(ffi.Pointer<objc.ObjCBlock>,
                        ffi.Bool)>(_ObjCBlock_ffiVoid_bool_fnPtrTrampoline)
                .cast(),
            ptr.cast()));
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_bool.fromFunction(void Function(bool) fn)
      : this._(objc.newBlock(
            _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                    ffi.Void Function(ffi.Pointer<objc.ObjCBlock>,
                        ffi.Bool)>(_ObjCBlock_ffiVoid_bool_closureTrampoline)
                .cast(),
            _ObjCBlock_ffiVoid_bool_registerClosure((bool arg0) => fn(arg0))));
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_bool.listener(void Function(bool) fn)
      : this._(objc.newBlock(
            (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                        ffi.Void Function(
                            ffi.Pointer<objc.ObjCBlock>, ffi.Bool)>.listener(
                    _ObjCBlock_ffiVoid_bool_closureTrampoline)
                  ..keepIsolateAlive = false)
                .nativeFunction
                .cast(),
            _ObjCBlock_ffiVoid_bool_registerClosure((bool arg0) => fn(arg0))));
  static ffi
      .NativeCallable<ffi.Void Function(ffi.Pointer<objc.ObjCBlock>, ffi.Bool)>?
      _dartFuncListenerTrampoline;

  void call(bool arg0) => pointer.ref.invoke
          .cast<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<objc.ObjCBlock> block, ffi.Bool arg0)>>()
          .asFunction<void Function(ffi.Pointer<objc.ObjCBlock>, bool)>()(
      pointer, arg0);
}

late final _sel_performExpiringActivityWithReason_usingBlock_ =
    objc.registerName("performExpiringActivityWithReason:usingBlock:");
final _objc_msgSend_490 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCBlock>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCBlock>)>();
late final _sel_userName = objc.registerName("userName");
late final _sel_fullUserName = objc.registerName("fullUserName");

abstract class NSProcessInfoThermalState {
  static const int NSProcessInfoThermalStateNominal = 0;
  static const int NSProcessInfoThermalStateFair = 1;
  static const int NSProcessInfoThermalStateSerious = 2;
  static const int NSProcessInfoThermalStateCritical = 3;
}

late final _sel_thermalState = objc.registerName("thermalState");
final _objc_msgSend_491 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Int32 Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_isLowPowerModeEnabled =
    objc.registerName("isLowPowerModeEnabled");
late final _sel_isMacCatalystApp = objc.registerName("isMacCatalystApp");
late final _sel_isiOSAppOnMac = objc.registerName("isiOSAppOnMac");

class NSTextCheckingResult extends objc.NSObject {
  NSTextCheckingResult._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSTextCheckingResult] that points to the same underlying object as [other].
  NSTextCheckingResult.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSTextCheckingResult] that wraps the given raw object pointer.
  NSTextCheckingResult.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSTextCheckingResult].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSTextCheckingResult);
  }

  int get resultType {
    return _objc_msgSend_492(this.pointer, _sel_resultType);
  }

  void getRange(ffi.Pointer<_NSRange> stret) {
    objc.useMsgSendVariants
        ? _objc_msgSend_493Stret(stret, this.pointer, _sel_range)
        : stret.ref = _objc_msgSend_493(this.pointer, _sel_range);
  }

  NSOrthography? get orthography {
    final _ret = _objc_msgSend_494(this.pointer, _sel_orthography);
    return _ret.address == 0
        ? null
        : NSOrthography.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSArray? get grammarDetails {
    final _ret = _objc_msgSend_69(this.pointer, _sel_grammarDetails);
    return _ret.address == 0
        ? null
        : objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSDate? get date {
    final _ret = _objc_msgSend_116(this.pointer, _sel_date);
    return _ret.address == 0
        ? null
        : objc.NSDate.castFromPointer(_ret, retain: true, release: true);
  }

  NSTimeZone? get timeZone {
    final _ret = _objc_msgSend_132(this.pointer, _sel_timeZone);
    return _ret.address == 0
        ? null
        : NSTimeZone.castFromPointer(_ret, retain: true, release: true);
  }

  double get duration {
    return objc.useMsgSendVariants
        ? _objc_msgSend_115Fpret(this.pointer, _sel_duration)
        : _objc_msgSend_115(this.pointer, _sel_duration);
  }

  objc.NSDictionary? get components {
    final _ret = _objc_msgSend_65(this.pointer, _sel_components);
    return _ret.address == 0
        ? null
        : objc.NSDictionary.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSURL? get URL {
    final _ret = _objc_msgSend_10(this.pointer, _sel_URL);
    return _ret.address == 0
        ? null
        : objc.NSURL.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSString? get replacementString {
    final _ret = _objc_msgSend_13(this.pointer, _sel_replacementString);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSArray? get alternativeStrings {
    final _ret = _objc_msgSend_69(this.pointer, _sel_alternativeStrings);
    return _ret.address == 0
        ? null
        : objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  NSRegularExpression? get regularExpression {
    final _ret = _objc_msgSend_506(this.pointer, _sel_regularExpression);
    return _ret.address == 0
        ? null
        : NSRegularExpression.castFromPointer(_ret,
            retain: true, release: true);
  }

  objc.NSString? get phoneNumber {
    final _ret = _objc_msgSend_13(this.pointer, _sel_phoneNumber);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  int get numberOfRanges {
    return _objc_msgSend_29(this.pointer, _sel_numberOfRanges);
  }

  void rangeAtIndex_(ffi.Pointer<_NSRange> stret, int idx) {
    objc.useMsgSendVariants
        ? _objc_msgSend_507Stret(stret, this.pointer, _sel_rangeAtIndex_, idx)
        : stret.ref = _objc_msgSend_507(this.pointer, _sel_rangeAtIndex_, idx);
  }

  void rangeWithName_(ffi.Pointer<_NSRange> stret, objc.NSString name) {
    objc.useMsgSendVariants
        ? _objc_msgSend_508Stret(
            stret, this.pointer, _sel_rangeWithName_, name.pointer)
        : stret.ref =
            _objc_msgSend_508(this.pointer, _sel_rangeWithName_, name.pointer);
  }

  NSTextCheckingResult resultByAdjustingRangesWithOffset_(int offset) {
    final _ret = _objc_msgSend_509(
        this.pointer, _sel_resultByAdjustingRangesWithOffset_, offset);
    return NSTextCheckingResult.castFromPointer(_ret,
        retain: true, release: true);
  }

  objc.NSDictionary? get addressComponents {
    final _ret = _objc_msgSend_65(this.pointer, _sel_addressComponents);
    return _ret.address == 0
        ? null
        : objc.NSDictionary.castFromPointer(_ret, retain: true, release: true);
  }

  static NSTextCheckingResult orthographyCheckingResultWithRange_orthography_(
      _NSRange range, NSOrthography orthography) {
    final _ret = _objc_msgSend_510(
        _class_NSTextCheckingResult,
        _sel_orthographyCheckingResultWithRange_orthography_,
        range,
        orthography.pointer);
    return NSTextCheckingResult.castFromPointer(_ret,
        retain: true, release: true);
  }

  static NSTextCheckingResult spellCheckingResultWithRange_(_NSRange range) {
    final _ret = _objc_msgSend_511(
        _class_NSTextCheckingResult, _sel_spellCheckingResultWithRange_, range);
    return NSTextCheckingResult.castFromPointer(_ret,
        retain: true, release: true);
  }

  static NSTextCheckingResult grammarCheckingResultWithRange_details_(
      _NSRange range, objc.NSArray details) {
    final _ret = _objc_msgSend_512(_class_NSTextCheckingResult,
        _sel_grammarCheckingResultWithRange_details_, range, details.pointer);
    return NSTextCheckingResult.castFromPointer(_ret,
        retain: true, release: true);
  }

  static NSTextCheckingResult dateCheckingResultWithRange_date_(
      _NSRange range, objc.NSDate date) {
    final _ret = _objc_msgSend_513(_class_NSTextCheckingResult,
        _sel_dateCheckingResultWithRange_date_, range, date.pointer);
    return NSTextCheckingResult.castFromPointer(_ret,
        retain: true, release: true);
  }

  static NSTextCheckingResult
      dateCheckingResultWithRange_date_timeZone_duration_(_NSRange range,
          objc.NSDate date, NSTimeZone timeZone, double duration) {
    final _ret = _objc_msgSend_514(
        _class_NSTextCheckingResult,
        _sel_dateCheckingResultWithRange_date_timeZone_duration_,
        range,
        date.pointer,
        timeZone.pointer,
        duration);
    return NSTextCheckingResult.castFromPointer(_ret,
        retain: true, release: true);
  }

  static NSTextCheckingResult addressCheckingResultWithRange_components_(
      _NSRange range, objc.NSDictionary components) {
    final _ret = _objc_msgSend_515(
        _class_NSTextCheckingResult,
        _sel_addressCheckingResultWithRange_components_,
        range,
        components.pointer);
    return NSTextCheckingResult.castFromPointer(_ret,
        retain: true, release: true);
  }

  static NSTextCheckingResult linkCheckingResultWithRange_URL_(
      _NSRange range, objc.NSURL url) {
    final _ret = _objc_msgSend_516(_class_NSTextCheckingResult,
        _sel_linkCheckingResultWithRange_URL_, range, url.pointer);
    return NSTextCheckingResult.castFromPointer(_ret,
        retain: true, release: true);
  }

  static NSTextCheckingResult quoteCheckingResultWithRange_replacementString_(
      _NSRange range, objc.NSString replacementString) {
    final _ret = _objc_msgSend_517(
        _class_NSTextCheckingResult,
        _sel_quoteCheckingResultWithRange_replacementString_,
        range,
        replacementString.pointer);
    return NSTextCheckingResult.castFromPointer(_ret,
        retain: true, release: true);
  }

  static NSTextCheckingResult dashCheckingResultWithRange_replacementString_(
      _NSRange range, objc.NSString replacementString) {
    final _ret = _objc_msgSend_517(
        _class_NSTextCheckingResult,
        _sel_dashCheckingResultWithRange_replacementString_,
        range,
        replacementString.pointer);
    return NSTextCheckingResult.castFromPointer(_ret,
        retain: true, release: true);
  }

  static NSTextCheckingResult
      replacementCheckingResultWithRange_replacementString_(
          _NSRange range, objc.NSString replacementString) {
    final _ret = _objc_msgSend_517(
        _class_NSTextCheckingResult,
        _sel_replacementCheckingResultWithRange_replacementString_,
        range,
        replacementString.pointer);
    return NSTextCheckingResult.castFromPointer(_ret,
        retain: true, release: true);
  }

  static NSTextCheckingResult
      correctionCheckingResultWithRange_replacementString_(
          _NSRange range, objc.NSString replacementString) {
    final _ret = _objc_msgSend_517(
        _class_NSTextCheckingResult,
        _sel_correctionCheckingResultWithRange_replacementString_,
        range,
        replacementString.pointer);
    return NSTextCheckingResult.castFromPointer(_ret,
        retain: true, release: true);
  }

  static NSTextCheckingResult
      correctionCheckingResultWithRange_replacementString_alternativeStrings_(
          _NSRange range,
          objc.NSString replacementString,
          objc.NSArray alternativeStrings) {
    final _ret = _objc_msgSend_518(
        _class_NSTextCheckingResult,
        _sel_correctionCheckingResultWithRange_replacementString_alternativeStrings_,
        range,
        replacementString.pointer,
        alternativeStrings.pointer);
    return NSTextCheckingResult.castFromPointer(_ret,
        retain: true, release: true);
  }

  static NSTextCheckingResult
      regularExpressionCheckingResultWithRanges_count_regularExpression_(
          ffi.Pointer<_NSRange> ranges,
          int count,
          NSRegularExpression regularExpression) {
    final _ret = _objc_msgSend_519(
        _class_NSTextCheckingResult,
        _sel_regularExpressionCheckingResultWithRanges_count_regularExpression_,
        ranges,
        count,
        regularExpression.pointer);
    return NSTextCheckingResult.castFromPointer(_ret,
        retain: true, release: true);
  }

  static NSTextCheckingResult phoneNumberCheckingResultWithRange_phoneNumber_(
      _NSRange range, objc.NSString phoneNumber) {
    final _ret = _objc_msgSend_517(
        _class_NSTextCheckingResult,
        _sel_phoneNumberCheckingResultWithRange_phoneNumber_,
        range,
        phoneNumber.pointer);
    return NSTextCheckingResult.castFromPointer(_ret,
        retain: true, release: true);
  }

  static NSTextCheckingResult
      transitInformationCheckingResultWithRange_components_(
          _NSRange range, objc.NSDictionary components) {
    final _ret = _objc_msgSend_515(
        _class_NSTextCheckingResult,
        _sel_transitInformationCheckingResultWithRange_components_,
        range,
        components.pointer);
    return NSTextCheckingResult.castFromPointer(_ret,
        retain: true, release: true);
  }

  @override
  NSTextCheckingResult init() {
    final _ret = _objc_msgSend_40(this.pointer, _sel_init);
    return NSTextCheckingResult.castFromPointer(_ret,
        retain: true, release: true);
  }

  static NSTextCheckingResult new1() {
    final _ret = _objc_msgSend_40(_class_NSTextCheckingResult, _sel_new);
    return NSTextCheckingResult.castFromPointer(_ret,
        retain: false, release: true);
  }

  static NSTextCheckingResult allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_47(
        _class_NSTextCheckingResult, _sel_allocWithZone_, zone);
    return NSTextCheckingResult.castFromPointer(_ret,
        retain: false, release: true);
  }

  static NSTextCheckingResult alloc() {
    final _ret = _objc_msgSend_40(_class_NSTextCheckingResult, _sel_alloc);
    return NSTextCheckingResult.castFromPointer(_ret,
        retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.NSObject aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.NSObject? anArgument) {
    _objc_msgSend_48(
        _class_NSTextCheckingResult,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  static void cancelPreviousPerformRequestsWithTarget_(objc.NSObject aTarget) {
    _objc_msgSend_49(_class_NSTextCheckingResult,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_7(
        _class_NSTextCheckingResult, _sel_accessInstanceVariablesDirectly);
  }

  static bool useStoredAccessor() {
    return _objc_msgSend_7(_class_NSTextCheckingResult, _sel_useStoredAccessor);
  }

  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_50(_class_NSTextCheckingResult,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_51(_class_NSTextCheckingResult,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_52(
        _class_NSTextCheckingResult,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_6(
        _class_NSTextCheckingResult, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSObject classForKeyedUnarchiver() {
    final _ret = _objc_msgSend_40(
        _class_NSTextCheckingResult, _sel_classForKeyedUnarchiver);
    return objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }
}

late final _class_NSTextCheckingResult = objc.getClass("NSTextCheckingResult");

abstract class NSTextCheckingType {
  static const int NSTextCheckingTypeOrthography = 1;
  static const int NSTextCheckingTypeSpelling = 2;
  static const int NSTextCheckingTypeGrammar = 4;
  static const int NSTextCheckingTypeDate = 8;
  static const int NSTextCheckingTypeAddress = 16;
  static const int NSTextCheckingTypeLink = 32;
  static const int NSTextCheckingTypeQuote = 64;
  static const int NSTextCheckingTypeDash = 128;
  static const int NSTextCheckingTypeReplacement = 256;
  static const int NSTextCheckingTypeCorrection = 512;
  static const int NSTextCheckingTypeRegularExpression = 1024;
  static const int NSTextCheckingTypePhoneNumber = 2048;
  static const int NSTextCheckingTypeTransitInformation = 4096;
}

late final _sel_resultType = objc.registerName("resultType");
final _objc_msgSend_492 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Int32 Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_range = objc.registerName("range");
final _objc_msgSend_493 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            _NSRange Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        _NSRange Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
final _objc_msgSend_493Stret = objc.msgSendStretPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<_NSRange>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        void Function(ffi.Pointer<_NSRange>, ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_orthography = objc.registerName("orthography");
final _objc_msgSend_494 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_grammarDetails = objc.registerName("grammarDetails");
late final _sel_duration = objc.registerName("duration");
late final _sel_components = objc.registerName("components");
late final _sel_replacementString = objc.registerName("replacementString");
late final _sel_alternativeStrings = objc.registerName("alternativeStrings");

class NSRegularExpression extends objc.NSObject {
  NSRegularExpression._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSRegularExpression] that points to the same underlying object as [other].
  NSRegularExpression.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSRegularExpression] that wraps the given raw object pointer.
  NSRegularExpression.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSRegularExpression].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSRegularExpression);
  }

  static NSRegularExpression? regularExpressionWithPattern_options_error_(
      objc.NSString pattern,
      int options,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    final _ret = _objc_msgSend_495(
        _class_NSRegularExpression,
        _sel_regularExpressionWithPattern_options_error_,
        pattern.pointer,
        options,
        error);
    return _ret.address == 0
        ? null
        : NSRegularExpression.castFromPointer(_ret,
            retain: true, release: true);
  }

  NSRegularExpression? initWithPattern_options_error_(objc.NSString pattern,
      int options, ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    final _ret = _objc_msgSend_496(this.pointer,
        _sel_initWithPattern_options_error_, pattern.pointer, options, error);
    return _ret.address == 0
        ? null
        : NSRegularExpression.castFromPointer(_ret,
            retain: true, release: true);
  }

  objc.NSString get pattern {
    final _ret = _objc_msgSend_12(this.pointer, _sel_pattern);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  int get options {
    return _objc_msgSend_497(this.pointer, _sel_options);
  }

  int get numberOfCaptureGroups {
    return _objc_msgSend_29(this.pointer, _sel_numberOfCaptureGroups);
  }

  static objc.NSString escapedPatternForString_(objc.NSString string) {
    final _ret = _objc_msgSend_297(_class_NSRegularExpression,
        _sel_escapedPatternForString_, string.pointer);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  void enumerateMatchesInString_options_range_usingBlock_(
      objc.NSString string,
      int options,
      _NSRange range,
      ObjCBlock_ffiVoid_NSTextCheckingResult_NSMatchingFlags_bool block) {
    _objc_msgSend_498(
        this.pointer,
        _sel_enumerateMatchesInString_options_range_usingBlock_,
        string.pointer,
        options,
        range,
        block.pointer);
  }

  objc.NSArray matchesInString_options_range_(
      objc.NSString string, int options, _NSRange range) {
    final _ret = _objc_msgSend_499(this.pointer,
        _sel_matchesInString_options_range_, string.pointer, options, range);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  int numberOfMatchesInString_options_range_(
      objc.NSString string, int options, _NSRange range) {
    return _objc_msgSend_500(
        this.pointer,
        _sel_numberOfMatchesInString_options_range_,
        string.pointer,
        options,
        range);
  }

  NSTextCheckingResult? firstMatchInString_options_range_(
      objc.NSString string, int options, _NSRange range) {
    final _ret = _objc_msgSend_501(this.pointer,
        _sel_firstMatchInString_options_range_, string.pointer, options, range);
    return _ret.address == 0
        ? null
        : NSTextCheckingResult.castFromPointer(_ret,
            retain: true, release: true);
  }

  void rangeOfFirstMatchInString_options_range_(ffi.Pointer<_NSRange> stret,
      objc.NSString string, int options, _NSRange range) {
    objc.useMsgSendVariants
        ? _objc_msgSend_502Stret(
            stret,
            this.pointer,
            _sel_rangeOfFirstMatchInString_options_range_,
            string.pointer,
            options,
            range)
        : stret.ref = _objc_msgSend_502(
            this.pointer,
            _sel_rangeOfFirstMatchInString_options_range_,
            string.pointer,
            options,
            range);
  }

  objc.NSString stringByReplacingMatchesInString_options_range_withTemplate_(
      objc.NSString string, int options, _NSRange range, objc.NSString templ) {
    final _ret = _objc_msgSend_503(
        this.pointer,
        _sel_stringByReplacingMatchesInString_options_range_withTemplate_,
        string.pointer,
        options,
        range,
        templ.pointer);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  int replaceMatchesInString_options_range_withTemplate_(
      objc.NSMutableString string,
      int options,
      _NSRange range,
      objc.NSString templ) {
    return _objc_msgSend_504(
        this.pointer,
        _sel_replaceMatchesInString_options_range_withTemplate_,
        string.pointer,
        options,
        range,
        templ.pointer);
  }

  objc.NSString replacementStringForResult_inString_offset_template_(
      NSTextCheckingResult result,
      objc.NSString string,
      int offset,
      objc.NSString templ) {
    final _ret = _objc_msgSend_505(
        this.pointer,
        _sel_replacementStringForResult_inString_offset_template_,
        result.pointer,
        string.pointer,
        offset,
        templ.pointer);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSString escapedTemplateForString_(objc.NSString string) {
    final _ret = _objc_msgSend_297(_class_NSRegularExpression,
        _sel_escapedTemplateForString_, string.pointer);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  @override
  NSRegularExpression init() {
    final _ret = _objc_msgSend_40(this.pointer, _sel_init);
    return NSRegularExpression.castFromPointer(_ret,
        retain: true, release: true);
  }

  static NSRegularExpression new1() {
    final _ret = _objc_msgSend_40(_class_NSRegularExpression, _sel_new);
    return NSRegularExpression.castFromPointer(_ret,
        retain: false, release: true);
  }

  static NSRegularExpression allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_47(_class_NSRegularExpression, _sel_allocWithZone_, zone);
    return NSRegularExpression.castFromPointer(_ret,
        retain: false, release: true);
  }

  static NSRegularExpression alloc() {
    final _ret = _objc_msgSend_40(_class_NSRegularExpression, _sel_alloc);
    return NSRegularExpression.castFromPointer(_ret,
        retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.NSObject aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.NSObject? anArgument) {
    _objc_msgSend_48(
        _class_NSRegularExpression,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  static void cancelPreviousPerformRequestsWithTarget_(objc.NSObject aTarget) {
    _objc_msgSend_49(_class_NSRegularExpression,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_7(
        _class_NSRegularExpression, _sel_accessInstanceVariablesDirectly);
  }

  static bool useStoredAccessor() {
    return _objc_msgSend_7(_class_NSRegularExpression, _sel_useStoredAccessor);
  }

  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_50(_class_NSRegularExpression,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_51(_class_NSRegularExpression,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_52(
        _class_NSRegularExpression,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_6(
        _class_NSRegularExpression, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSObject classForKeyedUnarchiver() {
    final _ret = _objc_msgSend_40(
        _class_NSRegularExpression, _sel_classForKeyedUnarchiver);
    return objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }
}

late final _class_NSRegularExpression = objc.getClass("NSRegularExpression");

abstract class NSRegularExpressionOptions {
  static const int NSRegularExpressionCaseInsensitive = 1;
  static const int NSRegularExpressionAllowCommentsAndWhitespace = 2;
  static const int NSRegularExpressionIgnoreMetacharacters = 4;
  static const int NSRegularExpressionDotMatchesLineSeparators = 8;
  static const int NSRegularExpressionAnchorsMatchLines = 16;
  static const int NSRegularExpressionUseUnixLineSeparators = 32;
  static const int NSRegularExpressionUseUnicodeWordBoundaries = 64;
}

late final _sel_regularExpressionWithPattern_options_error_ =
    objc.registerName("regularExpressionWithPattern:options:error:");
final _objc_msgSend_495 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Int32,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_initWithPattern_options_error_ =
    objc.registerName("initWithPattern:options:error:");
final _objc_msgSend_496 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Int32,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_pattern = objc.registerName("pattern");
late final _sel_options = objc.registerName("options");
final _objc_msgSend_497 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Int32 Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_numberOfCaptureGroups =
    objc.registerName("numberOfCaptureGroups");
late final _sel_escapedPatternForString_ =
    objc.registerName("escapedPatternForString:");

abstract class NSMatchingOptions {
  static const int NSMatchingReportProgress = 1;
  static const int NSMatchingReportCompletion = 2;
  static const int NSMatchingAnchored = 4;
  static const int NSMatchingWithTransparentBounds = 8;
  static const int NSMatchingWithoutAnchoringBounds = 16;
}

void
    _ObjCBlock_ffiVoid_NSTextCheckingResult_NSMatchingFlags_bool_fnPtrTrampoline(
            ffi.Pointer<objc.ObjCBlock> block,
            ffi.Pointer<objc.ObjCObject> arg0,
            int arg1,
            ffi.Pointer<ffi.Bool> arg2) =>
        block.ref.target
            .cast<
                ffi.NativeFunction<
                    ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0,
                        ffi.Int32 arg1, ffi.Pointer<ffi.Bool> arg2)>>()
            .asFunction<
                void Function(ffi.Pointer<objc.ObjCObject>, int,
                    ffi.Pointer<ffi.Bool>)>()(arg0, arg1, arg2);
final _ObjCBlock_ffiVoid_NSTextCheckingResult_NSMatchingFlags_bool_closureRegistry =
    <int,
        void Function(
            ffi.Pointer<objc.ObjCObject>, int, ffi.Pointer<ffi.Bool>)>{};
int _ObjCBlock_ffiVoid_NSTextCheckingResult_NSMatchingFlags_bool_closureRegistryIndex =
    0;
ffi.Pointer<ffi.Void>
    _ObjCBlock_ffiVoid_NSTextCheckingResult_NSMatchingFlags_bool_registerClosure(
        void Function(ffi.Pointer<objc.ObjCObject>, int, ffi.Pointer<ffi.Bool>)
            fn) {
  final id =
      ++_ObjCBlock_ffiVoid_NSTextCheckingResult_NSMatchingFlags_bool_closureRegistryIndex;
  _ObjCBlock_ffiVoid_NSTextCheckingResult_NSMatchingFlags_bool_closureRegistry[
      id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

void _ObjCBlock_ffiVoid_NSTextCheckingResult_NSMatchingFlags_bool_closureTrampoline(
        ffi.Pointer<objc.ObjCBlock> block,
        ffi.Pointer<objc.ObjCObject> arg0,
        int arg1,
        ffi.Pointer<ffi.Bool> arg2) =>
    _ObjCBlock_ffiVoid_NSTextCheckingResult_NSMatchingFlags_bool_closureRegistry[
        block.ref.target.address]!(arg0, arg1, arg2);

class ObjCBlock_ffiVoid_NSTextCheckingResult_NSMatchingFlags_bool
    extends objc.ObjCBlockBase {
  ObjCBlock_ffiVoid_NSTextCheckingResult_NSMatchingFlags_bool._(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = true})
      : super(pointer, retain: retain, release: release);

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_ffiVoid_NSTextCheckingResult_NSMatchingFlags_bool
      castFromPointer(ffi.Pointer<objc.ObjCBlock> pointer,
          {bool retain = false, bool release = false}) {
    return ObjCBlock_ffiVoid_NSTextCheckingResult_NSMatchingFlags_bool._(
        pointer,
        retain: retain,
        release: release);
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSTextCheckingResult_NSMatchingFlags_bool.fromFunctionPointer(
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0,
                      ffi.Int32 arg1, ffi.Pointer<ffi.Bool> arg2)>>
          ptr)
      : this._(objc.newBlock(
            _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Int32,
                            ffi.Pointer<ffi.Bool>)>(
                    _ObjCBlock_ffiVoid_NSTextCheckingResult_NSMatchingFlags_bool_fnPtrTrampoline)
                .cast(),
            ptr.cast()));
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSTextCheckingResult_NSMatchingFlags_bool.fromFunction(
      void Function(NSTextCheckingResult?, int, ffi.Pointer<ffi.Bool>) fn)
      : this._(objc.newBlock(
            _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Int32,
                            ffi.Pointer<ffi.Bool>)>(
                    _ObjCBlock_ffiVoid_NSTextCheckingResult_NSMatchingFlags_bool_closureTrampoline)
                .cast(),
            _ObjCBlock_ffiVoid_NSTextCheckingResult_NSMatchingFlags_bool_registerClosure(
                (ffi.Pointer<objc.ObjCObject> arg0, int arg1,
                        ffi.Pointer<ffi.Bool> arg2) =>
                    fn(arg0.address == 0 ? null : NSTextCheckingResult.castFromPointer(arg0, retain: true, release: true), arg1, arg2))));
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_NSTextCheckingResult_NSMatchingFlags_bool.listener(
      void Function(NSTextCheckingResult?, int, ffi.Pointer<ffi.Bool>) fn)
      : this._(objc.newBlock(
            (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                        ffi.Void Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Int32,
                            ffi.Pointer<ffi.Bool>)>.listener(
                    _ObjCBlock_ffiVoid_NSTextCheckingResult_NSMatchingFlags_bool_closureTrampoline)
                  ..keepIsolateAlive = false)
                .nativeFunction
                .cast(),
            _ObjCBlock_ffiVoid_NSTextCheckingResult_NSMatchingFlags_bool_registerClosure(
                (ffi.Pointer<objc.ObjCObject> arg0, int arg1, ffi.Pointer<ffi.Bool> arg2) =>
                    fn(arg0.address == 0 ? null : NSTextCheckingResult.castFromPointer(arg0, retain: true, release: true), arg1, arg2))));
  static ffi.NativeCallable<
      ffi.Void Function(
          ffi.Pointer<objc.ObjCBlock>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Int32,
          ffi.Pointer<ffi.Bool>)>? _dartFuncListenerTrampoline;

  void call(NSTextCheckingResult? arg0, int arg1, ffi.Pointer<ffi.Bool> arg2) =>
      pointer.ref.invoke
              .cast<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<objc.ObjCBlock> block,
                          ffi.Pointer<objc.ObjCObject> arg0,
                          ffi.Int32 arg1,
                          ffi.Pointer<ffi.Bool> arg2)>>()
              .asFunction<
                  void Function(
                      ffi.Pointer<objc.ObjCBlock>,
                      ffi.Pointer<objc.ObjCObject>,
                      int,
                      ffi.Pointer<ffi.Bool>)>()(
          pointer, arg0?.pointer ?? ffi.nullptr, arg1, arg2);
}

abstract class NSMatchingFlags {
  static const int NSMatchingProgress = 1;
  static const int NSMatchingCompleted = 2;
  static const int NSMatchingHitEnd = 4;
  static const int NSMatchingRequiredEnd = 8;
  static const int NSMatchingInternalError = 16;
}

late final _sel_enumerateMatchesInString_options_range_usingBlock_ =
    objc.registerName("enumerateMatchesInString:options:range:usingBlock:");
final _objc_msgSend_498 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Int32,
                _NSRange,
                ffi.Pointer<objc.ObjCBlock>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            _NSRange,
            ffi.Pointer<objc.ObjCBlock>)>();
late final _sel_matchesInString_options_range_ =
    objc.registerName("matchesInString:options:range:");
final _objc_msgSend_499 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Int32,
                _NSRange)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            _NSRange)>();
late final _sel_numberOfMatchesInString_options_range_ =
    objc.registerName("numberOfMatchesInString:options:range:");
final _objc_msgSend_500 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Int32,
                _NSRange)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            _NSRange)>();
late final _sel_firstMatchInString_options_range_ =
    objc.registerName("firstMatchInString:options:range:");
final _objc_msgSend_501 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Int32,
                _NSRange)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            _NSRange)>();
late final _sel_rangeOfFirstMatchInString_options_range_ =
    objc.registerName("rangeOfFirstMatchInString:options:range:");
final _objc_msgSend_502 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            _NSRange Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Int32,
                _NSRange)>>()
    .asFunction<
        _NSRange Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            _NSRange)>();
final _objc_msgSend_502Stret = objc.msgSendStretPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<_NSRange>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Int32,
                _NSRange)>>()
    .asFunction<
        void Function(
            ffi.Pointer<_NSRange>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            _NSRange)>();
late final _sel_stringByReplacingMatchesInString_options_range_withTemplate_ =
    objc.registerName(
        "stringByReplacingMatchesInString:options:range:withTemplate:");
final _objc_msgSend_503 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Int32,
                _NSRange,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            _NSRange,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_replaceMatchesInString_options_range_withTemplate_ =
    objc.registerName("replaceMatchesInString:options:range:withTemplate:");
final _objc_msgSend_504 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedLong Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Int32,
                _NSRange,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            _NSRange,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_replacementStringForResult_inString_offset_template_ =
    objc.registerName("replacementStringForResult:inString:offset:template:");
final _objc_msgSend_505 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Long,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_escapedTemplateForString_ =
    objc.registerName("escapedTemplateForString:");
late final _sel_regularExpression = objc.registerName("regularExpression");
final _objc_msgSend_506 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_phoneNumber = objc.registerName("phoneNumber");
late final _sel_numberOfRanges = objc.registerName("numberOfRanges");
late final _sel_rangeAtIndex_ = objc.registerName("rangeAtIndex:");
final _objc_msgSend_507 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            _NSRange Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedLong)>>()
    .asFunction<
        _NSRange Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
final _objc_msgSend_507Stret = objc.msgSendStretPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<_NSRange>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.UnsignedLong)>>()
    .asFunction<
        void Function(ffi.Pointer<_NSRange>, ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_rangeWithName_ = objc.registerName("rangeWithName:");
final _objc_msgSend_508 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            _NSRange Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        _NSRange Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
final _objc_msgSend_508Stret = objc.msgSendStretPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<_NSRange>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<_NSRange>, ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_resultByAdjustingRangesWithOffset_ =
    objc.registerName("resultByAdjustingRangesWithOffset:");
final _objc_msgSend_509 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Long)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_addressComponents = objc.registerName("addressComponents");
late final _sel_orthographyCheckingResultWithRange_orthography_ =
    objc.registerName("orthographyCheckingResultWithRange:orthography:");
final _objc_msgSend_510 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                _NSRange,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            _NSRange,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_spellCheckingResultWithRange_ =
    objc.registerName("spellCheckingResultWithRange:");
final _objc_msgSend_511 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, _NSRange)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, _NSRange)>();
late final _sel_grammarCheckingResultWithRange_details_ =
    objc.registerName("grammarCheckingResultWithRange:details:");
final _objc_msgSend_512 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                _NSRange,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            _NSRange,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_dateCheckingResultWithRange_date_ =
    objc.registerName("dateCheckingResultWithRange:date:");
final _objc_msgSend_513 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                _NSRange,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            _NSRange,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_dateCheckingResultWithRange_date_timeZone_duration_ =
    objc.registerName("dateCheckingResultWithRange:date:timeZone:duration:");
final _objc_msgSend_514 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                _NSRange,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Double)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            _NSRange,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            double)>();
late final _sel_addressCheckingResultWithRange_components_ =
    objc.registerName("addressCheckingResultWithRange:components:");
final _objc_msgSend_515 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                _NSRange,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            _NSRange,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_linkCheckingResultWithRange_URL_ =
    objc.registerName("linkCheckingResultWithRange:URL:");
final _objc_msgSend_516 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                _NSRange,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            _NSRange,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_quoteCheckingResultWithRange_replacementString_ =
    objc.registerName("quoteCheckingResultWithRange:replacementString:");
final _objc_msgSend_517 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                _NSRange,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            _NSRange,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_dashCheckingResultWithRange_replacementString_ =
    objc.registerName("dashCheckingResultWithRange:replacementString:");
late final _sel_replacementCheckingResultWithRange_replacementString_ =
    objc.registerName("replacementCheckingResultWithRange:replacementString:");
late final _sel_correctionCheckingResultWithRange_replacementString_ =
    objc.registerName("correctionCheckingResultWithRange:replacementString:");
late final _sel_correctionCheckingResultWithRange_replacementString_alternativeStrings_ =
    objc.registerName(
        "correctionCheckingResultWithRange:replacementString:alternativeStrings:");
final _objc_msgSend_518 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                _NSRange,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            _NSRange,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_regularExpressionCheckingResultWithRanges_count_regularExpression_ =
    objc.registerName(
        "regularExpressionCheckingResultWithRanges:count:regularExpression:");
final _objc_msgSend_519 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<_NSRange>,
                ffi.UnsignedLong,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<_NSRange>,
            int,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_phoneNumberCheckingResultWithRange_phoneNumber_ =
    objc.registerName("phoneNumberCheckingResultWithRange:phoneNumber:");
late final _sel_transitInformationCheckingResultWithRange_components_ =
    objc.registerName("transitInformationCheckingResultWithRange:components:");

class NSURLCache extends objc.NSObject {
  NSURLCache._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSURLCache] that points to the same underlying object as [other].
  NSURLCache.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSURLCache] that wraps the given raw object pointer.
  NSURLCache.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSURLCache].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(obj.pointer, _sel_isKindOfClass_, _class_NSURLCache);
  }

  static NSURLCache getSharedURLCache() {
    final _ret = _objc_msgSend_520(_class_NSURLCache, _sel_sharedURLCache);
    return NSURLCache.castFromPointer(_ret, retain: true, release: true);
  }

  static void setSharedURLCache(NSURLCache value) {
    return _objc_msgSend_521(
        _class_NSURLCache, _sel_setSharedURLCache_, value.pointer);
  }

  NSURLCache initWithMemoryCapacity_diskCapacity_diskPath_(
      int memoryCapacity, int diskCapacity, objc.NSString? path) {
    final _ret = _objc_msgSend_522(
        this.pointer,
        _sel_initWithMemoryCapacity_diskCapacity_diskPath_,
        memoryCapacity,
        diskCapacity,
        path?.pointer ?? ffi.nullptr);
    return NSURLCache.castFromPointer(_ret, retain: true, release: true);
  }

  NSURLCache initWithMemoryCapacity_diskCapacity_directoryURL_(
      int memoryCapacity, int diskCapacity, objc.NSURL? directoryURL) {
    final _ret = _objc_msgSend_523(
        this.pointer,
        _sel_initWithMemoryCapacity_diskCapacity_directoryURL_,
        memoryCapacity,
        diskCapacity,
        directoryURL?.pointer ?? ffi.nullptr);
    return NSURLCache.castFromPointer(_ret, retain: true, release: true);
  }

  NSCachedURLResponse? cachedResponseForRequest_(NSURLRequest request) {
    final _ret = _objc_msgSend_528(
        this.pointer, _sel_cachedResponseForRequest_, request.pointer);
    return _ret.address == 0
        ? null
        : NSCachedURLResponse.castFromPointer(_ret,
            retain: true, release: true);
  }

  void storeCachedResponse_forRequest_(
      NSCachedURLResponse cachedResponse, NSURLRequest request) {
    _objc_msgSend_529(this.pointer, _sel_storeCachedResponse_forRequest_,
        cachedResponse.pointer, request.pointer);
  }

  void removeCachedResponseForRequest_(NSURLRequest request) {
    _objc_msgSend_530(
        this.pointer, _sel_removeCachedResponseForRequest_, request.pointer);
  }

  void removeAllCachedResponses() {
    _objc_msgSend_82(this.pointer, _sel_removeAllCachedResponses);
  }

  void removeCachedResponsesSinceDate_(objc.NSDate date) {
    _objc_msgSend_246(
        this.pointer, _sel_removeCachedResponsesSinceDate_, date.pointer);
  }

  int get memoryCapacity {
    return _objc_msgSend_29(this.pointer, _sel_memoryCapacity);
  }

  set memoryCapacity(int value) {
    return _objc_msgSend_125(this.pointer, _sel_setMemoryCapacity_, value);
  }

  int get diskCapacity {
    return _objc_msgSend_29(this.pointer, _sel_diskCapacity);
  }

  set diskCapacity(int value) {
    return _objc_msgSend_125(this.pointer, _sel_setDiskCapacity_, value);
  }

  int get currentMemoryUsage {
    return _objc_msgSend_29(this.pointer, _sel_currentMemoryUsage);
  }

  int get currentDiskUsage {
    return _objc_msgSend_29(this.pointer, _sel_currentDiskUsage);
  }

  void storeCachedResponse_forDataTask_(
      NSCachedURLResponse cachedResponse, NSURLSessionDataTask dataTask) {
    _objc_msgSend_531(this.pointer, _sel_storeCachedResponse_forDataTask_,
        cachedResponse.pointer, dataTask.pointer);
  }

  void getCachedResponseForDataTask_completionHandler_(
      NSURLSessionDataTask dataTask,
      ObjCBlock_ffiVoid_NSCachedURLResponse completionHandler) {
    _objc_msgSend_532(
        this.pointer,
        _sel_getCachedResponseForDataTask_completionHandler_,
        dataTask.pointer,
        completionHandler.pointer);
  }

  void removeCachedResponseForDataTask_(NSURLSessionDataTask dataTask) {
    _objc_msgSend_533(
        this.pointer, _sel_removeCachedResponseForDataTask_, dataTask.pointer);
  }

  @override
  NSURLCache init() {
    final _ret = _objc_msgSend_40(this.pointer, _sel_init);
    return NSURLCache.castFromPointer(_ret, retain: true, release: true);
  }

  static NSURLCache new1() {
    final _ret = _objc_msgSend_40(_class_NSURLCache, _sel_new);
    return NSURLCache.castFromPointer(_ret, retain: false, release: true);
  }

  static NSURLCache allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_47(_class_NSURLCache, _sel_allocWithZone_, zone);
    return NSURLCache.castFromPointer(_ret, retain: false, release: true);
  }

  static NSURLCache alloc() {
    final _ret = _objc_msgSend_40(_class_NSURLCache, _sel_alloc);
    return NSURLCache.castFromPointer(_ret, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.NSObject aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.NSObject? anArgument) {
    _objc_msgSend_48(
        _class_NSURLCache,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  static void cancelPreviousPerformRequestsWithTarget_(objc.NSObject aTarget) {
    _objc_msgSend_49(_class_NSURLCache,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_7(
        _class_NSURLCache, _sel_accessInstanceVariablesDirectly);
  }

  static bool useStoredAccessor() {
    return _objc_msgSend_7(_class_NSURLCache, _sel_useStoredAccessor);
  }

  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_50(_class_NSURLCache,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_51(_class_NSURLCache,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_52(
        _class_NSURLCache,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret =
        _objc_msgSend_6(_class_NSURLCache, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSObject classForKeyedUnarchiver() {
    final _ret =
        _objc_msgSend_40(_class_NSURLCache, _sel_classForKeyedUnarchiver);
    return objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }
}

late final _class_NSURLCache = objc.getClass("NSURLCache");
late final _sel_sharedURLCache = objc.registerName("sharedURLCache");
final _objc_msgSend_520 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setSharedURLCache_ = objc.registerName("setSharedURLCache:");
final _objc_msgSend_521 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_initWithMemoryCapacity_diskCapacity_diskPath_ =
    objc.registerName("initWithMemoryCapacity:diskCapacity:diskPath:");
final _objc_msgSend_522 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.UnsignedLong,
                ffi.UnsignedLong,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int,
            int,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_initWithMemoryCapacity_diskCapacity_directoryURL_ =
    objc.registerName("initWithMemoryCapacity:diskCapacity:directoryURL:");
final _objc_msgSend_523 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.UnsignedLong,
                ffi.UnsignedLong,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int,
            int,
            ffi.Pointer<objc.ObjCObject>)>();

class NSCachedURLResponse extends objc.NSObject {
  NSCachedURLResponse._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSCachedURLResponse] that points to the same underlying object as [other].
  NSCachedURLResponse.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSCachedURLResponse] that wraps the given raw object pointer.
  NSCachedURLResponse.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSCachedURLResponse].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSCachedURLResponse);
  }

  NSCachedURLResponse initWithResponse_data_(
      NSURLResponse response, objc.NSData data) {
    final _ret = _objc_msgSend_524(this.pointer, _sel_initWithResponse_data_,
        response.pointer, data.pointer);
    return NSCachedURLResponse.castFromPointer(_ret,
        retain: true, release: true);
  }

  NSCachedURLResponse initWithResponse_data_userInfo_storagePolicy_(
      NSURLResponse response,
      objc.NSData data,
      objc.NSDictionary? userInfo,
      int storagePolicy) {
    final _ret = _objc_msgSend_525(
        this.pointer,
        _sel_initWithResponse_data_userInfo_storagePolicy_,
        response.pointer,
        data.pointer,
        userInfo?.pointer ?? ffi.nullptr,
        storagePolicy);
    return NSCachedURLResponse.castFromPointer(_ret,
        retain: true, release: true);
  }

  NSURLResponse get response {
    final _ret = _objc_msgSend_526(this.pointer, _sel_response);
    return NSURLResponse.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSData get data {
    final _ret = _objc_msgSend_104(this.pointer, _sel_data);
    return objc.NSData.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSDictionary? get userInfo {
    final _ret = _objc_msgSend_65(this.pointer, _sel_userInfo);
    return _ret.address == 0
        ? null
        : objc.NSDictionary.castFromPointer(_ret, retain: true, release: true);
  }

  int get storagePolicy {
    return _objc_msgSend_527(this.pointer, _sel_storagePolicy);
  }

  @override
  NSCachedURLResponse init() {
    final _ret = _objc_msgSend_40(this.pointer, _sel_init);
    return NSCachedURLResponse.castFromPointer(_ret,
        retain: true, release: true);
  }

  static NSCachedURLResponse new1() {
    final _ret = _objc_msgSend_40(_class_NSCachedURLResponse, _sel_new);
    return NSCachedURLResponse.castFromPointer(_ret,
        retain: false, release: true);
  }

  static NSCachedURLResponse allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_47(_class_NSCachedURLResponse, _sel_allocWithZone_, zone);
    return NSCachedURLResponse.castFromPointer(_ret,
        retain: false, release: true);
  }

  static NSCachedURLResponse alloc() {
    final _ret = _objc_msgSend_40(_class_NSCachedURLResponse, _sel_alloc);
    return NSCachedURLResponse.castFromPointer(_ret,
        retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.NSObject aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.NSObject? anArgument) {
    _objc_msgSend_48(
        _class_NSCachedURLResponse,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  static void cancelPreviousPerformRequestsWithTarget_(objc.NSObject aTarget) {
    _objc_msgSend_49(_class_NSCachedURLResponse,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_7(
        _class_NSCachedURLResponse, _sel_accessInstanceVariablesDirectly);
  }

  static bool useStoredAccessor() {
    return _objc_msgSend_7(_class_NSCachedURLResponse, _sel_useStoredAccessor);
  }

  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_50(_class_NSCachedURLResponse,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_51(_class_NSCachedURLResponse,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_52(
        _class_NSCachedURLResponse,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_6(
        _class_NSCachedURLResponse, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSObject classForKeyedUnarchiver() {
    final _ret = _objc_msgSend_40(
        _class_NSCachedURLResponse, _sel_classForKeyedUnarchiver);
    return objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }
}

late final _class_NSCachedURLResponse = objc.getClass("NSCachedURLResponse");
late final _sel_initWithResponse_data_ =
    objc.registerName("initWithResponse:data:");
final _objc_msgSend_524 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();

abstract class NSURLCacheStoragePolicy {
  static const int NSURLCacheStorageAllowed = 0;
  static const int NSURLCacheStorageAllowedInMemoryOnly = 1;
  static const int NSURLCacheStorageNotAllowed = 2;
}

late final _sel_initWithResponse_data_userInfo_storagePolicy_ =
    objc.registerName("initWithResponse:data:userInfo:storagePolicy:");
final _objc_msgSend_525 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Int32)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            int)>();
final _objc_msgSend_526 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_storagePolicy = objc.registerName("storagePolicy");
final _objc_msgSend_527 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Int32 Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_cachedResponseForRequest_ =
    objc.registerName("cachedResponseForRequest:");
final _objc_msgSend_528 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_storeCachedResponse_forRequest_ =
    objc.registerName("storeCachedResponse:forRequest:");
final _objc_msgSend_529 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_removeCachedResponseForRequest_ =
    objc.registerName("removeCachedResponseForRequest:");
final _objc_msgSend_530 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_removeAllCachedResponses =
    objc.registerName("removeAllCachedResponses");
late final _sel_removeCachedResponsesSinceDate_ =
    objc.registerName("removeCachedResponsesSinceDate:");
late final _sel_memoryCapacity = objc.registerName("memoryCapacity");
late final _sel_setMemoryCapacity_ = objc.registerName("setMemoryCapacity:");
late final _sel_diskCapacity = objc.registerName("diskCapacity");
late final _sel_setDiskCapacity_ = objc.registerName("setDiskCapacity:");
late final _sel_currentMemoryUsage = objc.registerName("currentMemoryUsage");
late final _sel_currentDiskUsage = objc.registerName("currentDiskUsage");

class NSURLSessionDataTask extends NSURLSessionTask {
  NSURLSessionDataTask._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSURLSessionDataTask] that points to the same underlying object as [other].
  NSURLSessionDataTask.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSURLSessionDataTask] that wraps the given raw object pointer.
  NSURLSessionDataTask.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSURLSessionDataTask].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSURLSessionDataTask);
  }

  @override
  NSURLSessionDataTask init() {
    final _ret = _objc_msgSend_40(this.pointer, _sel_init);
    return NSURLSessionDataTask.castFromPointer(_ret,
        retain: true, release: true);
  }

  static NSURLSessionDataTask new1() {
    final _ret = _objc_msgSend_40(_class_NSURLSessionDataTask, _sel_new);
    return NSURLSessionDataTask.castFromPointer(_ret,
        retain: false, release: true);
  }

  static NSURLSessionDataTask allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_47(
        _class_NSURLSessionDataTask, _sel_allocWithZone_, zone);
    return NSURLSessionDataTask.castFromPointer(_ret,
        retain: false, release: true);
  }

  static NSURLSessionDataTask alloc() {
    final _ret = _objc_msgSend_40(_class_NSURLSessionDataTask, _sel_alloc);
    return NSURLSessionDataTask.castFromPointer(_ret,
        retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.NSObject aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.NSObject? anArgument) {
    _objc_msgSend_48(
        _class_NSURLSessionDataTask,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  static void cancelPreviousPerformRequestsWithTarget_(objc.NSObject aTarget) {
    _objc_msgSend_49(_class_NSURLSessionDataTask,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_7(
        _class_NSURLSessionDataTask, _sel_accessInstanceVariablesDirectly);
  }

  static bool useStoredAccessor() {
    return _objc_msgSend_7(_class_NSURLSessionDataTask, _sel_useStoredAccessor);
  }

  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_50(_class_NSURLSessionDataTask,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_51(_class_NSURLSessionDataTask,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_52(
        _class_NSURLSessionDataTask,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_6(
        _class_NSURLSessionDataTask, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSObject classForKeyedUnarchiver() {
    final _ret = _objc_msgSend_40(
        _class_NSURLSessionDataTask, _sel_classForKeyedUnarchiver);
    return objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }
}

late final _class_NSURLSessionDataTask = objc.getClass("NSURLSessionDataTask");
late final _sel_storeCachedResponse_forDataTask_ =
    objc.registerName("storeCachedResponse:forDataTask:");
final _objc_msgSend_531 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
void _ObjCBlock_ffiVoid_NSCachedURLResponse_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlock> block, ffi.Pointer<objc.ObjCObject> arg0) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0)>>()
        .asFunction<void Function(ffi.Pointer<objc.ObjCObject>)>()(arg0);
final _ObjCBlock_ffiVoid_NSCachedURLResponse_closureRegistry =
    <int, void Function(ffi.Pointer<objc.ObjCObject>)>{};
int _ObjCBlock_ffiVoid_NSCachedURLResponse_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void> _ObjCBlock_ffiVoid_NSCachedURLResponse_registerClosure(
    void Function(ffi.Pointer<objc.ObjCObject>) fn) {
  final id = ++_ObjCBlock_ffiVoid_NSCachedURLResponse_closureRegistryIndex;
  _ObjCBlock_ffiVoid_NSCachedURLResponse_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

void _ObjCBlock_ffiVoid_NSCachedURLResponse_closureTrampoline(
        ffi.Pointer<objc.ObjCBlock> block, ffi.Pointer<objc.ObjCObject> arg0) =>
    _ObjCBlock_ffiVoid_NSCachedURLResponse_closureRegistry[
        block.ref.target.address]!(arg0);

class ObjCBlock_ffiVoid_NSCachedURLResponse extends objc.ObjCBlockBase {
  ObjCBlock_ffiVoid_NSCachedURLResponse._(ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false, bool release = true})
      : super(pointer, retain: retain, release: release);

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_ffiVoid_NSCachedURLResponse castFromPointer(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = false}) {
    return ObjCBlock_ffiVoid_NSCachedURLResponse._(pointer,
        retain: retain, release: release);
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSCachedURLResponse.fromFunctionPointer(
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0)>>
          ptr)
      : this._(objc.newBlock(
            _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<objc.ObjCObject>)>(
                    _ObjCBlock_ffiVoid_NSCachedURLResponse_fnPtrTrampoline)
                .cast(),
            ptr.cast()));
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSCachedURLResponse.fromFunction(
      void Function(NSCachedURLResponse?) fn)
      : this._(objc.newBlock(
            _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(
                            ffi.Pointer<objc.ObjCBlock>, ffi.Pointer<objc.ObjCObject>)>(
                    _ObjCBlock_ffiVoid_NSCachedURLResponse_closureTrampoline)
                .cast(),
            _ObjCBlock_ffiVoid_NSCachedURLResponse_registerClosure(
                (ffi.Pointer<objc.ObjCObject> arg0) => fn(arg0.address == 0
                    ? null
                    : NSCachedURLResponse.castFromPointer(arg0, retain: true, release: true)))));
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_NSCachedURLResponse.listener(void Function(NSCachedURLResponse?) fn)
      : this._(objc.newBlock(
            (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                        ffi.Void Function(ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<objc.ObjCObject>)>.listener(
                    _ObjCBlock_ffiVoid_NSCachedURLResponse_closureTrampoline)
                  ..keepIsolateAlive = false)
                .nativeFunction
                .cast(),
            _ObjCBlock_ffiVoid_NSCachedURLResponse_registerClosure(
                (ffi.Pointer<objc.ObjCObject> arg0) => fn(arg0.address == 0
                    ? null
                    : NSCachedURLResponse.castFromPointer(arg0, retain: true, release: true)))));
  static ffi.NativeCallable<
          ffi.Void Function(
              ffi.Pointer<objc.ObjCBlock>, ffi.Pointer<objc.ObjCObject>)>?
      _dartFuncListenerTrampoline;

  void call(NSCachedURLResponse? arg0) => pointer.ref.invoke
          .cast<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<objc.ObjCBlock> block,
                      ffi.Pointer<objc.ObjCObject> arg0)>>()
          .asFunction<
              void Function(
                  ffi.Pointer<objc.ObjCBlock>, ffi.Pointer<objc.ObjCObject>)>()(
      pointer, arg0?.pointer ?? ffi.nullptr);
}

late final _sel_getCachedResponseForDataTask_completionHandler_ =
    objc.registerName("getCachedResponseForDataTask:completionHandler:");
final _objc_msgSend_532 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCBlock>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCBlock>)>();
late final _sel_removeCachedResponseForDataTask_ =
    objc.registerName("removeCachedResponseForDataTask:");
final _objc_msgSend_533 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();

class NSURLConnection extends objc.NSObject {
  NSURLConnection._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSURLConnection] that points to the same underlying object as [other].
  NSURLConnection.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSURLConnection] that wraps the given raw object pointer.
  NSURLConnection.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSURLConnection].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSURLConnection);
  }

  NSURLConnection? initWithRequest_delegate_startImmediately_(
      NSURLRequest request, objc.NSObject? delegate, bool startImmediately) {
    final _ret = _objc_msgSend_534(
        this.pointer,
        _sel_initWithRequest_delegate_startImmediately_,
        request.pointer,
        delegate?.pointer ?? ffi.nullptr,
        startImmediately);
    return _ret.address == 0
        ? null
        : NSURLConnection.castFromPointer(_ret, retain: true, release: true);
  }

  NSURLConnection? initWithRequest_delegate_(
      NSURLRequest request, objc.NSObject? delegate) {
    final _ret = _objc_msgSend_535(this.pointer, _sel_initWithRequest_delegate_,
        request.pointer, delegate?.pointer ?? ffi.nullptr);
    return _ret.address == 0
        ? null
        : NSURLConnection.castFromPointer(_ret, retain: true, release: true);
  }

  static NSURLConnection? connectionWithRequest_delegate_(
      NSURLRequest request, objc.NSObject? delegate) {
    final _ret = _objc_msgSend_536(
        _class_NSURLConnection,
        _sel_connectionWithRequest_delegate_,
        request.pointer,
        delegate?.pointer ?? ffi.nullptr);
    return _ret.address == 0
        ? null
        : NSURLConnection.castFromPointer(_ret, retain: true, release: true);
  }

  NSURLRequest get originalRequest {
    final _ret = _objc_msgSend_537(this.pointer, _sel_originalRequest);
    return NSURLRequest.castFromPointer(_ret, retain: true, release: true);
  }

  NSURLRequest get currentRequest {
    final _ret = _objc_msgSend_537(this.pointer, _sel_currentRequest);
    return NSURLRequest.castFromPointer(_ret, retain: true, release: true);
  }

  void start() {
    _objc_msgSend_82(this.pointer, _sel_start);
  }

  void cancel() {
    _objc_msgSend_82(this.pointer, _sel_cancel);
  }

  void scheduleInRunLoop_forMode_(NSRunLoop aRunLoop, objc.NSString mode) {
    _objc_msgSend_216(this.pointer, _sel_scheduleInRunLoop_forMode_,
        aRunLoop.pointer, mode.pointer);
  }

  void unscheduleFromRunLoop_forMode_(NSRunLoop aRunLoop, objc.NSString mode) {
    _objc_msgSend_216(this.pointer, _sel_unscheduleFromRunLoop_forMode_,
        aRunLoop.pointer, mode.pointer);
  }

  void setDelegateQueue_(NSOperationQueue? queue) {
    _objc_msgSend_538(
        this.pointer, _sel_setDelegateQueue_, queue?.pointer ?? ffi.nullptr);
  }

  static bool canHandleRequest_(NSURLRequest request) {
    return _objc_msgSend_539(
        _class_NSURLConnection, _sel_canHandleRequest_, request.pointer);
  }

  static objc.NSData? sendSynchronousRequest_returningResponse_error_(
      NSURLRequest request,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> response,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    final _ret = _objc_msgSend_540(
        _class_NSURLConnection,
        _sel_sendSynchronousRequest_returningResponse_error_,
        request.pointer,
        response,
        error);
    return _ret.address == 0
        ? null
        : objc.NSData.castFromPointer(_ret, retain: true, release: true);
  }

  static void sendAsynchronousRequest_queue_completionHandler_(
      NSURLRequest request,
      NSOperationQueue queue,
      ObjCBlock_ffiVoid_NSURLResponse_NSData_NSError handler) {
    _objc_msgSend_541(
        _class_NSURLConnection,
        _sel_sendAsynchronousRequest_queue_completionHandler_,
        request.pointer,
        queue.pointer,
        handler.pointer);
  }

  @override
  NSURLConnection init() {
    final _ret = _objc_msgSend_40(this.pointer, _sel_init);
    return NSURLConnection.castFromPointer(_ret, retain: true, release: true);
  }

  static NSURLConnection new1() {
    final _ret = _objc_msgSend_40(_class_NSURLConnection, _sel_new);
    return NSURLConnection.castFromPointer(_ret, retain: false, release: true);
  }

  static NSURLConnection allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_47(_class_NSURLConnection, _sel_allocWithZone_, zone);
    return NSURLConnection.castFromPointer(_ret, retain: false, release: true);
  }

  static NSURLConnection alloc() {
    final _ret = _objc_msgSend_40(_class_NSURLConnection, _sel_alloc);
    return NSURLConnection.castFromPointer(_ret, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.NSObject aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.NSObject? anArgument) {
    _objc_msgSend_48(
        _class_NSURLConnection,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  static void cancelPreviousPerformRequestsWithTarget_(objc.NSObject aTarget) {
    _objc_msgSend_49(_class_NSURLConnection,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_7(
        _class_NSURLConnection, _sel_accessInstanceVariablesDirectly);
  }

  static bool useStoredAccessor() {
    return _objc_msgSend_7(_class_NSURLConnection, _sel_useStoredAccessor);
  }

  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_50(_class_NSURLConnection,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_51(_class_NSURLConnection,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_52(
        _class_NSURLConnection,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_6(
        _class_NSURLConnection, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSObject classForKeyedUnarchiver() {
    final _ret =
        _objc_msgSend_40(_class_NSURLConnection, _sel_classForKeyedUnarchiver);
    return objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }
}

late final _class_NSURLConnection = objc.getClass("NSURLConnection");
late final _sel_initWithRequest_delegate_startImmediately_ =
    objc.registerName("initWithRequest:delegate:startImmediately:");
final _objc_msgSend_534 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Bool)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            bool)>();
late final _sel_initWithRequest_delegate_ =
    objc.registerName("initWithRequest:delegate:");
final _objc_msgSend_535 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_connectionWithRequest_delegate_ =
    objc.registerName("connectionWithRequest:delegate:");
final _objc_msgSend_536 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
final _objc_msgSend_537 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_unscheduleFromRunLoop_forMode_ =
    objc.registerName("unscheduleFromRunLoop:forMode:");
late final _sel_setDelegateQueue_ = objc.registerName("setDelegateQueue:");
final _objc_msgSend_538 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_canHandleRequest_ = objc.registerName("canHandleRequest:");
final _objc_msgSend_539 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        bool Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_sendSynchronousRequest_returningResponse_error_ =
    objc.registerName("sendSynchronousRequest:returningResponse:error:");
final _objc_msgSend_540 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
void _ObjCBlock_ffiVoid_NSURLResponse_NSData_NSError_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlock> block,
        ffi.Pointer<objc.ObjCObject> arg0,
        ffi.Pointer<objc.ObjCObject> arg1,
        ffi.Pointer<objc.ObjCObject> arg2) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(
                    ffi.Pointer<objc.ObjCObject> arg0,
                    ffi.Pointer<objc.ObjCObject> arg1,
                    ffi.Pointer<objc.ObjCObject> arg2)>>()
        .asFunction<
            void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>()(arg0, arg1, arg2);
final _ObjCBlock_ffiVoid_NSURLResponse_NSData_NSError_closureRegistry = <int,
    void Function(ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>)>{};
int _ObjCBlock_ffiVoid_NSURLResponse_NSData_NSError_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void>
    _ObjCBlock_ffiVoid_NSURLResponse_NSData_NSError_registerClosure(
        void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)
            fn) {
  final id =
      ++_ObjCBlock_ffiVoid_NSURLResponse_NSData_NSError_closureRegistryIndex;
  _ObjCBlock_ffiVoid_NSURLResponse_NSData_NSError_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

void _ObjCBlock_ffiVoid_NSURLResponse_NSData_NSError_closureTrampoline(
        ffi.Pointer<objc.ObjCBlock> block,
        ffi.Pointer<objc.ObjCObject> arg0,
        ffi.Pointer<objc.ObjCObject> arg1,
        ffi.Pointer<objc.ObjCObject> arg2) =>
    _ObjCBlock_ffiVoid_NSURLResponse_NSData_NSError_closureRegistry[
        block.ref.target.address]!(arg0, arg1, arg2);

class ObjCBlock_ffiVoid_NSURLResponse_NSData_NSError
    extends objc.ObjCBlockBase {
  ObjCBlock_ffiVoid_NSURLResponse_NSData_NSError._(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = true})
      : super(pointer, retain: retain, release: release);

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_ffiVoid_NSURLResponse_NSData_NSError castFromPointer(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = false}) {
    return ObjCBlock_ffiVoid_NSURLResponse_NSData_NSError._(pointer,
        retain: retain, release: release);
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSURLResponse_NSData_NSError.fromFunctionPointer(
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<objc.ObjCObject> arg0,
                      ffi.Pointer<objc.ObjCObject> arg1,
                      ffi.Pointer<objc.ObjCObject> arg2)>>
          ptr)
      : this._(objc.newBlock(
            _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<objc.ObjCObject>)>(
                    _ObjCBlock_ffiVoid_NSURLResponse_NSData_NSError_fnPtrTrampoline)
                .cast(),
            ptr.cast()));
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSURLResponse_NSData_NSError.fromFunction(
      void Function(NSURLResponse?, objc.NSData?, objc.NSError?) fn)
      : this._(objc.newBlock(
            _dartFuncTrampoline ??=
                ffi.Pointer.fromFunction<ffi.Void Function(ffi.Pointer<objc.ObjCBlock>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>(
                        _ObjCBlock_ffiVoid_NSURLResponse_NSData_NSError_closureTrampoline)
                    .cast(),
            _ObjCBlock_ffiVoid_NSURLResponse_NSData_NSError_registerClosure(
                (ffi.Pointer<objc.ObjCObject> arg0,
                        ffi.Pointer<objc.ObjCObject> arg1,
                        ffi.Pointer<objc.ObjCObject> arg2) =>
                    fn(
                        arg0.address == 0 ? null : NSURLResponse.castFromPointer(arg0, retain: true, release: true),
                        arg1.address == 0 ? null : objc.NSData.castFromPointer(arg1, retain: true, release: true),
                        arg2.address == 0 ? null : objc.NSError.castFromPointer(arg2, retain: true, release: true)))));
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_NSURLResponse_NSData_NSError.listener(
      void Function(NSURLResponse?, objc.NSData?, objc.NSError?) fn)
      : this._(objc.newBlock(
            (_dartFuncListenerTrampoline ??=
                    ffi.NativeCallable<ffi.Void Function(ffi.Pointer<objc.ObjCBlock>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>.listener(
                        _ObjCBlock_ffiVoid_NSURLResponse_NSData_NSError_closureTrampoline)
                      ..keepIsolateAlive = false)
                .nativeFunction
                .cast(),
            _ObjCBlock_ffiVoid_NSURLResponse_NSData_NSError_registerClosure(
                (ffi.Pointer<objc.ObjCObject> arg0,
                        ffi.Pointer<objc.ObjCObject> arg1,
                        ffi.Pointer<objc.ObjCObject> arg2) =>
                    fn(
                        arg0.address == 0
                            ? null
                            : NSURLResponse.castFromPointer(arg0, retain: true, release: true),
                        arg1.address == 0 ? null : objc.NSData.castFromPointer(arg1, retain: true, release: true),
                        arg2.address == 0 ? null : objc.NSError.castFromPointer(arg2, retain: true, release: true)))));
  static ffi.NativeCallable<
      ffi.Void Function(
          ffi.Pointer<objc.ObjCBlock>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCObject>)>? _dartFuncListenerTrampoline;

  void call(NSURLResponse? arg0, objc.NSData? arg1, objc.NSError? arg2) =>
      pointer.ref.invoke
              .cast<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<objc.ObjCBlock> block,
                          ffi.Pointer<objc.ObjCObject> arg0,
                          ffi.Pointer<objc.ObjCObject> arg1,
                          ffi.Pointer<objc.ObjCObject> arg2)>>()
              .asFunction<
                  void Function(
                      ffi.Pointer<objc.ObjCBlock>,
                      ffi.Pointer<objc.ObjCObject>,
                      ffi.Pointer<objc.ObjCObject>,
                      ffi.Pointer<objc.ObjCObject>)>()(
          pointer,
          arg0?.pointer ?? ffi.nullptr,
          arg1?.pointer ?? ffi.nullptr,
          arg2?.pointer ?? ffi.nullptr);
}

late final _sel_sendAsynchronousRequest_queue_completionHandler_ =
    objc.registerName("sendAsynchronousRequest:queue:completionHandler:");
final _objc_msgSend_541 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCBlock>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCBlock>)>();

class NSURLCredential extends objc.NSObject {
  NSURLCredential._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSURLCredential] that points to the same underlying object as [other].
  NSURLCredential.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSURLCredential] that wraps the given raw object pointer.
  NSURLCredential.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSURLCredential].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSURLCredential);
  }

  int get persistence {
    return _objc_msgSend_542(this.pointer, _sel_persistence);
  }

  NSURLCredential initWithUser_password_persistence_(
      objc.NSString user, objc.NSString password, int persistence) {
    final _ret = _objc_msgSend_543(
        this.pointer,
        _sel_initWithUser_password_persistence_,
        user.pointer,
        password.pointer,
        persistence);
    return NSURLCredential.castFromPointer(_ret, retain: true, release: true);
  }

  static NSURLCredential credentialWithUser_password_persistence_(
      objc.NSString user, objc.NSString password, int persistence) {
    final _ret = _objc_msgSend_544(
        _class_NSURLCredential,
        _sel_credentialWithUser_password_persistence_,
        user.pointer,
        password.pointer,
        persistence);
    return NSURLCredential.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSString? get user {
    final _ret = _objc_msgSend_13(this.pointer, _sel_user);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSString? get password {
    final _ret = _objc_msgSend_13(this.pointer, _sel_password);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  bool get hasPassword {
    return _objc_msgSend_7(this.pointer, _sel_hasPassword);
  }

  NSURLCredential initWithIdentity_certificates_persistence_(
      ffi.Pointer<__SecIdentity> identity,
      objc.NSArray? certArray,
      int persistence) {
    final _ret = _objc_msgSend_545(
        this.pointer,
        _sel_initWithIdentity_certificates_persistence_,
        identity,
        certArray?.pointer ?? ffi.nullptr,
        persistence);
    return NSURLCredential.castFromPointer(_ret, retain: true, release: true);
  }

  static NSURLCredential credentialWithIdentity_certificates_persistence_(
      ffi.Pointer<__SecIdentity> identity,
      objc.NSArray? certArray,
      int persistence) {
    final _ret = _objc_msgSend_546(
        _class_NSURLCredential,
        _sel_credentialWithIdentity_certificates_persistence_,
        identity,
        certArray?.pointer ?? ffi.nullptr,
        persistence);
    return NSURLCredential.castFromPointer(_ret, retain: true, release: true);
  }

  ffi.Pointer<__SecIdentity> get identity {
    return _objc_msgSend_547(this.pointer, _sel_identity);
  }

  objc.NSArray get certificates {
    final _ret = _objc_msgSend_6(this.pointer, _sel_certificates);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  NSURLCredential initWithTrust_(ffi.Pointer<__SecTrust> trust) {
    final _ret = _objc_msgSend_548(this.pointer, _sel_initWithTrust_, trust);
    return NSURLCredential.castFromPointer(_ret, retain: true, release: true);
  }

  static NSURLCredential credentialForTrust_(ffi.Pointer<__SecTrust> trust) {
    final _ret = _objc_msgSend_549(
        _class_NSURLCredential, _sel_credentialForTrust_, trust);
    return NSURLCredential.castFromPointer(_ret, retain: true, release: true);
  }

  @override
  NSURLCredential init() {
    final _ret = _objc_msgSend_40(this.pointer, _sel_init);
    return NSURLCredential.castFromPointer(_ret, retain: true, release: true);
  }

  static NSURLCredential new1() {
    final _ret = _objc_msgSend_40(_class_NSURLCredential, _sel_new);
    return NSURLCredential.castFromPointer(_ret, retain: false, release: true);
  }

  static NSURLCredential allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_47(_class_NSURLCredential, _sel_allocWithZone_, zone);
    return NSURLCredential.castFromPointer(_ret, retain: false, release: true);
  }

  static NSURLCredential alloc() {
    final _ret = _objc_msgSend_40(_class_NSURLCredential, _sel_alloc);
    return NSURLCredential.castFromPointer(_ret, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.NSObject aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.NSObject? anArgument) {
    _objc_msgSend_48(
        _class_NSURLCredential,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  static void cancelPreviousPerformRequestsWithTarget_(objc.NSObject aTarget) {
    _objc_msgSend_49(_class_NSURLCredential,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_7(
        _class_NSURLCredential, _sel_accessInstanceVariablesDirectly);
  }

  static bool useStoredAccessor() {
    return _objc_msgSend_7(_class_NSURLCredential, _sel_useStoredAccessor);
  }

  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_50(_class_NSURLCredential,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_51(_class_NSURLCredential,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_52(
        _class_NSURLCredential,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_6(
        _class_NSURLCredential, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSObject classForKeyedUnarchiver() {
    final _ret =
        _objc_msgSend_40(_class_NSURLCredential, _sel_classForKeyedUnarchiver);
    return objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }
}

late final _class_NSURLCredential = objc.getClass("NSURLCredential");

abstract class NSURLCredentialPersistence {
  static const int NSURLCredentialPersistenceNone = 0;
  static const int NSURLCredentialPersistenceForSession = 1;
  static const int NSURLCredentialPersistencePermanent = 2;
  static const int NSURLCredentialPersistenceSynchronizable = 3;
}

late final _sel_persistence = objc.registerName("persistence");
final _objc_msgSend_542 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Int32 Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_initWithUser_password_persistence_ =
    objc.registerName("initWithUser:password:persistence:");
final _objc_msgSend_543 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Int32)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            int)>();
late final _sel_credentialWithUser_password_persistence_ =
    objc.registerName("credentialWithUser:password:persistence:");
final _objc_msgSend_544 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Int32)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            int)>();
late final _sel_user = objc.registerName("user");
late final _sel_password = objc.registerName("password");
late final _sel_hasPassword = objc.registerName("hasPassword");

final class __SecIdentity extends ffi.Opaque {}

late final _sel_initWithIdentity_certificates_persistence_ =
    objc.registerName("initWithIdentity:certificates:persistence:");
final _objc_msgSend_545 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<__SecIdentity>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Int32)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<__SecIdentity>,
            ffi.Pointer<objc.ObjCObject>,
            int)>();
late final _sel_credentialWithIdentity_certificates_persistence_ =
    objc.registerName("credentialWithIdentity:certificates:persistence:");
final _objc_msgSend_546 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<__SecIdentity>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Int32)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<__SecIdentity>,
            ffi.Pointer<objc.ObjCObject>,
            int)>();
late final _sel_identity = objc.registerName("identity");
final _objc_msgSend_547 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<__SecIdentity> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<__SecIdentity> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_certificates = objc.registerName("certificates");

final class __SecTrust extends ffi.Opaque {}

late final _sel_initWithTrust_ = objc.registerName("initWithTrust:");
final _objc_msgSend_548 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<__SecTrust>)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<__SecTrust>)>();
late final _sel_credentialForTrust_ = objc.registerName("credentialForTrust:");
final _objc_msgSend_549 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<__SecTrust>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<__SecTrust>)>();

class NSURLProtectionSpace extends objc.NSObject {
  NSURLProtectionSpace._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSURLProtectionSpace] that points to the same underlying object as [other].
  NSURLProtectionSpace.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSURLProtectionSpace] that wraps the given raw object pointer.
  NSURLProtectionSpace.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSURLProtectionSpace].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSURLProtectionSpace);
  }

  NSURLProtectionSpace initWithHost_port_protocol_realm_authenticationMethod_(
      objc.NSString host,
      int port,
      objc.NSString? protocol,
      objc.NSString? realm,
      objc.NSString? authenticationMethod) {
    final _ret = _objc_msgSend_550(
        this.pointer,
        _sel_initWithHost_port_protocol_realm_authenticationMethod_,
        host.pointer,
        port,
        protocol?.pointer ?? ffi.nullptr,
        realm?.pointer ?? ffi.nullptr,
        authenticationMethod?.pointer ?? ffi.nullptr);
    return NSURLProtectionSpace.castFromPointer(_ret,
        retain: true, release: true);
  }

  NSURLProtectionSpace initWithProxyHost_port_type_realm_authenticationMethod_(
      objc.NSString host,
      int port,
      objc.NSString? type,
      objc.NSString? realm,
      objc.NSString? authenticationMethod) {
    final _ret = _objc_msgSend_550(
        this.pointer,
        _sel_initWithProxyHost_port_type_realm_authenticationMethod_,
        host.pointer,
        port,
        type?.pointer ?? ffi.nullptr,
        realm?.pointer ?? ffi.nullptr,
        authenticationMethod?.pointer ?? ffi.nullptr);
    return NSURLProtectionSpace.castFromPointer(_ret,
        retain: true, release: true);
  }

  objc.NSString? get realm {
    final _ret = _objc_msgSend_13(this.pointer, _sel_realm);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  bool get receivesCredentialSecurely {
    return _objc_msgSend_7(this.pointer, _sel_receivesCredentialSecurely);
  }

  bool get isProxy {
    return _objc_msgSend_7(this.pointer, _sel_isProxy);
  }

  objc.NSString get host {
    final _ret = _objc_msgSend_12(this.pointer, _sel_host);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  int get port {
    return _objc_msgSend_114(this.pointer, _sel_port);
  }

  objc.NSString? get proxyType {
    final _ret = _objc_msgSend_13(this.pointer, _sel_proxyType);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSString? get protocol {
    final _ret = _objc_msgSend_13(this.pointer, _sel_protocol);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSString get authenticationMethod {
    final _ret = _objc_msgSend_12(this.pointer, _sel_authenticationMethod);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSArray? get distinguishedNames {
    final _ret = _objc_msgSend_69(this.pointer, _sel_distinguishedNames);
    return _ret.address == 0
        ? null
        : objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  ffi.Pointer<__SecTrust> get serverTrust {
    return _objc_msgSend_551(this.pointer, _sel_serverTrust);
  }

  @override
  NSURLProtectionSpace init() {
    final _ret = _objc_msgSend_40(this.pointer, _sel_init);
    return NSURLProtectionSpace.castFromPointer(_ret,
        retain: true, release: true);
  }

  static NSURLProtectionSpace new1() {
    final _ret = _objc_msgSend_40(_class_NSURLProtectionSpace, _sel_new);
    return NSURLProtectionSpace.castFromPointer(_ret,
        retain: false, release: true);
  }

  static NSURLProtectionSpace allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_47(
        _class_NSURLProtectionSpace, _sel_allocWithZone_, zone);
    return NSURLProtectionSpace.castFromPointer(_ret,
        retain: false, release: true);
  }

  static NSURLProtectionSpace alloc() {
    final _ret = _objc_msgSend_40(_class_NSURLProtectionSpace, _sel_alloc);
    return NSURLProtectionSpace.castFromPointer(_ret,
        retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.NSObject aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.NSObject? anArgument) {
    _objc_msgSend_48(
        _class_NSURLProtectionSpace,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  static void cancelPreviousPerformRequestsWithTarget_(objc.NSObject aTarget) {
    _objc_msgSend_49(_class_NSURLProtectionSpace,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_7(
        _class_NSURLProtectionSpace, _sel_accessInstanceVariablesDirectly);
  }

  static bool useStoredAccessor() {
    return _objc_msgSend_7(_class_NSURLProtectionSpace, _sel_useStoredAccessor);
  }

  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_50(_class_NSURLProtectionSpace,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_51(_class_NSURLProtectionSpace,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_52(
        _class_NSURLProtectionSpace,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_6(
        _class_NSURLProtectionSpace, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSObject classForKeyedUnarchiver() {
    final _ret = _objc_msgSend_40(
        _class_NSURLProtectionSpace, _sel_classForKeyedUnarchiver);
    return objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }
}

late final _class_NSURLProtectionSpace = objc.getClass("NSURLProtectionSpace");
late final _sel_initWithHost_port_protocol_realm_authenticationMethod_ =
    objc.registerName("initWithHost:port:protocol:realm:authenticationMethod:");
final _objc_msgSend_550 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Long,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_initWithProxyHost_port_type_realm_authenticationMethod_ = objc
    .registerName("initWithProxyHost:port:type:realm:authenticationMethod:");
late final _sel_realm = objc.registerName("realm");
late final _sel_receivesCredentialSecurely =
    objc.registerName("receivesCredentialSecurely");
late final _sel_isProxy = objc.registerName("isProxy");
late final _sel_host = objc.registerName("host");
late final _sel_proxyType = objc.registerName("proxyType");
late final _sel_protocol = objc.registerName("protocol");
late final _sel_authenticationMethod =
    objc.registerName("authenticationMethod");
late final _sel_distinguishedNames = objc.registerName("distinguishedNames");
late final _sel_serverTrust = objc.registerName("serverTrust");
final _objc_msgSend_551 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<__SecTrust> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<__SecTrust> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();

class NSURLCredentialStorage extends objc.NSObject {
  NSURLCredentialStorage._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSURLCredentialStorage] that points to the same underlying object as [other].
  NSURLCredentialStorage.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSURLCredentialStorage] that wraps the given raw object pointer.
  NSURLCredentialStorage.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSURLCredentialStorage].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSURLCredentialStorage);
  }

  static NSURLCredentialStorage getSharedCredentialStorage() {
    final _ret = _objc_msgSend_552(
        _class_NSURLCredentialStorage, _sel_sharedCredentialStorage);
    return NSURLCredentialStorage.castFromPointer(_ret,
        retain: true, release: true);
  }

  objc.NSDictionary? credentialsForProtectionSpace_(
      NSURLProtectionSpace space) {
    final _ret = _objc_msgSend_553(
        this.pointer, _sel_credentialsForProtectionSpace_, space.pointer);
    return _ret.address == 0
        ? null
        : objc.NSDictionary.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSDictionary get allCredentials {
    final _ret = _objc_msgSend_112(this.pointer, _sel_allCredentials);
    return objc.NSDictionary.castFromPointer(_ret, retain: true, release: true);
  }

  void setCredential_forProtectionSpace_(
      NSURLCredential credential, NSURLProtectionSpace space) {
    _objc_msgSend_554(this.pointer, _sel_setCredential_forProtectionSpace_,
        credential.pointer, space.pointer);
  }

  void removeCredential_forProtectionSpace_(
      NSURLCredential credential, NSURLProtectionSpace space) {
    _objc_msgSend_554(this.pointer, _sel_removeCredential_forProtectionSpace_,
        credential.pointer, space.pointer);
  }

  void removeCredential_forProtectionSpace_options_(NSURLCredential credential,
      NSURLProtectionSpace space, objc.NSDictionary? options) {
    _objc_msgSend_555(
        this.pointer,
        _sel_removeCredential_forProtectionSpace_options_,
        credential.pointer,
        space.pointer,
        options?.pointer ?? ffi.nullptr);
  }

  NSURLCredential? defaultCredentialForProtectionSpace_(
      NSURLProtectionSpace space) {
    final _ret = _objc_msgSend_556(
        this.pointer, _sel_defaultCredentialForProtectionSpace_, space.pointer);
    return _ret.address == 0
        ? null
        : NSURLCredential.castFromPointer(_ret, retain: true, release: true);
  }

  void setDefaultCredential_forProtectionSpace_(
      NSURLCredential credential, NSURLProtectionSpace space) {
    _objc_msgSend_554(
        this.pointer,
        _sel_setDefaultCredential_forProtectionSpace_,
        credential.pointer,
        space.pointer);
  }

  void getCredentialsForProtectionSpace_task_completionHandler_(
      NSURLProtectionSpace protectionSpace,
      NSURLSessionTask task,
      ObjCBlock_ffiVoid_NSDictionary completionHandler) {
    _objc_msgSend_557(
        this.pointer,
        _sel_getCredentialsForProtectionSpace_task_completionHandler_,
        protectionSpace.pointer,
        task.pointer,
        completionHandler.pointer);
  }

  void setCredential_forProtectionSpace_task_(NSURLCredential credential,
      NSURLProtectionSpace protectionSpace, NSURLSessionTask task) {
    _objc_msgSend_558(this.pointer, _sel_setCredential_forProtectionSpace_task_,
        credential.pointer, protectionSpace.pointer, task.pointer);
  }

  void removeCredential_forProtectionSpace_options_task_(
      NSURLCredential credential,
      NSURLProtectionSpace protectionSpace,
      objc.NSDictionary? options,
      NSURLSessionTask task) {
    _objc_msgSend_559(
        this.pointer,
        _sel_removeCredential_forProtectionSpace_options_task_,
        credential.pointer,
        protectionSpace.pointer,
        options?.pointer ?? ffi.nullptr,
        task.pointer);
  }

  void getDefaultCredentialForProtectionSpace_task_completionHandler_(
      NSURLProtectionSpace space,
      NSURLSessionTask task,
      ObjCBlock_ffiVoid_NSURLCredential completionHandler) {
    _objc_msgSend_560(
        this.pointer,
        _sel_getDefaultCredentialForProtectionSpace_task_completionHandler_,
        space.pointer,
        task.pointer,
        completionHandler.pointer);
  }

  void setDefaultCredential_forProtectionSpace_task_(NSURLCredential credential,
      NSURLProtectionSpace protectionSpace, NSURLSessionTask task) {
    _objc_msgSend_558(
        this.pointer,
        _sel_setDefaultCredential_forProtectionSpace_task_,
        credential.pointer,
        protectionSpace.pointer,
        task.pointer);
  }

  @override
  NSURLCredentialStorage init() {
    final _ret = _objc_msgSend_40(this.pointer, _sel_init);
    return NSURLCredentialStorage.castFromPointer(_ret,
        retain: true, release: true);
  }

  static NSURLCredentialStorage new1() {
    final _ret = _objc_msgSend_40(_class_NSURLCredentialStorage, _sel_new);
    return NSURLCredentialStorage.castFromPointer(_ret,
        retain: false, release: true);
  }

  static NSURLCredentialStorage allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_47(
        _class_NSURLCredentialStorage, _sel_allocWithZone_, zone);
    return NSURLCredentialStorage.castFromPointer(_ret,
        retain: false, release: true);
  }

  static NSURLCredentialStorage alloc() {
    final _ret = _objc_msgSend_40(_class_NSURLCredentialStorage, _sel_alloc);
    return NSURLCredentialStorage.castFromPointer(_ret,
        retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.NSObject aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.NSObject? anArgument) {
    _objc_msgSend_48(
        _class_NSURLCredentialStorage,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  static void cancelPreviousPerformRequestsWithTarget_(objc.NSObject aTarget) {
    _objc_msgSend_49(_class_NSURLCredentialStorage,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_7(
        _class_NSURLCredentialStorage, _sel_accessInstanceVariablesDirectly);
  }

  static bool useStoredAccessor() {
    return _objc_msgSend_7(
        _class_NSURLCredentialStorage, _sel_useStoredAccessor);
  }

  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_50(_class_NSURLCredentialStorage,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_51(_class_NSURLCredentialStorage,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_52(
        _class_NSURLCredentialStorage,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_6(
        _class_NSURLCredentialStorage, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSObject classForKeyedUnarchiver() {
    final _ret = _objc_msgSend_40(
        _class_NSURLCredentialStorage, _sel_classForKeyedUnarchiver);
    return objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }
}

late final _class_NSURLCredentialStorage =
    objc.getClass("NSURLCredentialStorage");
late final _sel_sharedCredentialStorage =
    objc.registerName("sharedCredentialStorage");
final _objc_msgSend_552 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_credentialsForProtectionSpace_ =
    objc.registerName("credentialsForProtectionSpace:");
final _objc_msgSend_553 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_allCredentials = objc.registerName("allCredentials");
late final _sel_setCredential_forProtectionSpace_ =
    objc.registerName("setCredential:forProtectionSpace:");
final _objc_msgSend_554 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_removeCredential_forProtectionSpace_ =
    objc.registerName("removeCredential:forProtectionSpace:");
late final _sel_removeCredential_forProtectionSpace_options_ =
    objc.registerName("removeCredential:forProtectionSpace:options:");
final _objc_msgSend_555 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_defaultCredentialForProtectionSpace_ =
    objc.registerName("defaultCredentialForProtectionSpace:");
final _objc_msgSend_556 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_setDefaultCredential_forProtectionSpace_ =
    objc.registerName("setDefaultCredential:forProtectionSpace:");
void _ObjCBlock_ffiVoid_NSDictionary_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlock> block, ffi.Pointer<objc.ObjCObject> arg0) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0)>>()
        .asFunction<void Function(ffi.Pointer<objc.ObjCObject>)>()(arg0);
final _ObjCBlock_ffiVoid_NSDictionary_closureRegistry =
    <int, void Function(ffi.Pointer<objc.ObjCObject>)>{};
int _ObjCBlock_ffiVoid_NSDictionary_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void> _ObjCBlock_ffiVoid_NSDictionary_registerClosure(
    void Function(ffi.Pointer<objc.ObjCObject>) fn) {
  final id = ++_ObjCBlock_ffiVoid_NSDictionary_closureRegistryIndex;
  _ObjCBlock_ffiVoid_NSDictionary_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

void _ObjCBlock_ffiVoid_NSDictionary_closureTrampoline(
        ffi.Pointer<objc.ObjCBlock> block, ffi.Pointer<objc.ObjCObject> arg0) =>
    _ObjCBlock_ffiVoid_NSDictionary_closureRegistry[block.ref.target.address]!(
        arg0);

class ObjCBlock_ffiVoid_NSDictionary extends objc.ObjCBlockBase {
  ObjCBlock_ffiVoid_NSDictionary._(ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false, bool release = true})
      : super(pointer, retain: retain, release: release);

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_ffiVoid_NSDictionary castFromPointer(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = false}) {
    return ObjCBlock_ffiVoid_NSDictionary._(pointer,
        retain: retain, release: release);
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSDictionary.fromFunctionPointer(
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0)>>
          ptr)
      : this._(objc.newBlock(
            _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<objc.ObjCObject>)>(
                    _ObjCBlock_ffiVoid_NSDictionary_fnPtrTrampoline)
                .cast(),
            ptr.cast()));
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSDictionary.fromFunction(void Function(objc.NSDictionary?) fn)
      : this._(objc.newBlock(
            _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<objc.ObjCObject>)>(
                    _ObjCBlock_ffiVoid_NSDictionary_closureTrampoline)
                .cast(),
            _ObjCBlock_ffiVoid_NSDictionary_registerClosure(
                (ffi.Pointer<objc.ObjCObject> arg0) => fn(arg0.address == 0
                    ? null
                    : objc.NSDictionary.castFromPointer(arg0, retain: true, release: true)))));
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_NSDictionary.listener(void Function(objc.NSDictionary?) fn)
      : this._(objc.newBlock(
            (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                        ffi.Void Function(ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<objc.ObjCObject>)>.listener(
                    _ObjCBlock_ffiVoid_NSDictionary_closureTrampoline)
                  ..keepIsolateAlive = false)
                .nativeFunction
                .cast(),
            _ObjCBlock_ffiVoid_NSDictionary_registerClosure(
                (ffi.Pointer<objc.ObjCObject> arg0) => fn(arg0.address == 0
                    ? null
                    : objc.NSDictionary.castFromPointer(arg0, retain: true, release: true)))));
  static ffi.NativeCallable<
          ffi.Void Function(
              ffi.Pointer<objc.ObjCBlock>, ffi.Pointer<objc.ObjCObject>)>?
      _dartFuncListenerTrampoline;

  void call(objc.NSDictionary? arg0) => pointer.ref.invoke
          .cast<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<objc.ObjCBlock> block,
                      ffi.Pointer<objc.ObjCObject> arg0)>>()
          .asFunction<
              void Function(
                  ffi.Pointer<objc.ObjCBlock>, ffi.Pointer<objc.ObjCObject>)>()(
      pointer, arg0?.pointer ?? ffi.nullptr);
}

late final _sel_getCredentialsForProtectionSpace_task_completionHandler_ = objc
    .registerName("getCredentialsForProtectionSpace:task:completionHandler:");
final _objc_msgSend_557 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCBlock>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCBlock>)>();
late final _sel_setCredential_forProtectionSpace_task_ =
    objc.registerName("setCredential:forProtectionSpace:task:");
final _objc_msgSend_558 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_removeCredential_forProtectionSpace_options_task_ =
    objc.registerName("removeCredential:forProtectionSpace:options:task:");
final _objc_msgSend_559 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
void _ObjCBlock_ffiVoid_NSURLCredential_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlock> block, ffi.Pointer<objc.ObjCObject> arg0) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0)>>()
        .asFunction<void Function(ffi.Pointer<objc.ObjCObject>)>()(arg0);
final _ObjCBlock_ffiVoid_NSURLCredential_closureRegistry =
    <int, void Function(ffi.Pointer<objc.ObjCObject>)>{};
int _ObjCBlock_ffiVoid_NSURLCredential_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void> _ObjCBlock_ffiVoid_NSURLCredential_registerClosure(
    void Function(ffi.Pointer<objc.ObjCObject>) fn) {
  final id = ++_ObjCBlock_ffiVoid_NSURLCredential_closureRegistryIndex;
  _ObjCBlock_ffiVoid_NSURLCredential_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

void _ObjCBlock_ffiVoid_NSURLCredential_closureTrampoline(
        ffi.Pointer<objc.ObjCBlock> block, ffi.Pointer<objc.ObjCObject> arg0) =>
    _ObjCBlock_ffiVoid_NSURLCredential_closureRegistry[
        block.ref.target.address]!(arg0);

class ObjCBlock_ffiVoid_NSURLCredential extends objc.ObjCBlockBase {
  ObjCBlock_ffiVoid_NSURLCredential._(ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false, bool release = true})
      : super(pointer, retain: retain, release: release);

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_ffiVoid_NSURLCredential castFromPointer(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = false}) {
    return ObjCBlock_ffiVoid_NSURLCredential._(pointer,
        retain: retain, release: release);
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSURLCredential.fromFunctionPointer(
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0)>>
          ptr)
      : this._(objc.newBlock(
            _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<objc.ObjCObject>)>(
                    _ObjCBlock_ffiVoid_NSURLCredential_fnPtrTrampoline)
                .cast(),
            ptr.cast()));
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSURLCredential.fromFunction(
      void Function(NSURLCredential?) fn)
      : this._(objc.newBlock(
            _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<objc.ObjCObject>)>(
                    _ObjCBlock_ffiVoid_NSURLCredential_closureTrampoline)
                .cast(),
            _ObjCBlock_ffiVoid_NSURLCredential_registerClosure(
                (ffi.Pointer<objc.ObjCObject> arg0) => fn(arg0.address == 0
                    ? null
                    : NSURLCredential.castFromPointer(arg0, retain: true, release: true)))));
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_NSURLCredential.listener(void Function(NSURLCredential?) fn)
      : this._(objc.newBlock(
            (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                        ffi.Void Function(ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<objc.ObjCObject>)>.listener(
                    _ObjCBlock_ffiVoid_NSURLCredential_closureTrampoline)
                  ..keepIsolateAlive = false)
                .nativeFunction
                .cast(),
            _ObjCBlock_ffiVoid_NSURLCredential_registerClosure(
                (ffi.Pointer<objc.ObjCObject> arg0) => fn(arg0.address == 0
                    ? null
                    : NSURLCredential.castFromPointer(arg0, retain: true, release: true)))));
  static ffi.NativeCallable<
          ffi.Void Function(
              ffi.Pointer<objc.ObjCBlock>, ffi.Pointer<objc.ObjCObject>)>?
      _dartFuncListenerTrampoline;

  void call(NSURLCredential? arg0) => pointer.ref.invoke
          .cast<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<objc.ObjCBlock> block,
                      ffi.Pointer<objc.ObjCObject> arg0)>>()
          .asFunction<
              void Function(
                  ffi.Pointer<objc.ObjCBlock>, ffi.Pointer<objc.ObjCObject>)>()(
      pointer, arg0?.pointer ?? ffi.nullptr);
}

late final _sel_getDefaultCredentialForProtectionSpace_task_completionHandler_ =
    objc.registerName(
        "getDefaultCredentialForProtectionSpace:task:completionHandler:");
final _objc_msgSend_560 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCBlock>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCBlock>)>();
late final _sel_setDefaultCredential_forProtectionSpace_task_ =
    objc.registerName("setDefaultCredential:forProtectionSpace:task:");

class NSURLProtocol extends objc.NSObject {
  NSURLProtocol._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSURLProtocol] that points to the same underlying object as [other].
  NSURLProtocol.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSURLProtocol] that wraps the given raw object pointer.
  NSURLProtocol.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSURLProtocol].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSURLProtocol);
  }

  NSURLProtocol initWithRequest_cachedResponse_client_(NSURLRequest request,
      NSCachedURLResponse? cachedResponse, objc.NSObject? client) {
    final _ret = _objc_msgSend_561(
        this.pointer,
        _sel_initWithRequest_cachedResponse_client_,
        request.pointer,
        cachedResponse?.pointer ?? ffi.nullptr,
        client?.pointer ?? ffi.nullptr);
    return NSURLProtocol.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSObject? get client {
    final _ret = _objc_msgSend_66(this.pointer, _sel_client);
    return _ret.address == 0
        ? null
        : objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }

  NSURLRequest get request {
    final _ret = _objc_msgSend_537(this.pointer, _sel_request);
    return NSURLRequest.castFromPointer(_ret, retain: true, release: true);
  }

  NSCachedURLResponse? get cachedResponse {
    final _ret = _objc_msgSend_562(this.pointer, _sel_cachedResponse);
    return _ret.address == 0
        ? null
        : NSCachedURLResponse.castFromPointer(_ret,
            retain: true, release: true);
  }

  static bool canInitWithRequest_(NSURLRequest request) {
    return _objc_msgSend_539(
        _class_NSURLProtocol, _sel_canInitWithRequest_, request.pointer);
  }

  static NSURLRequest canonicalRequestForRequest_(NSURLRequest request) {
    final _ret = _objc_msgSend_563(_class_NSURLProtocol,
        _sel_canonicalRequestForRequest_, request.pointer);
    return NSURLRequest.castFromPointer(_ret, retain: true, release: true);
  }

  static bool requestIsCacheEquivalent_toRequest_(
      NSURLRequest a, NSURLRequest b) {
    return _objc_msgSend_564(_class_NSURLProtocol,
        _sel_requestIsCacheEquivalent_toRequest_, a.pointer, b.pointer);
  }

  void startLoading() {
    _objc_msgSend_82(this.pointer, _sel_startLoading);
  }

  void stopLoading() {
    _objc_msgSend_82(this.pointer, _sel_stopLoading);
  }

  static objc.NSObject? propertyForKey_inRequest_(
      objc.NSString key, NSURLRequest request) {
    final _ret = _objc_msgSend_565(_class_NSURLProtocol,
        _sel_propertyForKey_inRequest_, key.pointer, request.pointer);
    return _ret.address == 0
        ? null
        : objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }

  static void setProperty_forKey_inRequest_(
      objc.NSObject value, objc.NSString key, NSMutableURLRequest request) {
    _objc_msgSend_573(_class_NSURLProtocol, _sel_setProperty_forKey_inRequest_,
        value.pointer, key.pointer, request.pointer);
  }

  static void removePropertyForKey_inRequest_(
      objc.NSString key, NSMutableURLRequest request) {
    _objc_msgSend_574(_class_NSURLProtocol,
        _sel_removePropertyForKey_inRequest_, key.pointer, request.pointer);
  }

  static bool registerClass_(objc.NSObject protocolClass) {
    return _objc_msgSend_0(
        _class_NSURLProtocol, _sel_registerClass_, protocolClass.pointer);
  }

  static void unregisterClass_(objc.NSObject protocolClass) {
    _objc_msgSend_49(
        _class_NSURLProtocol, _sel_unregisterClass_, protocolClass.pointer);
  }

  static bool canInitWithTask_(NSURLSessionTask task) {
    return _objc_msgSend_575(
        _class_NSURLProtocol, _sel_canInitWithTask_, task.pointer);
  }

  NSURLProtocol initWithTask_cachedResponse_client_(NSURLSessionTask task,
      NSCachedURLResponse? cachedResponse, objc.NSObject? client) {
    final _ret = _objc_msgSend_576(
        this.pointer,
        _sel_initWithTask_cachedResponse_client_,
        task.pointer,
        cachedResponse?.pointer ?? ffi.nullptr,
        client?.pointer ?? ffi.nullptr);
    return NSURLProtocol.castFromPointer(_ret, retain: true, release: true);
  }

  NSURLSessionTask? get task {
    final _ret = _objc_msgSend_577(this.pointer, _sel_task);
    return _ret.address == 0
        ? null
        : NSURLSessionTask.castFromPointer(_ret, retain: true, release: true);
  }

  @override
  NSURLProtocol init() {
    final _ret = _objc_msgSend_40(this.pointer, _sel_init);
    return NSURLProtocol.castFromPointer(_ret, retain: true, release: true);
  }

  static NSURLProtocol new1() {
    final _ret = _objc_msgSend_40(_class_NSURLProtocol, _sel_new);
    return NSURLProtocol.castFromPointer(_ret, retain: false, release: true);
  }

  static NSURLProtocol allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_47(_class_NSURLProtocol, _sel_allocWithZone_, zone);
    return NSURLProtocol.castFromPointer(_ret, retain: false, release: true);
  }

  static NSURLProtocol alloc() {
    final _ret = _objc_msgSend_40(_class_NSURLProtocol, _sel_alloc);
    return NSURLProtocol.castFromPointer(_ret, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.NSObject aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.NSObject? anArgument) {
    _objc_msgSend_48(
        _class_NSURLProtocol,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  static void cancelPreviousPerformRequestsWithTarget_(objc.NSObject aTarget) {
    _objc_msgSend_49(_class_NSURLProtocol,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_7(
        _class_NSURLProtocol, _sel_accessInstanceVariablesDirectly);
  }

  static bool useStoredAccessor() {
    return _objc_msgSend_7(_class_NSURLProtocol, _sel_useStoredAccessor);
  }

  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_50(_class_NSURLProtocol,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_51(_class_NSURLProtocol,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_52(
        _class_NSURLProtocol,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_6(
        _class_NSURLProtocol, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSObject classForKeyedUnarchiver() {
    final _ret =
        _objc_msgSend_40(_class_NSURLProtocol, _sel_classForKeyedUnarchiver);
    return objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }
}

late final _class_NSURLProtocol = objc.getClass("NSURLProtocol");
late final _sel_initWithRequest_cachedResponse_client_ =
    objc.registerName("initWithRequest:cachedResponse:client:");
final _objc_msgSend_561 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_client = objc.registerName("client");
late final _sel_request = objc.registerName("request");
late final _sel_cachedResponse = objc.registerName("cachedResponse");
final _objc_msgSend_562 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_canInitWithRequest_ = objc.registerName("canInitWithRequest:");
late final _sel_canonicalRequestForRequest_ =
    objc.registerName("canonicalRequestForRequest:");
final _objc_msgSend_563 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_requestIsCacheEquivalent_toRequest_ =
    objc.registerName("requestIsCacheEquivalent:toRequest:");
final _objc_msgSend_564 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_startLoading = objc.registerName("startLoading");
late final _sel_stopLoading = objc.registerName("stopLoading");
late final _sel_propertyForKey_inRequest_ =
    objc.registerName("propertyForKey:inRequest:");
final _objc_msgSend_565 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();

class NSMutableURLRequest extends NSURLRequest {
  NSMutableURLRequest._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSMutableURLRequest] that points to the same underlying object as [other].
  NSMutableURLRequest.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSMutableURLRequest] that wraps the given raw object pointer.
  NSMutableURLRequest.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSMutableURLRequest].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSMutableURLRequest);
  }

  @override
  objc.NSURL? get URL {
    final _ret = _objc_msgSend_10(this.pointer, _sel_URL);
    return _ret.address == 0
        ? null
        : objc.NSURL.castFromPointer(_ret, retain: true, release: true);
  }

  set URL(objc.NSURL? value) {
    return _objc_msgSend_566(
        this.pointer, _sel_setURL_, value?.pointer ?? ffi.nullptr);
  }

  @override
  int get cachePolicy {
    return _objc_msgSend_322(this.pointer, _sel_cachePolicy);
  }

  set cachePolicy(int value) {
    return _objc_msgSend_567(this.pointer, _sel_setCachePolicy_, value);
  }

  @override
  double get timeoutInterval {
    return objc.useMsgSendVariants
        ? _objc_msgSend_115Fpret(this.pointer, _sel_timeoutInterval)
        : _objc_msgSend_115(this.pointer, _sel_timeoutInterval);
  }

  set timeoutInterval(double value) {
    return _objc_msgSend_212(this.pointer, _sel_setTimeoutInterval_, value);
  }

  @override
  objc.NSURL? get mainDocumentURL {
    final _ret = _objc_msgSend_10(this.pointer, _sel_mainDocumentURL);
    return _ret.address == 0
        ? null
        : objc.NSURL.castFromPointer(_ret, retain: true, release: true);
  }

  set mainDocumentURL(objc.NSURL? value) {
    return _objc_msgSend_566(
        this.pointer, _sel_setMainDocumentURL_, value?.pointer ?? ffi.nullptr);
  }

  @override
  int get networkServiceType {
    return _objc_msgSend_323(this.pointer, _sel_networkServiceType);
  }

  set networkServiceType(int value) {
    return _objc_msgSend_568(this.pointer, _sel_setNetworkServiceType_, value);
  }

  @override
  bool get allowsCellularAccess {
    return _objc_msgSend_7(this.pointer, _sel_allowsCellularAccess);
  }

  set allowsCellularAccess(bool value) {
    return _objc_msgSend_41(this.pointer, _sel_setAllowsCellularAccess_, value);
  }

  @override
  bool get allowsExpensiveNetworkAccess {
    return _objc_msgSend_7(this.pointer, _sel_allowsExpensiveNetworkAccess);
  }

  set allowsExpensiveNetworkAccess(bool value) {
    return _objc_msgSend_41(
        this.pointer, _sel_setAllowsExpensiveNetworkAccess_, value);
  }

  @override
  bool get allowsConstrainedNetworkAccess {
    return _objc_msgSend_7(this.pointer, _sel_allowsConstrainedNetworkAccess);
  }

  set allowsConstrainedNetworkAccess(bool value) {
    return _objc_msgSend_41(
        this.pointer, _sel_setAllowsConstrainedNetworkAccess_, value);
  }

  @override
  bool get assumesHTTP3Capable {
    return _objc_msgSend_7(this.pointer, _sel_assumesHTTP3Capable);
  }

  set assumesHTTP3Capable(bool value) {
    return _objc_msgSend_41(this.pointer, _sel_setAssumesHTTP3Capable_, value);
  }

  @override
  int get attribution {
    return _objc_msgSend_324(this.pointer, _sel_attribution);
  }

  set attribution(int value) {
    return _objc_msgSend_569(this.pointer, _sel_setAttribution_, value);
  }

  @override
  bool get requiresDNSSECValidation {
    return _objc_msgSend_7(this.pointer, _sel_requiresDNSSECValidation);
  }

  set requiresDNSSECValidation(bool value) {
    return _objc_msgSend_41(
        this.pointer, _sel_setRequiresDNSSECValidation_, value);
  }

  objc.NSString get HTTPMethod {
    final _ret = _objc_msgSend_12(this.pointer, _sel_HTTPMethod);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  set HTTPMethod(objc.NSString value) {
    return _objc_msgSend_99(this.pointer, _sel_setHTTPMethod_, value.pointer);
  }

  @override
  objc.NSDictionary? get allHTTPHeaderFields {
    final _ret = _objc_msgSend_65(this.pointer, _sel_allHTTPHeaderFields);
    return _ret.address == 0
        ? null
        : objc.NSDictionary.castFromPointer(_ret, retain: true, release: true);
  }

  set allHTTPHeaderFields(objc.NSDictionary? value) {
    return _objc_msgSend_173(this.pointer, _sel_setAllHTTPHeaderFields_,
        value?.pointer ?? ffi.nullptr);
  }

  void setValue_forHTTPHeaderField_(objc.NSString? value, objc.NSString field) {
    _objc_msgSend_570(this.pointer, _sel_setValue_forHTTPHeaderField_,
        value?.pointer ?? ffi.nullptr, field.pointer);
  }

  void addValue_forHTTPHeaderField_(objc.NSString value, objc.NSString field) {
    _objc_msgSend_201(this.pointer, _sel_addValue_forHTTPHeaderField_,
        value.pointer, field.pointer);
  }

  @override
  objc.NSData? get HTTPBody {
    final _ret = _objc_msgSend_325(this.pointer, _sel_HTTPBody);
    return _ret.address == 0
        ? null
        : objc.NSData.castFromPointer(_ret, retain: true, release: true);
  }

  set HTTPBody(objc.NSData? value) {
    return _objc_msgSend_571(
        this.pointer, _sel_setHTTPBody_, value?.pointer ?? ffi.nullptr);
  }

  @override
  NSInputStream? get HTTPBodyStream {
    final _ret = _objc_msgSend_342(this.pointer, _sel_HTTPBodyStream);
    return _ret.address == 0
        ? null
        : NSInputStream.castFromPointer(_ret, retain: true, release: true);
  }

  set HTTPBodyStream(NSInputStream? value) {
    return _objc_msgSend_572(
        this.pointer, _sel_setHTTPBodyStream_, value?.pointer ?? ffi.nullptr);
  }

  @override
  bool get HTTPShouldHandleCookies {
    return _objc_msgSend_7(this.pointer, _sel_HTTPShouldHandleCookies);
  }

  set HTTPShouldHandleCookies(bool value) {
    return _objc_msgSend_41(
        this.pointer, _sel_setHTTPShouldHandleCookies_, value);
  }

  @override
  bool get HTTPShouldUsePipelining {
    return _objc_msgSend_7(this.pointer, _sel_HTTPShouldUsePipelining);
  }

  set HTTPShouldUsePipelining(bool value) {
    return _objc_msgSend_41(
        this.pointer, _sel_setHTTPShouldUsePipelining_, value);
  }

  static NSMutableURLRequest requestWithURL_(objc.NSURL URL) {
    final _ret = _objc_msgSend_320(
        _class_NSMutableURLRequest, _sel_requestWithURL_, URL.pointer);
    return NSMutableURLRequest.castFromPointer(_ret,
        retain: true, release: true);
  }

  static bool getSupportsSecureCoding() {
    return _objc_msgSend_7(
        _class_NSMutableURLRequest, _sel_supportsSecureCoding);
  }

  static NSMutableURLRequest requestWithURL_cachePolicy_timeoutInterval_(
      objc.NSURL URL, int cachePolicy, double timeoutInterval) {
    final _ret = _objc_msgSend_321(
        _class_NSMutableURLRequest,
        _sel_requestWithURL_cachePolicy_timeoutInterval_,
        URL.pointer,
        cachePolicy,
        timeoutInterval);
    return NSMutableURLRequest.castFromPointer(_ret,
        retain: true, release: true);
  }

  @override
  NSMutableURLRequest initWithURL_(objc.NSURL URL) {
    final _ret =
        _objc_msgSend_320(this.pointer, _sel_initWithURL_, URL.pointer);
    return NSMutableURLRequest.castFromPointer(_ret,
        retain: true, release: true);
  }

  @override
  NSMutableURLRequest initWithURL_cachePolicy_timeoutInterval_(
      objc.NSURL URL, int cachePolicy, double timeoutInterval) {
    final _ret = _objc_msgSend_321(
        this.pointer,
        _sel_initWithURL_cachePolicy_timeoutInterval_,
        URL.pointer,
        cachePolicy,
        timeoutInterval);
    return NSMutableURLRequest.castFromPointer(_ret,
        retain: true, release: true);
  }

  @override
  NSMutableURLRequest init() {
    final _ret = _objc_msgSend_40(this.pointer, _sel_init);
    return NSMutableURLRequest.castFromPointer(_ret,
        retain: true, release: true);
  }

  static NSMutableURLRequest new1() {
    final _ret = _objc_msgSend_40(_class_NSMutableURLRequest, _sel_new);
    return NSMutableURLRequest.castFromPointer(_ret,
        retain: false, release: true);
  }

  static NSMutableURLRequest allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_47(_class_NSMutableURLRequest, _sel_allocWithZone_, zone);
    return NSMutableURLRequest.castFromPointer(_ret,
        retain: false, release: true);
  }

  static NSMutableURLRequest alloc() {
    final _ret = _objc_msgSend_40(_class_NSMutableURLRequest, _sel_alloc);
    return NSMutableURLRequest.castFromPointer(_ret,
        retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.NSObject aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.NSObject? anArgument) {
    _objc_msgSend_48(
        _class_NSMutableURLRequest,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  static void cancelPreviousPerformRequestsWithTarget_(objc.NSObject aTarget) {
    _objc_msgSend_49(_class_NSMutableURLRequest,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_7(
        _class_NSMutableURLRequest, _sel_accessInstanceVariablesDirectly);
  }

  static bool useStoredAccessor() {
    return _objc_msgSend_7(_class_NSMutableURLRequest, _sel_useStoredAccessor);
  }

  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_50(_class_NSMutableURLRequest,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_51(_class_NSMutableURLRequest,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_52(
        _class_NSMutableURLRequest,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_6(
        _class_NSMutableURLRequest, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSObject classForKeyedUnarchiver() {
    final _ret = _objc_msgSend_40(
        _class_NSMutableURLRequest, _sel_classForKeyedUnarchiver);
    return objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }
}

late final _class_NSMutableURLRequest = objc.getClass("NSMutableURLRequest");
late final _sel_setURL_ = objc.registerName("setURL:");
final _objc_msgSend_566 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_setCachePolicy_ = objc.registerName("setCachePolicy:");
final _objc_msgSend_567 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Int32)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_setTimeoutInterval_ = objc.registerName("setTimeoutInterval:");
late final _sel_setMainDocumentURL_ = objc.registerName("setMainDocumentURL:");
late final _sel_setNetworkServiceType_ =
    objc.registerName("setNetworkServiceType:");
final _objc_msgSend_568 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Int32)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_setAllowsCellularAccess_ =
    objc.registerName("setAllowsCellularAccess:");
late final _sel_setAllowsExpensiveNetworkAccess_ =
    objc.registerName("setAllowsExpensiveNetworkAccess:");
late final _sel_setAllowsConstrainedNetworkAccess_ =
    objc.registerName("setAllowsConstrainedNetworkAccess:");
late final _sel_setAssumesHTTP3Capable_ =
    objc.registerName("setAssumesHTTP3Capable:");
late final _sel_setAttribution_ = objc.registerName("setAttribution:");
final _objc_msgSend_569 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Int32)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_setRequiresDNSSECValidation_ =
    objc.registerName("setRequiresDNSSECValidation:");
late final _sel_setHTTPMethod_ = objc.registerName("setHTTPMethod:");
late final _sel_setAllHTTPHeaderFields_ =
    objc.registerName("setAllHTTPHeaderFields:");
late final _sel_setValue_forHTTPHeaderField_ =
    objc.registerName("setValue:forHTTPHeaderField:");
final _objc_msgSend_570 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_addValue_forHTTPHeaderField_ =
    objc.registerName("addValue:forHTTPHeaderField:");
late final _sel_setHTTPBody_ = objc.registerName("setHTTPBody:");
final _objc_msgSend_571 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_setHTTPBodyStream_ = objc.registerName("setHTTPBodyStream:");
final _objc_msgSend_572 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_setHTTPShouldHandleCookies_ =
    objc.registerName("setHTTPShouldHandleCookies:");
late final _sel_setHTTPShouldUsePipelining_ =
    objc.registerName("setHTTPShouldUsePipelining:");
late final _sel_setProperty_forKey_inRequest_ =
    objc.registerName("setProperty:forKey:inRequest:");
final _objc_msgSend_573 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_removePropertyForKey_inRequest_ =
    objc.registerName("removePropertyForKey:inRequest:");
final _objc_msgSend_574 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_registerClass_ = objc.registerName("registerClass:");
late final _sel_unregisterClass_ = objc.registerName("unregisterClass:");
late final _sel_canInitWithTask_ = objc.registerName("canInitWithTask:");
final _objc_msgSend_575 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        bool Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_initWithTask_cachedResponse_client_ =
    objc.registerName("initWithTask:cachedResponse:client:");
final _objc_msgSend_576 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_task = objc.registerName("task");
final _objc_msgSend_577 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();

class NSXMLParser extends objc.NSObject {
  NSXMLParser._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSXMLParser] that points to the same underlying object as [other].
  NSXMLParser.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSXMLParser] that wraps the given raw object pointer.
  NSXMLParser.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSXMLParser].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSXMLParser);
  }

  NSXMLParser? initWithContentsOfURL_(objc.NSURL url) {
    final _ret =
        _objc_msgSend_3(this.pointer, _sel_initWithContentsOfURL_, url.pointer);
    return _ret.address == 0
        ? null
        : NSXMLParser.castFromPointer(_ret, retain: true, release: true);
  }

  NSXMLParser initWithData_(objc.NSData data) {
    final _ret =
        _objc_msgSend_340(this.pointer, _sel_initWithData_, data.pointer);
    return NSXMLParser.castFromPointer(_ret, retain: true, release: true);
  }

  NSXMLParser initWithStream_(NSInputStream stream) {
    final _ret =
        _objc_msgSend_578(this.pointer, _sel_initWithStream_, stream.pointer);
    return NSXMLParser.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSObject? get delegate {
    final _ret = _objc_msgSend_66(this.pointer, _sel_delegate);
    return _ret.address == 0
        ? null
        : objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }

  set delegate(objc.NSObject? value) {
    return _objc_msgSend_188(
        this.pointer, _sel_setDelegate_, value?.pointer ?? ffi.nullptr);
  }

  bool get shouldProcessNamespaces {
    return _objc_msgSend_7(this.pointer, _sel_shouldProcessNamespaces);
  }

  set shouldProcessNamespaces(bool value) {
    return _objc_msgSend_41(
        this.pointer, _sel_setShouldProcessNamespaces_, value);
  }

  bool get shouldReportNamespacePrefixes {
    return _objc_msgSend_7(this.pointer, _sel_shouldReportNamespacePrefixes);
  }

  set shouldReportNamespacePrefixes(bool value) {
    return _objc_msgSend_41(
        this.pointer, _sel_setShouldReportNamespacePrefixes_, value);
  }

  int get externalEntityResolvingPolicy {
    return _objc_msgSend_579(this.pointer, _sel_externalEntityResolvingPolicy);
  }

  set externalEntityResolvingPolicy(int value) {
    return _objc_msgSend_580(
        this.pointer, _sel_setExternalEntityResolvingPolicy_, value);
  }

  objc.NSSet? get allowedExternalEntityURLs {
    final _ret =
        _objc_msgSend_581(this.pointer, _sel_allowedExternalEntityURLs);
    return _ret.address == 0
        ? null
        : objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  set allowedExternalEntityURLs(objc.NSSet? value) {
    return _objc_msgSend_582(this.pointer, _sel_setAllowedExternalEntityURLs_,
        value?.pointer ?? ffi.nullptr);
  }

  bool parse() {
    return _objc_msgSend_7(this.pointer, _sel_parse);
  }

  void abortParsing() {
    _objc_msgSend_82(this.pointer, _sel_abortParsing);
  }

  objc.NSError? get parserError {
    final _ret = _objc_msgSend_328(this.pointer, _sel_parserError);
    return _ret.address == 0
        ? null
        : objc.NSError.castFromPointer(_ret, retain: true, release: true);
  }

  bool get shouldResolveExternalEntities {
    return _objc_msgSend_7(this.pointer, _sel_shouldResolveExternalEntities);
  }

  set shouldResolveExternalEntities(bool value) {
    return _objc_msgSend_41(
        this.pointer, _sel_setShouldResolveExternalEntities_, value);
  }

  objc.NSString? get publicID {
    final _ret = _objc_msgSend_13(this.pointer, _sel_publicID);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSString? get systemID {
    final _ret = _objc_msgSend_13(this.pointer, _sel_systemID);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  int get lineNumber {
    return _objc_msgSend_114(this.pointer, _sel_lineNumber);
  }

  int get columnNumber {
    return _objc_msgSend_114(this.pointer, _sel_columnNumber);
  }

  @override
  NSXMLParser init() {
    final _ret = _objc_msgSend_40(this.pointer, _sel_init);
    return NSXMLParser.castFromPointer(_ret, retain: true, release: true);
  }

  static NSXMLParser new1() {
    final _ret = _objc_msgSend_40(_class_NSXMLParser, _sel_new);
    return NSXMLParser.castFromPointer(_ret, retain: false, release: true);
  }

  static NSXMLParser allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_47(_class_NSXMLParser, _sel_allocWithZone_, zone);
    return NSXMLParser.castFromPointer(_ret, retain: false, release: true);
  }

  static NSXMLParser alloc() {
    final _ret = _objc_msgSend_40(_class_NSXMLParser, _sel_alloc);
    return NSXMLParser.castFromPointer(_ret, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.NSObject aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.NSObject? anArgument) {
    _objc_msgSend_48(
        _class_NSXMLParser,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  static void cancelPreviousPerformRequestsWithTarget_(objc.NSObject aTarget) {
    _objc_msgSend_49(_class_NSXMLParser,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_7(
        _class_NSXMLParser, _sel_accessInstanceVariablesDirectly);
  }

  static bool useStoredAccessor() {
    return _objc_msgSend_7(_class_NSXMLParser, _sel_useStoredAccessor);
  }

  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_50(_class_NSXMLParser,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_51(_class_NSXMLParser,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_52(
        _class_NSXMLParser,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_6(
        _class_NSXMLParser, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSObject classForKeyedUnarchiver() {
    final _ret =
        _objc_msgSend_40(_class_NSXMLParser, _sel_classForKeyedUnarchiver);
    return objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }
}

late final _class_NSXMLParser = objc.getClass("NSXMLParser");
late final _sel_initWithContentsOfURL_ =
    objc.registerName("initWithContentsOfURL:");
late final _sel_initWithStream_ = objc.registerName("initWithStream:");
final _objc_msgSend_578 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_shouldProcessNamespaces =
    objc.registerName("shouldProcessNamespaces");
late final _sel_setShouldProcessNamespaces_ =
    objc.registerName("setShouldProcessNamespaces:");
late final _sel_shouldReportNamespacePrefixes =
    objc.registerName("shouldReportNamespacePrefixes");
late final _sel_setShouldReportNamespacePrefixes_ =
    objc.registerName("setShouldReportNamespacePrefixes:");

abstract class NSXMLParserExternalEntityResolvingPolicy {
  static const int NSXMLParserResolveExternalEntitiesNever = 0;
  static const int NSXMLParserResolveExternalEntitiesNoNetwork = 1;
  static const int NSXMLParserResolveExternalEntitiesSameOriginOnly = 2;
  static const int NSXMLParserResolveExternalEntitiesAlways = 3;
}

late final _sel_externalEntityResolvingPolicy =
    objc.registerName("externalEntityResolvingPolicy");
final _objc_msgSend_579 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Int32 Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setExternalEntityResolvingPolicy_ =
    objc.registerName("setExternalEntityResolvingPolicy:");
final _objc_msgSend_580 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Int32)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_allowedExternalEntityURLs =
    objc.registerName("allowedExternalEntityURLs");
final _objc_msgSend_581 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setAllowedExternalEntityURLs_ =
    objc.registerName("setAllowedExternalEntityURLs:");
final _objc_msgSend_582 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_parse = objc.registerName("parse");
late final _sel_abortParsing = objc.registerName("abortParsing");
late final _sel_parserError = objc.registerName("parserError");
late final _sel_shouldResolveExternalEntities =
    objc.registerName("shouldResolveExternalEntities");
late final _sel_setShouldResolveExternalEntities_ =
    objc.registerName("setShouldResolveExternalEntities:");
late final _sel_publicID = objc.registerName("publicID");
late final _sel_systemID = objc.registerName("systemID");
late final _sel_lineNumber = objc.registerName("lineNumber");
late final _sel_columnNumber = objc.registerName("columnNumber");

class NSFileWrapper extends objc.NSObject {
  NSFileWrapper._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSFileWrapper] that points to the same underlying object as [other].
  NSFileWrapper.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSFileWrapper] that wraps the given raw object pointer.
  NSFileWrapper.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSFileWrapper].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSFileWrapper);
  }

  NSFileWrapper? initWithURL_options_error_(objc.NSURL url, int options,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError) {
    final _ret = _objc_msgSend_583(this.pointer,
        _sel_initWithURL_options_error_, url.pointer, options, outError);
    return _ret.address == 0
        ? null
        : NSFileWrapper.castFromPointer(_ret, retain: true, release: true);
  }

  NSFileWrapper initDirectoryWithFileWrappers_(
      objc.NSDictionary childrenByPreferredName) {
    final _ret = _objc_msgSend_409(this.pointer,
        _sel_initDirectoryWithFileWrappers_, childrenByPreferredName.pointer);
    return NSFileWrapper.castFromPointer(_ret, retain: true, release: true);
  }

  NSFileWrapper initRegularFileWithContents_(objc.NSData contents) {
    final _ret = _objc_msgSend_340(
        this.pointer, _sel_initRegularFileWithContents_, contents.pointer);
    return NSFileWrapper.castFromPointer(_ret, retain: true, release: true);
  }

  NSFileWrapper initSymbolicLinkWithDestinationURL_(objc.NSURL url) {
    final _ret = _objc_msgSend_320(
        this.pointer, _sel_initSymbolicLinkWithDestinationURL_, url.pointer);
    return NSFileWrapper.castFromPointer(_ret, retain: true, release: true);
  }

  NSFileWrapper? initWithSerializedRepresentation_(
      objc.NSData serializeRepresentation) {
    final _ret = _objc_msgSend_341(
        this.pointer,
        _sel_initWithSerializedRepresentation_,
        serializeRepresentation.pointer);
    return _ret.address == 0
        ? null
        : NSFileWrapper.castFromPointer(_ret, retain: true, release: true);
  }

  NSFileWrapper? initWithCoder_(objc.NSCoder inCoder) {
    final _ret =
        _objc_msgSend_231(this.pointer, _sel_initWithCoder_, inCoder.pointer);
    return _ret.address == 0
        ? null
        : NSFileWrapper.castFromPointer(_ret, retain: true, release: true);
  }

  bool get directory {
    return _objc_msgSend_7(this.pointer, _sel_isDirectory);
  }

  bool get regularFile {
    return _objc_msgSend_7(this.pointer, _sel_isRegularFile);
  }

  bool get symbolicLink {
    return _objc_msgSend_7(this.pointer, _sel_isSymbolicLink);
  }

  objc.NSString? get preferredFilename {
    final _ret = _objc_msgSend_13(this.pointer, _sel_preferredFilename);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  set preferredFilename(objc.NSString? value) {
    return _objc_msgSend_46(this.pointer, _sel_setPreferredFilename_,
        value?.pointer ?? ffi.nullptr);
  }

  objc.NSString? get filename {
    final _ret = _objc_msgSend_13(this.pointer, _sel_filename);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  set filename(objc.NSString? value) {
    return _objc_msgSend_46(
        this.pointer, _sel_setFilename_, value?.pointer ?? ffi.nullptr);
  }

  objc.NSDictionary get fileAttributes {
    final _ret = _objc_msgSend_112(this.pointer, _sel_fileAttributes);
    return objc.NSDictionary.castFromPointer(_ret, retain: true, release: true);
  }

  set fileAttributes(objc.NSDictionary value) {
    return _objc_msgSend_113(
        this.pointer, _sel_setFileAttributes_, value.pointer);
  }

  bool matchesContentsOfURL_(objc.NSURL url) {
    return _objc_msgSend_305(
        this.pointer, _sel_matchesContentsOfURL_, url.pointer);
  }

  bool readFromURL_options_error_(objc.NSURL url, int options,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError) {
    return _objc_msgSend_584(this.pointer, _sel_readFromURL_options_error_,
        url.pointer, options, outError);
  }

  bool writeToURL_options_originalContentsURL_error_(
      objc.NSURL url,
      int options,
      objc.NSURL? originalContentsURL,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError) {
    return _objc_msgSend_585(
        this.pointer,
        _sel_writeToURL_options_originalContentsURL_error_,
        url.pointer,
        options,
        originalContentsURL?.pointer ?? ffi.nullptr,
        outError);
  }

  objc.NSData? get serializedRepresentation {
    final _ret = _objc_msgSend_325(this.pointer, _sel_serializedRepresentation);
    return _ret.address == 0
        ? null
        : objc.NSData.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSString addFileWrapper_(NSFileWrapper child) {
    final _ret =
        _objc_msgSend_586(this.pointer, _sel_addFileWrapper_, child.pointer);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSString addRegularFileWithContents_preferredFilename_(
      objc.NSData data, objc.NSString fileName) {
    final _ret = _objc_msgSend_587(
        this.pointer,
        _sel_addRegularFileWithContents_preferredFilename_,
        data.pointer,
        fileName.pointer);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  void removeFileWrapper_(NSFileWrapper child) {
    _objc_msgSend_588(this.pointer, _sel_removeFileWrapper_, child.pointer);
  }

  objc.NSDictionary? get fileWrappers {
    final _ret = _objc_msgSend_65(this.pointer, _sel_fileWrappers);
    return _ret.address == 0
        ? null
        : objc.NSDictionary.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSString? keyForFileWrapper_(NSFileWrapper child) {
    final _ret =
        _objc_msgSend_589(this.pointer, _sel_keyForFileWrapper_, child.pointer);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSData? get regularFileContents {
    final _ret = _objc_msgSend_325(this.pointer, _sel_regularFileContents);
    return _ret.address == 0
        ? null
        : objc.NSData.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSURL? get symbolicLinkDestinationURL {
    final _ret =
        _objc_msgSend_10(this.pointer, _sel_symbolicLinkDestinationURL);
    return _ret.address == 0
        ? null
        : objc.NSURL.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSObject? initWithPath_(objc.NSString path) {
    final _ret =
        _objc_msgSend_2(this.pointer, _sel_initWithPath_, path.pointer);
    return _ret.address == 0
        ? null
        : objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSObject initSymbolicLinkWithDestination_(objc.NSString path) {
    final _ret = _objc_msgSend_35(
        this.pointer, _sel_initSymbolicLinkWithDestination_, path.pointer);
    return objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }

  bool needsToBeUpdatedFromPath_(objc.NSString path) {
    return _objc_msgSend_51(
        this.pointer, _sel_needsToBeUpdatedFromPath_, path.pointer);
  }

  bool updateFromPath_(objc.NSString path) {
    return _objc_msgSend_51(this.pointer, _sel_updateFromPath_, path.pointer);
  }

  bool writeToFile_atomically_updateFilenames_(
      objc.NSString path, bool atomicFlag, bool updateFilenamesFlag) {
    return _objc_msgSend_590(
        this.pointer,
        _sel_writeToFile_atomically_updateFilenames_,
        path.pointer,
        atomicFlag,
        updateFilenamesFlag);
  }

  objc.NSString addFileWithPath_(objc.NSString path) {
    final _ret =
        _objc_msgSend_297(this.pointer, _sel_addFileWithPath_, path.pointer);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSString addSymbolicLinkWithDestination_preferredFilename_(
      objc.NSString path, objc.NSString filename) {
    final _ret = _objc_msgSend_591(
        this.pointer,
        _sel_addSymbolicLinkWithDestination_preferredFilename_,
        path.pointer,
        filename.pointer);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSString symbolicLinkDestination() {
    final _ret = _objc_msgSend_12(this.pointer, _sel_symbolicLinkDestination);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  @override
  NSFileWrapper init() {
    final _ret = _objc_msgSend_40(this.pointer, _sel_init);
    return NSFileWrapper.castFromPointer(_ret, retain: true, release: true);
  }

  static NSFileWrapper new1() {
    final _ret = _objc_msgSend_40(_class_NSFileWrapper, _sel_new);
    return NSFileWrapper.castFromPointer(_ret, retain: false, release: true);
  }

  static NSFileWrapper allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_47(_class_NSFileWrapper, _sel_allocWithZone_, zone);
    return NSFileWrapper.castFromPointer(_ret, retain: false, release: true);
  }

  static NSFileWrapper alloc() {
    final _ret = _objc_msgSend_40(_class_NSFileWrapper, _sel_alloc);
    return NSFileWrapper.castFromPointer(_ret, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.NSObject aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.NSObject? anArgument) {
    _objc_msgSend_48(
        _class_NSFileWrapper,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  static void cancelPreviousPerformRequestsWithTarget_(objc.NSObject aTarget) {
    _objc_msgSend_49(_class_NSFileWrapper,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_7(
        _class_NSFileWrapper, _sel_accessInstanceVariablesDirectly);
  }

  static bool useStoredAccessor() {
    return _objc_msgSend_7(_class_NSFileWrapper, _sel_useStoredAccessor);
  }

  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_50(_class_NSFileWrapper,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_51(_class_NSFileWrapper,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_52(
        _class_NSFileWrapper,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_6(
        _class_NSFileWrapper, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSObject classForKeyedUnarchiver() {
    final _ret =
        _objc_msgSend_40(_class_NSFileWrapper, _sel_classForKeyedUnarchiver);
    return objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }
}

late final _class_NSFileWrapper = objc.getClass("NSFileWrapper");

abstract class NSFileWrapperReadingOptions {
  static const int NSFileWrapperReadingImmediate = 1;
  static const int NSFileWrapperReadingWithoutMapping = 2;
}

late final _sel_initWithURL_options_error_ =
    objc.registerName("initWithURL:options:error:");
final _objc_msgSend_583 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Int32,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_initDirectoryWithFileWrappers_ =
    objc.registerName("initDirectoryWithFileWrappers:");
late final _sel_initRegularFileWithContents_ =
    objc.registerName("initRegularFileWithContents:");
late final _sel_initSymbolicLinkWithDestinationURL_ =
    objc.registerName("initSymbolicLinkWithDestinationURL:");
late final _sel_initWithSerializedRepresentation_ =
    objc.registerName("initWithSerializedRepresentation:");
late final _sel_isDirectory = objc.registerName("isDirectory");
late final _sel_isRegularFile = objc.registerName("isRegularFile");
late final _sel_isSymbolicLink = objc.registerName("isSymbolicLink");
late final _sel_preferredFilename = objc.registerName("preferredFilename");
late final _sel_setPreferredFilename_ =
    objc.registerName("setPreferredFilename:");
late final _sel_filename = objc.registerName("filename");
late final _sel_setFilename_ = objc.registerName("setFilename:");
late final _sel_fileAttributes = objc.registerName("fileAttributes");
late final _sel_setFileAttributes_ = objc.registerName("setFileAttributes:");
late final _sel_matchesContentsOfURL_ =
    objc.registerName("matchesContentsOfURL:");
late final _sel_readFromURL_options_error_ =
    objc.registerName("readFromURL:options:error:");
final _objc_msgSend_584 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Int32,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();

abstract class NSFileWrapperWritingOptions {
  static const int NSFileWrapperWritingAtomic = 1;
  static const int NSFileWrapperWritingWithNameUpdating = 2;
}

late final _sel_writeToURL_options_originalContentsURL_error_ =
    objc.registerName("writeToURL:options:originalContentsURL:error:");
final _objc_msgSend_585 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Int32,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_serializedRepresentation =
    objc.registerName("serializedRepresentation");
late final _sel_addFileWrapper_ = objc.registerName("addFileWrapper:");
final _objc_msgSend_586 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_addRegularFileWithContents_preferredFilename_ =
    objc.registerName("addRegularFileWithContents:preferredFilename:");
final _objc_msgSend_587 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_removeFileWrapper_ = objc.registerName("removeFileWrapper:");
final _objc_msgSend_588 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_fileWrappers = objc.registerName("fileWrappers");
late final _sel_keyForFileWrapper_ = objc.registerName("keyForFileWrapper:");
final _objc_msgSend_589 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_regularFileContents = objc.registerName("regularFileContents");
late final _sel_symbolicLinkDestinationURL =
    objc.registerName("symbolicLinkDestinationURL");
late final _sel_initSymbolicLinkWithDestination_ =
    objc.registerName("initSymbolicLinkWithDestination:");
late final _sel_needsToBeUpdatedFromPath_ =
    objc.registerName("needsToBeUpdatedFromPath:");
late final _sel_updateFromPath_ = objc.registerName("updateFromPath:");
late final _sel_writeToFile_atomically_updateFilenames_ =
    objc.registerName("writeToFile:atomically:updateFilenames:");
final _objc_msgSend_590 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Bool,
                ffi.Bool)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            bool,
            bool)>();
late final _sel_addFileWithPath_ = objc.registerName("addFileWithPath:");
late final _sel_addSymbolicLinkWithDestination_preferredFilename_ =
    objc.registerName("addSymbolicLinkWithDestination:preferredFilename:");
final _objc_msgSend_591 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_symbolicLinkDestination =
    objc.registerName("symbolicLinkDestination");

class NSURLSession extends objc.NSObject {
  NSURLSession._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSURLSession] that points to the same underlying object as [other].
  NSURLSession.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSURLSession] that wraps the given raw object pointer.
  NSURLSession.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSURLSession].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSURLSession);
  }

  static NSURLSession getSharedSession() {
    final _ret = _objc_msgSend_592(_class_NSURLSession, _sel_sharedSession);
    return NSURLSession.castFromPointer(_ret, retain: true, release: true);
  }

  static NSURLSession sessionWithConfiguration_(
      NSURLSessionConfiguration configuration) {
    final _ret = _objc_msgSend_608(_class_NSURLSession,
        _sel_sessionWithConfiguration_, configuration.pointer);
    return NSURLSession.castFromPointer(_ret, retain: true, release: true);
  }

  static NSURLSession sessionWithConfiguration_delegate_delegateQueue_(
      NSURLSessionConfiguration configuration,
      objc.NSObject? delegate,
      NSOperationQueue? queue) {
    final _ret = _objc_msgSend_609(
        _class_NSURLSession,
        _sel_sessionWithConfiguration_delegate_delegateQueue_,
        configuration.pointer,
        delegate?.pointer ?? ffi.nullptr,
        queue?.pointer ?? ffi.nullptr);
    return NSURLSession.castFromPointer(_ret, retain: true, release: true);
  }

  NSOperationQueue get delegateQueue {
    final _ret = _objc_msgSend_460(this.pointer, _sel_delegateQueue);
    return NSOperationQueue.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSObject? get delegate {
    final _ret = _objc_msgSend_66(this.pointer, _sel_delegate);
    return _ret.address == 0
        ? null
        : objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }

  NSURLSessionConfiguration get configuration {
    final _ret = _objc_msgSend_593(this.pointer, _sel_configuration);
    return NSURLSessionConfiguration.castFromPointer(_ret,
        retain: true, release: true);
  }

  objc.NSString? get sessionDescription {
    final _ret = _objc_msgSend_13(this.pointer, _sel_sessionDescription);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  set sessionDescription(objc.NSString? value) {
    return _objc_msgSend_46(this.pointer, _sel_setSessionDescription_,
        value?.pointer ?? ffi.nullptr);
  }

  void finishTasksAndInvalidate() {
    _objc_msgSend_82(this.pointer, _sel_finishTasksAndInvalidate);
  }

  void invalidateAndCancel() {
    _objc_msgSend_82(this.pointer, _sel_invalidateAndCancel);
  }

  void resetWithCompletionHandler_(ObjCBlock_ffiVoid completionHandler) {
    _objc_msgSend_249(this.pointer, _sel_resetWithCompletionHandler_,
        completionHandler.pointer);
  }

  void flushWithCompletionHandler_(ObjCBlock_ffiVoid completionHandler) {
    _objc_msgSend_249(this.pointer, _sel_flushWithCompletionHandler_,
        completionHandler.pointer);
  }

  void getTasksWithCompletionHandler_(
      ObjCBlock_ffiVoid_NSArray_NSArray_NSArray completionHandler) {
    _objc_msgSend_610(this.pointer, _sel_getTasksWithCompletionHandler_,
        completionHandler.pointer);
  }

  void getAllTasksWithCompletionHandler_(
      ObjCBlock_ffiVoid_NSArray1 completionHandler) {
    _objc_msgSend_611(this.pointer, _sel_getAllTasksWithCompletionHandler_,
        completionHandler.pointer);
  }

  NSURLSessionDataTask dataTaskWithRequest_(NSURLRequest request) {
    final _ret = _objc_msgSend_612(
        this.pointer, _sel_dataTaskWithRequest_, request.pointer);
    return NSURLSessionDataTask.castFromPointer(_ret,
        retain: true, release: true);
  }

  NSURLSessionDataTask dataTaskWithURL_(objc.NSURL url) {
    final _ret =
        _objc_msgSend_613(this.pointer, _sel_dataTaskWithURL_, url.pointer);
    return NSURLSessionDataTask.castFromPointer(_ret,
        retain: true, release: true);
  }

  NSURLSessionUploadTask uploadTaskWithRequest_fromFile_(
      NSURLRequest request, objc.NSURL fileURL) {
    final _ret = _objc_msgSend_615(this.pointer,
        _sel_uploadTaskWithRequest_fromFile_, request.pointer, fileURL.pointer);
    return NSURLSessionUploadTask.castFromPointer(_ret,
        retain: true, release: true);
  }

  NSURLSessionUploadTask uploadTaskWithRequest_fromData_(
      NSURLRequest request, objc.NSData bodyData) {
    final _ret = _objc_msgSend_616(
        this.pointer,
        _sel_uploadTaskWithRequest_fromData_,
        request.pointer,
        bodyData.pointer);
    return NSURLSessionUploadTask.castFromPointer(_ret,
        retain: true, release: true);
  }

  NSURLSessionUploadTask uploadTaskWithResumeData_(objc.NSData resumeData) {
    final _ret = _objc_msgSend_617(
        this.pointer, _sel_uploadTaskWithResumeData_, resumeData.pointer);
    return NSURLSessionUploadTask.castFromPointer(_ret,
        retain: true, release: true);
  }

  NSURLSessionUploadTask uploadTaskWithStreamedRequest_(NSURLRequest request) {
    final _ret = _objc_msgSend_618(
        this.pointer, _sel_uploadTaskWithStreamedRequest_, request.pointer);
    return NSURLSessionUploadTask.castFromPointer(_ret,
        retain: true, release: true);
  }

  NSURLSessionDownloadTask downloadTaskWithRequest_(NSURLRequest request) {
    final _ret = _objc_msgSend_619(
        this.pointer, _sel_downloadTaskWithRequest_, request.pointer);
    return NSURLSessionDownloadTask.castFromPointer(_ret,
        retain: true, release: true);
  }

  NSURLSessionDownloadTask downloadTaskWithURL_(objc.NSURL url) {
    final _ret =
        _objc_msgSend_620(this.pointer, _sel_downloadTaskWithURL_, url.pointer);
    return NSURLSessionDownloadTask.castFromPointer(_ret,
        retain: true, release: true);
  }

  NSURLSessionDownloadTask downloadTaskWithResumeData_(objc.NSData resumeData) {
    final _ret = _objc_msgSend_621(
        this.pointer, _sel_downloadTaskWithResumeData_, resumeData.pointer);
    return NSURLSessionDownloadTask.castFromPointer(_ret,
        retain: true, release: true);
  }

  NSURLSessionStreamTask streamTaskWithHostName_port_(
      objc.NSString hostname, int port) {
    final _ret = _objc_msgSend_624(this.pointer,
        _sel_streamTaskWithHostName_port_, hostname.pointer, port);
    return NSURLSessionStreamTask.castFromPointer(_ret,
        retain: true, release: true);
  }

  NSURLSessionStreamTask streamTaskWithNetService_(NSNetService service) {
    final _ret = _objc_msgSend_633(
        this.pointer, _sel_streamTaskWithNetService_, service.pointer);
    return NSURLSessionStreamTask.castFromPointer(_ret,
        retain: true, release: true);
  }

  NSURLSessionWebSocketTask webSocketTaskWithURL_(objc.NSURL url) {
    final _ret = _objc_msgSend_640(
        this.pointer, _sel_webSocketTaskWithURL_, url.pointer);
    return NSURLSessionWebSocketTask.castFromPointer(_ret,
        retain: true, release: true);
  }

  NSURLSessionWebSocketTask webSocketTaskWithURL_protocols_(
      objc.NSURL url, objc.NSArray protocols) {
    final _ret = _objc_msgSend_641(this.pointer,
        _sel_webSocketTaskWithURL_protocols_, url.pointer, protocols.pointer);
    return NSURLSessionWebSocketTask.castFromPointer(_ret,
        retain: true, release: true);
  }

  NSURLSessionWebSocketTask webSocketTaskWithRequest_(NSURLRequest request) {
    final _ret = _objc_msgSend_642(
        this.pointer, _sel_webSocketTaskWithRequest_, request.pointer);
    return NSURLSessionWebSocketTask.castFromPointer(_ret,
        retain: true, release: true);
  }

  @override
  NSURLSession init() {
    final _ret = _objc_msgSend_40(this.pointer, _sel_init);
    return NSURLSession.castFromPointer(_ret, retain: true, release: true);
  }

  static NSURLSession new1() {
    final _ret = _objc_msgSend_40(_class_NSURLSession, _sel_new);
    return NSURLSession.castFromPointer(_ret, retain: false, release: true);
  }

  NSURLSessionDataTask dataTaskWithRequest_completionHandler_(
      NSURLRequest request,
      ObjCBlock_ffiVoid_NSData_NSURLResponse_NSError completionHandler) {
    final _ret = _objc_msgSend_643(
        this.pointer,
        _sel_dataTaskWithRequest_completionHandler_,
        request.pointer,
        completionHandler.pointer);
    return NSURLSessionDataTask.castFromPointer(_ret,
        retain: true, release: true);
  }

  NSURLSessionDataTask dataTaskWithURL_completionHandler_(objc.NSURL url,
      ObjCBlock_ffiVoid_NSData_NSURLResponse_NSError completionHandler) {
    final _ret = _objc_msgSend_644(
        this.pointer,
        _sel_dataTaskWithURL_completionHandler_,
        url.pointer,
        completionHandler.pointer);
    return NSURLSessionDataTask.castFromPointer(_ret,
        retain: true, release: true);
  }

  NSURLSessionUploadTask uploadTaskWithRequest_fromFile_completionHandler_(
      NSURLRequest request,
      objc.NSURL fileURL,
      ObjCBlock_ffiVoid_NSData_NSURLResponse_NSError completionHandler) {
    final _ret = _objc_msgSend_645(
        this.pointer,
        _sel_uploadTaskWithRequest_fromFile_completionHandler_,
        request.pointer,
        fileURL.pointer,
        completionHandler.pointer);
    return NSURLSessionUploadTask.castFromPointer(_ret,
        retain: true, release: true);
  }

  NSURLSessionUploadTask uploadTaskWithRequest_fromData_completionHandler_(
      NSURLRequest request,
      objc.NSData? bodyData,
      ObjCBlock_ffiVoid_NSData_NSURLResponse_NSError completionHandler) {
    final _ret = _objc_msgSend_646(
        this.pointer,
        _sel_uploadTaskWithRequest_fromData_completionHandler_,
        request.pointer,
        bodyData?.pointer ?? ffi.nullptr,
        completionHandler.pointer);
    return NSURLSessionUploadTask.castFromPointer(_ret,
        retain: true, release: true);
  }

  NSURLSessionUploadTask uploadTaskWithResumeData_completionHandler_(
      objc.NSData resumeData,
      ObjCBlock_ffiVoid_NSData_NSURLResponse_NSError completionHandler) {
    final _ret = _objc_msgSend_647(
        this.pointer,
        _sel_uploadTaskWithResumeData_completionHandler_,
        resumeData.pointer,
        completionHandler.pointer);
    return NSURLSessionUploadTask.castFromPointer(_ret,
        retain: true, release: true);
  }

  NSURLSessionDownloadTask downloadTaskWithRequest_completionHandler_(
      NSURLRequest request,
      ObjCBlock_ffiVoid_NSURL_NSURLResponse_NSError completionHandler) {
    final _ret = _objc_msgSend_648(
        this.pointer,
        _sel_downloadTaskWithRequest_completionHandler_,
        request.pointer,
        completionHandler.pointer);
    return NSURLSessionDownloadTask.castFromPointer(_ret,
        retain: true, release: true);
  }

  NSURLSessionDownloadTask downloadTaskWithURL_completionHandler_(
      objc.NSURL url,
      ObjCBlock_ffiVoid_NSURL_NSURLResponse_NSError completionHandler) {
    final _ret = _objc_msgSend_649(
        this.pointer,
        _sel_downloadTaskWithURL_completionHandler_,
        url.pointer,
        completionHandler.pointer);
    return NSURLSessionDownloadTask.castFromPointer(_ret,
        retain: true, release: true);
  }

  NSURLSessionDownloadTask downloadTaskWithResumeData_completionHandler_(
      objc.NSData resumeData,
      ObjCBlock_ffiVoid_NSURL_NSURLResponse_NSError completionHandler) {
    final _ret = _objc_msgSend_650(
        this.pointer,
        _sel_downloadTaskWithResumeData_completionHandler_,
        resumeData.pointer,
        completionHandler.pointer);
    return NSURLSessionDownloadTask.castFromPointer(_ret,
        retain: true, release: true);
  }

  static NSURLSession allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_47(_class_NSURLSession, _sel_allocWithZone_, zone);
    return NSURLSession.castFromPointer(_ret, retain: false, release: true);
  }

  static NSURLSession alloc() {
    final _ret = _objc_msgSend_40(_class_NSURLSession, _sel_alloc);
    return NSURLSession.castFromPointer(_ret, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.NSObject aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.NSObject? anArgument) {
    _objc_msgSend_48(
        _class_NSURLSession,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  static void cancelPreviousPerformRequestsWithTarget_(objc.NSObject aTarget) {
    _objc_msgSend_49(_class_NSURLSession,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_7(
        _class_NSURLSession, _sel_accessInstanceVariablesDirectly);
  }

  static bool useStoredAccessor() {
    return _objc_msgSend_7(_class_NSURLSession, _sel_useStoredAccessor);
  }

  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_50(_class_NSURLSession,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_51(_class_NSURLSession,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_52(
        _class_NSURLSession,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_6(
        _class_NSURLSession, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSObject classForKeyedUnarchiver() {
    final _ret =
        _objc_msgSend_40(_class_NSURLSession, _sel_classForKeyedUnarchiver);
    return objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }
}

late final _class_NSURLSession = objc.getClass("NSURLSession");
late final _sel_sharedSession = objc.registerName("sharedSession");
final _objc_msgSend_592 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();

class NSURLSessionConfiguration extends objc.NSObject {
  NSURLSessionConfiguration._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSURLSessionConfiguration] that points to the same underlying object as [other].
  NSURLSessionConfiguration.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSURLSessionConfiguration] that wraps the given raw object pointer.
  NSURLSessionConfiguration.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSURLSessionConfiguration].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSURLSessionConfiguration);
  }

  static NSURLSessionConfiguration getDefaultSessionConfiguration() {
    final _ret = _objc_msgSend_593(
        _class_NSURLSessionConfiguration, _sel_defaultSessionConfiguration);
    return NSURLSessionConfiguration.castFromPointer(_ret,
        retain: true, release: true);
  }

  static NSURLSessionConfiguration getEphemeralSessionConfiguration() {
    final _ret = _objc_msgSend_593(
        _class_NSURLSessionConfiguration, _sel_ephemeralSessionConfiguration);
    return NSURLSessionConfiguration.castFromPointer(_ret,
        retain: true, release: true);
  }

  static NSURLSessionConfiguration
      backgroundSessionConfigurationWithIdentifier_(objc.NSString identifier) {
    final _ret = _objc_msgSend_594(_class_NSURLSessionConfiguration,
        _sel_backgroundSessionConfigurationWithIdentifier_, identifier.pointer);
    return NSURLSessionConfiguration.castFromPointer(_ret,
        retain: true, release: true);
  }

  objc.NSString? get identifier {
    final _ret = _objc_msgSend_13(this.pointer, _sel_identifier);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  int get requestCachePolicy {
    return _objc_msgSend_322(this.pointer, _sel_requestCachePolicy);
  }

  set requestCachePolicy(int value) {
    return _objc_msgSend_567(this.pointer, _sel_setRequestCachePolicy_, value);
  }

  double get timeoutIntervalForRequest {
    return objc.useMsgSendVariants
        ? _objc_msgSend_115Fpret(this.pointer, _sel_timeoutIntervalForRequest)
        : _objc_msgSend_115(this.pointer, _sel_timeoutIntervalForRequest);
  }

  set timeoutIntervalForRequest(double value) {
    return _objc_msgSend_212(
        this.pointer, _sel_setTimeoutIntervalForRequest_, value);
  }

  double get timeoutIntervalForResource {
    return objc.useMsgSendVariants
        ? _objc_msgSend_115Fpret(this.pointer, _sel_timeoutIntervalForResource)
        : _objc_msgSend_115(this.pointer, _sel_timeoutIntervalForResource);
  }

  set timeoutIntervalForResource(double value) {
    return _objc_msgSend_212(
        this.pointer, _sel_setTimeoutIntervalForResource_, value);
  }

  int get networkServiceType {
    return _objc_msgSend_323(this.pointer, _sel_networkServiceType);
  }

  set networkServiceType(int value) {
    return _objc_msgSend_568(this.pointer, _sel_setNetworkServiceType_, value);
  }

  bool get allowsCellularAccess {
    return _objc_msgSend_7(this.pointer, _sel_allowsCellularAccess);
  }

  set allowsCellularAccess(bool value) {
    return _objc_msgSend_41(this.pointer, _sel_setAllowsCellularAccess_, value);
  }

  bool get allowsExpensiveNetworkAccess {
    return _objc_msgSend_7(this.pointer, _sel_allowsExpensiveNetworkAccess);
  }

  set allowsExpensiveNetworkAccess(bool value) {
    return _objc_msgSend_41(
        this.pointer, _sel_setAllowsExpensiveNetworkAccess_, value);
  }

  bool get allowsConstrainedNetworkAccess {
    return _objc_msgSend_7(this.pointer, _sel_allowsConstrainedNetworkAccess);
  }

  set allowsConstrainedNetworkAccess(bool value) {
    return _objc_msgSend_41(
        this.pointer, _sel_setAllowsConstrainedNetworkAccess_, value);
  }

  bool get requiresDNSSECValidation {
    return _objc_msgSend_7(this.pointer, _sel_requiresDNSSECValidation);
  }

  set requiresDNSSECValidation(bool value) {
    return _objc_msgSend_41(
        this.pointer, _sel_setRequiresDNSSECValidation_, value);
  }

  bool get waitsForConnectivity {
    return _objc_msgSend_7(this.pointer, _sel_waitsForConnectivity);
  }

  set waitsForConnectivity(bool value) {
    return _objc_msgSend_41(this.pointer, _sel_setWaitsForConnectivity_, value);
  }

  bool get discretionary {
    return _objc_msgSend_7(this.pointer, _sel_isDiscretionary);
  }

  set discretionary(bool value) {
    return _objc_msgSend_41(this.pointer, _sel_setDiscretionary_, value);
  }

  objc.NSString? get sharedContainerIdentifier {
    final _ret = _objc_msgSend_13(this.pointer, _sel_sharedContainerIdentifier);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  set sharedContainerIdentifier(objc.NSString? value) {
    return _objc_msgSend_46(this.pointer, _sel_setSharedContainerIdentifier_,
        value?.pointer ?? ffi.nullptr);
  }

  bool get sessionSendsLaunchEvents {
    return _objc_msgSend_7(this.pointer, _sel_sessionSendsLaunchEvents);
  }

  set sessionSendsLaunchEvents(bool value) {
    return _objc_msgSend_41(
        this.pointer, _sel_setSessionSendsLaunchEvents_, value);
  }

  objc.NSDictionary? get connectionProxyDictionary {
    final _ret = _objc_msgSend_65(this.pointer, _sel_connectionProxyDictionary);
    return _ret.address == 0
        ? null
        : objc.NSDictionary.castFromPointer(_ret, retain: true, release: true);
  }

  set connectionProxyDictionary(objc.NSDictionary? value) {
    return _objc_msgSend_173(this.pointer, _sel_setConnectionProxyDictionary_,
        value?.pointer ?? ffi.nullptr);
  }

  int get TLSMinimumSupportedProtocol {
    return _objc_msgSend_595(this.pointer, _sel_TLSMinimumSupportedProtocol);
  }

  set TLSMinimumSupportedProtocol(int value) {
    return _objc_msgSend_596(
        this.pointer, _sel_setTLSMinimumSupportedProtocol_, value);
  }

  int get TLSMaximumSupportedProtocol {
    return _objc_msgSend_595(this.pointer, _sel_TLSMaximumSupportedProtocol);
  }

  set TLSMaximumSupportedProtocol(int value) {
    return _objc_msgSend_596(
        this.pointer, _sel_setTLSMaximumSupportedProtocol_, value);
  }

  int get TLSMinimumSupportedProtocolVersion {
    return _objc_msgSend_597(
        this.pointer, _sel_TLSMinimumSupportedProtocolVersion);
  }

  set TLSMinimumSupportedProtocolVersion(int value) {
    return _objc_msgSend_598(
        this.pointer, _sel_setTLSMinimumSupportedProtocolVersion_, value);
  }

  int get TLSMaximumSupportedProtocolVersion {
    return _objc_msgSend_597(
        this.pointer, _sel_TLSMaximumSupportedProtocolVersion);
  }

  set TLSMaximumSupportedProtocolVersion(int value) {
    return _objc_msgSend_598(
        this.pointer, _sel_setTLSMaximumSupportedProtocolVersion_, value);
  }

  bool get HTTPShouldUsePipelining {
    return _objc_msgSend_7(this.pointer, _sel_HTTPShouldUsePipelining);
  }

  set HTTPShouldUsePipelining(bool value) {
    return _objc_msgSend_41(
        this.pointer, _sel_setHTTPShouldUsePipelining_, value);
  }

  bool get HTTPShouldSetCookies {
    return _objc_msgSend_7(this.pointer, _sel_HTTPShouldSetCookies);
  }

  set HTTPShouldSetCookies(bool value) {
    return _objc_msgSend_41(this.pointer, _sel_setHTTPShouldSetCookies_, value);
  }

  int get HTTPCookieAcceptPolicy {
    return _objc_msgSend_318(this.pointer, _sel_HTTPCookieAcceptPolicy);
  }

  set HTTPCookieAcceptPolicy(int value) {
    return _objc_msgSend_319(
        this.pointer, _sel_setHTTPCookieAcceptPolicy_, value);
  }

  objc.NSDictionary? get HTTPAdditionalHeaders {
    final _ret = _objc_msgSend_65(this.pointer, _sel_HTTPAdditionalHeaders);
    return _ret.address == 0
        ? null
        : objc.NSDictionary.castFromPointer(_ret, retain: true, release: true);
  }

  set HTTPAdditionalHeaders(objc.NSDictionary? value) {
    return _objc_msgSend_173(this.pointer, _sel_setHTTPAdditionalHeaders_,
        value?.pointer ?? ffi.nullptr);
  }

  int get HTTPMaximumConnectionsPerHost {
    return _objc_msgSend_114(this.pointer, _sel_HTTPMaximumConnectionsPerHost);
  }

  set HTTPMaximumConnectionsPerHost(int value) {
    return _objc_msgSend_134(
        this.pointer, _sel_setHTTPMaximumConnectionsPerHost_, value);
  }

  NSHTTPCookieStorage? get HTTPCookieStorage {
    final _ret = _objc_msgSend_599(this.pointer, _sel_HTTPCookieStorage);
    return _ret.address == 0
        ? null
        : NSHTTPCookieStorage.castFromPointer(_ret,
            retain: true, release: true);
  }

  set HTTPCookieStorage(NSHTTPCookieStorage? value) {
    return _objc_msgSend_600(this.pointer, _sel_setHTTPCookieStorage_,
        value?.pointer ?? ffi.nullptr);
  }

  NSURLCredentialStorage? get URLCredentialStorage {
    final _ret = _objc_msgSend_601(this.pointer, _sel_URLCredentialStorage);
    return _ret.address == 0
        ? null
        : NSURLCredentialStorage.castFromPointer(_ret,
            retain: true, release: true);
  }

  set URLCredentialStorage(NSURLCredentialStorage? value) {
    return _objc_msgSend_602(this.pointer, _sel_setURLCredentialStorage_,
        value?.pointer ?? ffi.nullptr);
  }

  NSURLCache? get URLCache {
    final _ret = _objc_msgSend_603(this.pointer, _sel_URLCache);
    return _ret.address == 0
        ? null
        : NSURLCache.castFromPointer(_ret, retain: true, release: true);
  }

  set URLCache(NSURLCache? value) {
    return _objc_msgSend_604(
        this.pointer, _sel_setURLCache_, value?.pointer ?? ffi.nullptr);
  }

  bool get shouldUseExtendedBackgroundIdleMode {
    return _objc_msgSend_7(
        this.pointer, _sel_shouldUseExtendedBackgroundIdleMode);
  }

  set shouldUseExtendedBackgroundIdleMode(bool value) {
    return _objc_msgSend_41(
        this.pointer, _sel_setShouldUseExtendedBackgroundIdleMode_, value);
  }

  objc.NSArray? get protocolClasses {
    final _ret = _objc_msgSend_69(this.pointer, _sel_protocolClasses);
    return _ret.address == 0
        ? null
        : objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  set protocolClasses(objc.NSArray? value) {
    return _objc_msgSend_605(
        this.pointer, _sel_setProtocolClasses_, value?.pointer ?? ffi.nullptr);
  }

  int get multipathServiceType {
    return _objc_msgSend_606(this.pointer, _sel_multipathServiceType);
  }

  set multipathServiceType(int value) {
    return _objc_msgSend_607(
        this.pointer, _sel_setMultipathServiceType_, value);
  }

  @override
  NSURLSessionConfiguration init() {
    final _ret = _objc_msgSend_40(this.pointer, _sel_init);
    return NSURLSessionConfiguration.castFromPointer(_ret,
        retain: true, release: true);
  }

  static NSURLSessionConfiguration new1() {
    final _ret = _objc_msgSend_40(_class_NSURLSessionConfiguration, _sel_new);
    return NSURLSessionConfiguration.castFromPointer(_ret,
        retain: false, release: true);
  }

  static NSURLSessionConfiguration backgroundSessionConfiguration_(
      objc.NSString identifier) {
    final _ret = _objc_msgSend_594(_class_NSURLSessionConfiguration,
        _sel_backgroundSessionConfiguration_, identifier.pointer);
    return NSURLSessionConfiguration.castFromPointer(_ret,
        retain: true, release: true);
  }

  static NSURLSessionConfiguration allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_47(
        _class_NSURLSessionConfiguration, _sel_allocWithZone_, zone);
    return NSURLSessionConfiguration.castFromPointer(_ret,
        retain: false, release: true);
  }

  static NSURLSessionConfiguration alloc() {
    final _ret = _objc_msgSend_40(_class_NSURLSessionConfiguration, _sel_alloc);
    return NSURLSessionConfiguration.castFromPointer(_ret,
        retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.NSObject aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.NSObject? anArgument) {
    _objc_msgSend_48(
        _class_NSURLSessionConfiguration,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  static void cancelPreviousPerformRequestsWithTarget_(objc.NSObject aTarget) {
    _objc_msgSend_49(_class_NSURLSessionConfiguration,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_7(
        _class_NSURLSessionConfiguration, _sel_accessInstanceVariablesDirectly);
  }

  static bool useStoredAccessor() {
    return _objc_msgSend_7(
        _class_NSURLSessionConfiguration, _sel_useStoredAccessor);
  }

  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_50(_class_NSURLSessionConfiguration,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_51(_class_NSURLSessionConfiguration,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_52(
        _class_NSURLSessionConfiguration,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_6(
        _class_NSURLSessionConfiguration, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSObject classForKeyedUnarchiver() {
    final _ret = _objc_msgSend_40(
        _class_NSURLSessionConfiguration, _sel_classForKeyedUnarchiver);
    return objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }
}

late final _class_NSURLSessionConfiguration =
    objc.getClass("NSURLSessionConfiguration");
late final _sel_defaultSessionConfiguration =
    objc.registerName("defaultSessionConfiguration");
final _objc_msgSend_593 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_ephemeralSessionConfiguration =
    objc.registerName("ephemeralSessionConfiguration");
late final _sel_backgroundSessionConfigurationWithIdentifier_ =
    objc.registerName("backgroundSessionConfigurationWithIdentifier:");
final _objc_msgSend_594 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_identifier = objc.registerName("identifier");
late final _sel_requestCachePolicy = objc.registerName("requestCachePolicy");
late final _sel_setRequestCachePolicy_ =
    objc.registerName("setRequestCachePolicy:");
late final _sel_timeoutIntervalForRequest =
    objc.registerName("timeoutIntervalForRequest");
late final _sel_setTimeoutIntervalForRequest_ =
    objc.registerName("setTimeoutIntervalForRequest:");
late final _sel_timeoutIntervalForResource =
    objc.registerName("timeoutIntervalForResource");
late final _sel_setTimeoutIntervalForResource_ =
    objc.registerName("setTimeoutIntervalForResource:");
late final _sel_waitsForConnectivity =
    objc.registerName("waitsForConnectivity");
late final _sel_setWaitsForConnectivity_ =
    objc.registerName("setWaitsForConnectivity:");
late final _sel_isDiscretionary = objc.registerName("isDiscretionary");
late final _sel_setDiscretionary_ = objc.registerName("setDiscretionary:");
late final _sel_sharedContainerIdentifier =
    objc.registerName("sharedContainerIdentifier");
late final _sel_setSharedContainerIdentifier_ =
    objc.registerName("setSharedContainerIdentifier:");
late final _sel_sessionSendsLaunchEvents =
    objc.registerName("sessionSendsLaunchEvents");
late final _sel_setSessionSendsLaunchEvents_ =
    objc.registerName("setSessionSendsLaunchEvents:");
late final _sel_connectionProxyDictionary =
    objc.registerName("connectionProxyDictionary");
late final _sel_setConnectionProxyDictionary_ =
    objc.registerName("setConnectionProxyDictionary:");

abstract class SSLProtocol {
  static const int kSSLProtocolUnknown = 0;
  static const int kTLSProtocol1 = 4;
  static const int kTLSProtocol11 = 7;
  static const int kTLSProtocol12 = 8;
  static const int kDTLSProtocol1 = 9;
  static const int kTLSProtocol13 = 10;
  static const int kDTLSProtocol12 = 11;
  static const int kTLSProtocolMaxSupported = 999;
  static const int kSSLProtocol2 = 1;
  static const int kSSLProtocol3 = 2;
  static const int kSSLProtocol3Only = 3;
  static const int kTLSProtocol1Only = 5;
  static const int kSSLProtocolAll = 6;
}

late final _sel_TLSMinimumSupportedProtocol =
    objc.registerName("TLSMinimumSupportedProtocol");
final _objc_msgSend_595 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Int32 Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setTLSMinimumSupportedProtocol_ =
    objc.registerName("setTLSMinimumSupportedProtocol:");
final _objc_msgSend_596 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Int32)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_TLSMaximumSupportedProtocol =
    objc.registerName("TLSMaximumSupportedProtocol");
late final _sel_setTLSMaximumSupportedProtocol_ =
    objc.registerName("setTLSMaximumSupportedProtocol:");

abstract class tls_protocol_version_t {
  static const int tls_protocol_version_TLSv10 = 769;
  static const int tls_protocol_version_TLSv11 = 770;
  static const int tls_protocol_version_TLSv12 = 771;
  static const int tls_protocol_version_TLSv13 = 772;
  static const int tls_protocol_version_DTLSv10 = -257;
  static const int tls_protocol_version_DTLSv12 = -259;
}

late final _sel_TLSMinimumSupportedProtocolVersion =
    objc.registerName("TLSMinimumSupportedProtocolVersion");
final _objc_msgSend_597 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Int32 Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setTLSMinimumSupportedProtocolVersion_ =
    objc.registerName("setTLSMinimumSupportedProtocolVersion:");
final _objc_msgSend_598 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Int32)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_TLSMaximumSupportedProtocolVersion =
    objc.registerName("TLSMaximumSupportedProtocolVersion");
late final _sel_setTLSMaximumSupportedProtocolVersion_ =
    objc.registerName("setTLSMaximumSupportedProtocolVersion:");
late final _sel_HTTPShouldSetCookies =
    objc.registerName("HTTPShouldSetCookies");
late final _sel_setHTTPShouldSetCookies_ =
    objc.registerName("setHTTPShouldSetCookies:");
late final _sel_HTTPCookieAcceptPolicy =
    objc.registerName("HTTPCookieAcceptPolicy");
late final _sel_setHTTPCookieAcceptPolicy_ =
    objc.registerName("setHTTPCookieAcceptPolicy:");
late final _sel_HTTPAdditionalHeaders =
    objc.registerName("HTTPAdditionalHeaders");
late final _sel_setHTTPAdditionalHeaders_ =
    objc.registerName("setHTTPAdditionalHeaders:");
late final _sel_HTTPMaximumConnectionsPerHost =
    objc.registerName("HTTPMaximumConnectionsPerHost");
late final _sel_setHTTPMaximumConnectionsPerHost_ =
    objc.registerName("setHTTPMaximumConnectionsPerHost:");
late final _sel_HTTPCookieStorage = objc.registerName("HTTPCookieStorage");
final _objc_msgSend_599 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setHTTPCookieStorage_ =
    objc.registerName("setHTTPCookieStorage:");
final _objc_msgSend_600 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_URLCredentialStorage =
    objc.registerName("URLCredentialStorage");
final _objc_msgSend_601 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setURLCredentialStorage_ =
    objc.registerName("setURLCredentialStorage:");
final _objc_msgSend_602 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_URLCache = objc.registerName("URLCache");
final _objc_msgSend_603 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setURLCache_ = objc.registerName("setURLCache:");
final _objc_msgSend_604 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_shouldUseExtendedBackgroundIdleMode =
    objc.registerName("shouldUseExtendedBackgroundIdleMode");
late final _sel_setShouldUseExtendedBackgroundIdleMode_ =
    objc.registerName("setShouldUseExtendedBackgroundIdleMode:");
late final _sel_protocolClasses = objc.registerName("protocolClasses");
late final _sel_setProtocolClasses_ = objc.registerName("setProtocolClasses:");
final _objc_msgSend_605 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();

abstract class NSURLSessionMultipathServiceType {
  static const int NSURLSessionMultipathServiceTypeNone = 0;
  static const int NSURLSessionMultipathServiceTypeHandover = 1;
  static const int NSURLSessionMultipathServiceTypeInteractive = 2;
  static const int NSURLSessionMultipathServiceTypeAggregate = 3;
}

late final _sel_multipathServiceType =
    objc.registerName("multipathServiceType");
final _objc_msgSend_606 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Int32 Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setMultipathServiceType_ =
    objc.registerName("setMultipathServiceType:");
final _objc_msgSend_607 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Int32)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_backgroundSessionConfiguration_ =
    objc.registerName("backgroundSessionConfiguration:");
late final _sel_sessionWithConfiguration_ =
    objc.registerName("sessionWithConfiguration:");
final _objc_msgSend_608 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_sessionWithConfiguration_delegate_delegateQueue_ =
    objc.registerName("sessionWithConfiguration:delegate:delegateQueue:");
final _objc_msgSend_609 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_delegateQueue = objc.registerName("delegateQueue");
late final _sel_configuration = objc.registerName("configuration");
late final _sel_sessionDescription = objc.registerName("sessionDescription");
late final _sel_setSessionDescription_ =
    objc.registerName("setSessionDescription:");
late final _sel_finishTasksAndInvalidate =
    objc.registerName("finishTasksAndInvalidate");
late final _sel_invalidateAndCancel = objc.registerName("invalidateAndCancel");
late final _sel_resetWithCompletionHandler_ =
    objc.registerName("resetWithCompletionHandler:");
late final _sel_flushWithCompletionHandler_ =
    objc.registerName("flushWithCompletionHandler:");
void _ObjCBlock_ffiVoid_NSArray_NSArray_NSArray_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlock> block,
        ffi.Pointer<objc.ObjCObject> arg0,
        ffi.Pointer<objc.ObjCObject> arg1,
        ffi.Pointer<objc.ObjCObject> arg2) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(
                    ffi.Pointer<objc.ObjCObject> arg0,
                    ffi.Pointer<objc.ObjCObject> arg1,
                    ffi.Pointer<objc.ObjCObject> arg2)>>()
        .asFunction<
            void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>()(arg0, arg1, arg2);
final _ObjCBlock_ffiVoid_NSArray_NSArray_NSArray_closureRegistry = <int,
    void Function(ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>)>{};
int _ObjCBlock_ffiVoid_NSArray_NSArray_NSArray_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void>
    _ObjCBlock_ffiVoid_NSArray_NSArray_NSArray_registerClosure(
        void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)
            fn) {
  final id = ++_ObjCBlock_ffiVoid_NSArray_NSArray_NSArray_closureRegistryIndex;
  _ObjCBlock_ffiVoid_NSArray_NSArray_NSArray_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

void _ObjCBlock_ffiVoid_NSArray_NSArray_NSArray_closureTrampoline(
        ffi.Pointer<objc.ObjCBlock> block,
        ffi.Pointer<objc.ObjCObject> arg0,
        ffi.Pointer<objc.ObjCObject> arg1,
        ffi.Pointer<objc.ObjCObject> arg2) =>
    _ObjCBlock_ffiVoid_NSArray_NSArray_NSArray_closureRegistry[
        block.ref.target.address]!(arg0, arg1, arg2);

class ObjCBlock_ffiVoid_NSArray_NSArray_NSArray extends objc.ObjCBlockBase {
  ObjCBlock_ffiVoid_NSArray_NSArray_NSArray._(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = true})
      : super(pointer, retain: retain, release: release);

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_ffiVoid_NSArray_NSArray_NSArray castFromPointer(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = false}) {
    return ObjCBlock_ffiVoid_NSArray_NSArray_NSArray._(pointer,
        retain: retain, release: release);
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSArray_NSArray_NSArray.fromFunctionPointer(
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<objc.ObjCObject> arg0,
                      ffi.Pointer<objc.ObjCObject> arg1,
                      ffi.Pointer<objc.ObjCObject> arg2)>>
          ptr)
      : this._(objc.newBlock(
            _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<objc.ObjCObject>)>(
                    _ObjCBlock_ffiVoid_NSArray_NSArray_NSArray_fnPtrTrampoline)
                .cast(),
            ptr.cast()));
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSArray_NSArray_NSArray.fromFunction(
      void Function(objc.NSArray, objc.NSArray, objc.NSArray) fn)
      : this._(objc.newBlock(
            _dartFuncTrampoline ??=
                ffi.Pointer.fromFunction<ffi.Void Function(ffi.Pointer<objc.ObjCBlock>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>(
                        _ObjCBlock_ffiVoid_NSArray_NSArray_NSArray_closureTrampoline)
                    .cast(),
            _ObjCBlock_ffiVoid_NSArray_NSArray_NSArray_registerClosure(
                (ffi.Pointer<objc.ObjCObject> arg0,
                        ffi.Pointer<objc.ObjCObject> arg1,
                        ffi.Pointer<objc.ObjCObject> arg2) =>
                    fn(
                        objc.NSArray.castFromPointer(arg0, retain: true, release: true),
                        objc.NSArray.castFromPointer(arg1, retain: true, release: true),
                        objc.NSArray.castFromPointer(arg2, retain: true, release: true)))));
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_NSArray_NSArray_NSArray.listener(
      void Function(objc.NSArray, objc.NSArray, objc.NSArray) fn)
      : this._(objc.newBlock(
            (_dartFuncListenerTrampoline ??=
                    ffi.NativeCallable<ffi.Void Function(ffi.Pointer<objc.ObjCBlock>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>.listener(
                        _ObjCBlock_ffiVoid_NSArray_NSArray_NSArray_closureTrampoline)
                      ..keepIsolateAlive = false)
                .nativeFunction
                .cast(),
            _ObjCBlock_ffiVoid_NSArray_NSArray_NSArray_registerClosure(
                (ffi.Pointer<objc.ObjCObject> arg0,
                        ffi.Pointer<objc.ObjCObject> arg1,
                        ffi.Pointer<objc.ObjCObject> arg2) =>
                    fn(
                        objc.NSArray.castFromPointer(arg0, retain: true, release: true),
                        objc.NSArray.castFromPointer(arg1, retain: true, release: true),
                        objc.NSArray.castFromPointer(arg2, retain: true, release: true)))));
  static ffi.NativeCallable<
      ffi.Void Function(
          ffi.Pointer<objc.ObjCBlock>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCObject>)>? _dartFuncListenerTrampoline;

  void call(objc.NSArray arg0, objc.NSArray arg1, objc.NSArray arg2) =>
      pointer.ref.invoke
              .cast<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<objc.ObjCBlock> block,
                          ffi.Pointer<objc.ObjCObject> arg0,
                          ffi.Pointer<objc.ObjCObject> arg1,
                          ffi.Pointer<objc.ObjCObject> arg2)>>()
              .asFunction<
                  void Function(
                      ffi.Pointer<objc.ObjCBlock>,
                      ffi.Pointer<objc.ObjCObject>,
                      ffi.Pointer<objc.ObjCObject>,
                      ffi.Pointer<objc.ObjCObject>)>()(
          pointer, arg0.pointer, arg1.pointer, arg2.pointer);
}

late final _sel_getTasksWithCompletionHandler_ =
    objc.registerName("getTasksWithCompletionHandler:");
final _objc_msgSend_610 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCBlock>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCBlock>)>();
void _ObjCBlock_ffiVoid_NSArray1_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlock> block, ffi.Pointer<objc.ObjCObject> arg0) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0)>>()
        .asFunction<void Function(ffi.Pointer<objc.ObjCObject>)>()(arg0);
final _ObjCBlock_ffiVoid_NSArray1_closureRegistry =
    <int, void Function(ffi.Pointer<objc.ObjCObject>)>{};
int _ObjCBlock_ffiVoid_NSArray1_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void> _ObjCBlock_ffiVoid_NSArray1_registerClosure(
    void Function(ffi.Pointer<objc.ObjCObject>) fn) {
  final id = ++_ObjCBlock_ffiVoid_NSArray1_closureRegistryIndex;
  _ObjCBlock_ffiVoid_NSArray1_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

void _ObjCBlock_ffiVoid_NSArray1_closureTrampoline(
        ffi.Pointer<objc.ObjCBlock> block, ffi.Pointer<objc.ObjCObject> arg0) =>
    _ObjCBlock_ffiVoid_NSArray1_closureRegistry[block.ref.target.address]!(
        arg0);

class ObjCBlock_ffiVoid_NSArray1 extends objc.ObjCBlockBase {
  ObjCBlock_ffiVoid_NSArray1._(ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false, bool release = true})
      : super(pointer, retain: retain, release: release);

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_ffiVoid_NSArray1 castFromPointer(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = false}) {
    return ObjCBlock_ffiVoid_NSArray1._(pointer,
        retain: retain, release: release);
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSArray1.fromFunctionPointer(
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0)>>
          ptr)
      : this._(objc.newBlock(
            _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<objc.ObjCObject>)>(
                    _ObjCBlock_ffiVoid_NSArray1_fnPtrTrampoline)
                .cast(),
            ptr.cast()));
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSArray1.fromFunction(void Function(objc.NSArray) fn)
      : this._(objc.newBlock(
            _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<objc.ObjCObject>)>(
                    _ObjCBlock_ffiVoid_NSArray1_closureTrampoline)
                .cast(),
            _ObjCBlock_ffiVoid_NSArray1_registerClosure(
                (ffi.Pointer<objc.ObjCObject> arg0) => fn(
                    objc.NSArray.castFromPointer(arg0,
                        retain: true, release: true)))));
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_NSArray1.listener(void Function(objc.NSArray) fn)
      : this._(objc.newBlock(
            (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                        ffi.Void Function(ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<objc.ObjCObject>)>.listener(
                    _ObjCBlock_ffiVoid_NSArray1_closureTrampoline)
                  ..keepIsolateAlive = false)
                .nativeFunction
                .cast(),
            _ObjCBlock_ffiVoid_NSArray1_registerClosure(
                (ffi.Pointer<objc.ObjCObject> arg0) => fn(
                    objc.NSArray.castFromPointer(arg0,
                        retain: true, release: true)))));
  static ffi.NativeCallable<
          ffi.Void Function(
              ffi.Pointer<objc.ObjCBlock>, ffi.Pointer<objc.ObjCObject>)>?
      _dartFuncListenerTrampoline;

  void call(objc.NSArray arg0) => pointer.ref.invoke
      .cast<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<objc.ObjCBlock> block,
                  ffi.Pointer<objc.ObjCObject> arg0)>>()
      .asFunction<
          void Function(ffi.Pointer<objc.ObjCBlock>,
              ffi.Pointer<objc.ObjCObject>)>()(pointer, arg0.pointer);
}

late final _sel_getAllTasksWithCompletionHandler_ =
    objc.registerName("getAllTasksWithCompletionHandler:");
final _objc_msgSend_611 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCBlock>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCBlock>)>();
late final _sel_dataTaskWithRequest_ =
    objc.registerName("dataTaskWithRequest:");
final _objc_msgSend_612 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_dataTaskWithURL_ = objc.registerName("dataTaskWithURL:");
final _objc_msgSend_613 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();

class NSURLSessionUploadTask extends NSURLSessionDataTask {
  NSURLSessionUploadTask._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSURLSessionUploadTask] that points to the same underlying object as [other].
  NSURLSessionUploadTask.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSURLSessionUploadTask] that wraps the given raw object pointer.
  NSURLSessionUploadTask.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSURLSessionUploadTask].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSURLSessionUploadTask);
  }

  @override
  NSURLSessionUploadTask init() {
    final _ret = _objc_msgSend_40(this.pointer, _sel_init);
    return NSURLSessionUploadTask.castFromPointer(_ret,
        retain: true, release: true);
  }

  static NSURLSessionUploadTask new1() {
    final _ret = _objc_msgSend_40(_class_NSURLSessionUploadTask, _sel_new);
    return NSURLSessionUploadTask.castFromPointer(_ret,
        retain: false, release: true);
  }

  void cancelByProducingResumeData_(
      ObjCBlock_ffiVoid_NSData completionHandler) {
    _objc_msgSend_614(this.pointer, _sel_cancelByProducingResumeData_,
        completionHandler.pointer);
  }

  static NSURLSessionUploadTask allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_47(
        _class_NSURLSessionUploadTask, _sel_allocWithZone_, zone);
    return NSURLSessionUploadTask.castFromPointer(_ret,
        retain: false, release: true);
  }

  static NSURLSessionUploadTask alloc() {
    final _ret = _objc_msgSend_40(_class_NSURLSessionUploadTask, _sel_alloc);
    return NSURLSessionUploadTask.castFromPointer(_ret,
        retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.NSObject aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.NSObject? anArgument) {
    _objc_msgSend_48(
        _class_NSURLSessionUploadTask,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  static void cancelPreviousPerformRequestsWithTarget_(objc.NSObject aTarget) {
    _objc_msgSend_49(_class_NSURLSessionUploadTask,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_7(
        _class_NSURLSessionUploadTask, _sel_accessInstanceVariablesDirectly);
  }

  static bool useStoredAccessor() {
    return _objc_msgSend_7(
        _class_NSURLSessionUploadTask, _sel_useStoredAccessor);
  }

  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_50(_class_NSURLSessionUploadTask,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_51(_class_NSURLSessionUploadTask,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_52(
        _class_NSURLSessionUploadTask,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_6(
        _class_NSURLSessionUploadTask, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSObject classForKeyedUnarchiver() {
    final _ret = _objc_msgSend_40(
        _class_NSURLSessionUploadTask, _sel_classForKeyedUnarchiver);
    return objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }
}

late final _class_NSURLSessionUploadTask =
    objc.getClass("NSURLSessionUploadTask");
void _ObjCBlock_ffiVoid_NSData_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlock> block, ffi.Pointer<objc.ObjCObject> arg0) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0)>>()
        .asFunction<void Function(ffi.Pointer<objc.ObjCObject>)>()(arg0);
final _ObjCBlock_ffiVoid_NSData_closureRegistry =
    <int, void Function(ffi.Pointer<objc.ObjCObject>)>{};
int _ObjCBlock_ffiVoid_NSData_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void> _ObjCBlock_ffiVoid_NSData_registerClosure(
    void Function(ffi.Pointer<objc.ObjCObject>) fn) {
  final id = ++_ObjCBlock_ffiVoid_NSData_closureRegistryIndex;
  _ObjCBlock_ffiVoid_NSData_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

void _ObjCBlock_ffiVoid_NSData_closureTrampoline(
        ffi.Pointer<objc.ObjCBlock> block, ffi.Pointer<objc.ObjCObject> arg0) =>
    _ObjCBlock_ffiVoid_NSData_closureRegistry[block.ref.target.address]!(arg0);

class ObjCBlock_ffiVoid_NSData extends objc.ObjCBlockBase {
  ObjCBlock_ffiVoid_NSData._(ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false, bool release = true})
      : super(pointer, retain: retain, release: release);

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_ffiVoid_NSData castFromPointer(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = false}) {
    return ObjCBlock_ffiVoid_NSData._(pointer,
        retain: retain, release: release);
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSData.fromFunctionPointer(
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0)>>
          ptr)
      : this._(objc.newBlock(
            _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<objc.ObjCObject>)>(
                    _ObjCBlock_ffiVoid_NSData_fnPtrTrampoline)
                .cast(),
            ptr.cast()));
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSData.fromFunction(void Function(objc.NSData?) fn)
      : this._(objc.newBlock(
            _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(
                            ffi.Pointer<objc.ObjCBlock>, ffi.Pointer<objc.ObjCObject>)>(
                    _ObjCBlock_ffiVoid_NSData_closureTrampoline)
                .cast(),
            _ObjCBlock_ffiVoid_NSData_registerClosure(
                (ffi.Pointer<objc.ObjCObject> arg0) => fn(arg0.address == 0
                    ? null
                    : objc.NSData.castFromPointer(arg0,
                        retain: true, release: true)))));
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_NSData.listener(void Function(objc.NSData?) fn)
      : this._(objc.newBlock(
            (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                        ffi.Void Function(ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<objc.ObjCObject>)>.listener(
                    _ObjCBlock_ffiVoid_NSData_closureTrampoline)
                  ..keepIsolateAlive = false)
                .nativeFunction
                .cast(),
            _ObjCBlock_ffiVoid_NSData_registerClosure(
                (ffi.Pointer<objc.ObjCObject> arg0) => fn(arg0.address == 0
                    ? null
                    : objc.NSData.castFromPointer(arg0, retain: true, release: true)))));
  static ffi.NativeCallable<
          ffi.Void Function(
              ffi.Pointer<objc.ObjCBlock>, ffi.Pointer<objc.ObjCObject>)>?
      _dartFuncListenerTrampoline;

  void call(objc.NSData? arg0) => pointer.ref.invoke
          .cast<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<objc.ObjCBlock> block,
                      ffi.Pointer<objc.ObjCObject> arg0)>>()
          .asFunction<
              void Function(
                  ffi.Pointer<objc.ObjCBlock>, ffi.Pointer<objc.ObjCObject>)>()(
      pointer, arg0?.pointer ?? ffi.nullptr);
}

late final _sel_cancelByProducingResumeData_ =
    objc.registerName("cancelByProducingResumeData:");
final _objc_msgSend_614 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCBlock>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCBlock>)>();
late final _sel_uploadTaskWithRequest_fromFile_ =
    objc.registerName("uploadTaskWithRequest:fromFile:");
final _objc_msgSend_615 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_uploadTaskWithRequest_fromData_ =
    objc.registerName("uploadTaskWithRequest:fromData:");
final _objc_msgSend_616 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_uploadTaskWithResumeData_ =
    objc.registerName("uploadTaskWithResumeData:");
final _objc_msgSend_617 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_uploadTaskWithStreamedRequest_ =
    objc.registerName("uploadTaskWithStreamedRequest:");
final _objc_msgSend_618 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();

class NSURLSessionDownloadTask extends NSURLSessionTask {
  NSURLSessionDownloadTask._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSURLSessionDownloadTask] that points to the same underlying object as [other].
  NSURLSessionDownloadTask.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSURLSessionDownloadTask] that wraps the given raw object pointer.
  NSURLSessionDownloadTask.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSURLSessionDownloadTask].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSURLSessionDownloadTask);
  }

  void cancelByProducingResumeData_(
      ObjCBlock_ffiVoid_NSData completionHandler) {
    _objc_msgSend_614(this.pointer, _sel_cancelByProducingResumeData_,
        completionHandler.pointer);
  }

  @override
  NSURLSessionDownloadTask init() {
    final _ret = _objc_msgSend_40(this.pointer, _sel_init);
    return NSURLSessionDownloadTask.castFromPointer(_ret,
        retain: true, release: true);
  }

  static NSURLSessionDownloadTask new1() {
    final _ret = _objc_msgSend_40(_class_NSURLSessionDownloadTask, _sel_new);
    return NSURLSessionDownloadTask.castFromPointer(_ret,
        retain: false, release: true);
  }

  static NSURLSessionDownloadTask allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_47(
        _class_NSURLSessionDownloadTask, _sel_allocWithZone_, zone);
    return NSURLSessionDownloadTask.castFromPointer(_ret,
        retain: false, release: true);
  }

  static NSURLSessionDownloadTask alloc() {
    final _ret = _objc_msgSend_40(_class_NSURLSessionDownloadTask, _sel_alloc);
    return NSURLSessionDownloadTask.castFromPointer(_ret,
        retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.NSObject aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.NSObject? anArgument) {
    _objc_msgSend_48(
        _class_NSURLSessionDownloadTask,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  static void cancelPreviousPerformRequestsWithTarget_(objc.NSObject aTarget) {
    _objc_msgSend_49(_class_NSURLSessionDownloadTask,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_7(
        _class_NSURLSessionDownloadTask, _sel_accessInstanceVariablesDirectly);
  }

  static bool useStoredAccessor() {
    return _objc_msgSend_7(
        _class_NSURLSessionDownloadTask, _sel_useStoredAccessor);
  }

  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_50(_class_NSURLSessionDownloadTask,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_51(_class_NSURLSessionDownloadTask,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_52(
        _class_NSURLSessionDownloadTask,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_6(
        _class_NSURLSessionDownloadTask, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSObject classForKeyedUnarchiver() {
    final _ret = _objc_msgSend_40(
        _class_NSURLSessionDownloadTask, _sel_classForKeyedUnarchiver);
    return objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }
}

late final _class_NSURLSessionDownloadTask =
    objc.getClass("NSURLSessionDownloadTask");
late final _sel_downloadTaskWithRequest_ =
    objc.registerName("downloadTaskWithRequest:");
final _objc_msgSend_619 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_downloadTaskWithURL_ =
    objc.registerName("downloadTaskWithURL:");
final _objc_msgSend_620 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_downloadTaskWithResumeData_ =
    objc.registerName("downloadTaskWithResumeData:");
final _objc_msgSend_621 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();

class NSURLSessionStreamTask extends NSURLSessionTask {
  NSURLSessionStreamTask._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSURLSessionStreamTask] that points to the same underlying object as [other].
  NSURLSessionStreamTask.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSURLSessionStreamTask] that wraps the given raw object pointer.
  NSURLSessionStreamTask.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSURLSessionStreamTask].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSURLSessionStreamTask);
  }

  void readDataOfMinLength_maxLength_timeout_completionHandler_(
      int minBytes,
      int maxBytes,
      double timeout,
      ObjCBlock_ffiVoid_NSData_bool_NSError completionHandler) {
    _objc_msgSend_622(
        this.pointer,
        _sel_readDataOfMinLength_maxLength_timeout_completionHandler_,
        minBytes,
        maxBytes,
        timeout,
        completionHandler.pointer);
  }

  void writeData_timeout_completionHandler_(objc.NSData data, double timeout,
      ObjCBlock_ffiVoid_NSError completionHandler) {
    _objc_msgSend_623(this.pointer, _sel_writeData_timeout_completionHandler_,
        data.pointer, timeout, completionHandler.pointer);
  }

  void captureStreams() {
    _objc_msgSend_82(this.pointer, _sel_captureStreams);
  }

  void closeWrite() {
    _objc_msgSend_82(this.pointer, _sel_closeWrite);
  }

  void closeRead() {
    _objc_msgSend_82(this.pointer, _sel_closeRead);
  }

  void startSecureConnection() {
    _objc_msgSend_82(this.pointer, _sel_startSecureConnection);
  }

  void stopSecureConnection() {
    _objc_msgSend_82(this.pointer, _sel_stopSecureConnection);
  }

  @override
  NSURLSessionStreamTask init() {
    final _ret = _objc_msgSend_40(this.pointer, _sel_init);
    return NSURLSessionStreamTask.castFromPointer(_ret,
        retain: true, release: true);
  }

  static NSURLSessionStreamTask new1() {
    final _ret = _objc_msgSend_40(_class_NSURLSessionStreamTask, _sel_new);
    return NSURLSessionStreamTask.castFromPointer(_ret,
        retain: false, release: true);
  }

  static NSURLSessionStreamTask allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_47(
        _class_NSURLSessionStreamTask, _sel_allocWithZone_, zone);
    return NSURLSessionStreamTask.castFromPointer(_ret,
        retain: false, release: true);
  }

  static NSURLSessionStreamTask alloc() {
    final _ret = _objc_msgSend_40(_class_NSURLSessionStreamTask, _sel_alloc);
    return NSURLSessionStreamTask.castFromPointer(_ret,
        retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.NSObject aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.NSObject? anArgument) {
    _objc_msgSend_48(
        _class_NSURLSessionStreamTask,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  static void cancelPreviousPerformRequestsWithTarget_(objc.NSObject aTarget) {
    _objc_msgSend_49(_class_NSURLSessionStreamTask,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_7(
        _class_NSURLSessionStreamTask, _sel_accessInstanceVariablesDirectly);
  }

  static bool useStoredAccessor() {
    return _objc_msgSend_7(
        _class_NSURLSessionStreamTask, _sel_useStoredAccessor);
  }

  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_50(_class_NSURLSessionStreamTask,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_51(_class_NSURLSessionStreamTask,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_52(
        _class_NSURLSessionStreamTask,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_6(
        _class_NSURLSessionStreamTask, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSObject classForKeyedUnarchiver() {
    final _ret = _objc_msgSend_40(
        _class_NSURLSessionStreamTask, _sel_classForKeyedUnarchiver);
    return objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }
}

late final _class_NSURLSessionStreamTask =
    objc.getClass("NSURLSessionStreamTask");
void _ObjCBlock_ffiVoid_NSData_bool_NSError_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlock> block,
        ffi.Pointer<objc.ObjCObject> arg0,
        bool arg1,
        ffi.Pointer<objc.ObjCObject> arg2) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0,
                    ffi.Bool arg1, ffi.Pointer<objc.ObjCObject> arg2)>>()
        .asFunction<
            void Function(ffi.Pointer<objc.ObjCObject>, bool,
                ffi.Pointer<objc.ObjCObject>)>()(arg0, arg1, arg2);
final _ObjCBlock_ffiVoid_NSData_bool_NSError_closureRegistry = <int,
    void Function(
        ffi.Pointer<objc.ObjCObject>, bool, ffi.Pointer<objc.ObjCObject>)>{};
int _ObjCBlock_ffiVoid_NSData_bool_NSError_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void> _ObjCBlock_ffiVoid_NSData_bool_NSError_registerClosure(
    void Function(
            ffi.Pointer<objc.ObjCObject>, bool, ffi.Pointer<objc.ObjCObject>)
        fn) {
  final id = ++_ObjCBlock_ffiVoid_NSData_bool_NSError_closureRegistryIndex;
  _ObjCBlock_ffiVoid_NSData_bool_NSError_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

void _ObjCBlock_ffiVoid_NSData_bool_NSError_closureTrampoline(
        ffi.Pointer<objc.ObjCBlock> block,
        ffi.Pointer<objc.ObjCObject> arg0,
        bool arg1,
        ffi.Pointer<objc.ObjCObject> arg2) =>
    _ObjCBlock_ffiVoid_NSData_bool_NSError_closureRegistry[
        block.ref.target.address]!(arg0, arg1, arg2);

class ObjCBlock_ffiVoid_NSData_bool_NSError extends objc.ObjCBlockBase {
  ObjCBlock_ffiVoid_NSData_bool_NSError._(ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false, bool release = true})
      : super(pointer, retain: retain, release: release);

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_ffiVoid_NSData_bool_NSError castFromPointer(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = false}) {
    return ObjCBlock_ffiVoid_NSData_bool_NSError._(pointer,
        retain: retain, release: release);
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSData_bool_NSError.fromFunctionPointer(
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0,
                      ffi.Bool arg1, ffi.Pointer<objc.ObjCObject> arg2)>>
          ptr)
      : this._(objc.newBlock(
            _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Bool,
                            ffi.Pointer<objc.ObjCObject>)>(
                    _ObjCBlock_ffiVoid_NSData_bool_NSError_fnPtrTrampoline)
                .cast(),
            ptr.cast()));
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSData_bool_NSError.fromFunction(
      void Function(objc.NSData, bool, objc.NSError?) fn)
      : this._(objc.newBlock(
            _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Bool,
                            ffi.Pointer<objc.ObjCObject>)>(
                    _ObjCBlock_ffiVoid_NSData_bool_NSError_closureTrampoline)
                .cast(),
            _ObjCBlock_ffiVoid_NSData_bool_NSError_registerClosure(
                (ffi.Pointer<objc.ObjCObject> arg0, bool arg1,
                        ffi.Pointer<objc.ObjCObject> arg2) =>
                    fn(objc.NSData.castFromPointer(arg0, retain: true, release: true), arg1, arg2.address == 0 ? null : objc.NSError.castFromPointer(arg2, retain: true, release: true)))));
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_NSData_bool_NSError.listener(
      void Function(objc.NSData, bool, objc.NSError?) fn)
      : this._(objc.newBlock(
            (_dartFuncListenerTrampoline ??=
                    ffi.NativeCallable<ffi.Void Function(ffi.Pointer<objc.ObjCBlock>, ffi.Pointer<objc.ObjCObject>, ffi.Bool, ffi.Pointer<objc.ObjCObject>)>.listener(
                        _ObjCBlock_ffiVoid_NSData_bool_NSError_closureTrampoline)
                      ..keepIsolateAlive = false)
                .nativeFunction
                .cast(),
            _ObjCBlock_ffiVoid_NSData_bool_NSError_registerClosure(
                (ffi.Pointer<objc.ObjCObject> arg0, bool arg1, ffi.Pointer<objc.ObjCObject> arg2) => fn(
                    objc.NSData.castFromPointer(arg0,
                        retain: true, release: true),
                    arg1,
                    arg2.address == 0
                        ? null
                        : objc.NSError.castFromPointer(arg2, retain: true, release: true)))));
  static ffi.NativeCallable<
      ffi.Void Function(
          ffi.Pointer<objc.ObjCBlock>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Bool,
          ffi.Pointer<objc.ObjCObject>)>? _dartFuncListenerTrampoline;

  void call(objc.NSData arg0, bool arg1, objc.NSError? arg2) =>
      pointer.ref.invoke
              .cast<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<objc.ObjCBlock> block,
                          ffi.Pointer<objc.ObjCObject> arg0,
                          ffi.Bool arg1,
                          ffi.Pointer<objc.ObjCObject> arg2)>>()
              .asFunction<
                  void Function(
                      ffi.Pointer<objc.ObjCBlock>,
                      ffi.Pointer<objc.ObjCObject>,
                      bool,
                      ffi.Pointer<objc.ObjCObject>)>()(
          pointer, arg0.pointer, arg1, arg2?.pointer ?? ffi.nullptr);
}

late final _sel_readDataOfMinLength_maxLength_timeout_completionHandler_ = objc
    .registerName("readDataOfMinLength:maxLength:timeout:completionHandler:");
final _objc_msgSend_622 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.UnsignedLong,
                ffi.UnsignedLong,
                ffi.Double,
                ffi.Pointer<objc.ObjCBlock>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int,
            int,
            double,
            ffi.Pointer<objc.ObjCBlock>)>();
late final _sel_writeData_timeout_completionHandler_ =
    objc.registerName("writeData:timeout:completionHandler:");
final _objc_msgSend_623 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Double,
                ffi.Pointer<objc.ObjCBlock>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            double,
            ffi.Pointer<objc.ObjCBlock>)>();
late final _sel_captureStreams = objc.registerName("captureStreams");
late final _sel_closeWrite = objc.registerName("closeWrite");
late final _sel_closeRead = objc.registerName("closeRead");
late final _sel_startSecureConnection =
    objc.registerName("startSecureConnection");
late final _sel_stopSecureConnection =
    objc.registerName("stopSecureConnection");
late final _sel_streamTaskWithHostName_port_ =
    objc.registerName("streamTaskWithHostName:port:");
final _objc_msgSend_624 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Long)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int)>();

class NSNetService extends objc.NSObject {
  NSNetService._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSNetService] that points to the same underlying object as [other].
  NSNetService.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSNetService] that wraps the given raw object pointer.
  NSNetService.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSNetService].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSNetService);
  }

  NSNetService initWithDomain_type_name_port_(
      objc.NSString domain, objc.NSString type, objc.NSString name, int port) {
    final _ret = _objc_msgSend_625(
        this.pointer,
        _sel_initWithDomain_type_name_port_,
        domain.pointer,
        type.pointer,
        name.pointer,
        port);
    return NSNetService.castFromPointer(_ret, retain: true, release: true);
  }

  NSNetService initWithDomain_type_name_(
      objc.NSString domain, objc.NSString type, objc.NSString name) {
    final _ret = _objc_msgSend_626(this.pointer, _sel_initWithDomain_type_name_,
        domain.pointer, type.pointer, name.pointer);
    return NSNetService.castFromPointer(_ret, retain: true, release: true);
  }

  void scheduleInRunLoop_forMode_(NSRunLoop aRunLoop, objc.NSString mode) {
    _objc_msgSend_216(this.pointer, _sel_scheduleInRunLoop_forMode_,
        aRunLoop.pointer, mode.pointer);
  }

  void removeFromRunLoop_forMode_(NSRunLoop aRunLoop, objc.NSString mode) {
    _objc_msgSend_216(this.pointer, _sel_removeFromRunLoop_forMode_,
        aRunLoop.pointer, mode.pointer);
  }

  objc.NSObject? get delegate {
    final _ret = _objc_msgSend_66(this.pointer, _sel_delegate);
    return _ret.address == 0
        ? null
        : objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }

  set delegate(objc.NSObject? value) {
    return _objc_msgSend_188(
        this.pointer, _sel_setDelegate_, value?.pointer ?? ffi.nullptr);
  }

  bool get includesPeerToPeer {
    return _objc_msgSend_7(this.pointer, _sel_includesPeerToPeer);
  }

  set includesPeerToPeer(bool value) {
    return _objc_msgSend_41(this.pointer, _sel_setIncludesPeerToPeer_, value);
  }

  objc.NSString get name {
    final _ret = _objc_msgSend_12(this.pointer, _sel_name);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSString get type {
    final _ret = _objc_msgSend_12(this.pointer, _sel_type);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSString get domain {
    final _ret = _objc_msgSend_12(this.pointer, _sel_domain);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSString? get hostName {
    final _ret = _objc_msgSend_13(this.pointer, _sel_hostName);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSArray? get addresses {
    final _ret = _objc_msgSend_69(this.pointer, _sel_addresses);
    return _ret.address == 0
        ? null
        : objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  int get port {
    return _objc_msgSend_114(this.pointer, _sel_port);
  }

  void publish() {
    _objc_msgSend_82(this.pointer, _sel_publish);
  }

  void publishWithOptions_(int options) {
    _objc_msgSend_627(this.pointer, _sel_publishWithOptions_, options);
  }

  void resolve() {
    _objc_msgSend_82(this.pointer, _sel_resolve);
  }

  void stop() {
    _objc_msgSend_82(this.pointer, _sel_stop);
  }

  static objc.NSDictionary dictionaryFromTXTRecordData_(objc.NSData txtData) {
    final _ret = _objc_msgSend_628(_class_NSNetService,
        _sel_dictionaryFromTXTRecordData_, txtData.pointer);
    return objc.NSDictionary.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSData dataFromTXTRecordDictionary_(
      objc.NSDictionary txtDictionary) {
    final _ret = _objc_msgSend_629(_class_NSNetService,
        _sel_dataFromTXTRecordDictionary_, txtDictionary.pointer);
    return objc.NSData.castFromPointer(_ret, retain: true, release: true);
  }

  void resolveWithTimeout_(double timeout) {
    _objc_msgSend_630(this.pointer, _sel_resolveWithTimeout_, timeout);
  }

  bool getInputStream_outputStream_(
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> inputStream,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outputStream) {
    return _objc_msgSend_631(this.pointer, _sel_getInputStream_outputStream_,
        inputStream, outputStream);
  }

  bool setTXTRecordData_(objc.NSData? recordData) {
    return _objc_msgSend_632(this.pointer, _sel_setTXTRecordData_,
        recordData?.pointer ?? ffi.nullptr);
  }

  objc.NSData? TXTRecordData() {
    final _ret = _objc_msgSend_325(this.pointer, _sel_TXTRecordData);
    return _ret.address == 0
        ? null
        : objc.NSData.castFromPointer(_ret, retain: true, release: true);
  }

  void startMonitoring() {
    _objc_msgSend_82(this.pointer, _sel_startMonitoring);
  }

  void stopMonitoring() {
    _objc_msgSend_82(this.pointer, _sel_stopMonitoring);
  }

  @override
  NSNetService init() {
    final _ret = _objc_msgSend_40(this.pointer, _sel_init);
    return NSNetService.castFromPointer(_ret, retain: true, release: true);
  }

  static NSNetService new1() {
    final _ret = _objc_msgSend_40(_class_NSNetService, _sel_new);
    return NSNetService.castFromPointer(_ret, retain: false, release: true);
  }

  static NSNetService allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_47(_class_NSNetService, _sel_allocWithZone_, zone);
    return NSNetService.castFromPointer(_ret, retain: false, release: true);
  }

  static NSNetService alloc() {
    final _ret = _objc_msgSend_40(_class_NSNetService, _sel_alloc);
    return NSNetService.castFromPointer(_ret, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.NSObject aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.NSObject? anArgument) {
    _objc_msgSend_48(
        _class_NSNetService,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  static void cancelPreviousPerformRequestsWithTarget_(objc.NSObject aTarget) {
    _objc_msgSend_49(_class_NSNetService,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_7(
        _class_NSNetService, _sel_accessInstanceVariablesDirectly);
  }

  static bool useStoredAccessor() {
    return _objc_msgSend_7(_class_NSNetService, _sel_useStoredAccessor);
  }

  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_50(_class_NSNetService,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_51(_class_NSNetService,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_52(
        _class_NSNetService,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_6(
        _class_NSNetService, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSObject classForKeyedUnarchiver() {
    final _ret =
        _objc_msgSend_40(_class_NSNetService, _sel_classForKeyedUnarchiver);
    return objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }
}

late final _class_NSNetService = objc.getClass("NSNetService");
late final _sel_initWithDomain_type_name_port_ =
    objc.registerName("initWithDomain:type:name:port:");
final _objc_msgSend_625 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Int)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            int)>();
late final _sel_initWithDomain_type_name_ =
    objc.registerName("initWithDomain:type:name:");
final _objc_msgSend_626 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_includesPeerToPeer = objc.registerName("includesPeerToPeer");
late final _sel_setIncludesPeerToPeer_ =
    objc.registerName("setIncludesPeerToPeer:");
late final _sel_type = objc.registerName("type");
late final _sel_publish = objc.registerName("publish");

abstract class NSNetServiceOptions {
  static const int NSNetServiceNoAutoRename = 1;
  static const int NSNetServiceListenForConnections = 2;
}

late final _sel_publishWithOptions_ = objc.registerName("publishWithOptions:");
final _objc_msgSend_627 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Int32)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_resolve = objc.registerName("resolve");
late final _sel_stop = objc.registerName("stop");
late final _sel_dictionaryFromTXTRecordData_ =
    objc.registerName("dictionaryFromTXTRecordData:");
final _objc_msgSend_628 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_dataFromTXTRecordDictionary_ =
    objc.registerName("dataFromTXTRecordDictionary:");
final _objc_msgSend_629 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_resolveWithTimeout_ = objc.registerName("resolveWithTimeout:");
final _objc_msgSend_630 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Double)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, double)>();
late final _sel_getInputStream_outputStream_ =
    objc.registerName("getInputStream:outputStream:");
final _objc_msgSend_631 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_setTXTRecordData_ = objc.registerName("setTXTRecordData:");
final _objc_msgSend_632 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        bool Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_TXTRecordData = objc.registerName("TXTRecordData");
late final _sel_startMonitoring = objc.registerName("startMonitoring");
late final _sel_stopMonitoring = objc.registerName("stopMonitoring");
late final _sel_streamTaskWithNetService_ =
    objc.registerName("streamTaskWithNetService:");
final _objc_msgSend_633 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();

class NSURLSessionWebSocketTask extends NSURLSessionTask {
  NSURLSessionWebSocketTask._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSURLSessionWebSocketTask] that points to the same underlying object as [other].
  NSURLSessionWebSocketTask.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSURLSessionWebSocketTask] that wraps the given raw object pointer.
  NSURLSessionWebSocketTask.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSURLSessionWebSocketTask].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSURLSessionWebSocketTask);
  }

  void sendMessage_completionHandler_(NSURLSessionWebSocketMessage message,
      ObjCBlock_ffiVoid_NSError completionHandler) {
    _objc_msgSend_635(this.pointer, _sel_sendMessage_completionHandler_,
        message.pointer, completionHandler.pointer);
  }

  void receiveMessageWithCompletionHandler_(
      ObjCBlock_ffiVoid_NSURLSessionWebSocketMessage_NSError
          completionHandler) {
    _objc_msgSend_636(this.pointer, _sel_receiveMessageWithCompletionHandler_,
        completionHandler.pointer);
  }

  void sendPingWithPongReceiveHandler_(
      ObjCBlock_ffiVoid_NSError pongReceiveHandler) {
    _objc_msgSend_637(this.pointer, _sel_sendPingWithPongReceiveHandler_,
        pongReceiveHandler.pointer);
  }

  void cancelWithCloseCode_reason_(int closeCode, objc.NSData? reason) {
    _objc_msgSend_638(this.pointer, _sel_cancelWithCloseCode_reason_, closeCode,
        reason?.pointer ?? ffi.nullptr);
  }

  int get maximumMessageSize {
    return _objc_msgSend_114(this.pointer, _sel_maximumMessageSize);
  }

  set maximumMessageSize(int value) {
    return _objc_msgSend_134(this.pointer, _sel_setMaximumMessageSize_, value);
  }

  int get closeCode {
    return _objc_msgSend_639(this.pointer, _sel_closeCode);
  }

  objc.NSData? get closeReason {
    final _ret = _objc_msgSend_325(this.pointer, _sel_closeReason);
    return _ret.address == 0
        ? null
        : objc.NSData.castFromPointer(_ret, retain: true, release: true);
  }

  @override
  NSURLSessionWebSocketTask init() {
    final _ret = _objc_msgSend_40(this.pointer, _sel_init);
    return NSURLSessionWebSocketTask.castFromPointer(_ret,
        retain: true, release: true);
  }

  static NSURLSessionWebSocketTask new1() {
    final _ret = _objc_msgSend_40(_class_NSURLSessionWebSocketTask, _sel_new);
    return NSURLSessionWebSocketTask.castFromPointer(_ret,
        retain: false, release: true);
  }

  static NSURLSessionWebSocketTask allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_47(
        _class_NSURLSessionWebSocketTask, _sel_allocWithZone_, zone);
    return NSURLSessionWebSocketTask.castFromPointer(_ret,
        retain: false, release: true);
  }

  static NSURLSessionWebSocketTask alloc() {
    final _ret = _objc_msgSend_40(_class_NSURLSessionWebSocketTask, _sel_alloc);
    return NSURLSessionWebSocketTask.castFromPointer(_ret,
        retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.NSObject aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.NSObject? anArgument) {
    _objc_msgSend_48(
        _class_NSURLSessionWebSocketTask,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  static void cancelPreviousPerformRequestsWithTarget_(objc.NSObject aTarget) {
    _objc_msgSend_49(_class_NSURLSessionWebSocketTask,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_7(
        _class_NSURLSessionWebSocketTask, _sel_accessInstanceVariablesDirectly);
  }

  static bool useStoredAccessor() {
    return _objc_msgSend_7(
        _class_NSURLSessionWebSocketTask, _sel_useStoredAccessor);
  }

  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_50(_class_NSURLSessionWebSocketTask,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_51(_class_NSURLSessionWebSocketTask,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_52(
        _class_NSURLSessionWebSocketTask,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_6(
        _class_NSURLSessionWebSocketTask, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSObject classForKeyedUnarchiver() {
    final _ret = _objc_msgSend_40(
        _class_NSURLSessionWebSocketTask, _sel_classForKeyedUnarchiver);
    return objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }
}

late final _class_NSURLSessionWebSocketTask =
    objc.getClass("NSURLSessionWebSocketTask");

class NSURLSessionWebSocketMessage extends objc.NSObject {
  NSURLSessionWebSocketMessage._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSURLSessionWebSocketMessage] that points to the same underlying object as [other].
  NSURLSessionWebSocketMessage.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSURLSessionWebSocketMessage] that wraps the given raw object pointer.
  NSURLSessionWebSocketMessage.castFromPointer(
      ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false,
      bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSURLSessionWebSocketMessage].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSURLSessionWebSocketMessage);
  }

  NSURLSessionWebSocketMessage initWithData_(objc.NSData data) {
    final _ret =
        _objc_msgSend_340(this.pointer, _sel_initWithData_, data.pointer);
    return NSURLSessionWebSocketMessage.castFromPointer(_ret,
        retain: true, release: true);
  }

  NSURLSessionWebSocketMessage initWithString_(objc.NSString string) {
    final _ret =
        _objc_msgSend_35(this.pointer, _sel_initWithString_, string.pointer);
    return NSURLSessionWebSocketMessage.castFromPointer(_ret,
        retain: true, release: true);
  }

  int get type {
    return _objc_msgSend_634(this.pointer, _sel_type);
  }

  objc.NSData? get data {
    final _ret = _objc_msgSend_325(this.pointer, _sel_data);
    return _ret.address == 0
        ? null
        : objc.NSData.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSString? get string {
    final _ret = _objc_msgSend_13(this.pointer, _sel_string);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  @override
  NSURLSessionWebSocketMessage init() {
    final _ret = _objc_msgSend_40(this.pointer, _sel_init);
    return NSURLSessionWebSocketMessage.castFromPointer(_ret,
        retain: true, release: true);
  }

  static NSURLSessionWebSocketMessage new1() {
    final _ret =
        _objc_msgSend_40(_class_NSURLSessionWebSocketMessage, _sel_new);
    return NSURLSessionWebSocketMessage.castFromPointer(_ret,
        retain: false, release: true);
  }

  static NSURLSessionWebSocketMessage allocWithZone_(
      ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_47(
        _class_NSURLSessionWebSocketMessage, _sel_allocWithZone_, zone);
    return NSURLSessionWebSocketMessage.castFromPointer(_ret,
        retain: false, release: true);
  }

  static NSURLSessionWebSocketMessage alloc() {
    final _ret =
        _objc_msgSend_40(_class_NSURLSessionWebSocketMessage, _sel_alloc);
    return NSURLSessionWebSocketMessage.castFromPointer(_ret,
        retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.NSObject aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.NSObject? anArgument) {
    _objc_msgSend_48(
        _class_NSURLSessionWebSocketMessage,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  static void cancelPreviousPerformRequestsWithTarget_(objc.NSObject aTarget) {
    _objc_msgSend_49(_class_NSURLSessionWebSocketMessage,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_7(_class_NSURLSessionWebSocketMessage,
        _sel_accessInstanceVariablesDirectly);
  }

  static bool useStoredAccessor() {
    return _objc_msgSend_7(
        _class_NSURLSessionWebSocketMessage, _sel_useStoredAccessor);
  }

  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_50(_class_NSURLSessionWebSocketMessage,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_51(_class_NSURLSessionWebSocketMessage,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_52(
        _class_NSURLSessionWebSocketMessage,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_6(_class_NSURLSessionWebSocketMessage,
        _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSObject classForKeyedUnarchiver() {
    final _ret = _objc_msgSend_40(
        _class_NSURLSessionWebSocketMessage, _sel_classForKeyedUnarchiver);
    return objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }
}

late final _class_NSURLSessionWebSocketMessage =
    objc.getClass("NSURLSessionWebSocketMessage");

abstract class NSURLSessionWebSocketMessageType {
  static const int NSURLSessionWebSocketMessageTypeData = 0;
  static const int NSURLSessionWebSocketMessageTypeString = 1;
}

final _objc_msgSend_634 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Int32 Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_sendMessage_completionHandler_ =
    objc.registerName("sendMessage:completionHandler:");
final _objc_msgSend_635 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCBlock>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCBlock>)>();
void _ObjCBlock_ffiVoid_NSURLSessionWebSocketMessage_NSError_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlock> block,
        ffi.Pointer<objc.ObjCObject> arg0,
        ffi.Pointer<objc.ObjCObject> arg1) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0,
                    ffi.Pointer<objc.ObjCObject> arg1)>>()
        .asFunction<
            void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>()(arg0, arg1);
final _ObjCBlock_ffiVoid_NSURLSessionWebSocketMessage_NSError_closureRegistry =
    <int,
        void Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>{};
int _ObjCBlock_ffiVoid_NSURLSessionWebSocketMessage_NSError_closureRegistryIndex =
    0;
ffi.Pointer<ffi.Void>
    _ObjCBlock_ffiVoid_NSURLSessionWebSocketMessage_NSError_registerClosure(
        void Function(
                ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)
            fn) {
  final id =
      ++_ObjCBlock_ffiVoid_NSURLSessionWebSocketMessage_NSError_closureRegistryIndex;
  _ObjCBlock_ffiVoid_NSURLSessionWebSocketMessage_NSError_closureRegistry[id] =
      fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

void _ObjCBlock_ffiVoid_NSURLSessionWebSocketMessage_NSError_closureTrampoline(
        ffi.Pointer<objc.ObjCBlock> block,
        ffi.Pointer<objc.ObjCObject> arg0,
        ffi.Pointer<objc.ObjCObject> arg1) =>
    _ObjCBlock_ffiVoid_NSURLSessionWebSocketMessage_NSError_closureRegistry[
        block.ref.target.address]!(arg0, arg1);

class ObjCBlock_ffiVoid_NSURLSessionWebSocketMessage_NSError
    extends objc.ObjCBlockBase {
  ObjCBlock_ffiVoid_NSURLSessionWebSocketMessage_NSError._(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = true})
      : super(pointer, retain: retain, release: release);

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_ffiVoid_NSURLSessionWebSocketMessage_NSError castFromPointer(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = false}) {
    return ObjCBlock_ffiVoid_NSURLSessionWebSocketMessage_NSError._(pointer,
        retain: retain, release: release);
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSURLSessionWebSocketMessage_NSError.fromFunctionPointer(
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0,
                      ffi.Pointer<objc.ObjCObject> arg1)>>
          ptr)
      : this._(objc.newBlock(
            _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<objc.ObjCObject>)>(
                    _ObjCBlock_ffiVoid_NSURLSessionWebSocketMessage_NSError_fnPtrTrampoline)
                .cast(),
            ptr.cast()));
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSURLSessionWebSocketMessage_NSError.fromFunction(
      void Function(NSURLSessionWebSocketMessage?, objc.NSError?) fn)
      : this._(objc.newBlock(
            _dartFuncTrampoline ??= ffi.Pointer.fromFunction<ffi.Void Function(ffi.Pointer<objc.ObjCBlock>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>(
                    _ObjCBlock_ffiVoid_NSURLSessionWebSocketMessage_NSError_closureTrampoline)
                .cast(),
            _ObjCBlock_ffiVoid_NSURLSessionWebSocketMessage_NSError_registerClosure(
                (ffi.Pointer<objc.ObjCObject> arg0, ffi.Pointer<objc.ObjCObject> arg1) => fn(
                    arg0.address == 0
                        ? null
                        : NSURLSessionWebSocketMessage.castFromPointer(arg0,
                            retain: true, release: true),
                    arg1.address == 0 ? null : objc.NSError.castFromPointer(arg1, retain: true, release: true)))));
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_NSURLSessionWebSocketMessage_NSError.listener(
      void Function(NSURLSessionWebSocketMessage?, objc.NSError?) fn)
      : this._(objc.newBlock(
            (_dartFuncListenerTrampoline ??= ffi.NativeCallable<ffi.Void Function(ffi.Pointer<objc.ObjCBlock>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>.listener(
                    _ObjCBlock_ffiVoid_NSURLSessionWebSocketMessage_NSError_closureTrampoline)
                  ..keepIsolateAlive = false)
                .nativeFunction
                .cast(),
            _ObjCBlock_ffiVoid_NSURLSessionWebSocketMessage_NSError_registerClosure(
                (ffi.Pointer<objc.ObjCObject> arg0, ffi.Pointer<objc.ObjCObject> arg1) => fn(
                    arg0.address == 0
                        ? null
                        : NSURLSessionWebSocketMessage.castFromPointer(arg0,
                            retain: true, release: true),
                    arg1.address == 0
                        ? null
                        : objc.NSError.castFromPointer(arg1, retain: true, release: true)))));
  static ffi.NativeCallable<
      ffi.Void Function(
          ffi.Pointer<objc.ObjCBlock>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCObject>)>? _dartFuncListenerTrampoline;

  void call(NSURLSessionWebSocketMessage? arg0, objc.NSError? arg1) =>
      pointer.ref.invoke
              .cast<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<objc.ObjCBlock> block,
                          ffi.Pointer<objc.ObjCObject> arg0,
                          ffi.Pointer<objc.ObjCObject> arg1)>>()
              .asFunction<
                  void Function(
                      ffi.Pointer<objc.ObjCBlock>,
                      ffi.Pointer<objc.ObjCObject>,
                      ffi.Pointer<objc.ObjCObject>)>()(
          pointer, arg0?.pointer ?? ffi.nullptr, arg1?.pointer ?? ffi.nullptr);
}

late final _sel_receiveMessageWithCompletionHandler_ =
    objc.registerName("receiveMessageWithCompletionHandler:");
final _objc_msgSend_636 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCBlock>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCBlock>)>();
late final _sel_sendPingWithPongReceiveHandler_ =
    objc.registerName("sendPingWithPongReceiveHandler:");
final _objc_msgSend_637 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCBlock>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCBlock>)>();

abstract class NSURLSessionWebSocketCloseCode {
  static const int NSURLSessionWebSocketCloseCodeInvalid = 0;
  static const int NSURLSessionWebSocketCloseCodeNormalClosure = 1000;
  static const int NSURLSessionWebSocketCloseCodeGoingAway = 1001;
  static const int NSURLSessionWebSocketCloseCodeProtocolError = 1002;
  static const int NSURLSessionWebSocketCloseCodeUnsupportedData = 1003;
  static const int NSURLSessionWebSocketCloseCodeNoStatusReceived = 1005;
  static const int NSURLSessionWebSocketCloseCodeAbnormalClosure = 1006;
  static const int NSURLSessionWebSocketCloseCodeInvalidFramePayloadData = 1007;
  static const int NSURLSessionWebSocketCloseCodePolicyViolation = 1008;
  static const int NSURLSessionWebSocketCloseCodeMessageTooBig = 1009;
  static const int NSURLSessionWebSocketCloseCodeMandatoryExtensionMissing =
      1010;
  static const int NSURLSessionWebSocketCloseCodeInternalServerError = 1011;
  static const int NSURLSessionWebSocketCloseCodeTLSHandshakeFailure = 1015;
}

late final _sel_cancelWithCloseCode_reason_ =
    objc.registerName("cancelWithCloseCode:reason:");
final _objc_msgSend_638 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Int32,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_maximumMessageSize = objc.registerName("maximumMessageSize");
late final _sel_setMaximumMessageSize_ =
    objc.registerName("setMaximumMessageSize:");
late final _sel_closeCode = objc.registerName("closeCode");
final _objc_msgSend_639 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Int32 Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_closeReason = objc.registerName("closeReason");
late final _sel_webSocketTaskWithURL_ =
    objc.registerName("webSocketTaskWithURL:");
final _objc_msgSend_640 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_webSocketTaskWithURL_protocols_ =
    objc.registerName("webSocketTaskWithURL:protocols:");
final _objc_msgSend_641 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_webSocketTaskWithRequest_ =
    objc.registerName("webSocketTaskWithRequest:");
final _objc_msgSend_642 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
void _ObjCBlock_ffiVoid_NSData_NSURLResponse_NSError_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlock> block,
        ffi.Pointer<objc.ObjCObject> arg0,
        ffi.Pointer<objc.ObjCObject> arg1,
        ffi.Pointer<objc.ObjCObject> arg2) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(
                    ffi.Pointer<objc.ObjCObject> arg0,
                    ffi.Pointer<objc.ObjCObject> arg1,
                    ffi.Pointer<objc.ObjCObject> arg2)>>()
        .asFunction<
            void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>()(arg0, arg1, arg2);
final _ObjCBlock_ffiVoid_NSData_NSURLResponse_NSError_closureRegistry = <int,
    void Function(ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>)>{};
int _ObjCBlock_ffiVoid_NSData_NSURLResponse_NSError_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void>
    _ObjCBlock_ffiVoid_NSData_NSURLResponse_NSError_registerClosure(
        void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)
            fn) {
  final id =
      ++_ObjCBlock_ffiVoid_NSData_NSURLResponse_NSError_closureRegistryIndex;
  _ObjCBlock_ffiVoid_NSData_NSURLResponse_NSError_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

void _ObjCBlock_ffiVoid_NSData_NSURLResponse_NSError_closureTrampoline(
        ffi.Pointer<objc.ObjCBlock> block,
        ffi.Pointer<objc.ObjCObject> arg0,
        ffi.Pointer<objc.ObjCObject> arg1,
        ffi.Pointer<objc.ObjCObject> arg2) =>
    _ObjCBlock_ffiVoid_NSData_NSURLResponse_NSError_closureRegistry[
        block.ref.target.address]!(arg0, arg1, arg2);

class ObjCBlock_ffiVoid_NSData_NSURLResponse_NSError
    extends objc.ObjCBlockBase {
  ObjCBlock_ffiVoid_NSData_NSURLResponse_NSError._(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = true})
      : super(pointer, retain: retain, release: release);

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_ffiVoid_NSData_NSURLResponse_NSError castFromPointer(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = false}) {
    return ObjCBlock_ffiVoid_NSData_NSURLResponse_NSError._(pointer,
        retain: retain, release: release);
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSData_NSURLResponse_NSError.fromFunctionPointer(
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<objc.ObjCObject> arg0,
                      ffi.Pointer<objc.ObjCObject> arg1,
                      ffi.Pointer<objc.ObjCObject> arg2)>>
          ptr)
      : this._(objc.newBlock(
            _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<objc.ObjCObject>)>(
                    _ObjCBlock_ffiVoid_NSData_NSURLResponse_NSError_fnPtrTrampoline)
                .cast(),
            ptr.cast()));
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSData_NSURLResponse_NSError.fromFunction(
      void Function(objc.NSData?, NSURLResponse?, objc.NSError?) fn)
      : this._(objc.newBlock(
            _dartFuncTrampoline ??=
                ffi.Pointer.fromFunction<ffi.Void Function(ffi.Pointer<objc.ObjCBlock>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>(
                        _ObjCBlock_ffiVoid_NSData_NSURLResponse_NSError_closureTrampoline)
                    .cast(),
            _ObjCBlock_ffiVoid_NSData_NSURLResponse_NSError_registerClosure(
                (ffi.Pointer<objc.ObjCObject> arg0,
                        ffi.Pointer<objc.ObjCObject> arg1,
                        ffi.Pointer<objc.ObjCObject> arg2) =>
                    fn(
                        arg0.address == 0 ? null : objc.NSData.castFromPointer(arg0, retain: true, release: true),
                        arg1.address == 0 ? null : NSURLResponse.castFromPointer(arg1, retain: true, release: true),
                        arg2.address == 0 ? null : objc.NSError.castFromPointer(arg2, retain: true, release: true)))));
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_NSData_NSURLResponse_NSError.listener(
      void Function(objc.NSData?, NSURLResponse?, objc.NSError?) fn)
      : this._(objc.newBlock(
            (_dartFuncListenerTrampoline ??=
                    ffi.NativeCallable<ffi.Void Function(ffi.Pointer<objc.ObjCBlock>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>.listener(
                        _ObjCBlock_ffiVoid_NSData_NSURLResponse_NSError_closureTrampoline)
                      ..keepIsolateAlive = false)
                .nativeFunction
                .cast(),
            _ObjCBlock_ffiVoid_NSData_NSURLResponse_NSError_registerClosure(
                (ffi.Pointer<objc.ObjCObject> arg0,
                        ffi.Pointer<objc.ObjCObject> arg1,
                        ffi.Pointer<objc.ObjCObject> arg2) =>
                    fn(
                        arg0.address == 0
                            ? null
                            : objc.NSData.castFromPointer(arg0, retain: true, release: true),
                        arg1.address == 0 ? null : NSURLResponse.castFromPointer(arg1, retain: true, release: true),
                        arg2.address == 0 ? null : objc.NSError.castFromPointer(arg2, retain: true, release: true)))));
  static ffi.NativeCallable<
      ffi.Void Function(
          ffi.Pointer<objc.ObjCBlock>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCObject>)>? _dartFuncListenerTrampoline;

  void call(objc.NSData? arg0, NSURLResponse? arg1, objc.NSError? arg2) =>
      pointer.ref.invoke
              .cast<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<objc.ObjCBlock> block,
                          ffi.Pointer<objc.ObjCObject> arg0,
                          ffi.Pointer<objc.ObjCObject> arg1,
                          ffi.Pointer<objc.ObjCObject> arg2)>>()
              .asFunction<
                  void Function(
                      ffi.Pointer<objc.ObjCBlock>,
                      ffi.Pointer<objc.ObjCObject>,
                      ffi.Pointer<objc.ObjCObject>,
                      ffi.Pointer<objc.ObjCObject>)>()(
          pointer,
          arg0?.pointer ?? ffi.nullptr,
          arg1?.pointer ?? ffi.nullptr,
          arg2?.pointer ?? ffi.nullptr);
}

late final _sel_dataTaskWithRequest_completionHandler_ =
    objc.registerName("dataTaskWithRequest:completionHandler:");
final _objc_msgSend_643 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCBlock>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCBlock>)>();
late final _sel_dataTaskWithURL_completionHandler_ =
    objc.registerName("dataTaskWithURL:completionHandler:");
final _objc_msgSend_644 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCBlock>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCBlock>)>();
late final _sel_uploadTaskWithRequest_fromFile_completionHandler_ =
    objc.registerName("uploadTaskWithRequest:fromFile:completionHandler:");
final _objc_msgSend_645 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCBlock>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCBlock>)>();
late final _sel_uploadTaskWithRequest_fromData_completionHandler_ =
    objc.registerName("uploadTaskWithRequest:fromData:completionHandler:");
final _objc_msgSend_646 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCBlock>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCBlock>)>();
late final _sel_uploadTaskWithResumeData_completionHandler_ =
    objc.registerName("uploadTaskWithResumeData:completionHandler:");
final _objc_msgSend_647 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCBlock>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCBlock>)>();
void _ObjCBlock_ffiVoid_NSURL_NSURLResponse_NSError_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlock> block,
        ffi.Pointer<objc.ObjCObject> arg0,
        ffi.Pointer<objc.ObjCObject> arg1,
        ffi.Pointer<objc.ObjCObject> arg2) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(
                    ffi.Pointer<objc.ObjCObject> arg0,
                    ffi.Pointer<objc.ObjCObject> arg1,
                    ffi.Pointer<objc.ObjCObject> arg2)>>()
        .asFunction<
            void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>()(arg0, arg1, arg2);
final _ObjCBlock_ffiVoid_NSURL_NSURLResponse_NSError_closureRegistry = <int,
    void Function(ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>,
        ffi.Pointer<objc.ObjCObject>)>{};
int _ObjCBlock_ffiVoid_NSURL_NSURLResponse_NSError_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void>
    _ObjCBlock_ffiVoid_NSURL_NSURLResponse_NSError_registerClosure(
        void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)
            fn) {
  final id =
      ++_ObjCBlock_ffiVoid_NSURL_NSURLResponse_NSError_closureRegistryIndex;
  _ObjCBlock_ffiVoid_NSURL_NSURLResponse_NSError_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

void _ObjCBlock_ffiVoid_NSURL_NSURLResponse_NSError_closureTrampoline(
        ffi.Pointer<objc.ObjCBlock> block,
        ffi.Pointer<objc.ObjCObject> arg0,
        ffi.Pointer<objc.ObjCObject> arg1,
        ffi.Pointer<objc.ObjCObject> arg2) =>
    _ObjCBlock_ffiVoid_NSURL_NSURLResponse_NSError_closureRegistry[
        block.ref.target.address]!(arg0, arg1, arg2);

class ObjCBlock_ffiVoid_NSURL_NSURLResponse_NSError extends objc.ObjCBlockBase {
  ObjCBlock_ffiVoid_NSURL_NSURLResponse_NSError._(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = true})
      : super(pointer, retain: retain, release: release);

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_ffiVoid_NSURL_NSURLResponse_NSError castFromPointer(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = false}) {
    return ObjCBlock_ffiVoid_NSURL_NSURLResponse_NSError._(pointer,
        retain: retain, release: release);
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSURL_NSURLResponse_NSError.fromFunctionPointer(
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<objc.ObjCObject> arg0,
                      ffi.Pointer<objc.ObjCObject> arg1,
                      ffi.Pointer<objc.ObjCObject> arg2)>>
          ptr)
      : this._(objc.newBlock(
            _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(
                            ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<objc.ObjCObject>,
                            ffi.Pointer<objc.ObjCObject>)>(
                    _ObjCBlock_ffiVoid_NSURL_NSURLResponse_NSError_fnPtrTrampoline)
                .cast(),
            ptr.cast()));
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSURL_NSURLResponse_NSError.fromFunction(
      void Function(objc.NSURL?, NSURLResponse?, objc.NSError?) fn)
      : this._(objc.newBlock(
            _dartFuncTrampoline ??=
                ffi.Pointer.fromFunction<ffi.Void Function(ffi.Pointer<objc.ObjCBlock>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>(
                        _ObjCBlock_ffiVoid_NSURL_NSURLResponse_NSError_closureTrampoline)
                    .cast(),
            _ObjCBlock_ffiVoid_NSURL_NSURLResponse_NSError_registerClosure(
                (ffi.Pointer<objc.ObjCObject> arg0,
                        ffi.Pointer<objc.ObjCObject> arg1,
                        ffi.Pointer<objc.ObjCObject> arg2) =>
                    fn(
                        arg0.address == 0 ? null : objc.NSURL.castFromPointer(arg0, retain: true, release: true),
                        arg1.address == 0 ? null : NSURLResponse.castFromPointer(arg1, retain: true, release: true),
                        arg2.address == 0 ? null : objc.NSError.castFromPointer(arg2, retain: true, release: true)))));
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_NSURL_NSURLResponse_NSError.listener(
      void Function(objc.NSURL?, NSURLResponse?, objc.NSError?) fn)
      : this._(objc.newBlock(
            (_dartFuncListenerTrampoline ??=
                    ffi.NativeCallable<ffi.Void Function(ffi.Pointer<objc.ObjCBlock>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCObject>)>.listener(
                        _ObjCBlock_ffiVoid_NSURL_NSURLResponse_NSError_closureTrampoline)
                      ..keepIsolateAlive = false)
                .nativeFunction
                .cast(),
            _ObjCBlock_ffiVoid_NSURL_NSURLResponse_NSError_registerClosure((ffi.Pointer<objc.ObjCObject> arg0,
                    ffi.Pointer<objc.ObjCObject> arg1,
                    ffi.Pointer<objc.ObjCObject> arg2) =>
                fn(
                    arg0.address == 0
                        ? null
                        : objc.NSURL.castFromPointer(arg0, retain: true, release: true),
                    arg1.address == 0 ? null : NSURLResponse.castFromPointer(arg1, retain: true, release: true),
                    arg2.address == 0 ? null : objc.NSError.castFromPointer(arg2, retain: true, release: true)))));
  static ffi.NativeCallable<
      ffi.Void Function(
          ffi.Pointer<objc.ObjCBlock>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCObject>,
          ffi.Pointer<objc.ObjCObject>)>? _dartFuncListenerTrampoline;

  void call(objc.NSURL? arg0, NSURLResponse? arg1, objc.NSError? arg2) =>
      pointer.ref.invoke
              .cast<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<objc.ObjCBlock> block,
                          ffi.Pointer<objc.ObjCObject> arg0,
                          ffi.Pointer<objc.ObjCObject> arg1,
                          ffi.Pointer<objc.ObjCObject> arg2)>>()
              .asFunction<
                  void Function(
                      ffi.Pointer<objc.ObjCBlock>,
                      ffi.Pointer<objc.ObjCObject>,
                      ffi.Pointer<objc.ObjCObject>,
                      ffi.Pointer<objc.ObjCObject>)>()(
          pointer,
          arg0?.pointer ?? ffi.nullptr,
          arg1?.pointer ?? ffi.nullptr,
          arg2?.pointer ?? ffi.nullptr);
}

late final _sel_downloadTaskWithRequest_completionHandler_ =
    objc.registerName("downloadTaskWithRequest:completionHandler:");
final _objc_msgSend_648 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCBlock>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCBlock>)>();
late final _sel_downloadTaskWithURL_completionHandler_ =
    objc.registerName("downloadTaskWithURL:completionHandler:");
final _objc_msgSend_649 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCBlock>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCBlock>)>();
late final _sel_downloadTaskWithResumeData_completionHandler_ =
    objc.registerName("downloadTaskWithResumeData:completionHandler:");
final _objc_msgSend_650 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCBlock>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCBlock>)>();

class NSProtocolChecker extends NSProxy {
  NSProtocolChecker._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSProtocolChecker] that points to the same underlying object as [other].
  NSProtocolChecker.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSProtocolChecker] that wraps the given raw object pointer.
  NSProtocolChecker.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSProtocolChecker].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSProtocolChecker);
  }

  objc.Protocol get protocol {
    final _ret = _objc_msgSend_651(this.pointer, _sel_protocol);
    return objc.Protocol.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSObject? get target {
    final _ret = _objc_msgSend_457(this.pointer, _sel_target);
    return _ret.address == 0
        ? null
        : objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }

  static NSProtocolChecker protocolCheckerWithTarget_protocol_(
      objc.NSObject anObject, objc.Protocol aProtocol) {
    final _ret = _objc_msgSend_652(
        _class_NSProtocolChecker,
        _sel_protocolCheckerWithTarget_protocol_,
        anObject.pointer,
        aProtocol.pointer);
    return NSProtocolChecker.castFromPointer(_ret, retain: true, release: true);
  }

  NSProtocolChecker initWithTarget_protocol_(
      objc.NSObject anObject, objc.Protocol aProtocol) {
    final _ret = _objc_msgSend_652(this.pointer, _sel_initWithTarget_protocol_,
        anObject.pointer, aProtocol.pointer);
    return NSProtocolChecker.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSObject alloc() {
    final _ret = _objc_msgSend_40(_class_NSProtocolChecker, _sel_alloc);
    return objc.NSObject.castFromPointer(_ret, retain: false, release: true);
  }

  static bool respondsToSelector_(ffi.Pointer<objc.ObjCSelector> aSelector) {
    return _objc_msgSend_228(
        _class_NSProtocolChecker, _sel_respondsToSelector_, aSelector);
  }
}

late final _class_NSProtocolChecker = objc.getClass("NSProtocolChecker");
final _objc_msgSend_651 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_target = objc.registerName("target");
late final _sel_protocolCheckerWithTarget_protocol_ =
    objc.registerName("protocolCheckerWithTarget:protocol:");
final _objc_msgSend_652 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_initWithTarget_protocol_ =
    objc.registerName("initWithTarget:protocol:");

class NSTask extends objc.NSObject {
  NSTask._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSTask] that points to the same underlying object as [other].
  NSTask.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSTask] that wraps the given raw object pointer.
  NSTask.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSTask].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(obj.pointer, _sel_isKindOfClass_, _class_NSTask);
  }

  @override
  NSTask init() {
    final _ret = _objc_msgSend_40(this.pointer, _sel_init);
    return NSTask.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSURL? get executableURL {
    final _ret = _objc_msgSend_10(this.pointer, _sel_executableURL);
    return _ret.address == 0
        ? null
        : objc.NSURL.castFromPointer(_ret, retain: true, release: true);
  }

  set executableURL(objc.NSURL? value) {
    return _objc_msgSend_566(
        this.pointer, _sel_setExecutableURL_, value?.pointer ?? ffi.nullptr);
  }

  objc.NSArray? get arguments {
    final _ret = _objc_msgSend_69(this.pointer, _sel_arguments);
    return _ret.address == 0
        ? null
        : objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  set arguments(objc.NSArray? value) {
    return _objc_msgSend_605(
        this.pointer, _sel_setArguments_, value?.pointer ?? ffi.nullptr);
  }

  objc.NSDictionary? get environment {
    final _ret = _objc_msgSend_65(this.pointer, _sel_environment);
    return _ret.address == 0
        ? null
        : objc.NSDictionary.castFromPointer(_ret, retain: true, release: true);
  }

  set environment(objc.NSDictionary? value) {
    return _objc_msgSend_173(
        this.pointer, _sel_setEnvironment_, value?.pointer ?? ffi.nullptr);
  }

  objc.NSURL? get currentDirectoryURL {
    final _ret = _objc_msgSend_10(this.pointer, _sel_currentDirectoryURL);
    return _ret.address == 0
        ? null
        : objc.NSURL.castFromPointer(_ret, retain: true, release: true);
  }

  set currentDirectoryURL(objc.NSURL? value) {
    return _objc_msgSend_566(this.pointer, _sel_setCurrentDirectoryURL_,
        value?.pointer ?? ffi.nullptr);
  }

  objc.NSData? get launchRequirementData {
    final _ret = _objc_msgSend_325(this.pointer, _sel_launchRequirementData);
    return _ret.address == 0
        ? null
        : objc.NSData.castFromPointer(_ret, retain: true, release: true);
  }

  set launchRequirementData(objc.NSData? value) {
    return _objc_msgSend_571(this.pointer, _sel_setLaunchRequirementData_,
        value?.pointer ?? ffi.nullptr);
  }

  objc.NSObject? get standardInput {
    final _ret = _objc_msgSend_66(this.pointer, _sel_standardInput);
    return _ret.address == 0
        ? null
        : objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }

  set standardInput(objc.NSObject? value) {
    return _objc_msgSend_188(
        this.pointer, _sel_setStandardInput_, value?.pointer ?? ffi.nullptr);
  }

  objc.NSObject? get standardOutput {
    final _ret = _objc_msgSend_66(this.pointer, _sel_standardOutput);
    return _ret.address == 0
        ? null
        : objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }

  set standardOutput(objc.NSObject? value) {
    return _objc_msgSend_188(
        this.pointer, _sel_setStandardOutput_, value?.pointer ?? ffi.nullptr);
  }

  objc.NSObject? get standardError {
    final _ret = _objc_msgSend_66(this.pointer, _sel_standardError);
    return _ret.address == 0
        ? null
        : objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }

  set standardError(objc.NSObject? value) {
    return _objc_msgSend_188(
        this.pointer, _sel_setStandardError_, value?.pointer ?? ffi.nullptr);
  }

  bool launchAndReturnError_(ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    return _objc_msgSend_8(this.pointer, _sel_launchAndReturnError_, error);
  }

  void interrupt() {
    _objc_msgSend_82(this.pointer, _sel_interrupt);
  }

  void terminate() {
    _objc_msgSend_82(this.pointer, _sel_terminate);
  }

  bool suspend() {
    return _objc_msgSend_7(this.pointer, _sel_suspend);
  }

  bool resume() {
    return _objc_msgSend_7(this.pointer, _sel_resume);
  }

  int get processIdentifier {
    return _objc_msgSend_264(this.pointer, _sel_processIdentifier);
  }

  bool get running {
    return _objc_msgSend_7(this.pointer, _sel_isRunning);
  }

  int get terminationStatus {
    return _objc_msgSend_264(this.pointer, _sel_terminationStatus);
  }

  int get terminationReason {
    return _objc_msgSend_653(this.pointer, _sel_terminationReason);
  }

  ObjCBlock_ffiVoid_NSTask? get terminationHandler {
    final _ret = _objc_msgSend_654(this.pointer, _sel_terminationHandler);
    return _ret.address == 0
        ? null
        : ObjCBlock_ffiVoid_NSTask.castFromPointer(_ret,
            retain: true, release: true);
  }

  set terminationHandler(ObjCBlock_ffiVoid_NSTask? value) {
    return _objc_msgSend_655(this.pointer, _sel_setTerminationHandler_,
        value?.pointer ?? ffi.nullptr);
  }

  int get qualityOfService {
    return _objc_msgSend_454(this.pointer, _sel_qualityOfService);
  }

  set qualityOfService(int value) {
    return _objc_msgSend_455(this.pointer, _sel_setQualityOfService_, value);
  }

  static NSTask?
      launchedTaskWithExecutableURL_arguments_error_terminationHandler_(
          objc.NSURL url,
          objc.NSArray arguments,
          ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error,
          ObjCBlock_ffiVoid_NSTask? terminationHandler) {
    final _ret = _objc_msgSend_656(
        _class_NSTask,
        _sel_launchedTaskWithExecutableURL_arguments_error_terminationHandler_,
        url.pointer,
        arguments.pointer,
        error,
        terminationHandler?.pointer ?? ffi.nullptr);
    return _ret.address == 0
        ? null
        : NSTask.castFromPointer(_ret, retain: true, release: true);
  }

  void waitUntilExit() {
    _objc_msgSend_82(this.pointer, _sel_waitUntilExit);
  }

  objc.NSString? get launchPath {
    final _ret = _objc_msgSend_13(this.pointer, _sel_launchPath);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  set launchPath(objc.NSString? value) {
    return _objc_msgSend_46(
        this.pointer, _sel_setLaunchPath_, value?.pointer ?? ffi.nullptr);
  }

  objc.NSString get currentDirectoryPath {
    final _ret = _objc_msgSend_12(this.pointer, _sel_currentDirectoryPath);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  set currentDirectoryPath(objc.NSString value) {
    return _objc_msgSend_99(
        this.pointer, _sel_setCurrentDirectoryPath_, value.pointer);
  }

  void launch() {
    _objc_msgSend_82(this.pointer, _sel_launch);
  }

  static NSTask launchedTaskWithLaunchPath_arguments_(
      objc.NSString path, objc.NSArray arguments) {
    final _ret = _objc_msgSend_657(
        _class_NSTask,
        _sel_launchedTaskWithLaunchPath_arguments_,
        path.pointer,
        arguments.pointer);
    return NSTask.castFromPointer(_ret, retain: true, release: true);
  }

  static NSTask new1() {
    final _ret = _objc_msgSend_40(_class_NSTask, _sel_new);
    return NSTask.castFromPointer(_ret, retain: false, release: true);
  }

  static NSTask allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_47(_class_NSTask, _sel_allocWithZone_, zone);
    return NSTask.castFromPointer(_ret, retain: false, release: true);
  }

  static NSTask alloc() {
    final _ret = _objc_msgSend_40(_class_NSTask, _sel_alloc);
    return NSTask.castFromPointer(_ret, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.NSObject aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.NSObject? anArgument) {
    _objc_msgSend_48(
        _class_NSTask,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  static void cancelPreviousPerformRequestsWithTarget_(objc.NSObject aTarget) {
    _objc_msgSend_49(_class_NSTask,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_7(_class_NSTask, _sel_accessInstanceVariablesDirectly);
  }

  static bool useStoredAccessor() {
    return _objc_msgSend_7(_class_NSTask, _sel_useStoredAccessor);
  }

  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_50(_class_NSTask,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_51(
        _class_NSTask, _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_52(
        _class_NSTask,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret =
        _objc_msgSend_6(_class_NSTask, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSObject classForKeyedUnarchiver() {
    final _ret = _objc_msgSend_40(_class_NSTask, _sel_classForKeyedUnarchiver);
    return objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }
}

late final _class_NSTask = objc.getClass("NSTask");
late final _sel_setExecutableURL_ = objc.registerName("setExecutableURL:");
late final _sel_setArguments_ = objc.registerName("setArguments:");
late final _sel_setEnvironment_ = objc.registerName("setEnvironment:");
late final _sel_currentDirectoryURL = objc.registerName("currentDirectoryURL");
late final _sel_setCurrentDirectoryURL_ =
    objc.registerName("setCurrentDirectoryURL:");
late final _sel_launchRequirementData =
    objc.registerName("launchRequirementData");
late final _sel_setLaunchRequirementData_ =
    objc.registerName("setLaunchRequirementData:");
late final _sel_standardInput = objc.registerName("standardInput");
late final _sel_setStandardInput_ = objc.registerName("setStandardInput:");
late final _sel_standardOutput = objc.registerName("standardOutput");
late final _sel_setStandardOutput_ = objc.registerName("setStandardOutput:");
late final _sel_standardError = objc.registerName("standardError");
late final _sel_setStandardError_ = objc.registerName("setStandardError:");
late final _sel_launchAndReturnError_ =
    objc.registerName("launchAndReturnError:");
late final _sel_interrupt = objc.registerName("interrupt");
late final _sel_terminate = objc.registerName("terminate");
late final _sel_isRunning = objc.registerName("isRunning");
late final _sel_terminationStatus = objc.registerName("terminationStatus");

abstract class NSTaskTerminationReason {
  static const int NSTaskTerminationReasonExit = 1;
  static const int NSTaskTerminationReasonUncaughtSignal = 2;
}

late final _sel_terminationReason = objc.registerName("terminationReason");
final _objc_msgSend_653 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Int32 Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
void _ObjCBlock_ffiVoid_NSTask_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlock> block, ffi.Pointer<objc.ObjCObject> arg0) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0)>>()
        .asFunction<void Function(ffi.Pointer<objc.ObjCObject>)>()(arg0);
final _ObjCBlock_ffiVoid_NSTask_closureRegistry =
    <int, void Function(ffi.Pointer<objc.ObjCObject>)>{};
int _ObjCBlock_ffiVoid_NSTask_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void> _ObjCBlock_ffiVoid_NSTask_registerClosure(
    void Function(ffi.Pointer<objc.ObjCObject>) fn) {
  final id = ++_ObjCBlock_ffiVoid_NSTask_closureRegistryIndex;
  _ObjCBlock_ffiVoid_NSTask_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

void _ObjCBlock_ffiVoid_NSTask_closureTrampoline(
        ffi.Pointer<objc.ObjCBlock> block, ffi.Pointer<objc.ObjCObject> arg0) =>
    _ObjCBlock_ffiVoid_NSTask_closureRegistry[block.ref.target.address]!(arg0);

class ObjCBlock_ffiVoid_NSTask extends objc.ObjCBlockBase {
  ObjCBlock_ffiVoid_NSTask._(ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false, bool release = true})
      : super(pointer, retain: retain, release: release);

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_ffiVoid_NSTask castFromPointer(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = false}) {
    return ObjCBlock_ffiVoid_NSTask._(pointer,
        retain: retain, release: release);
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSTask.fromFunctionPointer(
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<objc.ObjCObject> arg0)>>
          ptr)
      : this._(objc.newBlock(
            _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<objc.ObjCObject>)>(
                    _ObjCBlock_ffiVoid_NSTask_fnPtrTrampoline)
                .cast(),
            ptr.cast()));
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_NSTask.fromFunction(void Function(NSTask) fn)
      : this._(objc.newBlock(
            _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<objc.ObjCObject>)>(
                    _ObjCBlock_ffiVoid_NSTask_closureTrampoline)
                .cast(),
            _ObjCBlock_ffiVoid_NSTask_registerClosure(
                (ffi.Pointer<objc.ObjCObject> arg0) => fn(
                    NSTask.castFromPointer(arg0,
                        retain: true, release: true)))));
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_NSTask.listener(void Function(NSTask) fn)
      : this._(objc.newBlock(
            (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                        ffi.Void Function(ffi.Pointer<objc.ObjCBlock>,
                            ffi.Pointer<objc.ObjCObject>)>.listener(
                    _ObjCBlock_ffiVoid_NSTask_closureTrampoline)
                  ..keepIsolateAlive = false)
                .nativeFunction
                .cast(),
            _ObjCBlock_ffiVoid_NSTask_registerClosure(
                (ffi.Pointer<objc.ObjCObject> arg0) => fn(
                    NSTask.castFromPointer(arg0,
                        retain: true, release: true)))));
  static ffi.NativeCallable<
          ffi.Void Function(
              ffi.Pointer<objc.ObjCBlock>, ffi.Pointer<objc.ObjCObject>)>?
      _dartFuncListenerTrampoline;

  void call(NSTask arg0) => pointer.ref.invoke
      .cast<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<objc.ObjCBlock> block,
                  ffi.Pointer<objc.ObjCObject> arg0)>>()
      .asFunction<
          void Function(ffi.Pointer<objc.ObjCBlock>,
              ffi.Pointer<objc.ObjCObject>)>()(pointer, arg0.pointer);
}

late final _sel_terminationHandler = objc.registerName("terminationHandler");
final _objc_msgSend_654 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCBlock> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCBlock> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setTerminationHandler_ =
    objc.registerName("setTerminationHandler:");
final _objc_msgSend_655 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCBlock>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCBlock>)>();
late final _sel_launchedTaskWithExecutableURL_arguments_error_terminationHandler_ =
    objc.registerName(
        "launchedTaskWithExecutableURL:arguments:error:terminationHandler:");
final _objc_msgSend_656 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
                ffi.Pointer<objc.ObjCBlock>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>,
            ffi.Pointer<objc.ObjCBlock>)>();
late final _sel_waitUntilExit = objc.registerName("waitUntilExit");
late final _sel_launchPath = objc.registerName("launchPath");
late final _sel_setLaunchPath_ = objc.registerName("setLaunchPath:");
late final _sel_setCurrentDirectoryPath_ =
    objc.registerName("setCurrentDirectoryPath:");
late final _sel_launch = objc.registerName("launch");
late final _sel_launchedTaskWithLaunchPath_arguments_ =
    objc.registerName("launchedTaskWithLaunchPath:arguments:");
final _objc_msgSend_657 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();

class NSXMLElement extends NSXMLNode {
  NSXMLElement._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSXMLElement] that points to the same underlying object as [other].
  NSXMLElement.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSXMLElement] that wraps the given raw object pointer.
  NSXMLElement.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSXMLElement].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSXMLElement);
  }

  NSXMLElement initWithName_(objc.NSString name) {
    final _ret =
        _objc_msgSend_35(this.pointer, _sel_initWithName_, name.pointer);
    return NSXMLElement.castFromPointer(_ret, retain: true, release: true);
  }

  NSXMLElement initWithName_URI_(objc.NSString name, objc.NSString? URI) {
    final _ret = _objc_msgSend_694(this.pointer, _sel_initWithName_URI_,
        name.pointer, URI?.pointer ?? ffi.nullptr);
    return NSXMLElement.castFromPointer(_ret, retain: true, release: true);
  }

  NSXMLElement initWithName_stringValue_(
      objc.NSString name, objc.NSString? string) {
    final _ret = _objc_msgSend_694(this.pointer, _sel_initWithName_stringValue_,
        name.pointer, string?.pointer ?? ffi.nullptr);
    return NSXMLElement.castFromPointer(_ret, retain: true, release: true);
  }

  NSXMLElement? initWithXMLString_error_(
      objc.NSString string, ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    final _ret = _objc_msgSend_695(
        this.pointer, _sel_initWithXMLString_error_, string.pointer, error);
    return _ret.address == 0
        ? null
        : NSXMLElement.castFromPointer(_ret, retain: true, release: true);
  }

  @override
  NSXMLElement initWithKind_options_(int kind, int options) {
    final _ret = _objc_msgSend_659(
        this.pointer, _sel_initWithKind_options_, kind, options);
    return NSXMLElement.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSArray elementsForName_(objc.NSString name) {
    final _ret =
        _objc_msgSend_445(this.pointer, _sel_elementsForName_, name.pointer);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSArray elementsForLocalName_URI_(
      objc.NSString localName, objc.NSString? URI) {
    final _ret = _objc_msgSend_696(this.pointer, _sel_elementsForLocalName_URI_,
        localName.pointer, URI?.pointer ?? ffi.nullptr);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  void addAttribute_(NSXMLNode attribute) {
    _objc_msgSend_673(this.pointer, _sel_addAttribute_, attribute.pointer);
  }

  void removeAttributeForName_(objc.NSString name) {
    _objc_msgSend_98(this.pointer, _sel_removeAttributeForName_, name.pointer);
  }

  objc.NSArray? get attributes {
    final _ret = _objc_msgSend_69(this.pointer, _sel_attributes);
    return _ret.address == 0
        ? null
        : objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  set attributes(objc.NSArray? value) {
    return _objc_msgSend_605(
        this.pointer, _sel_setAttributes_, value?.pointer ?? ffi.nullptr);
  }

  void setAttributesWithDictionary_(objc.NSDictionary attributes) {
    _objc_msgSend_697(
        this.pointer, _sel_setAttributesWithDictionary_, attributes.pointer);
  }

  NSXMLNode? attributeForName_(objc.NSString name) {
    final _ret =
        _objc_msgSend_677(this.pointer, _sel_attributeForName_, name.pointer);
    return _ret.address == 0
        ? null
        : NSXMLNode.castFromPointer(_ret, retain: true, release: true);
  }

  NSXMLNode? attributeForLocalName_URI_(
      objc.NSString localName, objc.NSString? URI) {
    final _ret = _objc_msgSend_698(
        this.pointer,
        _sel_attributeForLocalName_URI_,
        localName.pointer,
        URI?.pointer ?? ffi.nullptr);
    return _ret.address == 0
        ? null
        : NSXMLNode.castFromPointer(_ret, retain: true, release: true);
  }

  void addNamespace_(NSXMLNode aNamespace) {
    _objc_msgSend_673(this.pointer, _sel_addNamespace_, aNamespace.pointer);
  }

  void removeNamespaceForPrefix_(objc.NSString name) {
    _objc_msgSend_98(
        this.pointer, _sel_removeNamespaceForPrefix_, name.pointer);
  }

  objc.NSArray? get namespaces {
    final _ret = _objc_msgSend_69(this.pointer, _sel_namespaces);
    return _ret.address == 0
        ? null
        : objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  set namespaces(objc.NSArray? value) {
    return _objc_msgSend_605(
        this.pointer, _sel_setNamespaces_, value?.pointer ?? ffi.nullptr);
  }

  NSXMLNode? namespaceForPrefix_(objc.NSString name) {
    final _ret =
        _objc_msgSend_677(this.pointer, _sel_namespaceForPrefix_, name.pointer);
    return _ret.address == 0
        ? null
        : NSXMLNode.castFromPointer(_ret, retain: true, release: true);
  }

  NSXMLNode? resolveNamespaceForName_(objc.NSString name) {
    final _ret = _objc_msgSend_677(
        this.pointer, _sel_resolveNamespaceForName_, name.pointer);
    return _ret.address == 0
        ? null
        : NSXMLNode.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSString? resolvePrefixForNamespaceURI_(objc.NSString namespaceURI) {
    final _ret = _objc_msgSend_14(
        this.pointer, _sel_resolvePrefixForNamespaceURI_, namespaceURI.pointer);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  void insertChild_atIndex_(NSXMLNode child, int index) {
    _objc_msgSend_671(
        this.pointer, _sel_insertChild_atIndex_, child.pointer, index);
  }

  void insertChildren_atIndex_(objc.NSArray children, int index) {
    _objc_msgSend_672(
        this.pointer, _sel_insertChildren_atIndex_, children.pointer, index);
  }

  void removeChildAtIndex_(int index) {
    _objc_msgSend_414(this.pointer, _sel_removeChildAtIndex_, index);
  }

  void setChildren_(objc.NSArray? children) {
    _objc_msgSend_260(
        this.pointer, _sel_setChildren_, children?.pointer ?? ffi.nullptr);
  }

  void addChild_(NSXMLNode child) {
    _objc_msgSend_673(this.pointer, _sel_addChild_, child.pointer);
  }

  void replaceChildAtIndex_withNode_(int index, NSXMLNode node) {
    _objc_msgSend_674(
        this.pointer, _sel_replaceChildAtIndex_withNode_, index, node.pointer);
  }

  void normalizeAdjacentTextNodesPreservingCDATA_(bool preserve) {
    _objc_msgSend_336(this.pointer,
        _sel_normalizeAdjacentTextNodesPreservingCDATA_, preserve);
  }

  void setAttributesAsDictionary_(objc.NSDictionary attributes) {
    _objc_msgSend_697(
        this.pointer, _sel_setAttributesAsDictionary_, attributes.pointer);
  }

  @override
  NSXMLElement init() {
    final _ret = _objc_msgSend_40(this.pointer, _sel_init);
    return NSXMLElement.castFromPointer(_ret, retain: true, release: true);
  }

  @override
  NSXMLElement initWithKind_(int kind) {
    final _ret = _objc_msgSend_658(this.pointer, _sel_initWithKind_, kind);
    return NSXMLElement.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSObject document() {
    final _ret = _objc_msgSend_40(_class_NSXMLElement, _sel_document);
    return objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSObject documentWithRootElement_(NSXMLElement element) {
    final _ret = _objc_msgSend_660(
        _class_NSXMLElement, _sel_documentWithRootElement_, element.pointer);
    return objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSObject elementWithName_(objc.NSString name) {
    final _ret = _objc_msgSend_35(
        _class_NSXMLElement, _sel_elementWithName_, name.pointer);
    return objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSObject elementWithName_URI_(
      objc.NSString name, objc.NSString URI) {
    final _ret = _objc_msgSend_661(_class_NSXMLElement,
        _sel_elementWithName_URI_, name.pointer, URI.pointer);
    return objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSObject elementWithName_stringValue_(
      objc.NSString name, objc.NSString string) {
    final _ret = _objc_msgSend_661(_class_NSXMLElement,
        _sel_elementWithName_stringValue_, name.pointer, string.pointer);
    return objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSObject elementWithName_children_attributes_(
      objc.NSString name, objc.NSArray? children, objc.NSArray? attributes) {
    final _ret = _objc_msgSend_662(
        _class_NSXMLElement,
        _sel_elementWithName_children_attributes_,
        name.pointer,
        children?.pointer ?? ffi.nullptr,
        attributes?.pointer ?? ffi.nullptr);
    return objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSObject attributeWithName_stringValue_(
      objc.NSString name, objc.NSString stringValue) {
    final _ret = _objc_msgSend_661(_class_NSXMLElement,
        _sel_attributeWithName_stringValue_, name.pointer, stringValue.pointer);
    return objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSObject attributeWithName_URI_stringValue_(
      objc.NSString name, objc.NSString URI, objc.NSString stringValue) {
    final _ret = _objc_msgSend_626(
        _class_NSXMLElement,
        _sel_attributeWithName_URI_stringValue_,
        name.pointer,
        URI.pointer,
        stringValue.pointer);
    return objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSObject namespaceWithName_stringValue_(
      objc.NSString name, objc.NSString stringValue) {
    final _ret = _objc_msgSend_661(_class_NSXMLElement,
        _sel_namespaceWithName_stringValue_, name.pointer, stringValue.pointer);
    return objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSObject processingInstructionWithName_stringValue_(
      objc.NSString name, objc.NSString stringValue) {
    final _ret = _objc_msgSend_661(
        _class_NSXMLElement,
        _sel_processingInstructionWithName_stringValue_,
        name.pointer,
        stringValue.pointer);
    return objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSObject commentWithStringValue_(objc.NSString stringValue) {
    final _ret = _objc_msgSend_35(
        _class_NSXMLElement, _sel_commentWithStringValue_, stringValue.pointer);
    return objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSObject textWithStringValue_(objc.NSString stringValue) {
    final _ret = _objc_msgSend_35(
        _class_NSXMLElement, _sel_textWithStringValue_, stringValue.pointer);
    return objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSObject? DTDNodeWithXMLString_(objc.NSString string) {
    final _ret = _objc_msgSend_2(
        _class_NSXMLElement, _sel_DTDNodeWithXMLString_, string.pointer);
    return _ret.address == 0
        ? null
        : objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSString localNameForName_(objc.NSString name) {
    final _ret = _objc_msgSend_297(
        _class_NSXMLElement, _sel_localNameForName_, name.pointer);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSString? prefixForName_(objc.NSString name) {
    final _ret = _objc_msgSend_14(
        _class_NSXMLElement, _sel_prefixForName_, name.pointer);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  static NSXMLNode? predefinedNamespaceForPrefix_(objc.NSString name) {
    final _ret = _objc_msgSend_677(
        _class_NSXMLElement, _sel_predefinedNamespaceForPrefix_, name.pointer);
    return _ret.address == 0
        ? null
        : NSXMLNode.castFromPointer(_ret, retain: true, release: true);
  }

  static NSXMLElement new1() {
    final _ret = _objc_msgSend_40(_class_NSXMLElement, _sel_new);
    return NSXMLElement.castFromPointer(_ret, retain: false, release: true);
  }

  static NSXMLElement allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_47(_class_NSXMLElement, _sel_allocWithZone_, zone);
    return NSXMLElement.castFromPointer(_ret, retain: false, release: true);
  }

  static NSXMLElement alloc() {
    final _ret = _objc_msgSend_40(_class_NSXMLElement, _sel_alloc);
    return NSXMLElement.castFromPointer(_ret, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.NSObject aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.NSObject? anArgument) {
    _objc_msgSend_48(
        _class_NSXMLElement,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  static void cancelPreviousPerformRequestsWithTarget_(objc.NSObject aTarget) {
    _objc_msgSend_49(_class_NSXMLElement,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_7(
        _class_NSXMLElement, _sel_accessInstanceVariablesDirectly);
  }

  static bool useStoredAccessor() {
    return _objc_msgSend_7(_class_NSXMLElement, _sel_useStoredAccessor);
  }

  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_50(_class_NSXMLElement,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_51(_class_NSXMLElement,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_52(
        _class_NSXMLElement,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_6(
        _class_NSXMLElement, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSObject classForKeyedUnarchiver() {
    final _ret =
        _objc_msgSend_40(_class_NSXMLElement, _sel_classForKeyedUnarchiver);
    return objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }
}

late final _class_NSXMLElement = objc.getClass("NSXMLElement");

class NSXMLNode extends objc.NSObject {
  NSXMLNode._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSXMLNode] that points to the same underlying object as [other].
  NSXMLNode.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSXMLNode] that wraps the given raw object pointer.
  NSXMLNode.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSXMLNode].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(obj.pointer, _sel_isKindOfClass_, _class_NSXMLNode);
  }

  @override
  NSXMLNode init() {
    final _ret = _objc_msgSend_40(this.pointer, _sel_init);
    return NSXMLNode.castFromPointer(_ret, retain: true, release: true);
  }

  NSXMLNode initWithKind_(int kind) {
    final _ret = _objc_msgSend_658(this.pointer, _sel_initWithKind_, kind);
    return NSXMLNode.castFromPointer(_ret, retain: true, release: true);
  }

  NSXMLNode initWithKind_options_(int kind, int options) {
    final _ret = _objc_msgSend_659(
        this.pointer, _sel_initWithKind_options_, kind, options);
    return NSXMLNode.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSObject document() {
    final _ret = _objc_msgSend_40(_class_NSXMLNode, _sel_document);
    return objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSObject documentWithRootElement_(NSXMLElement element) {
    final _ret = _objc_msgSend_660(
        _class_NSXMLNode, _sel_documentWithRootElement_, element.pointer);
    return objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSObject elementWithName_(objc.NSString name) {
    final _ret =
        _objc_msgSend_35(_class_NSXMLNode, _sel_elementWithName_, name.pointer);
    return objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSObject elementWithName_URI_(
      objc.NSString name, objc.NSString URI) {
    final _ret = _objc_msgSend_661(
        _class_NSXMLNode, _sel_elementWithName_URI_, name.pointer, URI.pointer);
    return objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSObject elementWithName_stringValue_(
      objc.NSString name, objc.NSString string) {
    final _ret = _objc_msgSend_661(_class_NSXMLNode,
        _sel_elementWithName_stringValue_, name.pointer, string.pointer);
    return objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSObject elementWithName_children_attributes_(
      objc.NSString name, objc.NSArray? children, objc.NSArray? attributes) {
    final _ret = _objc_msgSend_662(
        _class_NSXMLNode,
        _sel_elementWithName_children_attributes_,
        name.pointer,
        children?.pointer ?? ffi.nullptr,
        attributes?.pointer ?? ffi.nullptr);
    return objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSObject attributeWithName_stringValue_(
      objc.NSString name, objc.NSString stringValue) {
    final _ret = _objc_msgSend_661(_class_NSXMLNode,
        _sel_attributeWithName_stringValue_, name.pointer, stringValue.pointer);
    return objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSObject attributeWithName_URI_stringValue_(
      objc.NSString name, objc.NSString URI, objc.NSString stringValue) {
    final _ret = _objc_msgSend_626(
        _class_NSXMLNode,
        _sel_attributeWithName_URI_stringValue_,
        name.pointer,
        URI.pointer,
        stringValue.pointer);
    return objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSObject namespaceWithName_stringValue_(
      objc.NSString name, objc.NSString stringValue) {
    final _ret = _objc_msgSend_661(_class_NSXMLNode,
        _sel_namespaceWithName_stringValue_, name.pointer, stringValue.pointer);
    return objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSObject processingInstructionWithName_stringValue_(
      objc.NSString name, objc.NSString stringValue) {
    final _ret = _objc_msgSend_661(
        _class_NSXMLNode,
        _sel_processingInstructionWithName_stringValue_,
        name.pointer,
        stringValue.pointer);
    return objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSObject commentWithStringValue_(objc.NSString stringValue) {
    final _ret = _objc_msgSend_35(
        _class_NSXMLNode, _sel_commentWithStringValue_, stringValue.pointer);
    return objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSObject textWithStringValue_(objc.NSString stringValue) {
    final _ret = _objc_msgSend_35(
        _class_NSXMLNode, _sel_textWithStringValue_, stringValue.pointer);
    return objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSObject? DTDNodeWithXMLString_(objc.NSString string) {
    final _ret = _objc_msgSend_2(
        _class_NSXMLNode, _sel_DTDNodeWithXMLString_, string.pointer);
    return _ret.address == 0
        ? null
        : objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }

  int get kind {
    return _objc_msgSend_663(this.pointer, _sel_kind);
  }

  objc.NSString? get name {
    final _ret = _objc_msgSend_13(this.pointer, _sel_name);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  set name(objc.NSString? value) {
    return _objc_msgSend_46(
        this.pointer, _sel_setName_, value?.pointer ?? ffi.nullptr);
  }

  objc.NSObject? get objectValue {
    final _ret = _objc_msgSend_66(this.pointer, _sel_objectValue);
    return _ret.address == 0
        ? null
        : objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }

  set objectValue(objc.NSObject? value) {
    return _objc_msgSend_188(
        this.pointer, _sel_setObjectValue_, value?.pointer ?? ffi.nullptr);
  }

  objc.NSString? get stringValue {
    final _ret = _objc_msgSend_13(this.pointer, _sel_stringValue);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  set stringValue(objc.NSString? value) {
    return _objc_msgSend_46(
        this.pointer, _sel_setStringValue_, value?.pointer ?? ffi.nullptr);
  }

  void setStringValue_resolvingEntities_(objc.NSString string, bool resolve) {
    _objc_msgSend_664(this.pointer, _sel_setStringValue_resolvingEntities_,
        string.pointer, resolve);
  }

  int get index {
    return _objc_msgSend_29(this.pointer, _sel_index);
  }

  int get level {
    return _objc_msgSend_29(this.pointer, _sel_level);
  }

  NSXMLDocument? get rootDocument {
    final _ret = _objc_msgSend_688(this.pointer, _sel_rootDocument);
    return _ret.address == 0
        ? null
        : NSXMLDocument.castFromPointer(_ret, retain: true, release: true);
  }

  NSXMLNode? get parent {
    final _ret = _objc_msgSend_689(this.pointer, _sel_parent);
    return _ret.address == 0
        ? null
        : NSXMLNode.castFromPointer(_ret, retain: true, release: true);
  }

  int get childCount {
    return _objc_msgSend_29(this.pointer, _sel_childCount);
  }

  objc.NSArray? get children {
    final _ret = _objc_msgSend_69(this.pointer, _sel_children);
    return _ret.address == 0
        ? null
        : objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  NSXMLNode? childAtIndex_(int index) {
    final _ret = _objc_msgSend_690(this.pointer, _sel_childAtIndex_, index);
    return _ret.address == 0
        ? null
        : NSXMLNode.castFromPointer(_ret, retain: true, release: true);
  }

  NSXMLNode? get previousSibling {
    final _ret = _objc_msgSend_689(this.pointer, _sel_previousSibling);
    return _ret.address == 0
        ? null
        : NSXMLNode.castFromPointer(_ret, retain: true, release: true);
  }

  NSXMLNode? get nextSibling {
    final _ret = _objc_msgSend_689(this.pointer, _sel_nextSibling);
    return _ret.address == 0
        ? null
        : NSXMLNode.castFromPointer(_ret, retain: true, release: true);
  }

  NSXMLNode? get previousNode {
    final _ret = _objc_msgSend_689(this.pointer, _sel_previousNode);
    return _ret.address == 0
        ? null
        : NSXMLNode.castFromPointer(_ret, retain: true, release: true);
  }

  NSXMLNode? get nextNode {
    final _ret = _objc_msgSend_689(this.pointer, _sel_nextNode);
    return _ret.address == 0
        ? null
        : NSXMLNode.castFromPointer(_ret, retain: true, release: true);
  }

  void detach() {
    _objc_msgSend_82(this.pointer, _sel_detach);
  }

  objc.NSString? get XPath {
    final _ret = _objc_msgSend_13(this.pointer, _sel_XPath);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSString? get localName {
    final _ret = _objc_msgSend_13(this.pointer, _sel_localName);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSString? get prefix {
    final _ret = _objc_msgSend_13(this.pointer, _sel_prefix);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSString? get URI {
    final _ret = _objc_msgSend_13(this.pointer, _sel_URI);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  set URI(objc.NSString? value) {
    return _objc_msgSend_46(
        this.pointer, _sel_setURI_, value?.pointer ?? ffi.nullptr);
  }

  static objc.NSString localNameForName_(objc.NSString name) {
    final _ret = _objc_msgSend_297(
        _class_NSXMLNode, _sel_localNameForName_, name.pointer);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSString? prefixForName_(objc.NSString name) {
    final _ret =
        _objc_msgSend_14(_class_NSXMLNode, _sel_prefixForName_, name.pointer);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  static NSXMLNode? predefinedNamespaceForPrefix_(objc.NSString name) {
    final _ret = _objc_msgSend_677(
        _class_NSXMLNode, _sel_predefinedNamespaceForPrefix_, name.pointer);
    return _ret.address == 0
        ? null
        : NSXMLNode.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSString get description {
    final _ret = _objc_msgSend_12(this.pointer, _sel_description);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSString get XMLString {
    final _ret = _objc_msgSend_12(this.pointer, _sel_XMLString);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSString XMLStringWithOptions_(int options) {
    final _ret =
        _objc_msgSend_691(this.pointer, _sel_XMLStringWithOptions_, options);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSString canonicalXMLStringPreservingComments_(bool comments) {
    final _ret = _objc_msgSend_692(
        this.pointer, _sel_canonicalXMLStringPreservingComments_, comments);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSArray? nodesForXPath_error_(
      objc.NSString xpath, ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    final _ret = _objc_msgSend_281(
        this.pointer, _sel_nodesForXPath_error_, xpath.pointer, error);
    return _ret.address == 0
        ? null
        : objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSArray? objectsForXQuery_constants_error_(
      objc.NSString xquery,
      objc.NSDictionary? constants,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    final _ret = _objc_msgSend_693(
        this.pointer,
        _sel_objectsForXQuery_constants_error_,
        xquery.pointer,
        constants?.pointer ?? ffi.nullptr,
        error);
    return _ret.address == 0
        ? null
        : objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSArray? objectsForXQuery_error_(
      objc.NSString xquery, ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    final _ret = _objc_msgSend_281(
        this.pointer, _sel_objectsForXQuery_error_, xquery.pointer, error);
    return _ret.address == 0
        ? null
        : objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  static NSXMLNode new1() {
    final _ret = _objc_msgSend_40(_class_NSXMLNode, _sel_new);
    return NSXMLNode.castFromPointer(_ret, retain: false, release: true);
  }

  static NSXMLNode allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_47(_class_NSXMLNode, _sel_allocWithZone_, zone);
    return NSXMLNode.castFromPointer(_ret, retain: false, release: true);
  }

  static NSXMLNode alloc() {
    final _ret = _objc_msgSend_40(_class_NSXMLNode, _sel_alloc);
    return NSXMLNode.castFromPointer(_ret, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.NSObject aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.NSObject? anArgument) {
    _objc_msgSend_48(
        _class_NSXMLNode,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  static void cancelPreviousPerformRequestsWithTarget_(objc.NSObject aTarget) {
    _objc_msgSend_49(_class_NSXMLNode,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_7(
        _class_NSXMLNode, _sel_accessInstanceVariablesDirectly);
  }

  static bool useStoredAccessor() {
    return _objc_msgSend_7(_class_NSXMLNode, _sel_useStoredAccessor);
  }

  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_50(_class_NSXMLNode,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_51(_class_NSXMLNode,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_52(
        _class_NSXMLNode,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret =
        _objc_msgSend_6(_class_NSXMLNode, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSObject classForKeyedUnarchiver() {
    final _ret =
        _objc_msgSend_40(_class_NSXMLNode, _sel_classForKeyedUnarchiver);
    return objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }
}

late final _class_NSXMLNode = objc.getClass("NSXMLNode");

abstract class NSXMLNodeKind {
  static const int NSXMLInvalidKind = 0;
  static const int NSXMLDocumentKind = 1;
  static const int NSXMLElementKind = 2;
  static const int NSXMLAttributeKind = 3;
  static const int NSXMLNamespaceKind = 4;
  static const int NSXMLProcessingInstructionKind = 5;
  static const int NSXMLCommentKind = 6;
  static const int NSXMLTextKind = 7;
  static const int NSXMLDTDKind = 8;
  static const int NSXMLEntityDeclarationKind = 9;
  static const int NSXMLAttributeDeclarationKind = 10;
  static const int NSXMLElementDeclarationKind = 11;
  static const int NSXMLNotationDeclarationKind = 12;
}

late final _sel_initWithKind_ = objc.registerName("initWithKind:");
final _objc_msgSend_658 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Int32)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();

abstract class NSXMLNodeOptions {
  static const int NSXMLNodeOptionsNone = 0;
  static const int NSXMLNodeIsCDATA = 1;
  static const int NSXMLNodeExpandEmptyElement = 2;
  static const int NSXMLNodeCompactEmptyElement = 4;
  static const int NSXMLNodeUseSingleQuotes = 8;
  static const int NSXMLNodeUseDoubleQuotes = 16;
  static const int NSXMLNodeNeverEscapeContents = 32;
  static const int NSXMLDocumentTidyHTML = 512;
  static const int NSXMLDocumentTidyXML = 1024;
  static const int NSXMLDocumentValidate = 8192;
  static const int NSXMLNodeLoadExternalEntitiesAlways = 16384;
  static const int NSXMLNodeLoadExternalEntitiesSameOriginOnly = 32768;
  static const int NSXMLNodeLoadExternalEntitiesNever = 524288;
  static const int NSXMLDocumentXInclude = 65536;
  static const int NSXMLNodePrettyPrint = 131072;
  static const int NSXMLDocumentIncludeContentTypeDeclaration = 262144;
  static const int NSXMLNodePreserveNamespaceOrder = 1048576;
  static const int NSXMLNodePreserveAttributeOrder = 2097152;
  static const int NSXMLNodePreserveEntities = 4194304;
  static const int NSXMLNodePreservePrefixes = 8388608;
  static const int NSXMLNodePreserveCDATA = 16777216;
  static const int NSXMLNodePreserveWhitespace = 33554432;
  static const int NSXMLNodePreserveDTD = 67108864;
  static const int NSXMLNodePreserveCharacterReferences = 134217728;
  static const int NSXMLNodePromoteSignificantWhitespace = 268435456;
  static const int NSXMLNodePreserveEmptyElements = 6;
  static const int NSXMLNodePreserveQuotes = 24;
  static const int NSXMLNodePreserveAll = 4293918750;
}

late final _sel_initWithKind_options_ =
    objc.registerName("initWithKind:options:");
final _objc_msgSend_659 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Int32, ffi.Int32)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int, int)>();
late final _sel_document = objc.registerName("document");
late final _sel_documentWithRootElement_ =
    objc.registerName("documentWithRootElement:");
final _objc_msgSend_660 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_elementWithName_ = objc.registerName("elementWithName:");
late final _sel_elementWithName_URI_ =
    objc.registerName("elementWithName:URI:");
final _objc_msgSend_661 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_elementWithName_stringValue_ =
    objc.registerName("elementWithName:stringValue:");
late final _sel_elementWithName_children_attributes_ =
    objc.registerName("elementWithName:children:attributes:");
final _objc_msgSend_662 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_attributeWithName_stringValue_ =
    objc.registerName("attributeWithName:stringValue:");
late final _sel_attributeWithName_URI_stringValue_ =
    objc.registerName("attributeWithName:URI:stringValue:");
late final _sel_namespaceWithName_stringValue_ =
    objc.registerName("namespaceWithName:stringValue:");
late final _sel_processingInstructionWithName_stringValue_ =
    objc.registerName("processingInstructionWithName:stringValue:");
late final _sel_commentWithStringValue_ =
    objc.registerName("commentWithStringValue:");
late final _sel_textWithStringValue_ =
    objc.registerName("textWithStringValue:");
late final _sel_DTDNodeWithXMLString_ =
    objc.registerName("DTDNodeWithXMLString:");
late final _sel_kind = objc.registerName("kind");
final _objc_msgSend_663 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Int32 Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_objectValue = objc.registerName("objectValue");
late final _sel_setObjectValue_ = objc.registerName("setObjectValue:");
late final _sel_stringValue = objc.registerName("stringValue");
late final _sel_setStringValue_ = objc.registerName("setStringValue:");
late final _sel_setStringValue_resolvingEntities_ =
    objc.registerName("setStringValue:resolvingEntities:");
final _objc_msgSend_664 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Bool)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            bool)>();
late final _sel_index = objc.registerName("index");
late final _sel_level = objc.registerName("level");

class NSXMLDocument extends NSXMLNode {
  NSXMLDocument._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSXMLDocument] that points to the same underlying object as [other].
  NSXMLDocument.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSXMLDocument] that wraps the given raw object pointer.
  NSXMLDocument.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSXMLDocument].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSXMLDocument);
  }

  @override
  NSXMLDocument init() {
    final _ret = _objc_msgSend_40(this.pointer, _sel_init);
    return NSXMLDocument.castFromPointer(_ret, retain: true, release: true);
  }

  NSXMLDocument? initWithXMLString_options_error_(objc.NSString string,
      int mask, ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    final _ret = _objc_msgSend_665(this.pointer,
        _sel_initWithXMLString_options_error_, string.pointer, mask, error);
    return _ret.address == 0
        ? null
        : NSXMLDocument.castFromPointer(_ret, retain: true, release: true);
  }

  NSXMLDocument? initWithContentsOfURL_options_error_(objc.NSURL url, int mask,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    final _ret = _objc_msgSend_666(this.pointer,
        _sel_initWithContentsOfURL_options_error_, url.pointer, mask, error);
    return _ret.address == 0
        ? null
        : NSXMLDocument.castFromPointer(_ret, retain: true, release: true);
  }

  NSXMLDocument? initWithData_options_error_(objc.NSData data, int mask,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    final _ret = _objc_msgSend_667(this.pointer,
        _sel_initWithData_options_error_, data.pointer, mask, error);
    return _ret.address == 0
        ? null
        : NSXMLDocument.castFromPointer(_ret, retain: true, release: true);
  }

  NSXMLDocument initWithRootElement_(NSXMLElement? element) {
    final _ret = _objc_msgSend_668(this.pointer, _sel_initWithRootElement_,
        element?.pointer ?? ffi.nullptr);
    return NSXMLDocument.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSObject replacementClassForClass_(objc.NSObject cls) {
    final _ret = _objc_msgSend_387(
        _class_NSXMLDocument, _sel_replacementClassForClass_, cls.pointer);
    return objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSString? get characterEncoding {
    final _ret = _objc_msgSend_13(this.pointer, _sel_characterEncoding);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  set characterEncoding(objc.NSString? value) {
    return _objc_msgSend_46(this.pointer, _sel_setCharacterEncoding_,
        value?.pointer ?? ffi.nullptr);
  }

  objc.NSString? get version {
    final _ret = _objc_msgSend_13(this.pointer, _sel_version);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  set version(objc.NSString? value) {
    return _objc_msgSend_46(
        this.pointer, _sel_setVersion_, value?.pointer ?? ffi.nullptr);
  }

  bool get standalone {
    return _objc_msgSend_7(this.pointer, _sel_isStandalone);
  }

  set standalone(bool value) {
    return _objc_msgSend_41(this.pointer, _sel_setStandalone_, value);
  }

  int get documentContentKind {
    return _objc_msgSend_669(this.pointer, _sel_documentContentKind);
  }

  set documentContentKind(int value) {
    return _objc_msgSend_670(this.pointer, _sel_setDocumentContentKind_, value);
  }

  objc.NSString? get MIMEType {
    final _ret = _objc_msgSend_13(this.pointer, _sel_MIMEType);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  set MIMEType(objc.NSString? value) {
    return _objc_msgSend_46(
        this.pointer, _sel_setMIMEType_, value?.pointer ?? ffi.nullptr);
  }

  NSXMLDTD? get DTD {
    final _ret = _objc_msgSend_680(this.pointer, _sel_DTD);
    return _ret.address == 0
        ? null
        : NSXMLDTD.castFromPointer(_ret, retain: true, release: true);
  }

  set DTD(NSXMLDTD? value) {
    return _objc_msgSend_681(
        this.pointer, _sel_setDTD_, value?.pointer ?? ffi.nullptr);
  }

  void setRootElement_(NSXMLElement root) {
    _objc_msgSend_682(this.pointer, _sel_setRootElement_, root.pointer);
  }

  NSXMLElement? rootElement() {
    final _ret = _objc_msgSend_683(this.pointer, _sel_rootElement);
    return _ret.address == 0
        ? null
        : NSXMLElement.castFromPointer(_ret, retain: true, release: true);
  }

  void insertChild_atIndex_(NSXMLNode child, int index) {
    _objc_msgSend_671(
        this.pointer, _sel_insertChild_atIndex_, child.pointer, index);
  }

  void insertChildren_atIndex_(objc.NSArray children, int index) {
    _objc_msgSend_672(
        this.pointer, _sel_insertChildren_atIndex_, children.pointer, index);
  }

  void removeChildAtIndex_(int index) {
    _objc_msgSend_414(this.pointer, _sel_removeChildAtIndex_, index);
  }

  void setChildren_(objc.NSArray? children) {
    _objc_msgSend_260(
        this.pointer, _sel_setChildren_, children?.pointer ?? ffi.nullptr);
  }

  void addChild_(NSXMLNode child) {
    _objc_msgSend_673(this.pointer, _sel_addChild_, child.pointer);
  }

  void replaceChildAtIndex_withNode_(int index, NSXMLNode node) {
    _objc_msgSend_674(
        this.pointer, _sel_replaceChildAtIndex_withNode_, index, node.pointer);
  }

  objc.NSData get XMLData {
    final _ret = _objc_msgSend_104(this.pointer, _sel_XMLData);
    return objc.NSData.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSData XMLDataWithOptions_(int options) {
    final _ret =
        _objc_msgSend_684(this.pointer, _sel_XMLDataWithOptions_, options);
    return objc.NSData.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSObject? objectByApplyingXSLT_arguments_error_(
      objc.NSData xslt,
      objc.NSDictionary? arguments,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    final _ret = _objc_msgSend_685(
        this.pointer,
        _sel_objectByApplyingXSLT_arguments_error_,
        xslt.pointer,
        arguments?.pointer ?? ffi.nullptr,
        error);
    return _ret.address == 0
        ? null
        : objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSObject? objectByApplyingXSLTString_arguments_error_(
      objc.NSString xslt,
      objc.NSDictionary? arguments,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    final _ret = _objc_msgSend_686(
        this.pointer,
        _sel_objectByApplyingXSLTString_arguments_error_,
        xslt.pointer,
        arguments?.pointer ?? ffi.nullptr,
        error);
    return _ret.address == 0
        ? null
        : objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSObject? objectByApplyingXSLTAtURL_arguments_error_(
      objc.NSURL xsltURL,
      objc.NSDictionary? argument,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    final _ret = _objc_msgSend_687(
        this.pointer,
        _sel_objectByApplyingXSLTAtURL_arguments_error_,
        xsltURL.pointer,
        argument?.pointer ?? ffi.nullptr,
        error);
    return _ret.address == 0
        ? null
        : objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }

  bool validateAndReturnError_(
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    return _objc_msgSend_8(this.pointer, _sel_validateAndReturnError_, error);
  }

  @override
  NSXMLDocument initWithKind_(int kind) {
    final _ret = _objc_msgSend_658(this.pointer, _sel_initWithKind_, kind);
    return NSXMLDocument.castFromPointer(_ret, retain: true, release: true);
  }

  @override
  NSXMLDocument initWithKind_options_(int kind, int options) {
    final _ret = _objc_msgSend_659(
        this.pointer, _sel_initWithKind_options_, kind, options);
    return NSXMLDocument.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSObject document() {
    final _ret = _objc_msgSend_40(_class_NSXMLDocument, _sel_document);
    return objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSObject documentWithRootElement_(NSXMLElement element) {
    final _ret = _objc_msgSend_660(
        _class_NSXMLDocument, _sel_documentWithRootElement_, element.pointer);
    return objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSObject elementWithName_(objc.NSString name) {
    final _ret = _objc_msgSend_35(
        _class_NSXMLDocument, _sel_elementWithName_, name.pointer);
    return objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSObject elementWithName_URI_(
      objc.NSString name, objc.NSString URI) {
    final _ret = _objc_msgSend_661(_class_NSXMLDocument,
        _sel_elementWithName_URI_, name.pointer, URI.pointer);
    return objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSObject elementWithName_stringValue_(
      objc.NSString name, objc.NSString string) {
    final _ret = _objc_msgSend_661(_class_NSXMLDocument,
        _sel_elementWithName_stringValue_, name.pointer, string.pointer);
    return objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSObject elementWithName_children_attributes_(
      objc.NSString name, objc.NSArray? children, objc.NSArray? attributes) {
    final _ret = _objc_msgSend_662(
        _class_NSXMLDocument,
        _sel_elementWithName_children_attributes_,
        name.pointer,
        children?.pointer ?? ffi.nullptr,
        attributes?.pointer ?? ffi.nullptr);
    return objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSObject attributeWithName_stringValue_(
      objc.NSString name, objc.NSString stringValue) {
    final _ret = _objc_msgSend_661(_class_NSXMLDocument,
        _sel_attributeWithName_stringValue_, name.pointer, stringValue.pointer);
    return objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSObject attributeWithName_URI_stringValue_(
      objc.NSString name, objc.NSString URI, objc.NSString stringValue) {
    final _ret = _objc_msgSend_626(
        _class_NSXMLDocument,
        _sel_attributeWithName_URI_stringValue_,
        name.pointer,
        URI.pointer,
        stringValue.pointer);
    return objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSObject namespaceWithName_stringValue_(
      objc.NSString name, objc.NSString stringValue) {
    final _ret = _objc_msgSend_661(_class_NSXMLDocument,
        _sel_namespaceWithName_stringValue_, name.pointer, stringValue.pointer);
    return objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSObject processingInstructionWithName_stringValue_(
      objc.NSString name, objc.NSString stringValue) {
    final _ret = _objc_msgSend_661(
        _class_NSXMLDocument,
        _sel_processingInstructionWithName_stringValue_,
        name.pointer,
        stringValue.pointer);
    return objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSObject commentWithStringValue_(objc.NSString stringValue) {
    final _ret = _objc_msgSend_35(_class_NSXMLDocument,
        _sel_commentWithStringValue_, stringValue.pointer);
    return objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSObject textWithStringValue_(objc.NSString stringValue) {
    final _ret = _objc_msgSend_35(
        _class_NSXMLDocument, _sel_textWithStringValue_, stringValue.pointer);
    return objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSObject? DTDNodeWithXMLString_(objc.NSString string) {
    final _ret = _objc_msgSend_2(
        _class_NSXMLDocument, _sel_DTDNodeWithXMLString_, string.pointer);
    return _ret.address == 0
        ? null
        : objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSString localNameForName_(objc.NSString name) {
    final _ret = _objc_msgSend_297(
        _class_NSXMLDocument, _sel_localNameForName_, name.pointer);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSString? prefixForName_(objc.NSString name) {
    final _ret = _objc_msgSend_14(
        _class_NSXMLDocument, _sel_prefixForName_, name.pointer);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  static NSXMLNode? predefinedNamespaceForPrefix_(objc.NSString name) {
    final _ret = _objc_msgSend_677(
        _class_NSXMLDocument, _sel_predefinedNamespaceForPrefix_, name.pointer);
    return _ret.address == 0
        ? null
        : NSXMLNode.castFromPointer(_ret, retain: true, release: true);
  }

  static NSXMLDocument new1() {
    final _ret = _objc_msgSend_40(_class_NSXMLDocument, _sel_new);
    return NSXMLDocument.castFromPointer(_ret, retain: false, release: true);
  }

  static NSXMLDocument allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_47(_class_NSXMLDocument, _sel_allocWithZone_, zone);
    return NSXMLDocument.castFromPointer(_ret, retain: false, release: true);
  }

  static NSXMLDocument alloc() {
    final _ret = _objc_msgSend_40(_class_NSXMLDocument, _sel_alloc);
    return NSXMLDocument.castFromPointer(_ret, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.NSObject aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.NSObject? anArgument) {
    _objc_msgSend_48(
        _class_NSXMLDocument,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  static void cancelPreviousPerformRequestsWithTarget_(objc.NSObject aTarget) {
    _objc_msgSend_49(_class_NSXMLDocument,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_7(
        _class_NSXMLDocument, _sel_accessInstanceVariablesDirectly);
  }

  static bool useStoredAccessor() {
    return _objc_msgSend_7(_class_NSXMLDocument, _sel_useStoredAccessor);
  }

  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_50(_class_NSXMLDocument,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_51(_class_NSXMLDocument,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_52(
        _class_NSXMLDocument,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_6(
        _class_NSXMLDocument, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSObject classForKeyedUnarchiver() {
    final _ret =
        _objc_msgSend_40(_class_NSXMLDocument, _sel_classForKeyedUnarchiver);
    return objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }
}

late final _class_NSXMLDocument = objc.getClass("NSXMLDocument");
late final _sel_initWithXMLString_options_error_ =
    objc.registerName("initWithXMLString:options:error:");
final _objc_msgSend_665 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Int32,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_initWithContentsOfURL_options_error_ =
    objc.registerName("initWithContentsOfURL:options:error:");
final _objc_msgSend_666 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Int32,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_initWithData_options_error_ =
    objc.registerName("initWithData:options:error:");
final _objc_msgSend_667 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Int32,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_initWithRootElement_ =
    objc.registerName("initWithRootElement:");
final _objc_msgSend_668 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_replacementClassForClass_ =
    objc.registerName("replacementClassForClass:");
late final _sel_characterEncoding = objc.registerName("characterEncoding");
late final _sel_setCharacterEncoding_ =
    objc.registerName("setCharacterEncoding:");
late final _sel_setVersion_ = objc.registerName("setVersion:");
late final _sel_isStandalone = objc.registerName("isStandalone");
late final _sel_setStandalone_ = objc.registerName("setStandalone:");

abstract class NSXMLDocumentContentKind {
  static const int NSXMLDocumentXMLKind = 0;
  static const int NSXMLDocumentXHTMLKind = 1;
  static const int NSXMLDocumentHTMLKind = 2;
  static const int NSXMLDocumentTextKind = 3;
}

late final _sel_documentContentKind = objc.registerName("documentContentKind");
final _objc_msgSend_669 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Int32 Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setDocumentContentKind_ =
    objc.registerName("setDocumentContentKind:");
final _objc_msgSend_670 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Int32)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_setMIMEType_ = objc.registerName("setMIMEType:");

class NSXMLDTD extends NSXMLNode {
  NSXMLDTD._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSXMLDTD] that points to the same underlying object as [other].
  NSXMLDTD.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSXMLDTD] that wraps the given raw object pointer.
  NSXMLDTD.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSXMLDTD].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(obj.pointer, _sel_isKindOfClass_, _class_NSXMLDTD);
  }

  @override
  NSXMLDTD init() {
    final _ret = _objc_msgSend_40(this.pointer, _sel_init);
    return NSXMLDTD.castFromPointer(_ret, retain: true, release: true);
  }

  @override
  NSXMLDTD initWithKind_options_(int kind, int options) {
    final _ret = _objc_msgSend_659(
        this.pointer, _sel_initWithKind_options_, kind, options);
    return NSXMLDTD.castFromPointer(_ret, retain: true, release: true);
  }

  NSXMLDTD? initWithContentsOfURL_options_error_(objc.NSURL url, int mask,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    final _ret = _objc_msgSend_666(this.pointer,
        _sel_initWithContentsOfURL_options_error_, url.pointer, mask, error);
    return _ret.address == 0
        ? null
        : NSXMLDTD.castFromPointer(_ret, retain: true, release: true);
  }

  NSXMLDTD? initWithData_options_error_(objc.NSData data, int mask,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    final _ret = _objc_msgSend_667(this.pointer,
        _sel_initWithData_options_error_, data.pointer, mask, error);
    return _ret.address == 0
        ? null
        : NSXMLDTD.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSString? get publicID {
    final _ret = _objc_msgSend_13(this.pointer, _sel_publicID);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  set publicID(objc.NSString? value) {
    return _objc_msgSend_46(
        this.pointer, _sel_setPublicID_, value?.pointer ?? ffi.nullptr);
  }

  objc.NSString? get systemID {
    final _ret = _objc_msgSend_13(this.pointer, _sel_systemID);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  set systemID(objc.NSString? value) {
    return _objc_msgSend_46(
        this.pointer, _sel_setSystemID_, value?.pointer ?? ffi.nullptr);
  }

  void insertChild_atIndex_(NSXMLNode child, int index) {
    _objc_msgSend_671(
        this.pointer, _sel_insertChild_atIndex_, child.pointer, index);
  }

  void insertChildren_atIndex_(objc.NSArray children, int index) {
    _objc_msgSend_672(
        this.pointer, _sel_insertChildren_atIndex_, children.pointer, index);
  }

  void removeChildAtIndex_(int index) {
    _objc_msgSend_414(this.pointer, _sel_removeChildAtIndex_, index);
  }

  void setChildren_(objc.NSArray? children) {
    _objc_msgSend_260(
        this.pointer, _sel_setChildren_, children?.pointer ?? ffi.nullptr);
  }

  void addChild_(NSXMLNode child) {
    _objc_msgSend_673(this.pointer, _sel_addChild_, child.pointer);
  }

  void replaceChildAtIndex_withNode_(int index, NSXMLNode node) {
    _objc_msgSend_674(
        this.pointer, _sel_replaceChildAtIndex_withNode_, index, node.pointer);
  }

  NSXMLDTDNode? entityDeclarationForName_(objc.NSString name) {
    final _ret = _objc_msgSend_678(
        this.pointer, _sel_entityDeclarationForName_, name.pointer);
    return _ret.address == 0
        ? null
        : NSXMLDTDNode.castFromPointer(_ret, retain: true, release: true);
  }

  NSXMLDTDNode? notationDeclarationForName_(objc.NSString name) {
    final _ret = _objc_msgSend_678(
        this.pointer, _sel_notationDeclarationForName_, name.pointer);
    return _ret.address == 0
        ? null
        : NSXMLDTDNode.castFromPointer(_ret, retain: true, release: true);
  }

  NSXMLDTDNode? elementDeclarationForName_(objc.NSString name) {
    final _ret = _objc_msgSend_678(
        this.pointer, _sel_elementDeclarationForName_, name.pointer);
    return _ret.address == 0
        ? null
        : NSXMLDTDNode.castFromPointer(_ret, retain: true, release: true);
  }

  NSXMLDTDNode? attributeDeclarationForName_elementName_(
      objc.NSString name, objc.NSString elementName) {
    final _ret = _objc_msgSend_679(
        this.pointer,
        _sel_attributeDeclarationForName_elementName_,
        name.pointer,
        elementName.pointer);
    return _ret.address == 0
        ? null
        : NSXMLDTDNode.castFromPointer(_ret, retain: true, release: true);
  }

  static NSXMLDTDNode? predefinedEntityDeclarationForName_(objc.NSString name) {
    final _ret = _objc_msgSend_678(_class_NSXMLDTD,
        _sel_predefinedEntityDeclarationForName_, name.pointer);
    return _ret.address == 0
        ? null
        : NSXMLDTDNode.castFromPointer(_ret, retain: true, release: true);
  }

  @override
  NSXMLDTD initWithKind_(int kind) {
    final _ret = _objc_msgSend_658(this.pointer, _sel_initWithKind_, kind);
    return NSXMLDTD.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSObject document() {
    final _ret = _objc_msgSend_40(_class_NSXMLDTD, _sel_document);
    return objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSObject documentWithRootElement_(NSXMLElement element) {
    final _ret = _objc_msgSend_660(
        _class_NSXMLDTD, _sel_documentWithRootElement_, element.pointer);
    return objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSObject elementWithName_(objc.NSString name) {
    final _ret =
        _objc_msgSend_35(_class_NSXMLDTD, _sel_elementWithName_, name.pointer);
    return objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSObject elementWithName_URI_(
      objc.NSString name, objc.NSString URI) {
    final _ret = _objc_msgSend_661(
        _class_NSXMLDTD, _sel_elementWithName_URI_, name.pointer, URI.pointer);
    return objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSObject elementWithName_stringValue_(
      objc.NSString name, objc.NSString string) {
    final _ret = _objc_msgSend_661(_class_NSXMLDTD,
        _sel_elementWithName_stringValue_, name.pointer, string.pointer);
    return objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSObject elementWithName_children_attributes_(
      objc.NSString name, objc.NSArray? children, objc.NSArray? attributes) {
    final _ret = _objc_msgSend_662(
        _class_NSXMLDTD,
        _sel_elementWithName_children_attributes_,
        name.pointer,
        children?.pointer ?? ffi.nullptr,
        attributes?.pointer ?? ffi.nullptr);
    return objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSObject attributeWithName_stringValue_(
      objc.NSString name, objc.NSString stringValue) {
    final _ret = _objc_msgSend_661(_class_NSXMLDTD,
        _sel_attributeWithName_stringValue_, name.pointer, stringValue.pointer);
    return objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSObject attributeWithName_URI_stringValue_(
      objc.NSString name, objc.NSString URI, objc.NSString stringValue) {
    final _ret = _objc_msgSend_626(
        _class_NSXMLDTD,
        _sel_attributeWithName_URI_stringValue_,
        name.pointer,
        URI.pointer,
        stringValue.pointer);
    return objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSObject namespaceWithName_stringValue_(
      objc.NSString name, objc.NSString stringValue) {
    final _ret = _objc_msgSend_661(_class_NSXMLDTD,
        _sel_namespaceWithName_stringValue_, name.pointer, stringValue.pointer);
    return objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSObject processingInstructionWithName_stringValue_(
      objc.NSString name, objc.NSString stringValue) {
    final _ret = _objc_msgSend_661(
        _class_NSXMLDTD,
        _sel_processingInstructionWithName_stringValue_,
        name.pointer,
        stringValue.pointer);
    return objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSObject commentWithStringValue_(objc.NSString stringValue) {
    final _ret = _objc_msgSend_35(
        _class_NSXMLDTD, _sel_commentWithStringValue_, stringValue.pointer);
    return objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSObject textWithStringValue_(objc.NSString stringValue) {
    final _ret = _objc_msgSend_35(
        _class_NSXMLDTD, _sel_textWithStringValue_, stringValue.pointer);
    return objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSObject? DTDNodeWithXMLString_(objc.NSString string) {
    final _ret = _objc_msgSend_2(
        _class_NSXMLDTD, _sel_DTDNodeWithXMLString_, string.pointer);
    return _ret.address == 0
        ? null
        : objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSString localNameForName_(objc.NSString name) {
    final _ret = _objc_msgSend_297(
        _class_NSXMLDTD, _sel_localNameForName_, name.pointer);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSString? prefixForName_(objc.NSString name) {
    final _ret =
        _objc_msgSend_14(_class_NSXMLDTD, _sel_prefixForName_, name.pointer);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  static NSXMLNode? predefinedNamespaceForPrefix_(objc.NSString name) {
    final _ret = _objc_msgSend_677(
        _class_NSXMLDTD, _sel_predefinedNamespaceForPrefix_, name.pointer);
    return _ret.address == 0
        ? null
        : NSXMLNode.castFromPointer(_ret, retain: true, release: true);
  }

  static NSXMLDTD new1() {
    final _ret = _objc_msgSend_40(_class_NSXMLDTD, _sel_new);
    return NSXMLDTD.castFromPointer(_ret, retain: false, release: true);
  }

  static NSXMLDTD allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_47(_class_NSXMLDTD, _sel_allocWithZone_, zone);
    return NSXMLDTD.castFromPointer(_ret, retain: false, release: true);
  }

  static NSXMLDTD alloc() {
    final _ret = _objc_msgSend_40(_class_NSXMLDTD, _sel_alloc);
    return NSXMLDTD.castFromPointer(_ret, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.NSObject aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.NSObject? anArgument) {
    _objc_msgSend_48(
        _class_NSXMLDTD,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  static void cancelPreviousPerformRequestsWithTarget_(objc.NSObject aTarget) {
    _objc_msgSend_49(_class_NSXMLDTD,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_7(
        _class_NSXMLDTD, _sel_accessInstanceVariablesDirectly);
  }

  static bool useStoredAccessor() {
    return _objc_msgSend_7(_class_NSXMLDTD, _sel_useStoredAccessor);
  }

  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_50(_class_NSXMLDTD,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_51(_class_NSXMLDTD,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_52(
        _class_NSXMLDTD,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret =
        _objc_msgSend_6(_class_NSXMLDTD, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSObject classForKeyedUnarchiver() {
    final _ret =
        _objc_msgSend_40(_class_NSXMLDTD, _sel_classForKeyedUnarchiver);
    return objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }
}

late final _class_NSXMLDTD = objc.getClass("NSXMLDTD");
late final _sel_setPublicID_ = objc.registerName("setPublicID:");
late final _sel_setSystemID_ = objc.registerName("setSystemID:");
late final _sel_insertChild_atIndex_ =
    objc.registerName("insertChild:atIndex:");
final _objc_msgSend_671 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.UnsignedLong)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int)>();
late final _sel_insertChildren_atIndex_ =
    objc.registerName("insertChildren:atIndex:");
final _objc_msgSend_672 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.UnsignedLong)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int)>();
late final _sel_removeChildAtIndex_ = objc.registerName("removeChildAtIndex:");
late final _sel_setChildren_ = objc.registerName("setChildren:");
late final _sel_addChild_ = objc.registerName("addChild:");
final _objc_msgSend_673 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_replaceChildAtIndex_withNode_ =
    objc.registerName("replaceChildAtIndex:withNode:");
final _objc_msgSend_674 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.UnsignedLong,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int,
            ffi.Pointer<objc.ObjCObject>)>();

class NSXMLDTDNode extends NSXMLNode {
  NSXMLDTDNode._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSXMLDTDNode] that points to the same underlying object as [other].
  NSXMLDTDNode.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSXMLDTDNode] that wraps the given raw object pointer.
  NSXMLDTDNode.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSXMLDTDNode].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSXMLDTDNode);
  }

  NSXMLDTDNode? initWithXMLString_(objc.NSString string) {
    final _ret =
        _objc_msgSend_2(this.pointer, _sel_initWithXMLString_, string.pointer);
    return _ret.address == 0
        ? null
        : NSXMLDTDNode.castFromPointer(_ret, retain: true, release: true);
  }

  @override
  NSXMLDTDNode initWithKind_options_(int kind, int options) {
    final _ret = _objc_msgSend_659(
        this.pointer, _sel_initWithKind_options_, kind, options);
    return NSXMLDTDNode.castFromPointer(_ret, retain: true, release: true);
  }

  @override
  NSXMLDTDNode init() {
    final _ret = _objc_msgSend_40(this.pointer, _sel_init);
    return NSXMLDTDNode.castFromPointer(_ret, retain: true, release: true);
  }

  int get DTDKind {
    return _objc_msgSend_675(this.pointer, _sel_DTDKind);
  }

  set DTDKind(int value) {
    return _objc_msgSend_676(this.pointer, _sel_setDTDKind_, value);
  }

  bool get external1 {
    return _objc_msgSend_7(this.pointer, _sel_isExternal);
  }

  objc.NSString? get publicID {
    final _ret = _objc_msgSend_13(this.pointer, _sel_publicID);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  set publicID(objc.NSString? value) {
    return _objc_msgSend_46(
        this.pointer, _sel_setPublicID_, value?.pointer ?? ffi.nullptr);
  }

  objc.NSString? get systemID {
    final _ret = _objc_msgSend_13(this.pointer, _sel_systemID);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  set systemID(objc.NSString? value) {
    return _objc_msgSend_46(
        this.pointer, _sel_setSystemID_, value?.pointer ?? ffi.nullptr);
  }

  objc.NSString? get notationName {
    final _ret = _objc_msgSend_13(this.pointer, _sel_notationName);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  set notationName(objc.NSString? value) {
    return _objc_msgSend_46(
        this.pointer, _sel_setNotationName_, value?.pointer ?? ffi.nullptr);
  }

  @override
  NSXMLDTDNode initWithKind_(int kind) {
    final _ret = _objc_msgSend_658(this.pointer, _sel_initWithKind_, kind);
    return NSXMLDTDNode.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSObject document() {
    final _ret = _objc_msgSend_40(_class_NSXMLDTDNode, _sel_document);
    return objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSObject documentWithRootElement_(NSXMLElement element) {
    final _ret = _objc_msgSend_660(
        _class_NSXMLDTDNode, _sel_documentWithRootElement_, element.pointer);
    return objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSObject elementWithName_(objc.NSString name) {
    final _ret = _objc_msgSend_35(
        _class_NSXMLDTDNode, _sel_elementWithName_, name.pointer);
    return objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSObject elementWithName_URI_(
      objc.NSString name, objc.NSString URI) {
    final _ret = _objc_msgSend_661(_class_NSXMLDTDNode,
        _sel_elementWithName_URI_, name.pointer, URI.pointer);
    return objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSObject elementWithName_stringValue_(
      objc.NSString name, objc.NSString string) {
    final _ret = _objc_msgSend_661(_class_NSXMLDTDNode,
        _sel_elementWithName_stringValue_, name.pointer, string.pointer);
    return objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSObject elementWithName_children_attributes_(
      objc.NSString name, objc.NSArray? children, objc.NSArray? attributes) {
    final _ret = _objc_msgSend_662(
        _class_NSXMLDTDNode,
        _sel_elementWithName_children_attributes_,
        name.pointer,
        children?.pointer ?? ffi.nullptr,
        attributes?.pointer ?? ffi.nullptr);
    return objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSObject attributeWithName_stringValue_(
      objc.NSString name, objc.NSString stringValue) {
    final _ret = _objc_msgSend_661(_class_NSXMLDTDNode,
        _sel_attributeWithName_stringValue_, name.pointer, stringValue.pointer);
    return objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSObject attributeWithName_URI_stringValue_(
      objc.NSString name, objc.NSString URI, objc.NSString stringValue) {
    final _ret = _objc_msgSend_626(
        _class_NSXMLDTDNode,
        _sel_attributeWithName_URI_stringValue_,
        name.pointer,
        URI.pointer,
        stringValue.pointer);
    return objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSObject namespaceWithName_stringValue_(
      objc.NSString name, objc.NSString stringValue) {
    final _ret = _objc_msgSend_661(_class_NSXMLDTDNode,
        _sel_namespaceWithName_stringValue_, name.pointer, stringValue.pointer);
    return objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSObject processingInstructionWithName_stringValue_(
      objc.NSString name, objc.NSString stringValue) {
    final _ret = _objc_msgSend_661(
        _class_NSXMLDTDNode,
        _sel_processingInstructionWithName_stringValue_,
        name.pointer,
        stringValue.pointer);
    return objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSObject commentWithStringValue_(objc.NSString stringValue) {
    final _ret = _objc_msgSend_35(
        _class_NSXMLDTDNode, _sel_commentWithStringValue_, stringValue.pointer);
    return objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSObject textWithStringValue_(objc.NSString stringValue) {
    final _ret = _objc_msgSend_35(
        _class_NSXMLDTDNode, _sel_textWithStringValue_, stringValue.pointer);
    return objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSObject? DTDNodeWithXMLString_(objc.NSString string) {
    final _ret = _objc_msgSend_2(
        _class_NSXMLDTDNode, _sel_DTDNodeWithXMLString_, string.pointer);
    return _ret.address == 0
        ? null
        : objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSString localNameForName_(objc.NSString name) {
    final _ret = _objc_msgSend_297(
        _class_NSXMLDTDNode, _sel_localNameForName_, name.pointer);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSString? prefixForName_(objc.NSString name) {
    final _ret = _objc_msgSend_14(
        _class_NSXMLDTDNode, _sel_prefixForName_, name.pointer);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  static NSXMLNode? predefinedNamespaceForPrefix_(objc.NSString name) {
    final _ret = _objc_msgSend_677(
        _class_NSXMLDTDNode, _sel_predefinedNamespaceForPrefix_, name.pointer);
    return _ret.address == 0
        ? null
        : NSXMLNode.castFromPointer(_ret, retain: true, release: true);
  }

  static NSXMLDTDNode new1() {
    final _ret = _objc_msgSend_40(_class_NSXMLDTDNode, _sel_new);
    return NSXMLDTDNode.castFromPointer(_ret, retain: false, release: true);
  }

  static NSXMLDTDNode allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_47(_class_NSXMLDTDNode, _sel_allocWithZone_, zone);
    return NSXMLDTDNode.castFromPointer(_ret, retain: false, release: true);
  }

  static NSXMLDTDNode alloc() {
    final _ret = _objc_msgSend_40(_class_NSXMLDTDNode, _sel_alloc);
    return NSXMLDTDNode.castFromPointer(_ret, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.NSObject aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.NSObject? anArgument) {
    _objc_msgSend_48(
        _class_NSXMLDTDNode,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  static void cancelPreviousPerformRequestsWithTarget_(objc.NSObject aTarget) {
    _objc_msgSend_49(_class_NSXMLDTDNode,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_7(
        _class_NSXMLDTDNode, _sel_accessInstanceVariablesDirectly);
  }

  static bool useStoredAccessor() {
    return _objc_msgSend_7(_class_NSXMLDTDNode, _sel_useStoredAccessor);
  }

  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_50(_class_NSXMLDTDNode,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_51(_class_NSXMLDTDNode,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_52(
        _class_NSXMLDTDNode,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_6(
        _class_NSXMLDTDNode, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSObject classForKeyedUnarchiver() {
    final _ret =
        _objc_msgSend_40(_class_NSXMLDTDNode, _sel_classForKeyedUnarchiver);
    return objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }
}

late final _class_NSXMLDTDNode = objc.getClass("NSXMLDTDNode");
late final _sel_initWithXMLString_ = objc.registerName("initWithXMLString:");

abstract class NSXMLDTDNodeKind {
  static const int NSXMLEntityGeneralKind = 1;
  static const int NSXMLEntityParsedKind = 2;
  static const int NSXMLEntityUnparsedKind = 3;
  static const int NSXMLEntityParameterKind = 4;
  static const int NSXMLEntityPredefined = 5;
  static const int NSXMLAttributeCDATAKind = 6;
  static const int NSXMLAttributeIDKind = 7;
  static const int NSXMLAttributeIDRefKind = 8;
  static const int NSXMLAttributeIDRefsKind = 9;
  static const int NSXMLAttributeEntityKind = 10;
  static const int NSXMLAttributeEntitiesKind = 11;
  static const int NSXMLAttributeNMTokenKind = 12;
  static const int NSXMLAttributeNMTokensKind = 13;
  static const int NSXMLAttributeEnumerationKind = 14;
  static const int NSXMLAttributeNotationKind = 15;
  static const int NSXMLElementDeclarationUndefinedKind = 16;
  static const int NSXMLElementDeclarationEmptyKind = 17;
  static const int NSXMLElementDeclarationAnyKind = 18;
  static const int NSXMLElementDeclarationMixedKind = 19;
  static const int NSXMLElementDeclarationElementKind = 20;
}

late final _sel_DTDKind = objc.registerName("DTDKind");
final _objc_msgSend_675 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Int32 Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setDTDKind_ = objc.registerName("setDTDKind:");
final _objc_msgSend_676 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Int32)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_isExternal = objc.registerName("isExternal");
late final _sel_notationName = objc.registerName("notationName");
late final _sel_setNotationName_ = objc.registerName("setNotationName:");
late final _sel_localNameForName_ = objc.registerName("localNameForName:");
late final _sel_prefixForName_ = objc.registerName("prefixForName:");
late final _sel_predefinedNamespaceForPrefix_ =
    objc.registerName("predefinedNamespaceForPrefix:");
final _objc_msgSend_677 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_entityDeclarationForName_ =
    objc.registerName("entityDeclarationForName:");
final _objc_msgSend_678 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_notationDeclarationForName_ =
    objc.registerName("notationDeclarationForName:");
late final _sel_elementDeclarationForName_ =
    objc.registerName("elementDeclarationForName:");
late final _sel_attributeDeclarationForName_elementName_ =
    objc.registerName("attributeDeclarationForName:elementName:");
final _objc_msgSend_679 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_predefinedEntityDeclarationForName_ =
    objc.registerName("predefinedEntityDeclarationForName:");
late final _sel_DTD = objc.registerName("DTD");
final _objc_msgSend_680 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setDTD_ = objc.registerName("setDTD:");
final _objc_msgSend_681 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_setRootElement_ = objc.registerName("setRootElement:");
final _objc_msgSend_682 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_rootElement = objc.registerName("rootElement");
final _objc_msgSend_683 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_XMLData = objc.registerName("XMLData");
late final _sel_XMLDataWithOptions_ = objc.registerName("XMLDataWithOptions:");
final _objc_msgSend_684 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Int32)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_objectByApplyingXSLT_arguments_error_ =
    objc.registerName("objectByApplyingXSLT:arguments:error:");
final _objc_msgSend_685 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_objectByApplyingXSLTString_arguments_error_ =
    objc.registerName("objectByApplyingXSLTString:arguments:error:");
final _objc_msgSend_686 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_objectByApplyingXSLTAtURL_arguments_error_ =
    objc.registerName("objectByApplyingXSLTAtURL:arguments:error:");
final _objc_msgSend_687 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_validateAndReturnError_ =
    objc.registerName("validateAndReturnError:");
late final _sel_rootDocument = objc.registerName("rootDocument");
final _objc_msgSend_688 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_parent = objc.registerName("parent");
final _objc_msgSend_689 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_childCount = objc.registerName("childCount");
late final _sel_children = objc.registerName("children");
late final _sel_childAtIndex_ = objc.registerName("childAtIndex:");
final _objc_msgSend_690 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedLong)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_previousSibling = objc.registerName("previousSibling");
late final _sel_nextSibling = objc.registerName("nextSibling");
late final _sel_previousNode = objc.registerName("previousNode");
late final _sel_nextNode = objc.registerName("nextNode");
late final _sel_detach = objc.registerName("detach");
late final _sel_XPath = objc.registerName("XPath");
late final _sel_localName = objc.registerName("localName");
late final _sel_prefix = objc.registerName("prefix");
late final _sel_URI = objc.registerName("URI");
late final _sel_setURI_ = objc.registerName("setURI:");
late final _sel_XMLString = objc.registerName("XMLString");
late final _sel_XMLStringWithOptions_ =
    objc.registerName("XMLStringWithOptions:");
final _objc_msgSend_691 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Int32)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_canonicalXMLStringPreservingComments_ =
    objc.registerName("canonicalXMLStringPreservingComments:");
final _objc_msgSend_692 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Bool)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, bool)>();
late final _sel_nodesForXPath_error_ =
    objc.registerName("nodesForXPath:error:");
late final _sel_objectsForXQuery_constants_error_ =
    objc.registerName("objectsForXQuery:constants:error:");
final _objc_msgSend_693 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_objectsForXQuery_error_ =
    objc.registerName("objectsForXQuery:error:");
late final _sel_initWithName_URI_ = objc.registerName("initWithName:URI:");
final _objc_msgSend_694 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_initWithName_stringValue_ =
    objc.registerName("initWithName:stringValue:");
late final _sel_initWithXMLString_error_ =
    objc.registerName("initWithXMLString:error:");
final _objc_msgSend_695 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_elementsForName_ = objc.registerName("elementsForName:");
late final _sel_elementsForLocalName_URI_ =
    objc.registerName("elementsForLocalName:URI:");
final _objc_msgSend_696 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_addAttribute_ = objc.registerName("addAttribute:");
late final _sel_removeAttributeForName_ =
    objc.registerName("removeAttributeForName:");
late final _sel_attributes = objc.registerName("attributes");
late final _sel_setAttributes_ = objc.registerName("setAttributes:");
late final _sel_setAttributesWithDictionary_ =
    objc.registerName("setAttributesWithDictionary:");
final _objc_msgSend_697 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_attributeForName_ = objc.registerName("attributeForName:");
late final _sel_attributeForLocalName_URI_ =
    objc.registerName("attributeForLocalName:URI:");
final _objc_msgSend_698 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_addNamespace_ = objc.registerName("addNamespace:");
late final _sel_removeNamespaceForPrefix_ =
    objc.registerName("removeNamespaceForPrefix:");
late final _sel_namespaces = objc.registerName("namespaces");
late final _sel_setNamespaces_ = objc.registerName("setNamespaces:");
late final _sel_namespaceForPrefix_ = objc.registerName("namespaceForPrefix:");
late final _sel_resolveNamespaceForName_ =
    objc.registerName("resolveNamespaceForName:");
late final _sel_resolvePrefixForNamespaceURI_ =
    objc.registerName("resolvePrefixForNamespaceURI:");
late final _sel_normalizeAdjacentTextNodesPreservingCDATA_ =
    objc.registerName("normalizeAdjacentTextNodesPreservingCDATA:");
late final _sel_setAttributesAsDictionary_ =
    objc.registerName("setAttributesAsDictionary:");

class NSScriptClassDescription extends NSClassDescription {
  NSScriptClassDescription._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSScriptClassDescription] that points to the same underlying object as [other].
  NSScriptClassDescription.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSScriptClassDescription] that wraps the given raw object pointer.
  NSScriptClassDescription.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSScriptClassDescription].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSScriptClassDescription);
  }

  static NSScriptClassDescription? classDescriptionForClass_(
      objc.NSObject aClass) {
    final _ret = _objc_msgSend_701(_class_NSScriptClassDescription,
        _sel_classDescriptionForClass_, aClass.pointer);
    return _ret.address == 0
        ? null
        : NSScriptClassDescription.castFromPointer(_ret,
            retain: true, release: true);
  }

  NSScriptClassDescription? initWithSuiteName_className_dictionary_(
      objc.NSString suiteName,
      objc.NSString className,
      objc.NSDictionary? classDeclaration) {
    final _ret = _objc_msgSend_702(
        this.pointer,
        _sel_initWithSuiteName_className_dictionary_,
        suiteName.pointer,
        className.pointer,
        classDeclaration?.pointer ?? ffi.nullptr);
    return _ret.address == 0
        ? null
        : NSScriptClassDescription.castFromPointer(_ret,
            retain: true, release: true);
  }

  objc.NSString? get suiteName {
    final _ret = _objc_msgSend_13(this.pointer, _sel_suiteName);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSString? get className {
    final _ret = _objc_msgSend_13(this.pointer, _sel_className);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSString? get implementationClassName {
    final _ret = _objc_msgSend_13(this.pointer, _sel_implementationClassName);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  NSScriptClassDescription? get superclassDescription {
    final _ret = _objc_msgSend_703(this.pointer, _sel_superclassDescription);
    return _ret.address == 0
        ? null
        : NSScriptClassDescription.castFromPointer(_ret,
            retain: true, release: true);
  }

  int get appleEventCode {
    return _objc_msgSend_704(this.pointer, _sel_appleEventCode);
  }

  bool matchesAppleEventCode_(int appleEventCode) {
    return _objc_msgSend_705(
        this.pointer, _sel_matchesAppleEventCode_, appleEventCode);
  }

  bool supportsCommand_(NSScriptCommandDescription commandDescription) {
    return _objc_msgSend_747(
        this.pointer, _sel_supportsCommand_, commandDescription.pointer);
  }

  ffi.Pointer<objc.ObjCSelector> selectorForCommand_(
      NSScriptCommandDescription commandDescription) {
    return _objc_msgSend_748(
        this.pointer, _sel_selectorForCommand_, commandDescription.pointer);
  }

  objc.NSString? typeForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_14(this.pointer, _sel_typeForKey_, key.pointer);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  NSScriptClassDescription? classDescriptionForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_749(
        this.pointer, _sel_classDescriptionForKey_, key.pointer);
    return _ret.address == 0
        ? null
        : NSScriptClassDescription.castFromPointer(_ret,
            retain: true, release: true);
  }

  int appleEventCodeForKey_(objc.NSString key) {
    return _objc_msgSend_706(
        this.pointer, _sel_appleEventCodeForKey_, key.pointer);
  }

  objc.NSString? keyWithAppleEventCode_(int appleEventCode) {
    final _ret = _objc_msgSend_750(
        this.pointer, _sel_keyWithAppleEventCode_, appleEventCode);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSString? get defaultSubcontainerAttributeKey {
    final _ret =
        _objc_msgSend_13(this.pointer, _sel_defaultSubcontainerAttributeKey);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  bool isLocationRequiredToCreateForKey_(objc.NSString toManyRelationshipKey) {
    return _objc_msgSend_51(this.pointer,
        _sel_isLocationRequiredToCreateForKey_, toManyRelationshipKey.pointer);
  }

  bool hasPropertyForKey_(objc.NSString key) {
    return _objc_msgSend_51(this.pointer, _sel_hasPropertyForKey_, key.pointer);
  }

  bool hasOrderedToManyRelationshipForKey_(objc.NSString key) {
    return _objc_msgSend_51(
        this.pointer, _sel_hasOrderedToManyRelationshipForKey_, key.pointer);
  }

  bool hasReadablePropertyForKey_(objc.NSString key) {
    return _objc_msgSend_51(
        this.pointer, _sel_hasReadablePropertyForKey_, key.pointer);
  }

  bool hasWritablePropertyForKey_(objc.NSString key) {
    return _objc_msgSend_51(
        this.pointer, _sel_hasWritablePropertyForKey_, key.pointer);
  }

  bool isReadOnlyKey_(objc.NSString key) {
    return _objc_msgSend_51(this.pointer, _sel_isReadOnlyKey_, key.pointer);
  }

  static void registerClassDescription_forClass_(
      NSClassDescription description, objc.NSObject aClass) {
    _objc_msgSend_699(
        _class_NSScriptClassDescription,
        _sel_registerClassDescription_forClass_,
        description.pointer,
        aClass.pointer);
  }

  static void invalidateClassDescriptionCache() {
    _objc_msgSend_82(
        _class_NSScriptClassDescription, _sel_invalidateClassDescriptionCache);
  }

  @override
  NSScriptClassDescription init() {
    final _ret = _objc_msgSend_40(this.pointer, _sel_init);
    return NSScriptClassDescription.castFromPointer(_ret,
        retain: true, release: true);
  }

  static NSScriptClassDescription new1() {
    final _ret = _objc_msgSend_40(_class_NSScriptClassDescription, _sel_new);
    return NSScriptClassDescription.castFromPointer(_ret,
        retain: false, release: true);
  }

  static NSScriptClassDescription allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_47(
        _class_NSScriptClassDescription, _sel_allocWithZone_, zone);
    return NSScriptClassDescription.castFromPointer(_ret,
        retain: false, release: true);
  }

  static NSScriptClassDescription alloc() {
    final _ret = _objc_msgSend_40(_class_NSScriptClassDescription, _sel_alloc);
    return NSScriptClassDescription.castFromPointer(_ret,
        retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.NSObject aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.NSObject? anArgument) {
    _objc_msgSend_48(
        _class_NSScriptClassDescription,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  static void cancelPreviousPerformRequestsWithTarget_(objc.NSObject aTarget) {
    _objc_msgSend_49(_class_NSScriptClassDescription,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_7(
        _class_NSScriptClassDescription, _sel_accessInstanceVariablesDirectly);
  }

  static bool useStoredAccessor() {
    return _objc_msgSend_7(
        _class_NSScriptClassDescription, _sel_useStoredAccessor);
  }

  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_50(_class_NSScriptClassDescription,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_51(_class_NSScriptClassDescription,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_52(
        _class_NSScriptClassDescription,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_6(
        _class_NSScriptClassDescription, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSObject classForKeyedUnarchiver() {
    final _ret = _objc_msgSend_40(
        _class_NSScriptClassDescription, _sel_classForKeyedUnarchiver);
    return objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }
}

late final _class_NSScriptClassDescription =
    objc.getClass("NSScriptClassDescription");

class NSClassDescription extends objc.NSObject {
  NSClassDescription._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSClassDescription] that points to the same underlying object as [other].
  NSClassDescription.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSClassDescription] that wraps the given raw object pointer.
  NSClassDescription.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSClassDescription].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSClassDescription);
  }

  static void registerClassDescription_forClass_(
      NSClassDescription description, objc.NSObject aClass) {
    _objc_msgSend_699(
        _class_NSClassDescription,
        _sel_registerClassDescription_forClass_,
        description.pointer,
        aClass.pointer);
  }

  static void invalidateClassDescriptionCache() {
    _objc_msgSend_82(
        _class_NSClassDescription, _sel_invalidateClassDescriptionCache);
  }

  static NSClassDescription? classDescriptionForClass_(objc.NSObject aClass) {
    final _ret = _objc_msgSend_700(_class_NSClassDescription,
        _sel_classDescriptionForClass_, aClass.pointer);
    return _ret.address == 0
        ? null
        : NSClassDescription.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSArray get attributeKeys {
    final _ret = _objc_msgSend_6(this.pointer, _sel_attributeKeys);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSArray get toOneRelationshipKeys {
    final _ret = _objc_msgSend_6(this.pointer, _sel_toOneRelationshipKeys);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSArray get toManyRelationshipKeys {
    final _ret = _objc_msgSend_6(this.pointer, _sel_toManyRelationshipKeys);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSString? inverseForRelationshipKey_(objc.NSString relationshipKey) {
    final _ret = _objc_msgSend_14(
        this.pointer, _sel_inverseForRelationshipKey_, relationshipKey.pointer);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  @override
  NSClassDescription init() {
    final _ret = _objc_msgSend_40(this.pointer, _sel_init);
    return NSClassDescription.castFromPointer(_ret,
        retain: true, release: true);
  }

  static NSClassDescription new1() {
    final _ret = _objc_msgSend_40(_class_NSClassDescription, _sel_new);
    return NSClassDescription.castFromPointer(_ret,
        retain: false, release: true);
  }

  static NSClassDescription allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_47(_class_NSClassDescription, _sel_allocWithZone_, zone);
    return NSClassDescription.castFromPointer(_ret,
        retain: false, release: true);
  }

  static NSClassDescription alloc() {
    final _ret = _objc_msgSend_40(_class_NSClassDescription, _sel_alloc);
    return NSClassDescription.castFromPointer(_ret,
        retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.NSObject aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.NSObject? anArgument) {
    _objc_msgSend_48(
        _class_NSClassDescription,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  static void cancelPreviousPerformRequestsWithTarget_(objc.NSObject aTarget) {
    _objc_msgSend_49(_class_NSClassDescription,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_7(
        _class_NSClassDescription, _sel_accessInstanceVariablesDirectly);
  }

  static bool useStoredAccessor() {
    return _objc_msgSend_7(_class_NSClassDescription, _sel_useStoredAccessor);
  }

  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_50(_class_NSClassDescription,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_51(_class_NSClassDescription,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_52(
        _class_NSClassDescription,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_6(
        _class_NSClassDescription, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSObject classForKeyedUnarchiver() {
    final _ret = _objc_msgSend_40(
        _class_NSClassDescription, _sel_classForKeyedUnarchiver);
    return objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }
}

late final _class_NSClassDescription = objc.getClass("NSClassDescription");
late final _sel_registerClassDescription_forClass_ =
    objc.registerName("registerClassDescription:forClass:");
final _objc_msgSend_699 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_invalidateClassDescriptionCache =
    objc.registerName("invalidateClassDescriptionCache");
late final _sel_classDescriptionForClass_ =
    objc.registerName("classDescriptionForClass:");
final _objc_msgSend_700 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_attributeKeys = objc.registerName("attributeKeys");
late final _sel_toOneRelationshipKeys =
    objc.registerName("toOneRelationshipKeys");
late final _sel_toManyRelationshipKeys =
    objc.registerName("toManyRelationshipKeys");
late final _sel_inverseForRelationshipKey_ =
    objc.registerName("inverseForRelationshipKey:");
final _objc_msgSend_701 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_initWithSuiteName_className_dictionary_ =
    objc.registerName("initWithSuiteName:className:dictionary:");
final _objc_msgSend_702 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_suiteName = objc.registerName("suiteName");
late final _sel_className = objc.registerName("className");
late final _sel_implementationClassName =
    objc.registerName("implementationClassName");
late final _sel_superclassDescription =
    objc.registerName("superclassDescription");
final _objc_msgSend_703 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_appleEventCode = objc.registerName("appleEventCode");
final _objc_msgSend_704 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedInt Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_matchesAppleEventCode_ =
    objc.registerName("matchesAppleEventCode:");
final _objc_msgSend_705 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedInt)>>()
    .asFunction<
        bool Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();

class NSScriptCommandDescription extends objc.NSObject {
  NSScriptCommandDescription._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSScriptCommandDescription] that points to the same underlying object as [other].
  NSScriptCommandDescription.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSScriptCommandDescription] that wraps the given raw object pointer.
  NSScriptCommandDescription.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSScriptCommandDescription].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSScriptCommandDescription);
  }

  @override
  objc.NSObject init() {
    final _ret = _objc_msgSend_40(this.pointer, _sel_init);
    return objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }

  NSScriptCommandDescription? initWithSuiteName_commandName_dictionary_(
      objc.NSString suiteName,
      objc.NSString commandName,
      objc.NSDictionary? commandDeclaration) {
    final _ret = _objc_msgSend_702(
        this.pointer,
        _sel_initWithSuiteName_commandName_dictionary_,
        suiteName.pointer,
        commandName.pointer,
        commandDeclaration?.pointer ?? ffi.nullptr);
    return _ret.address == 0
        ? null
        : NSScriptCommandDescription.castFromPointer(_ret,
            retain: true, release: true);
  }

  NSScriptCommandDescription? initWithCoder_(objc.NSCoder inCoder) {
    final _ret =
        _objc_msgSend_231(this.pointer, _sel_initWithCoder_, inCoder.pointer);
    return _ret.address == 0
        ? null
        : NSScriptCommandDescription.castFromPointer(_ret,
            retain: true, release: true);
  }

  objc.NSString get suiteName {
    final _ret = _objc_msgSend_12(this.pointer, _sel_suiteName);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSString get commandName {
    final _ret = _objc_msgSend_12(this.pointer, _sel_commandName);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  int get appleEventClassCode {
    return _objc_msgSend_704(this.pointer, _sel_appleEventClassCode);
  }

  int get appleEventCode {
    return _objc_msgSend_704(this.pointer, _sel_appleEventCode);
  }

  objc.NSString get commandClassName {
    final _ret = _objc_msgSend_12(this.pointer, _sel_commandClassName);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSString? get returnType {
    final _ret = _objc_msgSend_13(this.pointer, _sel_returnType);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  int get appleEventCodeForReturnType {
    return _objc_msgSend_704(this.pointer, _sel_appleEventCodeForReturnType);
  }

  objc.NSArray get argumentNames {
    final _ret = _objc_msgSend_6(this.pointer, _sel_argumentNames);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSString? typeForArgumentWithName_(objc.NSString argumentName) {
    final _ret = _objc_msgSend_14(
        this.pointer, _sel_typeForArgumentWithName_, argumentName.pointer);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  int appleEventCodeForArgumentWithName_(objc.NSString argumentName) {
    return _objc_msgSend_706(this.pointer,
        _sel_appleEventCodeForArgumentWithName_, argumentName.pointer);
  }

  bool isOptionalArgumentWithName_(objc.NSString argumentName) {
    return _objc_msgSend_51(
        this.pointer, _sel_isOptionalArgumentWithName_, argumentName.pointer);
  }

  NSScriptCommand createCommandInstance() {
    final _ret = _objc_msgSend_745(this.pointer, _sel_createCommandInstance);
    return NSScriptCommand.castFromPointer(_ret, retain: true, release: true);
  }

  NSScriptCommand createCommandInstanceWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_746(
        this.pointer, _sel_createCommandInstanceWithZone_, zone);
    return NSScriptCommand.castFromPointer(_ret, retain: true, release: true);
  }

  static NSScriptCommandDescription new1() {
    final _ret = _objc_msgSend_40(_class_NSScriptCommandDescription, _sel_new);
    return NSScriptCommandDescription.castFromPointer(_ret,
        retain: false, release: true);
  }

  static NSScriptCommandDescription allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_47(
        _class_NSScriptCommandDescription, _sel_allocWithZone_, zone);
    return NSScriptCommandDescription.castFromPointer(_ret,
        retain: false, release: true);
  }

  static NSScriptCommandDescription alloc() {
    final _ret =
        _objc_msgSend_40(_class_NSScriptCommandDescription, _sel_alloc);
    return NSScriptCommandDescription.castFromPointer(_ret,
        retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.NSObject aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.NSObject? anArgument) {
    _objc_msgSend_48(
        _class_NSScriptCommandDescription,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  static void cancelPreviousPerformRequestsWithTarget_(objc.NSObject aTarget) {
    _objc_msgSend_49(_class_NSScriptCommandDescription,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_7(_class_NSScriptCommandDescription,
        _sel_accessInstanceVariablesDirectly);
  }

  static bool useStoredAccessor() {
    return _objc_msgSend_7(
        _class_NSScriptCommandDescription, _sel_useStoredAccessor);
  }

  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_50(_class_NSScriptCommandDescription,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_51(_class_NSScriptCommandDescription,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_52(
        _class_NSScriptCommandDescription,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_6(
        _class_NSScriptCommandDescription, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSObject classForKeyedUnarchiver() {
    final _ret = _objc_msgSend_40(
        _class_NSScriptCommandDescription, _sel_classForKeyedUnarchiver);
    return objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }
}

late final _class_NSScriptCommandDescription =
    objc.getClass("NSScriptCommandDescription");
late final _sel_initWithSuiteName_commandName_dictionary_ =
    objc.registerName("initWithSuiteName:commandName:dictionary:");
late final _sel_commandName = objc.registerName("commandName");
late final _sel_appleEventClassCode = objc.registerName("appleEventClassCode");
late final _sel_commandClassName = objc.registerName("commandClassName");
late final _sel_returnType = objc.registerName("returnType");
late final _sel_appleEventCodeForReturnType =
    objc.registerName("appleEventCodeForReturnType");
late final _sel_argumentNames = objc.registerName("argumentNames");
late final _sel_typeForArgumentWithName_ =
    objc.registerName("typeForArgumentWithName:");
late final _sel_appleEventCodeForArgumentWithName_ =
    objc.registerName("appleEventCodeForArgumentWithName:");
final _objc_msgSend_706 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedInt Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        int Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_isOptionalArgumentWithName_ =
    objc.registerName("isOptionalArgumentWithName:");

class NSScriptCommand extends objc.NSObject {
  NSScriptCommand._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSScriptCommand] that points to the same underlying object as [other].
  NSScriptCommand.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSScriptCommand] that wraps the given raw object pointer.
  NSScriptCommand.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSScriptCommand].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSScriptCommand);
  }

  NSScriptCommand initWithCommandDescription_(
      NSScriptCommandDescription commandDef) {
    final _ret = _objc_msgSend_707(
        this.pointer, _sel_initWithCommandDescription_, commandDef.pointer);
    return NSScriptCommand.castFromPointer(_ret, retain: true, release: true);
  }

  NSScriptCommand? initWithCoder_(objc.NSCoder inCoder) {
    final _ret =
        _objc_msgSend_231(this.pointer, _sel_initWithCoder_, inCoder.pointer);
    return _ret.address == 0
        ? null
        : NSScriptCommand.castFromPointer(_ret, retain: true, release: true);
  }

  NSScriptCommandDescription get commandDescription {
    final _ret = _objc_msgSend_708(this.pointer, _sel_commandDescription);
    return NSScriptCommandDescription.castFromPointer(_ret,
        retain: true, release: true);
  }

  objc.NSObject? get directParameter {
    final _ret = _objc_msgSend_66(this.pointer, _sel_directParameter);
    return _ret.address == 0
        ? null
        : objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }

  set directParameter(objc.NSObject? value) {
    return _objc_msgSend_188(
        this.pointer, _sel_setDirectParameter_, value?.pointer ?? ffi.nullptr);
  }

  NSScriptObjectSpecifier? get receiversSpecifier {
    final _ret = _objc_msgSend_737(this.pointer, _sel_receiversSpecifier);
    return _ret.address == 0
        ? null
        : NSScriptObjectSpecifier.castFromPointer(_ret,
            retain: true, release: true);
  }

  set receiversSpecifier(NSScriptObjectSpecifier? value) {
    return _objc_msgSend_738(this.pointer, _sel_setReceiversSpecifier_,
        value?.pointer ?? ffi.nullptr);
  }

  objc.NSObject? get evaluatedReceivers {
    final _ret = _objc_msgSend_66(this.pointer, _sel_evaluatedReceivers);
    return _ret.address == 0
        ? null
        : objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSDictionary? get arguments {
    final _ret = _objc_msgSend_65(this.pointer, _sel_arguments);
    return _ret.address == 0
        ? null
        : objc.NSDictionary.castFromPointer(_ret, retain: true, release: true);
  }

  set arguments(objc.NSDictionary? value) {
    return _objc_msgSend_173(
        this.pointer, _sel_setArguments_, value?.pointer ?? ffi.nullptr);
  }

  objc.NSDictionary? get evaluatedArguments {
    final _ret = _objc_msgSend_65(this.pointer, _sel_evaluatedArguments);
    return _ret.address == 0
        ? null
        : objc.NSDictionary.castFromPointer(_ret, retain: true, release: true);
  }

  bool get wellFormed {
    return _objc_msgSend_7(this.pointer, _sel_isWellFormed);
  }

  objc.NSObject? performDefaultImplementation() {
    final _ret =
        _objc_msgSend_66(this.pointer, _sel_performDefaultImplementation);
    return _ret.address == 0
        ? null
        : objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSObject? executeCommand() {
    final _ret = _objc_msgSend_66(this.pointer, _sel_executeCommand);
    return _ret.address == 0
        ? null
        : objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }

  int get scriptErrorNumber {
    return _objc_msgSend_114(this.pointer, _sel_scriptErrorNumber);
  }

  set scriptErrorNumber(int value) {
    return _objc_msgSend_134(this.pointer, _sel_setScriptErrorNumber_, value);
  }

  NSAppleEventDescriptor? get scriptErrorOffendingObjectDescriptor {
    final _ret = _objc_msgSend_742(
        this.pointer, _sel_scriptErrorOffendingObjectDescriptor);
    return _ret.address == 0
        ? null
        : NSAppleEventDescriptor.castFromPointer(_ret,
            retain: true, release: true);
  }

  set scriptErrorOffendingObjectDescriptor(NSAppleEventDescriptor? value) {
    return _objc_msgSend_743(
        this.pointer,
        _sel_setScriptErrorOffendingObjectDescriptor_,
        value?.pointer ?? ffi.nullptr);
  }

  NSAppleEventDescriptor? get scriptErrorExpectedTypeDescriptor {
    final _ret =
        _objc_msgSend_742(this.pointer, _sel_scriptErrorExpectedTypeDescriptor);
    return _ret.address == 0
        ? null
        : NSAppleEventDescriptor.castFromPointer(_ret,
            retain: true, release: true);
  }

  set scriptErrorExpectedTypeDescriptor(NSAppleEventDescriptor? value) {
    return _objc_msgSend_743(
        this.pointer,
        _sel_setScriptErrorExpectedTypeDescriptor_,
        value?.pointer ?? ffi.nullptr);
  }

  objc.NSString? get scriptErrorString {
    final _ret = _objc_msgSend_13(this.pointer, _sel_scriptErrorString);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  set scriptErrorString(objc.NSString? value) {
    return _objc_msgSend_46(this.pointer, _sel_setScriptErrorString_,
        value?.pointer ?? ffi.nullptr);
  }

  static NSScriptCommand? currentCommand() {
    final _ret = _objc_msgSend_744(_class_NSScriptCommand, _sel_currentCommand);
    return _ret.address == 0
        ? null
        : NSScriptCommand.castFromPointer(_ret, retain: true, release: true);
  }

  NSAppleEventDescriptor? get appleEvent {
    final _ret = _objc_msgSend_742(this.pointer, _sel_appleEvent);
    return _ret.address == 0
        ? null
        : NSAppleEventDescriptor.castFromPointer(_ret,
            retain: true, release: true);
  }

  void suspendExecution() {
    _objc_msgSend_82(this.pointer, _sel_suspendExecution);
  }

  void resumeExecutionWithResult_(objc.NSObject? result) {
    _objc_msgSend_215(this.pointer, _sel_resumeExecutionWithResult_,
        result?.pointer ?? ffi.nullptr);
  }

  @override
  NSScriptCommand init() {
    final _ret = _objc_msgSend_40(this.pointer, _sel_init);
    return NSScriptCommand.castFromPointer(_ret, retain: true, release: true);
  }

  static NSScriptCommand new1() {
    final _ret = _objc_msgSend_40(_class_NSScriptCommand, _sel_new);
    return NSScriptCommand.castFromPointer(_ret, retain: false, release: true);
  }

  static NSScriptCommand allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_47(_class_NSScriptCommand, _sel_allocWithZone_, zone);
    return NSScriptCommand.castFromPointer(_ret, retain: false, release: true);
  }

  static NSScriptCommand alloc() {
    final _ret = _objc_msgSend_40(_class_NSScriptCommand, _sel_alloc);
    return NSScriptCommand.castFromPointer(_ret, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.NSObject aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.NSObject? anArgument) {
    _objc_msgSend_48(
        _class_NSScriptCommand,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  static void cancelPreviousPerformRequestsWithTarget_(objc.NSObject aTarget) {
    _objc_msgSend_49(_class_NSScriptCommand,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_7(
        _class_NSScriptCommand, _sel_accessInstanceVariablesDirectly);
  }

  static bool useStoredAccessor() {
    return _objc_msgSend_7(_class_NSScriptCommand, _sel_useStoredAccessor);
  }

  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_50(_class_NSScriptCommand,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_51(_class_NSScriptCommand,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_52(
        _class_NSScriptCommand,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_6(
        _class_NSScriptCommand, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSObject classForKeyedUnarchiver() {
    final _ret =
        _objc_msgSend_40(_class_NSScriptCommand, _sel_classForKeyedUnarchiver);
    return objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }
}

late final _class_NSScriptCommand = objc.getClass("NSScriptCommand");
late final _sel_initWithCommandDescription_ =
    objc.registerName("initWithCommandDescription:");
final _objc_msgSend_707 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_commandDescription = objc.registerName("commandDescription");
final _objc_msgSend_708 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_directParameter = objc.registerName("directParameter");
late final _sel_setDirectParameter_ = objc.registerName("setDirectParameter:");

class NSScriptObjectSpecifier extends objc.NSObject {
  NSScriptObjectSpecifier._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSScriptObjectSpecifier] that points to the same underlying object as [other].
  NSScriptObjectSpecifier.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSScriptObjectSpecifier] that wraps the given raw object pointer.
  NSScriptObjectSpecifier.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSScriptObjectSpecifier].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSScriptObjectSpecifier);
  }

  static NSScriptObjectSpecifier? objectSpecifierWithDescriptor_(
      NSAppleEventDescriptor descriptor) {
    final _ret = _objc_msgSend_734(_class_NSScriptObjectSpecifier,
        _sel_objectSpecifierWithDescriptor_, descriptor.pointer);
    return _ret.address == 0
        ? null
        : NSScriptObjectSpecifier.castFromPointer(_ret,
            retain: true, release: true);
  }

  NSScriptObjectSpecifier initWithContainerSpecifier_key_(
      NSScriptObjectSpecifier container, objc.NSString property) {
    final _ret = _objc_msgSend_735(
        this.pointer,
        _sel_initWithContainerSpecifier_key_,
        container.pointer,
        property.pointer);
    return NSScriptObjectSpecifier.castFromPointer(_ret,
        retain: true, release: true);
  }

  NSScriptObjectSpecifier
      initWithContainerClassDescription_containerSpecifier_key_(
          NSScriptClassDescription classDesc,
          NSScriptObjectSpecifier? container,
          objc.NSString property) {
    final _ret = _objc_msgSend_736(
        this.pointer,
        _sel_initWithContainerClassDescription_containerSpecifier_key_,
        classDesc.pointer,
        container?.pointer ?? ffi.nullptr,
        property.pointer);
    return NSScriptObjectSpecifier.castFromPointer(_ret,
        retain: true, release: true);
  }

  NSScriptObjectSpecifier? initWithCoder_(objc.NSCoder inCoder) {
    final _ret =
        _objc_msgSend_231(this.pointer, _sel_initWithCoder_, inCoder.pointer);
    return _ret.address == 0
        ? null
        : NSScriptObjectSpecifier.castFromPointer(_ret,
            retain: true, release: true);
  }

  NSScriptObjectSpecifier? get childSpecifier {
    final _ret = _objc_msgSend_737(this.pointer, _sel_childSpecifier);
    return _ret.address == 0
        ? null
        : NSScriptObjectSpecifier.castFromPointer(_ret,
            retain: true, release: true);
  }

  set childSpecifier(NSScriptObjectSpecifier? value) {
    return _objc_msgSend_738(
        this.pointer, _sel_setChildSpecifier_, value?.pointer ?? ffi.nullptr);
  }

  NSScriptObjectSpecifier? get containerSpecifier {
    final _ret = _objc_msgSend_737(this.pointer, _sel_containerSpecifier);
    return _ret.address == 0
        ? null
        : NSScriptObjectSpecifier.castFromPointer(_ret,
            retain: true, release: true);
  }

  set containerSpecifier(NSScriptObjectSpecifier? value) {
    return _objc_msgSend_738(this.pointer, _sel_setContainerSpecifier_,
        value?.pointer ?? ffi.nullptr);
  }

  bool get containerIsObjectBeingTested {
    return _objc_msgSend_7(this.pointer, _sel_containerIsObjectBeingTested);
  }

  set containerIsObjectBeingTested(bool value) {
    return _objc_msgSend_41(
        this.pointer, _sel_setContainerIsObjectBeingTested_, value);
  }

  bool get containerIsRangeContainerObject {
    return _objc_msgSend_7(this.pointer, _sel_containerIsRangeContainerObject);
  }

  set containerIsRangeContainerObject(bool value) {
    return _objc_msgSend_41(
        this.pointer, _sel_setContainerIsRangeContainerObject_, value);
  }

  objc.NSString get key {
    final _ret = _objc_msgSend_12(this.pointer, _sel_key);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  set key(objc.NSString value) {
    return _objc_msgSend_99(this.pointer, _sel_setKey_, value.pointer);
  }

  NSScriptClassDescription? get containerClassDescription {
    final _ret =
        _objc_msgSend_703(this.pointer, _sel_containerClassDescription);
    return _ret.address == 0
        ? null
        : NSScriptClassDescription.castFromPointer(_ret,
            retain: true, release: true);
  }

  set containerClassDescription(NSScriptClassDescription? value) {
    return _objc_msgSend_739(this.pointer, _sel_setContainerClassDescription_,
        value?.pointer ?? ffi.nullptr);
  }

  NSScriptClassDescription? get keyClassDescription {
    final _ret = _objc_msgSend_703(this.pointer, _sel_keyClassDescription);
    return _ret.address == 0
        ? null
        : NSScriptClassDescription.castFromPointer(_ret,
            retain: true, release: true);
  }

  ffi.Pointer<ffi.Long> indicesOfObjectsByEvaluatingWithContainer_count_(
      objc.NSObject container, ffi.Pointer<ffi.Long> count) {
    return _objc_msgSend_740(
        this.pointer,
        _sel_indicesOfObjectsByEvaluatingWithContainer_count_,
        container.pointer,
        count);
  }

  objc.NSObject? objectsByEvaluatingWithContainers_(objc.NSObject containers) {
    final _ret = _objc_msgSend_741(this.pointer,
        _sel_objectsByEvaluatingWithContainers_, containers.pointer);
    return _ret.address == 0
        ? null
        : objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSObject? get objectsByEvaluatingSpecifier {
    final _ret =
        _objc_msgSend_66(this.pointer, _sel_objectsByEvaluatingSpecifier);
    return _ret.address == 0
        ? null
        : objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }

  int get evaluationErrorNumber {
    return _objc_msgSend_114(this.pointer, _sel_evaluationErrorNumber);
  }

  set evaluationErrorNumber(int value) {
    return _objc_msgSend_134(
        this.pointer, _sel_setEvaluationErrorNumber_, value);
  }

  NSScriptObjectSpecifier? get evaluationErrorSpecifier {
    final _ret = _objc_msgSend_737(this.pointer, _sel_evaluationErrorSpecifier);
    return _ret.address == 0
        ? null
        : NSScriptObjectSpecifier.castFromPointer(_ret,
            retain: true, release: true);
  }

  NSAppleEventDescriptor? get descriptor {
    final _ret = _objc_msgSend_742(this.pointer, _sel_descriptor);
    return _ret.address == 0
        ? null
        : NSAppleEventDescriptor.castFromPointer(_ret,
            retain: true, release: true);
  }

  @override
  NSScriptObjectSpecifier init() {
    final _ret = _objc_msgSend_40(this.pointer, _sel_init);
    return NSScriptObjectSpecifier.castFromPointer(_ret,
        retain: true, release: true);
  }

  static NSScriptObjectSpecifier new1() {
    final _ret = _objc_msgSend_40(_class_NSScriptObjectSpecifier, _sel_new);
    return NSScriptObjectSpecifier.castFromPointer(_ret,
        retain: false, release: true);
  }

  static NSScriptObjectSpecifier allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_47(
        _class_NSScriptObjectSpecifier, _sel_allocWithZone_, zone);
    return NSScriptObjectSpecifier.castFromPointer(_ret,
        retain: false, release: true);
  }

  static NSScriptObjectSpecifier alloc() {
    final _ret = _objc_msgSend_40(_class_NSScriptObjectSpecifier, _sel_alloc);
    return NSScriptObjectSpecifier.castFromPointer(_ret,
        retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.NSObject aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.NSObject? anArgument) {
    _objc_msgSend_48(
        _class_NSScriptObjectSpecifier,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  static void cancelPreviousPerformRequestsWithTarget_(objc.NSObject aTarget) {
    _objc_msgSend_49(_class_NSScriptObjectSpecifier,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_7(
        _class_NSScriptObjectSpecifier, _sel_accessInstanceVariablesDirectly);
  }

  static bool useStoredAccessor() {
    return _objc_msgSend_7(
        _class_NSScriptObjectSpecifier, _sel_useStoredAccessor);
  }

  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_50(_class_NSScriptObjectSpecifier,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_51(_class_NSScriptObjectSpecifier,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_52(
        _class_NSScriptObjectSpecifier,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_6(
        _class_NSScriptObjectSpecifier, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSObject classForKeyedUnarchiver() {
    final _ret = _objc_msgSend_40(
        _class_NSScriptObjectSpecifier, _sel_classForKeyedUnarchiver);
    return objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }
}

late final _class_NSScriptObjectSpecifier =
    objc.getClass("NSScriptObjectSpecifier");

class NSAppleEventDescriptor extends objc.NSObject {
  NSAppleEventDescriptor._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSAppleEventDescriptor] that points to the same underlying object as [other].
  NSAppleEventDescriptor.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [NSAppleEventDescriptor] that wraps the given raw object pointer.
  NSAppleEventDescriptor.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSAppleEventDescriptor].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_NSAppleEventDescriptor);
  }

  static NSAppleEventDescriptor nullDescriptor() {
    final _ret =
        _objc_msgSend_709(_class_NSAppleEventDescriptor, _sel_nullDescriptor);
    return NSAppleEventDescriptor.castFromPointer(_ret,
        retain: true, release: true);
  }

  static NSAppleEventDescriptor? descriptorWithDescriptorType_bytes_length_(
      int descriptorType, ffi.Pointer<ffi.Void> bytes, int byteCount) {
    final _ret = _objc_msgSend_710(
        _class_NSAppleEventDescriptor,
        _sel_descriptorWithDescriptorType_bytes_length_,
        descriptorType,
        bytes,
        byteCount);
    return _ret.address == 0
        ? null
        : NSAppleEventDescriptor.castFromPointer(_ret,
            retain: true, release: true);
  }

  static NSAppleEventDescriptor? descriptorWithDescriptorType_data_(
      int descriptorType, objc.NSData? data) {
    final _ret = _objc_msgSend_711(
        _class_NSAppleEventDescriptor,
        _sel_descriptorWithDescriptorType_data_,
        descriptorType,
        data?.pointer ?? ffi.nullptr);
    return _ret.address == 0
        ? null
        : NSAppleEventDescriptor.castFromPointer(_ret,
            retain: true, release: true);
  }

  static NSAppleEventDescriptor descriptorWithBoolean_(int boolean) {
    final _ret = _objc_msgSend_712(
        _class_NSAppleEventDescriptor, _sel_descriptorWithBoolean_, boolean);
    return NSAppleEventDescriptor.castFromPointer(_ret,
        retain: true, release: true);
  }

  static NSAppleEventDescriptor descriptorWithEnumCode_(int enumerator) {
    final _ret = _objc_msgSend_713(_class_NSAppleEventDescriptor,
        _sel_descriptorWithEnumCode_, enumerator);
    return NSAppleEventDescriptor.castFromPointer(_ret,
        retain: true, release: true);
  }

  static NSAppleEventDescriptor descriptorWithInt32_(int signedInt) {
    final _ret = _objc_msgSend_714(
        _class_NSAppleEventDescriptor, _sel_descriptorWithInt32_, signedInt);
    return NSAppleEventDescriptor.castFromPointer(_ret,
        retain: true, release: true);
  }

  static NSAppleEventDescriptor descriptorWithDouble_(double doubleValue) {
    final _ret = _objc_msgSend_715(
        _class_NSAppleEventDescriptor, _sel_descriptorWithDouble_, doubleValue);
    return NSAppleEventDescriptor.castFromPointer(_ret,
        retain: true, release: true);
  }

  static NSAppleEventDescriptor descriptorWithTypeCode_(int typeCode) {
    final _ret = _objc_msgSend_713(
        _class_NSAppleEventDescriptor, _sel_descriptorWithTypeCode_, typeCode);
    return NSAppleEventDescriptor.castFromPointer(_ret,
        retain: true, release: true);
  }

  static NSAppleEventDescriptor descriptorWithString_(objc.NSString string) {
    final _ret = _objc_msgSend_716(_class_NSAppleEventDescriptor,
        _sel_descriptorWithString_, string.pointer);
    return NSAppleEventDescriptor.castFromPointer(_ret,
        retain: true, release: true);
  }

  static NSAppleEventDescriptor descriptorWithDate_(objc.NSDate date) {
    final _ret = _objc_msgSend_717(
        _class_NSAppleEventDescriptor, _sel_descriptorWithDate_, date.pointer);
    return NSAppleEventDescriptor.castFromPointer(_ret,
        retain: true, release: true);
  }

  static NSAppleEventDescriptor descriptorWithFileURL_(objc.NSURL fileURL) {
    final _ret = _objc_msgSend_718(_class_NSAppleEventDescriptor,
        _sel_descriptorWithFileURL_, fileURL.pointer);
    return NSAppleEventDescriptor.castFromPointer(_ret,
        retain: true, release: true);
  }

  static NSAppleEventDescriptor
      appleEventWithEventClass_eventID_targetDescriptor_returnID_transactionID_(
          int eventClass,
          int eventID,
          NSAppleEventDescriptor? targetDescriptor,
          int returnID,
          int transactionID) {
    final _ret = _objc_msgSend_719(
        _class_NSAppleEventDescriptor,
        _sel_appleEventWithEventClass_eventID_targetDescriptor_returnID_transactionID_,
        eventClass,
        eventID,
        targetDescriptor?.pointer ?? ffi.nullptr,
        returnID,
        transactionID);
    return NSAppleEventDescriptor.castFromPointer(_ret,
        retain: true, release: true);
  }

  static NSAppleEventDescriptor listDescriptor() {
    final _ret =
        _objc_msgSend_709(_class_NSAppleEventDescriptor, _sel_listDescriptor);
    return NSAppleEventDescriptor.castFromPointer(_ret,
        retain: true, release: true);
  }

  static NSAppleEventDescriptor recordDescriptor() {
    final _ret =
        _objc_msgSend_709(_class_NSAppleEventDescriptor, _sel_recordDescriptor);
    return NSAppleEventDescriptor.castFromPointer(_ret,
        retain: true, release: true);
  }

  static NSAppleEventDescriptor currentProcessDescriptor() {
    final _ret = _objc_msgSend_709(
        _class_NSAppleEventDescriptor, _sel_currentProcessDescriptor);
    return NSAppleEventDescriptor.castFromPointer(_ret,
        retain: true, release: true);
  }

  static NSAppleEventDescriptor descriptorWithProcessIdentifier_(
      int processIdentifier) {
    final _ret = _objc_msgSend_714(_class_NSAppleEventDescriptor,
        _sel_descriptorWithProcessIdentifier_, processIdentifier);
    return NSAppleEventDescriptor.castFromPointer(_ret,
        retain: true, release: true);
  }

  static NSAppleEventDescriptor descriptorWithBundleIdentifier_(
      objc.NSString bundleIdentifier) {
    final _ret = _objc_msgSend_716(_class_NSAppleEventDescriptor,
        _sel_descriptorWithBundleIdentifier_, bundleIdentifier.pointer);
    return NSAppleEventDescriptor.castFromPointer(_ret,
        retain: true, release: true);
  }

  static NSAppleEventDescriptor descriptorWithApplicationURL_(
      objc.NSURL applicationURL) {
    final _ret = _objc_msgSend_718(_class_NSAppleEventDescriptor,
        _sel_descriptorWithApplicationURL_, applicationURL.pointer);
    return NSAppleEventDescriptor.castFromPointer(_ret,
        retain: true, release: true);
  }

  NSAppleEventDescriptor initWithAEDescNoCopy_(ffi.Pointer<AEDesc> aeDesc) {
    final _ret =
        _objc_msgSend_720(this.pointer, _sel_initWithAEDescNoCopy_, aeDesc);
    return NSAppleEventDescriptor.castFromPointer(_ret,
        retain: false, release: true);
  }

  NSAppleEventDescriptor? initWithDescriptorType_bytes_length_(
      int descriptorType, ffi.Pointer<ffi.Void> bytes, int byteCount) {
    final _ret = _objc_msgSend_721(
        this.pointer,
        _sel_initWithDescriptorType_bytes_length_,
        descriptorType,
        bytes,
        byteCount);
    return _ret.address == 0
        ? null
        : NSAppleEventDescriptor.castFromPointer(_ret,
            retain: true, release: true);
  }

  NSAppleEventDescriptor? initWithDescriptorType_data_(
      int descriptorType, objc.NSData? data) {
    final _ret = _objc_msgSend_722(
        this.pointer,
        _sel_initWithDescriptorType_data_,
        descriptorType,
        data?.pointer ?? ffi.nullptr);
    return _ret.address == 0
        ? null
        : NSAppleEventDescriptor.castFromPointer(_ret,
            retain: true, release: true);
  }

  NSAppleEventDescriptor
      initWithEventClass_eventID_targetDescriptor_returnID_transactionID_(
          int eventClass,
          int eventID,
          NSAppleEventDescriptor? targetDescriptor,
          int returnID,
          int transactionID) {
    final _ret = _objc_msgSend_723(
        this.pointer,
        _sel_initWithEventClass_eventID_targetDescriptor_returnID_transactionID_,
        eventClass,
        eventID,
        targetDescriptor?.pointer ?? ffi.nullptr,
        returnID,
        transactionID);
    return NSAppleEventDescriptor.castFromPointer(_ret,
        retain: true, release: true);
  }

  NSAppleEventDescriptor initListDescriptor() {
    final _ret = _objc_msgSend_40(this.pointer, _sel_initListDescriptor);
    return NSAppleEventDescriptor.castFromPointer(_ret,
        retain: true, release: true);
  }

  NSAppleEventDescriptor initRecordDescriptor() {
    final _ret = _objc_msgSend_40(this.pointer, _sel_initRecordDescriptor);
    return NSAppleEventDescriptor.castFromPointer(_ret,
        retain: true, release: true);
  }

  ffi.Pointer<AEDesc> get aeDesc {
    return _objc_msgSend_724(this.pointer, _sel_aeDesc);
  }

  int get descriptorType {
    return _objc_msgSend_704(this.pointer, _sel_descriptorType);
  }

  objc.NSData get data {
    final _ret = _objc_msgSend_104(this.pointer, _sel_data);
    return objc.NSData.castFromPointer(_ret, retain: true, release: true);
  }

  int get booleanValue {
    return _objc_msgSend_725(this.pointer, _sel_booleanValue);
  }

  int get enumCodeValue {
    return _objc_msgSend_704(this.pointer, _sel_enumCodeValue);
  }

  int get int32Value {
    return _objc_msgSend_264(this.pointer, _sel_int32Value);
  }

  double get doubleValue {
    return objc.useMsgSendVariants
        ? _objc_msgSend_115Fpret(this.pointer, _sel_doubleValue)
        : _objc_msgSend_115(this.pointer, _sel_doubleValue);
  }

  int get typeCodeValue {
    return _objc_msgSend_704(this.pointer, _sel_typeCodeValue);
  }

  objc.NSString? get stringValue {
    final _ret = _objc_msgSend_13(this.pointer, _sel_stringValue);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSDate? get dateValue {
    final _ret = _objc_msgSend_116(this.pointer, _sel_dateValue);
    return _ret.address == 0
        ? null
        : objc.NSDate.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSURL? get fileURLValue {
    final _ret = _objc_msgSend_10(this.pointer, _sel_fileURLValue);
    return _ret.address == 0
        ? null
        : objc.NSURL.castFromPointer(_ret, retain: true, release: true);
  }

  int get eventClass {
    return _objc_msgSend_704(this.pointer, _sel_eventClass);
  }

  int get eventID {
    return _objc_msgSend_704(this.pointer, _sel_eventID);
  }

  int get returnID {
    return _objc_msgSend_726(this.pointer, _sel_returnID);
  }

  int get transactionID {
    return _objc_msgSend_264(this.pointer, _sel_transactionID);
  }

  void setParamDescriptor_forKeyword_(
      NSAppleEventDescriptor descriptor, int keyword) {
    _objc_msgSend_727(this.pointer, _sel_setParamDescriptor_forKeyword_,
        descriptor.pointer, keyword);
  }

  NSAppleEventDescriptor? paramDescriptorForKeyword_(int keyword) {
    final _ret = _objc_msgSend_728(
        this.pointer, _sel_paramDescriptorForKeyword_, keyword);
    return _ret.address == 0
        ? null
        : NSAppleEventDescriptor.castFromPointer(_ret,
            retain: true, release: true);
  }

  void removeParamDescriptorWithKeyword_(int keyword) {
    _objc_msgSend_729(
        this.pointer, _sel_removeParamDescriptorWithKeyword_, keyword);
  }

  void setAttributeDescriptor_forKeyword_(
      NSAppleEventDescriptor descriptor, int keyword) {
    _objc_msgSend_727(this.pointer, _sel_setAttributeDescriptor_forKeyword_,
        descriptor.pointer, keyword);
  }

  NSAppleEventDescriptor? attributeDescriptorForKeyword_(int keyword) {
    final _ret = _objc_msgSend_728(
        this.pointer, _sel_attributeDescriptorForKeyword_, keyword);
    return _ret.address == 0
        ? null
        : NSAppleEventDescriptor.castFromPointer(_ret,
            retain: true, release: true);
  }

  NSAppleEventDescriptor? sendEventWithOptions_timeout_error_(
      int sendOptions,
      double timeoutInSeconds,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    final _ret = _objc_msgSend_730(
        this.pointer,
        _sel_sendEventWithOptions_timeout_error_,
        sendOptions,
        timeoutInSeconds,
        error);
    return _ret.address == 0
        ? null
        : NSAppleEventDescriptor.castFromPointer(_ret,
            retain: true, release: true);
  }

  bool get isRecordDescriptor {
    return _objc_msgSend_7(this.pointer, _sel_isRecordDescriptor);
  }

  int get numberOfItems {
    return _objc_msgSend_114(this.pointer, _sel_numberOfItems);
  }

  void insertDescriptor_atIndex_(NSAppleEventDescriptor descriptor, int index) {
    _objc_msgSend_731(this.pointer, _sel_insertDescriptor_atIndex_,
        descriptor.pointer, index);
  }

  NSAppleEventDescriptor? descriptorAtIndex_(int index) {
    final _ret =
        _objc_msgSend_732(this.pointer, _sel_descriptorAtIndex_, index);
    return _ret.address == 0
        ? null
        : NSAppleEventDescriptor.castFromPointer(_ret,
            retain: true, release: true);
  }

  void removeDescriptorAtIndex_(int index) {
    _objc_msgSend_135(this.pointer, _sel_removeDescriptorAtIndex_, index);
  }

  void setDescriptor_forKeyword_(
      NSAppleEventDescriptor descriptor, int keyword) {
    _objc_msgSend_727(this.pointer, _sel_setDescriptor_forKeyword_,
        descriptor.pointer, keyword);
  }

  NSAppleEventDescriptor? descriptorForKeyword_(int keyword) {
    final _ret =
        _objc_msgSend_728(this.pointer, _sel_descriptorForKeyword_, keyword);
    return _ret.address == 0
        ? null
        : NSAppleEventDescriptor.castFromPointer(_ret,
            retain: true, release: true);
  }

  void removeDescriptorWithKeyword_(int keyword) {
    _objc_msgSend_729(this.pointer, _sel_removeDescriptorWithKeyword_, keyword);
  }

  int keywordForDescriptorAtIndex_(int index) {
    return _objc_msgSend_733(
        this.pointer, _sel_keywordForDescriptorAtIndex_, index);
  }

  NSAppleEventDescriptor? coerceToDescriptorType_(int descriptorType) {
    final _ret = _objc_msgSend_728(
        this.pointer, _sel_coerceToDescriptorType_, descriptorType);
    return _ret.address == 0
        ? null
        : NSAppleEventDescriptor.castFromPointer(_ret,
            retain: true, release: true);
  }

  @override
  NSAppleEventDescriptor init() {
    final _ret = _objc_msgSend_40(this.pointer, _sel_init);
    return NSAppleEventDescriptor.castFromPointer(_ret,
        retain: true, release: true);
  }

  static NSAppleEventDescriptor new1() {
    final _ret = _objc_msgSend_40(_class_NSAppleEventDescriptor, _sel_new);
    return NSAppleEventDescriptor.castFromPointer(_ret,
        retain: false, release: true);
  }

  static NSAppleEventDescriptor allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_47(
        _class_NSAppleEventDescriptor, _sel_allocWithZone_, zone);
    return NSAppleEventDescriptor.castFromPointer(_ret,
        retain: false, release: true);
  }

  static NSAppleEventDescriptor alloc() {
    final _ret = _objc_msgSend_40(_class_NSAppleEventDescriptor, _sel_alloc);
    return NSAppleEventDescriptor.castFromPointer(_ret,
        retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.NSObject aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.NSObject? anArgument) {
    _objc_msgSend_48(
        _class_NSAppleEventDescriptor,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  static void cancelPreviousPerformRequestsWithTarget_(objc.NSObject aTarget) {
    _objc_msgSend_49(_class_NSAppleEventDescriptor,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_7(
        _class_NSAppleEventDescriptor, _sel_accessInstanceVariablesDirectly);
  }

  static bool useStoredAccessor() {
    return _objc_msgSend_7(
        _class_NSAppleEventDescriptor, _sel_useStoredAccessor);
  }

  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_50(_class_NSAppleEventDescriptor,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_51(_class_NSAppleEventDescriptor,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_52(
        _class_NSAppleEventDescriptor,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_6(
        _class_NSAppleEventDescriptor, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSObject classForKeyedUnarchiver() {
    final _ret = _objc_msgSend_40(
        _class_NSAppleEventDescriptor, _sel_classForKeyedUnarchiver);
    return objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }
}

late final _class_NSAppleEventDescriptor =
    objc.getClass("NSAppleEventDescriptor");
late final _sel_nullDescriptor = objc.registerName("nullDescriptor");
final _objc_msgSend_709 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_descriptorWithDescriptorType_bytes_length_ =
    objc.registerName("descriptorWithDescriptorType:bytes:length:");
final _objc_msgSend_710 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.UnsignedInt,
                ffi.Pointer<ffi.Void>,
                ffi.UnsignedLong)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int, ffi.Pointer<ffi.Void>, int)>();
late final _sel_descriptorWithDescriptorType_data_ =
    objc.registerName("descriptorWithDescriptorType:data:");
final _objc_msgSend_711 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.UnsignedInt,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_descriptorWithBoolean_ =
    objc.registerName("descriptorWithBoolean:");
final _objc_msgSend_712 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedChar)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_descriptorWithEnumCode_ =
    objc.registerName("descriptorWithEnumCode:");
final _objc_msgSend_713 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedInt)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_descriptorWithInt32_ =
    objc.registerName("descriptorWithInt32:");
final _objc_msgSend_714 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Int)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_descriptorWithDouble_ =
    objc.registerName("descriptorWithDouble:");
final _objc_msgSend_715 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Double)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, double)>();
late final _sel_descriptorWithTypeCode_ =
    objc.registerName("descriptorWithTypeCode:");
late final _sel_descriptorWithString_ =
    objc.registerName("descriptorWithString:");
final _objc_msgSend_716 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_descriptorWithDate_ = objc.registerName("descriptorWithDate:");
final _objc_msgSend_717 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_descriptorWithFileURL_ =
    objc.registerName("descriptorWithFileURL:");
final _objc_msgSend_718 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_appleEventWithEventClass_eventID_targetDescriptor_returnID_transactionID_ =
    objc.registerName(
        "appleEventWithEventClass:eventID:targetDescriptor:returnID:transactionID:");
final _objc_msgSend_719 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.UnsignedInt,
                ffi.UnsignedInt,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Short,
                ffi.Int)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int,
            int,
            ffi.Pointer<objc.ObjCObject>,
            int,
            int)>();
late final _sel_listDescriptor = objc.registerName("listDescriptor");
late final _sel_recordDescriptor = objc.registerName("recordDescriptor");
late final _sel_currentProcessDescriptor =
    objc.registerName("currentProcessDescriptor");
late final _sel_descriptorWithProcessIdentifier_ =
    objc.registerName("descriptorWithProcessIdentifier:");
late final _sel_descriptorWithBundleIdentifier_ =
    objc.registerName("descriptorWithBundleIdentifier:");
late final _sel_descriptorWithApplicationURL_ =
    objc.registerName("descriptorWithApplicationURL:");

@ffi.Packed(2)
final class AEDesc extends ffi.Struct {
  @ffi.UnsignedInt()
  external int descriptorType;

  external ffi.Pointer<ffi.Pointer<OpaqueAEDataStorageType>> dataHandle;
}

final class OpaqueAEDataStorageType extends ffi.Opaque {}

late final _sel_initWithAEDescNoCopy_ =
    objc.registerName("initWithAEDescNoCopy:");
final _objc_msgSend_720 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<AEDesc>)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<AEDesc>)>();
late final _sel_initWithDescriptorType_bytes_length_ =
    objc.registerName("initWithDescriptorType:bytes:length:");
final _objc_msgSend_721 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.UnsignedInt,
                ffi.Pointer<ffi.Void>,
                ffi.UnsignedLong)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int, ffi.Pointer<ffi.Void>, int)>();
late final _sel_initWithDescriptorType_data_ =
    objc.registerName("initWithDescriptorType:data:");
final _objc_msgSend_722 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.UnsignedInt,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_initWithEventClass_eventID_targetDescriptor_returnID_transactionID_ =
    objc.registerName(
        "initWithEventClass:eventID:targetDescriptor:returnID:transactionID:");
final _objc_msgSend_723 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.UnsignedInt,
                ffi.UnsignedInt,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Short,
                ffi.Int)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int,
            int,
            ffi.Pointer<objc.ObjCObject>,
            int,
            int)>();
late final _sel_initListDescriptor = objc.registerName("initListDescriptor");
late final _sel_initRecordDescriptor =
    objc.registerName("initRecordDescriptor");
late final _sel_aeDesc = objc.registerName("aeDesc");
final _objc_msgSend_724 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<AEDesc> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<AEDesc> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_descriptorType = objc.registerName("descriptorType");
late final _sel_booleanValue = objc.registerName("booleanValue");
final _objc_msgSend_725 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedChar Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_enumCodeValue = objc.registerName("enumCodeValue");
late final _sel_int32Value = objc.registerName("int32Value");
late final _sel_doubleValue = objc.registerName("doubleValue");
late final _sel_typeCodeValue = objc.registerName("typeCodeValue");
late final _sel_dateValue = objc.registerName("dateValue");
late final _sel_fileURLValue = objc.registerName("fileURLValue");
late final _sel_eventClass = objc.registerName("eventClass");
late final _sel_eventID = objc.registerName("eventID");
late final _sel_returnID = objc.registerName("returnID");
final _objc_msgSend_726 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Short Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_transactionID = objc.registerName("transactionID");
late final _sel_setParamDescriptor_forKeyword_ =
    objc.registerName("setParamDescriptor:forKeyword:");
final _objc_msgSend_727 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.UnsignedInt)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int)>();
late final _sel_paramDescriptorForKeyword_ =
    objc.registerName("paramDescriptorForKeyword:");
final _objc_msgSend_728 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedInt)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_removeParamDescriptorWithKeyword_ =
    objc.registerName("removeParamDescriptorWithKeyword:");
final _objc_msgSend_729 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedInt)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_setAttributeDescriptor_forKeyword_ =
    objc.registerName("setAttributeDescriptor:forKeyword:");
late final _sel_attributeDescriptorForKeyword_ =
    objc.registerName("attributeDescriptorForKeyword:");

abstract class NSAppleEventSendOptions {
  static const int NSAppleEventSendNoReply = 1;
  static const int NSAppleEventSendQueueReply = 2;
  static const int NSAppleEventSendWaitForReply = 3;
  static const int NSAppleEventSendNeverInteract = 16;
  static const int NSAppleEventSendCanInteract = 32;
  static const int NSAppleEventSendAlwaysInteract = 48;
  static const int NSAppleEventSendCanSwitchLayer = 64;
  static const int NSAppleEventSendDontRecord = 4096;
  static const int NSAppleEventSendDontExecute = 8192;
  static const int NSAppleEventSendDontAnnotate = 65536;
  static const int NSAppleEventSendDefaultOptions = 35;
}

late final _sel_sendEventWithOptions_timeout_error_ =
    objc.registerName("sendEventWithOptions:timeout:error:");
final _objc_msgSend_730 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Int32,
                ffi.Double,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int,
            double,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_isRecordDescriptor = objc.registerName("isRecordDescriptor");
late final _sel_numberOfItems = objc.registerName("numberOfItems");
late final _sel_insertDescriptor_atIndex_ =
    objc.registerName("insertDescriptor:atIndex:");
final _objc_msgSend_731 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Long)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int)>();
late final _sel_descriptorAtIndex_ = objc.registerName("descriptorAtIndex:");
final _objc_msgSend_732 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Long)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_removeDescriptorAtIndex_ =
    objc.registerName("removeDescriptorAtIndex:");
late final _sel_setDescriptor_forKeyword_ =
    objc.registerName("setDescriptor:forKeyword:");
late final _sel_descriptorForKeyword_ =
    objc.registerName("descriptorForKeyword:");
late final _sel_removeDescriptorWithKeyword_ =
    objc.registerName("removeDescriptorWithKeyword:");
late final _sel_keywordForDescriptorAtIndex_ =
    objc.registerName("keywordForDescriptorAtIndex:");
final _objc_msgSend_733 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.UnsignedInt Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Long)>>()
    .asFunction<
        int Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_coerceToDescriptorType_ =
    objc.registerName("coerceToDescriptorType:");
late final _sel_objectSpecifierWithDescriptor_ =
    objc.registerName("objectSpecifierWithDescriptor:");
final _objc_msgSend_734 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_initWithContainerSpecifier_key_ =
    objc.registerName("initWithContainerSpecifier:key:");
final _objc_msgSend_735 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_initWithContainerClassDescription_containerSpecifier_key_ = objc
    .registerName("initWithContainerClassDescription:containerSpecifier:key:");
final _objc_msgSend_736 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_childSpecifier = objc.registerName("childSpecifier");
final _objc_msgSend_737 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setChildSpecifier_ = objc.registerName("setChildSpecifier:");
final _objc_msgSend_738 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_containerSpecifier = objc.registerName("containerSpecifier");
late final _sel_setContainerSpecifier_ =
    objc.registerName("setContainerSpecifier:");
late final _sel_containerIsObjectBeingTested =
    objc.registerName("containerIsObjectBeingTested");
late final _sel_setContainerIsObjectBeingTested_ =
    objc.registerName("setContainerIsObjectBeingTested:");
late final _sel_containerIsRangeContainerObject =
    objc.registerName("containerIsRangeContainerObject");
late final _sel_setContainerIsRangeContainerObject_ =
    objc.registerName("setContainerIsRangeContainerObject:");
late final _sel_key = objc.registerName("key");
late final _sel_setKey_ = objc.registerName("setKey:");
late final _sel_containerClassDescription =
    objc.registerName("containerClassDescription");
late final _sel_setContainerClassDescription_ =
    objc.registerName("setContainerClassDescription:");
final _objc_msgSend_739 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_keyClassDescription = objc.registerName("keyClassDescription");
late final _sel_indicesOfObjectsByEvaluatingWithContainer_count_ =
    objc.registerName("indicesOfObjectsByEvaluatingWithContainer:count:");
final _objc_msgSend_740 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<ffi.Long> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<ffi.Long>)>>()
    .asFunction<
        ffi.Pointer<ffi.Long> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<ffi.Long>)>();
late final _sel_objectsByEvaluatingWithContainers_ =
    objc.registerName("objectsByEvaluatingWithContainers:");
final _objc_msgSend_741 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_objectsByEvaluatingSpecifier =
    objc.registerName("objectsByEvaluatingSpecifier");
late final _sel_evaluationErrorNumber =
    objc.registerName("evaluationErrorNumber");
late final _sel_setEvaluationErrorNumber_ =
    objc.registerName("setEvaluationErrorNumber:");
late final _sel_evaluationErrorSpecifier =
    objc.registerName("evaluationErrorSpecifier");
late final _sel_descriptor = objc.registerName("descriptor");
final _objc_msgSend_742 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_receiversSpecifier = objc.registerName("receiversSpecifier");
late final _sel_setReceiversSpecifier_ =
    objc.registerName("setReceiversSpecifier:");
late final _sel_evaluatedReceivers = objc.registerName("evaluatedReceivers");
late final _sel_evaluatedArguments = objc.registerName("evaluatedArguments");
late final _sel_isWellFormed = objc.registerName("isWellFormed");
late final _sel_performDefaultImplementation =
    objc.registerName("performDefaultImplementation");
late final _sel_executeCommand = objc.registerName("executeCommand");
late final _sel_scriptErrorNumber = objc.registerName("scriptErrorNumber");
late final _sel_setScriptErrorNumber_ =
    objc.registerName("setScriptErrorNumber:");
late final _sel_scriptErrorOffendingObjectDescriptor =
    objc.registerName("scriptErrorOffendingObjectDescriptor");
late final _sel_setScriptErrorOffendingObjectDescriptor_ =
    objc.registerName("setScriptErrorOffendingObjectDescriptor:");
final _objc_msgSend_743 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_scriptErrorExpectedTypeDescriptor =
    objc.registerName("scriptErrorExpectedTypeDescriptor");
late final _sel_setScriptErrorExpectedTypeDescriptor_ =
    objc.registerName("setScriptErrorExpectedTypeDescriptor:");
late final _sel_scriptErrorString = objc.registerName("scriptErrorString");
late final _sel_setScriptErrorString_ =
    objc.registerName("setScriptErrorString:");
late final _sel_currentCommand = objc.registerName("currentCommand");
final _objc_msgSend_744 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_appleEvent = objc.registerName("appleEvent");
late final _sel_suspendExecution = objc.registerName("suspendExecution");
late final _sel_resumeExecutionWithResult_ =
    objc.registerName("resumeExecutionWithResult:");
late final _sel_createCommandInstance =
    objc.registerName("createCommandInstance");
final _objc_msgSend_745 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_createCommandInstanceWithZone_ =
    objc.registerName("createCommandInstanceWithZone:");
final _objc_msgSend_746 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<_NSZone>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<_NSZone>)>();
late final _sel_supportsCommand_ = objc.registerName("supportsCommand:");
final _objc_msgSend_747 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        bool Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_selectorForCommand_ = objc.registerName("selectorForCommand:");
final _objc_msgSend_748 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCSelector> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCSelector> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_typeForKey_ = objc.registerName("typeForKey:");
late final _sel_classDescriptionForKey_ =
    objc.registerName("classDescriptionForKey:");
final _objc_msgSend_749 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_appleEventCodeForKey_ =
    objc.registerName("appleEventCodeForKey:");
late final _sel_keyWithAppleEventCode_ =
    objc.registerName("keyWithAppleEventCode:");
final _objc_msgSend_750 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedInt)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_defaultSubcontainerAttributeKey =
    objc.registerName("defaultSubcontainerAttributeKey");
late final _sel_isLocationRequiredToCreateForKey_ =
    objc.registerName("isLocationRequiredToCreateForKey:");
late final _sel_hasPropertyForKey_ = objc.registerName("hasPropertyForKey:");
late final _sel_hasOrderedToManyRelationshipForKey_ =
    objc.registerName("hasOrderedToManyRelationshipForKey:");
late final _sel_hasReadablePropertyForKey_ =
    objc.registerName("hasReadablePropertyForKey:");
late final _sel_hasWritablePropertyForKey_ =
    objc.registerName("hasWritablePropertyForKey:");
late final _sel_isReadOnlyKey_ = objc.registerName("isReadOnlyKey:");

class AVAudioSession extends objc.NSObject {
  AVAudioSession._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [AVAudioSession] that points to the same underlying object as [other].
  AVAudioSession.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [AVAudioSession] that wraps the given raw object pointer.
  AVAudioSession.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [AVAudioSession].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_AVAudioSession);
  }

  static AVAudioSession sharedInstance() {
    final _ret = _objc_msgSend_751(_class_AVAudioSession, _sel_sharedInstance);
    return AVAudioSession.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSArray get availableCategories {
    final _ret = _objc_msgSend_6(this.pointer, _sel_availableCategories);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  bool setCategory_error_(objc.NSString category,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError) {
    return _objc_msgSend_285(
        this.pointer, _sel_setCategory_error_, category.pointer, outError);
  }

  bool setCategory_withOptions_error_(objc.NSString category, int options,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError) {
    return _objc_msgSend_752(this.pointer, _sel_setCategory_withOptions_error_,
        category.pointer, options, outError);
  }

  bool setCategory_mode_options_error_(
      objc.NSString category,
      objc.NSString mode,
      int options,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError) {
    return _objc_msgSend_753(this.pointer, _sel_setCategory_mode_options_error_,
        category.pointer, mode.pointer, options, outError);
  }

  bool setCategory_mode_routeSharingPolicy_options_error_(
      objc.NSString category,
      objc.NSString mode,
      int policy,
      int options,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError) {
    return _objc_msgSend_754(
        this.pointer,
        _sel_setCategory_mode_routeSharingPolicy_options_error_,
        category.pointer,
        mode.pointer,
        policy,
        options,
        outError);
  }

  objc.NSString get category {
    final _ret = _objc_msgSend_12(this.pointer, _sel_category);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  int get categoryOptions {
    return _objc_msgSend_755(this.pointer, _sel_categoryOptions);
  }

  int get routeSharingPolicy {
    return _objc_msgSend_756(this.pointer, _sel_routeSharingPolicy);
  }

  objc.NSArray get availableModes {
    final _ret = _objc_msgSend_6(this.pointer, _sel_availableModes);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  bool setMode_error_(
      objc.NSString mode, ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError) {
    return _objc_msgSend_285(
        this.pointer, _sel_setMode_error_, mode.pointer, outError);
  }

  objc.NSString get mode {
    final _ret = _objc_msgSend_12(this.pointer, _sel_mode);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  bool setAllowHapticsAndSystemSoundsDuringRecording_error_(
      bool inValue, ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError) {
    return _objc_msgSend_757(
        this.pointer,
        _sel_setAllowHapticsAndSystemSoundsDuringRecording_error_,
        inValue,
        outError);
  }

  bool get allowHapticsAndSystemSoundsDuringRecording {
    return _objc_msgSend_7(
        this.pointer, _sel_allowHapticsAndSystemSoundsDuringRecording);
  }

  int get recordPermission {
    return _objc_msgSend_758(this.pointer, _sel_recordPermission);
  }

  void requestRecordPermission_(ObjCBlock_ffiVoid_bool response) {
    _objc_msgSend_759(
        this.pointer, _sel_requestRecordPermission_, response.pointer);
  }

  bool overrideOutputAudioPort_error_(
      int portOverride, ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError) {
    return _objc_msgSend_760(this.pointer, _sel_overrideOutputAudioPort_error_,
        portOverride, outError);
  }

  bool setPreferredInput_error_(AVAudioSessionPortDescription? inPort,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError) {
    return _objc_msgSend_764(this.pointer, _sel_setPreferredInput_error_,
        inPort?.pointer ?? ffi.nullptr, outError);
  }

  AVAudioSessionPortDescription? get preferredInput {
    final _ret = _objc_msgSend_765(this.pointer, _sel_preferredInput);
    return _ret.address == 0
        ? null
        : AVAudioSessionPortDescription.castFromPointer(_ret,
            retain: true, release: true);
  }

  bool setPrefersNoInterruptionsFromSystemAlerts_error_(
      bool inValue, ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError) {
    return _objc_msgSend_757(
        this.pointer,
        _sel_setPrefersNoInterruptionsFromSystemAlerts_error_,
        inValue,
        outError);
  }

  bool get prefersNoInterruptionsFromSystemAlerts {
    return _objc_msgSend_7(
        this.pointer, _sel_prefersNoInterruptionsFromSystemAlerts);
  }

  int get renderingMode {
    return _objc_msgSend_766(this.pointer, _sel_renderingMode);
  }

  bool setActive_error_(
      bool active, ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError) {
    return _objc_msgSend_757(
        this.pointer, _sel_setActive_error_, active, outError);
  }

  bool setActive_withOptions_error_(bool active, int options,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError) {
    return _objc_msgSend_767(this.pointer, _sel_setActive_withOptions_error_,
        active, options, outError);
  }

  void activateWithOptions_completionHandler_(
      int options, ObjCBlock_ffiVoid_bool_NSError handler) {
    _objc_msgSend_768(this.pointer, _sel_activateWithOptions_completionHandler_,
        options, handler.pointer);
  }

  bool setPreferredSampleRate_error_(
      double sampleRate, ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError) {
    return _objc_msgSend_769(
        this.pointer, _sel_setPreferredSampleRate_error_, sampleRate, outError);
  }

  double get preferredSampleRate {
    return objc.useMsgSendVariants
        ? _objc_msgSend_115Fpret(this.pointer, _sel_preferredSampleRate)
        : _objc_msgSend_115(this.pointer, _sel_preferredSampleRate);
  }

  bool setPreferredIOBufferDuration_error_(
      double duration, ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError) {
    return _objc_msgSend_769(this.pointer,
        _sel_setPreferredIOBufferDuration_error_, duration, outError);
  }

  double get preferredIOBufferDuration {
    return objc.useMsgSendVariants
        ? _objc_msgSend_115Fpret(this.pointer, _sel_preferredIOBufferDuration)
        : _objc_msgSend_115(this.pointer, _sel_preferredIOBufferDuration);
  }

  bool setPreferredInputNumberOfChannels_error_(
      int count, ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError) {
    return _objc_msgSend_770(this.pointer,
        _sel_setPreferredInputNumberOfChannels_error_, count, outError);
  }

  int get preferredInputNumberOfChannels {
    return _objc_msgSend_114(this.pointer, _sel_preferredInputNumberOfChannels);
  }

  bool setPreferredOutputNumberOfChannels_error_(
      int count, ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError) {
    return _objc_msgSend_770(this.pointer,
        _sel_setPreferredOutputNumberOfChannels_error_, count, outError);
  }

  int get preferredOutputNumberOfChannels {
    return _objc_msgSend_114(
        this.pointer, _sel_preferredOutputNumberOfChannels);
  }

  bool setPreferredInputOrientation_error_(
      int orientation, ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError) {
    return _objc_msgSend_771(this.pointer,
        _sel_setPreferredInputOrientation_error_, orientation, outError);
  }

  int get preferredInputOrientation {
    return _objc_msgSend_772(this.pointer, _sel_preferredInputOrientation);
  }

  int get inputOrientation {
    return _objc_msgSend_772(this.pointer, _sel_inputOrientation);
  }

  int get maximumInputNumberOfChannels {
    return _objc_msgSend_114(this.pointer, _sel_maximumInputNumberOfChannels);
  }

  int get maximumOutputNumberOfChannels {
    return _objc_msgSend_114(this.pointer, _sel_maximumOutputNumberOfChannels);
  }

  bool setInputGain_error_(
      double gain, ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError) {
    return _objc_msgSend_773(
        this.pointer, _sel_setInputGain_error_, gain, outError);
  }

  double get inputGain {
    return objc.useMsgSendVariants
        ? _objc_msgSend_351Fpret(this.pointer, _sel_inputGain)
        : _objc_msgSend_351(this.pointer, _sel_inputGain);
  }

  bool get inputGainSettable {
    return _objc_msgSend_7(this.pointer, _sel_isInputGainSettable);
  }

  bool get inputAvailable {
    return _objc_msgSend_7(this.pointer, _sel_isInputAvailable);
  }

  objc.NSArray? get inputDataSources {
    final _ret = _objc_msgSend_69(this.pointer, _sel_inputDataSources);
    return _ret.address == 0
        ? null
        : objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  AVAudioSessionDataSourceDescription? get inputDataSource {
    final _ret = _objc_msgSend_762(this.pointer, _sel_inputDataSource);
    return _ret.address == 0
        ? null
        : AVAudioSessionDataSourceDescription.castFromPointer(_ret,
            retain: true, release: true);
  }

  bool setInputDataSource_error_(
      AVAudioSessionDataSourceDescription? dataSource,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError) {
    return _objc_msgSend_763(this.pointer, _sel_setInputDataSource_error_,
        dataSource?.pointer ?? ffi.nullptr, outError);
  }

  objc.NSArray? get outputDataSources {
    final _ret = _objc_msgSend_69(this.pointer, _sel_outputDataSources);
    return _ret.address == 0
        ? null
        : objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  AVAudioSessionDataSourceDescription? get outputDataSource {
    final _ret = _objc_msgSend_762(this.pointer, _sel_outputDataSource);
    return _ret.address == 0
        ? null
        : AVAudioSessionDataSourceDescription.castFromPointer(_ret,
            retain: true, release: true);
  }

  bool setOutputDataSource_error_(
      AVAudioSessionDataSourceDescription? dataSource,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError) {
    return _objc_msgSend_763(this.pointer, _sel_setOutputDataSource_error_,
        dataSource?.pointer ?? ffi.nullptr, outError);
  }

  double get sampleRate {
    return objc.useMsgSendVariants
        ? _objc_msgSend_115Fpret(this.pointer, _sel_sampleRate)
        : _objc_msgSend_115(this.pointer, _sel_sampleRate);
  }

  int get inputNumberOfChannels {
    return _objc_msgSend_114(this.pointer, _sel_inputNumberOfChannels);
  }

  int get outputNumberOfChannels {
    return _objc_msgSend_114(this.pointer, _sel_outputNumberOfChannels);
  }

  double get inputLatency {
    return objc.useMsgSendVariants
        ? _objc_msgSend_115Fpret(this.pointer, _sel_inputLatency)
        : _objc_msgSend_115(this.pointer, _sel_inputLatency);
  }

  double get outputLatency {
    return objc.useMsgSendVariants
        ? _objc_msgSend_115Fpret(this.pointer, _sel_outputLatency)
        : _objc_msgSend_115(this.pointer, _sel_outputLatency);
  }

  double get IOBufferDuration {
    return objc.useMsgSendVariants
        ? _objc_msgSend_115Fpret(this.pointer, _sel_IOBufferDuration)
        : _objc_msgSend_115(this.pointer, _sel_IOBufferDuration);
  }

  objc.NSArray get supportedOutputChannelLayouts {
    final _ret =
        _objc_msgSend_6(this.pointer, _sel_supportedOutputChannelLayouts);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  bool get otherAudioPlaying {
    return _objc_msgSend_7(this.pointer, _sel_isOtherAudioPlaying);
  }

  bool get secondaryAudioShouldBeSilencedHint {
    return _objc_msgSend_7(
        this.pointer, _sel_secondaryAudioShouldBeSilencedHint);
  }

  double get outputVolume {
    return objc.useMsgSendVariants
        ? _objc_msgSend_351Fpret(this.pointer, _sel_outputVolume)
        : _objc_msgSend_351(this.pointer, _sel_outputVolume);
  }

  int get promptStyle {
    return _objc_msgSend_774(this.pointer, _sel_promptStyle);
  }

  objc.NSArray? get availableInputs {
    final _ret = _objc_msgSend_69(this.pointer, _sel_availableInputs);
    return _ret.address == 0
        ? null
        : objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  AVAudioSessionRouteDescription get currentRoute {
    final _ret = _objc_msgSend_775(this.pointer, _sel_currentRoute);
    return AVAudioSessionRouteDescription.castFromPointer(_ret,
        retain: true, release: true);
  }

  bool setAggregatedIOPreference_error_(
      int inIOType, ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError) {
    return _objc_msgSend_776(this.pointer,
        _sel_setAggregatedIOPreference_error_, inIOType, outError);
  }

  bool setSupportsMultichannelContent_error_(
      bool inValue, ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError) {
    return _objc_msgSend_757(this.pointer,
        _sel_setSupportsMultichannelContent_error_, inValue, outError);
  }

  bool get supportsMultichannelContent {
    return _objc_msgSend_7(this.pointer, _sel_supportsMultichannelContent);
  }

  bool setPrefersInterruptionOnRouteDisconnect_error_(
      bool inValue, ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError) {
    return _objc_msgSend_757(this.pointer,
        _sel_setPrefersInterruptionOnRouteDisconnect_error_, inValue, outError);
  }

  bool get prefersInterruptionOnRouteDisconnect {
    return _objc_msgSend_7(
        this.pointer, _sel_prefersInterruptionOnRouteDisconnect);
  }

  objc.NSObject? get delegate {
    final _ret = _objc_msgSend_66(this.pointer, _sel_delegate);
    return _ret.address == 0
        ? null
        : objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }

  set delegate(objc.NSObject? value) {
    return _objc_msgSend_188(
        this.pointer, _sel_setDelegate_, value?.pointer ?? ffi.nullptr);
  }

  @override
  AVAudioSession init() {
    final _ret = _objc_msgSend_40(this.pointer, _sel_init);
    return AVAudioSession.castFromPointer(_ret, retain: true, release: true);
  }

  bool setActive_withFlags_error_(bool active, int flags,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError) {
    return _objc_msgSend_777(
        this.pointer, _sel_setActive_withFlags_error_, active, flags, outError);
  }

  bool get inputIsAvailable {
    return _objc_msgSend_7(this.pointer, _sel_inputIsAvailable);
  }

  double get currentHardwareSampleRate {
    return objc.useMsgSendVariants
        ? _objc_msgSend_115Fpret(this.pointer, _sel_currentHardwareSampleRate)
        : _objc_msgSend_115(this.pointer, _sel_currentHardwareSampleRate);
  }

  int get currentHardwareInputNumberOfChannels {
    return _objc_msgSend_114(
        this.pointer, _sel_currentHardwareInputNumberOfChannels);
  }

  int get currentHardwareOutputNumberOfChannels {
    return _objc_msgSend_114(
        this.pointer, _sel_currentHardwareOutputNumberOfChannels);
  }

  bool setPreferredHardwareSampleRate_error_(
      double sampleRate, ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError) {
    return _objc_msgSend_769(this.pointer,
        _sel_setPreferredHardwareSampleRate_error_, sampleRate, outError);
  }

  double get preferredHardwareSampleRate {
    return objc.useMsgSendVariants
        ? _objc_msgSend_115Fpret(this.pointer, _sel_preferredHardwareSampleRate)
        : _objc_msgSend_115(this.pointer, _sel_preferredHardwareSampleRate);
  }

  static AVAudioSession new1() {
    final _ret = _objc_msgSend_40(_class_AVAudioSession, _sel_new);
    return AVAudioSession.castFromPointer(_ret, retain: false, release: true);
  }

  static AVAudioSession allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_47(_class_AVAudioSession, _sel_allocWithZone_, zone);
    return AVAudioSession.castFromPointer(_ret, retain: false, release: true);
  }

  static AVAudioSession alloc() {
    final _ret = _objc_msgSend_40(_class_AVAudioSession, _sel_alloc);
    return AVAudioSession.castFromPointer(_ret, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.NSObject aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.NSObject? anArgument) {
    _objc_msgSend_48(
        _class_AVAudioSession,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  static void cancelPreviousPerformRequestsWithTarget_(objc.NSObject aTarget) {
    _objc_msgSend_49(_class_AVAudioSession,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_7(
        _class_AVAudioSession, _sel_accessInstanceVariablesDirectly);
  }

  static bool useStoredAccessor() {
    return _objc_msgSend_7(_class_AVAudioSession, _sel_useStoredAccessor);
  }

  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_50(_class_AVAudioSession,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_51(_class_AVAudioSession,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_52(
        _class_AVAudioSession,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_6(
        _class_AVAudioSession, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSObject classForKeyedUnarchiver() {
    final _ret =
        _objc_msgSend_40(_class_AVAudioSession, _sel_classForKeyedUnarchiver);
    return objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }
}

late final _class_AVAudioSession = objc.getClass("AVAudioSession");
late final _sel_sharedInstance = objc.registerName("sharedInstance");
final _objc_msgSend_751 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_availableCategories = objc.registerName("availableCategories");
late final _sel_setCategory_error_ = objc.registerName("setCategory:error:");

abstract class AVAudioSessionCategoryOptions {
  static const int AVAudioSessionCategoryOptionMixWithOthers = 1;
  static const int AVAudioSessionCategoryOptionDuckOthers = 2;
  static const int AVAudioSessionCategoryOptionAllowBluetooth = 4;
  static const int AVAudioSessionCategoryOptionDefaultToSpeaker = 8;
  static const int
      AVAudioSessionCategoryOptionInterruptSpokenAudioAndMixWithOthers = 17;
  static const int AVAudioSessionCategoryOptionAllowBluetoothA2DP = 32;
  static const int AVAudioSessionCategoryOptionAllowAirPlay = 64;
  static const int
      AVAudioSessionCategoryOptionOverrideMutedMicrophoneInterruption = 128;
}

late final _sel_setCategory_withOptions_error_ =
    objc.registerName("setCategory:withOptions:error:");
final _objc_msgSend_752 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Int32,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_setCategory_mode_options_error_ =
    objc.registerName("setCategory:mode:options:error:");
final _objc_msgSend_753 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Int32,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();

abstract class AVAudioSessionRouteSharingPolicy {
  static const int AVAudioSessionRouteSharingPolicyDefault = 0;
  static const int AVAudioSessionRouteSharingPolicyLongFormAudio = 1;
  static const int AVAudioSessionRouteSharingPolicyLongForm = 1;
  static const int AVAudioSessionRouteSharingPolicyIndependent = 2;
  static const int AVAudioSessionRouteSharingPolicyLongFormVideo = 3;
}

late final _sel_setCategory_mode_routeSharingPolicy_options_error_ =
    objc.registerName("setCategory:mode:routeSharingPolicy:options:error:");
final _objc_msgSend_754 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Int32,
                ffi.Int32,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            int,
            int,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_category = objc.registerName("category");
late final _sel_categoryOptions = objc.registerName("categoryOptions");
final _objc_msgSend_755 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Int32 Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_routeSharingPolicy = objc.registerName("routeSharingPolicy");
final _objc_msgSend_756 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Int32 Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_availableModes = objc.registerName("availableModes");
late final _sel_setMode_error_ = objc.registerName("setMode:error:");
late final _sel_mode = objc.registerName("mode");
late final _sel_setAllowHapticsAndSystemSoundsDuringRecording_error_ =
    objc.registerName("setAllowHapticsAndSystemSoundsDuringRecording:error:");
final _objc_msgSend_757 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Bool,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            bool,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_allowHapticsAndSystemSoundsDuringRecording =
    objc.registerName("allowHapticsAndSystemSoundsDuringRecording");

abstract class AVAudioSessionRecordPermission {
  static const int AVAudioSessionRecordPermissionUndetermined = 1970168948;
  static const int AVAudioSessionRecordPermissionDenied = 1684369017;
  static const int AVAudioSessionRecordPermissionGranted = 1735552628;
}

late final _sel_recordPermission = objc.registerName("recordPermission");
final _objc_msgSend_758 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Int32 Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_requestRecordPermission_ =
    objc.registerName("requestRecordPermission:");
final _objc_msgSend_759 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCBlock>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCBlock>)>();

abstract class AVAudioSessionPortOverride {
  static const int AVAudioSessionPortOverrideNone = 0;
  static const int AVAudioSessionPortOverrideSpeaker = 1936747378;
}

late final _sel_overrideOutputAudioPort_error_ =
    objc.registerName("overrideOutputAudioPort:error:");
final _objc_msgSend_760 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Int32,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();

class AVAudioSessionPortDescription extends objc.NSObject {
  AVAudioSessionPortDescription._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [AVAudioSessionPortDescription] that points to the same underlying object as [other].
  AVAudioSessionPortDescription.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [AVAudioSessionPortDescription] that wraps the given raw object pointer.
  AVAudioSessionPortDescription.castFromPointer(
      ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false,
      bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [AVAudioSessionPortDescription].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_AVAudioSessionPortDescription);
  }

  objc.NSString get portType {
    final _ret = _objc_msgSend_12(this.pointer, _sel_portType);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSString get portName {
    final _ret = _objc_msgSend_12(this.pointer, _sel_portName);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSString get UID {
    final _ret = _objc_msgSend_12(this.pointer, _sel_UID);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  bool get hasHardwareVoiceCallProcessing {
    return _objc_msgSend_7(this.pointer, _sel_hasHardwareVoiceCallProcessing);
  }

  bool get spatialAudioEnabled {
    return _objc_msgSend_7(this.pointer, _sel_isSpatialAudioEnabled);
  }

  objc.NSArray? get channels {
    final _ret = _objc_msgSend_69(this.pointer, _sel_channels);
    return _ret.address == 0
        ? null
        : objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSArray? get dataSources {
    final _ret = _objc_msgSend_69(this.pointer, _sel_dataSources);
    return _ret.address == 0
        ? null
        : objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  AVAudioSessionDataSourceDescription? get selectedDataSource {
    final _ret = _objc_msgSend_762(this.pointer, _sel_selectedDataSource);
    return _ret.address == 0
        ? null
        : AVAudioSessionDataSourceDescription.castFromPointer(_ret,
            retain: true, release: true);
  }

  AVAudioSessionDataSourceDescription? get preferredDataSource {
    final _ret = _objc_msgSend_762(this.pointer, _sel_preferredDataSource);
    return _ret.address == 0
        ? null
        : AVAudioSessionDataSourceDescription.castFromPointer(_ret,
            retain: true, release: true);
  }

  bool setPreferredDataSource_error_(
      AVAudioSessionDataSourceDescription? dataSource,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError) {
    return _objc_msgSend_763(this.pointer, _sel_setPreferredDataSource_error_,
        dataSource?.pointer ?? ffi.nullptr, outError);
  }

  @override
  AVAudioSessionPortDescription init() {
    final _ret = _objc_msgSend_40(this.pointer, _sel_init);
    return AVAudioSessionPortDescription.castFromPointer(_ret,
        retain: true, release: true);
  }

  static AVAudioSessionPortDescription new1() {
    final _ret =
        _objc_msgSend_40(_class_AVAudioSessionPortDescription, _sel_new);
    return AVAudioSessionPortDescription.castFromPointer(_ret,
        retain: false, release: true);
  }

  static AVAudioSessionPortDescription allocWithZone_(
      ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_47(
        _class_AVAudioSessionPortDescription, _sel_allocWithZone_, zone);
    return AVAudioSessionPortDescription.castFromPointer(_ret,
        retain: false, release: true);
  }

  static AVAudioSessionPortDescription alloc() {
    final _ret =
        _objc_msgSend_40(_class_AVAudioSessionPortDescription, _sel_alloc);
    return AVAudioSessionPortDescription.castFromPointer(_ret,
        retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.NSObject aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.NSObject? anArgument) {
    _objc_msgSend_48(
        _class_AVAudioSessionPortDescription,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  static void cancelPreviousPerformRequestsWithTarget_(objc.NSObject aTarget) {
    _objc_msgSend_49(_class_AVAudioSessionPortDescription,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_7(_class_AVAudioSessionPortDescription,
        _sel_accessInstanceVariablesDirectly);
  }

  static bool useStoredAccessor() {
    return _objc_msgSend_7(
        _class_AVAudioSessionPortDescription, _sel_useStoredAccessor);
  }

  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_50(_class_AVAudioSessionPortDescription,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_51(_class_AVAudioSessionPortDescription,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_52(
        _class_AVAudioSessionPortDescription,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_6(_class_AVAudioSessionPortDescription,
        _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSObject classForKeyedUnarchiver() {
    final _ret = _objc_msgSend_40(
        _class_AVAudioSessionPortDescription, _sel_classForKeyedUnarchiver);
    return objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }
}

late final _class_AVAudioSessionPortDescription =
    objc.getClass("AVAudioSessionPortDescription");
late final _sel_portType = objc.registerName("portType");
late final _sel_portName = objc.registerName("portName");
late final _sel_UID = objc.registerName("UID");
late final _sel_hasHardwareVoiceCallProcessing =
    objc.registerName("hasHardwareVoiceCallProcessing");
late final _sel_isSpatialAudioEnabled =
    objc.registerName("isSpatialAudioEnabled");
late final _sel_channels = objc.registerName("channels");
late final _sel_dataSources = objc.registerName("dataSources");

class AVAudioSessionDataSourceDescription extends objc.NSObject {
  AVAudioSessionDataSourceDescription._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [AVAudioSessionDataSourceDescription] that points to the same underlying object as [other].
  AVAudioSessionDataSourceDescription.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [AVAudioSessionDataSourceDescription] that wraps the given raw object pointer.
  AVAudioSessionDataSourceDescription.castFromPointer(
      ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false,
      bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [AVAudioSessionDataSourceDescription].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(obj.pointer, _sel_isKindOfClass_,
        _class_AVAudioSessionDataSourceDescription);
  }

  objc.NSNumber get dataSourceID {
    final _ret = _objc_msgSend_180(this.pointer, _sel_dataSourceID);
    return objc.NSNumber.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSString get dataSourceName {
    final _ret = _objc_msgSend_12(this.pointer, _sel_dataSourceName);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSString? get location {
    final _ret = _objc_msgSend_13(this.pointer, _sel_location);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSString? get orientation {
    final _ret = _objc_msgSend_13(this.pointer, _sel_orientation);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSArray? get supportedPolarPatterns {
    final _ret = _objc_msgSend_69(this.pointer, _sel_supportedPolarPatterns);
    return _ret.address == 0
        ? null
        : objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSString? get selectedPolarPattern {
    final _ret = _objc_msgSend_13(this.pointer, _sel_selectedPolarPattern);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSString? get preferredPolarPattern {
    final _ret = _objc_msgSend_13(this.pointer, _sel_preferredPolarPattern);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  bool setPreferredPolarPattern_error_(objc.NSString? pattern,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError) {
    return _objc_msgSend_761(this.pointer, _sel_setPreferredPolarPattern_error_,
        pattern?.pointer ?? ffi.nullptr, outError);
  }

  @override
  AVAudioSessionDataSourceDescription init() {
    final _ret = _objc_msgSend_40(this.pointer, _sel_init);
    return AVAudioSessionDataSourceDescription.castFromPointer(_ret,
        retain: true, release: true);
  }

  static AVAudioSessionDataSourceDescription new1() {
    final _ret =
        _objc_msgSend_40(_class_AVAudioSessionDataSourceDescription, _sel_new);
    return AVAudioSessionDataSourceDescription.castFromPointer(_ret,
        retain: false, release: true);
  }

  static AVAudioSessionDataSourceDescription allocWithZone_(
      ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_47(
        _class_AVAudioSessionDataSourceDescription, _sel_allocWithZone_, zone);
    return AVAudioSessionDataSourceDescription.castFromPointer(_ret,
        retain: false, release: true);
  }

  static AVAudioSessionDataSourceDescription alloc() {
    final _ret = _objc_msgSend_40(
        _class_AVAudioSessionDataSourceDescription, _sel_alloc);
    return AVAudioSessionDataSourceDescription.castFromPointer(_ret,
        retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.NSObject aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.NSObject? anArgument) {
    _objc_msgSend_48(
        _class_AVAudioSessionDataSourceDescription,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  static void cancelPreviousPerformRequestsWithTarget_(objc.NSObject aTarget) {
    _objc_msgSend_49(_class_AVAudioSessionDataSourceDescription,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_7(_class_AVAudioSessionDataSourceDescription,
        _sel_accessInstanceVariablesDirectly);
  }

  static bool useStoredAccessor() {
    return _objc_msgSend_7(
        _class_AVAudioSessionDataSourceDescription, _sel_useStoredAccessor);
  }

  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_50(_class_AVAudioSessionDataSourceDescription,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_51(_class_AVAudioSessionDataSourceDescription,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_52(
        _class_AVAudioSessionDataSourceDescription,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_6(_class_AVAudioSessionDataSourceDescription,
        _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSObject classForKeyedUnarchiver() {
    final _ret = _objc_msgSend_40(_class_AVAudioSessionDataSourceDescription,
        _sel_classForKeyedUnarchiver);
    return objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }
}

late final _class_AVAudioSessionDataSourceDescription =
    objc.getClass("AVAudioSessionDataSourceDescription");
late final _sel_dataSourceID = objc.registerName("dataSourceID");
late final _sel_dataSourceName = objc.registerName("dataSourceName");
late final _sel_location = objc.registerName("location");
late final _sel_orientation = objc.registerName("orientation");
late final _sel_supportedPolarPatterns =
    objc.registerName("supportedPolarPatterns");
late final _sel_selectedPolarPattern =
    objc.registerName("selectedPolarPattern");
late final _sel_preferredPolarPattern =
    objc.registerName("preferredPolarPattern");
late final _sel_setPreferredPolarPattern_error_ =
    objc.registerName("setPreferredPolarPattern:error:");
final _objc_msgSend_761 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_selectedDataSource = objc.registerName("selectedDataSource");
final _objc_msgSend_762 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_preferredDataSource = objc.registerName("preferredDataSource");
late final _sel_setPreferredDataSource_error_ =
    objc.registerName("setPreferredDataSource:error:");
final _objc_msgSend_763 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_setPreferredInput_error_ =
    objc.registerName("setPreferredInput:error:");
final _objc_msgSend_764 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_preferredInput = objc.registerName("preferredInput");
final _objc_msgSend_765 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setPrefersNoInterruptionsFromSystemAlerts_error_ =
    objc.registerName("setPrefersNoInterruptionsFromSystemAlerts:error:");
late final _sel_prefersNoInterruptionsFromSystemAlerts =
    objc.registerName("prefersNoInterruptionsFromSystemAlerts");

abstract class AVAudioSessionRenderingMode {
  static const int AVAudioSessionRenderingModeNotApplicable = 0;
  static const int AVAudioSessionRenderingModeMonoStereo = 1;
  static const int AVAudioSessionRenderingModeSurround = 2;
  static const int AVAudioSessionRenderingModeSpatialAudio = 3;
  static const int AVAudioSessionRenderingModeDolbyAudio = 4;
  static const int AVAudioSessionRenderingModeDolbyAtmos = 5;
}

late final _sel_renderingMode = objc.registerName("renderingMode");
final _objc_msgSend_766 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Int32 Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setActive_error_ = objc.registerName("setActive:error:");

abstract class AVAudioSessionSetActiveOptions {
  static const int AVAudioSessionSetActiveOptionNotifyOthersOnDeactivation = 1;
}

late final _sel_setActive_withOptions_error_ =
    objc.registerName("setActive:withOptions:error:");
final _objc_msgSend_767 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Bool,
                ffi.Int32,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            bool,
            int,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();

abstract class AVAudioSessionActivationOptions {
  static const int AVAudioSessionActivationOptionNone = 0;
}

void _ObjCBlock_ffiVoid_bool_NSError_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlock> block,
        bool arg0,
        ffi.Pointer<objc.ObjCObject> arg1) =>
    block.ref.target
            .cast<
                ffi.NativeFunction<
                    ffi.Void Function(
                        ffi.Bool arg0, ffi.Pointer<objc.ObjCObject> arg1)>>()
            .asFunction<void Function(bool, ffi.Pointer<objc.ObjCObject>)>()(
        arg0, arg1);
final _ObjCBlock_ffiVoid_bool_NSError_closureRegistry =
    <int, void Function(bool, ffi.Pointer<objc.ObjCObject>)>{};
int _ObjCBlock_ffiVoid_bool_NSError_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void> _ObjCBlock_ffiVoid_bool_NSError_registerClosure(
    void Function(bool, ffi.Pointer<objc.ObjCObject>) fn) {
  final id = ++_ObjCBlock_ffiVoid_bool_NSError_closureRegistryIndex;
  _ObjCBlock_ffiVoid_bool_NSError_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

void _ObjCBlock_ffiVoid_bool_NSError_closureTrampoline(
        ffi.Pointer<objc.ObjCBlock> block,
        bool arg0,
        ffi.Pointer<objc.ObjCObject> arg1) =>
    _ObjCBlock_ffiVoid_bool_NSError_closureRegistry[block.ref.target.address]!(
        arg0, arg1);

class ObjCBlock_ffiVoid_bool_NSError extends objc.ObjCBlockBase {
  ObjCBlock_ffiVoid_bool_NSError._(ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false, bool release = true})
      : super(pointer, retain: retain, release: release);

  /// Returns a block that wraps the given raw block pointer.
  static ObjCBlock_ffiVoid_bool_NSError castFromPointer(
      ffi.Pointer<objc.ObjCBlock> pointer,
      {bool retain = false,
      bool release = false}) {
    return ObjCBlock_ffiVoid_bool_NSError._(pointer,
        retain: retain, release: release);
  }

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_bool_NSError.fromFunctionPointer(
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Bool arg0, ffi.Pointer<objc.ObjCObject> arg1)>>
          ptr)
      : this._(objc.newBlock(
            _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(ffi.Pointer<objc.ObjCBlock>, ffi.Bool,
                            ffi.Pointer<objc.ObjCObject>)>(
                    _ObjCBlock_ffiVoid_bool_NSError_fnPtrTrampoline)
                .cast(),
            ptr.cast()));
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ObjCBlock_ffiVoid_bool_NSError.fromFunction(
      void Function(bool, objc.NSError?) fn)
      : this._(objc.newBlock(
            _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(ffi.Pointer<objc.ObjCBlock>, ffi.Bool,
                            ffi.Pointer<objc.ObjCObject>)>(
                    _ObjCBlock_ffiVoid_bool_NSError_closureTrampoline)
                .cast(),
            _ObjCBlock_ffiVoid_bool_NSError_registerClosure(
                (bool arg0, ffi.Pointer<objc.ObjCObject> arg1) => fn(arg0,
                    arg1.address == 0 ? null : objc.NSError.castFromPointer(arg1, retain: true, release: true)))));
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// Note that unlike the default behavior of NativeCallable.listener, listener
  /// blocks do not keep the isolate alive.
  ObjCBlock_ffiVoid_bool_NSError.listener(void Function(bool, objc.NSError?) fn)
      : this._(objc.newBlock(
            (_dartFuncListenerTrampoline ??= ffi.NativeCallable<
                        ffi.Void Function(ffi.Pointer<objc.ObjCBlock>, ffi.Bool,
                            ffi.Pointer<objc.ObjCObject>)>.listener(
                    _ObjCBlock_ffiVoid_bool_NSError_closureTrampoline)
                  ..keepIsolateAlive = false)
                .nativeFunction
                .cast(),
            _ObjCBlock_ffiVoid_bool_NSError_registerClosure(
                (bool arg0, ffi.Pointer<objc.ObjCObject> arg1) => fn(arg0,
                    arg1.address == 0 ? null : objc.NSError.castFromPointer(arg1, retain: true, release: true)))));
  static ffi.NativeCallable<
      ffi.Void Function(ffi.Pointer<objc.ObjCBlock>, ffi.Bool,
          ffi.Pointer<objc.ObjCObject>)>? _dartFuncListenerTrampoline;

  void call(bool arg0, objc.NSError? arg1) => pointer.ref.invoke
          .cast<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<objc.ObjCBlock> block,
                      ffi.Bool arg0, ffi.Pointer<objc.ObjCObject> arg1)>>()
          .asFunction<
              void Function(ffi.Pointer<objc.ObjCBlock>, bool,
                  ffi.Pointer<objc.ObjCObject>)>()(
      pointer, arg0, arg1?.pointer ?? ffi.nullptr);
}

late final _sel_activateWithOptions_completionHandler_ =
    objc.registerName("activateWithOptions:completionHandler:");
final _objc_msgSend_768 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Int32,
                ffi.Pointer<objc.ObjCBlock>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int,
            ffi.Pointer<objc.ObjCBlock>)>();
late final _sel_setPreferredSampleRate_error_ =
    objc.registerName("setPreferredSampleRate:error:");
final _objc_msgSend_769 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Double,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            double,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_preferredSampleRate = objc.registerName("preferredSampleRate");
late final _sel_setPreferredIOBufferDuration_error_ =
    objc.registerName("setPreferredIOBufferDuration:error:");
late final _sel_preferredIOBufferDuration =
    objc.registerName("preferredIOBufferDuration");
late final _sel_setPreferredInputNumberOfChannels_error_ =
    objc.registerName("setPreferredInputNumberOfChannels:error:");
final _objc_msgSend_770 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Long,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_preferredInputNumberOfChannels =
    objc.registerName("preferredInputNumberOfChannels");
late final _sel_setPreferredOutputNumberOfChannels_error_ =
    objc.registerName("setPreferredOutputNumberOfChannels:error:");
late final _sel_preferredOutputNumberOfChannels =
    objc.registerName("preferredOutputNumberOfChannels");

abstract class AVAudioStereoOrientation {
  static const int AVAudioStereoOrientationNone = 0;
  static const int AVAudioStereoOrientationPortrait = 1;
  static const int AVAudioStereoOrientationPortraitUpsideDown = 2;
  static const int AVAudioStereoOrientationLandscapeRight = 3;
  static const int AVAudioStereoOrientationLandscapeLeft = 4;
}

late final _sel_setPreferredInputOrientation_error_ =
    objc.registerName("setPreferredInputOrientation:error:");
final _objc_msgSend_771 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Int32,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_preferredInputOrientation =
    objc.registerName("preferredInputOrientation");
final _objc_msgSend_772 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Int32 Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_inputOrientation = objc.registerName("inputOrientation");
late final _sel_maximumInputNumberOfChannels =
    objc.registerName("maximumInputNumberOfChannels");
late final _sel_maximumOutputNumberOfChannels =
    objc.registerName("maximumOutputNumberOfChannels");
late final _sel_setInputGain_error_ = objc.registerName("setInputGain:error:");
final _objc_msgSend_773 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Float,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            double,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_inputGain = objc.registerName("inputGain");
late final _sel_isInputGainSettable = objc.registerName("isInputGainSettable");
late final _sel_isInputAvailable = objc.registerName("isInputAvailable");
late final _sel_inputDataSources = objc.registerName("inputDataSources");
late final _sel_inputDataSource = objc.registerName("inputDataSource");
late final _sel_setInputDataSource_error_ =
    objc.registerName("setInputDataSource:error:");
late final _sel_outputDataSources = objc.registerName("outputDataSources");
late final _sel_outputDataSource = objc.registerName("outputDataSource");
late final _sel_setOutputDataSource_error_ =
    objc.registerName("setOutputDataSource:error:");
late final _sel_sampleRate = objc.registerName("sampleRate");
late final _sel_inputNumberOfChannels =
    objc.registerName("inputNumberOfChannels");
late final _sel_outputNumberOfChannels =
    objc.registerName("outputNumberOfChannels");
late final _sel_inputLatency = objc.registerName("inputLatency");
late final _sel_outputLatency = objc.registerName("outputLatency");
late final _sel_IOBufferDuration = objc.registerName("IOBufferDuration");
late final _sel_supportedOutputChannelLayouts =
    objc.registerName("supportedOutputChannelLayouts");
late final _sel_isOtherAudioPlaying = objc.registerName("isOtherAudioPlaying");
late final _sel_secondaryAudioShouldBeSilencedHint =
    objc.registerName("secondaryAudioShouldBeSilencedHint");
late final _sel_outputVolume = objc.registerName("outputVolume");

abstract class AVAudioSessionPromptStyle {
  static const int AVAudioSessionPromptStyleNone = 1852796517;
  static const int AVAudioSessionPromptStyleShort = 1936224884;
  static const int AVAudioSessionPromptStyleNormal = 1852992876;
}

late final _sel_promptStyle = objc.registerName("promptStyle");
final _objc_msgSend_774 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Int32 Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_availableInputs = objc.registerName("availableInputs");

class AVAudioSessionRouteDescription extends objc.NSObject {
  AVAudioSessionRouteDescription._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [AVAudioSessionRouteDescription] that points to the same underlying object as [other].
  AVAudioSessionRouteDescription.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [AVAudioSessionRouteDescription] that wraps the given raw object pointer.
  AVAudioSessionRouteDescription.castFromPointer(
      ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false,
      bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [AVAudioSessionRouteDescription].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(obj.pointer, _sel_isKindOfClass_,
        _class_AVAudioSessionRouteDescription);
  }

  objc.NSArray get inputs {
    final _ret = _objc_msgSend_6(this.pointer, _sel_inputs);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSArray get outputs {
    final _ret = _objc_msgSend_6(this.pointer, _sel_outputs);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  @override
  AVAudioSessionRouteDescription init() {
    final _ret = _objc_msgSend_40(this.pointer, _sel_init);
    return AVAudioSessionRouteDescription.castFromPointer(_ret,
        retain: true, release: true);
  }

  static AVAudioSessionRouteDescription new1() {
    final _ret =
        _objc_msgSend_40(_class_AVAudioSessionRouteDescription, _sel_new);
    return AVAudioSessionRouteDescription.castFromPointer(_ret,
        retain: false, release: true);
  }

  static AVAudioSessionRouteDescription allocWithZone_(
      ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_47(
        _class_AVAudioSessionRouteDescription, _sel_allocWithZone_, zone);
    return AVAudioSessionRouteDescription.castFromPointer(_ret,
        retain: false, release: true);
  }

  static AVAudioSessionRouteDescription alloc() {
    final _ret =
        _objc_msgSend_40(_class_AVAudioSessionRouteDescription, _sel_alloc);
    return AVAudioSessionRouteDescription.castFromPointer(_ret,
        retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.NSObject aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.NSObject? anArgument) {
    _objc_msgSend_48(
        _class_AVAudioSessionRouteDescription,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  static void cancelPreviousPerformRequestsWithTarget_(objc.NSObject aTarget) {
    _objc_msgSend_49(_class_AVAudioSessionRouteDescription,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_7(_class_AVAudioSessionRouteDescription,
        _sel_accessInstanceVariablesDirectly);
  }

  static bool useStoredAccessor() {
    return _objc_msgSend_7(
        _class_AVAudioSessionRouteDescription, _sel_useStoredAccessor);
  }

  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_50(_class_AVAudioSessionRouteDescription,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_51(_class_AVAudioSessionRouteDescription,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_52(
        _class_AVAudioSessionRouteDescription,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_6(_class_AVAudioSessionRouteDescription,
        _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSObject classForKeyedUnarchiver() {
    final _ret = _objc_msgSend_40(
        _class_AVAudioSessionRouteDescription, _sel_classForKeyedUnarchiver);
    return objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }
}

late final _class_AVAudioSessionRouteDescription =
    objc.getClass("AVAudioSessionRouteDescription");
late final _sel_inputs = objc.registerName("inputs");
late final _sel_outputs = objc.registerName("outputs");
late final _sel_currentRoute = objc.registerName("currentRoute");
final _objc_msgSend_775 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();

abstract class AVAudioSessionIOType {
  static const int AVAudioSessionIOTypeNotSpecified = 0;
  static const int AVAudioSessionIOTypeAggregated = 1;
}

late final _sel_setAggregatedIOPreference_error_ =
    objc.registerName("setAggregatedIOPreference:error:");
final _objc_msgSend_776 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Int32,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_setSupportsMultichannelContent_error_ =
    objc.registerName("setSupportsMultichannelContent:error:");
late final _sel_supportsMultichannelContent =
    objc.registerName("supportsMultichannelContent");
late final _sel_setPrefersInterruptionOnRouteDisconnect_error_ =
    objc.registerName("setPrefersInterruptionOnRouteDisconnect:error:");
late final _sel_prefersInterruptionOnRouteDisconnect =
    objc.registerName("prefersInterruptionOnRouteDisconnect");
late final _sel_setActive_withFlags_error_ =
    objc.registerName("setActive:withFlags:error:");
final _objc_msgSend_777 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Bool,
                ffi.Long,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            bool,
            int,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_inputIsAvailable = objc.registerName("inputIsAvailable");
late final _sel_currentHardwareSampleRate =
    objc.registerName("currentHardwareSampleRate");
late final _sel_currentHardwareInputNumberOfChannels =
    objc.registerName("currentHardwareInputNumberOfChannels");
late final _sel_currentHardwareOutputNumberOfChannels =
    objc.registerName("currentHardwareOutputNumberOfChannels");
late final _sel_setPreferredHardwareSampleRate_error_ =
    objc.registerName("setPreferredHardwareSampleRate:error:");
late final _sel_preferredHardwareSampleRate =
    objc.registerName("preferredHardwareSampleRate");

class AVAudioPlayer extends objc.NSObject {
  AVAudioPlayer._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [AVAudioPlayer] that points to the same underlying object as [other].
  AVAudioPlayer.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [AVAudioPlayer] that wraps the given raw object pointer.
  AVAudioPlayer.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [AVAudioPlayer].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_AVAudioPlayer);
  }

  AVAudioPlayer? initWithContentsOfURL_error_(
      objc.NSURL url, ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError) {
    final _ret = _objc_msgSend_259(
        this.pointer, _sel_initWithContentsOfURL_error_, url.pointer, outError);
    return _ret.address == 0
        ? null
        : AVAudioPlayer.castFromPointer(_ret, retain: true, release: true);
  }

  AVAudioPlayer? initWithData_error_(
      objc.NSData data, ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError) {
    final _ret = _objc_msgSend_778(
        this.pointer, _sel_initWithData_error_, data.pointer, outError);
    return _ret.address == 0
        ? null
        : AVAudioPlayer.castFromPointer(_ret, retain: true, release: true);
  }

  AVAudioPlayer? initWithContentsOfURL_fileTypeHint_error_(
      objc.NSURL url,
      objc.NSString? utiString,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError) {
    final _ret = _objc_msgSend_779(
        this.pointer,
        _sel_initWithContentsOfURL_fileTypeHint_error_,
        url.pointer,
        utiString?.pointer ?? ffi.nullptr,
        outError);
    return _ret.address == 0
        ? null
        : AVAudioPlayer.castFromPointer(_ret, retain: true, release: true);
  }

  AVAudioPlayer? initWithData_fileTypeHint_error_(
      objc.NSData data,
      objc.NSString? utiString,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> outError) {
    final _ret = _objc_msgSend_780(
        this.pointer,
        _sel_initWithData_fileTypeHint_error_,
        data.pointer,
        utiString?.pointer ?? ffi.nullptr,
        outError);
    return _ret.address == 0
        ? null
        : AVAudioPlayer.castFromPointer(_ret, retain: true, release: true);
  }

  bool prepareToPlay() {
    return _objc_msgSend_7(this.pointer, _sel_prepareToPlay);
  }

  bool play() {
    return _objc_msgSend_7(this.pointer, _sel_play);
  }

  bool playAtTime_(double time) {
    return _objc_msgSend_781(this.pointer, _sel_playAtTime_, time);
  }

  void pause() {
    _objc_msgSend_82(this.pointer, _sel_pause);
  }

  void stop() {
    _objc_msgSend_82(this.pointer, _sel_stop);
  }

  bool get playing {
    return _objc_msgSend_7(this.pointer, _sel_isPlaying);
  }

  int get numberOfChannels {
    return _objc_msgSend_29(this.pointer, _sel_numberOfChannels);
  }

  double get duration {
    return objc.useMsgSendVariants
        ? _objc_msgSend_115Fpret(this.pointer, _sel_duration)
        : _objc_msgSend_115(this.pointer, _sel_duration);
  }

  objc.NSString? get currentDevice {
    final _ret = _objc_msgSend_13(this.pointer, _sel_currentDevice);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  set currentDevice(objc.NSString? value) {
    return _objc_msgSend_46(
        this.pointer, _sel_setCurrentDevice_, value?.pointer ?? ffi.nullptr);
  }

  objc.NSObject? get delegate {
    final _ret = _objc_msgSend_66(this.pointer, _sel_delegate);
    return _ret.address == 0
        ? null
        : objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }

  set delegate(objc.NSObject? value) {
    return _objc_msgSend_188(
        this.pointer, _sel_setDelegate_, value?.pointer ?? ffi.nullptr);
  }

  objc.NSURL? get url {
    final _ret = _objc_msgSend_10(this.pointer, _sel_url);
    return _ret.address == 0
        ? null
        : objc.NSURL.castFromPointer(_ret, retain: true, release: true);
  }

  objc.NSData? get data {
    final _ret = _objc_msgSend_325(this.pointer, _sel_data);
    return _ret.address == 0
        ? null
        : objc.NSData.castFromPointer(_ret, retain: true, release: true);
  }

  double get pan {
    return objc.useMsgSendVariants
        ? _objc_msgSend_351Fpret(this.pointer, _sel_pan)
        : _objc_msgSend_351(this.pointer, _sel_pan);
  }

  set pan(double value) {
    return _objc_msgSend_352(this.pointer, _sel_setPan_, value);
  }

  double get volume {
    return objc.useMsgSendVariants
        ? _objc_msgSend_351Fpret(this.pointer, _sel_volume)
        : _objc_msgSend_351(this.pointer, _sel_volume);
  }

  set volume(double value) {
    return _objc_msgSend_352(this.pointer, _sel_setVolume_, value);
  }

  void setVolume_fadeDuration_(double volume, double duration) {
    _objc_msgSend_782(
        this.pointer, _sel_setVolume_fadeDuration_, volume, duration);
  }

  bool get enableRate {
    return _objc_msgSend_7(this.pointer, _sel_enableRate);
  }

  set enableRate(bool value) {
    return _objc_msgSend_41(this.pointer, _sel_setEnableRate_, value);
  }

  double get rate {
    return objc.useMsgSendVariants
        ? _objc_msgSend_351Fpret(this.pointer, _sel_rate)
        : _objc_msgSend_351(this.pointer, _sel_rate);
  }

  set rate(double value) {
    return _objc_msgSend_352(this.pointer, _sel_setRate_, value);
  }

  double get currentTime {
    return objc.useMsgSendVariants
        ? _objc_msgSend_115Fpret(this.pointer, _sel_currentTime)
        : _objc_msgSend_115(this.pointer, _sel_currentTime);
  }

  set currentTime(double value) {
    return _objc_msgSend_212(this.pointer, _sel_setCurrentTime_, value);
  }

  double get deviceCurrentTime {
    return objc.useMsgSendVariants
        ? _objc_msgSend_115Fpret(this.pointer, _sel_deviceCurrentTime)
        : _objc_msgSend_115(this.pointer, _sel_deviceCurrentTime);
  }

  int get numberOfLoops {
    return _objc_msgSend_114(this.pointer, _sel_numberOfLoops);
  }

  set numberOfLoops(int value) {
    return _objc_msgSend_134(this.pointer, _sel_setNumberOfLoops_, value);
  }

  objc.NSDictionary get settings {
    final _ret = _objc_msgSend_112(this.pointer, _sel_settings);
    return objc.NSDictionary.castFromPointer(_ret, retain: true, release: true);
  }

  AVAudioFormat get format {
    final _ret = _objc_msgSend_799(this.pointer, _sel_format);
    return AVAudioFormat.castFromPointer(_ret, retain: true, release: true);
  }

  bool get meteringEnabled {
    return _objc_msgSend_7(this.pointer, _sel_isMeteringEnabled);
  }

  set meteringEnabled(bool value) {
    return _objc_msgSend_41(this.pointer, _sel_setMeteringEnabled_, value);
  }

  void updateMeters() {
    _objc_msgSend_82(this.pointer, _sel_updateMeters);
  }

  double peakPowerForChannel_(int channelNumber) {
    return objc.useMsgSendVariants
        ? _objc_msgSend_800Fpret(
            this.pointer, _sel_peakPowerForChannel_, channelNumber)
        : _objc_msgSend_800(
            this.pointer, _sel_peakPowerForChannel_, channelNumber);
  }

  double averagePowerForChannel_(int channelNumber) {
    return objc.useMsgSendVariants
        ? _objc_msgSend_800Fpret(
            this.pointer, _sel_averagePowerForChannel_, channelNumber)
        : _objc_msgSend_800(
            this.pointer, _sel_averagePowerForChannel_, channelNumber);
  }

  objc.NSArray? get channelAssignments {
    final _ret = _objc_msgSend_69(this.pointer, _sel_channelAssignments);
    return _ret.address == 0
        ? null
        : objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  set channelAssignments(objc.NSArray? value) {
    return _objc_msgSend_605(this.pointer, _sel_setChannelAssignments_,
        value?.pointer ?? ffi.nullptr);
  }

  @override
  AVAudioPlayer init() {
    final _ret = _objc_msgSend_40(this.pointer, _sel_init);
    return AVAudioPlayer.castFromPointer(_ret, retain: true, release: true);
  }

  static AVAudioPlayer new1() {
    final _ret = _objc_msgSend_40(_class_AVAudioPlayer, _sel_new);
    return AVAudioPlayer.castFromPointer(_ret, retain: false, release: true);
  }

  static AVAudioPlayer allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_47(_class_AVAudioPlayer, _sel_allocWithZone_, zone);
    return AVAudioPlayer.castFromPointer(_ret, retain: false, release: true);
  }

  static AVAudioPlayer alloc() {
    final _ret = _objc_msgSend_40(_class_AVAudioPlayer, _sel_alloc);
    return AVAudioPlayer.castFromPointer(_ret, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.NSObject aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.NSObject? anArgument) {
    _objc_msgSend_48(
        _class_AVAudioPlayer,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  static void cancelPreviousPerformRequestsWithTarget_(objc.NSObject aTarget) {
    _objc_msgSend_49(_class_AVAudioPlayer,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_7(
        _class_AVAudioPlayer, _sel_accessInstanceVariablesDirectly);
  }

  static bool useStoredAccessor() {
    return _objc_msgSend_7(_class_AVAudioPlayer, _sel_useStoredAccessor);
  }

  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_50(_class_AVAudioPlayer,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_51(_class_AVAudioPlayer,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_52(
        _class_AVAudioPlayer,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_6(
        _class_AVAudioPlayer, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSObject classForKeyedUnarchiver() {
    final _ret =
        _objc_msgSend_40(_class_AVAudioPlayer, _sel_classForKeyedUnarchiver);
    return objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }
}

late final _class_AVAudioPlayer = objc.getClass("AVAudioPlayer");
late final _sel_initWithContentsOfURL_error_ =
    objc.registerName("initWithContentsOfURL:error:");
late final _sel_initWithData_error_ = objc.registerName("initWithData:error:");
final _objc_msgSend_778 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_initWithContentsOfURL_fileTypeHint_error_ =
    objc.registerName("initWithContentsOfURL:fileTypeHint:error:");
final _objc_msgSend_779 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_initWithData_fileTypeHint_error_ =
    objc.registerName("initWithData:fileTypeHint:error:");
final _objc_msgSend_780 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_prepareToPlay = objc.registerName("prepareToPlay");
late final _sel_play = objc.registerName("play");
late final _sel_playAtTime_ = objc.registerName("playAtTime:");
final _objc_msgSend_781 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Double)>>()
    .asFunction<
        bool Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, double)>();
late final _sel_pause = objc.registerName("pause");
late final _sel_isPlaying = objc.registerName("isPlaying");
late final _sel_numberOfChannels = objc.registerName("numberOfChannels");
late final _sel_currentDevice = objc.registerName("currentDevice");
late final _sel_setCurrentDevice_ = objc.registerName("setCurrentDevice:");
late final _sel_url = objc.registerName("url");
late final _sel_pan = objc.registerName("pan");
late final _sel_setPan_ = objc.registerName("setPan:");
late final _sel_volume = objc.registerName("volume");
late final _sel_setVolume_ = objc.registerName("setVolume:");
late final _sel_setVolume_fadeDuration_ =
    objc.registerName("setVolume:fadeDuration:");
final _objc_msgSend_782 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Float, ffi.Double)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, double, double)>();
late final _sel_enableRate = objc.registerName("enableRate");
late final _sel_setEnableRate_ = objc.registerName("setEnableRate:");
late final _sel_rate = objc.registerName("rate");
late final _sel_setRate_ = objc.registerName("setRate:");
late final _sel_currentTime = objc.registerName("currentTime");
late final _sel_setCurrentTime_ = objc.registerName("setCurrentTime:");
late final _sel_deviceCurrentTime = objc.registerName("deviceCurrentTime");
late final _sel_numberOfLoops = objc.registerName("numberOfLoops");
late final _sel_setNumberOfLoops_ = objc.registerName("setNumberOfLoops:");
late final _sel_settings = objc.registerName("settings");

class AVAudioFormat extends objc.NSObject {
  AVAudioFormat._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [AVAudioFormat] that points to the same underlying object as [other].
  AVAudioFormat.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [AVAudioFormat] that wraps the given raw object pointer.
  AVAudioFormat.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [AVAudioFormat].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_AVAudioFormat);
  }

  AVAudioFormat? initWithStreamDescription_(
      ffi.Pointer<AudioStreamBasicDescription> asbd) {
    final _ret =
        _objc_msgSend_783(this.pointer, _sel_initWithStreamDescription_, asbd);
    return _ret.address == 0
        ? null
        : AVAudioFormat.castFromPointer(_ret, retain: true, release: true);
  }

  AVAudioFormat? initWithStreamDescription_channelLayout_(
      ffi.Pointer<AudioStreamBasicDescription> asbd,
      AVAudioChannelLayout? layout) {
    final _ret = _objc_msgSend_789(
        this.pointer,
        _sel_initWithStreamDescription_channelLayout_,
        asbd,
        layout?.pointer ?? ffi.nullptr);
    return _ret.address == 0
        ? null
        : AVAudioFormat.castFromPointer(_ret, retain: true, release: true);
  }

  AVAudioFormat? initStandardFormatWithSampleRate_channels_(
      double sampleRate, int channels) {
    final _ret = _objc_msgSend_790(this.pointer,
        _sel_initStandardFormatWithSampleRate_channels_, sampleRate, channels);
    return _ret.address == 0
        ? null
        : AVAudioFormat.castFromPointer(_ret, retain: true, release: true);
  }

  AVAudioFormat initStandardFormatWithSampleRate_channelLayout_(
      double sampleRate, AVAudioChannelLayout layout) {
    final _ret = _objc_msgSend_791(
        this.pointer,
        _sel_initStandardFormatWithSampleRate_channelLayout_,
        sampleRate,
        layout.pointer);
    return AVAudioFormat.castFromPointer(_ret, retain: true, release: true);
  }

  AVAudioFormat? initWithCommonFormat_sampleRate_channels_interleaved_(
      int format, double sampleRate, int channels, bool interleaved) {
    final _ret = _objc_msgSend_792(
        this.pointer,
        _sel_initWithCommonFormat_sampleRate_channels_interleaved_,
        format,
        sampleRate,
        channels,
        interleaved);
    return _ret.address == 0
        ? null
        : AVAudioFormat.castFromPointer(_ret, retain: true, release: true);
  }

  AVAudioFormat initWithCommonFormat_sampleRate_interleaved_channelLayout_(
      int format,
      double sampleRate,
      bool interleaved,
      AVAudioChannelLayout layout) {
    final _ret = _objc_msgSend_793(
        this.pointer,
        _sel_initWithCommonFormat_sampleRate_interleaved_channelLayout_,
        format,
        sampleRate,
        interleaved,
        layout.pointer);
    return AVAudioFormat.castFromPointer(_ret, retain: true, release: true);
  }

  AVAudioFormat? initWithSettings_(objc.NSDictionary settings) {
    final _ret = _objc_msgSend_311(
        this.pointer, _sel_initWithSettings_, settings.pointer);
    return _ret.address == 0
        ? null
        : AVAudioFormat.castFromPointer(_ret, retain: true, release: true);
  }

  AVAudioFormat initWithCMAudioFormatDescription_(
      ffi.Pointer<opaqueCMFormatDescription> formatDescription) {
    final _ret = _objc_msgSend_794(this.pointer,
        _sel_initWithCMAudioFormatDescription_, formatDescription);
    return AVAudioFormat.castFromPointer(_ret, retain: true, release: true);
  }

  bool isEqual_(objc.NSObject object) {
    return _objc_msgSend_0(this.pointer, _sel_isEqual_, object.pointer);
  }

  bool get standard {
    return _objc_msgSend_7(this.pointer, _sel_isStandard);
  }

  int get commonFormat {
    return _objc_msgSend_795(this.pointer, _sel_commonFormat);
  }

  int get channelCount {
    return _objc_msgSend_788(this.pointer, _sel_channelCount);
  }

  double get sampleRate {
    return objc.useMsgSendVariants
        ? _objc_msgSend_115Fpret(this.pointer, _sel_sampleRate)
        : _objc_msgSend_115(this.pointer, _sel_sampleRate);
  }

  bool get interleaved {
    return _objc_msgSend_7(this.pointer, _sel_isInterleaved);
  }

  ffi.Pointer<AudioStreamBasicDescription> get streamDescription {
    return _objc_msgSend_796(this.pointer, _sel_streamDescription);
  }

  AVAudioChannelLayout? get channelLayout {
    final _ret = _objc_msgSend_797(this.pointer, _sel_channelLayout);
    return _ret.address == 0
        ? null
        : AVAudioChannelLayout.castFromPointer(_ret,
            retain: true, release: true);
  }

  objc.NSData? get magicCookie {
    final _ret = _objc_msgSend_325(this.pointer, _sel_magicCookie);
    return _ret.address == 0
        ? null
        : objc.NSData.castFromPointer(_ret, retain: true, release: true);
  }

  set magicCookie(objc.NSData? value) {
    return _objc_msgSend_571(
        this.pointer, _sel_setMagicCookie_, value?.pointer ?? ffi.nullptr);
  }

  objc.NSDictionary get settings {
    final _ret = _objc_msgSend_112(this.pointer, _sel_settings);
    return objc.NSDictionary.castFromPointer(_ret, retain: true, release: true);
  }

  ffi.Pointer<opaqueCMFormatDescription> get formatDescription {
    return _objc_msgSend_798(this.pointer, _sel_formatDescription);
  }

  @override
  AVAudioFormat init() {
    final _ret = _objc_msgSend_40(this.pointer, _sel_init);
    return AVAudioFormat.castFromPointer(_ret, retain: true, release: true);
  }

  static AVAudioFormat new1() {
    final _ret = _objc_msgSend_40(_class_AVAudioFormat, _sel_new);
    return AVAudioFormat.castFromPointer(_ret, retain: false, release: true);
  }

  static AVAudioFormat allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret =
        _objc_msgSend_47(_class_AVAudioFormat, _sel_allocWithZone_, zone);
    return AVAudioFormat.castFromPointer(_ret, retain: false, release: true);
  }

  static AVAudioFormat alloc() {
    final _ret = _objc_msgSend_40(_class_AVAudioFormat, _sel_alloc);
    return AVAudioFormat.castFromPointer(_ret, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.NSObject aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.NSObject? anArgument) {
    _objc_msgSend_48(
        _class_AVAudioFormat,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  static void cancelPreviousPerformRequestsWithTarget_(objc.NSObject aTarget) {
    _objc_msgSend_49(_class_AVAudioFormat,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_7(
        _class_AVAudioFormat, _sel_accessInstanceVariablesDirectly);
  }

  static bool useStoredAccessor() {
    return _objc_msgSend_7(_class_AVAudioFormat, _sel_useStoredAccessor);
  }

  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_50(_class_AVAudioFormat,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_51(_class_AVAudioFormat,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_52(
        _class_AVAudioFormat,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_6(
        _class_AVAudioFormat, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSObject classForKeyedUnarchiver() {
    final _ret =
        _objc_msgSend_40(_class_AVAudioFormat, _sel_classForKeyedUnarchiver);
    return objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }
}

late final _class_AVAudioFormat = objc.getClass("AVAudioFormat");

final class AudioStreamBasicDescription extends ffi.Struct {
  @ffi.Double()
  external double mSampleRate;

  @ffi.UnsignedInt()
  external int mFormatID;

  @ffi.UnsignedInt()
  external int mFormatFlags;

  @ffi.UnsignedInt()
  external int mBytesPerPacket;

  @ffi.UnsignedInt()
  external int mFramesPerPacket;

  @ffi.UnsignedInt()
  external int mBytesPerFrame;

  @ffi.UnsignedInt()
  external int mChannelsPerFrame;

  @ffi.UnsignedInt()
  external int mBitsPerChannel;

  @ffi.UnsignedInt()
  external int mReserved;
}

late final _sel_initWithStreamDescription_ =
    objc.registerName("initWithStreamDescription:");
final _objc_msgSend_783 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<AudioStreamBasicDescription>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<AudioStreamBasicDescription>)>();

class AVAudioChannelLayout extends objc.NSObject {
  AVAudioChannelLayout._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [AVAudioChannelLayout] that points to the same underlying object as [other].
  AVAudioChannelLayout.castFrom(objc.ObjCObjectBase other)
      : this._(other.pointer, retain: true, release: true);

  /// Constructs a [AVAudioChannelLayout] that wraps the given raw object pointer.
  AVAudioChannelLayout.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [AVAudioChannelLayout].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_0(
        obj.pointer, _sel_isKindOfClass_, _class_AVAudioChannelLayout);
  }

  @override
  AVAudioChannelLayout init() {
    final _ret = _objc_msgSend_40(this.pointer, _sel_init);
    return AVAudioChannelLayout.castFromPointer(_ret,
        retain: true, release: true);
  }

  AVAudioChannelLayout? initWithLayoutTag_(int layoutTag) {
    final _ret =
        _objc_msgSend_784(this.pointer, _sel_initWithLayoutTag_, layoutTag);
    return _ret.address == 0
        ? null
        : AVAudioChannelLayout.castFromPointer(_ret,
            retain: true, release: true);
  }

  AVAudioChannelLayout initWithLayout_(ffi.Pointer<AudioChannelLayout> layout) {
    final _ret = _objc_msgSend_785(this.pointer, _sel_initWithLayout_, layout);
    return AVAudioChannelLayout.castFromPointer(_ret,
        retain: true, release: true);
  }

  bool isEqual_(objc.NSObject object) {
    return _objc_msgSend_0(this.pointer, _sel_isEqual_, object.pointer);
  }

  static AVAudioChannelLayout layoutWithLayoutTag_(int layoutTag) {
    final _ret = _objc_msgSend_786(
        _class_AVAudioChannelLayout, _sel_layoutWithLayoutTag_, layoutTag);
    return AVAudioChannelLayout.castFromPointer(_ret,
        retain: true, release: true);
  }

  static AVAudioChannelLayout layoutWithLayout_(
      ffi.Pointer<AudioChannelLayout> layout) {
    final _ret = _objc_msgSend_785(
        _class_AVAudioChannelLayout, _sel_layoutWithLayout_, layout);
    return AVAudioChannelLayout.castFromPointer(_ret,
        retain: true, release: true);
  }

  int get layoutTag {
    return _objc_msgSend_704(this.pointer, _sel_layoutTag);
  }

  ffi.Pointer<AudioChannelLayout> get layout {
    return _objc_msgSend_787(this.pointer, _sel_layout);
  }

  int get channelCount {
    return _objc_msgSend_788(this.pointer, _sel_channelCount);
  }

  static AVAudioChannelLayout new1() {
    final _ret = _objc_msgSend_40(_class_AVAudioChannelLayout, _sel_new);
    return AVAudioChannelLayout.castFromPointer(_ret,
        retain: false, release: true);
  }

  static AVAudioChannelLayout allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_47(
        _class_AVAudioChannelLayout, _sel_allocWithZone_, zone);
    return AVAudioChannelLayout.castFromPointer(_ret,
        retain: false, release: true);
  }

  static AVAudioChannelLayout alloc() {
    final _ret = _objc_msgSend_40(_class_AVAudioChannelLayout, _sel_alloc);
    return AVAudioChannelLayout.castFromPointer(_ret,
        retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      objc.NSObject aTarget,
      ffi.Pointer<objc.ObjCSelector> aSelector,
      objc.NSObject? anArgument) {
    _objc_msgSend_48(
        _class_AVAudioChannelLayout,
        _sel_cancelPreviousPerformRequestsWithTarget_selector_object_,
        aTarget.pointer,
        aSelector,
        anArgument?.pointer ?? ffi.nullptr);
  }

  static void cancelPreviousPerformRequestsWithTarget_(objc.NSObject aTarget) {
    _objc_msgSend_49(_class_AVAudioChannelLayout,
        _sel_cancelPreviousPerformRequestsWithTarget_, aTarget.pointer);
  }

  static bool getAccessInstanceVariablesDirectly() {
    return _objc_msgSend_7(
        _class_AVAudioChannelLayout, _sel_accessInstanceVariablesDirectly);
  }

  static bool useStoredAccessor() {
    return _objc_msgSend_7(_class_AVAudioChannelLayout, _sel_useStoredAccessor);
  }

  static objc.NSSet keyPathsForValuesAffectingValueForKey_(objc.NSString key) {
    final _ret = _objc_msgSend_50(_class_AVAudioChannelLayout,
        _sel_keyPathsForValuesAffectingValueForKey_, key.pointer);
    return objc.NSSet.castFromPointer(_ret, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(objc.NSString key) {
    return _objc_msgSend_51(_class_AVAudioChannelLayout,
        _sel_automaticallyNotifiesObserversForKey_, key.pointer);
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
      objc.NSArray keys, objc.NSString dependentKey) {
    _objc_msgSend_52(
        _class_AVAudioChannelLayout,
        _sel_setKeys_triggerChangeNotificationsForDependentKey_,
        keys.pointer,
        dependentKey.pointer);
  }

  static objc.NSArray classFallbacksForKeyedArchiver() {
    final _ret = _objc_msgSend_6(
        _class_AVAudioChannelLayout, _sel_classFallbacksForKeyedArchiver);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  static objc.NSObject classForKeyedUnarchiver() {
    final _ret = _objc_msgSend_40(
        _class_AVAudioChannelLayout, _sel_classForKeyedUnarchiver);
    return objc.NSObject.castFromPointer(_ret, retain: true, release: true);
  }
}

late final _class_AVAudioChannelLayout = objc.getClass("AVAudioChannelLayout");
late final _sel_initWithLayoutTag_ = objc.registerName("initWithLayoutTag:");
final _objc_msgSend_784 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedInt)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();

final class AudioChannelLayout extends ffi.Struct {
  @ffi.UnsignedInt()
  external int mChannelLayoutTag;

  @ffi.Int32()
  external int mChannelBitmap;

  @ffi.UnsignedInt()
  external int mNumberChannelDescriptions;

  @ffi.Array.multi([1])
  external ffi.Array<AudioChannelDescription> mChannelDescriptions;
}

abstract class AudioChannelBitmap {
  static const int kAudioChannelBit_Left = 1;
  static const int kAudioChannelBit_Right = 2;
  static const int kAudioChannelBit_Center = 4;
  static const int kAudioChannelBit_LFEScreen = 8;
  static const int kAudioChannelBit_LeftSurround = 16;
  static const int kAudioChannelBit_RightSurround = 32;
  static const int kAudioChannelBit_LeftCenter = 64;
  static const int kAudioChannelBit_RightCenter = 128;
  static const int kAudioChannelBit_CenterSurround = 256;
  static const int kAudioChannelBit_LeftSurroundDirect = 512;
  static const int kAudioChannelBit_RightSurroundDirect = 1024;
  static const int kAudioChannelBit_TopCenterSurround = 2048;
  static const int kAudioChannelBit_VerticalHeightLeft = 4096;
  static const int kAudioChannelBit_VerticalHeightCenter = 8192;
  static const int kAudioChannelBit_VerticalHeightRight = 16384;
  static const int kAudioChannelBit_TopBackLeft = 32768;
  static const int kAudioChannelBit_TopBackCenter = 65536;
  static const int kAudioChannelBit_TopBackRight = 131072;
  static const int kAudioChannelBit_LeftTopFront = 4096;
  static const int kAudioChannelBit_CenterTopFront = 8192;
  static const int kAudioChannelBit_RightTopFront = 16384;
  static const int kAudioChannelBit_LeftTopMiddle = 2097152;
  static const int kAudioChannelBit_CenterTopMiddle = 2048;
  static const int kAudioChannelBit_RightTopMiddle = 8388608;
  static const int kAudioChannelBit_LeftTopRear = 16777216;
  static const int kAudioChannelBit_CenterTopRear = 33554432;
  static const int kAudioChannelBit_RightTopRear = 67108864;
}

final class AudioChannelDescription extends ffi.Struct {
  @ffi.UnsignedInt()
  external int mChannelLabel;

  @ffi.Int32()
  external int mChannelFlags;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Float> mCoordinates;
}

abstract class AudioChannelFlags {
  static const int kAudioChannelFlags_AllOff = 0;
  static const int kAudioChannelFlags_RectangularCoordinates = 1;
  static const int kAudioChannelFlags_SphericalCoordinates = 2;
  static const int kAudioChannelFlags_Meters = 4;
}

late final _sel_initWithLayout_ = objc.registerName("initWithLayout:");
final _objc_msgSend_785 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<AudioChannelLayout>)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<AudioChannelLayout>)>();
late final _sel_isEqual_ = objc.registerName("isEqual:");
late final _sel_layoutWithLayoutTag_ =
    objc.registerName("layoutWithLayoutTag:");
final _objc_msgSend_786 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedInt)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_layoutWithLayout_ = objc.registerName("layoutWithLayout:");
late final _sel_layoutTag = objc.registerName("layoutTag");
late final _sel_layout = objc.registerName("layout");
final _objc_msgSend_787 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<AudioChannelLayout> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<AudioChannelLayout> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_channelCount = objc.registerName("channelCount");
final _objc_msgSend_788 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Uint32 Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_initWithStreamDescription_channelLayout_ =
    objc.registerName("initWithStreamDescription:channelLayout:");
final _objc_msgSend_789 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<AudioStreamBasicDescription>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<AudioStreamBasicDescription>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_initStandardFormatWithSampleRate_channels_ =
    objc.registerName("initStandardFormatWithSampleRate:channels:");
final _objc_msgSend_790 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Double, ffi.Uint32)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, double, int)>();
late final _sel_initStandardFormatWithSampleRate_channelLayout_ =
    objc.registerName("initStandardFormatWithSampleRate:channelLayout:");
final _objc_msgSend_791 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Double,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            double,
            ffi.Pointer<objc.ObjCObject>)>();

abstract class AVAudioCommonFormat {
  static const int AVAudioOtherFormat = 0;
  static const int AVAudioPCMFormatFloat32 = 1;
  static const int AVAudioPCMFormatFloat64 = 2;
  static const int AVAudioPCMFormatInt16 = 3;
  static const int AVAudioPCMFormatInt32 = 4;
}

late final _sel_initWithCommonFormat_sampleRate_channels_interleaved_ =
    objc.registerName("initWithCommonFormat:sampleRate:channels:interleaved:");
final _objc_msgSend_792 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Int32,
                ffi.Double,
                ffi.Uint32,
                ffi.Bool)>>()
    .asFunction<
        instancetype Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int, double, int, bool)>();
late final _sel_initWithCommonFormat_sampleRate_interleaved_channelLayout_ =
    objc.registerName(
        "initWithCommonFormat:sampleRate:interleaved:channelLayout:");
final _objc_msgSend_793 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Int32,
                ffi.Double,
                ffi.Bool,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int,
            double,
            bool,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_initWithSettings_ = objc.registerName("initWithSettings:");

final class opaqueCMFormatDescription extends ffi.Opaque {}

late final _sel_initWithCMAudioFormatDescription_ =
    objc.registerName("initWithCMAudioFormatDescription:");
final _objc_msgSend_794 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            instancetype Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<opaqueCMFormatDescription>)>>()
    .asFunction<
        instancetype Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<opaqueCMFormatDescription>)>();
late final _sel_isStandard = objc.registerName("isStandard");
late final _sel_commonFormat = objc.registerName("commonFormat");
final _objc_msgSend_795 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Int32 Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_isInterleaved = objc.registerName("isInterleaved");
late final _sel_streamDescription = objc.registerName("streamDescription");
final _objc_msgSend_796 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<AudioStreamBasicDescription> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<AudioStreamBasicDescription> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_channelLayout = objc.registerName("channelLayout");
final _objc_msgSend_797 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_magicCookie = objc.registerName("magicCookie");
late final _sel_setMagicCookie_ = objc.registerName("setMagicCookie:");
late final _sel_formatDescription = objc.registerName("formatDescription");
final _objc_msgSend_798 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<opaqueCMFormatDescription> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<opaqueCMFormatDescription> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
final _objc_msgSend_799 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_isMeteringEnabled = objc.registerName("isMeteringEnabled");
late final _sel_setMeteringEnabled_ = objc.registerName("setMeteringEnabled:");
late final _sel_updateMeters = objc.registerName("updateMeters");
late final _sel_peakPowerForChannel_ =
    objc.registerName("peakPowerForChannel:");
final _objc_msgSend_800 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Float Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedLong)>>()
    .asFunction<
        double Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
final _objc_msgSend_800Fpret = objc.msgSendFpretPointer
    .cast<
        ffi.NativeFunction<
            ffi.Float Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.UnsignedLong)>>()
    .asFunction<
        double Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_averagePowerForChannel_ =
    objc.registerName("averagePowerForChannel:");
late final _sel_channelAssignments = objc.registerName("channelAssignments");
late final _sel_setChannelAssignments_ =
    objc.registerName("setChannelAssignments:");
