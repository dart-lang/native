// Copyright (c) 2023, the Dart project authors.  Please see the AUTHORS file
// for details. All rights reserved. Use of this source code is governed by a
// BSD-style license that can be found in the LICENSE file.

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// <fcntl.h>
@ffi.Native<ffi.Int64 Function(ffi.Pointer<ffi.Char>, ffi.Int64, ffi.Int64)>(
    symbol: 'my_open')
external int open(
  ffi.Pointer<ffi.Char> pathname,
  int flags,
  int mode,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>(
    symbol: 'my_rename')
external int rename(
  ffi.Pointer<ffi.Char> old,
  ffi.Pointer<ffi.Char> new$,
);

/// <unistd.h>
@ffi.Native<ffi.Int64 Function(ffi.Int64)>(symbol: 'my_close')
external int close(
  int fd,
);

@ffi.Native<ffi.Int64 Function(ffi.Int64, ffi.Pointer<ffi.Char>, ffi.Int64)>()
external int unlinkat(
  int dirfd,
  ffi.Pointer<ffi.Char> pathname,
  int flags,
);

/// <errno.h>
@ffi.Native<ffi.Void Function(ffi.Int64)>(symbol: 'my_seterrno')
external void seterrno(
  int err,
);

@ffi.Native<ffi.Int64 Function()>(symbol: 'my_errno')
external int errno();

/// <stdlib.h>
@ffi.Native<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>(
    symbol: 'my_getenv')
external ffi.Pointer<ffi.Char> getenv(
  ffi.Pointer<ffi.Char> name,
);

@ffi.Native<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>(
    symbol: 'my_mkdtemp')
external ffi.Pointer<ffi.Char> mkdtemp(
  ffi.Pointer<ffi.Char> template,
);

@ffi.Native<ffi.Int64 Function(ffi.Pointer<DIR>)>(symbol: 'my_closedir')
external int closedir(
  ffi.Pointer<DIR> d,
);

@ffi.Native<ffi.Pointer<DIR> Function(ffi.Pointer<ffi.Char>)>(
    symbol: 'my_opendir')
external ffi.Pointer<DIR> opendir(
  ffi.Pointer<ffi.Char> path,
);

@ffi.Native<ffi.Pointer<dirent> Function(ffi.Pointer<DIR>)>(
    symbol: 'my_readdir')
external ffi.Pointer<dirent> readdir(
  ffi.Pointer<DIR> d,
);

@ffi.Native<ffi.Int64 Function(ffi.Pointer<ffi.Char>, ffi.Int64)>(
    symbol: 'my_mkdir')
external int mkdir(
  ffi.Pointer<ffi.Char> pathname,
  int mode,
);

@ffi.Native<ffi.Int64 Function(ffi.Pointer<ffi.Char>, ffi.Pointer<Stat>)>(
    symbol: 'my_stat')
external int stat(
  ffi.Pointer<ffi.Char> path,
  ffi.Pointer<Stat> buf,
);

@ffi.Native<ffi.Int64 Function(ffi.Pointer<ffi.Char>, ffi.Pointer<Stat>)>(
    symbol: 'my_lstat')
external int lstat(
  ffi.Pointer<ffi.Char> path,
  ffi.Pointer<Stat> buf,
);

@ffi.Native<ffi.Int64 Function(ffi.Int64, ffi.Pointer<Stat>)>(
    symbol: 'my_fstat')
external int fstat(
  int fd,
  ffi.Pointer<Stat> buf,
);

/// <dirent.h>
final class dirent extends ffi.Struct {
  @ffi.Int64()
  external int d_ino;

  @ffi.Array.multi([512])
  external ffi.Array<ffi.Char> d_name;
}

final class DIR extends ffi.Struct {
  external dirent my_dirent;

  external ffi.Pointer<ffi.Void> _dir;
}

/// <sys/stat.h>
final class timespec extends ffi.Struct {
  @ffi.Int64()
  external int tv_sec;

  @ffi.Int64()
  external int tv_nsec;
}

final class Stat extends ffi.Struct {
  @ffi.Int64()
  external int st_dev;

  @ffi.Int64()
  external int st_ino;

  @ffi.Int64()
  external int st_mode;

  @ffi.Int64()
  external int st_nlink;

  @ffi.Int64()
  external int std_uid;

  external timespec st_atim;

  external timespec st_mtim;

  external timespec st_ctim;

  /// Only valid on macOS/iOS
  external timespec st_btime;

  /// Only valid on macOS/iOS
  @ffi.Int64()
  external int st_flags;
}
