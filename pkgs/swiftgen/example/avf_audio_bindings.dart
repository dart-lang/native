// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;
import 'package:objective_c/objective_c.dart' as objc;

final class _NSZone extends ffi.Opaque {}

/// WARNING: AVAudioFormatWrapper is a stub. To generate bindings for this class, include
/// AVAudioFormatWrapper in your config's objc-interfaces list.
///
/// AVAudioFormatWrapper
class AVAudioFormatWrapper extends objc.NSObject {
  AVAudioFormatWrapper._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [AVAudioFormatWrapper] that points to the same underlying object as [other].
  AVAudioFormatWrapper.castFrom(objc.ObjCObjectBase other)
      : this._(other.ref.pointer, retain: true, release: true);

  /// Constructs a [AVAudioFormatWrapper] that wraps the given raw object pointer.
  AVAudioFormatWrapper.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);
}

late final _class_AVAudioPlayerWrapper =
    objc.getClass("AVFAudioWrapper.AVAudioPlayerWrapper");
late final _sel_isKindOfClass_ = objc.registerName("isKindOfClass:");
final _objc_msgSend_69e0x1 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        bool Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_currentDevice = objc.registerName("currentDevice");
final _objc_msgSend_1x359cv = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setCurrentDevice_ = objc.registerName("setCurrentDevice:");
final _objc_msgSend_1jdvcbf = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_currentTime = objc.registerName("currentTime");
final _objc_msgSend_1ukqyt8 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Double Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        double Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
final _objc_msgSend_1ukqyt8Fpret = objc.msgSendFpretPointer
    .cast<
        ffi.NativeFunction<
            ffi.Double Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        double Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setCurrentTime_ = objc.registerName("setCurrentTime:");
final _objc_msgSend_hwm8nu = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Double)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, double)>();
late final _sel_deviceCurrentTime = objc.registerName("deviceCurrentTime");
late final _sel_duration = objc.registerName("duration");
late final _sel_enableRate = objc.registerName("enableRate");
final _objc_msgSend_91o635 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setEnableRate_ = objc.registerName("setEnableRate:");
final _objc_msgSend_1s56lr9 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Bool)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, bool)>();
late final _sel_format = objc.registerName("format");
late final _sel_isMeteringEnabled = objc.registerName("isMeteringEnabled");
late final _sel_setIsMeteringEnabled_ =
    objc.registerName("setIsMeteringEnabled:");
late final _sel_numberOfChannels = objc.registerName("numberOfChannels");
final _objc_msgSend_1hz7y9r = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Long Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_numberOfLoops = objc.registerName("numberOfLoops");
late final _sel_setNumberOfLoops_ = objc.registerName("setNumberOfLoops:");
final _objc_msgSend_4sp4xj = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Long)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_pan = objc.registerName("pan");
final _objc_msgSend_2cgrxl = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Float Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        double Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
final _objc_msgSend_2cgrxlFpret = objc.msgSendFpretPointer
    .cast<
        ffi.NativeFunction<
            ffi.Float Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        double Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setPan_ = objc.registerName("setPan:");
final _objc_msgSend_v5hmet = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Float)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, double)>();
late final _sel_isPlaying = objc.registerName("isPlaying");
late final _sel_rate = objc.registerName("rate");
late final _sel_setRate_ = objc.registerName("setRate:");
late final _sel_url = objc.registerName("url");
late final _sel_volume = objc.registerName("volume");
late final _sel_setVolume_ = objc.registerName("setVolume:");
typedef instancetype = ffi.Pointer<objc.ObjCObject>;
typedef Dartinstancetype = objc.ObjCObjectBase;
late final _sel_initWithContentsOf_error_ =
    objc.registerName("initWithContentsOf:error:");
final _objc_msgSend_1705co6 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_initWithContentsOf_fileTypeHint_error_ =
    objc.registerName("initWithContentsOf:fileTypeHint:error:");
final _objc_msgSend_bo6ep4 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<ffi.Pointer<objc.ObjCObject>>)>();
late final _sel_averagePowerForChannel_ =
    objc.registerName("averagePowerForChannel:");
final _objc_msgSend_1o3b4v9 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Float Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Long)>>()
    .asFunction<
        double Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
final _objc_msgSend_1o3b4v9Fpret = objc.msgSendFpretPointer
    .cast<
        ffi.NativeFunction<
            ffi.Float Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Long)>>()
    .asFunction<
        double Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_pause = objc.registerName("pause");
final _objc_msgSend_1pl9qdv = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        void Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_peakPowerForChannel_ =
    objc.registerName("peakPowerForChannel:");
late final _sel_play = objc.registerName("play");
late final _sel_playAtTime_ = objc.registerName("playAtTime:");
final _objc_msgSend_18chyc = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Double)>>()
    .asFunction<
        bool Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, double)>();
late final _sel_prepareToPlay = objc.registerName("prepareToPlay");
late final _sel_setVolume_fadeDuration_ =
    objc.registerName("setVolume:fadeDuration:");
final _objc_msgSend_1p4uk9e = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Float, ffi.Double)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, double, double)>();
late final _sel_stop = objc.registerName("stop");
late final _sel_updateMeters = objc.registerName("updateMeters");
late final _sel_init = objc.registerName("init");
late final _sel_new = objc.registerName("new");
late final _sel_allocWithZone_ = objc.registerName("allocWithZone:");
final _objc_msgSend_hzlb60 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<_NSZone>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<_NSZone>)>();
late final _sel_alloc = objc.registerName("alloc");
late final _sel_self = objc.registerName("self");
ffi.Pointer<objc.ObjCObject> _ObjCBlock_objcObjCObject_ffiVoid_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block, ffi.Pointer<ffi.Void> arg0) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Pointer<objc.ObjCObject> Function(
                    ffi.Pointer<ffi.Void> arg0)>>()
        .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<ffi.Void>)>()(arg0);
ffi.Pointer<ffi.Void> _ObjCBlock_objcObjCObject_ffiVoid_fnPtrCallable =
    ffi.Pointer.fromFunction<
                ffi.Pointer<objc.ObjCObject> Function(
                    ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<ffi.Void>)>(
            _ObjCBlock_objcObjCObject_ffiVoid_fnPtrTrampoline)
        .cast();
ffi.Pointer<objc.ObjCObject>
    _ObjCBlock_objcObjCObject_ffiVoid_closureTrampoline(
            ffi.Pointer<objc.ObjCBlockImpl> block,
            ffi.Pointer<ffi.Void> arg0) =>
        (objc.getBlockClosure(block) as ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<ffi.Void>))(arg0);
ffi.Pointer<ffi.Void> _ObjCBlock_objcObjCObject_ffiVoid_closureCallable =
    ffi.Pointer.fromFunction<
                ffi.Pointer<objc.ObjCObject> Function(
                    ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<ffi.Void>)>(
            _ObjCBlock_objcObjCObject_ffiVoid_closureTrampoline)
        .cast();

/// Construction methods for `objc.ObjCBlock<ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<ffi.Void>)>`.
abstract final class ObjCBlock_objcObjCObject_ffiVoid {
  /// Returns a block that wraps the given raw block pointer.
  static objc
      .ObjCBlock<ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<ffi.Void>)>
      castFromPointer(ffi.Pointer<objc.ObjCBlockImpl> pointer,
              {bool retain = false, bool release = false}) =>
          objc.ObjCBlock<
                  ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<ffi.Void>)>(
              pointer,
              retain: retain,
              release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<ffi.Void>)>
      fromFunctionPointer(
              ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Pointer<objc.ObjCObject> Function(
                              ffi.Pointer<ffi.Void> arg0)>>
                  ptr) =>
          objc.ObjCBlock<ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<ffi.Void>)>(
              objc.newPointerBlock(_ObjCBlock_objcObjCObject_ffiVoid_fnPtrCallable, ptr.cast()),
              retain: false,
              release: true);

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc
      .ObjCBlock<ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<ffi.Void>)>
      fromFunction(objc.ObjCObjectBase Function(ffi.Pointer<ffi.Void>) fn) =>
          objc.ObjCBlock<
                  ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<ffi.Void>)>(
              objc.newClosureBlock(
                  _ObjCBlock_objcObjCObject_ffiVoid_closureCallable,
                  (ffi.Pointer<ffi.Void> arg0) =>
                      fn(arg0).ref.retainAndAutorelease()),
              retain: false,
              release: true);
}

/// Call operator for `objc.ObjCBlock<ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<ffi.Void>)>`.
extension ObjCBlock_objcObjCObject_ffiVoid_CallExtension on objc
    .ObjCBlock<ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<ffi.Void>)> {
  objc.ObjCObjectBase call(ffi.Pointer<ffi.Void> arg0) => objc.ObjCObjectBase(
      ref.pointer.ref.invoke
          .cast<
              ffi.NativeFunction<
                  ffi.Pointer<objc.ObjCObject> Function(
                      ffi.Pointer<objc.ObjCBlockImpl> block,
                      ffi.Pointer<ffi.Void> arg0)>>()
          .asFunction<
              ffi.Pointer<objc.ObjCObject> Function(
                  ffi.Pointer<objc.ObjCBlockImpl>,
                  ffi.Pointer<ffi.Void>)>()(ref.pointer, arg0),
      retain: true,
      release: true);
}

late final _sel_retain = objc.registerName("retain");
late final _sel_autorelease = objc.registerName("autorelease");

/// AVAudioPlayerWrapper
class AVAudioPlayerWrapper extends objc.NSObject {
  AVAudioPlayerWrapper._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [AVAudioPlayerWrapper] that points to the same underlying object as [other].
  AVAudioPlayerWrapper.castFrom(objc.ObjCObjectBase other)
      : this._(other.ref.pointer, retain: true, release: true);

  /// Constructs a [AVAudioPlayerWrapper] that wraps the given raw object pointer.
  AVAudioPlayerWrapper.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [AVAudioPlayerWrapper].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_69e0x1(
        obj.ref.pointer, _sel_isKindOfClass_, _class_AVAudioPlayerWrapper);
  }

  /// currentDevice
  objc.NSString? get currentDevice {
    final _ret = _objc_msgSend_1x359cv(this.ref.pointer, _sel_currentDevice);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setCurrentDevice:
  set currentDevice(objc.NSString? value) {
    _objc_msgSend_1jdvcbf(this.ref.pointer, _sel_setCurrentDevice_,
        value?.ref.pointer ?? ffi.nullptr);
  }

  /// currentTime
  double get currentTime {
    return objc.useMsgSendVariants
        ? _objc_msgSend_1ukqyt8Fpret(this.ref.pointer, _sel_currentTime)
        : _objc_msgSend_1ukqyt8(this.ref.pointer, _sel_currentTime);
  }

  /// setCurrentTime:
  set currentTime(double value) {
    _objc_msgSend_hwm8nu(this.ref.pointer, _sel_setCurrentTime_, value);
  }

  /// deviceCurrentTime
  double get deviceCurrentTime {
    return objc.useMsgSendVariants
        ? _objc_msgSend_1ukqyt8Fpret(this.ref.pointer, _sel_deviceCurrentTime)
        : _objc_msgSend_1ukqyt8(this.ref.pointer, _sel_deviceCurrentTime);
  }

  /// duration
  double get duration {
    return objc.useMsgSendVariants
        ? _objc_msgSend_1ukqyt8Fpret(this.ref.pointer, _sel_duration)
        : _objc_msgSend_1ukqyt8(this.ref.pointer, _sel_duration);
  }

  /// enableRate
  bool get enableRate {
    return _objc_msgSend_91o635(this.ref.pointer, _sel_enableRate);
  }

  /// setEnableRate:
  set enableRate(bool value) {
    _objc_msgSend_1s56lr9(this.ref.pointer, _sel_setEnableRate_, value);
  }

  /// format
  AVAudioFormatWrapper get format {
    final _ret = _objc_msgSend_1x359cv(this.ref.pointer, _sel_format);
    return AVAudioFormatWrapper.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// isMeteringEnabled
  bool get isMeteringEnabled {
    return _objc_msgSend_91o635(this.ref.pointer, _sel_isMeteringEnabled);
  }

  /// setIsMeteringEnabled:
  set isMeteringEnabled(bool value) {
    _objc_msgSend_1s56lr9(this.ref.pointer, _sel_setIsMeteringEnabled_, value);
  }

  /// numberOfChannels
  int get numberOfChannels {
    return _objc_msgSend_1hz7y9r(this.ref.pointer, _sel_numberOfChannels);
  }

  /// numberOfLoops
  int get numberOfLoops {
    return _objc_msgSend_1hz7y9r(this.ref.pointer, _sel_numberOfLoops);
  }

  /// setNumberOfLoops:
  set numberOfLoops(int value) {
    _objc_msgSend_4sp4xj(this.ref.pointer, _sel_setNumberOfLoops_, value);
  }

  /// pan
  double get pan {
    return objc.useMsgSendVariants
        ? _objc_msgSend_2cgrxlFpret(this.ref.pointer, _sel_pan)
        : _objc_msgSend_2cgrxl(this.ref.pointer, _sel_pan);
  }

  /// setPan:
  set pan(double value) {
    _objc_msgSend_v5hmet(this.ref.pointer, _sel_setPan_, value);
  }

  /// isPlaying
  bool get isPlaying {
    return _objc_msgSend_91o635(this.ref.pointer, _sel_isPlaying);
  }

  /// rate
  double get rate {
    return objc.useMsgSendVariants
        ? _objc_msgSend_2cgrxlFpret(this.ref.pointer, _sel_rate)
        : _objc_msgSend_2cgrxl(this.ref.pointer, _sel_rate);
  }

  /// setRate:
  set rate(double value) {
    _objc_msgSend_v5hmet(this.ref.pointer, _sel_setRate_, value);
  }

  /// url
  objc.NSURL? get url {
    final _ret = _objc_msgSend_1x359cv(this.ref.pointer, _sel_url);
    return _ret.address == 0
        ? null
        : objc.NSURL.castFromPointer(_ret, retain: true, release: true);
  }

  /// volume
  double get volume {
    return objc.useMsgSendVariants
        ? _objc_msgSend_2cgrxlFpret(this.ref.pointer, _sel_volume)
        : _objc_msgSend_2cgrxl(this.ref.pointer, _sel_volume);
  }

  /// setVolume:
  set volume(double value) {
    _objc_msgSend_v5hmet(this.ref.pointer, _sel_setVolume_, value);
  }

  /// initWithContentsOf:error:
  AVAudioPlayerWrapper? initWithContentsOf_error_(
      objc.NSURL url, ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    final _ret = _objc_msgSend_1705co6(this.ref.retainAndReturnPointer(),
        _sel_initWithContentsOf_error_, url.ref.pointer, error);
    return _ret.address == 0
        ? null
        : AVAudioPlayerWrapper.castFromPointer(_ret,
            retain: false, release: true);
  }

  /// initWithContentsOf:fileTypeHint:error:
  AVAudioPlayerWrapper? initWithContentsOf_fileTypeHint_error_(
      objc.NSURL url,
      objc.NSString? utiString,
      ffi.Pointer<ffi.Pointer<objc.ObjCObject>> error) {
    final _ret = _objc_msgSend_bo6ep4(
        this.ref.retainAndReturnPointer(),
        _sel_initWithContentsOf_fileTypeHint_error_,
        url.ref.pointer,
        utiString?.ref.pointer ?? ffi.nullptr,
        error);
    return _ret.address == 0
        ? null
        : AVAudioPlayerWrapper.castFromPointer(_ret,
            retain: false, release: true);
  }

  /// averagePowerForChannel:
  double averagePowerForChannel_(int channelNumber) {
    return objc.useMsgSendVariants
        ? _objc_msgSend_1o3b4v9Fpret(
            this.ref.pointer, _sel_averagePowerForChannel_, channelNumber)
        : _objc_msgSend_1o3b4v9(
            this.ref.pointer, _sel_averagePowerForChannel_, channelNumber);
  }

  /// pause
  void pause() {
    _objc_msgSend_1pl9qdv(this.ref.pointer, _sel_pause);
  }

  /// peakPowerForChannel:
  double peakPowerForChannel_(int channelNumber) {
    return objc.useMsgSendVariants
        ? _objc_msgSend_1o3b4v9Fpret(
            this.ref.pointer, _sel_peakPowerForChannel_, channelNumber)
        : _objc_msgSend_1o3b4v9(
            this.ref.pointer, _sel_peakPowerForChannel_, channelNumber);
  }

  /// play
  bool play() {
    return _objc_msgSend_91o635(this.ref.pointer, _sel_play);
  }

  /// playAtTime:
  bool playAtTime_(double time) {
    return _objc_msgSend_18chyc(this.ref.pointer, _sel_playAtTime_, time);
  }

  /// prepareToPlay
  bool prepareToPlay() {
    return _objc_msgSend_91o635(this.ref.pointer, _sel_prepareToPlay);
  }

  /// setVolume:fadeDuration:
  void setVolume_fadeDuration_(double volume, double duration) {
    _objc_msgSend_1p4uk9e(
        this.ref.pointer, _sel_setVolume_fadeDuration_, volume, duration);
  }

  /// stop
  void stop() {
    _objc_msgSend_1pl9qdv(this.ref.pointer, _sel_stop);
  }

  /// updateMeters
  void updateMeters() {
    _objc_msgSend_1pl9qdv(this.ref.pointer, _sel_updateMeters);
  }

  /// init
  AVAudioPlayerWrapper init() {
    final _ret =
        _objc_msgSend_1x359cv(this.ref.retainAndReturnPointer(), _sel_init);
    return AVAudioPlayerWrapper.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// new
  static AVAudioPlayerWrapper new1() {
    final _ret = _objc_msgSend_1x359cv(_class_AVAudioPlayerWrapper, _sel_new);
    return AVAudioPlayerWrapper.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// allocWithZone:
  static AVAudioPlayerWrapper allocWithZone_(ffi.Pointer<_NSZone> zone) {
    final _ret = _objc_msgSend_hzlb60(
        _class_AVAudioPlayerWrapper, _sel_allocWithZone_, zone);
    return AVAudioPlayerWrapper.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static AVAudioPlayerWrapper alloc() {
    final _ret = _objc_msgSend_1x359cv(_class_AVAudioPlayerWrapper, _sel_alloc);
    return AVAudioPlayerWrapper.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// self
  AVAudioPlayerWrapper self() {
    final _ret = _objc_msgSend_1x359cv(this.ref.pointer, _sel_self);
    return AVAudioPlayerWrapper.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// retain
  AVAudioPlayerWrapper retain() {
    final _ret = _objc_msgSend_1x359cv(this.ref.pointer, _sel_retain);
    return AVAudioPlayerWrapper.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// autorelease
  AVAudioPlayerWrapper autorelease() {
    final _ret = _objc_msgSend_1x359cv(this.ref.pointer, _sel_autorelease);
    return AVAudioPlayerWrapper.castFromPointer(_ret,
        retain: true, release: true);
  }
}
